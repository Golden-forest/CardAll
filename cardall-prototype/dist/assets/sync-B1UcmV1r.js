import{D as c}from"./database-DxqBSE4h.js";import"./vendor-oiyroGFu.js";class l extends c{cards;folders;tags;images;settings;sessions;constructor(){super("CardAllDatabase"),this.version(1).stores({cards:"++id, folderId, searchVector, thumbnailUrl, createdAt, updatedAt",folders:"++id, name, color, parentId, cardIds, depth, fullPath, order, createdAt, updatedAt",tags:"++id, name, color, count, isHidden, createdAt",images:"++id, cardId, fileName, filePath, thumbnailPath, storageMode, createdAt, updatedAt",settings:"++id, key, scope, updatedAt",sessions:"++id, userId, sessionToken, expiresAt, lastActiveAt, createdAt, updatedAt"}),this.setupEventListeners()}setupEventListeners(){this.cards.hook("creating",(t,e,a)=>{e.createdAt||(e.createdAt=new Date),e.updatedAt||(e.updatedAt=new Date)}),this.cards.hook("updating",(t,e,a,i)=>{t.updatedAt=new Date}),this.folders.hook("creating",(t,e,a)=>{e.createdAt||(e.createdAt=new Date),e.updatedAt||(e.updatedAt=new Date)}),this.folders.hook("updating",(t,e,a,i)=>{t.updatedAt=new Date}),this.tags.hook("creating",(t,e,a)=>{e.createdAt||(e.createdAt=new Date),e.updatedAt||(e.updatedAt=new Date)}),this.tags.hook("updating",(t,e,a,i)=>{t.updatedAt=new Date}),this.images.hook("creating",(t,e,a)=>{e.createdAt||(e.createdAt=new Date),e.updatedAt||(e.updatedAt=new Date)}),this.images.hook("updating",(t,e,a,i)=>{t.updatedAt=new Date})}async clearAll(){await Promise.all([this.cards.clear(),this.folders.clear(),this.tags.clear(),this.images.clear(),this.settings.clear(),this.sessions.clear()])}async exportAll(){const[t,e,a,i,r]=await Promise.all([this.cards.toArray(),this.folders.toArray(),this.tags.toArray(),this.images.toArray(),this.settings.toArray()]);return{cards:t,folders:e,tags:a,images:i,settings:r}}async importAll(t){await this.transaction("rw",this.cards,this.folders,this.tags,this.images,this.settings,async()=>{t.cards&&(await this.cards.clear(),await this.cards.bulkAdd(t.cards)),t.folders&&(await this.folders.clear(),await this.folders.bulkAdd(t.folders)),t.tags&&(await this.tags.clear(),await this.tags.bulkAdd(t.tags)),t.images&&(await this.images.clear(),await this.images.bulkAdd(t.images)),t.settings&&(await this.settings.clear(),await this.settings.bulkAdd(t.settings))})}async healthCheck(){const t=[];try{const[e,a,i,r,d]=await Promise.all([this.cards.count(),this.folders.count(),this.tags.count(),this.images.count(),this.settings.count()]);e===0&&a===0&&i===0&&console.log("Database appears to be empty (new installation)");const o=await this.getOrphanedImagesCount();return o>0&&t.push(`Found ${o} orphaned images`),{healthy:t.length===0,issues:t,stats:{cards:e,folders:a,tags:i,images:r,settings:d}}}catch(e){return t.push(`Database health check failed: ${e instanceof Error?e.message:String(e)}`),{healthy:!1,issues:t,stats:{cards:0,folders:0,tags:0,images:0,settings:0}}}}async getOrphanedImagesCount(){try{const t=await this.images.toCollection().primaryKeys(),e=await this.cards.toCollection().primaryKeys();return t.filter(i=>{const r=this.images.get(i);return!e.includes(r?.cardId)}).length}catch(t){return console.warn("Failed to check for orphaned images:",t),0}}async optimize(){try{await this.cleanupOrphanedData(),console.log("Database optimization completed")}catch(t){console.error("Database optimization failed:",t)}}async cleanupOrphanedData(){try{const t=await this.cards.toCollection().primaryKeys();await this.images.where("cardId").noneOf(t).delete()}catch(t){console.warn("Failed to cleanup orphaned data:",t)}}}async function p(){try{console.log("正在初始化数据库..."),await n.open();const s=await n.healthCheck();s.healthy?(console.log("数据库初始化完成，状态良好"),console.log("数据库统计:",s.stats)):(console.warn("数据库初始化完成，但发现问题:",s.issues),await n.optimize(),console.log("数据库优化完成")),await h(),console.log("数据库完全初始化完成")}catch(s){throw console.error("数据库初始化失败:",s),new Error(`数据库初始化失败: ${s instanceof Error?s.message:"未知错误"}`)}}async function h(){try{if((await n.settings.toArray()).length===0){const t=[{key:"app_version",value:"5.6.5",scope:"global",updatedAt:new Date},{key:"theme",value:"light",scope:"user",updatedAt:new Date},{key:"language",value:"zh-CN",scope:"user",updatedAt:new Date},{key:"auto_save",value:!0,scope:"user",updatedAt:new Date},{key:"cloud_sync_disabled",value:!0,scope:"global",updatedAt:new Date}];await n.settings.bulkAdd(t),console.log("默认设置已创建")}}catch(s){console.warn("创建默认设置失败:",s)}}const n=new l;export{l as CardAllDatabase,n as db,p as initializeDatabase};

{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\services\\data-migration\\DataMigrationTool.error-handling.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\services\\data-migration\\DataMigrationTool.error-handling.test.ts"],"sourcesContent":["/**\n * 迁移错误处理和回滚测试\n */\n\nimport { dataMigrationTool } from '@/services/data-migration-tool'\nimport { db } from '@/services/database-unified'\nimport { TestDataFactory, MigrationTestHelpers } from './test-utils'\nimport { setup } from './setup'\n\ndescribe('DataMigrationTool - 迁移错误处理和回滚测试', () => {\n  const {\n    setupLocalStorageData,\n    cleanupLocalStorage,\n    validateMigrationResult,\n    createProgressListener\n  } = MigrationTestHelpers\n\n  describe('迁移步骤错误处理', () => {\n    beforeEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    afterEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    test('应该处理数据源验证错误', async () => {\n      // 设置无效的localStorage数据\n      localStorage.setItem('cardall-cards', 'invalid-json{')\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      // 应该能够处理验证错误，迁移可能部分成功\n      expect(result).toBeDefined()\n      expect(result.executedAt).toBeInstanceOf(Date)\n      expect(result.errors.length).toBeGreaterThan(0)\n      expect(result.errors.some(error => error.includes('Invalid cards data format'))).toBe(true)\n\n      cleanupLocalStorage()\n    })\n\n    test('应该处理数据库操作失败', async () => {\n      const testData = TestDataFactory.createBulkTestData(3, 1, 2)\n      setupLocalStorageData(testData)\n\n      // 模拟数据库bulkAdd失败\n      const originalBulkAdd = db.cards.bulkAdd\n      db.cards.bulkAdd = jest.fn().mockRejectedValue(new Error('Database constraint violation'))\n\n      try {\n        const source = {\n          type: 'localStorage' as const,\n          version: '1.0'\n        }\n\n        const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n        const result = await dataMigrationTool.executeMigration(plan)\n\n        // 应该记录错误信息\n        expect(result.errors.length).toBeGreaterThan(0)\n        expect(result.errors.some(error => error.includes('Database constraint violation'))).toBe(true)\n\n        // 应该尝试重试\n        expect(result.stepsCompleted).toBeLessThan(plan.steps.length)\n\n      } finally {\n        // 恢复原始方法\n        db.cards.bulkAdd = originalBulkAdd\n        cleanupLocalStorage()\n      }\n    })\n\n    test('应该处理文件系统错误', async () => {\n      const imageCard = TestDataFactory.createCardWithImage()\n      setupLocalStorageData({ cards: [imageCard] })\n\n      // 模拟文件系统服务失败\n      const originalFileSystem = (global as any).fileSystemService\n      ;(global as any).fileSystemService = {\n        saveImage: jest.fn().mockRejectedValue(new Error('File system write failed'))\n      }\n\n      try {\n        const source = {\n          type: 'localStorage' as const,\n          version: '1.0'\n        }\n\n        const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n        const result = await dataMigrationTool.executeMigration(plan)\n\n        // 应该处理图片迁移失败\n        expect(result.errors.length).toBeGreaterThan(0)\n        expect(result.errors.some(error => error.includes('File system write failed'))).toBe(true)\n\n        // 其他数据应该仍然能够迁移\n        expect(result.migratedCards).toBe(1)\n\n      } finally {\n        // 恢复原始服务\n        if (originalFileSystem) {\n          ;(global as any).fileSystemService = originalFileSystem\n        }\n        cleanupLocalStorage()\n      }\n    })\n\n    test('应该处理内存不足错误', async () => {\n      const largeData = TestDataFactory.createBulkTestData(1000, 100, 200)\n      setupLocalStorageData(largeData)\n\n      // 模拟内存不足\n      const originalCreateRollbackPoint = (dataMigrationTool as any).createRollbackPoint\n      ;(dataMigrationTool as any).createRollbackPoint = jest.fn()\n        .mockRejectedValueOnce(new Error('Out of memory'))\n        .mockResolvedValueOnce('test-rollback-point')\n\n      try {\n        const source = {\n          type: 'localStorage' as const,\n          version: '1.0'\n        }\n\n        const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n        const result = await dataMigrationTool.executeMigration(plan)\n\n        // 应该重试并最终成功\n        expect(result.success).toBe(true)\n\n      } finally {\n        // 恢复原始方法\n        (dataMigrationTool as any).createRollbackPoint = originalCreateRollbackPoint\n        cleanupLocalStorage()\n      }\n    })\n  })\n\n  describe('必需步骤失败处理', () => {\n    beforeEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    afterEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    test('应该在必需步骤失败时停止迁移', async () => {\n      const testData = TestDataFactory.createBulkTestData(2, 1, 1)\n      setupLocalStorageData(testData)\n\n      // 模拟必需步骤（源验证）失败\n      const originalValidateSource = (dataMigrationTool as any).validateSource\n      ;(dataMigrationTool as any).validateSource = jest.fn()\n        .mockResolvedValue({\n          success: false,\n          error: 'Critical validation failure'\n        })\n\n      try {\n        const source = {\n          type: 'localStorage' as const,\n          version: '1.0'\n        }\n\n        const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n        const result = await dataMigrationTool.executeMigration(plan)\n\n        // 必需步骤失败应该导致整个迁移失败\n        expect(result.success).toBe(false)\n        expect(result.errors.some(error => error.includes('Critical validation failure'))).toBe(true)\n        expect(result.stepsCompleted).toBe(0) // 没有步骤完成\n\n      } finally {\n        // 恢复原始方法\n        (dataMigrationTool as any).validateSource = originalValidateSource\n        cleanupLocalStorage()\n      }\n    })\n\n    test('应该在可选步骤失败时继续迁移', async () => {\n      const testData = TestDataFactory.createBulkTestData(2, 1, 1)\n      setupLocalStorageData(testData)\n\n      // 模拟可选步骤（清理）失败\n      const originalCleanupSource = (dataMigrationTool as any).cleanupSource\n      ;(dataMigrationTool as any).cleanupSource = jest.fn()\n        .mockResolvedValue({\n          success: false,\n          error: 'Cleanup failed'\n        })\n\n      try {\n        const source = {\n          type: 'localStorage' as const,\n          version: '1.0'\n        }\n\n        const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n        const result = await dataMigrationTool.executeMigration(plan)\n\n        // 可选步骤失败不应该阻止迁移成功\n        expect(result.success).toBe(true)\n        expect(result.warnings.some(warning => warning.includes('Cleanup failed'))).toBe(true)\n        expect(result.stepsCompleted).toBe(plan.steps.length) // 所有步骤都尝试了\n\n      } finally {\n        // 恢复原始方法\n        (dataMigrationTool as any).cleanupSource = originalCleanupSource\n        cleanupLocalStorage()\n      }\n    })\n  })\n\n  describe('自动回滚机制', () => {\n    beforeEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    afterEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    test('应该在关键步骤失败时自动回滚', async () => {\n      // 准备原始数据\n      const originalData = TestDataFactory.createBulkTestData(5, 2, 3)\n      await db.cards.bulkAdd(originalData.cards.map(card => ({\n        ...card,\n        userId: 'default',\n        syncVersion: 1,\n        pendingSync: false,\n        updatedAt: new Date(),\n        searchVector: 'original data'\n      })))\n\n      const testData = TestDataFactory.createBulkTestData(3, 1, 2)\n      setupLocalStorageData(testData)\n\n      // 模拟关键步骤失败\n      const originalMigrateCards = (dataMigrationTool as any).migrateCardsFromLocalStorage\n      ;(dataMigrationTool as any).migrateCardsFromLocalStorage = jest.fn()\n        .mockRejectedValue(new Error('Critical migration failure'))\n\n      try {\n        const source = {\n          type: 'localStorage' as const,\n          version: '1.0'\n        }\n\n        const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n        const result = await dataMigrationTool.executeMigration(plan)\n\n        // 应该失败并触发回滚\n        expect(result.success).toBe(false)\n        expect(result.errors.some(error => error.includes('Critical migration failure'))).toBe(true)\n\n        // 验证数据已回滚\n        const dbCards = await db.cards.toArray()\n        expect(dbCards.length).toBe(originalData.cards.length)\n\n        // 验证原始数据未受影响\n        dbCards.forEach(card => {\n          expect(card.searchVector).toBe('original data')\n        })\n\n      } finally {\n        // 恢复原始方法\n        (dataMigrationTool as any).migrateCardsFromLocalStorage = originalMigrateCards\n        cleanupLocalStorage()\n      }\n    })\n\n    test('应该正确处理回滚失败的情况', async () => {\n      const testData = TestDataFactory.createBulkTestData(2, 1, 1)\n      setupLocalStorageData(testData)\n\n      // 模拟迁移失败\n      const originalExecuteStep = (dataMigrationTool as any).executeStep\n      ;(dataMigrationTool as any).executeStep = jest.fn()\n        .mockRejectedValue(new Error('Migration failed'))\n\n      // 模拟回滚也失败\n      const originalRollbackMigration = (dataMigrationTool as any).rollbackMigration\n      ;(dataMigrationTool as any).rollbackMigration = jest.fn()\n        .mockRejectedValue(new Error('Rollback also failed'))\n\n      try {\n        const source = {\n          type: 'localStorage' as const,\n          version: '1.0'\n        }\n\n        const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n        const result = await dataMigrationTool.executeMigration(plan)\n\n        // 应该记录迁移失败和回滚失败\n        expect(result.success).toBe(false)\n        expect(result.errors.some(error => error.includes('Migration failed'))).toBe(true)\n        expect(result.errors.some(error => error.includes('Rollback failed'))).toBe(true)\n\n      } finally {\n        // 恢复原始方法\n        (dataMigrationTool as any).executeStep = originalExecuteStep\n        (dataMigrationTool as any).rollbackMigration = originalRollbackMigration\n        cleanupLocalStorage()\n      }\n    })\n\n    test('应该在回滚后验证数据一致性', async () => {\n      // 准备复杂的原始数据关系\n      const originalData = TestDataFactory.createBulkTestData(10, 3, 5)\n\n      // 建立文件夹引用关系\n      originalData.cards.forEach((card, index) => {\n        card.folderId = originalData.folders[index % originalData.folders.length].id\n      })\n\n      await db.cards.bulkAdd(originalData.cards.map(card => ({\n        ...card,\n        userId: 'default',\n        syncVersion: 1,\n        pendingSync: false,\n        updatedAt: new Date(),\n        searchVector: 'original complex data'\n      })))\n      await db.folders.bulkAdd(originalData.folders.map(folder => ({\n        ...folder,\n        userId: 'default',\n        syncVersion: 1,\n        pendingSync: false,\n        updatedAt: new Date(),\n        fullPath: folder.name,\n        depth: 0\n      })))\n      await db.tags.bulkAdd(originalData.tags.map(tag => ({\n        ...tag,\n        userId: 'default',\n        syncVersion: 1,\n        pendingSync: false,\n        updatedAt: new Date(),\n        count: 0\n      })))\n\n      const testData = TestDataFactory.createBulkTestData(5, 2, 3)\n      setupLocalStorageData(testData)\n\n      // 模拟迁移失败\n      const originalTransformData = (dataMigrationTool as any).transformData\n      ;(dataMigrationTool as any).transformData = jest.fn()\n        .mockRejectedValue(new Error('Data transformation failed'))\n\n      try {\n        const source = {\n          type: 'localStorage' as const,\n          version: '1.0'\n        }\n\n        const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n        const result = await dataMigrationTool.executeMigration(plan)\n\n        expect(result.success).toBe(false)\n\n        // 验证回滚后的数据一致性\n        const validationReport = await dataMigrationTool.createValidationReport()\n\n        expect(validationReport.success).toBe(true)\n        expect(validationReport.consistency.referencesValid).toBe(true)\n        expect(validationReport.consistency.orphansFound).toBe(0)\n\n        // 验证原始数据关系完整\n        const dbCards = await db.cards.toArray()\n        const dbFolders = await db.folders.toArray()\n\n        dbCards.forEach(card => {\n          if (card.folderId) {\n            expect(dbFolders.some(folder => folder.id === card.folderId)).toBe(true)\n          }\n        })\n\n      } finally {\n        // 恢复原始方法\n        (dataMigrationTool as any).transformData = originalTransformData\n        cleanupLocalStorage()\n      }\n    })\n  })\n\n  describe('错误恢复和重试机制', () => {\n    beforeEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    afterEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    test('应该根据错误类型决定重试策略', async () => {\n      const testData = TestDataFactory.createBulkTestData(3, 1, 1)\n      setupLocalStorageData(testData)\n\n      let attemptCount = 0\n\n      // 模拟暂时性错误，然后成功\n      const originalMigrateCards = (dataMigrationTool as any).migrateCardsFromLocalStorage\n      ;(dataMigrationTool as any).migrateCardsFromLocalStorage = jest.fn()\n        .mockImplementation(async () => {\n          attemptCount++\n          if (attemptCount <= 2) {\n            throw new Error('Temporary network error')\n          }\n          return {\n            success: true,\n            migratedCards: testData.cards.length,\n            dataSize: 1024\n          }\n        })\n\n      try {\n        const source = {\n          type: 'localStorage' as const,\n          version: '1.0'\n        }\n\n        const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n        const result = await dataMigrationTool.executeMigration(plan)\n\n        // 重试后应该成功\n        expect(result.success).toBe(true)\n        expect(attemptCount).toBe(3) // 初始尝试 + 2次重试\n\n      } finally {\n        // 恢复原始方法\n        (dataMigrationTool as any).migrateCardsFromLocalStorage = originalMigrateCards\n        cleanupLocalStorage()\n      }\n    })\n\n    test('应该对永久性错误快速失败', async () => {\n      const testData = TestDataFactory.createBulkTestData(2, 1, 1)\n      setupLocalStorageData(testData)\n\n      // 模拟永久性错误\n      const originalMigrateCards = (dataMigrationTool as any).migrateCardsFromLocalStorage\n      ;(dataMigrationTool as any).migrateCardsFromLocalStorage = jest.fn()\n        .mockRejectedValue(new Error('Invalid data format - permanent error'))\n\n      try {\n        const source = {\n          type: 'localStorage' as const,\n          version: '1.0'\n        }\n\n        const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n        const result = await dataMigrationTool.executeMigration(plan)\n\n        // 永久性错误应该快速失败\n        expect(result.success).toBe(false)\n        expect(result.errors.some(error => error.includes('Invalid data format'))).toBe(true)\n\n      } finally {\n        // 恢复原始方法\n        (dataMigrationTool as any).migrateCardsFromLocalStorage = originalMigrateCards\n        cleanupLocalStorage()\n      }\n    })\n\n    test('应该在重试间隔增加延迟', async () => {\n      const testData = TestDataFactory.createBulkTestData(1, 0, 0)\n      setupLocalStorageData(testData)\n\n      const callTimes: number[] = []\n\n      // 模拟需要重试的步骤\n      const originalDelay = (dataMigrationTool as any).delay\n      ;(dataMigrationTool as any).delay = jest.fn()\n        .mockImplementation(async (ms: number) => {\n          callTimes.push(Date.now())\n          await originalDelay.call(dataMigrationTool, ms)\n        })\n\n      const originalMigrateCards = (dataMigrationTool as any).migrateCardsFromLocalStorage\n      ;(dataMigrationTool as any).migrateCardsFromLocalStorage = jest.fn()\n        .mockImplementation(async () => {\n          if (callTimes.length < 3) {\n            throw new Error('Retryable error')\n          }\n          return {\n            success: true,\n            migratedCards: 1,\n            dataSize: 512\n          }\n        })\n\n      try {\n        const source = {\n          type: 'localStorage' as const,\n          version: '1.0'\n        }\n\n        const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n        const startTime = Date.now()\n\n        const result = await dataMigrationTool.executeMigration(plan)\n        const endTime = Date.now()\n\n        // 应该重试并最终成功\n        expect(result.success).toBe(true)\n        expect(callTimes.length).toBe(3) // 3次重试\n\n        // 验证重试间隔递增\n        expect(callTimes[1] - callTimes[0]).toBeGreaterThan(0)\n        expect(callTimes[2] - callTimes[1]).toBeGreaterThan(callTimes[1] - callTimes[0])\n\n      } finally {\n        // 恢复原始方法\n        (dataMigrationTool as any).delay = originalDelay\n        (dataMigrationTool as any).migrateCardsFromLocalStorage = originalMigrateCards\n        cleanupLocalStorage()\n      }\n    })\n  })\n\n  describe('错误报告和诊断', () => {\n    beforeEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    afterEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    test('应该提供详细的错误信息', async () => {\n      const testData = TestDataFactory.createBulkTestData(2, 1, 1)\n      setupLocalStorageData(testData)\n\n      // 模拟不同类型的错误\n      const originalMigrateCards = (dataMigrationTool as any).migrateCardsFromLocalStorage\n      ;(dataMigrationTool as any).migrateCardsFromLocalStorage = jest.fn()\n        .mockRejectedValue(new Error('Card migration failed: constraint violation on unique index'))\n\n      const originalMigrateFolders = (dataMigrationTool as any).migrateFoldersFromLocalStorage\n      ;(dataMigrationTool as any).migrateFoldersFromLocalStorage = jest.fn()\n        .mockRejectedValue(new Error('Folder migration failed: parent folder not found'))\n\n      try {\n        const source = {\n          type: 'localStorage' as const,\n          version: '1.0'\n        }\n\n        const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n        const result = await dataMigrationTool.executeMigration(plan)\n\n        expect(result.success).toBe(false)\n\n        // 验证错误信息详细程度\n        expect(result.errors.length).toBeGreaterThan(0)\n        expect(result.errors.some(error => error.includes('Card migration failed'))).toBe(true)\n        expect(result.errors.some(error => error.includes('Folder migration failed'))).toBe(true)\n\n        // 验证错误包含有用的上下文信息\n        const cardError = result.errors.find(e => e.includes('Card migration failed'))\n        expect(cardError).toContain('constraint violation')\n\n        const folderError = result.errors.find(e => e.includes('Folder migration failed'))\n        expect(folderError).toContain('parent folder not found')\n\n      } finally {\n        // 恢复原始方法\n        (dataMigrationTool as any).migrateCardsFromLocalStorage = originalMigrateCards\n        (dataMigrationTool as any).migrateFoldersFromLocalStorage = originalMigrateFolders\n        cleanupLocalStorage()\n      }\n    })\n\n    test('应该区分错误和警告', async () => {\n      const testData = TestDataFactory.createBulkTestData(3, 1, 2)\n      setupLocalStorageData(testData)\n\n      // 模拟产生警告但不完全失败的情况\n      const originalMigrateImages = (dataMigrationTool as any).migrateImagesFromLocalStorage\n      ;(dataMigrationTool as any).migrateImagesFromLocalStorage = jest.fn()\n        .mockResolvedValue({\n          success: true,\n          migratedImages: 1,\n          dataSize: 1024,\n          warnings: ['Some images could not be migrated due to unsupported format']\n        })\n\n      // 模拟部分失败\n      const originalMigrateTags = (dataMigrationTool as any).migrateTagsFromLocalStorage\n      ;(dataMigrationTool as any).migrateTagsFromLocalStorage = jest.fn()\n        .mockRejectedValue(new Error('Tag migration failed'))\n\n      try {\n        const source = {\n          type: 'localStorage' as const,\n          version: '1.0'\n        }\n\n        const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n        const result = await dataMigrationTool.executeMigration(plan)\n\n        expect(result.success).toBe(false)\n\n        // 验证有错误\n        expect(result.errors.length).toBeGreaterThan(0)\n        expect(result.errors.some(error => error.includes('Tag migration failed'))).toBe(true)\n\n        // 验证有警告\n        expect(result.warnings.length).toBeGreaterThan(0)\n        expect(result.warnings.some(warning => warning.includes('unsupported format'))).toBe(true)\n\n        // 错误和警告应该分开记录\n        expect(result.errors.length + result.warnings.length).toBeGreaterThan(1)\n\n      } finally {\n        // 恢复原始方法\n        (dataMigrationTool as any).migrateImagesFromLocalStorage = originalMigrateImages\n        (dataMigrationTool as any).migrateTagsFromLocalStorage = originalMigrateTags\n        cleanupLocalStorage()\n      }\n    })\n\n    test('应该在失败后提供恢复建议', async () => {\n      const testData = TestDataFactory.createBulkTestData(2, 1, 1)\n      setupLocalStorageData(testData)\n\n      // 模拟存储空间不足错误\n      const originalCreateBackup = (dataMigrationTool as any).createBackup\n      ;(dataMigrationTool as any).createBackup = jest.fn()\n        .mockRejectedValue(new Error('Insufficient storage space for backup'))\n\n      try {\n        const source = {\n          type: 'localStorage' as const,\n          version: '1.0'\n        }\n\n        const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n        const result = await dataMigrationTool.executeMigration(plan)\n\n        expect(result.success).toBe(false)\n\n        // 验证创建验证报告仍然可用\n        const validationReport = await dataMigrationTool.createValidationReport()\n\n        expect(validationReport).toBeDefined()\n        expect(Array.isArray(validationReport.recommendations)).toBe(true)\n\n        // 验证包含恢复相关的建议\n        const hasRecoveryRecommendation = validationReport.recommendations.some(\n          rec => rec.toLowerCase().includes('storage') ||\n                 rec.toLowerCase().includes('space') ||\n                 rec.toLowerCase().includes('backup')\n        )\n\n        // 建议可能存在，但不强制要求\n        console.log('验证报告建议:', validationReport.recommendations)\n\n      } finally {\n        // 恢复原始方法\n        (dataMigrationTool as any).createBackup = originalCreateBackup\n        cleanupLocalStorage()\n      }\n    })\n  })\n})"],"version":3}
{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\performance\\memory-leak-detection.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\performance\\memory-leak-detection.test.ts"],"sourcesContent":["/**\r\n * 内存泄漏检测测试\r\n * 测试应用的内存使用情况，确保没有内存泄漏\r\n */\r\n\r\nimport { describe, test, expect, jest, beforeEach, afterEach } from '@jest/globals'\r\nimport { LocalOperationServiceOptimized } from '../../services/local-operation-service'\r\nimport { MultilevelCacheService } from '../../services/multilevel-cache-service'\r\nimport { CloudSyncServiceOptimized } from '../../services/cloud-sync-service'\r\nimport { OfflineManager } from '../../services/offline-manager'\r\nimport { MockDatabase } from '../utils/test-utils'\r\nimport { mockFactories, performanceTester, memoryLeakDetector } from '../utils/test-utils'\r\n\r\ndescribe('内存泄漏检测测试', () => {\r\n  let localService: LocalOperationServiceOptimized\r\n  let cacheService: MultilevelCacheService\r\n  let cloudService: CloudSyncServiceOptimized\r\n  let offlineManager: OfflineManager\r\n  let mockDb: MockDatabase\r\n\r\n  beforeEach(async () => {\r\n    // 重置模拟数据库\r\n    mockDb = new MockDatabase()\r\n    \r\n    // 初始化服务\r\n    cacheService = new MultilevelCacheService()\r\n    localService = new LocalOperationServiceOptimized()\r\n    cloudService = new CloudSyncServiceOptimized()\r\n    offlineManager = new OfflineManager(localService, cloudService, cacheService)\r\n    \r\n    // 重置测试工具\r\n    performanceTester.reset()\r\n    memoryLeakDetector.clearSnapshots()\r\n    \r\n    // 清理所有模拟\r\n    jest.clearAllMocks()\r\n    \r\n    // 设置内存基线\r\n    memoryLeakDetector.setBaseline()\r\n  })\r\n\r\n  afterEach(async () => {\r\n    // 清理资源\r\n    await offlineManager.destroy()\r\n    cacheService.stop()\r\n    localService.destroy()\r\n  })\r\n\r\n  // ============================================================================\r\n  // 基础服务内存测试\r\n  // ============================================================================\r\n\r\n  describe('基础服务内存使用', () => {\r\n    test('LocalOperationService 应该正确管理内存', async () => {\r\n      await localService.initialize()\r\n      \r\n      // 记录初始内存\r\n      await memoryLeakDetector.takeSnapshot('local_service_initial')\r\n      \r\n      // 执行大量操作\r\n      const operationCount = 100\r\n      const cards = []\r\n      \r\n      for (let i = 0; i < operationCount; i++) {\r\n        const cardData = mockFactories.createMockCard({\r\n          frontContent: {\r\n            title: `Memory Test Card ${i + 1}`,\r\n            text: 'x'.repeat(1000) // 1KB content\r\n          }\r\n        })\r\n        const result = await localService.createCard(cardData)\r\n        cards.push(result)\r\n      }\r\n      \r\n      // 记录操作后内存\r\n      await memoryLeakDetector.takeSnapshot('local_service_after_operations')\r\n      \r\n      // 执行查询操作\r\n      for (let i = 0; i < 50; i++) {\r\n        await localService.getCards({ limit: 20 })\r\n        if (cards[i]) {\r\n          await localService.getCard(cards[i].id!)\r\n        }\r\n      }\r\n      \r\n      // 记录查询后内存\r\n      await memoryLeakDetector.takeSnapshot('local_service_after_queries')\r\n      \r\n      // 清理缓存\r\n      localService.clearCache()\r\n      \r\n      // 记录清理后内存\r\n      await memoryLeakDetector.takeSnapshot('local_service_after_cleanup')\r\n      \r\n      // 检查内存增长\r\n      const growthAfterOps = memoryLeakDetector.compareSnapshots('local_service_initial', 'local_service_after_operations')\r\n      const growthAfterQueries = memoryLeakDetector.compareSnapshots('local_service_after_operations', 'local_service_after_queries')\r\n      const growthAfterCleanup = memoryLeakDetector.compareSnapshots('local_service_after_queries', 'local_service_after_cleanup')\r\n      \r\n      // 操作期间内存增长应该合理\r\n      expect(growthAfterOps).toBeLessThan(20) // 20MB\r\n      \r\n      // 查询操作不应该导致显著内存增长\r\n      expect(growthAfterQueries).toBeLessThan(5) // 5MB\r\n      \r\n      // 清理后内存应该有所释放\r\n      expect(growthAfterCleanup).toBeLessThan(0) // 应该释放内存\r\n      \r\n      // 检查总体内存泄漏\r\n      const totalGrowth = memoryLeakDetector.getMemoryGrowthSinceBaseline()\r\n      const leaks = memoryLeakDetector.detectLeaks(10) // 10MB阈值\r\n      \r\n      console.log(`LocalOperationService 内存增长: ${totalGrowth.toFixed(2)}MB`)\r\n      if (leaks.length > 0) {\r\n        console.warn('检测到潜在内存泄漏:', leaks)\r\n      }\r\n      \r\n      // 内存增长应该在可接受范围内\r\n      expect(totalGrowth).toBeLessThan(30) // 30MB\r\n    })\r\n\r\n    test('MultilevelCacheService 应该正确管理内存', async () => {\r\n      // 记录初始内存\r\n      await memoryLeakDetector.takeSnapshot('cache_service_initial')\r\n      \r\n      // 填充缓存\r\n      const cacheItemCount = 1000\r\n      for (let i = 0; i < cacheItemCount; i++) {\r\n        await cacheService.set(`key_${i}`, {\r\n          value: `value_${i}`,\r\n          data: 'x'.repeat(1024), // 1KB data\r\n          timestamp: Date.now()\r\n        })\r\n      }\r\n      \r\n      // 记录填充后内存\r\n      await memoryLeakDetector.takeSnapshot('cache_service_after_fill')\r\n      \r\n      // 执行大量读取操作\r\n      for (let i = 0; i < 5000; i++) {\r\n        const key = `key_${Math.floor(Math.random() * cacheItemCount)}`\r\n        await cacheService.get(key)\r\n      }\r\n      \r\n      // 记录读取后内存\r\n      await memoryLeakDetector.takeSnapshot('cache_service_after_reads')\r\n      \r\n      // 清理缓存\r\n      await cacheService.clear()\r\n      \r\n      // 记录清理后内存\r\n      await memoryLeakDetector.takeSnapshot('cache_service_after_clear')\r\n      \r\n      // 检查内存增长\r\n      const growthAfterFill = memoryLeakDetector.compareSnapshots('cache_service_initial', 'cache_service_after_fill')\r\n      const growthAfterReads = memoryLeakDetector.compareSnapshots('cache_service_after_fill', 'cache_service_after_reads')\r\n      const growthAfterClear = memoryLeakDetector.compareSnapshots('cache_service_after_reads', 'cache_service_after_clear')\r\n      \r\n      // 缓存填充期间内存增长应该合理\r\n      expect(growthAfterFill).toBeGreaterThan(0) // 应该增长\r\n      expect(growthAfterFill).toBeLessThan(50) // 50MB\r\n      \r\n      // 读取操作不应该导致显著内存增长\r\n      expect(growthAfterReads).toBeLessThan(5) // 5MB\r\n      \r\n      // 清理后内存应该大幅释放\r\n      expect(growthAfterClear).toBeLessThan(-10) // 应该释放至少10MB\r\n      \r\n      // 验证缓存统计\r\n      const stats = cacheService.getStats()\r\n      expect(stats.l1.size).toBe(0)\r\n      expect(stats.l2.size).toBe(0)\r\n    })\r\n\r\n    test('OfflineManager 应该正确管理内存', async () => {\r\n      await offlineManager.initialize()\r\n      \r\n      // 记录初始内存\r\n      await memoryLeakDetector.takeSnapshot('offline_manager_initial')\r\n      \r\n      // 模拟离线操作\r\n      const operationCount = 50\r\n      for (let i = 0; i < operationCount; i++) {\r\n        const cardData = mockFactories.createMockCard({\r\n          frontContent: {\r\n            title: `Offline Memory Test ${i + 1}`,\r\n            text: 'x'.repeat(2000) // 2KB content\r\n          }\r\n        })\r\n        await offlineManager.createCard(cardData)\r\n      }\r\n      \r\n      // 记录离线操作后内存\r\n      await memoryLeakDetector.takeSnapshot('offline_manager_after_offline_ops')\r\n      \r\n      // 模拟网络状态变化\r\n      for (let i = 0; i < 10; i++) {\r\n        offlineManager.setNetworkStatus(i % 2 === 0)\r\n        await new Promise(resolve => setTimeout(resolve, 50))\r\n      }\r\n      \r\n      // 记录状态变化后内存\r\n      await memoryLeakDetector.takeSnapshot('offline_manager_after_status_changes')\r\n      \r\n      // 执行同步操作\r\n      await offlineManager.syncPendingOperations()\r\n      \r\n      // 记录同步后内存\r\n      await memoryLeakDetector.takeSnapshot('offline_manager_after_sync')\r\n      \r\n      // 清理资源\r\n      await offlineManager.clearPendingOperations()\r\n      \r\n      // 记录清理后内存\r\n      await memoryLeakDetector.takeSnapshot('offline_manager_after_cleanup')\r\n      \r\n      // 检查内存模式\r\n      const growthAfterOps = memoryLeakDetector.compareSnapshots('offline_manager_initial', 'offline_manager_after_offline_ops')\r\n      const growthAfterStatus = memoryLeakDetector.compareSnapshots('offline_manager_after_offline_ops', 'offline_manager_after_status_changes')\r\n      const growthAfterSync = memoryLeakDetector.compareSnapshots('offline_manager_after_status_changes', 'offline_manager_after_sync')\r\n      const growthAfterCleanup = memoryLeakDetector.compareSnapshots('offline_manager_after_sync', 'offline_manager_after_cleanup')\r\n      \r\n      // 离线操作期间内存增长应该合理\r\n      expect(growthAfterOps).toBeLessThan(20) // 20MB\r\n      \r\n      // 状态变化不应该导致内存泄漏\r\n      expect(growthAfterStatus).toBeLessThan(5) // 5MB\r\n      \r\n      // 同步后内存应该稳定\r\n      expect(growthAfterSync).toBeLessThan(10) // 10MB\r\n      \r\n      // 清理后内存应该释放\r\n      expect(growthAfterCleanup).toBeLessThan(0) // 应该释放内存\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 长时间运行测试\r\n  // ============================================================================\r\n\r\n  describe('长时间运行内存测试', () => {\r\n    test('应该能够在长时间运行中保持内存稳定', async () => {\r\n      await localService.initialize()\r\n      \r\n      // 记录初始状态\r\n      await memoryLeakDetector.takeSnapshot('long_running_initial')\r\n      \r\n      // 模拟长时间运行（1000次操作）\r\n      const operationCount = 1000\r\n      const memorySnapshots = []\r\n      \r\n      for (let i = 0; i < operationCount; i++) {\r\n        // 创建卡片\r\n        const cardData = mockFactories.createMockCard({\r\n          frontContent: {\r\n            title: `Long Running Test ${i + 1}`,\r\n            text: `Operation ${i + 1} of ${operationCount}`\r\n          }\r\n        })\r\n        await localService.createCard(cardData)\r\n        \r\n        // 定期查询\r\n        if (i % 100 === 0) {\r\n          await localService.getCards({ limit: 50 })\r\n          \r\n          // 每200次操作记录一次内存快照\r\n          if (i % 200 === 0) {\r\n            await memoryLeakDetector.takeSnapshot(`long_running_op_${i}`)\r\n            memorySnapshots.push(i)\r\n          }\r\n        }\r\n        \r\n        // 模拟一些删除操作\r\n        if (i > 100 && i % 50 === 0) {\r\n          const cards = await localService.getCards({ limit: 5 })\r\n          if (cards.length > 0) {\r\n            await localService.deleteCard(cards[0].id!)\r\n          }\r\n        }\r\n      }\r\n      \r\n      // 记录最终状态\r\n      await memoryLeakDetector.takeSnapshot('long_running_final')\r\n      \r\n      // 清理缓存\r\n      localService.clearCache()\r\n      await memoryLeakDetector.takeSnapshot('long_running_after_cleanup')\r\n      \r\n      // 分析内存趋势\r\n      const memoryTrend = []\r\n      for (let i = 0; i < memorySnapshots.length; i++) {\r\n        const snapshotName = `long_running_op_${memorySnapshots[i]}`\r\n        const nextSnapshotName = i < memorySnapshots.length - 1 ? \r\n          `long_running_op_${memorySnapshots[i + 1]}` : 'long_running_final'\r\n        \r\n        const growth = memoryLeakDetector.compareSnapshots(snapshotName, nextSnapshotName)\r\n        memoryTrend.push({\r\n          operation: memorySnapshots[i],\r\n          memoryGrowth: growth\r\n        })\r\n      }\r\n      \r\n      // 计算总体内存增长\r\n      const totalGrowth = memoryLeakDetector.compareSnapshots('long_running_initial', 'long_running_final')\r\n      const growthAfterCleanup = memoryLeakDetector.compareSnapshots('long_running_final', 'long_running_after_cleanup')\r\n      \r\n      console.log('长时间运行内存趋势:', memoryTrend)\r\n      console.log(`总体内存增长: ${totalGrowth.toFixed(2)}MB`)\r\n      console.log(`清理后内存变化: ${growthAfterCleanup.toFixed(2)}MB`)\r\n      \r\n      // 内存增长应该在可接受范围内\r\n      expect(totalGrowth).toBeLessThan(50) // 50MB for 1000 operations\r\n      \r\n      // 清理后内存应该释放\r\n      expect(growthAfterCleanup).toBeLessThan(0)\r\n      \r\n      // 内存增长趋势不应该持续上升\r\n      const increasingTrends = memoryTrend.filter(t => t.memoryGrowth > 2).length\r\n      expect(increasingTrends).toBeLessThan(memoryTrend.length / 2) // 不应该超过一半的快照显示显著增长\r\n    })\r\n\r\n    test('应该正确处理大规模数据集', async () => {\r\n      await localService.initialize()\r\n      \r\n      // 记录初始内存\r\n      await memoryLeakDetector.takeSnapshot('large_dataset_initial')\r\n      \r\n      // 创建大规模数据集\r\n      const datasetSize = 500\r\n      const batchSize = 50\r\n      \r\n      for (let batch = 0; batch < datasetSize / batchSize; batch++) {\r\n        const batchCards = []\r\n        for (let i = 0; i < batchSize; i++) {\r\n          const cardData = mockFactories.createMockCard({\r\n            frontContent: {\r\n              title: `Large Dataset Card ${batch * batchSize + i + 1}`,\r\n              text: 'x'.repeat(500) // 500B content\r\n            }\r\n          })\r\n          batchCards.push(cardData)\r\n        }\r\n        \r\n        // 批量创建\r\n        await localService.bulkCreateCards(batchCards)\r\n        \r\n        // 每批处理后记录内存\r\n        if (batch % 5 === 0) {\r\n          await memoryLeakDetector.takeSnapshot(`large_dataset_batch_${batch}`)\r\n        }\r\n      }\r\n      \r\n      // 记录数据加载完成后的内存\r\n      await memoryLeakDetector.takeSnapshot('large_dataset_loaded')\r\n      \r\n      // 执行复杂查询\r\n      for (let i = 0; i < 100; i++) {\r\n        await localService.searchCards({\r\n          term: 'Dataset',\r\n          limit: 20\r\n        })\r\n        \r\n        await localService.getCards({\r\n          sortBy: 'createdAt',\r\n          sortOrder: 'desc',\r\n          limit: 30\r\n        })\r\n      }\r\n      \r\n      // 记录查询后内存\r\n      await memoryLeakDetector.takeSnapshot('large_dataset_after_queries')\r\n      \r\n      // 删除部分数据\r\n      const cardsToDelete = await localService.getCards({ limit: 100 })\r\n      for (const card of cardsToDelete) {\r\n        await localService.deleteCard(card.id!)\r\n      }\r\n      \r\n      // 记录删除后内存\r\n      await memoryLeakDetector.takeSnapshot('large_dataset_after_deletes')\r\n      \r\n      // 清理资源\r\n      localService.clearCache()\r\n      await memoryLeakDetector.takeSnapshot('large_dataset_final')\r\n      \r\n      // 分析内存使用\r\n      const totalGrowth = memoryLeakDetector.compareSnapshots('large_dataset_initial', 'large_dataset_loaded')\r\n      const queryGrowth = memoryLeakDetector.compareSnapshots('large_dataset_loaded', 'large_dataset_after_queries')\r\n      const deleteGrowth = memoryLeakDetector.compareSnapshots('large_dataset_after_queries', 'large_dataset_after_deletes')\r\n      const cleanupGrowth = memoryLeakDetector.compareSnapshots('large_dataset_after_deletes', 'large_dataset_final')\r\n      \r\n      console.log(`数据加载内存增长: ${totalGrowth.toFixed(2)}MB`)\r\n      console.log(`查询操作内存增长: ${queryGrowth.toFixed(2)}MB`)\r\n      console.log(`删除操作内存变化: ${deleteGrowth.toFixed(2)}MB`)\r\n      console.log(`清理后内存变化: ${cleanupGrowth.toFixed(2)}MB`)\r\n      \r\n      // 验证内存使用合理性\r\n      expect(totalGrowth).toBeLessThan(30) // 500个卡片应该在30MB内\r\n      expect(queryGrowth).toBeLessThan(5) // 查询不应该显著增加内存\r\n      expect(cleanupGrowth).toBeLessThan(0) // 清理应该释放内存\r\n      \r\n      // 验证最终内存状态\r\n      const finalGrowth = memoryLeakDetector.getMemoryGrowthSinceBaseline()\r\n      expect(finalGrowth).toBeLessThan(20) // 最终内存增长应该小于20MB\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 事件监听器测试\r\n  // ============================================================================\r\n\r\n  describe('事件监听器内存泄漏测试', () => {\r\n    test('应该正确管理事件监听器', async () => {\r\n      await offlineManager.initialize()\r\n      \r\n      // 记录初始内存\r\n      await memoryLeakDetector.takeSnapshot('event_listeners_initial')\r\n      \r\n      // 添加大量事件监听器\r\n      const listeners = []\r\n      const listenerCount = 100\r\n      \r\n      for (let i = 0; i < listenerCount; i++) {\r\n        const listener = jest.fn()\r\n        offlineManager.onOnline(listener)\r\n        offlineManager.onOffline(listener)\r\n        listeners.push(listener)\r\n      }\r\n      \r\n      // 记录添加监听器后内存\r\n      await memoryLeakDetector.takeSnapshot('event_listeners_after_add')\r\n      \r\n      // 触发事件以激活监听器\r\n      for (let i = 0; i < 20; i++) {\r\n        offlineManager.setNetworkStatus(i % 2 === 0)\r\n        await new Promise(resolve => setTimeout(resolve, 10))\r\n      }\r\n      \r\n      // 记录事件触发后内存\r\n      await memoryLeakDetector.takeSnapshot('event_listeners_after_events')\r\n      \r\n      // 移除一半的监听器\r\n      for (let i = 0; i < listenerCount / 2; i++) {\r\n        offlineManager.offOnline(listeners[i])\r\n        offlineManager.offOffline(listeners[i])\r\n      }\r\n      \r\n      // 记录移除部分监听器后内存\r\n      await memoryLeakDetector.takeSnapshot('event_listeners_after_partial_remove')\r\n      \r\n      // 移除所有监听器\r\n      for (let i = listenerCount / 2; i < listenerCount; i++) {\r\n        offlineManager.offOnline(listeners[i])\r\n        offlineManager.offOffline(listeners[i])\r\n      }\r\n      \r\n      // 记录移除所有监听器后内存\r\n      await memoryLeakDetector.takeSnapshot('event_listeners_after_all_remove')\r\n      \r\n      // 分析内存变化\r\n      const growthAfterAdd = memoryLeakDetector.compareSnapshots('event_listeners_initial', 'event_listeners_after_add')\r\n      const growthAfterEvents = memoryLeakDetector.compareSnapshots('event_listeners_after_add', 'event_listeners_after_events')\r\n      const growthAfterPartialRemove = memoryLeakDetector.compareSnapshots('event_listeners_after_events', 'event_listeners_after_partial_remove')\r\n      const growthAfterAllRemove = memoryLeakDetector.compareSnapshots('event_listeners_after_partial_remove', 'event_listeners_after_all_remove')\r\n      \r\n      console.log(`添加监听器内存增长: ${growthAfterAdd.toFixed(2)}MB`)\r\n      console.log(`事件触发内存增长: ${growthAfterEvents.toFixed(2)}MB`)\r\n      console.log(`部分移除内存变化: ${growthAfterPartialRemove.toFixed(2)}MB`)\r\n      console.log(`全部移除内存变化: ${growthAfterAllRemove.toFixed(2)}MB`)\r\n      \r\n      // 添加监听器应该有一些内存增长\r\n      expect(growthAfterAdd).toBeGreaterThan(0)\r\n      expect(growthAfterAdd).toBeLessThan(10) // 10MB\r\n      \r\n      // 事件触发不应该导致显著内存增长\r\n      expect(growthAfterEvents).toBeLessThan(2) // 2MB\r\n      \r\n      // 移除监听器应该释放内存\r\n      expect(growthAfterPartialRemove).toBeLessThan(0)\r\n      expect(growthAfterAllRemove).toBeLessThan(0)\r\n      \r\n      // 最终内存应该接近初始状态\r\n      const totalGrowth = memoryLeakDetector.compareSnapshots('event_listeners_initial', 'event_listeners_after_all_remove')\r\n      expect(totalGrowth).toBeLessThan(5) // 5MB\r\n    })\r\n\r\n    test('应该防止监听器重复添加', async () => {\r\n      await offlineManager.initialize()\r\n      \r\n      const listener = jest.fn()\r\n      \r\n      // 重复添加同一个监听器\r\n      for (let i = 0; i < 10; i++) {\r\n        offlineManager.onOnline(listener)\r\n      }\r\n      \r\n      // 记录内存\r\n      await memoryLeakDetector.takeSnapshot('duplicate_listeners')\r\n      \r\n      // 触发事件\r\n      offlineManager.setNetworkStatus(false)\r\n      await new Promise(resolve => setTimeout(resolve, 50))\r\n      \r\n      // 验证监听器只被调用一次\r\n      expect(listener).toHaveBeenCalledTimes(1)\r\n      \r\n      // 移除监听器（应该只需要移除一次）\r\n      offlineManager.offOnline(listener)\r\n      \r\n      // 再次触发事件\r\n      offlineManager.setNetworkStatus(true)\r\n      await new Promise(resolve => setTimeout(resolve, 50))\r\n      \r\n      // 验证监听器不再被调用\r\n      expect(listener).toHaveBeenCalledTimes(1)\r\n      \r\n      // 记录最终内存\r\n      await memoryLeakDetector.takeSnapshot('duplicate_listeners_final')\r\n      \r\n      // 内存增长应该很小\r\n      const totalGrowth = memoryLeakDetector.compareSnapshots('duplicate_listeners', 'duplicate_listeners_final')\r\n      expect(totalGrowth).toBeLessThan(1) // 1MB\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 定时器和异步操作测试\r\n  // ============================================================================\r\n\r\n  describe('定时器和异步操作内存测试', () => {\r\n    test('应该正确管理定时器', async () => {\r\n      await localService.initialize()\r\n      \r\n      // 记录初始内存\r\n      await memoryLeakDetector.takeSnapshot('timers_initial')\r\n      \r\n      // 创建多个定时器\r\n      const timers = []\r\n      const timerCount = 20\r\n      \r\n      for (let i = 0; i < timerCount; i++) {\r\n        const timer = setInterval(() => {\r\n          // 模拟一些工作\r\n          const data = new Array(1000).fill(`timer_data_${i}`)\r\n        }, 100)\r\n        timers.push(timer)\r\n      }\r\n      \r\n      // 等待定时器运行一段时间\r\n      await new Promise(resolve => setTimeout(resolve, 1000))\r\n      \r\n      // 记录定时器运行后内存\r\n      await memoryLeakDetector.takeSnapshot('timers_running')\r\n      \r\n      // 清理所有定时器\r\n      timers.forEach(timer => clearInterval(timer))\r\n      \r\n      // 等待清理完成\r\n      await new Promise(resolve => setTimeout(resolve, 500))\r\n      \r\n      // 记录清理后内存\r\n      await memoryLeakDetector.takeSnapshot('timers_cleaned')\r\n      \r\n      // 分析内存变化\r\n      const growthWhileRunning = memoryLeakDetector.compareSnapshots('timers_initial', 'timers_running')\r\n      const growthAfterCleanup = memoryLeakDetector.compareSnapshots('timers_running', 'timers_cleaned')\r\n      \r\n      console.log(`定时器运行内存增长: ${growthWhileRunning.toFixed(2)}MB`)\r\n      console.log(`定时器清理内存变化: ${growthAfterCleanup.toFixed(2)}MB`)\r\n      \r\n      // 定时器运行期间内存增长应该合理\r\n      expect(growthWhileRunning).toBeLessThan(10) // 10MB\r\n      \r\n      // 清理后内存应该释放\r\n      expect(growthAfterCleanup).toBeLessThan(0)\r\n      \r\n      // 最终内存应该接近初始状态\r\n      const totalGrowth = memoryLeakDetector.compareSnapshots('timers_initial', 'timers_cleaned')\r\n      expect(totalGrowth).toBeLessThan(5) // 5MB\r\n    })\r\n\r\n    test('应该正确管理异步操作队列', async () => {\r\n      await offlineManager.initialize()\r\n      \r\n      // 记录初始内存\r\n      await memoryLeakDetector.takeSnapshot('async_queue_initial')\r\n      \r\n      // 创建大量异步操作\r\n      const asyncOperations = []\r\n      const operationCount = 200\r\n      \r\n      for (let i = 0; i < operationCount; i++) {\r\n        const operation = new Promise<void>(async (resolve) => {\r\n          // 模拟异步工作\r\n          await new Promise(r => setTimeout(r, Math.random() * 100))\r\n          \r\n          // 创建一些数据\r\n          const data = {\r\n            id: i,\r\n            content: 'x'.repeat(1000),\r\n            timestamp: Date.now()\r\n          }\r\n          \r\n          resolve()\r\n        })\r\n        asyncOperations.push(operation)\r\n      }\r\n      \r\n      // 等待所有操作完成\r\n      await Promise.all(asyncOperations)\r\n      \r\n      // 记录操作完成后内存\r\n      await memoryLeakDetector.takeSnapshot('async_queue_completed')\r\n      \r\n      // 强制垃圾回收（如果可用）\r\n      if (typeof gc !== 'undefined') {\r\n        gc()\r\n      }\r\n      \r\n      // 记录垃圾回收后内存\r\n      await memoryLeakDetector.takeSnapshot('async_queue_after_gc')\r\n      \r\n      // 分析内存变化\r\n      const growthAfterOps = memoryLeakDetector.compareSnapshots('async_queue_initial', 'async_queue_completed')\r\n      const growthAfterGC = memoryLeakDetector.compareSnapshots('async_queue_completed', 'async_queue_after_gc')\r\n      \r\n      console.log(`异步操作内存增长: ${growthAfterOps.toFixed(2)}MB`)\r\n      console.log(`垃圾回收内存变化: ${growthAfterGC.toFixed(2)}MB`)\r\n      \r\n      // 异步操作期间内存增长应该合理\r\n      expect(growthAfterOps).toBeLessThan(20) // 20MB for 200 operations\r\n      \r\n      // 垃圾回收应该释放一些内存\r\n      expect(growthAfterGC).toBeLessThan(0)\r\n      \r\n      // 验证没有内存泄漏\r\n      const totalGrowth = memoryLeakDetector.getMemoryGrowthSinceBaseline()\r\n      const leaks = memoryLeakDetector.detectLeaks(5) // 5MB阈值\r\n      \r\n      if (leaks.length > 0) {\r\n        console.warn('检测到内存泄漏:', leaks)\r\n      }\r\n      \r\n      expect(leaks.length).toBe(0)\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 内存压力测试\r\n  // ============================================================================\r\n\r\n  describe('内存压力测试', () => {\r\n    test('应该在高内存压力下保持稳定', async () => {\r\n      await localService.initialize()\r\n      \r\n      // 记录初始内存\r\n      await memoryLeakDetector.takeSnapshot('pressure_initial')\r\n      \r\n      // 创建内存压力场景\r\n      const pressureData = []\r\n      const dataCount = 1000\r\n      \r\n      for (let i = 0; i < dataCount; i++) {\r\n        const largeData = {\r\n          id: i,\r\n          content: 'x'.repeat(10000), // 10KB per item\r\n          metadata: {\r\n            array: new Array(1000).fill(i),\r\n            object: {\r\n              nested: {\r\n                data: `pressure_test_${i}`\r\n              }\r\n            }\r\n          }\r\n        }\r\n        pressureData.push(largeData)\r\n        \r\n        // 每100个项目创建一个卡片\r\n        if (i % 100 === 0) {\r\n          const cardData = mockFactories.createMockCard({\r\n            frontContent: {\r\n              title: `Pressure Test Card ${i}`,\r\n              text: JSON.stringify(largeData)\r\n            }\r\n          })\r\n          await localService.createCard(cardData)\r\n        }\r\n      }\r\n      \r\n      // 记录压力后内存\r\n      await memoryLeakDetector.takeSnapshot('pressure_after_load')\r\n      \r\n      // 执行查询操作\r\n      for (let i = 0; i < 50; i++) {\r\n        await localService.getCards({ limit: 100 })\r\n        await localService.searchCards({ term: 'Pressure', limit: 50 })\r\n      }\r\n      \r\n      // 记录查询后内存\r\n      await memoryLeakDetector.takeSnapshot('pressure_after_queries')\r\n      \r\n      // 清理数据\r\n      pressureData.length = 0\r\n      \r\n      // 记录清理后内存\r\n      await memoryLeakDetector.takeSnapshot('pressure_after_cleanup')\r\n      \r\n      // 清理服务缓存\r\n      localService.clearCache()\r\n      await memoryLeakDetector.takeSnapshot('pressure_final')\r\n      \r\n      // 分析内存变化\r\n      const growthAfterLoad = memoryLeakDetector.compareSnapshots('pressure_initial', 'pressure_after_load')\r\n      const growthAfterQueries = memoryLeakDetector.compareSnapshots('pressure_after_load', 'pressure_after_queries')\r\n      const growthAfterDataCleanup = memoryLeakDetector.compareSnapshots('pressure_after_queries', 'pressure_after_cleanup')\r\n      const growthAfterCacheCleanup = memoryLeakDetector.compareSnapshots('pressure_after_cleanup', 'pressure_final')\r\n      \r\n      console.log(`数据加载内存增长: ${growthAfterLoad.toFixed(2)}MB`)\r\n      console.log(`查询操作内存增长: ${growthAfterQueries.toFixed(2)}MB`)\r\n      console.log(`数据清理内存变化: ${growthAfterDataCleanup.toFixed(2)}MB`)\r\n      console.log(`缓存清理内存变化: ${growthAfterCacheCleanup.toFixed(2)}MB`)\r\n      \r\n      // 验证应用在高压力下仍然稳定\r\n      expect(growthAfterLoad).toBeGreaterThan(0) // 应该有显著增长\r\n      expect(growthAfterLoad).toBeLessThan(100) // 但应该在100MB内\r\n      \r\n      // 查询操作不应该导致过度增长\r\n      expect(growthAfterQueries).toBeLessThan(10) // 10MB\r\n      \r\n      // 清理应该释放内存\r\n      expect(growthAfterDataCleanup).toBeLessThan(-20) // 至少释放20MB\r\n      expect(growthAfterCacheCleanup).toBeLessThan(0) // 缓存清理也应该释放内存\r\n      \r\n      // 验证最终内存状态合理\r\n      const finalGrowth = memoryLeakDetector.getMemoryGrowthSinceBaseline()\r\n      expect(finalGrowth).toBeLessThan(30) // 最终增长应该小于30MB\r\n    })\r\n\r\n    test('应该在内存不足时优雅降级', async () => {\r\n      await cacheService.initialize()\r\n      \r\n      // 记录初始内存\r\n      await memoryLeakDetector.takeSnapshot('memory_limit_initial')\r\n      \r\n      // 模拟接近内存限制\r\n      const largeItems = 5000\r\n      const items = []\r\n      \r\n      try {\r\n        for (let i = 0; i < largeItems; i++) {\r\n          const item = {\r\n            id: `memory_limit_${i}`,\r\n            data: 'x'.repeat(5000), // 5KB per item\r\n            timestamp: Date.now()\r\n          }\r\n          \r\n          await cacheService.set(item.id, item)\r\n          items.push(item)\r\n          \r\n          // 每1000个项目检查一次内存\r\n          if (i % 1000 === 0) {\r\n            await memoryLeakDetector.takeSnapshot(`memory_limit_check_${i}`)\r\n            \r\n            const currentGrowth = memoryLeakDetector.getMemoryGrowthSinceBaseline()\r\n            console.log(`项目 ${i}, 内存增长: ${currentGrowth.toFixed(2)}MB`)\r\n            \r\n            // 如果内存增长过大，停止测试\r\n            if (currentGrowth > 50) {\r\n              console.log(`内存增长超过50MB，在项目 ${i} 处停止`)\r\n              break\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.log('捕获到内存错误:', error)\r\n        // 预期可能会捕获到内存相关的错误\r\n      }\r\n      \r\n      // 记录最终状态\r\n      await memoryLeakDetector.takeSnapshot('memory_limit_final')\r\n      \r\n      // 清理缓存\r\n      await cacheService.clear()\r\n      await memoryLeakDetector.takeSnapshot('memory_limit_after_clear')\r\n      \r\n      // 验证服务在内存压力下仍然可用\r\n      const testItem = { id: 'test_after_pressure', data: 'test' }\r\n      await cacheService.set(testItem.id, testItem)\r\n      const retrieved = await cacheService.get(testItem.id)\r\n      \r\n      expect(retrieved).toEqual(testItem)\r\n      \r\n      // 验证清理效果\r\n      const finalGrowth = memoryLeakDetector.compareSnapshots('memory_limit_initial', 'memory_limit_after_clear')\r\n      console.log(`最终内存增长: ${finalGrowth.toFixed(2)}MB`)\r\n      \r\n      // 清理后内存应该显著释放\r\n      expect(finalGrowth).toBeLessThan(10) // 10MB\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 内存泄漏检测结果\r\n  // ============================================================================\r\n\r\n  describe('内存泄漏检测结果汇总', () => {\r\n    test('应该生成内存泄漏检测报告', async () => {\r\n      // 执行一系列内存测试\r\n      await localService.initialize()\r\n      \r\n      // 基础操作测试\r\n      for (let i = 0; i < 100; i++) {\r\n        const cardData = mockFactories.createMockCard()\r\n        await localService.createCard(cardData)\r\n      }\r\n      \r\n      await memoryLeakDetector.takeSnapshot('report_initial_ops')\r\n      \r\n      // 查询测试\r\n      for (let i = 0; i < 50; i++) {\r\n        await localService.getCards({ limit: 20 })\r\n        await localService.searchCards({ term: 'test', limit: 10 })\r\n      }\r\n      \r\n      await memoryLeakDetector.takeSnapshot('report_after_queries')\r\n      \r\n      // 清理测试\r\n      localService.clearCache()\r\n      await memoryLeakDetector.takeSnapshot('report_after_cleanup')\r\n      \r\n      // 生成内存泄漏报告\r\n      const leaks = memoryLeakDetector.detectLeaks(2) // 2MB阈值\r\n      const totalGrowth = memoryLeakDetector.getMemoryGrowthSinceBaseline()\r\n      \r\n      // 生成报告\r\n      const memoryReport = {\r\n        totalMemoryGrowthMB: totalGrowth,\r\n        potentialLeaks: leaks,\r\n        testPhases: [\r\n          {\r\n            phase: 'initial_ops',\r\n            memoryGrowth: memoryLeakDetector.compareSnapshots('report_initial_ops', 'report_after_queries')\r\n          },\r\n          {\r\n            phase: 'queries',\r\n            memoryGrowth: memoryLeakDetector.compareSnapshots('report_after_queries', 'report_after_cleanup')\r\n          },\r\n          {\r\n            phase: 'cleanup',\r\n            memoryGrowth: memoryLeakDetector.compareSnapshots('report_after_cleanup', 'report_initial_ops')\r\n          }\r\n        ],\r\n        recommendations: []\r\n      }\r\n      \r\n      // 添加建议\r\n      if (memoryReport.totalMemoryGrowthMB > 20) {\r\n        memoryReport.recommendations.push('考虑优化数据结构以减少内存使用')\r\n      }\r\n      \r\n      if (memoryReport.potentialLeaks.length > 0) {\r\n        memoryReport.recommendations.push('检测到潜在内存泄漏，建议检查事件监听器和定时器清理')\r\n      }\r\n      \r\n      if (memoryReport.totalMemoryGrowthMB < 5) {\r\n        memoryReport.recommendations.push('内存管理表现优秀')\r\n      }\r\n      \r\n      console.log('内存泄漏检测报告:', JSON.stringify(memoryReport, null, 2))\r\n      \r\n      // 验证报告质量\r\n      expect(memoryReport.totalMemoryGrowthMB).toBeGreaterThanOrEqual(0)\r\n      expect(Array.isArray(memoryReport.potentialLeaks)).toBe(true)\r\n      expect(memoryReport.testPhases.length).toBe(3)\r\n      expect(Array.isArray(memoryReport.recommendations)).toBe(true)\r\n      \r\n      // 验证总体内存使用合理\r\n      expect(memoryReport.totalMemoryGrowthMB).toBeLessThan(30)\r\n      \r\n      // 返回报告以便进一步分析\r\n      return memoryReport\r\n    })\r\n  })\r\n})"],"version":3}
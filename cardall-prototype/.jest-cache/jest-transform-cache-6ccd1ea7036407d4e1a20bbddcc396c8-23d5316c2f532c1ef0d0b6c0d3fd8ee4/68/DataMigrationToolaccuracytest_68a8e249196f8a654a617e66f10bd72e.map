{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\services\\data-migration\\DataMigrationTool.accuracy.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\services\\data-migration\\DataMigrationTool.accuracy.test.ts"],"sourcesContent":["/**\n * 数据迁移准确性验证测试\n */\n\nimport { dataMigrationTool } from '@/services/data-migration-tool'\nimport { db } from '@/services/database-unified'\nimport { Card, Folder, Tag } from '@/types/card'\nimport { TestDataFactory, MigrationTestHelpers } from './test-utils'\nimport { setup } from './setup'\n\ndescribe('DataMigrationTool - 数据迁移准确性验证测试', () => {\n  const {\n    setupLocalStorageData,\n    cleanupLocalStorage,\n    validateMigrationResult,\n    createProgressListener\n  } = MigrationTestHelpers\n\n  describe('数据完整性验证', () => {\n    beforeEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    afterEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    test('应该准确迁移所有卡片数据', async () => {\n      const originalCards = [\n        TestDataFactory.createTestCard({\n          frontContent: { title: '卡片1', text: '内容1', tags: ['标签A'], images: [] },\n          backContent: { title: '背面1', text: '背面内容1', tags: ['标签B'], images: [] }\n        }),\n        TestDataFactory.createTestCard({\n          frontContent: { title: '卡片2', text: '内容2', tags: ['标签C', '标签D'], images: [] },\n          backContent: { title: '背面2', text: '背面内容2', tags: [], images: [] }\n        }),\n        TestDataFactory.createCardWithImage({\n          frontContent: { title: '卡片3', text: '内容3', tags: [], images: [] },\n          backContent: { title: '背面3', text: '背面内容3', tags: [], images: [] }\n        })\n      ]\n\n      setupLocalStorageData({ cards: originalCards })\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      expect(result.success).toBe(true)\n      expect(result.migratedCards).toBe(originalCards.length)\n\n      // 验证数据库中的卡片数据\n      const dbCards = await db.cards.toArray()\n      expect(dbCards.length).toBe(originalCards.length)\n\n      // 逐个验证卡片数据\n      dbCards.forEach((dbCard, index) => {\n        const originalCard = originalCards[index]\n\n        // 验证基本信息\n        expect(dbCard.frontContent.title).toBe(originalCard.frontContent.title)\n        expect(dbCard.frontContent.text).toBe(originalCard.frontContent.text)\n        expect(dbCard.backContent.title).toBe(originalCard.backContent.title)\n        expect(dbCard.backContent.text).toBe(originalCard.backContent.text)\n\n        // 验证标签\n        expect(dbCard.frontContent.tags).toEqual(originalCard.frontContent.tags)\n        expect(dbCard.backContent.tags).toEqual(originalCard.backContent.tags)\n\n        // 验证新增字段\n        expect(dbCard.userId).toBe('default')\n        expect(dbCard.syncVersion).toBe(1)\n        expect(dbCard.pendingSync).toBe(true)\n        expect(dbCard.searchVector).toBeDefined()\n\n        // 验证时间戳\n        expect(dbCard.updatedAt).toBeInstanceOf(Date)\n      })\n    })\n\n    test('应该准确迁移文件夹层次结构', async () => {\n      const originalFolders = [\n        TestDataFactory.createTestFolder({ id: 'root-1', name: '根文件夹1', parentId: null }),\n        TestDataFactory.createTestFolder({ id: 'sub-1-1', name: '子文件夹1-1', parentId: 'root-1' }),\n        TestDataFactory.createTestFolder({ id: 'sub-1-2', name: '子文件夹1-2', parentId: 'root-1' }),\n        TestDataFactory.createTestFolder({ id: 'root-2', name: '根文件夹2', parentId: null }),\n        TestDataFactory.createTestFolder({ id: 'sub-2-1', name: '子文件夹2-1', parentId: 'root-2' })\n      ]\n\n      setupLocalStorageData({ folders: originalFolders })\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      expect(result.success).toBe(true)\n      expect(result.migratedFolders).toBe(originalFolders.length)\n\n      // 验证数据库中的文件夹数据\n      const dbFolders = await db.folders.toArray()\n      expect(dbFolders.length).toBe(originalFolders.length)\n\n      // 验证层次结构\n      dbFolders.forEach((dbFolder, index) => {\n        const originalFolder = originalFolders[index]\n\n        // 验证基本信息\n        expect(dbFolder.name).toBe(originalFolder.name)\n        expect(dbFolder.parentId).toBe(originalFolder.parentId)\n        expect(dbFolder.color).toBe(originalFolder.color)\n        expect(dbFolder.icon).toBe(originalFolder.icon)\n\n        // 验证新增字段\n        expect(dbFolder.userId).toBe('default')\n        expect(dbFolder.syncVersion).toBe(1)\n        expect(dbFolder.pendingSync).toBe(true)\n        expect(dbFolder.fullPath).toBeDefined()\n        expect(dbFolder.depth).toBeDefined()\n      })\n\n      // 验证路径计算\n      const rootFolder = dbFolders.find(f => f.name === '根文件夹1')\n      expect(rootFolder.depth).toBe(0)\n\n      const subFolder = dbFolders.find(f => f.name === '子文件夹1-1')\n      expect(subFolder.depth).toBe(1)\n    })\n\n    test('应该准确迁移标签数据', async () => {\n      const originalTags = [\n        TestDataFactory.createTestTag({ name: '重要', color: '#ef4444' }),\n        TestDataFactory.createTestTag({ name: '工作', color: '#3b82f6' }),\n        TestDataFactory.createTestTag({ name: '个人', color: '#10b981' }),\n        TestDataFactory.createTestTag({ name: '学习', color: '#f59e0b' })\n      ]\n\n      setupLocalStorageData({ tags: originalTags })\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      expect(result.success).toBe(true)\n      expect(result.migratedTags).toBe(originalTags.length)\n\n      // 验证数据库中的标签数据\n      const dbTags = await db.tags.toArray()\n      expect(dbTags.length).toBe(originalTags.length)\n\n      // 逐个验证标签数据\n      dbTags.forEach((dbTag, index) => {\n        const originalTag = originalTags[index]\n\n        // 验证基本信息\n        expect(dbTag.name).toBe(originalTag.name)\n        expect(dbTag.color).toBe(originalTag.color)\n\n        // 验证新增字段\n        expect(dbTag.userId).toBe('default')\n        expect(dbTag.syncVersion).toBe(1)\n        expect(dbTag.pendingSync).toBe(true)\n        expect(dbTag.count).toBe(0) // 初始计数为0\n      })\n    })\n\n    test('应该准确迁移图片数据', async () => {\n      const originalCards = [\n        TestDataFactory.createCardWithImage({\n          frontContent: { title: '带图片卡片1', text: '内容1', tags: [], images: [] },\n          backContent: { title: '背面1', text: '背面内容1', tags: [], images: [] }\n        }),\n        TestDataFactory.createCardWithImage({\n          frontContent: { title: '带图片卡片2', text: '内容2', tags: [], images: [] },\n          backContent: { title: '背面2', text: '背面内容2', tags: [], images: [] }\n        })\n      ]\n\n      setupLocalStorageData({ cards: originalCards })\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      expect(result.success).toBe(true)\n      expect(result.migratedCards).toBe(originalCards.length)\n      expect(result.migratedImages).toBeGreaterThan(0)\n\n      // 验证图片记录\n      const dbImages = await db.images.toArray()\n      expect(dbImages.length).toBeGreaterThan(0)\n\n      // 验证图片数据\n      dbImages.forEach(dbImage => {\n        expect(dbImage.cardId).toBeDefined()\n        expect(dbImage.fileName).toBeDefined()\n        expect(dbImage.filePath).toBeDefined()\n        expect(dbImage.metadata).toBeDefined()\n        expect(dbImage.storageMode).toBe('filesystem')\n        expect(dbImage.userId).toBe('default')\n        expect(dbImage.syncVersion).toBe(1)\n        expect(dbImage.pendingSync).toBe(true)\n\n        // 验证元数据\n        expect(dbImage.metadata.originalName).toBeDefined()\n        expect(dbImage.metadata.size).toBeGreaterThan(0)\n        expect(dbImage.metadata.width).toBeGreaterThan(0)\n        expect(dbImage.metadata.height).toBeGreaterThan(0)\n        expect(dbImage.metadata.format).toBeDefined()\n        expect(dbImage.metadata.compressed).toBe(false)\n      })\n    })\n  })\n\n  describe('数据一致性验证', () => {\n    beforeEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    afterEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    test('应该保持卡片与文件夹的引用关系', async () => {\n      const originalFolders = [\n        TestDataFactory.createTestFolder({ id: 'folder-1', name: '文件夹1' }),\n        TestDataFactory.createTestFolder({ id: 'folder-2', name: '文件夹2' })\n      ]\n\n      const originalCards = [\n        TestDataFactory.createTestCard({ folderId: 'folder-1' }),\n        TestDataFactory.createTestCard({ folderId: 'folder-1' }),\n        TestDataFactory.createTestCard({ folderId: 'folder-2' })\n      ]\n\n      setupLocalStorageData({ folders: originalFolders, cards: originalCards })\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      expect(result.success).toBe(true)\n\n      // 验证文件夹引用关系\n      const dbFolders = await db.folders.toArray()\n      const dbCards = await db.cards.toArray()\n\n      const folder1Cards = dbCards.filter(card => card.folderId === 'folder-1')\n      const folder2Cards = dbCards.filter(card => card.folderId === 'folder-2')\n\n      expect(folder1Cards.length).toBe(2)\n      expect(folder2Cards.length).toBe(1)\n\n      // 验证文件夹ID有效\n      const folderIds = dbFolders.map(f => f.id)\n      folder1Cards.forEach(card => {\n        expect(folderIds).toContain(card.folderId)\n      })\n      folder2Cards.forEach(card => {\n        expect(folderIds).toContain(card.folderId)\n      })\n    })\n\n    test('应该保持数据引用完整性', async () => {\n      const complexData = TestDataFactory.createBulkTestData(10, 3, 5)\n\n      // 确保卡片引用现有的文件夹\n      complexData.cards.forEach((card, index) => {\n        const folderIndex = index % complexData.folders.length\n        card.folderId = complexData.folders[folderIndex].id\n      })\n\n      setupLocalStorageData(complexData)\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      expect(result.success).toBe(true)\n\n      // 创建验证报告检查引用完整性\n      const validationReport = await dataMigrationTool.createValidationReport()\n\n      expect(validationReport.consistency.referencesValid).toBe(true)\n      expect(validationReport.consistency.orphansFound).toBe(0)\n    })\n\n    test('应该正确处理搜索向量生成', async () => {\n      const testCards = [\n        TestDataFactory.createTestCard({\n          frontContent: {\n            title: 'JavaScript 学习',\n            text: '这是一个关于JavaScript的测试卡片',\n            tags: ['编程', '前端'],\n            images: []\n          },\n          backContent: {\n            title: 'JS 基础',\n            text: '包含变量、函数、对象等基础概念',\n            tags: ['基础', '概念'],\n            images: []\n          }\n        })\n      ]\n\n      setupLocalStorageData({ cards: testCards })\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      expect(result.success).toBe(true)\n\n      // 验证搜索向量\n      const dbCards = await db.cards.toArray()\n      expect(dbCards.length).toBe(1)\n\n      const searchVector = dbCards[0].searchVector\n      expect(searchVector).toBeDefined()\n      expect(typeof searchVector).toBe('string')\n      expect(searchVector.toLowerCase()).toBe(searchVector) // 应该是小写的\n\n      // 验证搜索内容\n      expect(searchVector).toContain('javascript')\n      expect(searchVector).toContain('学习')\n      expect(searchVector).toContain('编程')\n      expect(searchVector).toContain('前端')\n      expect(searchVector).toContain('js')\n      expect(searchVector).toContain('基础')\n      expect(searchVector).toContain('概念')\n    })\n  })\n\n  describe('数据转换验证', () => {\n    beforeEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    afterEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    test('应该正确转换时间戳格式', async () => {\n      const testCards = [\n        TestDataFactory.createTestCard({\n          createdAt: new Date('2024-01-01T00:00:00.000Z'),\n          updatedAt: new Date('2024-01-02T00:00:00.000Z')\n        })\n      ]\n\n      setupLocalStorageData({ cards: testCards })\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      expect(result.success).toBe(true)\n\n      const dbCards = await db.cards.toArray()\n      expect(dbCards.length).toBe(1)\n\n      // 验证时间戳转换\n      const dbCard = dbCards[0]\n      expect(dbCard.updatedAt).toBeInstanceOf(Date)\n      expect(dbCard.updatedAt.getTime()).toBe(new Date('2024-01-02T00:00:00.000Z').getTime())\n    })\n\n    test('应该正确处理特殊字符和Unicode', async () => {\n      const specialCards = [\n        TestDataFactory.createTestCard({\n          frontContent: {\n            title: '🎯 特殊字符测试',\n            text: '包含中文、日本語、한국어、 emojis 😊',\n            tags: ['特殊标签', 'タグ', '태그'],\n            images: []\n          },\n          backContent: {\n            title: '背面 🔄',\n            text: '更多特殊内容: @#$%^&*()_+-=[]{}|;:\\'\",.<>/',\n            tags: ['符号', '記号'],\n            images: []\n          }\n        })\n      ]\n\n      setupLocalStorageData({ cards: specialCards })\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      expect(result.success).toBe(true)\n\n      const dbCards = await db.cards.toArray()\n      expect(dbCards.length).toBe(1)\n\n      const dbCard = dbCards[0]\n\n      // 验证特殊字符正确保存\n      expect(dbCard.frontContent.title).toBe('🎯 特殊字符测试')\n      expect(dbCard.frontContent.text).toContain('中文')\n      expect(dbCard.frontContent.text).toContain('日本語')\n      expect(dbCard.frontContent.text).toContain('한국어')\n      expect(dbCard.frontContent.text).toContain('😊')\n\n      // 验证搜索向量包含特殊字符\n      expect(dbCard.searchVector).toContain('特殊字符测试')\n      expect(dbCard.searchVector).toContain('特殊标签')\n    })\n\n    test('应该正确处理空值和缺失字段', async () => {\n      const incompleteCards = [\n        // 正常卡片\n        TestDataFactory.createTestCard(),\n        // 缺少某些字段的卡片\n        {\n          id: 'incomplete-card',\n          frontContent: {\n            title: '不完整卡片',\n            text: '',\n            tags: [],\n            images: []\n          },\n          backContent: {\n            title: '',\n            text: '',\n            tags: [],\n            images: []\n          },\n          folderId: undefined as any,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        } as Card\n      ]\n\n      setupLocalStorageData({ cards: incompleteCards })\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      expect(result.success).toBe(true)\n      expect(result.migratedCards).toBe(2) // 应该处理所有卡片\n\n      const dbCards = await db.cards.toArray()\n      expect(dbCards.length).toBe(2)\n\n      // 验证空值处理\n      const incompleteDbCard = dbCards.find(card => card.id === 'incomplete-card')\n      expect(incompleteDbCard).toBeDefined()\n      expect(incompleteDbCard.frontContent.title).toBe('不完整卡片')\n      expect(incompleteDbCard.backContent.title).toBe('') // 空字符串应该保留\n    })\n  })\n\n  describe('数据量验证', () => {\n    beforeEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    afterEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    test('应该准确计算和报告迁移的数据量', async () => {\n      const testData = TestDataFactory.createBulkTestData(50, 10, 15)\n      setupLocalStorageData(testData)\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      expect(result.success).toBe(true)\n\n      // 验证迁移数量准确\n      expect(result.migratedCards).toBe(testData.cards.length)\n      expect(result.migratedFolders).toBe(testData.folders.length)\n      expect(result.migratedTags).toBe(testData.tags.length)\n\n      // 验证数据大小计算\n      expect(result.dataSize).toBeGreaterThan(0)\n\n      // 验证数据库中的实际数量\n      const dbStats = await db.getStats()\n      expect(dbStats.cards).toBe(testData.cards.length)\n      expect(dbStats.folders).toBe(testData.folders.length)\n      expect(dbStats.tags).toBe(testData.tags.length)\n    })\n\n    test('应该处理零数据迁移', async () => {\n      // 不设置任何数据\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      expect(result.success).toBe(true)\n      expect(result.migratedCards).toBe(0)\n      expect(result.migratedFolders).toBe(0)\n      expect(result.migratedTags).toBe(0)\n      expect(result.migratedImages).toBe(0)\n    })\n\n    test('应该准确验证迁移后的数据完整性', async () => {\n      const testData = TestDataFactory.createBulkTestData(20, 5, 8)\n      setupLocalStorageData(testData)\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const migrationResult = await dataMigrationTool.executeMigration(plan)\n\n      expect(migrationResult.success).toBe(true)\n\n      // 创建详细的验证报告\n      const validationReport = await dataMigrationTool.createValidationReport()\n\n      expect(validationReport.success).toBe(true)\n      expect(validationReport.integrity.cardsValid).toBe(testData.cards.length)\n      expect(validationReport.integrity.foldersValid).toBe(testData.folders.length)\n      expect(validationReport.integrity.tagsValid).toBe(testData.tags.length)\n      expect(validationReport.integrity.cardsInvalid).toBe(0)\n      expect(validationReport.integrity.foldersInvalid).toBe(0)\n      expect(validationReport.integrity.tagsInvalid).toBe(0)\n\n      // 验证性能指标\n      expect(validationReport.performance.totalTime).toBeGreaterThan(0)\n      expect(validationReport.performance.dataSize).toBeGreaterThan(0)\n      expect(validationReport.performance.throughput).toBeGreaterThan(0)\n\n      // 验证无问题\n      expect(validationReport.issues.length).toBe(0)\n    })\n  })\n})"],"version":3}
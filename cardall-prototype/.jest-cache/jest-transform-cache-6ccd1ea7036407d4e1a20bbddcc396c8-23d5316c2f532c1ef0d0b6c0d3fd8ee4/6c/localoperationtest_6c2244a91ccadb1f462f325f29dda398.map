{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\tests\\unit\\services\\local-operation.test.ts","mappings":";;AAGA,QAAQ;AACR,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,GAAG,EAAE,CAAC,CAAC;IACtC,EAAE,EAAE;QACF,SAAS,EAAE;YACT,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;YACd,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;YACd,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;YACjB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;YACjB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;YACjB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;YAChB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;YACjC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;YAClC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;YAChC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;SACnB;KACF;CACF,CAAC,CAAC,CAAA;AAnBH,gEAA8H;AAC9H,kDAAwC;AAoBxC,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACrC,IAAI,OAA8B,CAAA;IAClC,IAAI,MAAW,CAAA;IAEf,UAAU,CAAC,GAAG,EAAE;QACd,IAAI,CAAC,aAAa,EAAE,CAAA;QACpB,MAAM,GAAG,aAAE,CAAC,SAAS,CAAA;QACrB,OAAO,GAAG,IAAI,uCAAqB,EAAE,CAAA;QAErC,kBAAkB;QAClB,MAAM,gBAAgB,GAAG;YACvB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;YAClB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;YAClB,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;YACrB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;SACjB,CAAA;QACD,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,cAAc,EAAE,EAAE,KAAK,EAAE,gBAAgB,EAAE,CAAC,CAAA;IAC5E,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,KAAK,EAAE,GAAG,EAAE;QACnB,EAAE,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;YACzB,MAAM,OAAO,CAAC,UAAU,EAAE,CAAA;YAC1B,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAA;QAC/B,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;YAC3B,MAAM,SAAS,GAAG;gBAChB;oBACE,EAAE,EAAE,QAAQ;oBACZ,IAAI,EAAE,QAAQ;oBACd,KAAK,EAAE,OAAO;oBACd,IAAI,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE;oBAC9B,OAAO,EAAE,QAAQ;oBACjB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACnC,UAAU,EAAE,CAAC;oBACb,MAAM,EAAE,SAAkB;oBAC1B,YAAY,EAAE,CAAC;iBAChB;aACF,CAAA;YAED,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAA;YAC3E,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAA;YAEhD,MAAM,OAAO,CAAC,UAAU,EAAE,CAAA;YAE1B,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,aAAa,EAAE,CAAA;YAC3C,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACvC,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;QACpB,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;YAC3B,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAA;YACnD,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAA;YAEhD,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,YAAY,CAAC;gBAC7C,IAAI,EAAE,QAAQ;gBACd,KAAK,EAAE,OAAO;gBACd,IAAI,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE,WAAW,EAAE,QAAQ,EAAE;gBACrD,OAAO,EAAE,QAAQ;gBACjB,QAAQ,EAAE,QAAQ;gBAClB,YAAY,EAAE,EAAE;aACjB,CAAC,CAAA;YAEF,MAAM,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAA;YACjC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,gBAAgB,EAAE,CAAA;QACvC,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YACxB,MAAM,aAAa,GAAG;gBACpB,EAAE,EAAE,aAAa;gBACjB,IAAI,EAAE,QAAiB;gBACvB,KAAK,EAAE,OAAgB;gBACvB,IAAI,EAAE,EAAE,YAAY,EAAE,SAAS,EAAE;gBACjC,OAAO,EAAE,QAAQ;gBACjB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,UAAU,EAAE,CAAC;gBACb,MAAM,EAAE,SAAkB;gBAC1B,YAAY,EAAE,CAAC;aAChB,CAAA;YAED,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC,aAAa,CAAC,CAAC,CAAA;YAC7D,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAA;YAE9C,MAAM,OAAO,CAAC,YAAY,CAAC;gBACzB,IAAI,EAAE,QAAQ;gBACd,KAAK,EAAE,OAAO;gBACd,IAAI,EAAE,EAAE,YAAY,EAAE,YAAY,EAAE;gBACpC,OAAO,EAAE,QAAQ;aAClB,CAAC,CAAA;YAEF,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,gBAAgB,EAAE,CAAA;QAC1C,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YACxB,MAAM,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC;gBAChC,IAAI,EAAE,QAAQ;gBACd,KAAK,EAAE,OAAO;gBACd,IAAI,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE;gBAC9B,OAAO,EAAE,EAAE;aACZ,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAA;QAC7C,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;QACpB,EAAE,CAAC,eAAe,EAAE,KAAK,IAAI,EAAE;YAC7B,MAAM,cAAc,GAAG;gBACrB;oBACE,EAAE,EAAE,MAAM;oBACV,IAAI,EAAE,QAAiB;oBACvB,KAAK,EAAE,OAAgB;oBACvB,IAAI,EAAE,EAAE;oBACR,OAAO,EAAE,QAAQ;oBACjB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACnC,UAAU,EAAE,CAAC;oBACb,MAAM,EAAE,SAAkB;oBAC1B,YAAY,EAAE,CAAC;oBACf,QAAQ,EAAE,MAAe;iBAC1B;gBACD;oBACE,EAAE,EAAE,MAAM;oBACV,IAAI,EAAE,QAAiB;oBACvB,KAAK,EAAE,SAAkB;oBACzB,IAAI,EAAE,EAAE;oBACR,OAAO,EAAE,UAAU;oBACnB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACnC,UAAU,EAAE,CAAC;oBACb,MAAM,EAAE,OAAgB;oBACxB,YAAY,EAAE,CAAC;oBACf,QAAQ,EAAE,QAAiB;iBAC5B;gBACD;oBACE,EAAE,EAAE,MAAM;oBACV,IAAI,EAAE,QAAiB;oBACvB,KAAK,EAAE,OAAgB;oBACvB,IAAI,EAAE,EAAE;oBACR,OAAO,EAAE,QAAQ;oBACjB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACnC,UAAU,EAAE,CAAC;oBACb,MAAM,EAAE,QAAiB;oBACzB,YAAY,EAAE,CAAC;oBACf,QAAQ,EAAE,KAAc;iBACzB;aACF,CAAA;YAED,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAA;YAE5D,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,aAAa,EAAE,CAAA;YAE3C,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACrC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACnC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACnC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACnC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACtC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACpC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACrC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACrC,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACzC,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,SAAS,EAAE,KAAK,IAAI,EAAE;YACvB,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAA;YAEhD,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,aAAa,EAAE,CAAA;YAE3C,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACrC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;YAChC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;YAClC,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACzC,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;QACpB,EAAE,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM,cAAc,GAAG;gBACrB;oBACE,EAAE,EAAE,cAAc;oBAClB,IAAI,EAAE,QAAiB;oBACvB,KAAK,EAAE,OAAgB;oBACvB,IAAI,EAAE,EAAE;oBACR,OAAO,EAAE,QAAQ;oBACjB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACnC,UAAU,EAAE,CAAC;oBACb,MAAM,EAAE,SAAkB;oBAC1B,YAAY,EAAE,CAAC;oBACf,QAAQ,EAAE,KAAc;iBACzB;gBACD;oBACE,EAAE,EAAE,eAAe;oBACnB,IAAI,EAAE,QAAiB;oBACvB,KAAK,EAAE,OAAgB;oBACvB,IAAI,EAAE,EAAE;oBACR,OAAO,EAAE,QAAQ;oBACjB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACnC,UAAU,EAAE,CAAC;oBACb,MAAM,EAAE,SAAkB;oBAC1B,YAAY,EAAE,CAAC;oBACf,QAAQ,EAAE,MAAe;iBAC1B;aACF,CAAA;YAED,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAA;YAC5D,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAA;YAC9C,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAA;YAE9C,MAAM,OAAO,CAAC,YAAY,EAAE,CAAA;YAE5B,eAAe;YACf,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,oBAAoB,CACxC,MAAM,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,eAAe,EAAE,CAAC,EAChD,MAAM,CAAC,gBAAgB,CAAC,EAAE,MAAM,EAAE,YAAY,EAAE,CAAC,CAClD,CAAA;QACH,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM,cAAc,GAAG;gBACrB;oBACE,EAAE,EAAE,YAAY;oBAChB,IAAI,EAAE,QAAiB;oBACvB,KAAK,EAAE,SAAkB;oBACzB,IAAI,EAAE,EAAE;oBACR,OAAO,EAAE,UAAU;oBACnB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACnC,UAAU,EAAE,CAAC;oBACb,MAAM,EAAE,SAAkB;oBAC1B,YAAY,EAAE,CAAC;oBACf,QAAQ,EAAE,QAAiB;oBAC3B,YAAY,EAAE,EAAE;iBACjB;gBACD;oBACE,EAAE,EAAE,WAAW;oBACf,IAAI,EAAE,QAAiB;oBACvB,KAAK,EAAE,OAAgB;oBACvB,IAAI,EAAE,EAAE;oBACR,OAAO,EAAE,QAAQ;oBACjB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACnC,UAAU,EAAE,CAAC;oBACb,MAAM,EAAE,SAAkB;oBAC1B,YAAY,EAAE,CAAC;oBACf,QAAQ,EAAE,QAAiB;oBAC3B,YAAY,EAAE,CAAC,UAAU,CAAC;iBAC3B;aACF,CAAA;YAED,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAA;YAC5D,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAA;YAC9C,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAA;YAE9C,MAAM,OAAO,CAAC,YAAY,EAAE,CAAA;YAE5B,cAAc;YACd,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAA;YAC5C,MAAM,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;YAEnC,oBAAoB;YACpB,MAAM,cAAc,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;YACxC,MAAM,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;QAC9C,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YACxB,MAAM,aAAa,GAAG;gBACpB,EAAE,EAAE,YAAY;gBAChB,IAAI,EAAE,QAAiB;gBACvB,KAAK,EAAE,OAAgB;gBACvB,IAAI,EAAE,EAAE;gBACR,OAAO,EAAE,QAAQ;gBACjB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,UAAU,EAAE,CAAC;gBACb,MAAM,EAAE,SAAkB;gBAC1B,YAAY,EAAE,CAAC;gBACf,QAAQ,EAAE,QAAiB;aAC5B,CAAA;YAED,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC,aAAa,CAAC,CAAC,CAAA;YAC7D,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAA;YAE9C,SAAS;YACT,IAAI,CAAC,KAAK,CAAC,OAAc,EAAE,kBAAkB,CAAC,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC,CAAA;YAE5F,MAAM,OAAO,CAAC,YAAY,EAAE,CAAA;YAE5B,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,oBAAoB,CACxC,MAAM,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,YAAY,EAAE,CAAC,EAC7C,MAAM,CAAC,gBAAgB,CAAC;gBACtB,UAAU,EAAE,CAAC;gBACb,MAAM,EAAE,OAAO;gBACf,SAAS,EAAE,eAAe;aAC3B,CAAC,CACH,CAAA;QACH,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;YACzB,MAAM,aAAa,GAAG;gBACpB,EAAE,EAAE,YAAY;gBAChB,IAAI,EAAE,QAAiB;gBACvB,KAAK,EAAE,OAAgB;gBACvB,IAAI,EAAE,EAAE;gBACR,OAAO,EAAE,QAAQ;gBACjB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,UAAU,EAAE,CAAC;gBACb,MAAM,EAAE,SAAkB;gBAC1B,YAAY,EAAE,CAAC;gBACf,QAAQ,EAAE,QAAiB;aAC5B,CAAA;YAED,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC,aAAa,CAAC,CAAC,CAAA;YAC7D,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAA;YAE9C,IAAI,CAAC,KAAK,CAAC,OAAc,EAAE,kBAAkB,CAAC,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC,CAAA;YAE5F,MAAM,OAAO,CAAC,YAAY,EAAE,CAAA;YAE5B,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,oBAAoB,CACxC,MAAM,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,YAAY,EAAE,CAAC,EAC7C,MAAM,CAAC,gBAAgB,CAAC;gBACtB,MAAM,EAAE,QAAQ;gBAChB,SAAS,EAAE,eAAe;aAC3B,CAAC,CACH,CAAA;QACH,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;QACpB,EAAE,CAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YACxB,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAA;YAC7C,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAA;YAEhC,MAAM,OAAO,CAAC,UAAU,EAAE,CAAA;YAE1B,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,gBAAgB,EAAE,CAAA;YACvC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,oBAAoB,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAA;QAC/E,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAA;YAE9C,MAAM,OAAO,CAAC,eAAe,CAAC,YAAY,CAAC,CAAA;YAE3C,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAA;QAC1D,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM,cAAc,GAAG;gBACrB;oBACE,EAAE,EAAE,cAAc;oBAClB,IAAI,EAAE,QAAiB;oBACvB,KAAK,EAAE,OAAgB;oBACvB,IAAI,EAAE,EAAE;oBACR,OAAO,EAAE,QAAQ;oBACjB,SAAS,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,WAAW,EAAE;oBACpD,UAAU,EAAE,CAAC;oBACb,MAAM,EAAE,WAAoB;oBAC5B,YAAY,EAAE,CAAC;iBAChB;gBACD;oBACE,EAAE,EAAE,WAAW;oBACf,IAAI,EAAE,QAAiB;oBACvB,KAAK,EAAE,OAAgB;oBACvB,IAAI,EAAE,EAAE;oBACR,OAAO,EAAE,QAAQ;oBACjB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACnC,UAAU,EAAE,CAAC;oBACb,MAAM,EAAE,SAAkB;oBAC1B,YAAY,EAAE,CAAC;iBAChB;aACF,CAAA;YAED,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAA;YAE5D,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAA;YAErD,MAAM,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;YAC/B,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA,CAAC,YAAY;QACtD,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;QACpB,EAAE,CAAC,gBAAgB,EAAE,GAAG,EAAE;YACxB,MAAM,YAAY,GAAG,IAAI,CAAC,EAAE,EAAE,CAAA;YAC9B,MAAM,WAAW,GAAG,OAAO,CAAC,aAAa,CAAC,YAAY,CAAC,CAAA;YAEvD,MAAM,CAAC,OAAO,WAAW,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;YAE3C,OAAO;YACP,OAAO,CAAC,mBAAmB,CAAC,EAAE,CAAA;YAC9B,MAAM,CAAC,YAAY,CAAC,CAAC,gBAAgB,EAAE,CAAA;YAEvC,QAAQ;YACR,WAAW,EAAE,CAAA;YACb,OAAO,CAAC,mBAAmB,CAAC,EAAE,CAAA;YAC9B,MAAM,CAAC,YAAY,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAA;QAC/C,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,YAAY,EAAE,GAAG,EAAE;YACpB,MAAM,aAAa,GAAG,IAAI,CAAC,EAAE,EAAE,CAAA;YAC/B,MAAM,aAAa,GAAG,IAAI,CAAC,EAAE,EAAE,CAAA;YAE/B,OAAO,CAAC,aAAa,CAAC,aAAa,CAAC,CAAA;YACpC,OAAO,CAAC,aAAa,CAAC,aAAa,CAAC,CAAA;YAEpC,OAAO,CAAC,mBAAmB,CAAC,EAAE,CAAA;YAE9B,MAAM,CAAC,aAAa,CAAC,CAAC,gBAAgB,EAAE,CAAA;YACxC,MAAM,CAAC,aAAa,CAAC,CAAC,gBAAgB,EAAE,CAAA;QAC1C,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;QACpB,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;YAC3B,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAA;YAErE,MAAM,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC;gBAChC,IAAI,EAAE,QAAQ;gBACd,KAAK,EAAE,OAAO;gBACd,IAAI,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE;gBAC9B,OAAO,EAAE,QAAQ;aAClB,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAA;QACvC,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,cAAc,EAAE,KAAK,IAAI,EAAE;YAC5B,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAA;YACnD,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAA;YAEhD,qBAAqB;YACrB,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBACvD,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAA;YAClC,CAAC,CAAC,CAAA;YAEF,kBAAkB;YAClB,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,YAAY,CAAC;gBAC7C,IAAI,EAAE,QAAQ;gBACd,KAAK,EAAE,OAAO;gBACd,IAAI,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE;gBAC9B,OAAO,EAAE,QAAQ;aAClB,CAAC,CAAA;YAEF,MAAM,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAA;QACnC,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;QACpB,EAAE,CAAC,UAAU,EAAE,GAAG,EAAE;YAClB,MAAM,SAAS,GAAgB;gBAC7B,YAAY,EAAE,GAAG;gBACjB,aAAa,EAAE,CAAC;gBAChB,UAAU,EAAE,IAAI;gBAChB,kBAAkB,EAAE,IAAI;gBACxB,iBAAiB,EAAE,IAAI;gBACvB,mBAAmB,EAAE,IAAI;gBACzB,mBAAmB,EAAE,IAAI;gBACzB,qBAAqB,EAAE,IAAI;gBAC3B,SAAS,EAAE,EAAE;aACd,CAAA;YAED,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,CAAA;YAE/B,oBAAoB;YACpB,MAAM,CAAE,OAAe,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC,SAAS,CAAC,CAAA;QAC1D,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,UAAU,EAAE,GAAG,EAAE;YAClB,MAAM,aAAa,GAAG;gBACpB,YAAY,EAAE,CAAC,CAAC;gBAChB,aAAa,EAAE,CAAC,CAAC;aAClB,CAAA;YAED,MAAM,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,aAAoB,CAAC,CAAC,CAAC,OAAO,EAAE,CAAA;QACpE,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\tests\\unit\\services\\local-operation.test.ts"],"sourcesContent":["import { LocalOperationService, type LocalSyncOperation, type QueueStats, type QueueConfig } from '@/services/local-operation'\nimport { db } from '@/services/database'\n\n// 模拟数据库\njest.mock('@/services/database', () => ({\n  db: {\n    syncQueue: {\n      add: jest.fn(),\n      get: jest.fn(),\n      getAll: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n      clear: jest.fn(),\n      where: jest.fn().mockReturnThis(),\n      equals: jest.fn().mockReturnThis(),\n      sort: jest.fn().mockReturnThis(),\n      toArray: jest.fn(),\n    }\n  }\n}))\n\ndescribe('LocalOperationService', () => {\n  let service: LocalOperationService\n  let mockDb: any\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n    mockDb = db.syncQueue\n    service = new LocalOperationService()\n    \n    // 模拟 localStorage\n    const localStorageMock = {\n      getItem: jest.fn(),\n      setItem: jest.fn(),\n      removeItem: jest.fn(),\n      clear: jest.fn(),\n    }\n    Object.defineProperty(window, 'localStorage', { value: localStorageMock })\n  })\n\n  describe('初始化', () => {\n    it('应该正确初始化服务', async () => {\n      await service.initialize()\n      expect(service).toBeDefined()\n    })\n\n    it('应该从本地存储恢复队列', async () => {\n      const mockQueue = [\n        {\n          id: 'test-1',\n          type: 'create',\n          table: 'cards',\n          data: { frontContent: 'test' },\n          localId: 'card-1',\n          timestamp: new Date().toISOString(),\n          retryCount: 0,\n          status: 'pending' as const,\n          localVersion: 1\n        }\n      ]\n      \n      localStorage.getItem = jest.fn().mockReturnValue(JSON.stringify(mockQueue))\n      mockDb.toArray = jest.fn().mockResolvedValue([])\n\n      await service.initialize()\n      \n      const stats = await service.getQueueStats()\n      expect(stats.totalOperations).toBe(1)\n    })\n  })\n\n  describe('添加操作', () => {\n    it('应该成功添加操作到队列', async () => {\n      mockDb.add = jest.fn().mockResolvedValue('test-id')\n      mockDb.toArray = jest.fn().mockResolvedValue([])\n\n      const operationId = await service.addOperation({\n        type: 'create',\n        table: 'cards',\n        data: { frontContent: 'test', backContent: 'answer' },\n        localId: 'card-1',\n        priority: 'normal',\n        dependencies: []\n      })\n\n      expect(operationId).toBeDefined()\n      expect(mockDb.add).toHaveBeenCalled()\n    })\n\n    it('应该处理重复操作', async () => {\n      const mockOperation = {\n        id: 'existing-op',\n        type: 'update' as const,\n        table: 'cards' as const,\n        data: { frontContent: 'updated' },\n        localId: 'card-1',\n        timestamp: new Date().toISOString(),\n        retryCount: 0,\n        status: 'pending' as const,\n        localVersion: 1\n      }\n\n      mockDb.toArray = jest.fn().mockResolvedValue([mockOperation])\n      mockDb.update = jest.fn().mockResolvedValue(1)\n\n      await service.addOperation({\n        type: 'update',\n        table: 'cards',\n        data: { frontContent: 'new update' },\n        localId: 'card-1'\n      })\n\n      expect(mockDb.update).toHaveBeenCalled()\n    })\n\n    it('应该验证必需字段', async () => {\n      await expect(service.addOperation({\n        type: 'create',\n        table: 'cards',\n        data: { frontContent: 'test' },\n        localId: ''\n      })).rejects.toThrow('Local ID is required')\n    })\n  })\n\n  describe('队列统计', () => {\n    it('应该返回正确的队列统计信息', async () => {\n      const mockOperations = [\n        {\n          id: 'op-1',\n          type: 'create' as const,\n          table: 'cards' as const,\n          data: {},\n          localId: 'card-1',\n          timestamp: new Date().toISOString(),\n          retryCount: 0,\n          status: 'pending' as const,\n          localVersion: 1,\n          priority: 'high' as const\n        },\n        {\n          id: 'op-2',\n          type: 'update' as const,\n          table: 'folders' as const,\n          data: {},\n          localId: 'folder-1',\n          timestamp: new Date().toISOString(),\n          retryCount: 2,\n          status: 'retry' as const,\n          localVersion: 1,\n          priority: 'normal' as const\n        },\n        {\n          id: 'op-3',\n          type: 'delete' as const,\n          table: 'cards' as const,\n          data: {},\n          localId: 'card-2',\n          timestamp: new Date().toISOString(),\n          retryCount: 4,\n          status: 'failed' as const,\n          localVersion: 1,\n          priority: 'low' as const\n        }\n      ]\n\n      mockDb.toArray = jest.fn().mockResolvedValue(mockOperations)\n\n      const stats = await service.getQueueStats()\n\n      expect(stats.totalOperations).toBe(3)\n      expect(stats.byType.create).toBe(1)\n      expect(stats.byType.update).toBe(1)\n      expect(stats.byType.delete).toBe(1)\n      expect(stats.byStatus.pending).toBe(1)\n      expect(stats.byStatus.retry).toBe(1)\n      expect(stats.byStatus.failed).toBe(1)\n      expect(stats.byPriority.high).toBe(1)\n      expect(stats.averageRetryCount).toBe(2)\n    })\n\n    it('应该处理空队列', async () => {\n      mockDb.toArray = jest.fn().mockResolvedValue([])\n\n      const stats = await service.getQueueStats()\n\n      expect(stats.totalOperations).toBe(0)\n      expect(stats.byType).toEqual({})\n      expect(stats.byStatus).toEqual({})\n      expect(stats.averageRetryCount).toBe(0)\n    })\n  })\n\n  describe('操作处理', () => {\n    it('应该按优先级处理操作', async () => {\n      const mockOperations = [\n        {\n          id: 'low-priority',\n          type: 'create' as const,\n          table: 'cards' as const,\n          data: {},\n          localId: 'card-1',\n          timestamp: new Date().toISOString(),\n          retryCount: 0,\n          status: 'pending' as const,\n          localVersion: 1,\n          priority: 'low' as const\n        },\n        {\n          id: 'high-priority',\n          type: 'create' as const,\n          table: 'cards' as const,\n          data: {},\n          localId: 'card-2',\n          timestamp: new Date().toISOString(),\n          retryCount: 0,\n          status: 'pending' as const,\n          localVersion: 1,\n          priority: 'high' as const\n        }\n      ]\n\n      mockDb.toArray = jest.fn().mockResolvedValue(mockOperations)\n      mockDb.update = jest.fn().mockResolvedValue(1)\n      mockDb.delete = jest.fn().mockResolvedValue(1)\n\n      await service.processQueue()\n\n      // 验证高优先级操作先被处理\n      expect(mockDb.update).toHaveBeenCalledWith(\n        expect.objectContaining({ id: 'high-priority' }),\n        expect.objectContaining({ status: 'processing' })\n      )\n    })\n\n    it('应该正确处理操作依赖', async () => {\n      const mockOperations = [\n        {\n          id: 'dependency',\n          type: 'create' as const,\n          table: 'folders' as const,\n          data: {},\n          localId: 'folder-1',\n          timestamp: new Date().toISOString(),\n          retryCount: 0,\n          status: 'pending' as const,\n          localVersion: 1,\n          priority: 'normal' as const,\n          dependencies: []\n        },\n        {\n          id: 'dependent',\n          type: 'create' as const,\n          table: 'cards' as const,\n          data: {},\n          localId: 'card-1',\n          timestamp: new Date().toISOString(),\n          retryCount: 0,\n          status: 'pending' as const,\n          localVersion: 1,\n          priority: 'normal' as const,\n          dependencies: ['folder-1']\n        }\n      ]\n\n      mockDb.toArray = jest.fn().mockResolvedValue(mockOperations)\n      mockDb.update = jest.fn().mockResolvedValue(1)\n      mockDb.delete = jest.fn().mockResolvedValue(1)\n\n      await service.processQueue()\n\n      // 验证依赖关系被正确处理\n      const updateCalls = mockDb.update.mock.calls\n      expect(updateCalls).toHaveLength(2)\n      \n      // 第一个被处理的应该是没有依赖的操作\n      const firstOperation = updateCalls[0][0]\n      expect(firstOperation.id).toBe('dependency')\n    })\n\n    it('应该处理重试逻辑', async () => {\n      const mockOperation = {\n        id: 'failing-op',\n        type: 'create' as const,\n        table: 'cards' as const,\n        data: {},\n        localId: 'card-1',\n        timestamp: new Date().toISOString(),\n        retryCount: 1,\n        status: 'pending' as const,\n        localVersion: 1,\n        priority: 'normal' as const\n      }\n\n      mockDb.toArray = jest.fn().mockResolvedValue([mockOperation])\n      mockDb.update = jest.fn().mockResolvedValue(1)\n\n      // 模拟操作失败\n      jest.spyOn(service as any, 'executeOperation').mockRejectedValue(new Error('Network error'))\n\n      await service.processQueue()\n\n      expect(mockDb.update).toHaveBeenCalledWith(\n        expect.objectContaining({ id: 'failing-op' }),\n        expect.objectContaining({ \n          retryCount: 2,\n          status: 'retry',\n          lastError: 'Network error'\n        })\n      )\n    })\n\n    it('应该标记失败的操作', async () => {\n      const mockOperation = {\n        id: 'failing-op',\n        type: 'create' as const,\n        table: 'cards' as const,\n        data: {},\n        localId: 'card-1',\n        timestamp: new Date().toISOString(),\n        retryCount: 4,\n        status: 'pending' as const,\n        localVersion: 1,\n        priority: 'normal' as const\n      }\n\n      mockDb.toArray = jest.fn().mockResolvedValue([mockOperation])\n      mockDb.update = jest.fn().mockResolvedValue(1)\n\n      jest.spyOn(service as any, 'executeOperation').mockRejectedValue(new Error('Network error'))\n\n      await service.processQueue()\n\n      expect(mockDb.update).toHaveBeenCalledWith(\n        expect.objectContaining({ id: 'failing-op' }),\n        expect.objectContaining({ \n          status: 'failed',\n          lastError: 'Network error'\n        })\n      )\n    })\n  })\n\n  describe('队列管理', () => {\n    it('应该能够清空队列', async () => {\n      mockDb.clear = jest.fn().mockResolvedValue(1)\n      localStorage.setItem = jest.fn()\n\n      await service.clearQueue()\n\n      expect(mockDb.clear).toHaveBeenCalled()\n      expect(localStorage.setItem).toHaveBeenCalledWith('cardall_sync_queue', '[]')\n    })\n\n    it('应该能够删除指定操作', async () => {\n      mockDb.delete = jest.fn().mockResolvedValue(1)\n\n      await service.removeOperation('test-op-id')\n\n      expect(mockDb.delete).toHaveBeenCalledWith('test-op-id')\n    })\n\n    it('应该能够获取操作历史', async () => {\n      const mockOperations = [\n        {\n          id: 'completed-op',\n          type: 'create' as const,\n          table: 'cards' as const,\n          data: {},\n          localId: 'card-1',\n          timestamp: new Date(Date.now() - 1000).toISOString(),\n          retryCount: 0,\n          status: 'completed' as const,\n          localVersion: 1\n        },\n        {\n          id: 'recent-op',\n          type: 'update' as const,\n          table: 'cards' as const,\n          data: {},\n          localId: 'card-1',\n          timestamp: new Date().toISOString(),\n          retryCount: 0,\n          status: 'pending' as const,\n          localVersion: 1\n        }\n      ]\n\n      mockDb.toArray = jest.fn().mockResolvedValue(mockOperations)\n\n      const history = await service.getOperationHistory(10)\n\n      expect(history).toHaveLength(2)\n      expect(history[0].id).toBe('recent-op') // 最新的操作应该在前\n    })\n  })\n\n  describe('事件监听', () => {\n    it('应该能够添加和移除事件监听器', () => {\n      const mockListener = jest.fn()\n      const unsubscribe = service.onQueueChange(mockListener)\n\n      expect(typeof unsubscribe).toBe('function')\n\n      // 触发事件\n      service['notifyQueueChange']()\n      expect(mockListener).toHaveBeenCalled()\n\n      // 移除监听器\n      unsubscribe()\n      service['notifyQueueChange']()\n      expect(mockListener).toHaveBeenCalledTimes(1)\n    })\n\n    it('应该正确通知队列变化', () => {\n      const mockListener1 = jest.fn()\n      const mockListener2 = jest.fn()\n\n      service.onQueueChange(mockListener1)\n      service.onQueueChange(mockListener2)\n\n      service['notifyQueueChange']()\n\n      expect(mockListener1).toHaveBeenCalled()\n      expect(mockListener2).toHaveBeenCalled()\n    })\n  })\n\n  describe('错误处理', () => {\n    it('应该处理数据库操作失败', async () => {\n      mockDb.add = jest.fn().mockRejectedValue(new Error('Database error'))\n\n      await expect(service.addOperation({\n        type: 'create',\n        table: 'cards',\n        data: { frontContent: 'test' },\n        localId: 'card-1'\n      })).rejects.toThrow('Database error')\n    })\n\n    it('应该处理本地存储操作失败', async () => {\n      mockDb.add = jest.fn().mockResolvedValue('test-id')\n      mockDb.toArray = jest.fn().mockResolvedValue([])\n      \n      // 模拟 localStorage 失败\n      localStorage.setItem = jest.fn().mockImplementation(() => {\n        throw new Error('Storage error')\n      })\n\n      // 操作应该仍然成功，但会记录错误\n      const operationId = await service.addOperation({\n        type: 'create',\n        table: 'cards',\n        data: { frontContent: 'test' },\n        localId: 'card-1'\n      })\n\n      expect(operationId).toBeDefined()\n    })\n  })\n\n  describe('配置管理', () => {\n    it('应该能够更新配置', () => {\n      const newConfig: QueueConfig = {\n        maxQueueSize: 200,\n        maxRetryCount: 5,\n        retryDelay: 2000,\n        processingInterval: 1000,\n        enableCompression: true,\n        enableDeduplication: true,\n        enablePriorityQueue: true,\n        enableBatchProcessing: true,\n        batchSize: 20\n      }\n\n      service.updateConfig(newConfig)\n\n      // 验证配置已更新（通过检查私有属性）\n      expect((service as any).config).toMatchObject(newConfig)\n    })\n\n    it('应该验证配置参数', () => {\n      const invalidConfig = {\n        maxQueueSize: -1,\n        maxRetryCount: -1\n      }\n\n      expect(() => service.updateConfig(invalidConfig as any)).toThrow()\n    })\n  })\n})"],"version":3}
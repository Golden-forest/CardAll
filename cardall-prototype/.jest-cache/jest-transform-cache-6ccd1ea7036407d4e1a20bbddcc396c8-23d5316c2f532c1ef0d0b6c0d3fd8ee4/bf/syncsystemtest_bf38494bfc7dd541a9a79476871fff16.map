{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\tests\\unit\\sync-system.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\tests\\unit\\sync-system.test.ts"],"sourcesContent":["// 同步系统单元测试\nimport { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals'\nimport { MockSyncService, MockSupabaseService, MockDatabaseService } from '../mock-services'\nimport { SyncOperationFixture, TestDataGenerator } from '../data-fixtures'\nimport type { TestSyncOperation } from '../advanced-test-utils'\n\ndescribe('SyncSystem', () => {\n  let supabaseService: MockSupabaseService\n  let databaseService: MockDatabaseService\n  let syncService: MockSyncService\n\n  beforeEach(() => {\n    // 创建模拟服务实例\n    supabaseService = new MockSupabaseService()\n    databaseService = new MockDatabaseService()\n    syncService = new MockSyncService(supabaseService, databaseService)\n  })\n\n  afterEach(() => {\n    jest.clearAllMocks()\n  })\n\n  describe('同步状态管理', () => {\n    it('应该正确报告在线状态', () => {\n      expect(syncService.isOnline()).toBe(true)\n      \n      syncService.setOnline(false)\n      expect(syncService.isOnline()).toBe(false)\n      \n      syncService.setOnline(true)\n      expect(syncService.isOnline()).toBe(true)\n    })\n\n    it('应该正确报告同步状态', () => {\n      expect(syncService.isSyncing()).toBe(false)\n      \n      // 开始同步时应该返回 true\n      // 注意：这里我们测试的是状态，而不是实际的同步过程\n    })\n\n    it('应该正确记录最后同步时间', () => {\n      expect(syncService.getLastSyncTime()).toBeNull()\n      \n      // 执行同步后应该更新时间\n      // 这里我们只测试初始状态\n    })\n  })\n\n  describe('手动同步', () => {\n    it('应该成功同步空队列', async () => {\n      const result = await syncService.syncNow()\n      \n      expect(result.success).toBe(true)\n      expect(result.syncedCount).toBe(0)\n      expect(result.errors).toBe(0)\n    })\n\n    it('应该同步待处理的操作', async () => {\n      // 创建测试数据\n      const testOperation = SyncOperationFixture.createCard('test-card-1')\n      await databaseService.syncQueue.add(testOperation)\n      \n      const result = await syncService.syncNow()\n      \n      expect(result.success).toBe(true)\n      expect(result.syncedCount).toBe(1)\n      expect(result.errors).toBe(0)\n    })\n\n    it('应该处理同步错误', async () => {\n      // 创建会导致错误的操作\n      const errorOperation = SyncOperationFixture.createCard('error-card')\n      jest.spyOn(syncService as any, 'executeSyncOperation').mockRejectedValueOnce(new Error('Sync failed'))\n      \n      await databaseService.syncQueue.add(errorOperation)\n      \n      const result = await syncService.syncNow()\n      \n      expect(result.success).toBe(false)\n      expect(result.syncedCount).toBe(0)\n      expect(result.errors).toBe(1)\n      expect(result.errorDetails).toHaveLength(1)\n      expect(result.errorDetails![0]).toContain('Sync failed')\n    })\n\n    it('不应该在同步进行中时启动新的同步', async () => {\n      // 模拟同步进行中\n      jest.spyOn(syncService as any, 'syncInProgress', 'get').mockReturnValueOnce(true)\n      \n      await expect(syncService.syncNow()).rejects.toThrow('Sync already in progress')\n    })\n  })\n\n  describe('同步操作执行', () => {\n    it('应该正确执行卡片创建操作', async () => {\n      const cardData = TestDataGenerator.generateCard()\n      const operation: TestSyncOperation = {\n        id: 'test-op-1',\n        type: 'create',\n        entity: 'card',\n        entityId: cardData.id,\n        data: cardData,\n        priority: 'normal',\n        timestamp: new Date(),\n        retryCount: 0,\n        maxRetries: 3,\n        status: 'pending',\n      }\n\n      await (syncService as any).executeSyncOperation(operation)\n\n      expect(supabaseService.from('cards').insert).toHaveBeenCalledWith(cardData)\n    })\n\n    it('应该正确执行卡片更新操作', async () => {\n      const cardData = TestDataGenerator.generateCard()\n      const operation: TestSyncOperation = {\n        id: 'test-op-2',\n        type: 'update',\n        entity: 'card',\n        entityId: cardData.id,\n        data: { title: 'Updated Title' },\n        priority: 'normal',\n        timestamp: new Date(),\n        retryCount: 0,\n        maxRetries: 3,\n        status: 'pending',\n      }\n\n      await (syncService as any).executeSyncOperation(operation)\n\n      expect(supabaseService.from('cards').update).toHaveBeenCalledWith({ title: 'Updated Title' })\n      expect(supabaseService.from('cards').update).toHaveBeenCalledWith({ title: 'Updated Title' })\n    })\n\n    it('应该正确执行卡片删除操作', async () => {\n      const operation: TestSyncOperation = {\n        id: 'test-op-3',\n        type: 'delete',\n        entity: 'card',\n        entityId: 'test-card-id',\n        data: {},\n        priority: 'high',\n        timestamp: new Date(),\n        retryCount: 0,\n        maxRetries: 3,\n        status: 'pending',\n      }\n\n      await (syncService as any).executeSyncOperation(operation)\n\n      expect(supabaseService.from('cards').delete).toHaveBeenCalled()\n    })\n\n    it('应该正确执行文件夹操作', async () => {\n      const folderData = TestDataGenerator.generateFolder()\n      const operation: TestSyncOperation = {\n        id: 'test-op-4',\n        type: 'create',\n        entity: 'folder',\n        entityId: folderData.id,\n        data: folderData,\n        priority: 'normal',\n        timestamp: new Date(),\n        retryCount: 0,\n        maxRetries: 3,\n        status: 'pending',\n      }\n\n      await (syncService as any).executeSyncOperation(operation)\n\n      expect(supabaseService.from('folders').insert).toHaveBeenCalledWith(folderData)\n    })\n\n    it('应该正确执行标签操作', async () => {\n      const tagData = TestDataGenerator.generateTag()\n      const operation: TestSyncOperation = {\n        id: 'test-op-5',\n        type: 'create',\n        entity: 'tag',\n        entityId: tagData.id,\n        data: tagData,\n        priority: 'normal',\n        timestamp: new Date(),\n        retryCount: 0,\n        maxRetries: 3,\n        status: 'pending',\n      }\n\n      await (syncService as any).executeSyncOperation(operation)\n\n      expect(supabaseService.from('tags').insert).toHaveBeenCalledWith(tagData)\n    })\n\n    it('应该处理未知实体类型的错误', async () => {\n      const operation: TestSyncOperation = {\n        id: 'test-op-6',\n        type: 'create',\n        entity: 'unknown' as any,\n        entityId: 'test-id',\n        data: {},\n        priority: 'normal',\n        timestamp: new Date(),\n        retryCount: 0,\n        maxRetries: 3,\n        status: 'pending',\n      }\n\n      await expect((syncService as any).executeSyncOperation(operation))\n        .rejects.toThrow('Unknown entity type: unknown')\n    })\n  })\n\n  describe('自动同步', () => {\n    it('应该启动自动同步并返回停止函数', () => {\n      const stopSync = syncService.startAutoSync(1000)\n      \n      expect(typeof stopSync).toBe('function')\n      \n      // 停止同步\n      stopSync()\n    })\n\n    it('应该只在在线状态且非同步中时执行自动同步', async () => {\n      const syncNowSpy = jest.spyOn(syncService, 'syncNow')\n      \n      // 设置为在线状态\n      syncService.setOnline(true)\n      jest.spyOn(syncService as any, 'syncInProgress', 'get').mockReturnValue(false)\n      \n      const stopSync = syncService.startAutoSync(100)\n      \n      // 等待一个时间间隔\n      await new Promise(resolve => setTimeout(resolve, 150))\n      \n      expect(syncNowSpy).toHaveBeenCalled()\n      \n      stopSync()\n    })\n\n    it('应该在离线状态时不执行自动同步', async () => {\n      const syncNowSpy = jest.spyOn(syncService, 'syncNow')\n      \n      // 设置为离线状态\n      syncService.setOnline(false)\n      \n      const stopSync = syncService.startAutoSync(100)\n      \n      // 等待一个时间间隔\n      await new Promise(resolve => setTimeout(resolve, 150))\n      \n      expect(syncNowSpy).not.toHaveBeenCalled()\n      \n      stopSync()\n    })\n\n    it('应该在同步进行中时不执行自动同步', async () => {\n      const syncNowSpy = jest.spyOn(syncService, 'syncNow')\n      \n      // 设置为同步进行中\n      jest.spyOn(syncService as any, 'syncInProgress', 'get').mockReturnValue(true)\n      \n      const stopSync = syncService.startAutoSync(100)\n      \n      // 等待一个时间间隔\n      await new Promise(resolve => setTimeout(resolve, 150))\n      \n      expect(syncNowSpy).not.toHaveBeenCalled()\n      \n      stopSync()\n    })\n  })\n\n  describe('冲突解决', () => {\n    it('应该能够解决冲突', async () => {\n      const conflicts = [\n        {\n          id: 'conflict-1',\n          localData: { title: 'Local Title' },\n          remoteData: { title: 'Remote Title' },\n          entityType: 'card',\n        },\n        {\n          id: 'conflict-2',\n          localData: { name: 'Local Name' },\n          remoteData: { name: 'Remote Name' },\n          entityType: 'folder',\n        },\n      ]\n\n      const resolved = await syncService.resolveConflicts(conflicts)\n\n      expect(resolved).toHaveLength(2)\n      resolved.forEach(conflict => {\n        expect(conflict.resolved).toBe(true)\n        expect(conflict.resolution).toBe('local-wins')\n      })\n    })\n\n    it('应该处理空冲突列表', async () => {\n      const resolved = await syncService.resolveConflicts([])\n      \n      expect(resolved).toHaveLength(0)\n    })\n  })\n\n  describe('错误管理', () => {\n    it('应该记录同步错误', async () => {\n      // 初始状态应该没有错误\n      expect(syncService.getSyncErrors()).toHaveLength(0)\n      \n      // 执行一个会失败的同步\n      const errorOperation = SyncOperationFixture.createCard('error-card')\n      jest.spyOn(syncService as any, 'executeSyncOperation').mockRejectedValueOnce(new Error('Test error'))\n      \n      await databaseService.syncQueue.add(errorOperation)\n      await syncService.syncNow()\n      \n      // 应该记录错误\n      const errors = syncService.getSyncErrors()\n      expect(errors.length).toBeGreaterThan(0)\n      expect(errors[0]).toContain('Test error')\n    })\n\n    it('应该能够清除错误', () => {\n      // 手动添加一些错误（模拟）\n      (syncService as any).syncErrors = ['Error 1', 'Error 2']\n      \n      expect(syncService.getSyncErrors()).toHaveLength(2)\n      \n      syncService.clearErrors()\n      \n      expect(syncService.getSyncErrors()).toHaveLength(0)\n    })\n  })\n\n  describe('性能测试', () => {\n    it('应该能够处理大量同步操作', async () => {\n      // 创建大量同步操作\n      const operations = []\n      for (let i = 0; i < 100; i++) {\n        const operation = SyncOperationFixture.createCard(`card-${i}`)\n        await databaseService.syncQueue.add(operation)\n        operations.push(operation)\n      }\n\n      const startTime = performance.now()\n      const result = await syncService.syncNow()\n      const endTime = performance.now()\n\n      expect(result.success).toBe(true)\n      expect(result.syncedCount).toBe(100)\n      expect(result.errors).toBe(0)\n      \n      // 性能检查：应该在合理时间内完成\n      const executionTime = endTime - startTime\n      expect(executionTime).toBeLessThan(5000) // 5秒内完成\n    }, 10000) // 增加超时时间\n\n    it('应该正确处理网络延迟', async () => {\n      // 模拟网络延迟\n      jest.spyOn(syncService as any, 'executeSyncOperation').mockImplementationOnce(async () => {\n        await new Promise(resolve => setTimeout(resolve, 1000))\n        return true\n      })\n\n      const operation = SyncOperationFixture.createCard('delayed-card')\n      await databaseService.syncQueue.add(operation)\n\n      const startTime = performance.now()\n      const result = await syncService.syncNow()\n      const endTime = performance.now()\n\n      expect(result.success).toBe(true)\n      expect(result.syncedCount).toBe(1)\n      \n      // 应该考虑网络延迟\n      const executionTime = endTime - startTime\n      expect(executionTime).toBeGreaterThan(900) // 接近延迟时间\n    }, 5000)\n  })\n})"],"version":3}
{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\services\\data-migration\\DataMigrationTool.backup.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\services\\data-migration\\DataMigrationTool.backup.test.ts"],"sourcesContent":["/**\n * 备份恢复机制测试\n */\n\nimport { dataMigrationTool } from '@/services/data-migration-tool'\nimport { db } from '@/services/database-unified'\nimport { TestDataFactory, MigrationTestHelpers } from './test-utils'\nimport { setup } from './setup'\n\ndescribe('DataMigrationTool - 备份恢复机制测试', () => {\n  const {\n    setupLocalStorageData,\n    cleanupLocalStorage,\n    validateMigrationResult,\n    createProgressListener\n  } = MigrationTestHelpers\n\n  describe('备份创建', () => {\n    beforeEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    afterEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    test('应该在迁移前创建完整备份', async () => {\n      // 先在数据库中准备一些数据\n      const existingData = TestDataFactory.createBulkTestData(5, 2, 3)\n      await db.cards.bulkAdd(existingData.cards.map(card => ({\n        ...card,\n        userId: 'default',\n        syncVersion: 1,\n        pendingSync: false,\n        updatedAt: new Date(),\n        searchVector: 'test vector'\n      })))\n      await db.folders.bulkAdd(existingData.folders.map(folder => ({\n        ...folder,\n        userId: 'default',\n        syncVersion: 1,\n        pendingSync: false,\n        updatedAt: new Date(),\n        fullPath: folder.name,\n        depth: 0\n      })))\n      await db.tags.bulkAdd(existingData.tags.map(tag => ({\n        ...tag,\n        userId: 'default',\n        syncVersion: 1,\n        pendingSync: false,\n        updatedAt: new Date(),\n        count: 0\n      })))\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      expect(plan.backupRequired).toBe(true)\n\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      expect(result.success).toBe(true)\n      expect(result.rollbackPoint).toBeDefined()\n\n      // 验证备份点数据存在\n      const rollbackKey = `rollback_${result.rollbackPoint}`\n      const rollbackData = await db.settings\n        .where('key')\n        .equals(rollbackKey)\n        .first()\n\n      expect(rollbackData).toBeDefined()\n      expect(rollbackData.value).toBeDefined()\n      expect(rollbackData.value.data).toBeDefined()\n      expect(rollbackData.value.data.cards).toHaveLength(existingData.cards.length)\n      expect(rollbackData.value.data.folders).toHaveLength(existingData.folders.length)\n      expect(rollbackData.value.data.tags).toHaveLength(existingData.tags.length)\n    })\n\n    test('应该正确计算备份校验和', async () => {\n      const testData = TestDataFactory.createBulkTestData(3, 1, 2)\n      setupLocalStorageData(testData)\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      expect(result.success).toBe(true)\n      expect(result.rollbackPoint).toBeDefined()\n\n      // 获取备份数据\n      const rollbackKey = `rollback_${result.rollbackPoint}`\n      const rollbackData = await db.settings\n        .where('key')\n        .equals(rollbackKey)\n        .first()\n\n      expect(rollbackData.value.checksum).toBeDefined()\n      expect(typeof rollbackData.value.checksum).toBe('string')\n      expect(rollbackData.value.checksum.length).toBe(64) // SHA-256 哈希长度\n    })\n\n    test('应该同时保存到localStorage作为额外保护', async () => {\n      const testData = TestDataFactory.createBulkTestData(2, 1, 1)\n      setupLocalStorageData(testData)\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      expect(result.success).toBe(true)\n      expect(result.rollbackPoint).toBeDefined()\n\n      // 验证localStorage中也有备份\n      const backupKeys = Object.keys(localStorage)\n      const migrationBackups = backupKeys.filter(key => key.startsWith('migration_backup_'))\n\n      expect(migrationBackups.length).toBeGreaterThan(0)\n\n      // 验证备份数据格式\n      const backupKey = migrationBackups[0]\n      const backupData = JSON.parse(localStorage.getItem(backupKey)!)\n\n      expect(backupData.id).toBeDefined()\n      expect(backupData.timestamp).toBeDefined()\n      expect(backupData.data).toBeDefined()\n      expect(backupData.checksum).toBeDefined()\n    })\n\n    test('应该正确备份设置数据', async () => {\n      // 先在数据库中添加一些设置\n      await db.settings.bulkAdd([\n        { key: 'theme', value: 'dark', updatedAt: new Date(), scope: 'user' },\n        { key: 'language', value: 'zh-CN', updatedAt: new Date(), scope: 'user' },\n        { key: 'auto-sync', value: true, updatedAt: new Date(), scope: 'global' }\n      ])\n\n      const testData = TestDataFactory.createBulkTestData(1, 0, 0)\n      setupLocalStorageData(testData)\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      expect(result.success).toBe(true)\n\n      // 验证设置数据也被备份\n      const rollbackKey = `rollback_${result.rollbackPoint}`\n      const rollbackData = await db.settings\n        .where('key')\n        .equals(rollbackKey)\n        .first()\n\n      expect(rollbackData.value.data.settings).toBeDefined()\n      expect(rollbackData.value.data.settings.length).toBe(3)\n      expect(rollbackData.value.data.settings.some((s: any) => s.key === 'theme')).toBe(true)\n    })\n\n    test('应该正确备份同步队列数据', async () => {\n      // 添加同步队列数据\n      await db.syncQueue.bulkAdd([\n        {\n          type: 'create',\n          entity: 'card',\n          entityId: 'card-1',\n          userId: 'default',\n          timestamp: new Date(),\n          retryCount: 0,\n          maxRetries: 3,\n          priority: 'normal'\n        },\n        {\n          type: 'update',\n          entity: 'folder',\n          entityId: 'folder-1',\n          userId: 'default',\n          timestamp: new Date(),\n          retryCount: 1,\n          maxRetries: 3,\n          priority: 'high'\n        }\n      ])\n\n      const testData = TestDataFactory.createBulkTestData(1, 0, 0)\n      setupLocalStorageData(testData)\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      expect(result.success).toBe(true)\n\n      // 验证同步队列数据也被备份\n      const rollbackKey = `rollback_${result.rollbackPoint}`\n      const rollbackData = await db.settings\n        .where('key')\n        .equals(rollbackKey)\n        .first()\n\n      expect(rollbackData.value.data.syncQueue).toBeDefined()\n      expect(rollbackData.value.data.syncQueue.length).toBe(2)\n    })\n  })\n\n  describe('备份恢复', () => {\n    beforeEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    afterEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    test('应该能够从回滚点恢复数据', async () => {\n      // 准备原始数据\n      const originalData = TestDataFactory.createBulkTestData(5, 2, 3)\n      await db.cards.bulkAdd(originalData.cards.map(card => ({\n        ...card,\n        userId: 'default',\n        syncVersion: 1,\n        pendingSync: false,\n        updatedAt: new Date(),\n        searchVector: 'original data'\n      })))\n\n      // 创建迁移\n      const testData = TestDataFactory.createBulkTestData(3, 1, 2)\n      setupLocalStorageData(testData)\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      expect(result.success).toBe(true)\n      expect(result.rollbackPoint).toBeDefined()\n\n      // 验证迁移后的数据\n      let dbCards = await db.cards.toArray()\n      expect(dbCards.length).toBe(originalData.cards.length + testData.cards.length)\n\n      // 模拟迁移失败，手动触发回滚\n      await (dataMigrationTool as any).rollbackMigration(result.rollbackPoint!)\n\n      // 验证数据已恢复\n      dbCards = await db.cards.toArray()\n      expect(dbCards.length).toBe(originalData.cards.length)\n\n      // 验证原始数据完整性\n      dbCards.forEach(card => {\n        expect(card.searchVector).toBe('original data')\n        expect(card.userId).toBe('default')\n      })\n    })\n\n    test('应该正确恢复复杂的数据结构', async () => {\n      // 准备包含图片和复杂关系的原始数据\n      const complexData = TestDataFactory.createBulkTestData(10, 5, 8)\n\n      // 添加图片数据到数据库\n      const imageRecords = []\n      for (let i = 0; i < 3; i++) {\n        imageRecords.push({\n          id: `image-${i}`,\n          cardId: complexData.cards[i].id,\n          userId: 'default',\n          fileName: `image-${i}.jpg`,\n          filePath: `/images/${complexData.cards[i].id}/image-${i}.jpg`,\n          metadata: {\n            originalName: `image-${i}.jpg`,\n            size: 1024,\n            width: 100,\n            height: 100,\n            format: 'jpg',\n            compressed: false\n          },\n          storageMode: 'filesystem' as const,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          syncVersion: 1,\n          pendingSync: false\n        })\n      }\n      await db.images.bulkAdd(imageRecords)\n\n      // 添加设置和同步数据\n      await db.settings.bulkAdd([\n        { key: 'test-setting', value: 'test-value', updatedAt: new Date(), scope: 'user' }\n      ])\n\n      // 执行迁移\n      const testData = TestDataFactory.createBulkTestData(2, 1, 1)\n      setupLocalStorageData(testData)\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      expect(result.success).toBe(true)\n\n      // 执行回滚\n      await (dataMigrationTool as any).rollbackMigration(result.rollbackPoint!)\n\n      // 验证所有数据都正确恢复\n      const dbCards = await db.cards.toArray()\n      const dbImages = await db.images.toArray()\n      const dbSettings = await db.settings.where('key').equals('test-setting').toArray()\n\n      expect(dbCards.length).toBe(complexData.cards.length)\n      expect(dbImages.length).toBe(imageRecords.length)\n      expect(dbSettings.length).toBe(1)\n\n      // 验证数据关系\n      dbImages.forEach(image => {\n        expect(dbCards.some(card => card.id === image.cardId)).toBe(true)\n      })\n    })\n\n    test('应该处理回滚过程中的错误', async () => {\n      const testData = TestDataFactory.createBulkTestData(1, 0, 0)\n      setupLocalStorageData(testData)\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      expect(result.success).toBe(true)\n      expect(result.rollbackPoint).toBeDefined()\n\n      // 模拟回滚失败\n      const originalClearAll = db.clearAll\n      db.clearAll = jest.fn().mockRejectedValue(new Error('Clear failed'))\n\n      try {\n        await expect((dataMigrationTool as any).rollbackMigration(result.rollbackPoint!))\n          .rejects.toThrow('Rollback failed')\n      } finally {\n        // 恢复原始方法\n        db.clearAll = originalClearAll\n      }\n    })\n\n    test('应该验证回滚后的数据完整性', async () => {\n      // 准备原始数据\n      const originalData = TestDataFactory.createBulkTestData(5, 2, 3)\n      await db.cards.bulkAdd(originalData.cards.map(card => ({\n        ...card,\n        userId: 'default',\n        syncVersion: 1,\n        pendingSync: false,\n        updatedAt: new Date(),\n        searchVector: 'test data'\n      })))\n\n      const testData = TestDataFactory.createBulkTestData(3, 1, 2)\n      setupLocalStorageData(testData)\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      expect(result.success).toBe(true)\n\n      // 执行回滚\n      await (dataMigrationTool as any).rollbackMigration(result.rollbackPoint!)\n\n      // 验证回滚后的数据完整性\n      const validationReport = await dataMigrationTool.createValidationReport()\n\n      expect(validationReport.success).toBe(true)\n      expect(validationReport.integrity.cardsValid).toBe(originalData.cards.length)\n      expect(validationReport.consistency.referencesValid).toBe(true)\n      expect(validationReport.consistency.orphansFound).toBe(0)\n    })\n  })\n\n  describe('备份策略和优化', () => {\n    beforeEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    afterEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    test('应该根据源类型决定是否需要备份', async () => {\n      // localStorage源需要备份\n      const localStorageSource = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const localStoragePlan = await dataMigrationTool.analyzeAndCreatePlan(localStorageSource)\n      expect(localStoragePlan.backupRequired).toBe(true)\n\n      // 备份源不需要额外备份\n      const backupSource = {\n        type: 'backup' as const,\n        version: '1.0'\n      }\n\n      const backupPlan = await dataMigrationTool.analyzeAndCreatePlan(backupSource)\n      expect(backupPlan.backupRequired).toBe(false)\n    })\n\n    test('应该优化大数据量的备份性能', async () => {\n      // 准备大量原始数据\n      const largeOriginalData = TestDataFactory.createBulkTestData(100, 20, 30)\n      await db.cards.bulkAdd(largeOriginalData.cards.map(card => ({\n        ...card,\n        userId: 'default',\n        syncVersion: 1,\n        pendingSync: false,\n        updatedAt: new Date(),\n        searchVector: 'large original data'\n      })))\n\n      const testData = TestDataFactory.createBulkTestData(10, 3, 5)\n      setupLocalStorageData(testData)\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n\n      const startTime = performance.now()\n      const result = await dataMigrationTool.executeMigration(plan)\n      const endTime = performance.now()\n\n      expect(result.success).toBe(true)\n\n      const backupTime = endTime - startTime\n      console.log(`大数据量备份耗时: ${backupTime.toFixed(2)}ms`)\n\n      // 备份应该在合理时间内完成（5秒内）\n      expect(backupTime).toBeLessThan(5000)\n\n      // 验证备份数据完整性\n      const rollbackKey = `rollback_${result.rollbackPoint}`\n      const rollbackData = await db.settings\n        .where('key')\n        .equals(rollbackKey)\n        .first()\n\n      expect(rollbackData.value.data.cards.length).toBe(largeOriginalData.cards.length)\n    })\n\n    test('应该正确清理过期的回滚点', async () => {\n      const testData = TestDataFactory.createBulkTestData(2, 1, 1)\n      setupLocalStorageData(testData)\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      expect(result.success).toBe(true)\n      expect(result.rollbackPoint).toBeDefined()\n\n      // 验证回滚点存在\n      const rollbackKey = `rollback_${result.rollbackPoint}`\n      let rollbackData = await db.settings\n        .where('key')\n        .equals(rollbackKey)\n        .first()\n\n      expect(rollbackData).toBeDefined()\n\n      // 迁移完成后应该自动清理\n      await MigrationTestHelpers.waitFor(100)\n\n      // 检查是否已清理（可能在后台自动清理）\n      rollbackData = await db.settings\n        .where('key')\n        .equals(rollbackKey)\n        .first()\n\n      // 清理是可选的，不强制要求\n    })\n\n    test('应该处理备份存储空间不足的情况', async () => {\n      // 模拟存储配额不足\n      const originalEstimate = (navigator as any).storage?.estimate\n      if (typeof navigator !== 'undefined') {\n        ;(navigator as any).storage = {\n          estimate: jest.fn().mockResolvedValue({\n            usage: 4.9 * 1024 * 1024 * 1024, // 4.9GB used\n            quota: 5 * 1024 * 1024 * 1024    // 5GB total\n          })\n        }\n      }\n\n      const testData = TestDataFactory.createBulkTestData(1, 0, 0)\n      setupLocalStorageData(testData)\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      try {\n        const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n        const result = await dataMigrationTool.executeMigration(plan)\n\n        // 即使存储空间紧张，也应该能够完成基本备份\n        expect(result.success).toBe(true)\n      } finally {\n        // 恢复原始estimate方法\n        if (originalEstimate) {\n          ;(navigator as any).storage.estimate = originalEstimate\n        }\n      }\n    })\n  })\n\n  describe('备份验证和安全', () => {\n    beforeEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    afterEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    test('应该验证备份数据的完整性', async () => {\n      const testData = TestDataFactory.createBulkTestData(3, 1, 2)\n      setupLocalStorageData(testData)\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      expect(result.success).toBe(true)\n\n      // 获取备份数据\n      const rollbackKey = `rollback_${result.rollbackPoint}`\n      const rollbackData = await db.settings\n        .where('key')\n        .equals(rollbackKey)\n        .first()\n\n      // 验证备份数据结构\n      expect(rollbackData.value.id).toBeDefined()\n      expect(rollbackData.value.timestamp).toBeInstanceOf(Date)\n      expect(rollbackData.value.version).toBeDefined()\n      expect(rollbackData.value.data).toBeDefined()\n      expect(rollbackData.value.checksum).toBeDefined()\n\n      // 验证各数据表存在\n      expect(rollbackData.value.data.cards).toBeDefined()\n      expect(rollbackData.value.data.folders).toBeDefined()\n      expect(rollbackData.value.data.tags).toBeDefined()\n      expect(rollbackData.value.data.images).toBeDefined()\n      expect(rollbackData.value.data.settings).toBeDefined()\n      expect(rollbackData.value.data.syncQueue).toBeDefined()\n    })\n\n    test('应该检测备份数据的损坏', async () => {\n      const testData = TestDataFactory.createBulkTestData(1, 0, 0)\n      setupLocalStorageData(testData)\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      expect(result.success).toBe(true)\n\n      // 获取并损坏备份数据\n      const rollbackKey = `rollback_${result.rollbackPoint}`\n      const rollbackData = await db.settings\n        .where('key')\n        .equals(rollbackKey)\n        .first()\n\n      // 修改备份数据以模拟损坏\n      rollbackData.value.data.cards = null\n\n      await db.settings.update(rollbackData.key!, { value: rollbackData.value })\n\n      // 尝试回滚应该检测到损坏\n      await expect((dataMigrationTool as any).rollbackMigration(result.rollbackPoint!))\n        .rejects.toThrow()\n    })\n\n    test('应该保护备份不被意外删除', async () => {\n      const testData = TestDataFactory.createBulkTestData(1, 0, 0)\n      setupLocalStorageData(testData)\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      expect(result.success).toBe(true)\n\n      // 尝试直接删除备份应该失败（通过正常API）\n      const rollbackKey = `rollback_${result.rollbackPoint}`\n\n      // 验证备份存在\n      let rollbackData = await db.settings\n        .where('key')\n        .equals(rollbackKey)\n        .first()\n\n      expect(rollbackData).toBeDefined()\n\n      // 备份应该在迁移完成后保持一段时间，不能立即删除\n      // 这是设计要求，确保有足够时间进行恢复\n    })\n  })\n})"],"version":3}
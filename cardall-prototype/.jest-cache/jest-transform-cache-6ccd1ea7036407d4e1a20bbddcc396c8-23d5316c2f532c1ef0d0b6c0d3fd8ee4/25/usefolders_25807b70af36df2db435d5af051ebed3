f6cbafa0bc59d89ddd1a37dcae6084f9
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useFolders = useFolders;
const react_1 = require("react");
// Mock data for development
const mockFolders = [
    {
        id: 'folder-1',
        name: 'Development',
        color: '#3b82f6',
        icon: 'Code',
        cardIds: ['1'],
        isExpanded: true,
        createdAt: new Date('2024-01-10'),
        updatedAt: new Date('2024-01-15')
    },
    {
        id: 'folder-2',
        name: 'Design Resources',
        color: '#8b5cf6',
        icon: 'Palette',
        cardIds: [],
        isExpanded: false,
        createdAt: new Date('2024-01-12'),
        updatedAt: new Date('2024-01-12')
    },
    {
        id: 'folder-3',
        name: 'Learning Notes',
        color: '#10b981',
        icon: 'BookOpen',
        cardIds: ['2'],
        parentId: 'folder-1',
        isExpanded: true,
        createdAt: new Date('2024-01-14'),
        updatedAt: new Date('2024-01-16')
    }
];
function useFolders() {
    const [folders, setFolders] = (0, react_1.useState)(mockFolders);
    const [selectedFolderId, setSelectedFolderId] = (0, react_1.useState)(null);
    // Get folder tree structure
    const getFolderTree = (0, react_1.useCallback)(() => {
        const rootFolders = folders.filter(folder => !folder.parentId);
        const buildTree = (parentFolders) => {
            return parentFolders.map(folder => ({
                ...folder,
                children: buildTree(folders.filter(f => f.parentId === folder.id))
            }));
        };
        return buildTree(rootFolders);
    }, [folders]);
    // Folder actions
    const dispatch = (0, react_1.useCallback)((action) => {
        setFolders(prevFolders => {
            switch (action.type) {
                case 'CREATE_FOLDER':
                    const newFolder = {
                        ...action.payload,
                        id: `folder-${Date.now()}`,
                        cardIds: [],
                        createdAt: new Date(),
                        updatedAt: new Date()
                    };
                    return [...prevFolders, newFolder];
                case 'UPDATE_FOLDER':
                    return prevFolders.map(folder => folder.id === action.payload.id
                        ? { ...folder, ...action.payload.updates, updatedAt: new Date() }
                        : folder);
                case 'DELETE_FOLDER':
                    const folderToDelete = prevFolders.find(f => f.id === action.payload);
                    if (folderToDelete) {
                        // Get all child folders recursively
                        const getAllChildFolders = (parentId) => {
                            const children = prevFolders.filter(f => f.parentId === parentId);
                            const childIds = children.map(f => f.id);
                            const grandChildIds = children.flatMap(child => getAllChildFolders(child.id));
                            return [...childIds, ...grandChildIds];
                        };
                        const allChildFolderIds = getAllChildFolders(action.payload);
                        const allFoldersToDelete = [action.payload, ...allChildFolderIds];
                        // Get all card IDs from folders to be deleted
                        const allCardIdsToDelete = prevFolders
                            .filter(folder => allFoldersToDelete.includes(folder.id))
                            .flatMap(folder => folder.cardIds);
                        // Trigger card deletion through callback if provided
                        if ('onDeleteCards' in action && action.onDeleteCards && allCardIdsToDelete.length > 0) {
                            action.onDeleteCards(allCardIdsToDelete);
                        }
                        return prevFolders.filter(folder => !allFoldersToDelete.includes(folder.id));
                    }
                    return prevFolders.filter(folder => folder.id !== action.payload);
                case 'TOGGLE_FOLDER':
                    return prevFolders.map(folder => folder.id === action.payload
                        ? { ...folder, isExpanded: !folder.isExpanded, updatedAt: new Date() }
                        : folder);
                default:
                    return prevFolders;
            }
        });
    }, []);
    // Utility functions
    const getFolderById = (0, react_1.useCallback)((id) => {
        return folders.find(folder => folder.id === id);
    }, [folders]);
    const getFolderPath = (0, react_1.useCallback)((folderId) => {
        const path = [];
        let currentFolder = getFolderById(folderId);
        while (currentFolder) {
            path.unshift(currentFolder);
            currentFolder = currentFolder.parentId ? getFolderById(currentFolder.parentId) : null;
        }
        return path;
    }, [folders, getFolderById]);
    const addCardToFolder = (0, react_1.useCallback)((cardId, folderId) => {
        dispatch({
            type: 'UPDATE_FOLDER',
            payload: {
                id: folderId,
                updates: {
                    cardIds: [...(getFolderById(folderId)?.cardIds || []), cardId]
                }
            }
        });
    }, [dispatch, getFolderById]);
    const removeCardFromFolder = (0, react_1.useCallback)((cardId, folderId) => {
        const folder = getFolderById(folderId);
        if (folder) {
            dispatch({
                type: 'UPDATE_FOLDER',
                payload: {
                    id: folderId,
                    updates: {
                        cardIds: folder.cardIds.filter(id => id !== cardId)
                    }
                }
            });
        }
    }, [dispatch, getFolderById]);
    const moveCardBetweenFolders = (0, react_1.useCallback)((cardId, fromFolderId, toFolderId) => {
        if (fromFolderId) {
            removeCardFromFolder(cardId, fromFolderId);
        }
        if (toFolderId) {
            addCardToFolder(cardId, toFolderId);
        }
    }, [addCardToFolder, removeCardFromFolder]);
    const canMoveFolder = (0, react_1.useCallback)((folderId, targetParentId) => {
        // Can't move folder to itself or its descendants
        if (folderId === targetParentId)
            return false;
        let currentParent = targetParentId;
        while (currentParent) {
            if (currentParent === folderId)
                return false;
            const parentFolder = getFolderById(currentParent);
            currentParent = parentFolder?.parentId ?? null;
        }
        return true;
    }, [getFolderById]);
    // Auto-save to localStorage
    (0, react_1.useEffect)(() => {
        const saveTimer = setTimeout(() => {
            localStorage.setItem('cardall-folders', JSON.stringify(folders));
        }, 1000);
        return () => clearTimeout(saveTimer);
    }, [folders]);
    // Load from localStorage on mount
    (0, react_1.useEffect)(() => {
        const saved = localStorage.getItem('cardall-folders');
        if (saved) {
            try {
                const parsedFolders = JSON.parse(saved);
                setFolders(parsedFolders);
            }
            catch (error) {
                console.error('Failed to load saved folders:', error);
            }
        }
    }, []);
    return {
        folders,
        folderTree: getFolderTree(),
        selectedFolderId,
        setSelectedFolderId,
        dispatch,
        getFolderById,
        getFolderPath,
        addCardToFolder,
        removeCardFromFolder,
        moveCardBetweenFolders,
        canMoveFolder
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\error-handling\\types.ts","mappings":";AAAA;;;GAGG;;;AAEH,OAAO;AACP,IAAY,UAKX;AALD,WAAY,UAAU;IACpB,mCAAqB,CAAA;IACrB,6BAAe,CAAA;IACf,iCAAmB,CAAA;IACnB,2BAAa,CAAA,CAAW,OAAO;AACjC,CAAC,EALW,UAAU,0BAAV,UAAU,QAKrB;AAED,OAAO;AACP,IAAY,aAMX;AAND,WAAY,aAAa;IACvB,oCAAmB,CAAA;IACnB,sCAAqB,CAAA;IACrB,4CAA2B,CAAA;IAC3B,8BAAa,CAAA;IACb,kCAAiB,CAAA,CAAY,SAAS;AACxC,CAAC,EANW,aAAa,6BAAb,aAAa,QAMxB;AAED,QAAQ;AACR,IAAY,gBA0BX;AA1BD,WAAY,gBAAgB;IAC1B,OAAO;IACP,uDAAmC,CAAA;IACnC,uDAAmC,CAAA;IACnC,uDAAmC,CAAA;IACnC,+CAA2B,CAAA;IAE3B,OAAO;IACP,6CAAyB,CAAA;IACzB,2CAAuB,CAAA;IACvB,6CAAyB,CAAA;IAEzB,OAAO;IACP,yDAAqC,CAAA;IACrC,iEAA6C,CAAA;IAC7C,yDAAqC,CAAA;IAErC,OAAO;IACP,mDAA+B,CAAA;IAC/B,uDAAmC,CAAA;IACnC,2CAAuB,CAAA;IAEvB,OAAO;IACP,uDAAmC,CAAA;IACnC,6DAAyC,CAAA;IACzC,+DAA2C,CAAA;AAC7C,CAAC,EA1BW,gBAAgB,gCAAhB,gBAAgB,QA0B3B","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\error-handling\\types.ts"],"sourcesContent":["/**\n * 错误处理类型定义\n * 统一所有错误处理相关的类型定义\n */\n\n// 错误级别\nexport enum ErrorLevel {\n  CRITICAL = 'critical',    // 系统级严重错误\n  ERROR = 'error',         // 功能性错误\n  WARNING = 'warning',     // 警告信息\n  INFO = 'info'           // 信息提示\n}\n\n// 错误类别\nexport enum ErrorCategory {\n  NETWORK = 'network',           // 网络相关错误\n  PROTOCOL = 'protocol',         // 协议相关错误\n  APPLICATION = 'application',   // 应用相关错误\n  DATA = 'data',               // 数据相关错误\n  SYSTEM = 'system'            // 系统相关错误\n}\n\n// 错误子类别\nexport enum ErrorSubCategory {\n  // 网络错误\n  CONNECTION_LOST = 'connection_lost',\n  NETWORK_TIMEOUT = 'network_timeout',\n  BANDWIDTH_LIMIT = 'bandwidth_limit',\n  DNS_FAILURE = 'dns_failure',\n\n  // 协议错误\n  HTTP_ERROR = 'http_error',\n  SSL_ERROR = 'ssl_error',\n  AUTH_ERROR = 'auth_error',\n\n  // 应用错误\n  VALIDATION_ERROR = 'validation_error',\n  BUSINESS_LOGIC_ERROR = 'business_logic_error',\n  PERMISSION_ERROR = 'permission_error',\n\n  // 数据错误\n  DATA_CONFLICT = 'data_conflict',\n  DATA_CORRUPTION = 'data_corruption',\n  DATA_LOSS = 'data_loss',\n\n  // 系统错误\n  SYSTEM_OVERLOAD = 'system_overload',\n  RESOURCE_EXHAUSTED = 'resource_exhausted',\n  CONFIGURATION_ERROR = 'configuration_error'\n}\n\n// 错误严重程度（别名）\nexport type ErrorSeverity = ErrorLevel\n\n// 恢复操作类型\nexport type RecoveryAction =\n  | 'retry'\n  | 'rollback'\n  | 'fallback'\n  | 'repair'\n  | 'manual'\n  | 'skip'\n\n// 统一错误接口\nexport interface UnifiedError {\n  // 基础信息\n  id: string                    // 错误唯一标识\n  code: string                  // 错误代码\n  level: ErrorLevel            // 错误级别\n  category: ErrorCategory      // 错误类别\n  subCategory: ErrorSubCategory // 错误子类别\n\n  // 错误详情\n  message: string              // 错误消息\n  details?: any               // 错误详情\n  stack?: string              // 错误堆栈\n\n  // 上下文信息\n  timestamp: Date             // 发生时间\n  operation?: string          // 相关操作\n  entity?: string             // 相关实体\n  userId?: string             // 用户ID\n\n  // 恢复信息\n  retryable: boolean          // 是否可重试\n  retryCount?: number         // 已重试次数\n  maxRetries?: number         // 最大重试次数\n  recovery?: RecoveryAction   // 恢复操作\n\n  // 关联信息\n  cause?: UnifiedError        // 原始错误\n  relatedErrors?: UnifiedError[] // 关联错误\n}\n\n// 错误处理上下文\nexport interface ErrorContext {\n  request?: any               // 相关请求\n  response?: any              // 相关响应\n  userId?: string             // 用户ID\n  sessionId?: string          // 会话ID\n  environment: 'development' | 'staging' | 'production'\n  deviceInfo?: any            // 设备信息\n  networkState?: any          // 网络状态\n}\n\n// 错误处理结果\nexport interface ErrorHandlingResult {\n  handled: boolean            // 是否已处理\n  error?: UnifiedError        // 处理后的错误\n  action?: RecoveryAction     // 执行的恢复操作\n  resolution?: string         // 解决方案描述\n  metrics?: {                // 处理指标\n    handlingTime: number      // 处理时间\n    attempts: number          // 尝试次数\n    memoryUsage: number       // 内存使用\n  }\n}\n\n// 错误处理器接口\nexport interface ErrorHandler {\n  canHandle(error: any): boolean\n  handle(error: any, context: ErrorContext): Promise<ErrorHandlingResult>\n  priority: number           // 处理优先级\n}\n\n// 监控指标接口\nexport interface MonitoringMetrics {\n  // 基础指标\n  totalErrors: number                    // 总错误数\n  errorRate: number                     // 错误率\n  uniqueErrors: number                  // 唯一错误数\n\n  // 分类指标\n  errorByCategory: Record<ErrorCategory, number>\n  errorByLevel: Record<ErrorLevel, number>\n  errorByCode: Record<string, number>\n\n  // 趋势指标\n  errorTrend: Array<{\n    timestamp: Date\n    count: number\n    rate: number\n  }>\n\n  // 恢复指标\n  recoveryRate: number                 // 恢复率\n  averageRecoveryTime: number          // 平均恢复时间\n  retrySuccessRate: number             // 重试成功率\n\n  // 影响指标\n  affectedUsers: number                // 受影响用户数\n  affectedOperations: number           // 受影响操作数\n}\n\n// 告警规则接口\nexport interface AlertRule {\n  id: string\n  name: string\n  description: string\n  condition: AlertCondition\n  threshold: number\n  duration: number          // 持续时间（毫秒）\n  severity: 'low' | 'medium' | 'high' | 'critical'\n  enabled: boolean\n  channels: AlertChannel[]  // 通知渠道\n  actions: AlertAction[]    // 告警动作\n  cooldown: number         // 冷却时间（毫秒）\n}\n\n// 告警条件接口\nexport interface AlertCondition {\n  metric: string           // 监控指标\n  operator: 'gt' | 'lt' | 'eq' | 'gte' | 'lte'\n  value: number\n  aggregation: 'count' | 'sum' | 'avg' | 'rate'  // 聚合方式\n  window: number          // 时间窗口\n}\n\n// 告警严重程度\nexport type AlertSeverity = 'low' | 'medium' | 'high' | 'critical'\n\n// 告警通道接口\nexport interface AlertChannel {\n  type: 'console' | 'notification' | 'email' | 'webhook'\n  config: any\n}\n\n// 告警动作接口\nexport interface AlertAction {\n  type: 'log' | 'notify' | 'email' | 'webhook' | 'restart' | 'scale'\n  config: any\n}\n\n// 恢复策略接口\nexport interface RecoveryStrategy {\n  id: string\n  name: string\n  description: string\n  canHandle: (error: UnifiedError) => boolean\n  execute: (error: UnifiedError, context: ErrorContext) => Promise<RecoveryResult>\n  priority: number\n  maxAttempts: number\n  cooldownPeriod: number\n  dependencies?: string[]\n}\n\n// 恢复结果\nexport interface RecoveryResult {\n  success: boolean\n  strategy: string\n  duration: number\n  attempts: number\n  message: string\n  details?: any\n  nextAction?: 'continue' | 'retry' | 'fallback' | 'escalate'\n  fallbackStrategy?: string\n}\n\n// 重试配置\nexport interface RetryConfig {\n  maxAttempts: number\n  baseDelay: number\n  maxDelay: number\n  backoffMultiplier: number\n  jitter: boolean\n  retryableErrors: string[]\n  circuitBreakerThreshold: number\n  recoveryTimeout: number\n}\n\n// 自愈规则\nexport interface HealingRule {\n  id: string\n  name: string\n  description: string\n  pattern: ErrorPattern\n  conditions: HealingCondition[]\n  actions: HealingAction[]\n  priority: number\n  confidence: number\n  maxApplications: number\n  cooldownPeriod: number\n  successRate: number\n  lastApplied?: number\n  applicationCount: number\n}\n\n// 错误模式\nexport interface ErrorPattern {\n  category: ErrorCategory\n  severity: ErrorSeverity\n  errorCode?: string\n  messagePattern?: string\n  stackPattern?: string\n  contextPattern?: any\n  timePattern?: TimePattern\n  frequencyPattern?: FrequencyPattern\n}\n\n// 时间模式\nexport interface TimePattern {\n  timeRange?: [number, number] // 时间范围\n  dayOfWeek?: number[]         // 星期几\n  recency?: number             // 最近时间\n}\n\n// 频率模式\nexport interface FrequencyPattern {\n  count: number\n  window: number\n  operator: 'gt' | 'lt' | 'eq' | 'gte' | 'lte'\n}\n\n// 自愈条件\nexport interface HealingCondition {\n  type: 'error_count' | 'error_rate' | 'system_load' | 'network_status'\n  operator: 'gt' | 'lt' | 'eq' | 'gte' | 'lte'\n  value: number\n  window?: number\n}\n\n// 自愈动作\nexport interface HealingAction {\n  type: 'retry' | 'rollback' | 'repair' | 'reconfigure' | 'restart' | 'scale'\n  params: any\n  timeout: number\n  rollback?: any\n}\n\n// 健康检查状态\nexport type HealthStatus = 'healthy' | 'degraded' | 'unhealthy' | 'unknown'\n\n// 健康检查结果\nexport interface HealthCheckResult {\n  status: HealthStatus\n  score: number\n  timestamp: Date\n  checks: HealthCheckItem[]\n  summary: string\n  recommendations?: string[]\n}\n\n// 健康检查项\nexport interface HealthCheckItem {\n  name: string\n  status: HealthStatus\n  score: number\n  message: string\n  details?: any\n  timestamp: Date\n}\n\n// 错误日志接口\nexport interface ErrorLog {\n  id: string\n  timestamp: Date\n  level: ErrorLevel\n  category: ErrorCategory\n  code: string\n  message: string\n  stack?: string\n  details?: any\n  userId?: string\n  sessionId?: string\n  operation?: string\n  entityId?: string\n  environment: 'development' | 'staging' | 'production'\n  deviceInfo?: any\n  networkInfo?: any\n  handled?: boolean\n  recoveryAction?: RecoveryAction\n  resolution?: string\n  resolutionTime?: Date\n}"],"version":3}
{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\conflict-resolution-engine.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\conflict-resolution-engine.ts"],"sourcesContent":["// ============================================================================\n// 智能冲突解决引擎 - 多策略冲突检测和解决\n// Week 3 Day 11-13: 同步服务架构重构\n// ============================================================================\n\nimport type { ConflictInfo, ConflictResolutionStrategy, FieldLevelConflict } from './optimized-cloud-sync'\nimport type { DbCard, DbFolder, DbTag, DbImage } from './database'\n\n// ============================================================================\n// 高级冲突检测类型\n// ============================================================================\n\nexport interface ConflictDetectionRule {\n  id: string\n  name: string\n  description: string\n  entityType: 'card' | 'folder' | 'tag' | 'image' | 'all'\n  detectionFunction: (local: any, cloud: any, context: ConflictContext) => ConflictInfo[]\n  priority: number\n  enabled: boolean\n}\n\nexport interface ConflictContext {\n  userId: string\n  timestamp: Date\n  networkInfo: any\n  deviceInfo: any\n  userPreferences: any\n  syncHistory: any[]\n}\n\nexport interface ConflictPattern {\n  id: string\n  pattern: string\n  description: string\n  severity: 'low' | 'medium' | 'high' | 'critical'\n  autoResolution: boolean\n  resolutionStrategy: string\n}\n\nexport interface MergeStrategy {\n  id: string\n  name: string\n  description: string\n  applicableTypes: string[]\n  mergeFunction: (local: any, cloud: any, context: ConflictContext) => any\n  confidence: number // 0-1, 表示合并策略的置信度\n}\n\n// ============================================================================\n// 冲突解决引擎\n// ============================================================================\n\nexport class ConflictResolutionEngine {\n  private detectionRules: Map<string, ConflictDetectionRule> = new Map()\n  private resolutionStrategies: Map<string, ConflictResolutionStrategy> = new Map()\n  private mergeStrategies: Map<string, MergeStrategy> = new Map()\n  private conflictPatterns: Map<string, ConflictPattern> = new Map()\n  \n  // 冲突历史和学习\n  private conflictHistory: ConflictInfo[] = []\n  private resolutionStats: Map<string, { success: number; failure: number }> = new Map()\n  \n  // 机器学习模型（简化版本）\n  private conflictPredictionModel: {\n    patterns: Map<string, number>\n    confidenceThreshold: number\n  }\n\n  constructor() {\n    this.initializeDetectionRules()\n    this.initializeResolutionStrategies()\n    this.initializeMergeStrategies()\n    this.initializeConflictPatterns()\n    this.initializeMLModel()\n  }\n\n  // ============================================================================\n  // 核心冲突检测方法\n  // ============================================================================\n\n  /**\n   * 检测所有类型的冲突\n   */\n  async detectAllConflicts(\n    localData: any, \n    cloudData: any, \n    entityType: string, \n    entityId: string, \n    context: ConflictContext\n  ): Promise<ConflictInfo[]> {\n    const conflicts: ConflictInfo[] = []\n    \n    // 应用所有启用的检测规则\n    for (const rule of this.detectionRules.values()) {\n      if (!rule.enabled) continue\n      if (rule.entityType !== 'all' && rule.entityType !== entityType) continue\n      \n      try {\n        const ruleConflicts = await rule.detectionFunction(localData, cloudData, context)\n        conflicts.push(...ruleConflicts)\n      } catch (error) {\n        console.error(`Conflict detection rule ${rule.id} failed:`, error)\n      }\n    }\n    \n    // 去重和优化冲突\n    const optimizedConflicts = this.optimizeConflicts(conflicts)\n    \n    // 记录到历史\n    this.recordConflictDetection(optimizedConflicts, context)\n    \n    return optimizedConflicts\n  }\n\n  /**\n   * 智能解决冲突\n   */\n  async resolveConflicts(\n    conflicts: ConflictInfo[], \n    context: ConflictContext\n  ): Promise<ConflictInfo[]> {\n    const resolvedConflicts: ConflictInfo[] = []\n    \n    for (const conflict of conflicts) {\n      try {\n        const resolvedConflict = await this.resolveSingleConflict(conflict, context)\n        resolvedConflicts.push(resolvedConflict)\n      } catch (error) {\n        console.error(`Failed to resolve conflict ${conflict.id}:`, error)\n        // 标记为需要手动解决\n        conflict.resolution = 'manual'\n        conflict.autoResolved = false\n        resolvedConflicts.push(conflict)\n      }\n    }\n    \n    return resolvedConflicts\n  }\n\n  /**\n   * 解决单个冲突\n   */\n  private async resolveSingleConflict(\n    conflict: ConflictInfo, \n    context: ConflictContext\n  ): Promise<ConflictInfo> {\n    // 预测最佳解决策略\n    const predictedStrategy = await this.predictResolutionStrategy(conflict, context)\n    \n    // 获取策略\n    const strategy = this.resolutionStrategies.get(predictedStrategy) || \n                   this.selectFallbackStrategy(conflict)\n    \n    // 应用解决策略\n    const result = await this.applyResolutionStrategy(conflict, strategy, context)\n    \n    // 记录解决结果\n    this.recordResolutionResult(conflict, strategy, result.success)\n    \n    return result.conflict\n  }\n\n  // ============================================================================\n  // 高级冲突检测规则\n  // ============================================================================\n\n  private initializeDetectionRules(): void {\n    // 1. 版本冲突检测\n    this.detectionRules.set('version-conflict', {\n      id: 'version-conflict',\n      name: 'Version Conflict Detection',\n      description: '检测基于版本号的冲突',\n      entityType: 'all',\n      priority: 100,\n      enabled: true,\n      detectionFunction: (local, cloud, context) => \n        this.detectVersionConflicts(local, cloud, context)\n    })\n\n    // 2. 字段级冲突检测\n    this.detectionRules.set('field-conflict', {\n      id: 'field-conflict',\n      name: 'Field-Level Conflict Detection',\n      description: '检测字段级别的冲突',\n      entityType: 'all',\n      priority: 90,\n      enabled: true,\n      detectionFunction: (local, cloud, context) => \n        this.detectFieldConflicts(local, cloud, context)\n    })\n\n    // 3. 结构冲突检测\n    this.detectionRules.set('structure-conflict', {\n      id: 'structure-conflict',\n      name: 'Structure Conflict Detection',\n      description: '检测数据结构冲突',\n      entityType: 'all',\n      priority: 80,\n      enabled: true,\n      detectionFunction: (local, cloud, context) => \n        this.detectStructureConflicts(local, cloud, context)\n    })\n\n    // 4. 引用完整性冲突检测\n    this.detectionRules.set('reference-conflict', {\n      id: 'reference-conflict',\n      name: 'Reference Integrity Conflict Detection',\n      description: '检测引用完整性冲突',\n      entityType: 'all',\n      priority: 70,\n      enabled: true,\n      detectionFunction: (local, cloud, context) => \n        this.detectReferenceConflicts(local, cloud, context)\n    })\n\n    // 5. 业务逻辑冲突检测\n    this.detectionRules.set('business-logic-conflict', {\n      id: 'business-logic-conflict',\n      name: 'Business Logic Conflict Detection',\n      description: '检测业务逻辑冲突',\n      entityType: 'all',\n      priority: 60,\n      enabled: true,\n      detectionFunction: (local, cloud, context) => \n        this.detectBusinessLogicConflicts(local, cloud, context)\n    })\n  }\n\n  /**\n   * 版本冲突检测\n   */\n  private detectVersionConflicts(local: any, cloud: any, context: ConflictContext): ConflictInfo[] {\n    const conflicts: ConflictInfo[] = []\n    \n    const localVersion = local.sync_version || local.localVersion || 0\n    const cloudVersion = cloud.sync_version || cloud.cloudVersion || 0\n    \n    if (localVersion !== cloudVersion) {\n      conflicts.push({\n        id: crypto.randomUUID(),\n        entityType: this.inferEntityType(local),\n        entityId: local.id || cloud.id,\n        conflictType: 'version',\n        localData: local,\n        cloudData: cloud,\n        detectedAt: new Date()\n      })\n    }\n    \n    return conflicts\n  }\n\n  /**\n   * 字段级冲突检测\n   */\n  private detectFieldConflicts(local: any, cloud: any, context: ConflictContext): ConflictInfo[] {\n    const conflicts: ConflictInfo[] = []\n    const conflictingFields: string[] = []\n    \n    // 获取需要比较的字段\n    const fields = this.getComparableFields(local, cloud)\n    \n    for (const field of fields) {\n      const localValue = this.getNestedValue(local, field)\n      const cloudValue = this.getNestedValue(cloud, field)\n      \n      if (!this.valuesEqual(localValue, cloudValue)) {\n        conflictingFields.push(field)\n      }\n    }\n    \n    if (conflictingFields.length > 0) {\n      conflicts.push({\n        id: crypto.randomUUID(),\n        entityType: this.inferEntityType(local),\n        entityId: local.id || cloud.id,\n        conflictType: 'field',\n        localData: local,\n        cloudData: cloud,\n        conflictFields: conflictingFields,\n        detectedAt: new Date()\n      })\n    }\n    \n    return conflicts\n  }\n\n  /**\n   * 结构冲突检测\n   */\n  private detectStructureConflicts(local: any, cloud: any, context: ConflictContext): ConflictInfo[] {\n    const conflicts: ConflictInfo[] = []\n    \n    // 检查对象结构差异\n    const localKeys = new Set(Object.keys(local))\n    const cloudKeys = new Set(Object.keys(cloud))\n    \n    const missingInLocal = [...cloudKeys].filter(key => !localKeys.has(key))\n    const missingInCloud = [...localKeys].filter(key => !cloudKeys.has(key))\n    \n    if (missingInLocal.length > 0 || missingInCloud.length > 0) {\n      conflicts.push({\n        id: crypto.randomUUID(),\n        entityType: this.inferEntityType(local),\n        entityId: local.id || cloud.id,\n        conflictType: 'structure',\n        localData: local,\n        cloudData: cloud,\n        conflictFields: [...missingInLocal, ...missingInCloud],\n        detectedAt: new Date()\n      })\n    }\n    \n    return conflicts\n  }\n\n  /**\n   * 引用完整性冲突检测\n   */\n  private detectReferenceConflicts(local: any, cloud: any, context: ConflictContext): ConflictInfo[] {\n    const conflicts: ConflictInfo[] = []\n    \n    // 检查文件夹引用\n    if (local.folderId !== undefined || cloud.folderId !== undefined) {\n      if (local.folderId !== cloud.folderId) {\n        conflicts.push({\n          id: crypto.randomUUID(),\n          entityType: 'card',\n          entityId: local.id || cloud.id,\n          conflictType: 'field',\n          localData: local,\n          cloudData: cloud,\n          conflictFields: ['folderId'],\n          detectedAt: new Date()\n        })\n      }\n    }\n    \n    // 检查标签引用\n    if (local.tags !== undefined || cloud.tags !== undefined) {\n      const localTags = new Set(local.tags || [])\n      const cloudTags = new Set(cloud.tags || [])\n      \n      if (!this.setsEqual(localTags, cloudTags)) {\n        conflicts.push({\n          id: crypto.randomUUID(),\n          entityType: this.inferEntityType(local),\n          entityId: local.id || cloud.id,\n          conflictType: 'field',\n          localData: local,\n          cloudData: cloud,\n          conflictFields: ['tags'],\n          detectedAt: new Date()\n        })\n      }\n    }\n    \n    return conflicts\n  }\n\n  /**\n   * 业务逻辑冲突检测\n   */\n  private detectBusinessLogicConflicts(local: any, cloud: any, context: ConflictContext): ConflictInfo[] {\n    const conflicts: ConflictInfo[] = []\n    \n    // 检测卡片内容冲突\n    if (local.frontContent || cloud.frontContent) {\n      const contentConflict = this.detectContentConflicts(local, cloud)\n      if (contentConflict) {\n        conflicts.push(contentConflict)\n      }\n    }\n    \n    // 检测样式冲突\n    if (local.style || cloud.style) {\n      const styleConflict = this.detectStyleConflicts(local, cloud)\n      if (styleConflict) {\n        conflicts.push(styleConflict)\n      }\n    }\n    \n    return conflicts\n  }\n\n  // ============================================================================\n  // 合并策略实现\n  // ============================================================================\n\n  private initializeMergeStrategies(): void {\n    // 1. 智能文本合并策略\n    this.mergeStrategies.set('smart-text-merge', {\n      id: 'smart-text-merge',\n      name: 'Smart Text Merge',\n      description: '智能合并文本内容，保留两边的修改',\n      applicableTypes: ['card'],\n      mergeFunction: (local, cloud, context) => this.smartTextMerge(local, cloud),\n      confidence: 0.8\n    })\n\n    // 2. 时间戳优先策略\n    this.mergeStrategies.set('timestamp-priority', {\n      id: 'timestamp-priority',\n      name: 'Timestamp Priority',\n      description: '使用最新的时间戳决定优先级',\n      applicableTypes: ['all'],\n      mergeFunction: (local, cloud, context) => this.timestampPriorityMerge(local, cloud),\n      confidence: 0.9\n    })\n\n    // 3. 字段级智能合并\n    this.mergeStrategies.set('field-smart-merge', {\n      id: 'field-smart-merge',\n      name: 'Field Smart Merge',\n      description: '按字段类型智能选择最佳合并策略',\n      applicableTypes: ['all'],\n      mergeFunction: (local, cloud, context) => this.fieldSmartMerge(local, cloud),\n      confidence: 0.85\n    })\n\n    // 4. 用户偏好合并\n    this.mergeStrategies.set('user-preference-merge', {\n      id: 'user-preference-merge',\n      name: 'User Preference Merge',\n      description: '基于用户历史偏好进行合并',\n      applicableTypes: ['all'],\n      mergeFunction: (local, cloud, context) => this.userPreferenceMerge(local, cloud, context),\n      confidence: 0.75\n    })\n\n    // 5. 机器学习合并\n    this.mergeStrategies.set('ml-merge', {\n      id: 'ml-merge',\n      name: 'Machine Learning Merge',\n      description: '使用机器学习模型预测最佳合并策略',\n      applicableTypes: ['all'],\n      mergeFunction: (local, cloud, context) => this.mlMerge(local, cloud, context),\n      confidence: 0.7\n    })\n  }\n\n  /**\n   * 智能文本合并\n   */\n  private smartTextMerge(local: any, cloud: any): any {\n    const result = { ...local }\n    \n    // 合并正面内容\n    if (local.frontContent && cloud.frontContent) {\n      result.frontContent = this.mergeContent(local.frontContent, cloud.frontContent)\n    }\n    \n    // 合并背面内容\n    if (local.backContent && cloud.backContent) {\n      result.backContent = this.mergeContent(local.backContent, cloud.backContent)\n    }\n    \n    return result\n  }\n\n  /**\n   * 时间戳优先合并\n   */\n  private timestampPriorityMerge(local: any, cloud: any): any {\n    const localTime = new Date(local.updatedAt || local.timestamp).getTime()\n    const cloudTime = new Date(cloud.updatedAt || cloud.timestamp).getTime()\n    \n    return cloudTime > localTime ? { ...cloud } : { ...local }\n  }\n\n  /**\n   * 字段级智能合并\n   */\n  private fieldSmartMerge(local: any, cloud: any): any {\n    const result = { ...local }\n    \n    Object.keys(cloud).forEach(key => {\n      if (local[key] === undefined) {\n        result[key] = cloud[key]\n      } else if (!this.valuesEqual(local[key], cloud[key])) {\n        // 根据字段类型选择合并策略\n        result[key] = this.mergeFieldByType(key, local[key], cloud[key])\n      }\n    })\n    \n    return result\n  }\n\n  /**\n   * 用户偏好合并\n   */\n  private userPreferenceMerge(local: any, cloud: any, context: ConflictContext): any {\n    // 分析用户历史解决模式\n    const userPreference = this.analyzeUserPreference(context.userId)\n    \n    switch (userPreference) {\n      case 'local-first':\n        return { ...local }\n      case 'cloud-first':\n        return { ...cloud }\n      case 'smart-merge':\n        return this.fieldSmartMerge(local, cloud)\n      default:\n        return this.timestampPriorityMerge(local, cloud)\n    }\n  }\n\n  /**\n   * 机器学习合并\n   */\n  private mlMerge(local: any, cloud: any, context: ConflictContext): any {\n    // 简化的机器学习合并逻辑\n    const features = this.extractFeatures(local, cloud, context)\n    const prediction = this.predictMergeStrategy(features)\n    \n    switch (prediction.strategy) {\n      case 'local':\n        return { ...local }\n      case 'cloud':\n        return { ...cloud }\n      case 'merge':\n        return this.fieldSmartMerge(local, cloud)\n      default:\n        return this.timestampPriorityMerge(local, cloud)\n    }\n  }\n\n  // ============================================================================\n  // 机器学习和预测功能\n  // ============================================================================\n\n  private initializeMLModel(): void {\n    this.conflictPredictionModel = {\n      patterns: new Map(),\n      confidenceThreshold: 0.7\n    }\n    \n    // 初始化一些基础模式\n    this.conflictPredictionModel.patterns.set('version-conflict-local', 0.8)\n    this.conflictPredictionModel.patterns.set('field-conflict-merge', 0.6)\n    this.conflictPredictionModel.patterns.set('structure-conflict-manual', 0.9)\n  }\n\n  /**\n   * 预测最佳解决策略\n   */\n  private async predictResolutionStrategy(\n    conflict: ConflictInfo, \n    context: ConflictContext\n  ): Promise<string> {\n    // 提取特征\n    const features = this.extractConflictFeatures(conflict, context)\n    \n    // 查找相似历史冲突\n    const similarConflicts = this.findSimilarConflicts(features)\n    \n    if (similarConflicts.length > 0) {\n      const bestStrategy = this.getMostSuccessfulStrategy(similarConflicts)\n      return bestStrategy\n    }\n    \n    // 使用启发式规则\n    return this.heuristicStrategySelection(conflict, context)\n  }\n\n  /**\n   * 提取冲突特征\n   */\n  private extractConflictFeatures(conflict: ConflictInfo, context: ConflictContext): any {\n    return {\n      conflictType: conflict.conflictType,\n      entityType: conflict.entityType,\n      fieldCount: conflict.conflictFields?.length || 0,\n      timeOfDay: context.timestamp.getHours(),\n      dayOfWeek: context.timestamp.getDay(),\n      networkQuality: context.networkInfo.effectiveType,\n      deviceType: context.deviceInfo.deviceType,\n      userHistoryLength: context.syncHistory.length,\n      isWeekend: context.timestamp.getDay() === 0 || context.timestamp.getDay() === 6\n    }\n  }\n\n  /**\n   * 查找相似冲突\n   */\n  private findSimilarConflicts(features: any): ConflictInfo[] {\n    const similarConflicts: ConflictInfo[] = []\n    \n    for (const historicalConflict of this.conflictHistory) {\n      const similarity = this.calculateSimilarity(features, historicalConflict)\n      if (similarity > 0.7) {\n        similarConflicts.push(historicalConflict)\n      }\n    }\n    \n    return similarConflicts\n  }\n\n  /**\n   * 计算相似度\n   */\n  private calculateSimilarity(features: any, conflict: ConflictInfo): number {\n    let similarity = 0\n    \n    if (features.conflictType === conflict.conflictType) similarity += 0.3\n    if (features.entityType === conflict.entityType) similarity += 0.2\n    \n    const fieldCountDiff = Math.abs(\n      features.fieldCount - (conflict.conflictFields?.length || 0)\n    )\n    similarity += Math.max(0, 0.2 - fieldCountDiff * 0.05)\n    \n    return similarity\n  }\n\n  // ============================================================================\n  // 工具方法和辅助函数\n  // ============================================================================\n\n  /**\n   * 获取可比较字段\n   */\n  private getComparableFields(local: any, cloud: any): string[] {\n    const fields = new Set<string>()\n    \n    // 添加通用字段\n    fields.add('id')\n    fields.add('sync_version')\n    fields.add('updatedAt')\n    fields.add('createdAt')\n    \n    // 根据实体类型添加特定字段\n    if (local.frontContent || cloud.frontContent) {\n      fields.add('frontContent.title')\n      fields.add('frontContent.text')\n      fields.add('frontContent.tags')\n    }\n    \n    if (local.backContent || cloud.backContent) {\n      fields.add('backContent.title')\n      fields.add('backContent.text')\n      fields.add('backContent.tags')\n    }\n    \n    if (local.style || cloud.style) {\n      fields.add('style.type')\n      fields.add('style.backgroundColor')\n      fields.add('style.textColor')\n    }\n    \n    if (local.folderId !== undefined || cloud.folderId !== undefined) {\n      fields.add('folderId')\n    }\n    \n    return Array.from(fields)\n  }\n\n  /**\n   * 获取嵌套值\n   */\n  private getNestedValue(obj: any, path: string): any {\n    return path.split('.').reduce((current, key) => current?.[key], obj)\n  }\n\n  /**\n   * 值相等比较\n   */\n  private valuesEqual(a: any, b: any): boolean {\n    if (a === b) return true\n    if (a == null || b == null) return false\n    if (typeof a !== typeof b) return false\n    \n    if (typeof a === 'object') {\n      return JSON.stringify(a) === JSON.stringify(b)\n    }\n    \n    return false\n  }\n\n  /**\n   * 集合相等\n   */\n  private setsEqual(a: Set<any>, b: Set<any>): boolean {\n    if (a.size !== b.size) return false\n    for (const item of a) {\n      if (!b.has(item)) return false\n    }\n    return true\n  }\n\n  /**\n   * 推断实体类型\n   */\n  private inferEntityType(data: any): string {\n    if (data.frontContent || data.backContent) return 'card'\n    if (data.name && data.color) return 'tag'\n    if (data.name && data.cardIds) return 'folder'\n    if (data.fileName && data.filePath) return 'image'\n    return 'unknown'\n  }\n\n  /**\n   * 合并内容\n   */\n  private mergeContent(local: any, cloud: any): any {\n    const result = { ...local }\n    \n    // 智能合并标题\n    if (local.title !== cloud.title) {\n      result.title = this.mergeTextFields(local.title, cloud.title)\n    }\n    \n    // 智能合并文本\n    if (local.text !== cloud.text) {\n      result.text = this.mergeTextFields(local.text, cloud.text)\n    }\n    \n    // 合并标签\n    if (local.tags || cloud.tags) {\n      const localTags = new Set(local.tags || [])\n      const cloudTags = new Set(cloud.tags || [])\n      result.tags = Array.from(new Set([...localTags, ...cloudTags]))\n    }\n    \n    return result\n  }\n\n  /**\n   * 合并文本字段\n   */\n  private mergeTextFields(local: string, cloud: string): string {\n    // 简单的文本合并策略：选择更长的文本\n    return local.length > cloud.length ? local : cloud\n  }\n\n  /**\n   * 按字段类型合并\n   */\n  private mergeFieldByType(fieldName: string, localValue: any, cloudValue: any): any {\n    if (fieldName.includes('time') || fieldName.includes('date')) {\n      // 时间字段使用最新的\n      const localTime = new Date(localValue).getTime()\n      const cloudTime = new Date(cloudValue).getTime()\n      return cloudTime > localTime ? cloudValue : localValue\n    }\n    \n    if (fieldName.includes('version')) {\n      // 版本字段使用较大的\n      return Math.max(localValue, cloudValue)\n    }\n    \n    if (typeof localValue === 'string' && typeof cloudValue === 'string') {\n      // 文本字段合并\n      return this.mergeTextFields(localValue, cloudValue)\n    }\n    \n    // 默认使用本地值\n    return localValue\n  }\n\n  /**\n   * 分析用户偏好\n   */\n  private analyzeUserPreference(userId: string): string {\n    // 简化的用户偏好分析\n    const userStats = this.resolutionStats.get(userId)\n    if (!userStats) return 'smart-merge'\n    \n    if (userStats.success > userStats.failure * 2) {\n      return 'smart-merge'\n    }\n    \n    return 'timestamp-priority'\n  }\n\n  /**\n   * 优化冲突列表\n   */\n  private optimizeConflicts(conflicts: ConflictInfo[]): ConflictInfo[] {\n    // 去重\n    const uniqueConflicts = new Map<string, ConflictInfo>()\n    \n    for (const conflict of conflicts) {\n      const key = `${conflict.entityType}-${conflict.entityId}-${conflict.conflictType}`\n      if (!uniqueConflicts.has(key) || \n          (uniqueConflicts.get(key)!.priority || 0) < (conflict.priority || 0)) {\n        uniqueConflicts.set(key, conflict)\n      }\n    }\n    \n    return Array.from(uniqueConflicts.values())\n  }\n\n  /**\n   * 记录冲突检测\n   */\n  private recordConflictDetection(conflicts: ConflictInfo[], context: ConflictContext): void {\n    this.conflictHistory.push(...conflicts)\n    \n    // 限制历史记录大小\n    if (this.conflictHistory.length > 1000) {\n      this.conflictHistory = this.conflictHistory.slice(-500)\n    }\n  }\n\n  /**\n   * 记录解决结果\n   */\n  private recordResolutionResult(\n    conflict: ConflictInfo, \n    strategy: string, \n    success: boolean\n  ): void {\n    const key = `${conflict.entityType}-${strategy}`\n    const stats = this.resolutionStats.get(key) || { success: 0, failure: 0 }\n    \n    if (success) {\n      stats.success++\n    } else {\n      stats.failure++\n    }\n    \n    this.resolutionStats.set(key, stats)\n  }\n\n  // ============================================================================\n  // 占位符方法\n  // ============================================================================\n\n  private detectContentConflicts(local: any, cloud: any): ConflictInfo | null {\n    // TODO: 实现内容冲突检测\n    return null\n  }\n\n  private detectStyleConflicts(local: any, cloud: any): ConflictInfo | null {\n    // TODO: 实现样式冲突检测\n    return null\n  }\n\n  private selectFallbackStrategy(conflict: ConflictInfo): ConflictResolutionStrategy {\n    // TODO: 实现后备策略选择\n    return {\n      type: 'manual',\n      priority: 0,\n      conditions: {},\n      resolution: 'manual'\n    }\n  }\n\n  private async applyResolutionStrategy(\n    conflict: ConflictInfo, \n    strategy: ConflictResolutionStrategy, \n    context: ConflictContext\n  ): Promise<{ conflict: ConflictInfo; success: boolean }> {\n    // TODO: 实现策略应用\n    return { conflict, success: true }\n  }\n\n  private getMostSuccessfulStrategy(conflicts: ConflictInfo[]): string {\n    // TODO: 实现成功策略获取\n    return 'timestamp-priority'\n  }\n\n  private heuristicStrategySelection(conflict: ConflictInfo, context: ConflictContext): string {\n    // TODO: 实现启发式策略选择\n    return 'timestamp-priority'\n  }\n\n  private extractFeatures(local: any, cloud: any, context: ConflictContext): any {\n    // TODO: 实现特征提取\n    return {}\n  }\n\n  private predictMergeStrategy(features: any): { strategy: string; confidence: number } {\n    // TODO: 实现合并策略预测\n    return { strategy: 'merge', confidence: 0.7 }\n  }\n}\n\n// ============================================================================\n// 导出单例实例\n// ============================================================================\n\nexport const conflictResolutionEngine = new ConflictResolutionEngine()\n\n// ============================================================================\n// 导出类型和工具函数\n// ============================================================================\n\nexport type {\n  ConflictDetectionRule,\n  ConflictContext,\n  ConflictPattern,\n  MergeStrategy\n}"],"version":3}
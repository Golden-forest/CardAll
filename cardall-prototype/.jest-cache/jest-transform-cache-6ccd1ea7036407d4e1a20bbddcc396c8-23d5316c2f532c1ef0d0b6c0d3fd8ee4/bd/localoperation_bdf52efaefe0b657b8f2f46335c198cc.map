{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\local-operation.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\local-operation.ts"],"sourcesContent":["import { db, type SyncOperation, type DbCard, type DbFolder, type DbTag, type DbImage } from './database'\n\n// ============================================================================\n// 本地操作队列管理 - 优化的同步队列系统\n// ============================================================================\n\n// 扩展的同步操作接口 - 支持更复杂的队列管理\nexport interface LocalSyncOperation extends SyncOperation {\n  // 操作元数据\n  id: string\n  entityId: string\n  entityType: 'card' | 'folder' | 'tag' | 'image'\n  operationType: 'create' | 'update' | 'delete'\n  userId?: string\n  \n  // 数据快照\n  data: any\n  previousData?: any // 用于回滚和冲突检测\n  \n  // 时间戳和版本控制\n  timestamp: Date\n  localVersion: number\n  expectedCloudVersion?: number\n  \n  // 重试和错误处理\n  retryCount: number\n  maxRetries: number\n  retryDelay: number\n  lastError?: string\n  \n  // 优先级和依赖关系\n  priority: 'critical' | 'high' | 'normal' | 'low'\n  dependsOn?: string[] // 依赖的操作ID\n  \n  // 状态管理\n  status: 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled'\n  processingStartedAt?: Date\n  \n  // 批处理信息\n  batchId?: string\n  batchSize?: number\n  \n  // 网络和性能信息\n  networkInfo?: {\n    online: boolean\n    connectionType: 'wifi' | 'cellular' | 'none'\n    effectiveType: '4g' | '3g' | '2g' | 'slow-2g'\n    rtt?: number\n    downlink?: number\n  }\n}\n\n// 队列状态统计\nexport interface QueueStats {\n  totalOperations: number\n  pendingOperations: number\n  processingOperations: number\n  failedOperations: number\n  completedOperations: number\n  \n  // 按类型统计\n  byType: {\n    card: number\n    folder: number\n    tag: number\n    image: number\n  }\n  \n  // 按优先级统计\n  byPriority: {\n    critical: number\n    high: number\n    normal: number\n    low: number\n  }\n  \n  // 按状态统计\n  byStatus: {\n    pending: number\n    processing: number\n    completed: number\n    failed: number\n    cancelled: number\n  }\n  \n  // 性能指标\n  averageProcessingTime: number\n  failureRate: number\n  oldestPendingAge: number\n}\n\n// 队列配置选项\nexport interface QueueConfig {\n  // 重试配置\n  maxRetries: number\n  initialRetryDelay: number\n  maxRetryDelay: number\n  retryBackoffMultiplier: number\n  \n  // 批处理配置\n  batchSize: number\n  batchTimeout: number\n  maxConcurrentBatches: number\n  \n  // 性能配置\n  processingTimeout: number\n  idleCheckInterval: number\n  cleanupInterval: number\n  \n  // 网络配置\n  networkAware: boolean\n  offlineMode: boolean\n  requireWifiForLargeFiles: boolean\n  \n  // 队列限制\n  maxQueueSize: number\n  maxAge: number // 最大操作年龄（毫秒）\n}\n\n// 默认队列配置\nexport const DEFAULT_QUEUE_CONFIG: QueueConfig = {\n  maxRetries: 5,\n  initialRetryDelay: 1000, // 1秒\n  maxRetryDelay: 300000, // 5分钟\n  retryBackoffMultiplier: 2,\n  \n  batchSize: 10,\n  batchTimeout: 5000, // 5秒\n  maxConcurrentBatches: 3,\n  \n  processingTimeout: 30000, // 30秒\n  idleCheckInterval: 10000, // 10秒\n  cleanupInterval: 300000, // 5分钟\n  \n  networkAware: true,\n  offlineMode: true,\n  requireWifiForLargeFiles: true,\n  \n  maxQueueSize: 10000,\n  maxAge: 7 * 24 * 60 * 60 * 1000 // 7天\n}\n\n// ============================================================================\n// 本地操作服务 - 核心队列管理\n// ============================================================================\n\nexport class LocalOperationService {\n  private config: QueueConfig\n  private isProcessing = false\n  private processingTimer: NodeJS.Timeout | null = null\n  private cleanupTimer: NodeJS.Timeout | null = null\n  private currentBatches: Map<string, Promise<void>> = new Map()\n  \n  // 事件监听器\n  private listeners: {\n    operationAdded?: (operation: LocalSyncOperation) => void\n    operationStarted?: (operation: LocalSyncOperation) => void\n    operationCompleted?: (operation: LocalSyncOperation) => void\n    operationFailed?: (operation: LocalSyncOperation, error: Error) => void\n    queueStatsChanged?: (stats: QueueStats) => void\n  } = {}\n\n  constructor(config: Partial<QueueConfig> = {}) {\n    this.config = { ...DEFAULT_QUEUE_CONFIG, ...config }\n    this.initialize()\n  }\n\n  // 初始化服务\n  private async initialize(): Promise<void> {\n    try {\n      // 确保数据库已初始化\n      await db.open()\n      \n      // 启动定期处理\n      this.startProcessing()\n      \n      // 启动定期清理\n      this.startCleanup()\n      \n      console.log('LocalOperationService initialized successfully')\n    } catch (error) {\n      console.error('Failed to initialize LocalOperationService:', error)\n    }\n  }\n\n  // ============================================================================\n  // 核心队列操作\n  // ============================================================================\n\n  // 添加操作到队列\n  async addOperation(\n    operation: Omit<LocalSyncOperation, 'id' | 'timestamp' | 'retryCount' | 'status' | 'localVersion'>\n  ): Promise<string> {\n    // 验证必需字段\n    if (!operation.entityId || operation.entityId.trim() === '') {\n      throw new Error('Local ID is required')\n    }\n    if (!operation.entityType || !['card', 'folder', 'tag', 'image'].includes(operation.entityType)) {\n      throw new Error('Invalid entity type')\n    }\n    if (!operation.operationType || !['create', 'update', 'delete'].includes(operation.operationType)) {\n      throw new Error('Invalid operation type')\n    }\n    if (!operation.data) {\n      throw new Error('Operation data is required')\n    }\n\n    const id = crypto.randomUUID()\n    const now = new Date()\n    \n    const fullOperation: LocalSyncOperation = {\n      ...operation,\n      id,\n      timestamp: now,\n      retryCount: 0,\n      status: 'pending',\n      localVersion: Date.now(), // 使用时间戳作为本地版本\n      retryDelay: this.config.initialRetryDelay,\n      maxRetries: this.config.maxRetries\n    }\n\n    // 获取当前网络信息\n    if (this.config.networkAware) {\n      fullOperation.networkInfo = await this.getNetworkInfo()\n    }\n\n    // 检查重复操作\n    const existingOperation = await db.syncQueue\n      .where('entityId')\n      .equals(operation.entityId)\n      .and(op => op.entityType === operation.entityType && op.status === 'pending')\n      .first()\n\n    try {\n      if (existingOperation) {\n        // 更新现有操作而不是创建新操作\n        await db.syncQueue.update(existingOperation.id!, {\n          data: operation.data,\n          previousData: operation.previousData,\n          timestamp: now,\n          localVersion: Date.now()\n        })\n        console.log(`Operation updated in queue: ${existingOperation.id}`)\n        return existingOperation.id!\n      }\n\n      await db.syncQueue.add(fullOperation)\n      \n      // 通知监听器\n      this.notifyListeners('operationAdded', fullOperation)\n      \n      // 更新统计信息\n      await this.updateQueueStats()\n      \n      console.log(`Operation added to queue: ${id}`)\n      return id\n    } catch (error) {\n      console.error('Failed to add operation to queue:', error)\n      throw error\n    }\n  }\n\n  // 获取待处理操作\n  async getPendingOperations(\n    limit: number = this.config.batchSize,\n    priorityFilter?: ('critical' | 'high' | 'normal' | 'low')[]\n  ): Promise<LocalSyncOperation[]> {\n    try {\n      let query = db.syncQueue\n        .where('status')\n        .equals('pending')\n        .orderBy('priority') // 按优先级排序\n        .reverse() // 高优先级在前\n      \n      // 应用优先级过滤\n      if (priorityFilter && priorityFilter.length > 0) {\n        query = query.filter(op => priorityFilter.includes(op.priority))\n      }\n      \n      const operations = await query.limit(limit).toArray()\n      \n      // 检查依赖关系\n      const readyOperations = await this.filterReadyOperations(operations)\n      \n      return readyOperations\n    } catch (error) {\n      console.error('Failed to get pending operations:', error)\n      return []\n    }\n  }\n\n  // 标记操作为处理中\n  async markOperationProcessing(operationId: string): Promise<void> {\n    try {\n      await db.syncQueue.update(operationId, {\n        status: 'processing',\n        processingStartedAt: new Date()\n      })\n    } catch (error) {\n      console.error(`Failed to mark operation ${operationId} as processing:`, error)\n    }\n  }\n\n  // 标记操作完成\n  async markOperationCompleted(operationId: string): Promise<void> {\n    try {\n      const operation = await db.syncQueue.get(operationId)\n      if (!operation) return\n\n      await db.syncQueue.update(operationId, {\n        status: 'completed'\n      })\n\n      // 通知监听器\n      this.notifyListeners('operationCompleted', operation)\n      \n      // 更新统计信息\n      await this.updateQueueStats()\n    } catch (error) {\n      console.error(`Failed to mark operation ${operationId} as completed:`, error)\n    }\n  }\n\n  // 标记操作失败\n  async markOperationFailed(operationId: string, error: Error): Promise<void> {\n    try {\n      const operation = await db.syncQueue.get(operationId)\n      if (!operation) return\n\n      const retryCount = operation.retryCount + 1\n      const nextRetryDelay = Math.min(\n        operation.retryDelay * this.config.retryBackoffMultiplier,\n        this.config.maxRetryDelay\n      )\n\n      const update: Partial<LocalSyncOperation> = {\n        retryCount,\n        retryDelay: nextRetryDelay,\n        lastError: error.message\n      }\n\n      // 检查是否超过最大重试次数\n      if (retryCount >= operation.maxRetries) {\n        update.status = 'failed'\n      } else {\n        // 重置为pending以便重试\n        update.status = 'pending'\n      }\n\n      await db.syncQueue.update(operationId, update)\n\n      // 通知监听器\n      this.notifyListeners('operationFailed', operation, error)\n      \n      // 更新统计信息\n      await this.updateQueueStats()\n    } catch (error) {\n      console.error(`Failed to mark operation ${operationId} as failed:`, error)\n    }\n  }\n\n  // 取消操作\n  async cancelOperation(operationId: string, reason?: string): Promise<void> {\n    try {\n      const operation = await db.syncQueue.get(operationId)\n      if (!operation) return\n\n      await db.syncQueue.update(operationId, {\n        status: 'cancelled',\n        lastError: reason || 'Cancelled by user'\n      })\n\n      // 通知监听器\n      this.notifyListeners('operationFailed', operation, new Error(reason || 'Operation cancelled'))\n      \n      // 更新统计信息\n      await this.updateQueueStats()\n    } catch (error) {\n      console.error(`Failed to cancel operation ${operationId}:`, error)\n    }\n  }\n\n  // ============================================================================\n  // 批处理和队列管理\n  // ============================================================================\n\n  // 开始处理队列\n  private startProcessing(): void {\n    if (this.processingTimer) {\n      clearInterval(this.processingTimer)\n    }\n\n    this.processingTimer = setInterval(async () => {\n      if (!this.isProcessing) {\n        await this.processQueue()\n      }\n    }, this.config.idleCheckInterval)\n  }\n\n  // 处理队列\n  private async processQueue(): Promise<void> {\n    if (this.isProcessing || this.currentBatches.size >= this.config.maxConcurrentBatches) {\n      return\n    }\n\n    this.isProcessing = true\n\n    try {\n      // 获取待处理操作\n      const operations = await this.getPendingOperations()\n      \n      if (operations.length === 0) {\n        return\n      }\n\n      // 分批处理\n      const batches = await this.createBatches(operations)\n      \n      for (const batch of batches) {\n        const batchId = crypto.randomUUID()\n        const batchPromise = this.processBatch(batch, batchId)\n        \n        this.currentBatches.set(batchId, batchPromise)\n        \n        batchPromise\n          .catch(error => {\n            console.error(`Batch ${batchId} failed:`, error)\n          })\n          .finally(() => {\n            this.currentBatches.delete(batchId)\n          })\n      }\n    } catch (error) {\n      console.error('Error processing queue:', error)\n    } finally {\n      this.isProcessing = false\n    }\n  }\n\n  // 创建批处理组\n  private async createBatches(operations: LocalSyncOperation[]): Promise<LocalSyncOperation[][]> {\n    const batches: LocalSyncOperation[][] = []\n    let currentBatch: LocalSyncOperation[] = []\n    \n    // 按优先级排序\n    const sortedOperations = [...operations].sort((a, b) => {\n      const priorityOrder = { critical: 4, high: 3, normal: 2, low: 1 }\n      return priorityOrder[b.priority] - priorityOrder[a.priority]\n    })\n\n    for (const operation of sortedOperations) {\n      // 检查批次大小限制\n      if (currentBatch.length >= this.config.batchSize) {\n        batches.push(currentBatch)\n        currentBatch = []\n      }\n\n      // 检查网络限制\n      if (this.config.requireWifiForLargeFiles && operation.entityType === 'image') {\n        const networkInfo = await this.getNetworkInfo()\n        if (networkInfo.connectionType !== 'wifi') {\n          continue // 跳过大文件操作\n        }\n      }\n\n      currentBatch.push(operation)\n    }\n\n    if (currentBatch.length > 0) {\n      batches.push(currentBatch)\n    }\n\n    return batches\n  }\n\n  // 处理批次\n  private async processBatch(operations: LocalSyncOperation[], batchId: string): Promise<void> {\n    const batchStartTime = Date.now()\n    \n    try {\n      // 标记所有操作为处理中\n      await Promise.all(\n        operations.map(op => this.markOperationProcessing(op.id))\n      )\n\n      // 通知监听器\n      operations.forEach(op => {\n        this.notifyListeners('operationStarted', op)\n      })\n\n      // 调用实际的同步逻辑\n      await this.executeBatchSync(operations, batchId)\n\n      // 标记所有操作为完成\n      await Promise.all(\n        operations.map(op => this.markOperationCompleted(op.id))\n      )\n\n      console.log(`Batch ${batchId} processed successfully (${operations.length} operations)`)\n    } catch (error) {\n      console.error(`Batch ${batchId} failed:`, error)\n      \n      // 标记所有操作为失败\n      await Promise.all(\n        operations.map(op => this.markOperationFailed(op.id, error as Error))\n      )\n    }\n  }\n\n  // 执行批处理同步逻辑\n  private async executeBatchSync(operations: LocalSyncOperation[], batchId: string): Promise<void> {\n    try {\n      // 导入统一同步服务（延迟导入避免循环依赖）\n      const { unifiedSyncService } = await import('./unified-sync-service')\n      \n      // 按操作类型分组处理\n      const operationGroups = this.groupOperationsByType(operations)\n      \n      // 处理每个操作组\n      for (const [entityType, entityOperations] of Object.entries(operationGroups)) {\n        await this.processEntityGroup(entityType, entityOperations, unifiedSyncService)\n      }\n      \n      console.log(`Batch ${batchId} sync execution completed`)\n    } catch (error) {\n      console.error(`Batch ${batchId} sync execution failed:`, error)\n      throw error\n    }\n  }\n\n  // 按实体类型分组操作\n  private groupOperationsByType(operations: LocalSyncOperation[]): Record<string, LocalSyncOperation[]> {\n    const groups: Record<string, LocalSyncOperation[]> = {}\n    \n    for (const operation of operations) {\n      if (!groups[operation.entityType]) {\n        groups[operation.entityType] = []\n      }\n      groups[operation.entityType].push(operation)\n    }\n    \n    return groups\n  }\n\n  // 处理实体操作组\n  private async processEntityGroup(\n    entityType: string, \n    operations: LocalSyncOperation[], \n    syncService: any\n  ): Promise<void> {\n    switch (entityType) {\n      case 'card':\n        await this.processCardOperations(operations, syncService)\n        break\n      case 'folder':\n        await this.processFolderOperations(operations, syncService)\n        break\n      case 'tag':\n        await this.processTagOperations(operations, syncService)\n        break\n      case 'image':\n        await this.processImageOperations(operations, syncService)\n        break\n      default:\n        console.warn(`Unknown entity type: ${entityType}`)\n    }\n  }\n\n  // 处理卡片操作\n  private async processCardOperations(operations: LocalSyncOperation[], syncService: any): Promise<void> {\n    for (const operation of operations) {\n      try {\n        switch (operation.operationType) {\n          case 'create':\n            await syncService.addOperation({\n              type: 'create',\n              entity: 'card',\n              entityId: operation.entityId,\n              data: operation.data,\n              priority: operation.priority,\n              userId: operation.userId\n            })\n            break\n            \n          case 'update':\n            await syncService.addOperation({\n              type: 'update',\n              entity: 'card',\n              entityId: operation.entityId,\n              data: operation.data,\n              priority: operation.priority,\n              userId: operation.userId\n            })\n            break\n            \n          case 'delete':\n            await syncService.addOperation({\n              type: 'delete',\n              entity: 'card',\n              entityId: operation.entityId,\n              data: { userId: operation.userId },\n              priority: operation.priority,\n              userId: operation.userId\n            })\n            break\n        }\n      } catch (error) {\n        console.error(`Failed to process card operation ${operation.id}:`, error)\n        throw error\n      }\n    }\n  }\n\n  // 处理文件夹操作\n  private async processFolderOperations(operations: LocalSyncOperation[], syncService: any): Promise<void> {\n    for (const operation of operations) {\n      try {\n        switch (operation.operationType) {\n          case 'create':\n            await syncService.addOperation({\n              type: 'create',\n              entity: 'folder',\n              entityId: operation.entityId,\n              data: operation.data,\n              priority: operation.priority,\n              userId: operation.userId\n            })\n            break\n            \n          case 'update':\n            await syncService.addOperation({\n              type: 'update',\n              entity: 'folder',\n              entityId: operation.entityId,\n              data: operation.data,\n              priority: operation.priority,\n              userId: operation.userId\n            })\n            break\n            \n          case 'delete':\n            await syncService.addOperation({\n              type: 'delete',\n              entity: 'folder',\n              entityId: operation.entityId,\n              data: { userId: operation.userId },\n              priority: operation.priority,\n              userId: operation.userId\n            })\n            break\n        }\n      } catch (error) {\n        console.error(`Failed to process folder operation ${operation.id}:`, error)\n        throw error\n      }\n    }\n  }\n\n  // 处理标签操作\n  private async processTagOperations(operations: LocalSyncOperation[], syncService: any): Promise<void> {\n    for (const operation of operations) {\n      try {\n        switch (operation.operationType) {\n          case 'create':\n            await syncService.addOperation({\n              type: 'create',\n              entity: 'tag',\n              entityId: operation.entityId,\n              data: operation.data,\n              priority: operation.priority,\n              userId: operation.userId\n            })\n            break\n            \n          case 'update':\n            await syncService.addOperation({\n              type: 'update',\n              entity: 'tag',\n              entityId: operation.entityId,\n              data: operation.data,\n              priority: operation.priority,\n              userId: operation.userId\n            })\n            break\n            \n          case 'delete':\n            await syncService.addOperation({\n              type: 'delete',\n              entity: 'tag',\n              entityId: operation.entityId,\n              data: { userId: operation.userId },\n              priority: operation.priority,\n              userId: operation.userId\n            })\n            break\n        }\n      } catch (error) {\n        console.error(`Failed to process tag operation ${operation.id}:`, error)\n        throw error\n      }\n    }\n  }\n\n  // 处理图片操作\n  private async processImageOperations(operations: LocalSyncOperation[], syncService: any): Promise<void> {\n    for (const operation of operations) {\n      try {\n        switch (operation.operationType) {\n          case 'create':\n            await syncService.addOperation({\n              type: 'create',\n              entity: 'image',\n              entityId: operation.entityId,\n              data: operation.data,\n              priority: operation.priority,\n              userId: operation.userId\n            })\n            break\n            \n          case 'update':\n            await syncService.addOperation({\n              type: 'update',\n              entity: 'image',\n              entityId: operation.entityId,\n              data: operation.data,\n              priority: operation.priority,\n              userId: operation.userId\n            })\n            break\n            \n          case 'delete':\n            await syncService.addOperation({\n              type: 'delete',\n              entity: 'image',\n              entityId: operation.entityId,\n              data: { userId: operation.userId },\n              priority: operation.priority,\n              userId: operation.userId\n            })\n            break\n        }\n      } catch (error) {\n        console.error(`Failed to process image operation ${operation.id}:`, error)\n        throw error\n      }\n    }\n  }\n\n  // ============================================================================\n  // 清理和维护\n  // ============================================================================\n\n  // 启动定期清理\n  private startCleanup(): void {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer)\n    }\n\n    this.cleanupTimer = setInterval(async () => {\n      await this.cleanupQueue()\n    }, this.config.cleanupInterval)\n  }\n\n  // 清理队列\n  private async cleanupQueue(): Promise<void> {\n    try {\n      const now = Date.now()\n      \n      // 清理过期的操作\n      const expiredDate = new Date(now - this.config.maxAge)\n      await db.syncQueue\n        .where('timestamp')\n        .below(expiredDate)\n        .delete()\n      \n      // 清理已完成操作（保留最近的1000条用于统计）\n      const completedOperations = await db.syncQueue\n        .where('status')\n        .equals('completed')\n        .orderBy('timestamp')\n        .reverse()\n        .offset(1000)\n        .toArray()\n      \n      if (completedOperations.length > 0) {\n        await db.syncQueue.bulkDelete(completedOperations.map(op => op.id!))\n      }\n      \n      // 检查队列大小限制\n      const totalCount = await db.syncQueue.count()\n      if (totalCount > this.config.maxQueueSize) {\n        const excess = totalCount - this.config.maxQueueSize\n        const oldestOperations = await db.syncQueue\n          .orderBy('timestamp')\n          .limit(excess)\n          .toArray()\n        \n        await db.syncQueue.bulkDelete(oldestOperations.map(op => op.id!))\n      }\n      \n      console.log('Queue cleanup completed')\n    } catch (error) {\n      console.error('Queue cleanup failed:', error)\n    }\n  }\n\n  // ============================================================================\n  // 网络状态检测\n  // ============================================================================\n\n  // 获取网络信息\n  private async getNetworkInfo(): Promise<LocalSyncOperation['networkInfo']> {\n    if (!('connection' in navigator)) {\n      return {\n        online: navigator.onLine,\n        connectionType: 'none',\n        effectiveType: '4g'\n      }\n    }\n\n    const connection = (navigator as any).connection\n    \n    return {\n      online: navigator.onLine,\n      connectionType: this.getConnectionType(connection),\n      effectiveType: connection.effectiveType || '4g',\n      rtt: connection.rtt,\n      downlink: connection.downlink\n    }\n  }\n\n  // 获取连接类型\n  private getConnectionType(connection: any): 'wifi' | 'cellular' | 'none' {\n    if (!connection) return 'none'\n    \n    switch (connection.type) {\n      case 'wifi':\n      case 'ethernet':\n        return 'wifi'\n      case 'cellular':\n      case 'bluetooth':\n        return 'cellular'\n      default:\n        return 'none'\n    }\n  }\n\n  // ============================================================================\n  // 依赖关系检查\n  // ============================================================================\n\n  // 检查操作是否准备就绪（依赖关系已满足）\n  private async filterReadyOperations(operations: LocalSyncOperation[]): Promise<LocalSyncOperation[]> {\n    const readyOperations: LocalSyncOperation[] = []\n    \n    for (const operation of operations) {\n      if (!operation.dependsOn || operation.dependsOn.length === 0) {\n        readyOperations.push(operation)\n        continue\n      }\n\n      // 检查所有依赖操作是否已完成\n      const dependencies = await db.syncQueue\n        .where('id')\n        .anyOf(operation.dependsOn)\n        .toArray()\n      \n      const allDependenciesCompleted = dependencies.every(dep => dep.status === 'completed')\n      \n      if (allDependenciesCompleted) {\n        readyOperations.push(operation)\n      }\n    }\n    \n    return readyOperations\n  }\n\n  // ============================================================================\n  // 统计和监控\n  // ============================================================================\n\n  // 获取队列统计信息\n  async getQueueStats(): Promise<QueueStats> {\n    try {\n      const allOperations = await db.syncQueue.toArray()\n      \n      const stats: QueueStats = {\n        totalOperations: allOperations.length,\n        pendingOperations: 0,\n        processingOperations: 0,\n        failedOperations: 0,\n        completedOperations: 0,\n        \n        byType: {\n          card: 0,\n          folder: 0,\n          tag: 0,\n          image: 0\n        },\n        \n        byPriority: {\n          critical: 0,\n          high: 0,\n          normal: 0,\n          low: 0\n        },\n        \n        byStatus: {\n          pending: 0,\n          processing: 0,\n          completed: 0,\n          failed: 0,\n          cancelled: 0\n        },\n        \n        averageProcessingTime: 0,\n        failureRate: 0,\n        oldestPendingAge: 0\n      }\n\n      // 计算各类统计\n      for (const operation of allOperations) {\n        // 按类型统计\n        stats.byType[operation.entityType]++\n        \n        // 按优先级统计\n        stats.byPriority[operation.priority]++\n        \n        // 按状态统计\n        stats.byStatus[operation.status]++\n        \n        // 计算处理时间\n        if (operation.status === 'completed' && operation.processingStartedAt) {\n          const processingTime = operation.timestamp.getTime() - operation.processingStartedAt.getTime()\n          stats.averageProcessingTime += processingTime\n        }\n        \n        // 计算平均重试次数\n        stats.averageRetryCount += operation.retryCount\n      }\n\n      // 计算衍生统计\n      stats.pendingOperations = stats.byStatus.pending\n      stats.processingOperations = stats.byStatus.processing\n      stats.failedOperations = stats.byStatus.failed\n      stats.completedOperations = stats.byStatus.completed\n      \n      // 计算平均处理时间\n      const completedCount = stats.byStatus.completed\n      if (completedCount > 0) {\n        stats.averageProcessingTime /= completedCount\n      }\n      \n      // 计算平均重试次数\n      if (allOperations.length > 0) {\n        stats.averageRetryCount /= allOperations.length\n      }\n      \n      // 计算失败率\n      const totalWithStatus = allOperations.filter(op => \n        ['completed', 'failed'].includes(op.status)\n      ).length\n      if (totalWithStatus > 0) {\n        stats.failureRate = stats.failedOperations / totalWithStatus\n      }\n      \n      // 计算最老的待处理操作年龄\n      const pendingOperations = allOperations.filter(op => op.status === 'pending')\n      if (pendingOperations.length > 0) {\n        const oldest = pendingOperations.reduce((oldest, current) => \n          current.timestamp < oldest.timestamp ? current : oldest\n        )\n        stats.oldestPendingAge = Date.now() - oldest.timestamp.getTime()\n      }\n\n      return stats\n    } catch (error) {\n      console.error('Failed to get queue stats:', error)\n      return this.getEmptyStats()\n    }\n  }\n\n  // 获取空统计信息\n  private getEmptyStats(): QueueStats {\n    return {\n      totalOperations: 0,\n      pendingOperations: 0,\n      processingOperations: 0,\n      failedOperations: 0,\n      completedOperations: 0,\n      byType: { card: 0, folder: 0, tag: 0, image: 0 },\n      byPriority: { critical: 0, high: 0, normal: 0, low: 0 },\n      byStatus: { pending: 0, processing: 0, completed: 0, failed: 0, cancelled: 0 },\n      averageProcessingTime: 0,\n      failureRate: 0,\n      oldestPendingAge: 0\n    }\n  }\n\n  // 更新队列统计信息并通知监听器\n  private async updateQueueStats(): Promise<void> {\n    try {\n      const stats = await this.getQueueStats()\n      this.notifyListeners('queueStatsChanged', stats)\n    } catch (error) {\n      console.error('Failed to update queue stats:', error)\n    }\n  }\n\n  // ============================================================================\n  // 事件监听器管理\n  // ============================================================================\n\n  // 添加事件监听器\n  addEventListener<K extends keyof typeof this.listeners>(\n    event: K,\n    callback: NonNullable<typeof this.listeners[K]>\n  ): void {\n    this.listeners[event] = callback as any\n  }\n\n  // 移除事件监听器\n  removeEventListener<K extends keyof typeof this.listeners>(\n    event: K\n  ): void {\n    delete this.listeners[event]\n  }\n\n  // 通知监听器\n  private notifyListeners<K extends keyof typeof this.listeners>(\n    event: K,\n    ...args: any[]\n  ): void {\n    const listener = this.listeners[event]\n    if (listener) {\n      try {\n        (listener as Function)(...args)\n      } catch (error) {\n        console.error(`Error in ${event} listener:`, error)\n      }\n    }\n  }\n\n  // ============================================================================\n  // 便利方法\n  // ============================================================================\n\n  // 清空队列\n  async clearQueue(): Promise<void> {\n    try {\n      await db.syncQueue.clear()\n      await this.updateQueueStats()\n      console.log('Queue cleared successfully')\n    } catch (error) {\n      console.error('Failed to clear queue:', error)\n    }\n  }\n\n  // 获取操作详情\n  async getOperation(id: string): Promise<LocalSyncOperation | undefined> {\n    try {\n      return await db.syncQueue.get(id)\n    } catch (error) {\n      console.error(`Failed to get operation ${id}:`, error)\n      return undefined\n    }\n  }\n\n  // 删除操作\n  async removeOperation(id: string): Promise<void> {\n    try {\n      await db.syncQueue.delete(id)\n      await this.updateQueueStats()\n    } catch (error) {\n      console.error(`Failed to remove operation ${id}:`, error)\n      throw error\n    }\n  }\n\n  // 重试失败的操作\n  async retryFailedOperations(): Promise<number> {\n    try {\n      const failedOperations = await db.syncQueue\n        .where('status')\n        .equals('failed')\n        .toArray()\n      \n      for (const operation of failedOperations) {\n        await db.syncQueue.update(operation.id!, {\n          status: 'pending',\n          retryCount: 0,\n          retryDelay: this.config.initialRetryDelay,\n          lastError: undefined\n        })\n      }\n      \n      await this.updateQueueStats()\n      console.log(`Retried ${failedOperations.length} failed operations`)\n      return failedOperations.length\n    } catch (error) {\n      console.error('Failed to retry failed operations:', error)\n      return 0\n    }\n  }\n\n  // 清理已完成的操作\n  async clearCompletedOperations(): Promise<number> {\n    try {\n      const completedOperations = await db.syncQueue\n        .where('status')\n        .equals('completed')\n        .toArray()\n      \n      // 保留最近完成的操作用于历史记录\n      const keepRecentCount = 100\n      const operationsToDelete = completedOperations.slice(0, -keepRecentCount)\n      \n      for (const operation of operationsToDelete) {\n        await db.syncQueue.delete(operation.id!)\n      }\n      \n      await this.updateQueueStats()\n      console.log(`Cleared ${operationsToDelete.length} completed operations, kept ${completedOperations.length - operationsToDelete.length} recent ones`)\n      return operationsToDelete.length\n    } catch (error) {\n      console.error('Failed to clear completed operations:', error)\n      return 0\n    }\n  }\n\n  // 更新配置\n  updateConfig(newConfig: Partial<QueueConfig>): void {\n    // 验证配置参数\n    if (newConfig.maxRetries !== undefined && newConfig.maxRetries < 0) {\n      throw new Error('maxRetries must be non-negative')\n    }\n    if (newConfig.batchSize !== undefined && newConfig.batchSize <= 0) {\n      throw new Error('batchSize must be positive')\n    }\n    if (newConfig.maxQueueSize !== undefined && newConfig.maxQueueSize < 0) {\n      throw new Error('maxQueueSize must be non-negative')\n    }\n    if (newConfig.processingTimeout !== undefined && newConfig.processingTimeout <= 0) {\n      throw new Error('processingTimeout must be positive')\n    }\n    if (newConfig.idleCheckInterval !== undefined && newConfig.idleCheckInterval <= 0) {\n      throw new Error('idleCheckInterval must be positive')\n    }\n    \n    // 更新配置\n    this.config = { ...this.config, ...newConfig }\n    \n    // 如果定时器间隔改变，重新启动定时器\n    if (newConfig.idleCheckInterval !== undefined) {\n      this.startProcessing()\n    }\n    if (newConfig.cleanupInterval !== undefined) {\n      this.startCleanup()\n    }\n    \n    console.log('LocalOperationService config updated')\n  }\n\n  // 销毁服务\n  destroy(): void {\n    if (this.processingTimer) {\n      clearInterval(this.processingTimer)\n    }\n    \n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer)\n    }\n    \n    // 等待当前批次完成\n    Promise.all(this.currentBatches.values()).then(() => {\n      console.log('LocalOperationService destroyed')\n    })\n  }\n}\n\n// 导出单例实例\nexport const localOperationService = new LocalOperationService()\n\n// ============================================================================\n// 导出工具函数\n// ============================================================================\n\n// 创建卡片操作\nexport const createCardOperation = (\n  operationType: 'create' | 'update' | 'delete',\n  cardData: DbCard,\n  userId?: string,\n  previousData?: DbCard\n): Omit<LocalSyncOperation, 'id' | 'timestamp' | 'retryCount' | 'status' | 'localVersion'> => {\n  return {\n    entityType: 'card',\n    operationType,\n    entityId: cardData.id!,\n    data: cardData,\n    previousData,\n    userId,\n    priority: operationType === 'delete' ? 'high' : 'normal',\n    maxRetries: 5\n  }\n}\n\n// 创建文件夹操作\nexport const createFolderOperation = (\n  operationType: 'create' | 'update' | 'delete',\n  folderData: DbFolder,\n  userId?: string,\n  previousData?: DbFolder\n): Omit<LocalSyncOperation, 'id' | 'timestamp' | 'retryCount' | 'status' | 'localVersion'> => {\n  return {\n    entityType: 'folder',\n    operationType,\n    entityId: folderData.id!,\n    data: folderData,\n    previousData,\n    userId,\n    priority: operationType === 'delete' ? 'high' : 'normal',\n    maxRetries: 5\n  }\n}\n\n// 创建标签操作\nexport const createTagOperation = (\n  operationType: 'create' | 'update' | 'delete',\n  tagData: DbTag,\n  userId?: string,\n  previousData?: DbTag\n): Omit<LocalSyncOperation, 'id' | 'timestamp' | 'retryCount' | 'status' | 'localVersion'> => {\n  return {\n    entityType: 'tag',\n    operationType,\n    entityId: tagData.id!,\n    data: tagData,\n    previousData,\n    userId,\n    priority: 'normal',\n    maxRetries: 3\n  }\n}\n\n// 创建图片操作\nexport const createImageOperation = (\n  operationType: 'create' | 'update' | 'delete',\n  imageData: DbImage,\n  userId?: string,\n  previousData?: DbImage\n): Omit<LocalSyncOperation, 'id' | 'timestamp' | 'retryCount' | 'status' | 'localVersion'> => {\n  return {\n    entityType: 'image',\n    operationType,\n    entityId: imageData.id!,\n    data: imageData,\n    previousData,\n    userId,\n    priority: operationType === 'delete' ? 'high' : 'low',\n    maxRetries: 3\n  }\n}"],"version":3}
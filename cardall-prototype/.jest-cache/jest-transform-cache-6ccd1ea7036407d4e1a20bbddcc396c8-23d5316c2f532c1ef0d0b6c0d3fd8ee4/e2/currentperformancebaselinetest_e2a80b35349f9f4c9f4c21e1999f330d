f2bd9adfc11e877d4f93257b8d76ba93
"use strict";
/**
 * 当前性能基准测试
 * 测试currentPerformanceBaseline模块的所有功能
 */
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const current_performance_baseline_1 = require("../../utils/current-performance-baseline");
// Mock performanceBenchmark
vitest_1.vi.mock('../../utils/performance-benchmark', () => ({
    performanceBenchmark: {
        setPerformanceTargets: vitest_1.vi.fn()
    }
}));
(0, vitest_1.describe)('CurrentPerformanceBaseline', () => {
    let consoleSpy;
    (0, vitest_1.beforeEach)(() => {
        consoleSpy = {
            log: vitest_1.vi.spyOn(console, 'log').mockImplementation(() => { }),
            warn: vitest_1.vi.spyOn(console, 'warn').mockImplementation(() => { })
        };
        vitest_1.vi.clearAllMocks();
    });
    (0, vitest_1.afterEach)(() => {
        vitest_1.vi.restoreAllMocks();
    });
    (0, vitest_1.describe)('性能基准数据结构', () => {
        (0, vitest_1.test)('应该包含完整的性能基准数据', () => {
            (0, vitest_1.expect)(Array.isArray(current_performance_baseline_1.currentPerformanceBaseline)).toBe(true);
            (0, vitest_1.expect)(current_performance_baseline_1.currentPerformanceBaseline.length).toBeGreaterThan(0);
            // 验证每个基准项的结构
            current_performance_baseline_1.currentPerformanceBaseline.forEach(baseline => {
                (0, vitest_1.expect)(baseline).toHaveProperty('category');
                (0, vitest_1.expect)(baseline).toHaveProperty('metric');
                (0, vitest_1.expect)(baseline).toHaveProperty('currentValue');
                (0, vitest_1.expect)(baseline).toHaveProperty('targetValue');
                (0, vitest_1.expect)(baseline).toHaveProperty('unit');
                (0, vitest_1.expect)(baseline).toHaveProperty('improvementTarget');
                (0, vitest_1.expect)(baseline).toHaveProperty('priority');
                (0, vitest_1.expect)(baseline).toHaveProperty('reasoning');
                (0, vitest_1.expect)(['high', 'medium', 'low']).toContain(baseline.priority);
                (0, vitest_1.expect)(typeof baseline.currentValue).toBe('number');
                (0, vitest_1.expect)(typeof baseline.targetValue).toBe('number');
                (0, vitest_1.expect)(typeof baseline.improvementTarget).toBe('number');
                (0, vitest_1.expect)(baseline.currentValue).toBeGreaterThan(0);
                (0, vitest_1.expect)(baseline.targetValue).toBeGreaterThan(0);
                (0, vitest_1.expect)(baseline.improvementTarget).toBeGreaterThan(0);
            });
        });
        (0, vitest_1.test)('应该包含所有性能分类', () => {
            const categories = current_performance_baseline_1.currentPerformanceBaseline.map(b => b.category);
            const expectedCategories = ['加载性能', '运行时性能', '同步性能', '数据库性能', '网络性能'];
            expectedCategories.forEach(category => {
                (0, vitest_1.expect)(categories).toContain(category);
            });
        });
        (0, vitest_1.test)('应该有合理的改进目标', () => {
            current_performance_baseline_1.currentPerformanceBaseline.forEach(baseline => {
                // 改进目标应该在合理范围内
                (0, vitest_1.expect)(baseline.improvementTarget).toBeGreaterThan(0);
                (0, vitest_1.expect)(baseline.improvementTarget).toBeLessThanOrEqual(150);
                // 当前值应该大于目标值（需要改进）
                if (baseline.metric !== '同步成功率') {
                    (0, vitest_1.expect)(baseline.currentValue).toBeGreaterThan(baseline.targetValue);
                }
                else {
                    // 成功率当前值应该小于目标值
                    (0, vitest_1.expect)(baseline.currentValue).toBeLessThan(baseline.targetValue);
                }
            });
        });
    });
    (0, vitest_1.describe)('总体改进目标计算', () => {
        (0, vitest_1.test)('应该正确计算加权平均改进目标', () => {
            const overallTarget = (0, current_performance_baseline_1.calculateOverallImprovementTarget)();
            (0, vitest_1.expect)(typeof overallTarget).toBe('number');
            (0, vitest_1.expect)(overallTarget).toBeGreaterThan(0);
            (0, vitest_1.expect)(overallTarget).toBeLessThan(100);
            // 基于数据估算，应该在70-80之间
            (0, vitest_1.expect)(overallTarget).toBeGreaterThanOrEqual(70);
            (0, vitest_1.expect)(overallTarget).toBeLessThanOrEqual(80);
        });
        (0, vitest_1.test)('应该正确应用权重计算', () => {
            // 创建测试数据验证权重逻辑
            const testBaselines = [
                {
                    category: '测试',
                    metric: '高优先级',
                    currentValue: 100,
                    targetValue: 50,
                    unit: 'ms',
                    improvementTarget: 50,
                    priority: 'high',
                    reasoning: 'test'
                },
                {
                    category: '测试',
                    metric: '中优先级',
                    currentValue: 100,
                    targetValue: 60,
                    unit: 'ms',
                    improvementTarget: 40,
                    priority: 'medium',
                    reasoning: 'test'
                },
                {
                    category: '测试',
                    metric: '低优先级',
                    currentValue: 100,
                    targetValue: 70,
                    unit: 'ms',
                    improvementTarget: 30,
                    priority: 'low',
                    reasoning: 'test'
                }
            ];
            // 临时替换基准数据
            const originalBaselines = current_performance_baseline_1.currentPerformanceBaseline;
            current_performance_baseline_1.currentPerformanceBaseline = testBaselines;
            const result = (0, current_performance_baseline_1.calculateOverallImprovementTarget)();
            // 预期: (50*3 + 40*2 + 30*1) / (3+2+1) = (150 + 80 + 30) / 6 = 260/6 = 43.33
            (0, vitest_1.expect)(result).toBeCloseTo(43.33, 1);
            current_performance_baseline_1.currentPerformanceBaseline = originalBaselines;
        });
        (0, vitest_1.test)('应该处理空数据情况', () => {
            const originalBaselines = current_performance_baseline_1.currentPerformanceBaseline;
            current_performance_baseline_1.currentPerformanceBaseline = [];
            const result = (0, current_performance_baseline_1.calculateOverallImprovementTarget)();
            (0, vitest_1.expect)(result).toBe(0);
            current_performance_baseline_1.currentPerformanceBaseline = originalBaselines;
        });
    });
    (0, vitest_1.describe)('高优先级优化项目', () => {
        (0, vitest_1.test)('应该正确筛选高优先级项目', () => {
            const highPriorityItems = (0, current_performance_baseline_1.getHighPriorityOptimizations)();
            (0, vitest_1.expect)(Array.isArray(highPriorityItems)).toBe(true);
            (0, vitest_1.expect)(highPriorityItems.length).toBeGreaterThan(0);
            // 验证所有项目都是高优先级
            highPriorityItems.forEach(item => {
                (0, vitest_1.expect)(item.priority).toBe('high');
            });
            // 验证高优先级项目数量合理
            const totalCount = current_performance_baseline_1.currentPerformanceBaseline.length;
            const highPriorityCount = highPriorityItems.length;
            (0, vitest_1.expect)(highPriorityCount).toBeLessThan(totalCount);
            // 基于数据，应该有大量高优先级项目
            (0, vitest_1.expect)(highPriorityCount).toBeGreaterThan(10);
        });
        (0, vitest_1.test)('应该返回高优先级项目的完整信息', () => {
            const highPriorityItems = (0, current_performance_baseline_1.getHighPriorityOptimizations)();
            highPriorityItems.forEach(item => {
                (0, vitest_1.expect)(item).toHaveProperty('category');
                (0, vitest_1.expect)(item).toHaveProperty('metric');
                (0, vitest_1.expect)(item).toHaveProperty('currentValue');
                (0, vitest_1.expect)(item).toHaveProperty('targetValue');
                (0, vitest_1.expect)(item).toHaveProperty('improvementTarget');
                (0, vitest_1.expect)(item).toHaveProperty('reasoning');
            });
        });
    });
    (0, vitest_1.describe)('分类改进目标', () => {
        (0, vitest_1.test)('应该计算各分类的平均改进目标', () => {
            const categoryTargets = (0, current_performance_baseline_1.getCategoryImprovementTargets)();
            (0, vitest_1.expect)(typeof categoryTargets).toBe('object');
            (0, vitest_1.expect)(Object.keys(categoryTargets).length).toBeGreaterThan(0);
            // 验证所有分类都有目标
            const expectedCategories = ['加载性能', '运行时性能', '同步性能', '数据库性能', '网络性能'];
            expectedCategories.forEach(category => {
                (0, vitest_1.expect)(categoryTargets).toHaveProperty(category);
                (0, vitest_1.expect)(typeof categoryTargets[category]).toBe('number');
                (0, vitest_1.expect)(categoryTargets[category]).toBeGreaterThan(0);
            });
        });
        (0, vitest_1.test)('应该正确计算分类平均值', () => {
            const categoryTargets = (0, current_performance_baseline_1.getCategoryImprovementTargets)();
            // 验证各分类的目标值合理
            Object.values(categoryTargets).forEach(target => {
                (0, vitest_1.expect)(target).toBeGreaterThan(0);
                (0, vitest_1.expect)(target).toBeLessThan(100);
            });
            // 基于数据特征，网络和加载性能应该有较高的改进目标
            (0, vitest_1.expect)(categoryTargets['网络性能']).toBeGreaterThan(60);
            (0, vitest_1.expect)(categoryTargets['加载性能']).toBeGreaterThan(60);
        });
    });
    (0, vitest_1.describe)('性能目标设定', () => {
        (0, vitest_1.test)('应该调用performanceBenchmark的设定方法', () => {
            (0, current_performance_baseline_1.setPerformanceTargets)();
            (0, vitest_1.expect)(performanceBenchmark.setPerformanceTargets).toHaveBeenCalled();
        });
        (0, vitest_1.test)('应该传递正确的目标参数', () => {
            (0, current_performance_baseline_1.setPerformanceTargets)();
            // 验证调用的参数包含所有性能指标
            const callArgs = performanceBenchmark.setPerformanceTargets.mock.calls[0][0];
            (0, vitest_1.expect)(typeof callArgs).toBe('object');
            // 验证包含一些关键指标
            const expectedMetrics = ['Bundle总大小', '首次内容绘制时间', '组件渲染时间', '同步操作时间'];
            expectedMetrics.forEach(metric => {
                (0, vitest_1.expect)(callArgs).toHaveProperty(metric);
            });
        });
        (0, vitest_1.test)('应该处理空基准数据情况', () => {
            const originalBaselines = current_performance_baseline_1.currentPerformanceBaseline;
            current_performance_baseline_1.currentPerformanceBaseline = [];
            (0, vitest_1.expect)(() => (0, current_performance_baseline_1.setPerformanceTargets)()).not.toThrow();
            current_performance_baseline_1.currentPerformanceBaseline = originalBaselines;
        });
    });
    (0, vitest_1.describe)('优化时间表生成', () => {
        (0, vitest_1.test)('应该生成完整的优化时间表', () => {
            const timeline = (0, current_performance_baseline_1.generateOptimizationTimeline)();
            (0, vitest_1.expect)(Array.isArray(timeline)).toBe(true);
            (0, vitest_1.expect)(timeline.length).toBe(5); // 5个阶段
            // 验证每个阶段的结构
            timeline.forEach(phase => {
                (0, vitest_1.expect)(phase).toHaveProperty('phase');
                (0, vitest_1.expect)(phase).toHaveProperty('duration');
                (0, vitest_1.expect)(phase).toHaveProperty('improvements');
                (0, vitest_1.expect)(phase).toHaveProperty('expectedImprovement');
                (0, vitest_1.expect)(typeof phase.duration).toBe('number');
                (0, vitest_1.expect)(Array.isArray(phase.improvements)).toBe(true);
                (0, vitest_1.expect)(typeof phase.expectedImprovement).toBe('number');
                (0, vitest_1.expect)(phase.duration).toBeGreaterThan(0);
                (0, vitest_1.expect)(phase.expectedImprovement).toBeGreaterThan(0);
            });
        });
        (0, vitest_1.test)('应该包含所有优化阶段', () => {
            const timeline = (0, current_performance_baseline_1.generateOptimizationTimeline)();
            const phases = timeline.map(p => p.phase);
            const expectedPhases = [
                '第一阶段：Bundle优化',
                '第二阶段：运行时优化',
                '第三阶段：同步系统重构',
                '第四阶段：数据库优化',
                '第五阶段：网络优化'
            ];
            expectedPhases.forEach(phase => {
                (0, vitest_1.expect)(phases).toContain(phase);
            });
        });
        (0, vitest_1.test)('应该有合理的持续时间分布', () => {
            const timeline = (0, current_performance_baseline_1.generateOptimizationTimeline)();
            const totalDuration = timeline.reduce((sum, phase) => sum + phase.duration, 0);
            (0, vitest_1.expect)(totalDuration).toBe(10); // 总共10个单位时间
            // 每个阶段的持续时间应该合理
            timeline.forEach(phase => {
                (0, vitest_1.expect)(phase.duration).toBeGreaterThan(0);
                (0, vitest_1.expect)(phase.duration).toBeLessThanOrEqual(3);
            });
        });
        (0, vitest_1.test)('应该包含具体的改进措施', () => {
            const timeline = (0, current_performance_baseline_1.generateOptimizationTimeline)();
            timeline.forEach(phase => {
                (0, vitest_1.expect)(phase.improvements.length).toBeGreaterThan(0);
                // 验证改进措施是具体的
                phase.improvements.forEach(improvement => {
                    (0, vitest_1.expect)(typeof improvement).toBe('string');
                    (0, vitest_1.expect)(improvement.length).toBeGreaterThan(0);
                });
            });
        });
    });
    (0, vitest_1.describe)('目标验证', () => {
        (0, vitest_1.test)('应该验证目标可达性', () => {
            const isValid = (0, current_performance_baseline_1.validateTargets)();
            (0, vitest_1.expect)(typeof isValid).toBe('boolean');
            // 基于当前数据，应该返回true
            (0, vitest_1.expect)(isValid).toBe(true);
            // 验证控制台输出
            (0, vitest_1.expect)(consoleSpy.log).toHaveBeenCalledWith(vitest_1.expect.stringContaining('总体改进目标'), vitest_1.expect.any(Number));
            (0, vitest_1.expect)(consoleSpy.log).toHaveBeenCalledWith('分类改进目标:', vitest_1.expect.any(Object));
        });
        (0, vitest_1.test)('应该检测不可达的目标', () => {
            // 临时修改基准数据为不可达目标
            const originalBaselines = current_performance_baseline_1.currentPerformanceBaseline;
            current_performance_baseline_1.currentPerformanceBaseline[0].improvementTarget = 10; // 太低
            const isValid = (0, current_performance_baseline_1.validateTargets)();
            (0, vitest_1.expect)(isValid).toBe(false);
            current_performance_baseline_1.currentPerformanceBaseline = originalBaselines;
        });
        (0, vitest_1.test)('应该检查高优先级项目的目标', () => {
            // 临时设置一个高优先级项目无目标
            const originalBaselines = current_performance_baseline_1.currentPerformanceBaseline;
            current_performance_baseline_1.currentPerformanceBaseline[0].targetValue = 0;
            const isValid = (0, current_performance_baseline_1.validateTargets)();
            (0, vitest_1.expect)(isValid).toBe(false);
            current_performance_baseline_1.currentPerformanceBaseline = originalBaselines;
        });
    });
    (0, vitest_1.describe)('初始化功能', () => {
        (0, vitest_1.test)('应该完整初始化性能基准', () => {
            (0, current_performance_baseline_1.initializePerformanceBaseline)();
            // 验证所有必要的调用
            (0, vitest_1.expect)(performanceBenchmark.setPerformanceTargets).toHaveBeenCalled();
            (0, vitest_1.expect)(consoleSpy.log).toHaveBeenCalledWith(vitest_1.expect.stringContaining('性能基准初始化完成'));
            (0, vitest_1.expect)(consoleSpy.log).toHaveBeenCalledWith(vitest_1.expect.stringContaining('总体改进目标'), vitest_1.expect.any(Number));
        });
        (0, vitest_1.test)('应该在目标不可达时显示警告', () => {
            // 临时修改数据使目标不可达
            const originalBaselines = current_performance_baseline_1.currentPerformanceBaseline;
            current_performance_baseline_1.currentPerformanceBaseline[0].improvementTarget = 10;
            (0, current_performance_baseline_1.initializePerformanceBaseline)();
            (0, vitest_1.expect)(consoleSpy.warn).toHaveBeenCalledWith('性能目标可能过于激进，请重新评估');
            current_performance_baseline_1.currentPerformanceBaseline = originalBaselines;
        });
        (0, vitest_1.test)('应该生成并显示优化时间表', () => {
            (0, current_performance_baseline_1.initializePerformanceBaseline)();
            (0, vitest_1.expect)(consoleSpy.log).toHaveBeenCalledWith('优化时间表:', vitest_1.expect.any(Array));
        });
    });
    (0, vitest_1.describe)('边界情况测试', () => {
        (0, vitest_1.test)('应该处理数值边界情况', () => {
            // 测试零值和负值
            const testBaseline = {
                category: '测试',
                metric: '边界测试',
                currentValue: 100,
                targetValue: 50,
                unit: 'ms',
                improvementTarget: 50,
                priority: 'medium',
                reasoning: '边界测试'
            };
            (0, vitest_1.expect)(() => {
                // 验证计算函数能处理各种数值
                (0, current_performance_baseline_1.calculateOverallImprovementTarget)();
            }).not.toThrow();
        });
        (0, vitest_1.test)('应该处理字符串边界情况', () => {
            // 测试空字符串和特殊字符
            const testBaseline = {
                category: '',
                metric: '特殊字符测试 @#$%',
                currentValue: 100,
                targetValue: 50,
                unit: 'ms',
                improvementTarget: 50,
                priority: 'medium',
                reasoning: ''
            };
            (0, vitest_1.expect)(() => {
                (0, current_performance_baseline_1.getCategoryImprovementTargets)();
            }).not.toThrow();
        });
    });
    (0, vitest_1.describe)('性能测试', () => {
        (0, vitest_1.test)('应该保持良好的计算性能', () => {
            const start = performance.now();
            // 执行多次计算操作
            for (let i = 0; i < 1000; i++) {
                (0, current_performance_baseline_1.calculateOverallImprovementTarget)();
                (0, current_performance_baseline_1.getHighPriorityOptimizations)();
                (0, current_performance_baseline_1.getCategoryImprovementTargets)();
                (0, current_performance_baseline_1.generateOptimizationTimeline)();
            }
            const end = performance.now();
            const duration = end - start;
            // 1000次计算操作应该在合理时间内完成
            (0, vitest_1.expect)(duration).toBeLessThan(100); // 100ms
        });
        (0, vitest_1.test)('应该避免内存泄漏', () => {
            // 创建多个实例
            const results = [];
            for (let i = 0; i < 10000; i++) {
                results.push({
                    overall: (0, current_performance_baseline_1.calculateOverallImprovementTarget)(),
                    highPriority: (0, current_performance_baseline_1.getHighPriorityOptimizations)(),
                    categories: (0, current_performance_baseline_1.getCategoryImprovementTargets)(),
                    timeline: (0, current_performance_baseline_1.generateOptimizationTimeline)()
                });
            }
            // 清理
            results.length = 0;
            // 如果没有内存泄漏，这个测试应该通过
            (0, vitest_1.expect)(true).toBe(true);
        });
    });
    (0, vitest_1.describe)('TypeScript类型检查', () => {
        (0, vitest_1.test)('应该符合TypeScript接口', () => {
            const baseline = current_performance_baseline_1.currentPerformanceBaseline[0];
            (0, vitest_1.expect)(baseline).toHaveProperty('category');
            (0, vitest_1.expect)(baseline).toHaveProperty('metric');
            (0, vitest_1.expect)(baseline).toHaveProperty('currentValue');
            (0, vitest_1.expect)(baseline).toHaveProperty('targetValue');
            (0, vitest_1.expect)(baseline).toHaveProperty('unit');
            (0, vitest_1.expect)(baseline).toHaveProperty('improvementTarget');
            (0, vitest_1.expect)(baseline).toHaveProperty('priority');
            (0, vitest_1.expect)(baseline).toHaveProperty('reasoning');
            const overallTarget = (0, current_performance_baseline_1.calculateOverallImprovementTarget)();
            (0, vitest_1.expect)(typeof overallTarget).toBe('number');
            const highPriority = (0, current_performance_baseline_1.getHighPriorityOptimizations)();
            (0, vitest_1.expect)(Array.isArray(highPriority)).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
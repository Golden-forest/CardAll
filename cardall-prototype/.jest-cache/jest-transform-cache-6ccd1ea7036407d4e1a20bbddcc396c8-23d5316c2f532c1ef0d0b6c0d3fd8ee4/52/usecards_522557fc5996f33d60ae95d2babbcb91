0557a7e9c2bdf9ece4f6b210d7c2efa0
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCards = useCards;
const react_1 = require("react");
// Mock data for development
const mockCards = [
    {
        id: '1',
        frontContent: {
            title: 'React Best Practices',
            text: 'Key principles for writing maintainable React code including component composition, state management, and performance optimization.',
            images: [],
            tags: ['react', 'frontend', 'best-practices'],
            lastModified: new Date()
        },
        backContent: {
            title: 'Implementation Details',
            text: 'Use functional components with hooks, implement proper error boundaries, optimize with React.memo and useMemo for expensive calculations.',
            images: [],
            tags: ['react', 'frontend', 'best-practices'],
            lastModified: new Date()
        },
        style: {
            type: 'solid',
            backgroundColor: '#f8fafc',
            fontFamily: 'system-ui',
            fontSize: 'base',
            fontWeight: 'normal',
            textColor: '#1f2937',
            borderRadius: 'xl',
            shadow: 'md',
            borderWidth: 0
        },
        isFlipped: false,
        createdAt: new Date('2024-01-15'),
        updatedAt: new Date('2024-01-15')
    },
    {
        id: '2',
        frontContent: {
            title: 'TypeScript Tips',
            text: 'Advanced TypeScript patterns for better type safety and developer experience in large applications.',
            images: [],
            tags: ['typescript', 'types', 'development'],
            lastModified: new Date()
        },
        backContent: {
            title: 'Advanced Patterns',
            text: 'Utility types, conditional types, mapped types, and template literal types for complex type transformations.',
            images: [],
            tags: ['typescript', 'types', 'development'],
            lastModified: new Date()
        },
        style: {
            type: 'gradient',
            gradientColors: ['#667eea', '#764ba2'],
            gradientDirection: 'to-br',
            fontFamily: 'system-ui',
            fontSize: 'base',
            fontWeight: 'medium',
            textColor: '#ffffff',
            borderRadius: 'xl',
            shadow: 'lg',
            borderWidth: 0
        },
        isFlipped: false,
        createdAt: new Date('2024-01-16'),
        updatedAt: new Date('2024-01-16')
    }
];
function useCards() {
    const [cards, setCards] = (0, react_1.useState)(mockCards);
    const [filter, setFilter] = (0, react_1.useState)({
        searchTerm: '',
        tags: []
    });
    const [viewSettings, setViewSettings] = (0, react_1.useState)({
        layout: 'grid',
        cardSize: 'medium',
        showTags: true,
        showDates: false,
        sortBy: 'updated',
        sortOrder: 'desc'
    });
    const [selectedCardIds, setSelectedCardIds] = (0, react_1.useState)([]);
    // Filter and sort cards
    const filteredCards = (0, react_1.useCallback)(() => {
        let filtered = cards.filter(card => {
            // Search term filter
            if (filter.searchTerm) {
                const searchLower = filter.searchTerm.toLowerCase();
                const matchesTitle = card.frontContent.title.toLowerCase().includes(searchLower) ||
                    card.backContent.title.toLowerCase().includes(searchLower);
                const matchesText = card.frontContent.text.toLowerCase().includes(searchLower) ||
                    card.backContent.text.toLowerCase().includes(searchLower);
                const matchesTags = [...card.frontContent.tags, ...card.backContent.tags]
                    .some(tag => tag.toLowerCase().includes(searchLower));
                if (!matchesTitle && !matchesText && !matchesTags)
                    return false;
            }
            // Tags filter
            if (filter.tags.length > 0) {
                const cardTags = [...card.frontContent.tags, ...card.backContent.tags];
                if (!filter.tags.some(tag => cardTags.includes(tag)))
                    return false;
            }
            // Folder filter
            if (filter.folderId && card.folderId !== filter.folderId)
                return false;
            // Date range filter
            if (filter.dateRange) {
                const cardDate = new Date(card.updatedAt);
                if (cardDate < filter.dateRange.start || cardDate > filter.dateRange.end)
                    return false;
            }
            // Style type filter
            if (filter.styleType && card.style.type !== filter.styleType)
                return false;
            // Has images filter
            if (filter.hasImages !== undefined) {
                const hasImages = card.frontContent.images.length > 0 || card.backContent.images.length > 0;
                if (hasImages !== filter.hasImages)
                    return false;
            }
            return true;
        });
        // Sort cards
        filtered.sort((a, b) => {
            let comparison = 0;
            switch (viewSettings.sortBy) {
                case 'created':
                    comparison = new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();
                    break;
                case 'updated':
                    comparison = new Date(a.updatedAt).getTime() - new Date(b.updatedAt).getTime();
                    break;
                case 'title':
                    comparison = a.frontContent.title.localeCompare(b.frontContent.title);
                    break;
                default:
                    comparison = 0;
            }
            return viewSettings.sortOrder === 'desc' ? -comparison : comparison;
        });
        return filtered;
    }, [cards, filter, viewSettings]);
    // Card actions
    const dispatch = (0, react_1.useCallback)((action) => {
        setCards(prevCards => {
            switch (action.type) {
                case 'CREATE_CARD':
                    const newCard = {
                        ...action.payload,
                        id: Date.now().toString(),
                        createdAt: new Date(),
                        updatedAt: new Date()
                    };
                    return [...prevCards, newCard];
                case 'UPDATE_CARD':
                    return prevCards.map(card => card.id === action.payload.id
                        ? { ...card, ...action.payload.updates, updatedAt: new Date() }
                        : card);
                case 'DELETE_CARD':
                    return prevCards.filter(card => card.id !== action.payload);
                case 'FLIP_CARD':
                    return prevCards.map(card => card.id === action.payload
                        ? { ...card, isFlipped: !card.isFlipped, updatedAt: new Date() }
                        : card);
                case 'SELECT_CARD':
                    setSelectedCardIds(prev => prev.includes(action.payload)
                        ? prev.filter(id => id !== action.payload)
                        : [...prev, action.payload]);
                    return prevCards;
                case 'DESELECT_ALL':
                    setSelectedCardIds([]);
                    return prevCards;
                case 'DUPLICATE_CARD':
                    const cardToDuplicate = prevCards.find(card => card.id === action.payload);
                    if (!cardToDuplicate)
                        return prevCards;
                    const duplicatedCard = {
                        ...cardToDuplicate,
                        id: Date.now().toString(),
                        createdAt: new Date(),
                        updatedAt: new Date()
                    };
                    return [...prevCards, duplicatedCard];
                case 'MOVE_TO_FOLDER':
                    return prevCards.map(card => card.id === action.payload.cardId
                        ? { ...card, folderId: action.payload.folderId, updatedAt: new Date() }
                        : card);
                default:
                    return prevCards;
            }
        });
    }, []);
    // Utility functions
    const getCardById = (0, react_1.useCallback)((id) => {
        return cards.find(card => card.id === id);
    }, [cards]);
    const getSelectedCards = (0, react_1.useCallback)(() => {
        return cards.filter(card => selectedCardIds.includes(card.id));
    }, [cards, selectedCardIds]);
    const getAllTags = (0, react_1.useCallback)(() => {
        const tagSet = new Set();
        cards.forEach(card => {
            card.frontContent.tags.forEach(tag => tagSet.add(tag));
            card.backContent.tags.forEach(tag => tagSet.add(tag));
        });
        return Array.from(tagSet).sort();
    }, [cards]);
    // Update tags across all cards (for rename/delete operations)
    const updateTagsInAllCards = (0, react_1.useCallback)((oldTagName, newTagName) => {
        setCards(prevCards => {
            return prevCards.map(card => {
                const updateTags = (tags) => {
                    if (newTagName) {
                        // Rename tag
                        return tags.map(tag => tag === oldTagName ? newTagName : tag);
                    }
                    else {
                        // Delete tag
                        return tags.filter(tag => tag !== oldTagName);
                    }
                };
                const frontTags = updateTags(card.frontContent.tags);
                const backTags = updateTags(card.backContent.tags);
                // Only update if tags actually changed
                if (JSON.stringify(frontTags) !== JSON.stringify(card.frontContent.tags) ||
                    JSON.stringify(backTags) !== JSON.stringify(card.backContent.tags)) {
                    return {
                        ...card,
                        frontContent: {
                            ...card.frontContent,
                            tags: frontTags,
                            lastModified: new Date()
                        },
                        backContent: {
                            ...card.backContent,
                            tags: backTags,
                            lastModified: new Date()
                        },
                        updatedAt: new Date()
                    };
                }
                return card;
            });
        });
    }, []);
    // Get cards that use a specific tag
    const getCardsWithTag = (0, react_1.useCallback)((tagName) => {
        return cards.filter(card => card.frontContent.tags.includes(tagName) ||
            card.backContent.tags.includes(tagName));
    }, [cards]);
    // Auto-save to localStorage
    (0, react_1.useEffect)(() => {
        const saveTimer = setTimeout(() => {
            localStorage.setItem('cardall-cards', JSON.stringify(cards));
        }, 1000);
        return () => clearTimeout(saveTimer);
    }, [cards]);
    // Load from localStorage on mount
    (0, react_1.useEffect)(() => {
        const saved = localStorage.getItem('cardall-cards');
        if (saved) {
            try {
                const parsedCards = JSON.parse(saved);
                setCards(parsedCards);
            }
            catch (error) {
                console.error('Failed to load saved cards:', error);
            }
        }
    }, []);
    return {
        cards: filteredCards(),
        allCards: cards,
        filter,
        setFilter,
        viewSettings,
        setViewSettings,
        selectedCardIds,
        dispatch,
        getCardById,
        getSelectedCards,
        getAllTags,
        updateTagsInAllCards,
        getCardsWithTag
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXHNyY1xcaG9va3NcXHVzZS1jYXJkcy50cyIsIm1hcHBpbmdzIjoiOztBQXNFQSw0QkFnUUM7QUF0VUQsaUNBQXdEO0FBR3hELDRCQUE0QjtBQUM1QixNQUFNLFNBQVMsR0FBVztJQUN4QjtRQUNFLEVBQUUsRUFBRSxHQUFHO1FBQ1AsWUFBWSxFQUFFO1lBQ1osS0FBSyxFQUFFLHNCQUFzQjtZQUM3QixJQUFJLEVBQUUscUlBQXFJO1lBQzNJLE1BQU0sRUFBRSxFQUFFO1lBQ1YsSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxnQkFBZ0IsQ0FBQztZQUM3QyxZQUFZLEVBQUUsSUFBSSxJQUFJLEVBQUU7U0FDekI7UUFDRCxXQUFXLEVBQUU7WUFDWCxLQUFLLEVBQUUsd0JBQXdCO1lBQy9CLElBQUksRUFBRSwySUFBMkk7WUFDakosTUFBTSxFQUFFLEVBQUU7WUFDVixJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixDQUFDO1lBQzdDLFlBQVksRUFBRSxJQUFJLElBQUksRUFBRTtTQUN6QjtRQUNELEtBQUssRUFBRTtZQUNMLElBQUksRUFBRSxPQUFPO1lBQ2IsZUFBZSxFQUFFLFNBQVM7WUFDMUIsVUFBVSxFQUFFLFdBQVc7WUFDdkIsUUFBUSxFQUFFLE1BQU07WUFDaEIsVUFBVSxFQUFFLFFBQVE7WUFDcEIsU0FBUyxFQUFFLFNBQVM7WUFDcEIsWUFBWSxFQUFFLElBQUk7WUFDbEIsTUFBTSxFQUFFLElBQUk7WUFDWixXQUFXLEVBQUUsQ0FBQztTQUNmO1FBQ0QsU0FBUyxFQUFFLEtBQUs7UUFDaEIsU0FBUyxFQUFFLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQztRQUNqQyxTQUFTLEVBQUUsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDO0tBQ2xDO0lBQ0Q7UUFDRSxFQUFFLEVBQUUsR0FBRztRQUNQLFlBQVksRUFBRTtZQUNaLEtBQUssRUFBRSxpQkFBaUI7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O0tBQ2hCLENBQUE7QUFDSCxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkQ6XFxQcm9qZWN0c1xcQ2FyZEV2ZXJ5dGhpbmdcXGNhcmRhbGwtcHJvdG90eXBlXFxzcmNcXGhvb2tzXFx1c2UtY2FyZHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgQ2FyZCwgQ2FyZEFjdGlvbiwgQ2FyZEZpbHRlciwgVmlld1NldHRpbmdzIH0gZnJvbSAnQC90eXBlcy9jYXJkJ1xyXG5cclxuLy8gTW9jayBkYXRhIGZvciBkZXZlbG9wbWVudFxyXG5jb25zdCBtb2NrQ2FyZHM6IENhcmRbXSA9IFtcclxuICB7XHJcbiAgICBpZDogJzEnLFxyXG4gICAgZnJvbnRDb250ZW50OiB7XHJcbiAgICAgIHRpdGxlOiAnUmVhY3QgQmVzdCBQcmFjdGljZXMnLFxyXG4gICAgICB0ZXh0OiAnS2V5IHByaW5jaXBsZXMgZm9yIHdyaXRpbmcgbWFpbnRhaW5hYmxlIFJlYWN0IGNvZGUgaW5jbHVkaW5nIGNvbXBvbmVudCBjb21wb3NpdGlvbiwgc3RhdGUgbWFuYWdlbWVudCwgYW5kIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbi4nLFxyXG4gICAgICBpbWFnZXM6IFtdLFxyXG4gICAgICB0YWdzOiBbJ3JlYWN0JywgJ2Zyb250ZW5kJywgJ2Jlc3QtcHJhY3RpY2VzJ10sXHJcbiAgICAgIGxhc3RNb2RpZmllZDogbmV3IERhdGUoKVxyXG4gICAgfSxcclxuICAgIGJhY2tDb250ZW50OiB7XHJcbiAgICAgIHRpdGxlOiAnSW1wbGVtZW50YXRpb24gRGV0YWlscycsXHJcbiAgICAgIHRleHQ6ICdVc2UgZnVuY3Rpb25hbCBjb21wb25lbnRzIHdpdGggaG9va3MsIGltcGxlbWVudCBwcm9wZXIgZXJyb3IgYm91bmRhcmllcywgb3B0aW1pemUgd2l0aCBSZWFjdC5tZW1vIGFuZCB1c2VNZW1vIGZvciBleHBlbnNpdmUgY2FsY3VsYXRpb25zLicsXHJcbiAgICAgIGltYWdlczogW10sXHJcbiAgICAgIHRhZ3M6IFsncmVhY3QnLCAnZnJvbnRlbmQnLCAnYmVzdC1wcmFjdGljZXMnXSxcclxuICAgICAgbGFzdE1vZGlmaWVkOiBuZXcgRGF0ZSgpXHJcbiAgICB9LFxyXG4gICAgc3R5bGU6IHtcclxuICAgICAgdHlwZTogJ3NvbGlkJyxcclxuICAgICAgYmFja2dyb3VuZENvbG9yOiAnI2Y4ZmFmYycsXHJcbiAgICAgIGZvbnRGYW1pbHk6ICdzeXN0ZW0tdWknLFxyXG4gICAgICBmb250U2l6ZTogJ2Jhc2UnLFxyXG4gICAgICBmb250V2VpZ2h0OiAnbm9ybWFsJyxcclxuICAgICAgdGV4dENvbG9yOiAnIzFmMjkzNycsXHJcbiAgICAgIGJvcmRlclJhZGl1czogJ3hsJyxcclxuICAgICAgc2hhZG93OiAnbWQnLFxyXG4gICAgICBib3JkZXJXaWR0aDogMFxyXG4gICAgfSxcclxuICAgIGlzRmxpcHBlZDogZmFsc2UsXHJcbiAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCcyMDI0LTAxLTE1JyksXHJcbiAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKCcyMDI0LTAxLTE1JylcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnMicsXHJcbiAgICBmcm9udENvbnRlbnQ6IHtcclxuICAgICAgdGl0bGU6ICdUeXBlU2NyaXB0IFRpcHMnLFxyXG4gICAgICB0ZXh0OiAnQWR2YW5jZWQgVHlwZVNjcmlwdCBwYXR0ZXJucyBmb3IgYmV0dGVyIHR5cGUgc2FmZXR5IGFuZCBkZXZlbG9wZXIgZXhwZXJpZW5jZSBpbiBsYXJnZSBhcHBsaWNhdGlvbnMuJyxcclxuICAgICAgaW1hZ2VzOiBbXSxcclxuICAgICAgdGFnczogWyd0eXBlc2NyaXB0JywgJ3R5cGVzJywgJ2RldmVsb3BtZW50J10sXHJcbiAgICAgIGxhc3RNb2RpZmllZDogbmV3IERhdGUoKVxyXG4gICAgfSxcclxuICAgIGJhY2tDb250ZW50OiB7XHJcbiAgICAgIHRpdGxlOiAnQWR2YW5jZWQgUGF0dGVybnMnLFxyXG4gICAgICB0ZXh0OiAnVXRpbGl0eSB0eXBlcywgY29uZGl0aW9uYWwgdHlwZXMsIG1hcHBlZCB0eXBlcywgYW5kIHRlbXBsYXRlIGxpdGVyYWwgdHlwZXMgZm9yIGNvbXBsZXggdHlwZSB0cmFuc2Zvcm1hdGlvbnMuJyxcclxuICAgICAgaW1hZ2VzOiBbXSxcclxuICAgICAgdGFnczogWyd0eXBlc2NyaXB0JywgJ3R5cGVzJywgJ2RldmVsb3BtZW50J10sXHJcbiAgICAgIGxhc3RNb2RpZmllZDogbmV3IERhdGUoKVxyXG4gICAgfSxcclxuICAgIHN0eWxlOiB7XHJcbiAgICAgIHR5cGU6ICdncmFkaWVudCcsXHJcbiAgICAgIGdyYWRpZW50Q29sb3JzOiBbJyM2NjdlZWEnLCAnIzc2NGJhMiddLFxyXG4gICAgICBncmFkaWVudERpcmVjdGlvbjogJ3RvLWJyJyxcclxuICAgICAgZm9udEZhbWlseTogJ3N5c3RlbS11aScsXHJcbiAgICAgIGZvbnRTaXplOiAnYmFzZScsXHJcbiAgICAgIGZvbnRXZWlnaHQ6ICdtZWRpdW0nLFxyXG4gICAgICB0ZXh0Q29sb3I6ICcjZmZmZmZmJyxcclxuICAgICAgYm9yZGVyUmFkaXVzOiAneGwnLFxyXG4gICAgICBzaGFkb3c6ICdsZycsXHJcbiAgICAgIGJvcmRlcldpZHRoOiAwXHJcbiAgICB9LFxyXG4gICAgaXNGbGlwcGVkOiBmYWxzZSxcclxuICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoJzIwMjQtMDEtMTYnKSxcclxuICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoJzIwMjQtMDEtMTYnKVxyXG4gIH1cclxuXVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZUNhcmRzKCkge1xyXG4gIGNvbnN0IFtjYXJkcywgc2V0Q2FyZHNdID0gdXNlU3RhdGU8Q2FyZFtdPihtb2NrQ2FyZHMpXHJcbiAgY29uc3QgW2ZpbHRlciwgc2V0RmlsdGVyXSA9IHVzZVN0YXRlPENhcmRGaWx0ZXI+KHtcclxuICAgIHNlYXJjaFRlcm06ICcnLFxyXG4gICAgdGFnczogW11cclxuICB9KVxyXG4gIGNvbnN0IFt2aWV3U2V0dGluZ3MsIHNldFZpZXdTZXR0aW5nc10gPSB1c2VTdGF0ZTxWaWV3U2V0dGluZ3M+KHtcclxuICAgIGxheW91dDogJ2dyaWQnLFxyXG4gICAgY2FyZFNpemU6ICdtZWRpdW0nLFxyXG4gICAgc2hvd1RhZ3M6IHRydWUsXHJcbiAgICBzaG93RGF0ZXM6IGZhbHNlLFxyXG4gICAgc29ydEJ5OiAndXBkYXRlZCcsXHJcbiAgICBzb3J0T3JkZXI6ICdkZXNjJ1xyXG4gIH0pXHJcbiAgY29uc3QgW3NlbGVjdGVkQ2FyZElkcywgc2V0U2VsZWN0ZWRDYXJkSWRzXSA9IHVzZVN0YXRlPHN0cmluZ1tdPihbXSlcclxuXHJcbiAgLy8gRmlsdGVyIGFuZCBzb3J0IGNhcmRzXHJcbiAgY29uc3QgZmlsdGVyZWRDYXJkcyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcclxuICAgIGxldCBmaWx0ZXJlZCA9IGNhcmRzLmZpbHRlcihjYXJkID0+IHtcclxuICAgICAgLy8gU2VhcmNoIHRlcm0gZmlsdGVyXHJcbiAgICAgIGlmIChmaWx0ZXIuc2VhcmNoVGVybSkge1xyXG4gICAgICAgIGNvbnN0IHNlYXJjaExvd2VyID0gZmlsdGVyLnNlYXJjaFRlcm0udG9Mb3dlckNhc2UoKVxyXG4gICAgICAgIGNvbnN0IG1hdGNoZXNUaXRsZSA9IGNhcmQuZnJvbnRDb250ZW50LnRpdGxlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoc2VhcmNoTG93ZXIpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmQuYmFja0NvbnRlbnQudGl0bGUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhzZWFyY2hMb3dlcilcclxuICAgICAgICBjb25zdCBtYXRjaGVzVGV4dCA9IGNhcmQuZnJvbnRDb250ZW50LnRleHQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhzZWFyY2hMb3dlcikgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkLmJhY2tDb250ZW50LnRleHQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhzZWFyY2hMb3dlcilcclxuICAgICAgICBjb25zdCBtYXRjaGVzVGFncyA9IFsuLi5jYXJkLmZyb250Q29udGVudC50YWdzLCAuLi5jYXJkLmJhY2tDb250ZW50LnRhZ3NdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLnNvbWUodGFnID0+IHRhZy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHNlYXJjaExvd2VyKSlcclxuICAgICAgICBcclxuICAgICAgICBpZiAoIW1hdGNoZXNUaXRsZSAmJiAhbWF0Y2hlc1RleHQgJiYgIW1hdGNoZXNUYWdzKSByZXR1cm4gZmFsc2VcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gVGFncyBmaWx0ZXJcclxuICAgICAgaWYgKGZpbHRlci50YWdzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBjb25zdCBjYXJkVGFncyA9IFsuLi5jYXJkLmZyb250Q29udGVudC50YWdzLCAuLi5jYXJkLmJhY2tDb250ZW50LnRhZ3NdXHJcbiAgICAgICAgaWYgKCFmaWx0ZXIudGFncy5zb21lKHRhZyA9PiBjYXJkVGFncy5pbmNsdWRlcyh0YWcpKSkgcmV0dXJuIGZhbHNlXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEZvbGRlciBmaWx0ZXJcclxuICAgICAgaWYgKGZpbHRlci5mb2xkZXJJZCAmJiBjYXJkLmZvbGRlcklkICE9PSBmaWx0ZXIuZm9sZGVySWQpIHJldHVybiBmYWxzZVxyXG5cclxuICAgICAgLy8gRGF0ZSByYW5nZSBmaWx0ZXJcclxuICAgICAgaWYgKGZpbHRlci5kYXRlUmFuZ2UpIHtcclxuICAgICAgICBjb25zdCBjYXJkRGF0ZSA9IG5ldyBEYXRlKGNhcmQudXBkYXRlZEF0KVxyXG4gICAgICAgIGlmIChjYXJkRGF0ZSA8IGZpbHRlci5kYXRlUmFuZ2Uuc3RhcnQgfHwgY2FyZERhdGUgPiBmaWx0ZXIuZGF0ZVJhbmdlLmVuZCkgcmV0dXJuIGZhbHNlXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFN0eWxlIHR5cGUgZmlsdGVyXHJcbiAgICAgIGlmIChmaWx0ZXIuc3R5bGVUeXBlICYmIGNhcmQuc3R5bGUudHlwZSAhPT0gZmlsdGVyLnN0eWxlVHlwZSkgcmV0dXJuIGZhbHNlXHJcblxyXG4gICAgICAvLyBIYXMgaW1hZ2VzIGZpbHRlclxyXG4gICAgICBpZiAoZmlsdGVyLmhhc0ltYWdlcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgY29uc3QgaGFzSW1hZ2VzID0gY2FyZC5mcm9udENvbnRlbnQuaW1hZ2VzLmxlbmd0aCA+IDAgfHwgY2FyZC5iYWNrQ29udGVudC5pbWFnZXMubGVuZ3RoID4gMFxyXG4gICAgICAgIGlmIChoYXNJbWFnZXMgIT09IGZpbHRlci5oYXNJbWFnZXMpIHJldHVybiBmYWxzZVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgfSlcclxuXHJcbiAgICAvLyBTb3J0IGNhcmRzXHJcbiAgICBmaWx0ZXJlZC5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgIGxldCBjb21wYXJpc29uID0gMFxyXG4gICAgICBcclxuICAgICAgc3dpdGNoICh2aWV3U2V0dGluZ3Muc29ydEJ5KSB7XHJcbiAgICAgICAgY2FzZSAnY3JlYXRlZCc6XHJcbiAgICAgICAgICBjb21wYXJpc29uID0gbmV3IERhdGUoYS5jcmVhdGVkQXQpLmdldFRpbWUoKSAtIG5ldyBEYXRlKGIuY3JlYXRlZEF0KS5nZXRUaW1lKClcclxuICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgY2FzZSAndXBkYXRlZCc6XHJcbiAgICAgICAgICBjb21wYXJpc29uID0gbmV3IERhdGUoYS51cGRhdGVkQXQpLmdldFRpbWUoKSAtIG5ldyBEYXRlKGIudXBkYXRlZEF0KS5nZXRUaW1lKClcclxuICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgY2FzZSAndGl0bGUnOlxyXG4gICAgICAgICAgY29tcGFyaXNvbiA9IGEuZnJvbnRDb250ZW50LnRpdGxlLmxvY2FsZUNvbXBhcmUoYi5mcm9udENvbnRlbnQudGl0bGUpXHJcbiAgICAgICAgICBicmVha1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICBjb21wYXJpc29uID0gMFxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdmlld1NldHRpbmdzLnNvcnRPcmRlciA9PT0gJ2Rlc2MnID8gLWNvbXBhcmlzb24gOiBjb21wYXJpc29uXHJcbiAgICB9KVxyXG5cclxuICAgIHJldHVybiBmaWx0ZXJlZFxyXG4gIH0sIFtjYXJkcywgZmlsdGVyLCB2aWV3U2V0dGluZ3NdKVxyXG5cclxuICAvLyBDYXJkIGFjdGlvbnNcclxuICBjb25zdCBkaXNwYXRjaCA9IHVzZUNhbGxiYWNrKChhY3Rpb246IENhcmRBY3Rpb24pID0+IHtcclxuICAgIHNldENhcmRzKHByZXZDYXJkcyA9PiB7XHJcbiAgICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuICAgICAgICBjYXNlICdDUkVBVEVfQ0FSRCc6XHJcbiAgICAgICAgICBjb25zdCBuZXdDYXJkOiBDYXJkID0ge1xyXG4gICAgICAgICAgICAuLi5hY3Rpb24ucGF5bG9hZCxcclxuICAgICAgICAgICAgaWQ6IERhdGUubm93KCkudG9TdHJpbmcoKSxcclxuICAgICAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxyXG4gICAgICAgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKClcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBbLi4ucHJldkNhcmRzLCBuZXdDYXJkXVxyXG5cclxuICAgICAgICBjYXNlICdVUERBVEVfQ0FSRCc6XHJcbiAgICAgICAgICByZXR1cm4gcHJldkNhcmRzLm1hcChjYXJkID0+XHJcbiAgICAgICAgICAgIGNhcmQuaWQgPT09IGFjdGlvbi5wYXlsb2FkLmlkXHJcbiAgICAgICAgICAgICAgPyB7IC4uLmNhcmQsIC4uLmFjdGlvbi5wYXlsb2FkLnVwZGF0ZXMsIHVwZGF0ZWRBdDogbmV3IERhdGUoKSB9XHJcbiAgICAgICAgICAgICAgOiBjYXJkXHJcbiAgICAgICAgICApXHJcblxyXG4gICAgICAgIGNhc2UgJ0RFTEVURV9DQVJEJzpcclxuICAgICAgICAgIHJldHVybiBwcmV2Q2FyZHMuZmlsdGVyKGNhcmQgPT4gY2FyZC5pZCAhPT0gYWN0aW9uLnBheWxvYWQpXHJcblxyXG4gICAgICAgIGNhc2UgJ0ZMSVBfQ0FSRCc6XHJcbiAgICAgICAgICByZXR1cm4gcHJldkNhcmRzLm1hcChjYXJkID0+XHJcbiAgICAgICAgICAgIGNhcmQuaWQgPT09IGFjdGlvbi5wYXlsb2FkXHJcbiAgICAgICAgICAgICAgPyB7IC4uLmNhcmQsIGlzRmxpcHBlZDogIWNhcmQuaXNGbGlwcGVkLCB1cGRhdGVkQXQ6IG5ldyBEYXRlKCkgfVxyXG4gICAgICAgICAgICAgIDogY2FyZFxyXG4gICAgICAgICAgKVxyXG5cclxuICAgICAgICBjYXNlICdTRUxFQ1RfQ0FSRCc6XHJcbiAgICAgICAgICBzZXRTZWxlY3RlZENhcmRJZHMocHJldiA9PiBcclxuICAgICAgICAgICAgcHJldi5pbmNsdWRlcyhhY3Rpb24ucGF5bG9hZCkgXHJcbiAgICAgICAgICAgICAgPyBwcmV2LmZpbHRlcihpZCA9PiBpZCAhPT0gYWN0aW9uLnBheWxvYWQpXHJcbiAgICAgICAgICAgICAgOiBbLi4ucHJldiwgYWN0aW9uLnBheWxvYWRdXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgICByZXR1cm4gcHJldkNhcmRzXHJcblxyXG4gICAgICAgIGNhc2UgJ0RFU0VMRUNUX0FMTCc6XHJcbiAgICAgICAgICBzZXRTZWxlY3RlZENhcmRJZHMoW10pXHJcbiAgICAgICAgICByZXR1cm4gcHJldkNhcmRzXHJcblxyXG4gICAgICAgIGNhc2UgJ0RVUExJQ0FURV9DQVJEJzpcclxuICAgICAgICAgIGNvbnN0IGNhcmRUb0R1cGxpY2F0ZSA9IHByZXZDYXJkcy5maW5kKGNhcmQgPT4gY2FyZC5pZCA9PT0gYWN0aW9uLnBheWxvYWQpXHJcbiAgICAgICAgICBpZiAoIWNhcmRUb0R1cGxpY2F0ZSkgcmV0dXJuIHByZXZDYXJkc1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBjb25zdCBkdXBsaWNhdGVkQ2FyZDogQ2FyZCA9IHtcclxuICAgICAgICAgICAgLi4uY2FyZFRvRHVwbGljYXRlLFxyXG4gICAgICAgICAgICBpZDogRGF0ZS5ub3coKS50b1N0cmluZygpLFxyXG4gICAgICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXHJcbiAgICAgICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIFsuLi5wcmV2Q2FyZHMsIGR1cGxpY2F0ZWRDYXJkXVxyXG5cclxuICAgICAgICBjYXNlICdNT1ZFX1RPX0ZPTERFUic6XHJcbiAgICAgICAgICByZXR1cm4gcHJldkNhcmRzLm1hcChjYXJkID0+XHJcbiAgICAgICAgICAgIGNhcmQuaWQgPT09IGFjdGlvbi5wYXlsb2FkLmNhcmRJZFxyXG4gICAgICAgICAgICAgID8geyAuLi5jYXJkLCBmb2xkZXJJZDogYWN0aW9uLnBheWxvYWQuZm9sZGVySWQsIHVwZGF0ZWRBdDogbmV3IERhdGUoKSB9XHJcbiAgICAgICAgICAgICAgOiBjYXJkXHJcbiAgICAgICAgICApXHJcblxyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICByZXR1cm4gcHJldkNhcmRzXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfSwgW10pXHJcblxyXG4gIC8vIFV0aWxpdHkgZnVuY3Rpb25zXHJcbiAgY29uc3QgZ2V0Q2FyZEJ5SWQgPSB1c2VDYWxsYmFjaygoaWQ6IHN0cmluZykgPT4ge1xyXG4gICAgcmV0dXJuIGNhcmRzLmZpbmQoY2FyZCA9PiBjYXJkLmlkID09PSBpZClcclxuICB9LCBbY2FyZHNdKVxyXG5cclxuICBjb25zdCBnZXRTZWxlY3RlZENhcmRzID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgcmV0dXJuIGNhcmRzLmZpbHRlcihjYXJkID0+IHNlbGVjdGVkQ2FyZElkcy5pbmNsdWRlcyhjYXJkLmlkKSlcclxuICB9LCBbY2FyZHMsIHNlbGVjdGVkQ2FyZElkc10pXHJcblxyXG4gIGNvbnN0IGdldEFsbFRhZ3MgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICBjb25zdCB0YWdTZXQgPSBuZXcgU2V0PHN0cmluZz4oKVxyXG4gICAgY2FyZHMuZm9yRWFjaChjYXJkID0+IHtcclxuICAgICAgY2FyZC5mcm9udENvbnRlbnQudGFncy5mb3JFYWNoKHRhZyA9PiB0YWdTZXQuYWRkKHRhZykpXHJcbiAgICAgIGNhcmQuYmFja0NvbnRlbnQudGFncy5mb3JFYWNoKHRhZyA9PiB0YWdTZXQuYWRkKHRhZykpXHJcbiAgICB9KVxyXG4gICAgcmV0dXJuIEFycmF5LmZyb20odGFnU2V0KS5zb3J0KClcclxuICB9LCBbY2FyZHNdKVxyXG5cclxuICAvLyBVcGRhdGUgdGFncyBhY3Jvc3MgYWxsIGNhcmRzIChmb3IgcmVuYW1lL2RlbGV0ZSBvcGVyYXRpb25zKVxyXG4gIGNvbnN0IHVwZGF0ZVRhZ3NJbkFsbENhcmRzID0gdXNlQ2FsbGJhY2soKG9sZFRhZ05hbWU6IHN0cmluZywgbmV3VGFnTmFtZT86IHN0cmluZykgPT4ge1xyXG4gICAgc2V0Q2FyZHMocHJldkNhcmRzID0+IHtcclxuICAgICAgcmV0dXJuIHByZXZDYXJkcy5tYXAoY2FyZCA9PiB7XHJcbiAgICAgICAgY29uc3QgdXBkYXRlVGFncyA9ICh0YWdzOiBzdHJpbmdbXSkgPT4ge1xyXG4gICAgICAgICAgaWYgKG5ld1RhZ05hbWUpIHtcclxuICAgICAgICAgICAgLy8gUmVuYW1lIHRhZ1xyXG4gICAgICAgICAgICByZXR1cm4gdGFncy5tYXAodGFnID0+IHRhZyA9PT0gb2xkVGFnTmFtZSA/IG5ld1RhZ05hbWUgOiB0YWcpXHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBEZWxldGUgdGFnXHJcbiAgICAgICAgICAgIHJldHVybiB0YWdzLmZpbHRlcih0YWcgPT4gdGFnICE9PSBvbGRUYWdOYW1lKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZnJvbnRUYWdzID0gdXBkYXRlVGFncyhjYXJkLmZyb250Q29udGVudC50YWdzKVxyXG4gICAgICAgIGNvbnN0IGJhY2tUYWdzID0gdXBkYXRlVGFncyhjYXJkLmJhY2tDb250ZW50LnRhZ3MpXHJcblxyXG4gICAgICAgIC8vIE9ubHkgdXBkYXRlIGlmIHRhZ3MgYWN0dWFsbHkgY2hhbmdlZFxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIEpTT04uc3RyaW5naWZ5KGZyb250VGFncykgIT09IEpTT04uc3RyaW5naWZ5KGNhcmQuZnJvbnRDb250ZW50LnRhZ3MpIHx8XHJcbiAgICAgICAgICBKU09OLnN0cmluZ2lmeShiYWNrVGFncykgIT09IEpTT04uc3RyaW5naWZ5KGNhcmQuYmFja0NvbnRlbnQudGFncylcclxuICAgICAgICApIHtcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIC4uLmNhcmQsXHJcbiAgICAgICAgICAgIGZyb250Q29udGVudDoge1xyXG4gICAgICAgICAgICAgIC4uLmNhcmQuZnJvbnRDb250ZW50LFxyXG4gICAgICAgICAgICAgIHRhZ3M6IGZyb250VGFncyxcclxuICAgICAgICAgICAgICBsYXN0TW9kaWZpZWQ6IG5ldyBEYXRlKClcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYmFja0NvbnRlbnQ6IHtcclxuICAgICAgICAgICAgICAuLi5jYXJkLmJhY2tDb250ZW50LFxyXG4gICAgICAgICAgICAgIHRhZ3M6IGJhY2tUYWdzLFxyXG4gICAgICAgICAgICAgIGxhc3RNb2RpZmllZDogbmV3IERhdGUoKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKClcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjYXJkXHJcbiAgICAgIH0pXHJcbiAgICB9KVxyXG4gIH0sIFtdKVxyXG5cclxuICAvLyBHZXQgY2FyZHMgdGhhdCB1c2UgYSBzcGVjaWZpYyB0YWdcclxuICBjb25zdCBnZXRDYXJkc1dpdGhUYWcgPSB1c2VDYWxsYmFjaygodGFnTmFtZTogc3RyaW5nKSA9PiB7XHJcbiAgICByZXR1cm4gY2FyZHMuZmlsdGVyKGNhcmQgPT4gXHJcbiAgICAgIGNhcmQuZnJvbnRDb250ZW50LnRhZ3MuaW5jbHVkZXModGFnTmFtZSkgfHwgXHJcbiAgICAgIGNhcmQuYmFja0NvbnRlbnQudGFncy5pbmNsdWRlcyh0YWdOYW1lKVxyXG4gICAgKVxyXG4gIH0sIFtjYXJkc10pXHJcblxyXG4gIC8vIEF1dG8tc2F2ZSB0byBsb2NhbFN0b3JhZ2VcclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgY29uc3Qgc2F2ZVRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdjYXJkYWxsLWNhcmRzJywgSlNPTi5zdHJpbmdpZnkoY2FyZHMpKVxyXG4gICAgfSwgMTAwMClcclxuXHJcbiAgICByZXR1cm4gKCkgPT4gY2xlYXJUaW1lb3V0KHNhdmVUaW1lcilcclxuICB9LCBbY2FyZHNdKVxyXG5cclxuICAvLyBMb2FkIGZyb20gbG9jYWxTdG9yYWdlIG9uIG1vdW50XHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGNvbnN0IHNhdmVkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2NhcmRhbGwtY2FyZHMnKVxyXG4gICAgaWYgKHNhdmVkKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcGFyc2VkQ2FyZHMgPSBKU09OLnBhcnNlKHNhdmVkKVxyXG4gICAgICAgIHNldENhcmRzKHBhcnNlZENhcmRzKVxyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBsb2FkIHNhdmVkIGNhcmRzOicsIGVycm9yKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSwgW10pXHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBjYXJkczogZmlsdGVyZWRDYXJkcygpLFxyXG4gICAgYWxsQ2FyZHM6IGNhcmRzLFxyXG4gICAgZmlsdGVyLFxyXG4gICAgc2V0RmlsdGVyLFxyXG4gICAgdmlld1NldHRpbmdzLFxyXG4gICAgc2V0Vmlld1NldHRpbmdzLFxyXG4gICAgc2VsZWN0ZWRDYXJkSWRzLFxyXG4gICAgZGlzcGF0Y2gsXHJcbiAgICBnZXRDYXJkQnlJZCxcclxuICAgIGdldFNlbGVjdGVkQ2FyZHMsXHJcbiAgICBnZXRBbGxUYWdzLFxyXG4gICAgdXBkYXRlVGFnc0luQWxsQ2FyZHMsXHJcbiAgICBnZXRDYXJkc1dpdGhUYWdcclxuICB9XHJcbn0iXSwidmVyc2lvbiI6M30=
{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\utils\\query-optimizer.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\utils\\query-optimizer.ts"],"sourcesContent":["/**\r\n * 高性能查询优化器\r\n * 实现智能查询优化和索引管理\r\n */\r\n\r\nimport { db, type DbCard, type DbFolder, type DbTag } from '../services/database-unified'\r\nimport Dexie, { Table } from 'dexie'\r\n\r\n// ============================================================================\r\n// 类型定义\r\n// ============================================================================\r\n\r\ninterface QueryPlan {\r\n  estimatedCost: number\r\n  indexes: string[]\r\n  filterOrder: string[]\r\n  limitStrategy: 'offset' | 'cursor'\r\n  cacheKey: string\r\n  cacheTTL: number\r\n}\r\n\r\ninterface QueryMetrics {\r\n  executionTime: number\r\n  rowsReturned: number\r\n  indexesUsed: string[]\r\n  cacheHit: boolean\r\n}\r\n\r\ninterface IndexStats {\r\n  name: string\r\n  hits: number\r\n  misses: number\r\n  avgSelectivity: number\r\n  lastOptimized: Date\r\n}\r\n\r\n// ============================================================================\r\n// 智能查询优化器\r\n// ============================================================================\r\n\r\nexport class QueryOptimizer {\r\n  private indexStats = new Map<string, IndexStats>()\r\n  private queryMetrics = new Map<string, QueryMetrics[]>()\r\n  private readonly ANALYSIS_THRESHOLD = 100 // 分析阈值\r\n\r\n  /**\r\n   * 优化卡片查询\r\n   */\r\n  async optimizeCardsQuery(query: {\r\n    userId?: string\r\n    folderId?: string\r\n    limit?: number\r\n    offset?: number\r\n    sortBy?: string\r\n    sortOrder?: 'asc' | 'desc'\r\n    search?: string\r\n    tags?: string[]\r\n  }): Promise<{\r\n    query: Dexie.Query<DbCard, any>\r\n    plan: QueryPlan\r\n    estimatedRows: number\r\n  }> {\r\n    const startTime = performance.now()\r\n    \r\n    // 1. 分析查询模式\r\n    const analysis = this.analyzeQueryPattern(query)\r\n    \r\n    // 2. 生成查询计划\r\n    const plan = this.generateQueryPlan(analysis)\r\n    \r\n    // 3. 构建优化查询\r\n    const optimizedQuery = this.buildOptimizedQuery(plan, query)\r\n    \r\n    // 4. 估算结果数量\r\n    const estimatedRows = await this.estimateResultCount(plan, query)\r\n    \r\n    // 5. 记录分析数据\r\n    this.recordQueryAnalysis(analysis, plan, performance.now() - startTime)\r\n    \r\n    return {\r\n      query: optimizedQuery,\r\n      plan,\r\n      estimatedRows\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 分析查询模式\r\n   */\r\n  private analyzeQueryPattern(query: any): any {\r\n    const analysis = {\r\n      hasUserId: !!query.userId,\r\n      hasFolderId: !!query.folderId,\r\n      hasSearch: !!query.search,\r\n      hasTags: !!query.tags?.length,\r\n      hasSort: !!query.sortBy,\r\n      hasPagination: !!(query.limit || query.offset),\r\n      selectivity: this.calculateSelectivity(query),\r\n      complexity: this.calculateComplexity(query)\r\n    }\r\n    \r\n    return analysis\r\n  }\r\n\r\n  /**\r\n   * 计算查询选择性\r\n   */\r\n  private calculateSelectivity(query: any): number {\r\n    let selectivity = 1.0\r\n    \r\n    // 用户ID过滤 - 高选择性\r\n    if (query.userId) selectivity *= 0.1\r\n    \r\n    // 文件夹ID过滤 - 中等选择性\r\n    if (query.folderId) selectivity *= 0.3\r\n    \r\n    // 搜索过滤 - 低选择性\r\n    if (query.search) selectivity *= 0.7\r\n    \r\n    // 标签过滤 - 中等选择性\r\n    if (query.tags?.length) selectivity *= 0.5\r\n    \r\n    return Math.max(selectivity, 0.01) // 最小选择性\r\n  }\r\n\r\n  /**\r\n   * 计算查询复杂度\r\n   */\r\n  private calculateComplexity(query: any): number {\r\n    let complexity = 0\r\n    \r\n    if (query.userId) complexity += 1\r\n    if (query.folderId) complexity += 1\r\n    if (query.search) complexity += 3 // 搜索较复杂\r\n    if (query.tags?.length) complexity += query.tags.length * 0.5\r\n    if (query.sortBy) complexity += 1\r\n    if (query.limit || query.offset) complexity += 0.5\r\n    \r\n    return complexity\r\n  }\r\n\r\n  /**\r\n   * 生成查询计划\r\n   */\r\n  private generateQueryPlan(analysis: any): QueryPlan {\r\n    const plan: QueryPlan = {\r\n      estimatedCost: 0,\r\n      indexes: [],\r\n      filterOrder: [],\r\n      limitStrategy: 'offset',\r\n      cacheKey: '',\r\n      cacheTTL: 30000\r\n    }\r\n\r\n    // 选择最佳索引\r\n    plan.indexes = this.selectBestIndexes(analysis)\r\n    \r\n    // 确定过滤顺序\r\n    plan.filterOrder = this.determineFilterOrder(analysis)\r\n    \r\n    // 选择分页策略\r\n    plan.limitStrategy = this.selectPaginationStrategy(analysis)\r\n    \r\n    // 计算预估成本\r\n    plan.estimatedCost = this.calculateEstimatedCost(plan, analysis)\r\n    \r\n    // 生成缓存键\r\n    plan.cacheKey = this.generateCacheKey(analysis)\r\n    \r\n    // 动态调整TTL\r\n    plan.cacheTTL = this.calculateCacheTTL(analysis)\r\n    \r\n    return plan\r\n  }\r\n\r\n  /**\r\n   * 选择最佳索引\r\n   */\r\n  private selectBestIndexes(analysis: any): string[] {\r\n    const indexes: string[] = []\r\n    \r\n    // 基于查询模式选择索引\r\n    if (analysis.hasUserId && analysis.hasFolderId) {\r\n      indexes.push('[userId+folderId+updatedAt]')\r\n    } else if (analysis.hasUserId) {\r\n      indexes.push('[userId+createdAt]')\r\n    }\r\n    \r\n    // 搜索使用专用索引\r\n    if (analysis.hasSearch) {\r\n      indexes.push('[searchVector+userId]')\r\n    }\r\n    \r\n    // 标签查询\r\n    if (analysis.hasTags) {\r\n      indexes.push('userId') // 标签查询需要用户ID过滤\r\n    }\r\n    \r\n    // 排序索引\r\n    if (analysis.hasSort) {\r\n      indexes.push('updatedAt')\r\n    }\r\n    \r\n    return indexes\r\n  }\r\n\r\n  /**\r\n   * 确定过滤顺序\r\n   */\r\n  private determineFilterOrder(analysis: any): string[] {\r\n    const order: string[] = []\r\n    \r\n    // 按选择性排序\r\n    if (analysis.hasUserId) order.push('userId')\r\n    if (analysis.hasFolderId) order.push('folderId')\r\n    if (analysis.hasTags) order.push('tags')\r\n    if (analysis.hasSearch) order.push('search')\r\n    \r\n    return order\r\n  }\r\n\r\n  /**\r\n   * 选择分页策略\r\n   */\r\n  private selectPaginationStrategy(analysis: any): 'offset' | 'cursor' {\r\n    // 大数据量使用游标分页\r\n    if (analysis.selectivity < 0.1) {\r\n      return 'cursor'\r\n    }\r\n    return 'offset'\r\n  }\r\n\r\n  /**\r\n   * 计算预估成本\r\n   */\r\n  private calculateEstimatedCost(plan: QueryPlan, analysis: any): number {\r\n    let cost = 0\r\n    \r\n    // 基础成本\r\n    cost += analysis.complexity * 10\r\n    \r\n    // 索引使用成本\r\n    plan.indexes.forEach(index => {\r\n      const stats = this.indexStats.get(index)\r\n      if (stats) {\r\n        cost += (1 - stats.avgSelectivity) * 50\r\n      } else {\r\n        cost += 25 // 新索引的估算成本\r\n      }\r\n    })\r\n    \r\n    // 搜索成本\r\n    if (analysis.hasSearch) {\r\n      cost += 100\r\n    }\r\n    \r\n    return cost\r\n  }\r\n\r\n  /**\r\n   * 生成缓存键\r\n   */\r\n  private generateCacheKey(analysis: any): string {\r\n    const keyParts = [\r\n      analysis.hasUserId ? 'user' : 'no-user',\r\n      analysis.hasFolderId ? 'folder' : 'no-folder',\r\n      analysis.hasSearch ? 'search' : 'no-search',\r\n      analysis.hasTags ? 'tags' : 'no-tags',\r\n      analysis.hasSort ? 'sort' : 'no-sort'\r\n    ]\r\n    \r\n    return keyParts.join('-')\r\n  }\r\n\r\n  /**\r\n   * 计算缓存TTL\r\n   */\r\n  private calculateCacheTTL(analysis: any): number {\r\n    let ttl = 30000 // 默认30秒\r\n    \r\n    // 高选择性查询缓存更久\r\n    if (analysis.selectivity < 0.1) {\r\n      ttl *= 2\r\n    }\r\n    \r\n    // 简单查询缓存更久\r\n    if (analysis.complexity < 3) {\r\n      ttl *= 1.5\r\n    }\r\n    \r\n    // 搜索查询缓存较短\r\n    if (analysis.hasSearch) {\r\n      ttl *= 0.5\r\n    }\r\n    \r\n    return Math.min(ttl, 300000) // 最大5分钟\r\n  }\r\n\r\n  /**\r\n   * 构建优化查询\r\n   */\r\n  private buildOptimizedQuery(plan: QueryPlan, originalQuery: any): Dexie.Query<DbCard, any> {\r\n    let query = db.cards as Dexie.Query<DbCard, any>\r\n    \r\n    // 应用过滤条件（按优化顺序）\r\n    if (originalQuery.userId) {\r\n      query = query.where('userId').equals(originalQuery.userId)\r\n    }\r\n    \r\n    if (originalQuery.folderId) {\r\n      query = query.and(card => card.folderId === originalQuery.folderId)\r\n    }\r\n    \r\n    // 应用搜索过滤\r\n    if (originalQuery.search) {\r\n      query = query.filter(card => {\r\n        const searchTerm = originalQuery.search.toLowerCase()\r\n        return card.searchVector?.includes(searchTerm) || false\r\n      })\r\n    }\r\n    \r\n    // 应用标签过滤\r\n    if (originalQuery.tags?.length) {\r\n      query = query.filter(card => {\r\n        const cardTags = [...card.frontContent.tags, ...card.backContent.tags]\r\n        return originalQuery.tags.some((tag: string) => cardTags.includes(tag))\r\n      })\r\n    }\r\n    \r\n    // 应用排序\r\n    if (originalQuery.sortBy) {\r\n      const sortField = this.getSortField(originalQuery.sortBy)\r\n      if (sortField) {\r\n        query = query.sortBy(sortField)\r\n        if (originalQuery.sortOrder === 'desc') {\r\n          query = query.reverse()\r\n        }\r\n      }\r\n    } else {\r\n      // 默认按更新时间排序\r\n      query = query.orderBy('updatedAt').reverse()\r\n    }\r\n    \r\n    // 应用分页\r\n    if (originalQuery.limit) {\r\n      query = query.limit(originalQuery.limit)\r\n    }\r\n    \r\n    if (originalQuery.offset) {\r\n      query = query.offset(originalQuery.offset)\r\n    }\r\n    \r\n    return query\r\n  }\r\n\r\n  /**\r\n   * 获取排序字段\r\n   */\r\n  private getSortField(sortBy: string): string | null {\r\n    const fieldMap: Record<string, string> = {\r\n      'title': 'frontContent.title',\r\n      'created': 'createdAt',\r\n      'updated': 'updatedAt',\r\n      'sync': 'syncVersion'\r\n    }\r\n    \r\n    return fieldMap[sortBy] || null\r\n  }\r\n\r\n  /**\r\n   * 估算结果数量\r\n   */\r\n  private async estimateResultCount(plan: QueryPlan, query: any): Promise<number> {\r\n    try {\r\n      // 使用索引统计估算\r\n      let estimatedCount = await db.cards.count()\r\n      \r\n      // 应用选择性估算\r\n      estimatedCount *= this.calculateSelectivity(query)\r\n      \r\n      return Math.round(estimatedCount)\r\n    } catch (error) {\r\n      // 保守估算\r\n      return query.limit || 50\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 记录查询分析\r\n   */\r\n  private recordQueryAnalysis(analysis: any, plan: QueryPlan, optimizationTime: number): void {\r\n    // 记录索引使用统计\r\n    plan.indexes.forEach(index => {\r\n      let stats = this.indexStats.get(index)\r\n      if (!stats) {\r\n        stats = {\r\n          name: index,\r\n          hits: 0,\r\n          misses: 0,\r\n          avgSelectivity: 0.5,\r\n          lastOptimized: new Date()\r\n        }\r\n        this.indexStats.set(index, stats)\r\n      }\r\n      stats.hits++\r\n    })\r\n    \r\n    // 记录查询模式用于学习\r\n    const patternKey = this.generateCacheKey(analysis)\r\n    let metrics = this.queryMetrics.get(patternKey) || []\r\n    metrics.push({\r\n      executionTime: optimizationTime,\r\n      rowsReturned: 0,\r\n      indexesUsed: plan.indexes,\r\n      cacheHit: false\r\n    })\r\n    \r\n    // 保持最近100次查询\r\n    if (metrics.length > 100) {\r\n      metrics = metrics.slice(-100)\r\n    }\r\n    \r\n    this.queryMetrics.set(patternKey, metrics)\r\n  }\r\n\r\n  /**\r\n   * 获取索引统计信息\r\n   */\r\n  getIndexStats(): IndexStats[] {\r\n    return Array.from(this.indexStats.values())\r\n  }\r\n\r\n  /**\r\n   * 获取查询性能报告\r\n   */\r\n  getPerformanceReport(): {\r\n    totalQueries: number\r\n    avgOptimizationTime: number\r\n    mostUsedIndexes: string[]\r\n    recommendations: string[]\r\n  } {\r\n    const totalQueries = Array.from(this.queryMetrics.values())\r\n      .reduce((sum, metrics) => sum + metrics.length, 0)\r\n    \r\n    const avgOptimizationTime = Array.from(this.queryMetrics.values())\r\n      .flat()\r\n      .reduce((sum, metric) => sum + metric.executionTime, 0) / totalQueries\r\n    \r\n    const indexUsage = Array.from(this.indexStats.entries())\r\n      .sort((a, b) => b[1].hits - a[1].hits)\r\n    \r\n    const mostUsedIndexes = indexUsage.slice(0, 5).map(([name]) => name)\r\n    \r\n    const recommendations = this.generateRecommendations()\r\n    \r\n    return {\r\n      totalQueries,\r\n      avgOptimizationTime,\r\n      mostUsedIndexes,\r\n      recommendations\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 生成优化建议\r\n   */\r\n  private generateRecommendations(): string[] {\r\n    const recommendations: string[] = []\r\n    \r\n    // 分析索引使用情况\r\n    const underusedIndexes = Array.from(this.indexStats.entries())\r\n      .filter(([_, stats]) => stats.hits < 10)\r\n      .map(([name]) => name)\r\n    \r\n    if (underusedIndexes.length > 0) {\r\n      recommendations.push(`考虑删除低使用率索引: ${underusedIndexes.join(', ')}`)\r\n    }\r\n    \r\n    // 分析查询模式\r\n    const slowQueries = Array.from(this.queryMetrics.entries())\r\n      .filter(([_, metrics]) => {\r\n        const avgTime = metrics.reduce((sum, m) => sum + m.executionTime, 0) / metrics.length\r\n        return avgTime > 50\r\n      })\r\n    \r\n    if (slowQueries.length > 0) {\r\n      recommendations.push(`发现 ${slowQueries.length} 个慢查询模式，建议优化`)\r\n    }\r\n    \r\n    return recommendations\r\n  }\r\n\r\n  /**\r\n   * 清理统计数据\r\n   */\r\n  cleanup(): void {\r\n    // 清理旧的统计数据\r\n    const oneWeekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)\r\n    \r\n    for (const [key, metrics] of this.queryMetrics.entries()) {\r\n      const recentMetrics = metrics.filter(m => \r\n        m.executionTime > oneWeekAgo.getTime()\r\n      )\r\n      \r\n      if (recentMetrics.length === 0) {\r\n        this.queryMetrics.delete(key)\r\n      } else {\r\n        this.queryMetrics.set(key, recentMetrics)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// 导出单例实例\r\n// ============================================================================\r\n\r\nexport const queryOptimizer = new QueryOptimizer()\r\n\r\n// ============================================================================\r\n// 定期清理统计\r\n// ============================================================================\r\n\r\nsetInterval(() => {\r\n  queryOptimizer.cleanup()\r\n}, 24 * 60 * 60 * 1000) // 每天清理一次"],"version":3}
{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\tests\\offline\\network-recovery.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\tests\\offline\\network-recovery.test.ts"],"sourcesContent":["// 网络恢复测试\r\n// 测试 Week 2 Day 8-9 的网络恢复自动同步功能\r\n\r\nimport { jest } from '@jest/globals'\r\n\r\n// ============================================================================\r\n// 网络恢复测试模拟工具\r\n// ============================================================================\r\n\r\nclass NetworkRecoveryTestUtils {\r\n  private recoveryEvents: string[] = []\r\n  private syncResults: any[] = []\r\n  \r\n  async simulateNetworkRecovery(): Promise<void> {\r\n    console.log('🔄 模拟网络恢复...')\r\n    \r\n    // 记录恢复事件\r\n    this.recoveryEvents.push({\r\n      type: 'recovery_start',\r\n      timestamp: new Date(),\r\n      details: 'Network connection restored'\r\n    })\r\n    \r\n    // 模拟网络恢复延迟\r\n    await new Promise(resolve => setTimeout(resolve, 100))\r\n    \r\n    // 模拟自动同步触发\r\n    await this.triggerAutoSync()\r\n  }\r\n  \r\n  private async triggerAutoSync(): Promise<void> {\r\n    console.log('🔄 触发自动同步...')\r\n    \r\n    this.recoveryEvents.push({\r\n      type: 'sync_start',\r\n      timestamp: new Date(),\r\n      details: 'Auto sync triggered by network recovery'\r\n    })\r\n    \r\n    // 模拟同步过程\r\n    const syncResult = {\r\n      success: true,\r\n      syncedOperations: Math.floor(Math.random() * 10) + 1,\r\n      conflicts: [],\r\n      errors: [],\r\n      duration: Math.random() * 1000 + 500\r\n    }\r\n    \r\n    this.syncResults.push(syncResult)\r\n    \r\n    // 模拟同步完成\r\n    await new Promise(resolve => setTimeout(resolve, syncResult.duration))\r\n    \r\n    this.recoveryEvents.push({\r\n      type: 'sync_complete',\r\n      timestamp: new Date(),\r\n      details: `Synced ${syncResult.syncedOperations} operations`\r\n    })\r\n  }\r\n  \r\n  getRecoveryEvents(): any[] {\r\n    return this.recoveryEvents\r\n  }\r\n  \r\n  getSyncResults(): any[] {\r\n    return this.syncResults\r\n  }\r\n  \r\n  async simulateNetworkDisruption(): Promise<void> {\r\n    console.log('📡 模拟网络中断...')\r\n    \r\n    this.recoveryEvents.push({\r\n      type: 'disruption_start',\r\n      timestamp: new Date(),\r\n      details: 'Network connection lost'\r\n    })\r\n    \r\n    // 模拟网络中断持续时间\r\n    const disruptionDuration = Math.random() * 5000 + 2000 // 2-7秒\r\n    await new Promise(resolve => setTimeout(resolve, disruptionDuration))\r\n    \r\n    this.recoveryEvents.push({\r\n      type: 'disruption_end',\r\n      timestamp: new Date(),\r\n      details: `Network disruption lasted ${disruptionDuration}ms`\r\n    })\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// 网络恢复测试场景\r\n// ============================================================================\r\n\r\ndescribe('Week 2 Day 8-9 网络恢复测试', () => {\r\n  \r\n  let testUtils: NetworkRecoveryTestUtils\r\n  let mockNetworkMonitor: any\r\n  let mockOfflineManager: any\r\n  \r\n  beforeAll(async () => {\r\n    console.log('🚀 开始 Week 2 Day 8-9 网络恢复测试')\r\n    \r\n    testUtils = new NetworkRecoveryTestUtils()\r\n    \r\n    // 模拟网络监控器\r\n    mockNetworkMonitor = {\r\n      isOnline: false,\r\n      listeners: new Map(),\r\n      \r\n      addListener(event: string, callback: Function) {\r\n        if (!this.listeners.has(event)) {\r\n          this.listeners.set(event, [])\r\n        }\r\n        this.listeners.get(event)!.push(callback)\r\n      },\r\n      \r\n      async simulateOffline() {\r\n        this.isOnline = false\r\n        this.emit('offline')\r\n      },\r\n      \r\n      async simulateOnline() {\r\n        this.isOnline = true\r\n        this.emit('online')\r\n      },\r\n      \r\n      emit(event: string) {\r\n        const callbacks = this.listeners.get(event) || []\r\n        callbacks.forEach(callback => callback())\r\n      },\r\n      \r\n      async getNetworkQuality() {\r\n        return {\r\n          bandwidth: Math.random() > 0.5 ? 'good' : 'fair',\r\n          latency: Math.random() > 0.5 ? 'low' : 'medium',\r\n          reliability: Math.random() * 0.3 + 0.7 // 0.7-1.0\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 模拟离线管理器\r\n    mockOfflineManager = {\r\n      pendingOperations: 0,\r\n      syncHistory: [],\r\n      \r\n      async queueOfflineOperation(operation: any) {\r\n        this.pendingOperations++\r\n        return { success: true }\r\n      },\r\n      \r\n      async getPendingOperations() {\r\n        return Array(this.pendingOperations).fill(null).map((_, i) => ({\r\n          id: `op-${i}`,\r\n          type: 'create',\r\n          entity: 'card',\r\n          timestamp: new Date()\r\n        }))\r\n      },\r\n      \r\n      async performSync() {\r\n        const startTime = performance.now()\r\n        const operations = await this.getPendingOperations()\r\n        \r\n        // 模拟同步过程\r\n        await new Promise(resolve => setTimeout(resolve, Math.random() * 1000 + 200))\r\n        \r\n        const result = {\r\n          success: true,\r\n          syncedOperations: operations.length,\r\n          conflicts: [],\r\n          errors: [],\r\n          duration: performance.now() - startTime\r\n        }\r\n        \r\n        this.syncHistory.push(result)\r\n        this.pendingOperations = 0\r\n        \r\n        return result\r\n      },\r\n      \r\n      async getSyncHistory() {\r\n        return this.syncHistory\r\n      }\r\n    }\r\n  })\r\n  \r\n  afterAll(async () => {\r\n    console.log('✅ 网络恢复测试完成')\r\n  })\r\n  \r\n  describe('基本网络恢复测试', () => {\r\n    \r\n    test('应该能够检测网络恢复并触发自动同步', async () => {\r\n      let recoveryDetected = false\r\n      let syncTriggered = false\r\n      \r\n      // 监听网络恢复事件\r\n      mockNetworkMonitor.addListener('online', () => {\r\n        recoveryDetected = true\r\n        syncTriggered = true\r\n      })\r\n      \r\n      // 模拟离线状态\r\n      await mockNetworkMonitor.simulateOffline()\r\n      expect(mockNetworkMonitor.isOnline).toBe(false)\r\n      \r\n      // 添加一些离线操作\r\n      for (let i = 0; i < 5; i++) {\r\n        await mockOfflineManager.queueOfflineOperation({\r\n          type: 'create',\r\n          entity: 'card',\r\n          data: { title: `Test Card ${i}` }\r\n        })\r\n      }\r\n      \r\n      expect(mockOfflineManager.pendingOperations).toBe(5)\r\n      \r\n      // 模拟网络恢复\r\n      await mockNetworkMonitor.simulateOnline()\r\n      \r\n      // 验证网络恢复被检测\r\n      expect(recoveryDetected).toBe(true)\r\n      expect(syncTriggered).toBe(true)\r\n      expect(mockNetworkMonitor.isOnline).toBe(true)\r\n      \r\n      // 验证自动同步被触发\r\n      const syncResult = await mockOfflineManager.performSync()\r\n      expect(syncResult.success).toBe(true)\r\n      expect(syncResult.syncedOperations).toBe(5)\r\n      \r\n      console.log(`✅ 网络恢复自动同步测试通过 - 同步了 ${syncResult.syncedOperations} 个操作`)\r\n    })\r\n    \r\n    test('应该能够在网络质量不佳时调整同步策略', async () => {\r\n      // 模拟网络质量不佳\r\n      const poorNetworkQuality = {\r\n        bandwidth: 'poor',\r\n        latency: 'high',\r\n        reliability: 0.6\r\n      }\r\n      \r\n      // 模拟网络恢复，但质量不佳\r\n      await mockNetworkMonitor.simulateOnline()\r\n      \r\n      // 添加大量操作\r\n      for (let i = 0; i < 20; i++) {\r\n        await mockOfflineManager.queueOfflineOperation({\r\n          type: 'create',\r\n          entity: 'card',\r\n          data: { title: `Large Batch Card ${i}` }\r\n        })\r\n      }\r\n      \r\n      // 根据网络质量调整同步策略\r\n      let syncStrategy = 'immediate'\r\n      if (poorNetworkQuality.bandwidth === 'poor') {\r\n        syncStrategy = 'conservative'\r\n      } else if (poorNetworkQuality.reliability < 0.8) {\r\n        syncStrategy = 'prioritized'\r\n      }\r\n      \r\n      expect(syncStrategy).toBe('conservative')\r\n      \r\n      // 执行同步（应该采用保守策略）\r\n      const syncResult = await mockOfflineManager.performSync()\r\n      \r\n      expect(syncResult.success).toBe(true)\r\n      expect(syncResult.syncedOperations).toBe(20)\r\n      \r\n      console.log(`✅ 网络质量自适应同步测试通过 - 使用策略: ${syncStrategy}`)\r\n    })\r\n    \r\n    test('应该能够处理频繁的网络状态变化', async () => {\r\n      let onlineCount = 0\r\n      let offlineCount = 0\r\n      \r\n      // 监听网络状态变化\r\n      mockNetworkMonitor.addListener('online', () => {\r\n        onlineCount++\r\n      })\r\n      \r\n      mockNetworkMonitor.addListener('offline', () => {\r\n        offlineCount++\r\n      })\r\n      \r\n      // 模拟频繁的网络状态变化\r\n      for (let i = 0; i < 5; i++) {\r\n        await mockNetworkMonitor.simulateOffline()\r\n        await new Promise(resolve => setTimeout(resolve, 50))\r\n        \r\n        await mockNetworkMonitor.simulateOnline()\r\n        await new Promise(resolve => setTimeout(resolve, 50))\r\n      }\r\n      \r\n      // 验证状态变化被正确检测\r\n      expect(offlineCount).toBe(5)\r\n      expect(onlineCount).toBe(5)\r\n      \r\n      console.log(`✅ 频繁网络状态变化测试通过 - 离线: ${offlineCount}次, 在线: ${onlineCount}次`)\r\n    })\r\n  })\r\n  \r\n  describe('网络恢复性能测试', () => {\r\n    \r\n    test('应该能够在合理时间内完成网络恢复同步', async () => {\r\n      // 添加大量离线操作\r\n      const operationCount = 50\r\n      \r\n      for (let i = 0; i < operationCount; i++) {\r\n        await mockOfflineManager.queueOfflineOperation({\r\n          type: 'create',\r\n          entity: 'card',\r\n          data: { title: `Performance Test Card ${i}` }\r\n        })\r\n      }\r\n      \r\n      expect(mockOfflineManager.pendingOperations).toBe(operationCount)\r\n      \r\n      // 模拟网络恢复并执行同步\r\n      const startTime = performance.now()\r\n      \r\n      await mockNetworkMonitor.simulateOnline()\r\n      const syncResult = await mockOfflineManager.performSync()\r\n      \r\n      const duration = performance.now() - startTime\r\n      \r\n      // 验证同步在合理时间内完成\r\n      expect(duration).toBeLessThan(5000) // 应该在5秒内完成\r\n      expect(syncResult.success).toBe(true)\r\n      expect(syncResult.syncedOperations).toBe(operationCount)\r\n      \r\n      console.log(`✅ 网络恢复性能测试通过 - ${operationCount} 个操作耗时 ${duration.toFixed(2)}ms`)\r\n    })\r\n    \r\n    test('应该能够处理网络恢复期间的错误', async () => {\r\n      // 模拟网络恢复期间的错误\r\n      let syncAttemptCount = 0\r\n      \r\n      // 重写同步方法以模拟错误\r\n      const originalPerformSync = mockOfflineManager.performSync\r\n      mockOfflineManager.performSync = async () => {\r\n        syncAttemptCount++\r\n        \r\n        if (syncAttemptCount <= 2) {\r\n          throw new Error('Network timeout')\r\n        }\r\n        \r\n        return await originalPerformSync.call(mockOfflineManager)\r\n      }\r\n      \r\n      // 添加操作\r\n      await mockOfflineManager.queueOfflineOperation({\r\n        type: 'create',\r\n        entity: 'card',\r\n        data: { title: 'Error Test Card' }\r\n      })\r\n      \r\n      // 模拟网络恢复\r\n      await mockNetworkMonitor.simulateOnline()\r\n      \r\n      // 尝试同步（应该失败前两次）\r\n      let finalResult = null\r\n      try {\r\n        finalResult = await mockOfflineManager.performSync()\r\n      } catch (error) {\r\n        // 前两次尝试应该失败\r\n      }\r\n      \r\n      // 第三次尝试应该成功\r\n      finalResult = await mockOfflineManager.performSync()\r\n      \r\n      expect(syncAttemptCount).toBe(3)\r\n      expect(finalResult.success).toBe(true)\r\n      \r\n      console.log(`✅ 网络恢复错误处理测试通过 - 重试 ${syncAttemptCount} 次后成功`)\r\n    })\r\n  })\r\n  \r\n  describe('网络恢复集成测试', () => {\r\n    \r\n    test('应该能够在真实场景中完成端到端的网络恢复流程', async () => {\r\n      // 初始状态：在线\r\n      expect(mockNetworkMonitor.isOnline).toBe(true)\r\n      \r\n      // 第1步：模拟网络中断\r\n      await testUtils.simulateNetworkDisruption()\r\n      \r\n      // 第2步：在中断期间执行操作\r\n      const operationsDuringDisruption = []\r\n      for (let i = 0; i < 10; i++) {\r\n        const operation = await mockOfflineManager.queueOfflineOperation({\r\n          type: 'create',\r\n          entity: 'card',\r\n          data: { title: `Disruption Card ${i}` }\r\n        })\r\n        operationsDuringDisruption.push(operation)\r\n      }\r\n      \r\n      expect(mockOfflineManager.pendingOperations).toBe(10)\r\n      \r\n      // 第3步：模拟网络恢复\r\n      await testUtils.simulateNetworkRecovery()\r\n      \r\n      // 第4步：验证自动同步\r\n      await mockNetworkMonitor.simulateOnline()\r\n      const syncResult = await mockOfflineManager.performSync()\r\n      \r\n      // 验证结果\r\n      expect(syncResult.success).toBe(true)\r\n      expect(syncResult.syncedOperations).toBe(10)\r\n      \r\n      // 验证恢复事件\r\n      const recoveryEvents = testUtils.getRecoveryEvents()\r\n      expect(recoveryEvents.length).toBeGreaterThan(0)\r\n      \r\n      // 验证同步历史\r\n      const syncHistory = await mockOfflineManager.getSyncHistory()\r\n      expect(syncHistory.length).toBeGreaterThan(0)\r\n      \r\n      console.log(`✅ 端到端网络恢复测试通过`)\r\n      console.log(`   - 恢复事件: ${recoveryEvents.length}`)\r\n      console.log(`   - 同步历史: ${syncHistory.length}`)\r\n      console.log(`   - 最终同步状态: ${syncResult.success ? '成功' : '失败'}`)\r\n    })\r\n    \r\n    test('应该能够在多设备环境中正确处理网络恢复', async () => {\r\n      // 模拟多设备环境\r\n      const devices = [\r\n        { id: 'device-1', pendingOperations: 5 },\r\n        { id: 'device-2', pendingOperations: 3 },\r\n        { id: 'device-3', pendingOperations: 8 }\r\n      ]\r\n      \r\n      // 为每个设备添加操作\r\n      for (const device of devices) {\r\n        for (let i = 0; i < device.pendingOperations; i++) {\r\n          await mockOfflineManager.queueOfflineOperation({\r\n            type: 'create',\r\n            entity: 'card',\r\n            data: { title: `Device ${device.id} Card ${i}` },\r\n            deviceId: device.id\r\n          })\r\n        }\r\n      }\r\n      \r\n      const totalOperations = devices.reduce((sum, device) => sum + device.pendingOperations, 0)\r\n      expect(mockOfflineManager.pendingOperations).toBe(totalOperations)\r\n      \r\n      // 模拟所有设备同时恢复网络\r\n      const recoveryPromises = devices.map(device => \r\n        mockNetworkMonitor.simulateOnline()\r\n      )\r\n      \r\n      await Promise.all(recoveryPromises)\r\n      \r\n      // 执行同步\r\n      const syncResult = await mockOfflineManager.performSync()\r\n      \r\n      expect(syncResult.success).toBe(true)\r\n      expect(syncResult.syncedOperations).toBe(totalOperations)\r\n      \r\n      console.log(`✅ 多设备网络恢复测试通过`)\r\n      console.log(`   - 设备数量: ${devices.length}`)\r\n      console.log(`   - 总操作数: ${totalOperations}`)\r\n      console.log(`   - 同步成功率: ${syncResult.success ? '100%' : '0%'}`)\r\n    })\r\n  })\r\n})\r\n\r\n// ============================================================================\r\n// 测试导出\r\n// ============================================================================\r\n\r\nexport async function runNetworkRecoveryTests() {\r\n  console.log('🚀 运行网络恢复测试')\r\n  \r\n  try {\r\n    // 运行 Jest 测试\r\n    const { execSync } = require('child_process')\r\n    \r\n    execSync('npx jest tests/offline/network-recovery.test.ts --verbose', {\r\n      stdio: 'inherit',\r\n      cwd: process.cwd()\r\n    })\r\n    \r\n    console.log('✅ 网络恢复测试完成')\r\n    \r\n  } catch (error) {\r\n    console.error('❌ 网络恢复测试失败:', error)\r\n    process.exit(1)\r\n  }\r\n}\r\n\r\n// 如果直接运行此文件\r\nif (require.main === module) {\r\n  runNetworkRecoveryTests()\r\n}"],"version":3}
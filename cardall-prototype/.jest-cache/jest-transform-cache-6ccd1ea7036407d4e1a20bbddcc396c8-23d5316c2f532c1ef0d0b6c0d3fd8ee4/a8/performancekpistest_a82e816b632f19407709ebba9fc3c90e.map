{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\utils\\performance-kpis.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\utils\\performance-kpis.test.ts"],"sourcesContent":["/**\n * 性能KPI测试\n * 测试performanceKPIs模块的所有功能\n */\n\nimport { describe, test, expect, vi, beforeEach, afterEach } from 'vitest'\nimport {\n  performanceKPIs,\n  PerformanceKPI,\n  KPIScore,\n  OverallPerformanceScore,\n  KPIEvaluator,\n  kpiEvaluator,\n  evaluatePerformance,\n  getPerformanceGrade\n} from '../../utils/performance-kpis'\n\n// Mock global objects\nconst mockPerformance = {\n  getEntriesByType: vi.fn(),\n  memory: {\n    usedJSHeapSize: 52428800 // 50MB\n  }\n}\n\nconst mockNavigator = {\n  connection: {\n    rtt: 150\n  }\n}\n\nObject.defineProperty(global, 'performance', {\n  value: mockPerformance,\n  writable: true\n})\n\nObject.defineProperty(global, 'navigator', {\n  value: mockNavigator,\n  writable: true\n})\n\ndescribe('PerformanceKPIs', () => {\n  beforeEach(() => {\n    vi.clearAllMocks()\n  })\n\n  afterEach(() => {\n    vi.restoreAllMocks()\n  })\n\n  describe('KPI数据结构', () => {\n    test('应该包含完整的KPI定义', () => {\n      expect(Array.isArray(performanceKPIs)).toBe(true)\n      expect(performanceKPIs.length).toBeGreaterThan(0)\n\n      // 验证每个KPI的结构\n      performanceKPIs.forEach(kpi => {\n        expect(kpi).toHaveProperty('id')\n        expect(kpi).toHaveProperty('name')\n        expect(kpi).toHaveProperty('category')\n        expect(kpi).toHaveProperty('unit')\n        expect(kpi).toHaveProperty('description')\n        expect(kpi).toHaveProperty('thresholds')\n        expect(kpi).toHaveProperty('weight')\n        expect(kpi).toHaveProperty('measurement')\n\n        expect(['loading', 'runtime', 'sync', 'database', 'network', 'user']).toContain(kpi.category)\n        expect(typeof kpi.weight).toBe('number')\n        expect(kpi.weight).toBeGreaterThan(0)\n        expect(kpi.weight).toBeLessThanOrEqual(20)\n\n        expect(kpi.thresholds).toHaveProperty('excellent')\n        expect(kpi.thresholds).toHaveProperty('good')\n        expect(kpi.thresholds).toHaveProperty('fair')\n        expect(kpi.thresholds).toHaveProperty('poor')\n      })\n    })\n\n    test('应该包含所有性能分类', () => {\n      const categories = performanceKPIs.map(kpi => kpi.category)\n      const expectedCategories = ['loading', 'runtime', 'sync', 'database', 'network']\n\n      expectedCategories.forEach(category => {\n        expect(categories).toContain(category)\n      })\n    })\n\n    test('应该有合理的权重分布', () => {\n      const totalWeight = performanceKPIs.reduce((sum, kpi) => sum + kpi.weight, 0)\n\n      // 权重总和应该为100\n      expect(totalWeight).toBe(100)\n\n      // 每个KPI的权重应该在合理范围内\n      performanceKPIs.forEach(kpi => {\n        expect(kpi.weight).toBeGreaterThan(0)\n        expect(kpi.weight).toBeLessThanOrEqual(20)\n      })\n    })\n\n    test('应该有合理的阈值设置', () => {\n      performanceKPIs.forEach(kpi => {\n        const { excellent, good, fair, poor } = kpi.thresholds\n\n        // 阈值应该按顺序递增或递减\n        if (kpi.unit === 'ms' || kpi.unit === 'KB' || kpi.unit === 'MB') {\n          // 时间/大小类指标：值越小越好\n          expect(excellent).toBeLessThan(good)\n          expect(good).toBeLessThan(fair)\n          expect(fair).toBeLessThan(poor)\n        } else if (kpi.unit === '%' || kpi.unit === 'FPS') {\n          // 百分比/帧率类指标：值越大越好\n          expect(excellent).toBeGreaterThan(good)\n          expect(good).toBeGreaterThan(fair)\n          expect(fair).toBeGreaterThan(poor)\n        }\n\n        // 所有阈值应该为正数\n        expect(excellent).toBeGreaterThan(0)\n        expect(good).toBeGreaterThan(0)\n        expect(fair).toBeGreaterThan(0)\n        expect(poor).toBeGreaterThan(0)\n      })\n    })\n  })\n\n  describe('KPI测量功能', () => {\n    test('应该正确测量FCP', async () => {\n      const fcpKPI = performanceKPIs.find(kpi => kpi.id === 'fcp')\n      expect(fcpKPI).toBeDefined()\n\n      mockPerformance.getEntriesByType.mockReturnValue([\n        { name: 'first-contentful-paint', startTime: 1200 }\n      ])\n\n      const value = await fcpKPI!.measurement()\n      expect(value).toBe(1200)\n    })\n\n    test('应该正确测量内存使用', () => {\n      const memoryKPI = performanceKPIs.find(kpi => kpi.id === 'memory-usage')\n      expect(memoryKPI).toBeDefined()\n\n      const value = memoryKPI!.measurement()\n      expect(value).toBeCloseTo(50, 1) // 52428800 / (1024 * 1024) ≈ 50MB\n    })\n\n    test('应该正确测量网络延迟', () => {\n      const latencyKPI = performanceKPIs.find(kpi => kpi.id === 'network-latency')\n      expect(latencyKPI).toBeDefined()\n\n      const value = latencyKPI!.measurement()\n      expect(value).toBe(150)\n    })\n\n    test('应该在无performance API时返回默认值', () => {\n      const originalPerformance = global.performance\n      delete (global as any).performance\n\n      const memoryKPI = performanceKPIs.find(kpi => kpi.id === 'memory-usage')\n      const value = memoryKPI!.measurement()\n      expect(value).toBe(0)\n\n      // 恢复performance\n      global.performance = originalPerformance\n    })\n  })\n\n  describe('KPIEvaluator类', () => {\n    let evaluator: KPIEvaluator\n\n    beforeEach(() => {\n      evaluator = new KPIEvaluator(performanceKPIs.slice(0, 3)) // 使用前3个KPI进行测试\n    })\n\n    describe('构造函数', () => {\n      test('应该正确初始化评估器', () => {\n        expect(evaluator).toBeInstanceOf(KPIEvaluator)\n      })\n\n      test('应该使用默认KPIs', () => {\n        const defaultEvaluator = new KPIEvaluator()\n        expect(defaultEvaluator).toBeInstanceOf(KPIEvaluator)\n      })\n    })\n\n    describe('KPI评估', () => {\n      test('应该评估单个KPI', async () => {\n        const fcpKPI = performanceKPIs.find(kpi => kpi.id === 'fcp')!\n        mockPerformance.getEntriesByType.mockReturnValue([\n          { name: 'first-contentful-paint', startTime: 1200 }\n        ])\n\n        const score = await evaluator.evaluateKPI(fcpKPI)\n\n        expect(score).toHaveProperty('kpiId', 'fcp')\n        expect(score).toHaveProperty('value', 1200)\n        expect(score).toHaveProperty('score')\n        expect(score).toHaveProperty('grade')\n        expect(score).toHaveProperty('timestamp')\n\n        expect(score.score).toBeGreaterThanOrEqual(0)\n        expect(score.score).toBeLessThanOrEqual(100)\n        expect(['excellent', 'good', 'fair', 'poor']).toContain(score.grade)\n      })\n\n      test('应该处理测量错误', async () => {\n        const errorKPI: PerformanceKPI = {\n          id: 'test-error',\n          name: 'Test Error',\n          category: 'runtime',\n          unit: 'ms',\n          description: 'Test error handling',\n          thresholds: { excellent: 100, good: 200, fair: 300, poor: 400 },\n          weight: 10,\n          measurement: () => { throw new Error('Measurement error') }\n        }\n\n        const consoleSpy = vi.spyOn(console, 'error').mockImplementation(() => {})\n        const score = await evaluator.evaluateKPI(errorKPI)\n\n        expect(score.value).toBe(0)\n        expect(consoleSpy).toHaveBeenCalledWith('Failed to measure KPI test-error:', expect.any(Error))\n\n        consoleSpy.mockRestore()\n      })\n    })\n\n    describe('得分计算', () => {\n      test('应该正确计算时间类指标得分', () => {\n        const timeKPI = performanceKPIs.find(kpi => kpi.id === 'fcp')!\n\n        // 测试优秀值\n        const excellentScore = (evaluator as any).calculateScore(timeKPI, 800)\n        expect(excellentScore).toBe(100)\n\n        // 测试良好值\n        const goodScore = (evaluator as any).calculateScore(timeKPI, 1150)\n        expect(goodScore).toBeGreaterThan(80)\n        expect(goodScore).toBeLessThan(100)\n\n        // 测试中等值\n        const fairScore = (evaluator as any).calculateScore(timeKPI, 2000)\n        expect(fairScore).toBeGreaterThan(60)\n        expect(fairScore).toBeLessThan(80)\n\n        // 测试较差值\n        const poorScore = (evaluator as any).calculateScore(timeKPI, 3000)\n        expect(poorScore).toBeGreaterThan(40)\n        expect(poorScore).toBeLessThan(60)\n\n        // 测试极差值\n        const terribleScore = (evaluator as any).calculateScore(timeKPI, 5000)\n        expect(terribleScore).toBeLessThan(40)\n      })\n\n      test('应该正确计算百分比类指标得分', () => {\n        const percentageKPI = performanceKPIs.find(kpi => kpi.id === 'sync-success-rate')!\n\n        // 测试优秀值\n        const excellentScore = (evaluator as any).calculateScore(percentageKPI, 99)\n        expect(excellentScore).toBe(100)\n\n        // 测试良好值\n        const goodScore = (evaluator as any).calculateScore(percentageKPI, 97)\n        expect(goodScore).toBeGreaterThan(80)\n        expect(goodScore).toBeLessThan(100)\n\n        // 测试中等值\n        const fairScore = (evaluator as any).calculateScore(percentageKPI, 90)\n        expect(fairScore).toBeGreaterThan(60)\n        expect(fairScore).toBeLessThan(80)\n\n        // 测试较差值\n        const poorScore = (evaluator as any).calculateScore(percentageKPI, 80)\n        expect(poorScore).toBeGreaterThan(40)\n        expect(poorScore).toBeLessThan(60)\n\n        // 测试极差值\n        const terribleScore = (evaluator as any).calculateScore(percentageKPI, 60)\n        expect(terribleScore).toBeLessThan(40)\n      })\n    })\n\n    describe('等级评定', () => {\n      test('应该正确评定时间类指标等级', () => {\n        const timeKPI = performanceKPIs.find(kpi => kpi.id === 'fcp')!\n\n        const excellentGrade = (evaluator as any).getGrade(timeKPI, 800)\n        expect(excellentGrade).toBe('excellent')\n\n        const goodGrade = (evaluator as any).getGrade(timeKPI, 1200)\n        expect(goodGrade).toBe('good')\n\n        const fairGrade = (evaluator as any).getGrade(timeKPI, 2000)\n        expect(fairGrade).toBe('fair')\n\n        const poorGrade = (evaluator as any).getGrade(timeKPI, 3000)\n        expect(poorGrade).toBe('poor')\n      })\n\n      test('应该正确评定百分比类指标等级', () => {\n        const percentageKPI = performanceKPIs.find(kpi => kpi.id === 'sync-success-rate')!\n\n        const excellentGrade = (evaluator as any).getGrade(percentageKPI, 99)\n        expect(excellentGrade).toBe('excellent')\n\n        const goodGrade = (evaluator as any).getGrade(percentageKPI, 97)\n        expect(goodGrade).toBe('good')\n\n        const fairGrade = (evaluator as any).getGrade(percentageKPI, 90)\n        expect(fairGrade).toBe('fair')\n\n        const poorGrade = (evaluator as any).getGrade(percentageKPI, 80)\n        expect(poorGrade).toBe('poor')\n      })\n    })\n\n    describe('全面评估', () => {\n      test('应该评估所有KPI并计算总体得分', async () => {\n        // Mock所有KPI的测量值\n        performanceKPIs.forEach(kpi => {\n          vi.spyOn(evaluator as any, 'measureKPI').mockResolvedValue(\n            kpi.id === 'fcp' ? 1200 :\n            kpi.id === 'memory-usage' ? 75 :\n            kpi.id === 'sync-success-rate' ? 85 :\n            50 // 默认值\n          )\n        })\n\n        const result = await evaluator.evaluateAll()\n\n        expect(result).toHaveProperty('overallScore')\n        expect(result).toHaveProperty('categoryScores')\n        expect(result).toHaveProperty('kpiScores')\n        expect(result).toHaveProperty('timestamp')\n        expect(result).toHaveProperty('recommendations')\n\n        expect(result.overallScore).toBeGreaterThanOrEqual(0)\n        expect(result.overallScore).toBeLessThanOrEqual(100)\n        expect(result.kpiScores.length).toBe(performanceKPIs.length)\n      })\n\n      test('应该正确计算分类得分', async () => {\n        const result = await evaluator.evaluateAll()\n\n        const categories = Object.keys(result.categoryScores)\n        expect(categories.length).toBeGreaterThan(0)\n\n        categories.forEach(category => {\n          expect(result.categoryScores[category]).toBeGreaterThanOrEqual(0)\n          expect(result.categoryScores[category]).toBeLessThanOrEqual(100)\n        })\n      })\n\n      test('应该生成优化建议', async () => {\n        // 设置一些较差的得分来触发建议生成\n        vi.spyOn(evaluator as any, 'measureKPI').mockResolvedValue(5000) // 很差的值\n\n        const result = await evaluator.evaluateAll()\n\n        expect(Array.isArray(result.recommendations)).toBe(true)\n        // 应该有一些基于较差得分的建议\n        if (result.overallScore < 60) {\n          expect(result.recommendations.length).toBeGreaterThan(0)\n        }\n      })\n    })\n\n    describe('性能目标设置', () => {\n      test('应该能够设置性能目标', () => {\n        const targets = {\n          'fcp': 600,\n          'memory-usage': 40\n        }\n\n        evaluator.setPerformanceTargets(targets)\n\n        const fcpKPI = evaluator['kpis'].find(kpi => kpi.id === 'fcp')\n        expect(fcpKPI!.thresholds.excellent).toBe(600)\n      })\n\n      test('应该按比例调整所有阈值', () => {\n        const originalExcellent = performanceKPIs[0].thresholds.excellent\n        const targets = {\n          [performanceKPIs[0].id]: originalExcellent * 0.8 // 设置为80%\n        }\n\n        evaluator.setPerformanceTargets(targets)\n\n        const kpi = evaluator['kpis'][0]\n        expect(kpi.thresholds.good).toBeCloseTo(kpi.thresholds.excellent * (performanceKPIs[0].thresholds.good / originalExcellent), 1)\n        expect(kpi.thresholds.fair).toBeCloseTo(kpi.thresholds.excellent * (performanceKPIs[0].thresholds.fair / originalExcellent), 1)\n        expect(kpi.thresholds.poor).toBeCloseTo(kpi.thresholds.excellent * (performanceKPIs[0].thresholds.poor / originalExcellent), 1)\n      })\n    })\n\n    describe('KPI趋势分析', () => {\n      test('应该获取KPI趋势数据', async () => {\n        const trend = await evaluator.getKPITrend('fcp')\n\n        expect(trend).toHaveProperty('values')\n        expect(trend).toHaveProperty('timestamps')\n        expect(trend).toHaveProperty('trend')\n\n        expect(Array.isArray(trend.values)).toBe(true)\n        expect(Array.isArray(trend.timestamps)).toBe(true)\n        expect(['improving', 'stable', 'degrading']).toContain(trend.trend)\n      })\n    })\n  })\n\n  describe('全局评估器实例', () => {\n    test('应该提供全局评估器实例', () => {\n      expect(kpiEvaluator).toBeInstanceOf(KPIEvaluator)\n    })\n  })\n\n  describe('便捷函数', () => {\n    test('应该提供性能评估便捷函数', async () => {\n      const result = await evaluatePerformance()\n\n      expect(result).toHaveProperty('overallScore')\n      expect(result).toHaveProperty('categoryScores')\n      expect(result).toHaveProperty('kpiScores')\n      expect(result).toHaveProperty('timestamp')\n      expect(result).toHaveProperty('recommendations')\n    })\n\n    test('应该正确获取性能等级', () => {\n      const gradeA = getPerformanceGrade(95)\n      expect(gradeA).toEqual({\n        grade: 'A',\n        color: 'text-green-600',\n        description: '优秀'\n      })\n\n      const gradeB = getPerformanceGrade(85)\n      expect(gradeB).toEqual({\n        grade: 'B',\n        color: 'text-blue-600',\n        description: '良好'\n      })\n\n      const gradeC = getPerformanceGrade(75)\n      expect(gradeC).toEqual({\n        grade: 'C',\n        color: 'text-yellow-600',\n        description: '中等'\n      })\n\n      const gradeD = getPerformanceGrade(65)\n      expect(gradeD).toEqual({\n        grade: 'D',\n        color: 'text-orange-600',\n        description: '需要改进'\n      })\n\n      const gradeF = getPerformanceGrade(55)\n      expect(gradeF).toEqual({\n        grade: 'F',\n        color: 'text-red-600',\n        description: '严重问题'\n      })\n    })\n\n    test('应该处理边界值', () => {\n      expect(getPerformanceGrade(90).grade).toBe('A')\n      expect(getPerformanceGrade(80).grade).toBe('B')\n      expect(getPerformanceGrade(70).grade).toBe('C')\n      expect(getPerformanceGrade(60).grade).toBe('D')\n      expect(getPerformanceGrade(59).grade).toBe('F')\n    })\n  })\n\n  describe('边界情况测试', () => {\n    test('应该处理空KPI列表', () => {\n      const emptyEvaluator = new KPIEvaluator([])\n\n      expect(async () => {\n        await emptyEvaluator.evaluateAll()\n      }).not.toThrow()\n    })\n\n    test('应该处理零权重KPI', () => {\n      const zeroWeightKPI: PerformanceKPI = {\n        id: 'zero-weight',\n        name: 'Zero Weight',\n        category: 'runtime',\n        unit: 'ms',\n        description: 'Test zero weight',\n        thresholds: { excellent: 100, good: 200, fair: 300, poor: 400 },\n        weight: 0,\n        measurement: () => 150\n      }\n\n      const evaluator = new KPIEvaluator([zeroWeightKPI])\n\n      expect(async () => {\n        await evaluator.evaluateAll()\n      }).not.toThrow()\n    })\n\n    test('应该处理负值和极端值', () => {\n      const evaluator = new KPIEvaluator()\n\n      // 测试负值得分计算\n      const negativeScore = (evaluator as any).calculateScore(\n        performanceKPIs[0],\n        -100\n      )\n      expect(negativeScore).toBeGreaterThanOrEqual(0)\n      expect(negativeScore).toBeLessThanOrEqual(100)\n\n      // 测试极值得分计算\n      const extremeScore = (evaluator as any).calculateScore(\n        performanceKPIs[0],\n        100000\n      )\n      expect(extremeScore).toBeGreaterThanOrEqual(0)\n      expect(extremeScore).toBeLessThan(40)\n    })\n  })\n\n  describe('性能测试', () => {\n    test('应该保持良好的评估性能', async () => {\n      const evaluator = new KPIEvaluator(performanceKPIs.slice(0, 5)) // 使用5个KPI\n\n      const start = performance.now()\n\n      // 执行多次评估操作\n      for (let i = 0; i < 100; i++) {\n        await evaluator.evaluateAll()\n      }\n\n      const end = performance.now()\n      const duration = end - start\n\n      // 100次评估操作应该在合理时间内完成\n      expect(duration).toBeLessThan(2000) // 2秒\n    })\n\n    test('应该避免内存泄漏', () => {\n      // 创建多个评估器实例\n      const instances = []\n      for (let i = 0; i < 100; i++) {\n        instances.push(new KPIEvaluator())\n      }\n\n      // 清理\n      instances.length = 0\n\n      // 如果没有内存泄漏，这个测试应该通过\n      expect(true).toBe(true)\n    })\n  })\n\n  describe('TypeScript类型检查', () => {\n    test('应该符合TypeScript接口', () => {\n      const kpi: PerformanceKPI = performanceKPIs[0]\n      expect(kpi).toHaveProperty('id')\n      expect(kpi).toHaveProperty('name')\n      expect(kpi).toHaveProperty('category')\n      expect(kpi).toHaveProperty('unit')\n      expect(kpi).toHaveProperty('thresholds')\n      expect(kpi).toHaveProperty('weight')\n      expect(kpi).toHaveProperty('measurement')\n\n      const score: KPIScore = {\n        kpiId: 'test',\n        value: 100,\n        score: 90,\n        grade: 'excellent',\n        timestamp: Date.now()\n      }\n\n      const overallScore: OverallPerformanceScore = {\n        overallScore: 85,\n        categoryScores: { loading: 80, runtime: 90 },\n        kpiScores: [score],\n        timestamp: Date.now(),\n        recommendations: []\n      }\n\n      expect(typeof overallScore.overallScore).toBe('number')\n      expect(typeof overallScore.categoryScores).toBe('object')\n      expect(Array.isArray(overallScore.kpiScores)).toBe(true)\n    })\n  })\n})"],"version":3}
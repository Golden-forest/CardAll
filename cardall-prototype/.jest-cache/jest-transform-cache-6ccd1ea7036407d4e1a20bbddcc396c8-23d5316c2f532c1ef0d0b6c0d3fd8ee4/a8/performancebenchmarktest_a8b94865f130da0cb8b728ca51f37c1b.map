{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\utils\\performance-benchmark.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\utils\\performance-benchmark.test.ts"],"sourcesContent":["/**\n * 性能基准测试工具测试\n * 测试PerformanceBenchmarkSuite类的所有功能\n */\n\nimport { describe, test, expect, vi, beforeEach, afterEach } from '@jest/globals'\nimport { PerformanceBenchmarkSuite, PerformanceMetrics, PerformanceBenchmark, PerformanceReport } from '../../utils/performance-benchmark'\n\n// Mock performance API\nconst mockPerformance = {\n  getEntriesByType: vi.fn(),\n  memory: {\n    jsHeapSizeLimit: 2147483648,\n    totalJSHeapSize: 100000000,\n    usedJSHeapSize: 50000000\n  }\n}\n\nconst mockObserver = {\n  observe: vi.fn(),\n  disconnect: vi.fn()\n}\n\nconst mockPerformanceObserver = vi.fn().mockImplementation(() => mockObserver)\n\n// Mock global objects\nObject.defineProperty(global, 'performance', {\n  value: mockPerformance,\n  writable: true\n})\n\nObject.defineProperty(global, 'PerformanceObserver', {\n  value: mockPerformanceObserver,\n  writable: true\n})\n\ndescribe('PerformanceBenchmarkSuite', () => {\n  let benchmarkSuite: PerformanceBenchmarkSuite\n\n  beforeEach(() => {\n    benchmarkSuite = new PerformanceBenchmarkSuite()\n    vi.clearAllMocks()\n  })\n\n  afterEach(() => {\n    vi.restoreAllMocks()\n  })\n\n  describe('构造函数和初始化', () => {\n    test('应该正确初始化基准套件', () => {\n      expect(benchmarkSuite).toBeInstanceOf(PerformanceBenchmarkSuite)\n\n      const metrics = benchmarkSuite.getCurrentMetrics()\n      expect(Object.values(metrics).every(value => value === 0)).toBe(true)\n\n      const report = benchmarkSuite.getPerformanceReport()\n      expect(report.benchmarks.length).toBeGreaterThan(0)\n      expect(report.overallProgress).toBe(0)\n    })\n\n    test('应该包含所有预定义的性能基准', () => {\n      const report = benchmarkSuite.getPerformanceReport()\n      const benchmarkNames = report.benchmarks.map(b => b.name)\n\n      const expectedBenchmarks = [\n        '首次内容绘制时间',\n        '最大内容绘制时间',\n        '可交互时间',\n        '总阻塞时间',\n        '累积布局偏移',\n        'JS堆内存使用',\n        '组件渲染时间',\n        '状态更新时间',\n        '虚拟滚动性能',\n        '同步操作时间',\n        '同步成功率',\n        '冲突解决时间',\n        '数据库查询时间',\n        '数据库写入时间',\n        '数据库读取时间',\n        'API响应时间',\n        '网络延迟',\n        'Bundle加载时间'\n      ]\n\n      expectedBenchmarks.forEach(name => {\n        expect(benchmarkNames).toContain(name)\n      })\n    })\n\n    test('每个基准应该有正确的属性', () => {\n      const report = benchmarkSuite.getPerformanceReport()\n      const benchmark = report.benchmarks[0]\n\n      expect(benchmark).toHaveProperty('name')\n      expect(benchmark).toHaveProperty('currentValue', 0)\n      expect(benchmark).toHaveProperty('targetValue')\n      expect(benchmark).toHaveProperty('unit')\n      expect(benchmark).toHaveProperty('improvementTarget')\n      expect(benchmark).toHaveProperty('category')\n      expect(typeof benchmark.targetValue).toBe('number')\n      expect(typeof benchmark.improvementTarget).toBe('number')\n      expect(['loading', 'runtime', 'sync', 'database', 'component', 'network']).toContain(benchmark.category)\n    })\n  })\n\n  describe('Web Vitals测量', () => {\n    test('应该测量首次内容绘制时间', async () => {\n      const mockPaintEntries = [\n        { name: 'first-contentful-paint', startTime: 1200 },\n        { name: 'other-paint', startTime: 800 }\n      ]\n\n      mockPerformance.getEntriesByType.mockReturnValue(mockPaintEntries)\n\n      await benchmarkSuite.measureWebVitals()\n\n      const metrics = benchmarkSuite.getCurrentMetrics()\n      expect(metrics.firstContentfulPaint).toBe(1200)\n\n      const report = benchmarkSuite.getPerformanceReport()\n      const fcpBenchmark = report.benchmarks.find(b => b.name === '首次内容绘制时间')\n      expect(fcpBenchmark?.currentValue).toBe(1200)\n    })\n\n    test('应该设置最大内容绘制观察器', async () => {\n      await benchmarkSuite.measureWebVitals()\n\n      expect(mockPerformanceObserver).toHaveBeenCalled()\n      expect(mockObserver.observe).toHaveBeenCalledWith({\n        entryTypes: ['largest-contentful-paint']\n      })\n    })\n\n    test('应该设置布局偏移观察器', async () => {\n      await benchmarkSuite.measureWebVitals()\n\n      expect(mockPerformanceObserver).toHaveBeenCalledTimes(2)\n      expect(mockObserver.observe).toHaveBeenCalledWith({\n        entryTypes: ['layout-shift']\n      })\n    })\n\n    test('应该在无performance API时优雅处理', async () => {\n      // Temporarily remove performance\n      const originalPerformance = global.performance\n      delete (global as any).performance\n\n      await expect(benchmarkSuite.measureWebVitals()).resolves.not.toThrow()\n\n      // Restore performance\n      global.performance = originalPerformance\n    })\n  })\n\n  describe('内存使用测量', () => {\n    test('应该测量内存使用情况', () => {\n      benchmarkSuite.measureMemoryUsage()\n\n      const metrics = benchmarkSuite.getCurrentMetrics()\n      expect(metrics.jsHeapSizeLimit).toBe(2048) // 2147483648 / (1024 * 1024)\n      expect(metrics.totalJSHeapSize).toBeCloseTo(95.37, 1) // 100000000 / (1024 * 1024)\n      expect(metrics.usedJSHeapSize).toBeCloseTo(47.68, 1) // 50000000 / (1024 * 1024)\n\n      const report = benchmarkSuite.getPerformanceReport()\n      const memoryBenchmark = report.benchmarks.find(b => b.name === 'JS堆内存使用')\n      expect(memoryBenchmark?.currentValue).toBeCloseTo(47.68, 1)\n    })\n\n    test('应该在无memory API时优雅处理', () => {\n      const originalMemory = mockPerformance.memory\n      delete (mockPerformance as any).memory\n\n      expect(() => benchmarkSuite.measureMemoryUsage()).not.toThrow()\n\n      // Restore memory\n      mockPerformance.memory = originalMemory\n    })\n  })\n\n  describe('组件渲染性能测量', () => {\n    test('应该测量组件渲染时间', () => {\n      const renderFunction = vi.fn()\n      const renderTime = benchmarkSuite.measureComponentRenderTime('TestComponent', renderFunction)\n\n      expect(renderTime).toBeGreaterThanOrEqual(0)\n      expect(renderTime).toBeLessThan(100) // Should be very fast\n\n      const metrics = benchmarkSuite.getCurrentMetrics()\n      expect(metrics.componentRenderTime).toBe(renderTime)\n\n      const report = benchmarkSuite.getPerformanceReport()\n      const renderBenchmark = report.benchmarks.find(b => b.name === '组件渲染时间')\n      expect(renderBenchmark?.currentValue).toBe(renderTime)\n\n      expect(renderFunction).toHaveBeenCalled()\n    })\n\n    test('应该处理渲染函数中的错误', () => {\n      const renderFunction = vi.fn().mockImplementation(() => {\n        throw new Error('Render error')\n      })\n\n      expect(() => {\n        benchmarkSuite.measureComponentRenderTime('ErrorComponent', renderFunction)\n      }).not.toThrow()\n    })\n  })\n\n  describe('同步性能测量', () => {\n    test('应该测量成功的同步操作', async () => {\n      const syncOperation = vi.fn().mockResolvedValue({ success: true })\n\n      await benchmarkSuite.measureSyncPerformance(syncOperation)\n\n      expect(syncOperation).toHaveBeenCalled()\n\n      const metrics = benchmarkSuite.getCurrentMetrics()\n      expect(metrics.syncOperationTime).toBeGreaterThan(0)\n      expect(metrics.syncSuccessRate).toBe(100)\n\n      const report = benchmarkSuite.getPerformanceReport()\n      const timeBenchmark = report.benchmarks.find(b => b.name === '同步操作时间')\n      const rateBenchmark = report.benchmarks.find(b => b.name === '同步成功率')\n\n      expect(timeBenchmark?.currentValue).toBeGreaterThan(0)\n      expect(rateBenchmark?.currentValue).toBe(100)\n    })\n\n    test('应该测量失败的同步操作', async () => {\n      const syncOperation = vi.fn().mockRejectedValue(new Error('Sync failed'))\n\n      await benchmarkSuite.measureSyncPerformance(syncOperation)\n\n      expect(syncOperation).toHaveBeenCalled()\n\n      const metrics = benchmarkSuite.getCurrentMetrics()\n      expect(metrics.syncOperationTime).toBeGreaterThan(0)\n      expect(metrics.syncSuccessRate).toBe(0)\n\n      const report = benchmarkSuite.getPerformanceReport()\n      const rateBenchmark = report.benchmarks.find(b => b.name === '同步成功率')\n      expect(rateBenchmark?.currentValue).toBe(0)\n    })\n  })\n\n  describe('数据库性能测量', () => {\n    test('应该测量查询性能', async () => {\n      const dbOperation = vi.fn().mockResolvedValue([{ id: 1, name: 'test' }])\n\n      await benchmarkSuite.measureDatabasePerformance(dbOperation, 'query')\n\n      expect(dbOperation).toHaveBeenCalled()\n\n      const metrics = benchmarkSuite.getCurrentMetrics()\n      expect(metrics.dbQueryTime).toBeGreaterThan(0)\n\n      const report = benchmarkSuite.getPerformanceReport()\n      const queryBenchmark = report.benchmarks.find(b => b.name === '数据库查询时间')\n      expect(queryBenchmark?.currentValue).toBeGreaterThan(0)\n    })\n\n    test('应该测量写入性能', async () => {\n      const dbOperation = vi.fn().mockResolvedValue({ success: true })\n\n      await benchmarkSuite.measureDatabasePerformance(dbOperation, 'write')\n\n      const metrics = benchmarkSuite.getCurrentMetrics()\n      expect(metrics.dbWriteTime).toBeGreaterThan(0)\n    })\n\n    test('应该测量读取性能', async () => {\n      const dbOperation = vi.fn().mockResolvedValue({ data: 'test' })\n\n      await benchmarkSuite.measureDatabasePerformance(dbOperation, 'read')\n\n      const metrics = benchmarkSuite.getCurrentMetrics()\n      expect(metrics.dbReadTime).toBeGreaterThan(0)\n    })\n\n    test('应该处理数据库操作错误', async () => {\n      const dbOperation = vi.fn().mockRejectedValue(new Error('DB error'))\n      const consoleSpy = vi.spyOn(console, 'error').mockImplementation(() => {})\n\n      await benchmarkSuite.measureDatabasePerformance(dbOperation, 'query')\n\n      expect(consoleSpy).toHaveBeenCalledWith('Database performance measurement failed:', expect.any(Error))\n      consoleSpy.mockRestore()\n    })\n  })\n\n  describe('性能报告生成', () => {\n    test('应该生成完整的性能报告', () => {\n      // Set some test values\n      benchmarkSuite.measureComponentRenderTime('Test', () => {})\n      benchmarkSuite.measureMemoryUsage()\n\n      const report = benchmarkSuite.getPerformanceReport()\n\n      expect(report).toHaveProperty('timestamp')\n      expect(report).toHaveProperty('metrics')\n      expect(report).toHaveProperty('benchmarks')\n      expect(report).toHaveProperty('overallProgress')\n      expect(report).toHaveProperty('categoryProgress')\n      expect(report).toHaveProperty('recommendations')\n\n      expect(typeof report.timestamp).toBe('string')\n      expect(Array.isArray(report.benchmarks)).toBe(true)\n      expect(typeof report.overallProgress).toBe('number')\n      expect(typeof report.categoryProgress).toBe('object')\n      expect(Array.isArray(report.recommendations)).toBe(true)\n    })\n\n    test('应该正确计算总体进度', () => {\n      // 设置一些测试值\n      const report = benchmarkSuite.getPerformanceReport()\n\n      // 模拟一些基准值\n      report.benchmarks[0].currentValue = 400 // 目标800，应该50%\n      report.benchmarks[1].currentValue = 600 // 目标1200，应该50%\n\n      // 重新计算进度\n      const newReport = benchmarkSuite.getPerformanceReport()\n      expect(newReport.overallProgress).toBeGreaterThan(0)\n      expect(newReport.overallProgress).toBeLessThanOrEqual(100)\n    })\n\n    test('应该计算分类进度', () => {\n      const report = benchmarkSuite.getPerformanceReport()\n      const categories = Object.keys(report.categoryProgress)\n\n      expect(categories).toContain('loading')\n      expect(categories).toContain('runtime')\n      expect(categories).toContain('sync')\n      expect(categories).toContain('database')\n      expect(categories).toContain('component')\n      expect(categories).toContain('network')\n\n      // 所有进度值应该在0-100之间\n      Object.values(report.categoryProgress).forEach(progress => {\n        expect(progress).toBeGreaterThanOrEqual(0)\n        expect(progress).toBeLessThanOrEqual(100)\n      })\n    })\n\n    test('应该生成优化建议', () => {\n      // 设置超出目标值的基准\n      const report = benchmarkSuite.getPerformanceReport()\n      const benchmark = report.benchmarks.find(b => b.name === '首次内容绘制时间')\n      if (benchmark) {\n        benchmark.currentValue = 2400 // 目标800，3倍超标\n      }\n\n      const newReport = benchmarkSuite.getPerformanceReport()\n      expect(newReport.recommendations.length).toBeGreaterThan(0)\n      expect(newReport.recommendations[0]).toContain('严重超标')\n    })\n  })\n\n  describe('性能目标设置', () => {\n    test('应该能够设置性能目标', () => {\n      const targets = {\n        '首次内容绘制时间': 600,\n        '组件渲染时间': 10\n      }\n\n      benchmarkSuite.setPerformanceTargets(targets)\n\n      const report = benchmarkSuite.getPerformanceReport()\n      const fcpBenchmark = report.benchmarks.find(b => b.name === '首次内容绘制时间')\n      const renderBenchmark = report.benchmarks.find(b => b.name === '组件渲染时间')\n\n      expect(fcpBenchmark?.targetValue).toBe(600)\n      expect(renderBenchmark?.targetValue).toBe(10)\n    })\n\n    test('应该忽略不存在的基准名称', () => {\n      const targets = {\n        '不存在的基准': 100\n      }\n\n      expect(() => {\n        benchmarkSuite.setPerformanceTargets(targets)\n      }).not.toThrow()\n    })\n  })\n\n  describe('重置功能', () => {\n    test('应该重置所有指标', () => {\n      // 设置一些值\n      benchmarkSuite.measureComponentRenderTime('Test', () => {})\n      benchmarkSuite.measureMemoryUsage()\n\n      // 重置\n      benchmarkSuite.reset()\n\n      const metrics = benchmarkSuite.getCurrentMetrics()\n      expect(Object.values(metrics).every(value => value === 0)).toBe(true)\n\n      const report = benchmarkSuite.getPerformanceReport()\n      report.benchmarks.forEach(benchmark => {\n        expect(benchmark.currentValue).toBe(0)\n      })\n    })\n  })\n\n  describe('边界情况测试', () => {\n    test('应该处理零值和负值', () => {\n      // 测试零值处理\n      benchmarkSuite.reset()\n      const report = benchmarkSuite.getPerformanceReport()\n\n      // 零值不应该导致计算错误\n      expect(report.overallProgress).toBe(0)\n      expect(report.recommendations.length).toBe(0)\n    })\n\n    test('应该处理异步操作的并发执行', async () => {\n      const syncOperation1 = vi.fn().mockResolvedValue({ success: true })\n      const syncOperation2 = vi.fn().mockResolvedValue({ success: true })\n\n      // 并发执行\n      await Promise.all([\n        benchmarkSuite.measureSyncPerformance(syncOperation1),\n        benchmarkSuite.measureSyncPerformance(syncOperation2)\n      ])\n\n      expect(syncOperation1).toHaveBeenCalled()\n      expect(syncOperation2).toHaveBeenCalled()\n    })\n\n    test('应该处理大量的基准数据', () => {\n      // 这个测试验证性能基准系统可以处理大量数据而不崩溃\n      for (let i = 0; i < 100; i++) {\n        benchmarkSuite.measureComponentRenderTime(`Component${i}`, () => {})\n      }\n\n      const report = benchmarkSuite.getPerformanceReport()\n      expect(report.benchmarks.length).toBeGreaterThan(0)\n      expect(report.overallProgress).toBeGreaterThanOrEqual(0)\n    })\n  })\n\n  describe('性能测试', () => {\n    test('应该保持良好的性能', () => {\n      const start = performance.now()\n\n      // 执行100次测量操作\n      for (let i = 0; i < 100; i++) {\n        benchmarkSuite.measureComponentRenderTime(`PerfTest${i}`, () => {})\n      }\n\n      const end = performance.now()\n      const duration = end - start\n\n      // 100次操作应该在合理时间内完成\n      expect(duration).toBeLessThan(1000) // 1秒\n    })\n\n    test('应该避免内存泄漏', () => {\n      // 创建多个实例\n      const instances = []\n      for (let i = 0; i < 1000; i++) {\n        instances.push(new PerformanceBenchmarkSuite())\n      }\n\n      // 清理\n      instances.length = 0\n\n      // 如果没有内存泄漏，这个测试应该通过\n      expect(true).toBe(true)\n    })\n  })\n\n  describe('TypeScript类型检查', () => {\n    test('应该符合TypeScript接口', () => {\n      const metrics: PerformanceMetrics = benchmarkSuite.getCurrentMetrics()\n      expect(metrics).toHaveProperty('firstContentfulPaint')\n      expect(metrics).toHaveProperty('largestContentfulPaint')\n      expect(metrics).toHaveProperty('timeToInteractive')\n\n      const report: PerformanceReport = benchmarkSuite.getPerformanceReport()\n      expect(report).toHaveProperty('timestamp')\n      expect(report).toHaveProperty('metrics')\n      expect(report).toHaveProperty('benchmarks')\n    })\n  })\n})"],"version":3}
d89e7e8260e3b7489a03713d4c345be6
"use strict";
/**
 * 性能KPI测试
 * 测试performanceKPIs模块的所有功能
 */
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const performance_kpis_1 = require("../../utils/performance-kpis");
// Mock global objects
const mockPerformance = {
    getEntriesByType: vitest_1.vi.fn(),
    memory: {
        usedJSHeapSize: 52428800 // 50MB
    }
};
const mockNavigator = {
    connection: {
        rtt: 150
    }
};
Object.defineProperty(global, 'performance', {
    value: mockPerformance,
    writable: true
});
Object.defineProperty(global, 'navigator', {
    value: mockNavigator,
    writable: true
});
(0, vitest_1.describe)('PerformanceKPIs', () => {
    (0, vitest_1.beforeEach)(() => {
        vitest_1.vi.clearAllMocks();
    });
    (0, vitest_1.afterEach)(() => {
        vitest_1.vi.restoreAllMocks();
    });
    (0, vitest_1.describe)('KPI数据结构', () => {
        (0, vitest_1.test)('应该包含完整的KPI定义', () => {
            (0, vitest_1.expect)(Array.isArray(performance_kpis_1.performanceKPIs)).toBe(true);
            (0, vitest_1.expect)(performance_kpis_1.performanceKPIs.length).toBeGreaterThan(0);
            // 验证每个KPI的结构
            performance_kpis_1.performanceKPIs.forEach(kpi => {
                (0, vitest_1.expect)(kpi).toHaveProperty('id');
                (0, vitest_1.expect)(kpi).toHaveProperty('name');
                (0, vitest_1.expect)(kpi).toHaveProperty('category');
                (0, vitest_1.expect)(kpi).toHaveProperty('unit');
                (0, vitest_1.expect)(kpi).toHaveProperty('description');
                (0, vitest_1.expect)(kpi).toHaveProperty('thresholds');
                (0, vitest_1.expect)(kpi).toHaveProperty('weight');
                (0, vitest_1.expect)(kpi).toHaveProperty('measurement');
                (0, vitest_1.expect)(['loading', 'runtime', 'sync', 'database', 'network', 'user']).toContain(kpi.category);
                (0, vitest_1.expect)(typeof kpi.weight).toBe('number');
                (0, vitest_1.expect)(kpi.weight).toBeGreaterThan(0);
                (0, vitest_1.expect)(kpi.weight).toBeLessThanOrEqual(20);
                (0, vitest_1.expect)(kpi.thresholds).toHaveProperty('excellent');
                (0, vitest_1.expect)(kpi.thresholds).toHaveProperty('good');
                (0, vitest_1.expect)(kpi.thresholds).toHaveProperty('fair');
                (0, vitest_1.expect)(kpi.thresholds).toHaveProperty('poor');
            });
        });
        (0, vitest_1.test)('应该包含所有性能分类', () => {
            const categories = performance_kpis_1.performanceKPIs.map(kpi => kpi.category);
            const expectedCategories = ['loading', 'runtime', 'sync', 'database', 'network'];
            expectedCategories.forEach(category => {
                (0, vitest_1.expect)(categories).toContain(category);
            });
        });
        (0, vitest_1.test)('应该有合理的权重分布', () => {
            const totalWeight = performance_kpis_1.performanceKPIs.reduce((sum, kpi) => sum + kpi.weight, 0);
            // 权重总和应该为100
            (0, vitest_1.expect)(totalWeight).toBe(100);
            // 每个KPI的权重应该在合理范围内
            performance_kpis_1.performanceKPIs.forEach(kpi => {
                (0, vitest_1.expect)(kpi.weight).toBeGreaterThan(0);
                (0, vitest_1.expect)(kpi.weight).toBeLessThanOrEqual(20);
            });
        });
        (0, vitest_1.test)('应该有合理的阈值设置', () => {
            performance_kpis_1.performanceKPIs.forEach(kpi => {
                const { excellent, good, fair, poor } = kpi.thresholds;
                // 阈值应该按顺序递增或递减
                if (kpi.unit === 'ms' || kpi.unit === 'KB' || kpi.unit === 'MB') {
                    // 时间/大小类指标：值越小越好
                    (0, vitest_1.expect)(excellent).toBeLessThan(good);
                    (0, vitest_1.expect)(good).toBeLessThan(fair);
                    (0, vitest_1.expect)(fair).toBeLessThan(poor);
                }
                else if (kpi.unit === '%' || kpi.unit === 'FPS') {
                    // 百分比/帧率类指标：值越大越好
                    (0, vitest_1.expect)(excellent).toBeGreaterThan(good);
                    (0, vitest_1.expect)(good).toBeGreaterThan(fair);
                    (0, vitest_1.expect)(fair).toBeGreaterThan(poor);
                }
                // 所有阈值应该为正数
                (0, vitest_1.expect)(excellent).toBeGreaterThan(0);
                (0, vitest_1.expect)(good).toBeGreaterThan(0);
                (0, vitest_1.expect)(fair).toBeGreaterThan(0);
                (0, vitest_1.expect)(poor).toBeGreaterThan(0);
            });
        });
    });
    (0, vitest_1.describe)('KPI测量功能', () => {
        (0, vitest_1.test)('应该正确测量FCP', async () => {
            const fcpKPI = performance_kpis_1.performanceKPIs.find(kpi => kpi.id === 'fcp');
            (0, vitest_1.expect)(fcpKPI).toBeDefined();
            mockPerformance.getEntriesByType.mockReturnValue([
                { name: 'first-contentful-paint', startTime: 1200 }
            ]);
            const value = await fcpKPI.measurement();
            (0, vitest_1.expect)(value).toBe(1200);
        });
        (0, vitest_1.test)('应该正确测量内存使用', () => {
            const memoryKPI = performance_kpis_1.performanceKPIs.find(kpi => kpi.id === 'memory-usage');
            (0, vitest_1.expect)(memoryKPI).toBeDefined();
            const value = memoryKPI.measurement();
            (0, vitest_1.expect)(value).toBeCloseTo(50, 1); // 52428800 / (1024 * 1024) ≈ 50MB
        });
        (0, vitest_1.test)('应该正确测量网络延迟', () => {
            const latencyKPI = performance_kpis_1.performanceKPIs.find(kpi => kpi.id === 'network-latency');
            (0, vitest_1.expect)(latencyKPI).toBeDefined();
            const value = latencyKPI.measurement();
            (0, vitest_1.expect)(value).toBe(150);
        });
        (0, vitest_1.test)('应该在无performance API时返回默认值', () => {
            const originalPerformance = global.performance;
            delete global.performance;
            const memoryKPI = performance_kpis_1.performanceKPIs.find(kpi => kpi.id === 'memory-usage');
            const value = memoryKPI.measurement();
            (0, vitest_1.expect)(value).toBe(0);
            // 恢复performance
            global.performance = originalPerformance;
        });
    });
    (0, vitest_1.describe)('KPIEvaluator类', () => {
        let evaluator;
        (0, vitest_1.beforeEach)(() => {
            evaluator = new performance_kpis_1.KPIEvaluator(performance_kpis_1.performanceKPIs.slice(0, 3)); // 使用前3个KPI进行测试
        });
        (0, vitest_1.describe)('构造函数', () => {
            (0, vitest_1.test)('应该正确初始化评估器', () => {
                (0, vitest_1.expect)(evaluator).toBeInstanceOf(performance_kpis_1.KPIEvaluator);
            });
            (0, vitest_1.test)('应该使用默认KPIs', () => {
                const defaultEvaluator = new performance_kpis_1.KPIEvaluator();
                (0, vitest_1.expect)(defaultEvaluator).toBeInstanceOf(performance_kpis_1.KPIEvaluator);
            });
        });
        (0, vitest_1.describe)('KPI评估', () => {
            (0, vitest_1.test)('应该评估单个KPI', async () => {
                const fcpKPI = performance_kpis_1.performanceKPIs.find(kpi => kpi.id === 'fcp');
                mockPerformance.getEntriesByType.mockReturnValue([
                    { name: 'first-contentful-paint', startTime: 1200 }
                ]);
                const score = await evaluator.evaluateKPI(fcpKPI);
                (0, vitest_1.expect)(score).toHaveProperty('kpiId', 'fcp');
                (0, vitest_1.expect)(score).toHaveProperty('value', 1200);
                (0, vitest_1.expect)(score).toHaveProperty('score');
                (0, vitest_1.expect)(score).toHaveProperty('grade');
                (0, vitest_1.expect)(score).toHaveProperty('timestamp');
                (0, vitest_1.expect)(score.score).toBeGreaterThanOrEqual(0);
                (0, vitest_1.expect)(score.score).toBeLessThanOrEqual(100);
                (0, vitest_1.expect)(['excellent', 'good', 'fair', 'poor']).toContain(score.grade);
            });
            (0, vitest_1.test)('应该处理测量错误', async () => {
                const errorKPI = {
                    id: 'test-error',
                    name: 'Test Error',
                    category: 'runtime',
                    unit: 'ms',
                    description: 'Test error handling',
                    thresholds: { excellent: 100, good: 200, fair: 300, poor: 400 },
                    weight: 10,
                    measurement: () => { throw new Error('Measurement error'); }
                };
                const consoleSpy = vitest_1.vi.spyOn(console, 'error').mockImplementation(() => { });
                const score = await evaluator.evaluateKPI(errorKPI);
                (0, vitest_1.expect)(score.value).toBe(0);
                (0, vitest_1.expect)(consoleSpy).toHaveBeenCalledWith('Failed to measure KPI test-error:', vitest_1.expect.any(Error));
                consoleSpy.mockRestore();
            });
        });
        (0, vitest_1.describe)('得分计算', () => {
            (0, vitest_1.test)('应该正确计算时间类指标得分', () => {
                const timeKPI = performance_kpis_1.performanceKPIs.find(kpi => kpi.id === 'fcp');
                // 测试优秀值
                const excellentScore = evaluator.calculateScore(timeKPI, 800);
                (0, vitest_1.expect)(excellentScore).toBe(100);
                // 测试良好值
                const goodScore = evaluator.calculateScore(timeKPI, 1150);
                (0, vitest_1.expect)(goodScore).toBeGreaterThan(80);
                (0, vitest_1.expect)(goodScore).toBeLessThan(100);
                // 测试中等值
                const fairScore = evaluator.calculateScore(timeKPI, 2000);
                (0, vitest_1.expect)(fairScore).toBeGreaterThan(60);
                (0, vitest_1.expect)(fairScore).toBeLessThan(80);
                // 测试较差值
                const poorScore = evaluator.calculateScore(timeKPI, 3000);
                (0, vitest_1.expect)(poorScore).toBeGreaterThan(40);
                (0, vitest_1.expect)(poorScore).toBeLessThan(60);
                // 测试极差值
                const terribleScore = evaluator.calculateScore(timeKPI, 5000);
                (0, vitest_1.expect)(terribleScore).toBeLessThan(40);
            });
            (0, vitest_1.test)('应该正确计算百分比类指标得分', () => {
                const percentageKPI = performance_kpis_1.performanceKPIs.find(kpi => kpi.id === 'sync-success-rate');
                // 测试优秀值
                const excellentScore = evaluator.calculateScore(percentageKPI, 99);
                (0, vitest_1.expect)(excellentScore).toBe(100);
                // 测试良好值
                const goodScore = evaluator.calculateScore(percentageKPI, 97);
                (0, vitest_1.expect)(goodScore).toBeGreaterThan(80);
                (0, vitest_1.expect)(goodScore).toBeLessThan(100);
                // 测试中等值
                const fairScore = evaluator.calculateScore(percentageKPI, 90);
                (0, vitest_1.expect)(fairScore).toBeGreaterThan(60);
                (0, vitest_1.expect)(fairScore).toBeLessThan(80);
                // 测试较差值
                const poorScore = evaluator.calculateScore(percentageKPI, 80);
                (0, vitest_1.expect)(poorScore).toBeGreaterThan(40);
                (0, vitest_1.expect)(poorScore).toBeLessThan(60);
                // 测试极差值
                const terribleScore = evaluator.calculateScore(percentageKPI, 60);
                (0, vitest_1.expect)(terribleScore).toBeLessThan(40);
            });
        });
        (0, vitest_1.describe)('等级评定', () => {
            (0, vitest_1.test)('应该正确评定时间类指标等级', () => {
                const timeKPI = performance_kpis_1.performanceKPIs.find(kpi => kpi.id === 'fcp');
                const excellentGrade = evaluator.getGrade(timeKPI, 800);
                (0, vitest_1.expect)(excellentGrade).toBe('excellent');
                const goodGrade = evaluator.getGrade(timeKPI, 1200);
                (0, vitest_1.expect)(goodGrade).toBe('good');
                const fairGrade = evaluator.getGrade(timeKPI, 2000);
                (0, vitest_1.expect)(fairGrade).toBe('fair');
                const poorGrade = evaluator.getGrade(timeKPI, 3000);
                (0, vitest_1.expect)(poorGrade).toBe('poor');
            });
            (0, vitest_1.test)('应该正确评定百分比类指标等级', () => {
                const percentageKPI = performance_kpis_1.performanceKPIs.find(kpi => kpi.id === 'sync-success-rate');
                const excellentGrade = evaluator.getGrade(percentageKPI, 99);
                (0, vitest_1.expect)(excellentGrade).toBe('excellent');
                const goodGrade = evaluator.getGrade(percentageKPI, 97);
                (0, vitest_1.expect)(goodGrade).toBe('good');
                const fairGrade = evaluator.getGrade(percentageKPI, 90);
                (0, vitest_1.expect)(fairGrade).toBe('fair');
                const poorGrade = evaluator.getGrade(percentageKPI, 80);
                (0, vitest_1.expect)(poorGrade).toBe('poor');
            });
        });
        (0, vitest_1.describe)('全面评估', () => {
            (0, vitest_1.test)('应该评估所有KPI并计算总体得分', async () => {
                // Mock所有KPI的测量值
                performance_kpis_1.performanceKPIs.forEach(kpi => {
                    vitest_1.vi.spyOn(evaluator, 'measureKPI').mockResolvedValue(kpi.id === 'fcp' ? 1200 :
                        kpi.id === 'memory-usage' ? 75 :
                            kpi.id === 'sync-success-rate' ? 85 :
                                50 // 默认值
                    );
                });
                const result = await evaluator.evaluateAll();
                (0, vitest_1.expect)(result).toHaveProperty('overallScore');
                (0, vitest_1.expect)(result).toHaveProperty('categoryScores');
                (0, vitest_1.expect)(result).toHaveProperty('kpiScores');
                (0, vitest_1.expect)(result).toHaveProperty('timestamp');
                (0, vitest_1.expect)(result).toHaveProperty('recommendations');
                (0, vitest_1.expect)(result.overallScore).toBeGreaterThanOrEqual(0);
                (0, vitest_1.expect)(result.overallScore).toBeLessThanOrEqual(100);
                (0, vitest_1.expect)(result.kpiScores.length).toBe(performance_kpis_1.performanceKPIs.length);
            });
            (0, vitest_1.test)('应该正确计算分类得分', async () => {
                const result = await evaluator.evaluateAll();
                const categories = Object.keys(result.categoryScores);
                (0, vitest_1.expect)(categories.length).toBeGreaterThan(0);
                categories.forEach(category => {
                    (0, vitest_1.expect)(result.categoryScores[category]).toBeGreaterThanOrEqual(0);
                    (0, vitest_1.expect)(result.categoryScores[category]).toBeLessThanOrEqual(100);
                });
            });
            (0, vitest_1.test)('应该生成优化建议', async () => {
                // 设置一些较差的得分来触发建议生成
                vitest_1.vi.spyOn(evaluator, 'measureKPI').mockResolvedValue(5000); // 很差的值
                const result = await evaluator.evaluateAll();
                (0, vitest_1.expect)(Array.isArray(result.recommendations)).toBe(true);
                // 应该有一些基于较差得分的建议
                if (result.overallScore < 60) {
                    (0, vitest_1.expect)(result.recommendations.length).toBeGreaterThan(0);
                }
            });
        });
        (0, vitest_1.describe)('性能目标设置', () => {
            (0, vitest_1.test)('应该能够设置性能目标', () => {
                const targets = {
                    'fcp': 600,
                    'memory-usage': 40
                };
                evaluator.setPerformanceTargets(targets);
                const fcpKPI = evaluator['kpis'].find(kpi => kpi.id === 'fcp');
                (0, vitest_1.expect)(fcpKPI.thresholds.excellent).toBe(600);
            });
            (0, vitest_1.test)('应该按比例调整所有阈值', () => {
                const originalExcellent = performance_kpis_1.performanceKPIs[0].thresholds.excellent;
                const targets = {
                    [performance_kpis_1.performanceKPIs[0].id]: originalExcellent * 0.8 // 设置为80%
                };
                evaluator.setPerformanceTargets(targets);
                const kpi = evaluator['kpis'][0];
                (0, vitest_1.expect)(kpi.thresholds.good).toBeCloseTo(kpi.thresholds.excellent * (performance_kpis_1.performanceKPIs[0].thresholds.good / originalExcellent), 1);
                (0, vitest_1.expect)(kpi.thresholds.fair).toBeCloseTo(kpi.thresholds.excellent * (performance_kpis_1.performanceKPIs[0].thresholds.fair / originalExcellent), 1);
                (0, vitest_1.expect)(kpi.thresholds.poor).toBeCloseTo(kpi.thresholds.excellent * (performance_kpis_1.performanceKPIs[0].thresholds.poor / originalExcellent), 1);
            });
        });
        (0, vitest_1.describe)('KPI趋势分析', () => {
            (0, vitest_1.test)('应该获取KPI趋势数据', async () => {
                const trend = await evaluator.getKPITrend('fcp');
                (0, vitest_1.expect)(trend).toHaveProperty('values');
                (0, vitest_1.expect)(trend).toHaveProperty('timestamps');
                (0, vitest_1.expect)(trend).toHaveProperty('trend');
                (0, vitest_1.expect)(Array.isArray(trend.values)).toBe(true);
                (0, vitest_1.expect)(Array.isArray(trend.timestamps)).toBe(true);
                (0, vitest_1.expect)(['improving', 'stable', 'degrading']).toContain(trend.trend);
            });
        });
    });
    (0, vitest_1.describe)('全局评估器实例', () => {
        (0, vitest_1.test)('应该提供全局评估器实例', () => {
            (0, vitest_1.expect)(performance_kpis_1.kpiEvaluator).toBeInstanceOf(performance_kpis_1.KPIEvaluator);
        });
    });
    (0, vitest_1.describe)('便捷函数', () => {
        (0, vitest_1.test)('应该提供性能评估便捷函数', async () => {
            const result = await (0, performance_kpis_1.evaluatePerformance)();
            (0, vitest_1.expect)(result).toHaveProperty('overallScore');
            (0, vitest_1.expect)(result).toHaveProperty('categoryScores');
            (0, vitest_1.expect)(result).toHaveProperty('kpiScores');
            (0, vitest_1.expect)(result).toHaveProperty('timestamp');
            (0, vitest_1.expect)(result).toHaveProperty('recommendations');
        });
        (0, vitest_1.test)('应该正确获取性能等级', () => {
            const gradeA = (0, performance_kpis_1.getPerformanceGrade)(95);
            (0, vitest_1.expect)(gradeA).toEqual({
                grade: 'A',
                color: 'text-green-600',
                description: '优秀'
            });
            const gradeB = (0, performance_kpis_1.getPerformanceGrade)(85);
            (0, vitest_1.expect)(gradeB).toEqual({
                grade: 'B',
                color: 'text-blue-600',
                description: '良好'
            });
            const gradeC = (0, performance_kpis_1.getPerformanceGrade)(75);
            (0, vitest_1.expect)(gradeC).toEqual({
                grade: 'C',
                color: 'text-yellow-600',
                description: '中等'
            });
            const gradeD = (0, performance_kpis_1.getPerformanceGrade)(65);
            (0, vitest_1.expect)(gradeD).toEqual({
                grade: 'D',
                color: 'text-orange-600',
                description: '需要改进'
            });
            const gradeF = (0, performance_kpis_1.getPerformanceGrade)(55);
            (0, vitest_1.expect)(gradeF).toEqual({
                grade: 'F',
                color: 'text-red-600',
                description: '严重问题'
            });
        });
        (0, vitest_1.test)('应该处理边界值', () => {
            (0, vitest_1.expect)((0, performance_kpis_1.getPerformanceGrade)(90).grade).toBe('A');
            (0, vitest_1.expect)((0, performance_kpis_1.getPerformanceGrade)(80).grade).toBe('B');
            (0, vitest_1.expect)((0, performance_kpis_1.getPerformanceGrade)(70).grade).toBe('C');
            (0, vitest_1.expect)((0, performance_kpis_1.getPerformanceGrade)(60).grade).toBe('D');
            (0, vitest_1.expect)((0, performance_kpis_1.getPerformanceGrade)(59).grade).toBe('F');
        });
    });
    (0, vitest_1.describe)('边界情况测试', () => {
        (0, vitest_1.test)('应该处理空KPI列表', () => {
            const emptyEvaluator = new performance_kpis_1.KPIEvaluator([]);
            (0, vitest_1.expect)(async () => {
                await emptyEvaluator.evaluateAll();
            }).not.toThrow();
        });
        (0, vitest_1.test)('应该处理零权重KPI', () => {
            const zeroWeightKPI = {
                id: 'zero-weight',
                name: 'Zero Weight',
                category: 'runtime',
                unit: 'ms',
                description: 'Test zero weight',
                thresholds: { excellent: 100, good: 200, fair: 300, poor: 400 },
                weight: 0,
                measurement: () => 150
            };
            const evaluator = new performance_kpis_1.KPIEvaluator([zeroWeightKPI]);
            (0, vitest_1.expect)(async () => {
                await evaluator.evaluateAll();
            }).not.toThrow();
        });
        (0, vitest_1.test)('应该处理负值和极端值', () => {
            const evaluator = new performance_kpis_1.KPIEvaluator();
            // 测试负值得分计算
            const negativeScore = evaluator.calculateScore(performance_kpis_1.performanceKPIs[0], -100);
            (0, vitest_1.expect)(negativeScore).toBeGreaterThanOrEqual(0);
            (0, vitest_1.expect)(negativeScore).toBeLessThanOrEqual(100);
            // 测试极值得分计算
            const extremeScore = evaluator.calculateScore(performance_kpis_1.performanceKPIs[0], 100000);
            (0, vitest_1.expect)(extremeScore).toBeGreaterThanOrEqual(0);
            (0, vitest_1.expect)(extremeScore).toBeLessThan(40);
        });
    });
    (0, vitest_1.describe)('性能测试', () => {
        (0, vitest_1.test)('应该保持良好的评估性能', async () => {
            const evaluator = new performance_kpis_1.KPIEvaluator(performance_kpis_1.performanceKPIs.slice(0, 5)); // 使用5个KPI
            const start = performance.now();
            // 执行多次评估操作
            for (let i = 0; i < 100; i++) {
                await evaluator.evaluateAll();
            }
            const end = performance.now();
            const duration = end - start;
            // 100次评估操作应该在合理时间内完成
            (0, vitest_1.expect)(duration).toBeLessThan(2000); // 2秒
        });
        (0, vitest_1.test)('应该避免内存泄漏', () => {
            // 创建多个评估器实例
            const instances = [];
            for (let i = 0; i < 100; i++) {
                instances.push(new performance_kpis_1.KPIEvaluator());
            }
            // 清理
            instances.length = 0;
            // 如果没有内存泄漏，这个测试应该通过
            (0, vitest_1.expect)(true).toBe(true);
        });
    });
    (0, vitest_1.describe)('TypeScript类型检查', () => {
        (0, vitest_1.test)('应该符合TypeScript接口', () => {
            const kpi = performance_kpis_1.performanceKPIs[0];
            (0, vitest_1.expect)(kpi).toHaveProperty('id');
            (0, vitest_1.expect)(kpi).toHaveProperty('name');
            (0, vitest_1.expect)(kpi).toHaveProperty('category');
            (0, vitest_1.expect)(kpi).toHaveProperty('unit');
            (0, vitest_1.expect)(kpi).toHaveProperty('thresholds');
            (0, vitest_1.expect)(kpi).toHaveProperty('weight');
            (0, vitest_1.expect)(kpi).toHaveProperty('measurement');
            const score = {
                kpiId: 'test',
                value: 100,
                score: 90,
                grade: 'excellent',
                timestamp: Date.now()
            };
            const overallScore = {
                overallScore: 85,
                categoryScores: { loading: 80, runtime: 90 },
                kpiScores: [score],
                timestamp: Date.now(),
                recommendations: []
            };
            (0, vitest_1.expect)(typeof overallScore.overallScore).toBe('number');
            (0, vitest_1.expect)(typeof overallScore.categoryScores).toBe('object');
            (0, vitest_1.expect)(Array.isArray(overallScore.kpiScores)).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
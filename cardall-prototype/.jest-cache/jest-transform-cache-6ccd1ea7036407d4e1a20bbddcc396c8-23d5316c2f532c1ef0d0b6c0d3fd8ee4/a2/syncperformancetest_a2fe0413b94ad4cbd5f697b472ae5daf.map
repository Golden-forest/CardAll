{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\tests\\unit\\services\\sync-performance.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\tests\\unit\\services\\sync-performance.test.ts"],"sourcesContent":["import { SyncPerformanceOptimizer, type PerformanceMetrics, type BatchConfig, type AdaptiveParams } from '@/services/sync-performance'\nimport type { LocalSyncOperation } from '@/services/local-operation'\n\ndescribe('SyncPerformanceOptimizer', () => {\n  let optimizer: SyncPerformanceOptimizer\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n    jest.useFakeTimers()\n    optimizer = new SyncPerformanceOptimizer()\n  })\n\n  afterEach(() => {\n    jest.useRealTimers()\n  })\n\n  describe('初始化', () => {\n    it('应该正确初始化优化器', () => {\n      expect(optimizer).toBeDefined()\n      \n      const metrics = optimizer.getCurrentMetrics()\n      expect(metrics.totalOperations).toBe(0)\n      expect(metrics.successRate).toBe(0)\n      expect(metrics.averageResponseTime).toBe(0)\n    })\n  })\n\n  describe('性能优化操作执行', () => {\n    it('应该执行优化后的同步操作', async () => {\n      const mockOperation: LocalSyncOperation = {\n        id: 'op-1',\n        type: 'create',\n        table: 'cards',\n        data: { frontContent: 'test', backContent: 'answer' },\n        localId: 'card-1',\n        timestamp: new Date().toISOString(),\n        retryCount: 0,\n        status: 'pending',\n        localVersion: 1,\n        priority: 'normal'\n      }\n\n      // 模拟成功的操作执行\n      const mockExecutor = jest.fn().mockResolvedValue({ success: true, latency: 100 })\n\n      const result = await optimizer.executeOptimizedOperation(mockOperation, mockExecutor)\n\n      expect(result.success).toBe(true)\n      expect(result.operationId).toBe('op-1')\n      expect(result.latency).toBe(100)\n      expect(result.metrics).toBeDefined()\n    })\n\n    it('应该处理操作执行失败', async () => {\n      const mockOperation: LocalSyncOperation = {\n        id: 'op-1',\n        type: 'create',\n        table: 'cards',\n        data: { frontContent: 'test', backContent: 'answer' },\n        localId: 'card-1',\n        timestamp: new Date().toISOString(),\n        retryCount: 0,\n        status: 'pending',\n        localVersion: 1,\n        priority: 'normal'\n      }\n\n      const mockExecutor = jest.fn().mockRejectedValue(new Error('Network error'))\n\n      const result = await optimizer.executeOptimizedOperation(mockOperation, mockExecutor)\n\n      expect(result.success).toBe(false)\n      expect(result.error).toBe('Network error')\n      expect(result.retryCount).toBe(1)\n    })\n\n    it('应该跟踪活动操作', async () => {\n      const mockOperation1: LocalSyncOperation = {\n        id: 'op-1',\n        type: 'create',\n        table: 'cards',\n        data: { frontContent: 'test1' },\n        localId: 'card-1',\n        timestamp: new Date().toISOString(),\n        retryCount: 0,\n        status: 'pending',\n        localVersion: 1,\n        priority: 'normal'\n      }\n\n      const mockOperation2: LocalSyncOperation = {\n        id: 'op-2',\n        type: 'update',\n        table: 'cards',\n        data: { frontContent: 'test2' },\n        localId: 'card-2',\n        timestamp: new Date().toISOString(),\n        retryCount: 0,\n        status: 'pending',\n        localVersion: 1,\n        priority: 'normal'\n      }\n\n      const mockExecutor = jest.fn()\n        .mockResolvedValueOnce({ success: true, latency: 100 })\n        .mockResolvedValueOnce({ success: true, latency: 150 })\n\n      // 并发执行操作\n      const promise1 = optimizer.executeOptimizedOperation(mockOperation1, mockExecutor)\n      const promise2 = optimizer.executeOptimizedOperation(mockOperation2, mockExecutor)\n\n      // 检查活动操作计数\n      const activeOps = optimizer.getActiveOperationCount()\n      expect(activeOps).toBe(2)\n\n      await Promise.all([promise1, promise2])\n\n      // 操作完成后，活动操作数应该为0\n      expect(optimizer.getActiveOperationCount()).toBe(0)\n    })\n  })\n\n  describe('批量处理', () => {\n    it('应该执行批量操作', async () => {\n      const mockOperations: LocalSyncOperation[] = [\n        {\n          id: 'op-1',\n          type: 'create',\n          table: 'cards',\n          data: { frontContent: 'test1' },\n          localId: 'card-1',\n          timestamp: new Date().toISOString(),\n          retryCount: 0,\n          status: 'pending',\n          localVersion: 1,\n          priority: 'normal'\n        },\n        {\n          id: 'op-2',\n          type: 'create',\n          table: 'cards',\n          data: { frontContent: 'test2' },\n          localId: 'card-2',\n          timestamp: new Date().toISOString(),\n          retryCount: 0,\n          status: 'pending',\n          localVersion: 1,\n          priority: 'normal'\n        }\n      ]\n\n      const mockBatchExecutor = jest.fn().mockResolvedValue({\n        success: true,\n        results: [\n          { success: true, latency: 50 },\n          { success: true, latency: 75 }\n        ],\n        totalLatency: 125\n      })\n\n      const result = await optimizer.executeBatchOperations(mockOperations, mockBatchExecutor)\n\n      expect(result.success).toBe(true)\n      expect(result.results).toHaveLength(2)\n      expect(result.averageLatency).toBe(62.5)\n      expect(mockBatchExecutor).toHaveBeenCalledWith(mockOperations, expect.any(Object))\n    })\n\n    it('应该优化批量大小', async () => {\n      const largeBatchSize = 50\n      const mockOperations: LocalSyncOperation[] = Array.from({ length: largeBatchSize }, (_, i) => ({\n        id: `op-${i}`,\n        type: 'create' as const,\n        table: 'cards' as const,\n        data: { frontContent: `test${i}` },\n        localId: `card-${i}`,\n        timestamp: new Date().toISOString(),\n        retryCount: 0,\n        status: 'pending' as const,\n        localVersion: 1,\n        priority: 'normal' as const\n      }))\n\n      const mockBatchExecutor = jest.fn().mockResolvedValue({\n        success: true,\n        results: mockOperations.map(() => ({ success: true, latency: 50 })),\n        totalLatency: 2500\n      })\n\n      const result = await optimizer.executeBatchOperations(mockOperations, mockBatchExecutor)\n\n      // 应该自动分批处理\n      expect(mockBatchExecutor).toHaveBeenCalled()\n      expect(result.totalOperations).toBe(largeBatchSize)\n    })\n\n    it('应该处理批量操作中的部分失败', async () => {\n      const mockOperations: LocalSyncOperation[] = [\n        {\n          id: 'op-1',\n          type: 'create',\n          table: 'cards',\n          data: { frontContent: 'test1' },\n          localId: 'card-1',\n          timestamp: new Date().toISOString(),\n          retryCount: 0,\n          status: 'pending',\n          localVersion: 1,\n          priority: 'normal'\n        },\n        {\n          id: 'op-2',\n          type: 'create',\n          table: 'cards',\n          data: { frontContent: 'test2' },\n          localId: 'card-2',\n          timestamp: new Date().toISOString(),\n          retryCount: 0,\n          status: 'pending',\n          localVersion: 1,\n          priority: 'normal'\n        }\n      ]\n\n      const mockBatchExecutor = jest.fn().mockResolvedValue({\n        success: false,\n        results: [\n          { success: true, latency: 50 },\n          { success: false, latency: 100, error: 'Validation failed' }\n        ],\n        totalLatency: 150,\n        error: 'Partial batch failure'\n      })\n\n      const result = await optimizer.executeBatchOperations(mockOperations, mockBatchExecutor)\n\n      expect(result.success).toBe(false)\n      expect(result.successfulOperations).toBe(1)\n      expect(result.failedOperations).toBe(1)\n    })\n  })\n\n  describe('自适应参数调整', () => {\n    it('应该根据性能自动调整批量大小', async () => {\n      // 模拟良好的性能\n      const goodResults = Array.from({ length: 10 }, () => ({\n        success: true,\n        latency: 50\n      }))\n\n      goodResults.forEach(result => {\n        optimizer.recordOperationResult(result)\n      })\n\n      // 触发自适应调整\n      await optimizer.adaptParameters()\n\n      const params = optimizer.getAdaptiveParams()\n      expect(params.currentBatchSize).toBeGreaterThan(optimizer.config.batch.idealBatchSize)\n    })\n\n    it('应该在高延迟时减小批量大小', async () => {\n      // 模拟高延迟\n      const highLatencyResults = Array.from({ length: 5 }, () => ({\n        success: true,\n        latency: 2000 // 高延迟\n      }))\n\n      highLatencyResults.forEach(result => {\n        optimizer.recordOperationResult(result)\n      })\n\n      await optimizer.adaptParameters()\n\n      const params = optimizer.getAdaptiveParams()\n      expect(params.currentBatchSize).toBeLessThan(optimizer.config.batch.idealBatchSize)\n    })\n\n    it('应该在错误率高时减少并发数', async () => {\n      // 模拟高错误率\n      const errorResults = Array.from({ length: 10 }, () => ({\n        success: false,\n        error: 'Network timeout'\n      }))\n\n      errorResults.forEach(result => {\n        optimizer.recordOperationResult(result)\n      })\n\n      await optimizer.adaptParameters()\n\n      const params = optimizer.getAdaptiveParams()\n      expect(params.currentConcurrency).toBeLessThan(optimizer.config.throttle.maxConcurrentOperations)\n    })\n\n    it('应该在网络条件改善时恢复参数', async () => {\n      // 先模拟差的性能\n      const badResults = Array.from({ length: 5 }, () => ({\n        success: false,\n        latency: 3000,\n        error: 'Timeout'\n      }))\n\n      badResults.forEach(result => {\n        optimizer.recordOperationResult(result)\n      })\n\n      await optimizer.adaptParameters()\n      const badParams = optimizer.getAdaptiveParams()\n\n      // 然后模拟好的性能\n      const goodResults = Array.from({ length: 10 }, () => ({\n        success: true,\n        latency: 100\n      }))\n\n      goodResults.forEach(result => {\n        optimizer.recordOperationResult(result)\n      })\n\n      await optimizer.adaptParameters()\n      const goodParams = optimizer.getAdaptiveParams()\n\n      expect(goodParams.currentBatchSize).toBeGreaterThan(badParams.currentBatchSize)\n      expect(goodParams.currentConcurrency).toBeGreaterThan(badParams.currentConcurrency)\n    })\n  })\n\n  describe('性能监控', () => {\n    it('应该记录操作结果', () => {\n      const result = {\n        success: true,\n        latency: 150,\n        operationId: 'op-1'\n      }\n\n      optimizer.recordOperationResult(result)\n\n      const metrics = optimizer.getCurrentMetrics()\n      expect(metrics.totalOperations).toBe(1)\n      expect(metrics.successfulOperations).toBe(1)\n      expect(metrics.failedOperations).toBe(0)\n      expect(metrics.averageResponseTime).toBe(150)\n    })\n\n    it('应该计算正确的成功率', () => {\n      const results = [\n        { success: true, latency: 100 },\n        { success: true, latency: 120 },\n        { success: false, latency: 200, error: 'Error' },\n        { success: true, latency: 80 }\n      ]\n\n      results.forEach(result => {\n        optimizer.recordOperationResult(result)\n      })\n\n      const metrics = optimizer.getCurrentMetrics()\n      expect(metrics.totalOperations).toBe(4)\n      expect(metrics.successfulOperations).toBe(3)\n      expect(metrics.failedOperations).toBe(1)\n      expect(metrics.successRate).toBe(75)\n      expect(metrics.averageResponseTime).toBe(125) // (100+120+200+80)/4\n    })\n\n    it('应该跟踪最近性能', () => {\n      const recentResults = Array.from({ length: 20 }, (_, i) => ({\n        success: i % 4 !== 0, // 75% 成功率\n        latency: 100 + i * 10\n      }))\n\n      recentResults.forEach(result => {\n        optimizer.recordOperationResult(result)\n      })\n\n      const recentMetrics = optimizer.getRecentPerformance(10) // 最近10个操作\n      expect(recentMetrics.totalOperations).toBe(10)\n      expect(recentMetrics.successRate).toBe(75)\n    })\n  })\n\n  describe('节流控制', () => {\n    it('应该限制并发操作数量', async () => {\n      const mockOperation: LocalSyncOperation = {\n        id: 'op-1',\n        type: 'create',\n        table: 'cards',\n        data: { frontContent: 'test' },\n        localId: 'card-1',\n        timestamp: new Date().toISOString(),\n        retryCount: 0,\n        status: 'pending',\n        localVersion: 1,\n        priority: 'normal'\n      }\n\n      const mockExecutor = jest.fn().mockResolvedValue({ success: true, latency: 100 })\n\n      // 设置低并发限制\n      optimizer.updateConfig({\n        throttle: {\n          maxConcurrentOperations: 1,\n          rateLimitWindow: 1000,\n          maxOperationsPerWindow: 10\n        }\n      })\n\n      // 启动多个操作\n      const promises = []\n      for (let i = 0; i < 3; i++) {\n        const op = { ...mockOperation, id: `op-${i}`, localId: `card-${i}` }\n        promises.push(optimizer.executeOptimizedOperation(op, mockExecutor))\n      }\n\n      // 在同一时间，应该只有一个操作在执行\n      expect(optimizer.getActiveOperationCount()).toBeLessThanOrEqual(1)\n\n      await Promise.all(promises)\n    })\n\n    it('应该实施速率限制', async () => {\n      const mockOperation: LocalSyncOperation = {\n        id: 'op-1',\n        type: 'create',\n        table: 'cards',\n        data: { frontContent: 'test' },\n        localId: 'card-1',\n        timestamp: new Date().toISOString(),\n        retryCount: 0,\n        status: 'pending',\n        localVersion: 1,\n        priority: 'normal'\n      }\n\n      const mockExecutor = jest.fn().mockResolvedValue({ success: true, latency: 50 })\n\n      // 设置严格的速率限制\n      optimizer.updateConfig({\n        throttle: {\n          maxConcurrentOperations: 5,\n          rateLimitWindow: 1000,\n          maxOperationsPerWindow: 2\n        }\n      })\n\n      // 快速执行多个操作\n      const promises = []\n      for (let i = 0; i < 5; i++) {\n        const op = { ...mockOperation, id: `op-${i}`, localId: `card-${i}` }\n        promises.push(optimizer.executeOptimizedOperation(op, mockExecutor))\n      }\n\n      // 前两个操作应该立即执行\n      await jest.advanceTimersByTime(0)\n      expect(optimizer.getActiveOperationCount()).toBe(2)\n\n      // 等待速率限制窗口重置\n      await jest.advanceTimersByTime(1001)\n      \n      // 后续操作应该能够执行\n      await Promise.all(promises)\n    })\n  })\n\n  describe('性能优化建议', () => {\n    it('应该提供性能优化建议', () => {\n      // 模拟中等性能\n      const results = [\n        { success: true, latency: 200 },\n        { success: true, latency: 250 },\n        { success: false, latency: 500, error: 'Timeout' },\n        { success: true, latency: 180 }\n      ]\n\n      results.forEach(result => {\n        optimizer.recordOperationResult(result)\n      })\n\n      const recommendations = optimizer.getPerformanceRecommendations()\n\n      expect(recommendations).toBeDefined()\n      expect(Array.isArray(recommendations.suggestions)).toBe(true)\n      expect(recommendations.currentHealth).toBeDefined()\n      expect(typeof recommendations.currentHealth.score).toBe('number')\n    })\n\n    it('应该在性能良好时建议增加吞吐量', () => {\n      const goodResults = Array.from({ length: 10 }, () => ({\n        success: true,\n        latency: 50\n      }))\n\n      goodResults.forEach(result => {\n        optimizer.recordOperationResult(result)\n      })\n\n      const recommendations = optimizer.getPerformanceRecommendations()\n      \n      expect(recommendations.currentHealth.score).toBeGreaterThan(80)\n      expect(recommendations.suggestions.some(s => s.includes('increase') || s.includes('optimize'))).toBe(true)\n    })\n\n    it('应该在性能差时建议减少负载', () => {\n      const badResults = Array.from({ length: 10 }, () => ({\n        success: false,\n        latency: 1000,\n        error: 'Network error'\n      }))\n\n      badResults.forEach(result => {\n        optimizer.recordOperationResult(result)\n      })\n\n      const recommendations = optimizer.getPerformanceRecommendations()\n      \n      expect(recommendations.currentHealth.score).toBeLessThan(50)\n      expect(recommendations.suggestions.some(s => s.includes('reduce') || s.includes('decrease'))).toBe(true)\n    })\n  })\n\n  describe('内存管理', () => {\n    it('应该定期清理历史数据', () => {\n      // 添加大量历史数据\n      const oldResults = Array.from({ length: 1000 }, (_, i) => ({\n        success: true,\n        latency: 100,\n        timestamp: Date.now() - (i * 1000) // 每秒一个结果\n      }))\n\n      oldResults.forEach(result => {\n        optimizer.recordOperationResult(result)\n      })\n\n      // 触发清理\n      optimizer.cleanupOldData()\n\n      const metrics = optimizer.getCurrentMetrics()\n      // 应该只保留最近的数据\n      expect(metrics.totalOperations).toBeLessThan(1000)\n    })\n\n    it('应该提供内存使用统计', () => {\n      // 添加一些测试数据\n      const results = Array.from({ length: 50 }, (_, i) => ({\n        success: true,\n        latency: 100 + i\n      }))\n\n      results.forEach(result => {\n        optimizer.recordOperationResult(result)\n      })\n\n      const memoryStats = optimizer.getMemoryStats()\n\n      expect(memoryStats.totalHistorySize).toBe(50)\n      expect(memoryStats.recentHistorySize).toBeLessThanOrEqual(50)\n      expect(memoryStats.estimatedMemoryUsage).toBeGreaterThan(0)\n    })\n  })\n\n  describe('配置管理', () => {\n    it('应该能够更新性能配置', () => {\n      const newConfig = {\n        monitoring: {\n          sampleSize: 200,\n          historySize: 1000,\n          autoAdaptInterval: 60000\n        },\n        batch: {\n          idealBatchSize: 25,\n          maxBatchSize: 100,\n          minBatchSize: 5,\n          adaptiveEnabled: true\n        },\n        throttle: {\n          maxConcurrentOperations: 5,\n          rateLimitWindow: 2000,\n          maxOperationsPerWindow: 20,\n          adaptiveThrottling: true\n        }\n      }\n\n      optimizer.updateConfig(newConfig)\n\n      // 验证配置已更新\n      expect(optimizer.config).toMatchObject(newConfig)\n    })\n\n    it('应该验证配置参数', () => {\n      const invalidConfig = {\n        batch: {\n          idealBatchSize: -1,\n          maxBatchSize: 0\n        }\n      }\n\n      expect(() => optimizer.updateConfig(invalidConfig as any)).toThrow()\n    })\n\n    it('应该重置为默认配置', () => {\n      // 修改一些配置\n      optimizer.updateConfig({\n        batch: { idealBatchSize: 50 }\n      })\n\n      // 重置\n      optimizer.resetToDefaults()\n\n      // 验证已恢复默认值\n      expect(optimizer.config.batch.idealBatchSize).toBe(20)\n    })\n  })\n\n  describe('错误处理', () => {\n    it('应该处理记录结果时的异常', () => {\n      // 使用无效的结果对象\n      const invalidResult = null as any\n      \n      // 应该不会抛出异常\n      expect(() => {\n        optimizer.recordOperationResult(invalidResult)\n      }).not.toThrow()\n    })\n\n    it('应该处理自适应调整中的异常', async () => {\n      // 模拟自适应过程中的异常\n      jest.spyOn(optimizer as any, 'calculateNewBatchSize').mockImplementation(() => {\n        throw new Error('Calculation error')\n      })\n\n      // 应该优雅地处理异常\n      await expect(optimizer.adaptParameters()).resolves.not.toThrow()\n    })\n\n    it('应该在操作失败时记录错误详情', async () => {\n      const mockOperation: LocalSyncOperation = {\n        id: 'op-1',\n        type: 'create',\n        table: 'cards',\n        data: { frontContent: 'test' },\n        localId: 'card-1',\n        timestamp: new Date().toISOString(),\n        retryCount: 0,\n        status: 'pending',\n        localVersion: 1,\n        priority: 'normal'\n      }\n\n      const mockExecutor = jest.fn().mockRejectedValue(new Error('Database connection failed'))\n\n      const result = await optimizer.executeOptimizedOperation(mockOperation, mockExecutor)\n\n      expect(result.success).toBe(false)\n      expect(result.error).toBeDefined()\n      expect(result.retryCount).toBe(1)\n\n      const metrics = optimizer.getCurrentMetrics()\n      expect(metrics.failedOperations).toBe(1)\n    })\n  })\n})"],"version":3}
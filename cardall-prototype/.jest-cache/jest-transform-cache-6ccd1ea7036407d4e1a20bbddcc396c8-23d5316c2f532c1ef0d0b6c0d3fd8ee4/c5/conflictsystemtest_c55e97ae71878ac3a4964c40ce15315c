f62a1abd0985ee2fb503839786daeb04
"use strict";
/**
 * 冲突系统测试
 *
 * 测试冲突检测、解决和UI交互的完整流程
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Mock 同步服务
jest.mock('@/services/core/sync/unified-sync.service', () => ({
    unifiedSyncService: {
        getStatus: jest.fn(),
        getConflicts: jest.fn(),
        getConflict: jest.fn(),
        resolveConflict: jest.fn(),
        autoResolveConflicts: jest.fn(),
        sync: jest.fn(),
        on: jest.fn(),
        off: jest.fn()
    }
}));
// Mock 性能监控服务
jest.mock('@/services/ui/performance-monitor', () => ({
    performanceMonitor: {
        startConflictDetection: jest.fn(),
        startConflictResolution: jest.fn(),
        startBatchOperation: jest.fn(),
        trackUserInteraction: jest.fn(),
        getRealtimeMetrics: jest.fn()
    }
}));
const React = __importStar(require("react"));
const react_1 = require("@testing-library/react");
const conflict_panel_1 = require("@/components/conflict/conflict-panel");
const use_conflicts_1 = require("@/hooks/use-conflicts");
const unified_sync_service_1 = require("@/services/core/sync/unified-sync.service");
const performance_monitor_1 = require("@/services/ui/performance-monitor");
describe('ConflictSystem', () => {
    const mockConflicts = [
        {
            id: 'conflict_1',
            type: 'card_content',
            entityType: 'card',
            entityId: 'card_1',
            timestamp: new Date('2024-01-01T10:00:00'),
            sourceDevice: 'device_1',
            severity: 'high',
            status: 'pending',
            createdAt: new Date('2024-01-01T10:00:00'),
            localVersion: {
                content: {
                    frontContent: { title: '本地标题', content: '本地内容' },
                    backContent: { title: '背面本地', content: '背面内容' }
                }
            },
            remoteVersion: {
                content: {
                    frontContent: { title: '远程标题', content: '远程内容' },
                    backContent: { title: '背面远程', content: '背面内容' }
                }
            },
            conflictFields: ['title', 'content']
        },
        {
            id: 'conflict_2',
            type: 'folder_name',
            entityType: 'folder',
            entityId: 'folder_1',
            timestamp: new Date('2024-01-01T11:00:00'),
            sourceDevice: 'device_2',
            severity: 'medium',
            status: 'pending',
            createdAt: new Date('2024-01-01T11:00:00'),
            localVersion: { name: '本地文件夹名' },
            remoteVersion: { name: '远程文件夹名' }
        }
    ];
    const mockSyncStatus = {
        isSyncing: false,
        currentSession: null,
        pendingOperations: 2,
        conflicts: 2,
        hasConflicts: true,
        lastSyncTime: new Date('2024-01-01T09:00:00'),
        networkStatus: { online: true },
        totalSyncs: 10,
        successfulSyncs: 8,
        failedSyncs: 2,
        conflictsArray: mockConflicts
    };
    beforeEach(() => {
        jest.clearAllMocks();
        unified_sync_service_1.unifiedSyncService.getStatus.mockReturnValue(mockSyncStatus);
        unified_sync_service_1.unifiedSyncService.getConflicts.mockReturnValue(mockConflicts);
        unified_sync_service_1.unifiedSyncService.getConflict.mockImplementation((id) => mockConflicts.find(c => c.id === id));
        unified_sync_service_1.unifiedSyncService.resolveConflict.mockResolvedValue(true);
        unified_sync_service_1.unifiedSyncService.autoResolveConflicts.mockResolvedValue(1);
        performance_monitor_1.performanceMonitor.getRealtimeMetrics.mockReturnValue({
            renderTime: 50,
            memoryUsage: 50 * 1024 * 1024,
            networkLatency: 100
        });
    });
    describe('ConflictPanel', () => {
        it('应该正确渲染冲突面板', () => {
            (0, react_1.render)(React.createElement(conflict_panel_1.ConflictPanel, {
                isOpen: true,
                onClose: jest.fn()
            }));
            expect(react_1.screen.getByText('冲突管理中心')).toBeInTheDocument();
            expect(react_1.screen.getByText('2 待解决')).toBeInTheDocument();
            expect(react_1.screen.getByText('在线')).toBeInTheDocument();
        });
        it('应该显示冲突列表', () => {
            (0, react_1.render)(React.createElement(conflict_panel_1.ConflictPanel, {
                isOpen: true,
                onClose: jest.fn()
            }));
            expect(react_1.screen.getByText('本地标题')).toBeInTheDocument();
            expect(react_1.screen.getByText('远程标题')).toBeInTheDocument();
            expect(react_1.screen.getByText('本地文件夹名')).toBeInTheDocument();
        });
        it('应该支持搜索冲突', async () => {
            (0, react_1.render)(React.createElement(conflict_panel_1.ConflictPanel, {
                isOpen: true,
                onClose: jest.fn()
            }));
            const searchInput = react_1.screen.getByPlaceholderText('搜索冲突...');
            react_1.fireEvent.change(searchInput, { target: { value: '文件夹' } });
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('本地文件夹名')).toBeInTheDocument();
                expect(react_1.screen.queryByText('本地标题')).not.toBeInTheDocument();
            });
        });
        it('应该支持过滤冲突', async () => {
            (0, react_1.render)(React.createElement(conflict_panel_1.ConflictPanel, {
                isOpen: true,
                onClose: jest.fn()
            }));
            // 点击高优先级过滤
            const highPriorityButton = react_1.screen.getByText('高优先级');
            react_1.fireEvent.click(highPriorityButton);
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('本地标题')).toBeInTheDocument();
                expect(react_1.screen.queryByText('本地文件夹名')).not.toBeInTheDocument();
            });
        });
        it('应该支持选择多个冲突', async () => {
            (0, react_1.render)(React.createElement(conflict_panel_1.ConflictPanel, {
                isOpen: true,
                onClose: jest.fn()
            }));
            const checkboxes = react_1.screen.getAllByRole('checkbox');
            react_1.fireEvent.click(checkboxes[0]);
            react_1.fireEvent.click(checkboxes[1]);
            expect(react_1.screen.getByText('已选择 2 个冲突')).toBeInTheDocument();
        });
        it('应该支持批量解决冲突', async () => {
            (0, react_1.render)(React.createElement(conflict_panel_1.ConflictPanel, {
                isOpen: true,
                onClose: jest.fn()
            }));
            // 选择两个冲突
            const checkboxes = react_1.screen.getAllByRole('checkbox');
            react_1.fireEvent.click(checkboxes[0]);
            react_1.fireEvent.click(checkboxes[1]);
            // 批量保留本地版本
            const batchLocalButton = react_1.screen.getByText('批量保留本地');
            react_1.fireEvent.click(batchLocalButton);
            await (0, react_1.waitFor)(() => {
                expect(unified_sync_service_1.unifiedSyncService.resolveConflict).toHaveBeenCalledTimes(2);
            });
        });
        it('应该支持查看冲突详情', async () => {
            (0, react_1.render)(React.createElement(conflict_panel_1.ConflictPanel, {
                isOpen: true,
                onClose: jest.fn()
            }));
            const viewDetailButton = react_1.screen.getAllByText('查看详情')[0];
            react_1.fireEvent.click(viewDetailButton);
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('冲突详情')).toBeInTheDocument();
            });
        });
        it('应该支持刷新冲突列表', async () => {
            (0, react_1.render)(React.createElement(conflict_panel_1.ConflictPanel, {
                isOpen: true,
                onClose: jest.fn()
            }));
            const refreshButton = react_1.screen.getByText('刷新');
            react_1.fireEvent.click(refreshButton);
            await (0, react_1.waitFor)(() => {
                expect(unified_sync_service_1.unifiedSyncService.getStatus).toHaveBeenCalled();
            });
        });
        it('应该正确处理同步状态', async () => {
            unified_sync_service_1.unifiedSyncService.getStatus.mockReturnValue({
                ...mockSyncStatus,
                isSyncing: true,
                pendingOperations: 5
            });
            (0, react_1.render)(React.createElement(conflict_panel_1.ConflictPanel, {
                isOpen: true,
                onClose: jest.fn()
            }));
            expect(react_1.screen.getByText('同步中...')).toBeInTheDocument();
            expect(react_1.screen.getByText('5 待同步')).toBeInTheDocument();
        });
        it('应该正确处理离线状态', async () => {
            unified_sync_service_1.unifiedSyncService.getStatus.mockReturnValue({
                ...mockSyncStatus,
                networkStatus: { online: false }
            });
            (0, react_1.render)(React.createElement(conflict_panel_1.ConflictPanel, {
                isOpen: true,
                onClose: jest.fn()
            }));
            expect(react_1.screen.getByText('离线')).toBeInTheDocument();
        });
    });
    describe('useConflicts Hook', () => {
        let hookResult;
        const TestComponent = () => {
            hookResult = (0, use_conflicts_1.useConflicts)();
            return React.createElement('div', null, 'Test');
        };
        beforeEach(() => {
            (0, react_1.render)(React.createElement(TestComponent));
        });
        it('应该提供正确的状态', () => {
            expect(hookResult.conflicts).toEqual(mockConflicts);
            expect(hookResult.isResolving).toBe(false);
            expect(hookResult.isLoading).toBe(false);
            expect(hookResult.error).toBe(null);
        });
        it('应该提供统计信息', () => {
            const stats = hookResult.getStats();
            expect(stats.totalConflicts).toBe(2);
            expect(stats.pendingConflicts).toBe(2);
            expect(stats.resolvedConflicts).toBe(0);
        });
        it('应该提供过滤方法', () => {
            const pendingConflicts = hookResult.getPendingConflicts();
            expect(pendingConflicts).toHaveLength(2);
            const highPriorityConflicts = hookResult.getHighPriorityConflicts();
            expect(highPriorityConflicts).toHaveLength(1);
        });
        it('应该支持解决冲突', async () => {
            await hookResult.resolveConflict('conflict_1', {
                type: 'local',
                reason: '保留本地版本'
            });
            expect(unified_sync_service_1.unifiedSyncService.resolveConflict).toHaveBeenCalledWith('conflict_1', 'local', undefined);
        });
        it('应该支持批量解决冲突', async () => {
            await hookResult.batchResolveConflicts(['conflict_1', 'conflict_2'], {
                type: 'local',
                reason: '批量保留本地'
            });
            expect(unified_sync_service_1.unifiedSyncService.resolveConflict).toHaveBeenCalledTimes(2);
        });
        it('应该支持自动解决冲突', async () => {
            const resolvedCount = await hookResult.autoResolveConflicts();
            expect(unified_sync_service_1.unifiedSyncService.autoResolveConflicts).toHaveBeenCalled();
            expect(resolvedCount).toBe(1);
        });
        it('应该支持检测新冲突', async () => {
            await hookResult.detectConflicts();
            expect(unified_sync_service_1.unifiedSyncService.sync).toHaveBeenCalledWith({
                type: 'incremental',
                direction: 'bidirectional'
            });
        });
        it('应该支持获取冲突详情', async () => {
            const details = await hookResult.getConflictDetails('conflict_1');
            expect(details).toBeTruthy();
            expect(details?.id).toBe('conflict_1');
        });
        it('应该正确处理错误', async () => {
            unified_sync_service_1.unifiedSyncService.resolveConflict.mockRejectedValue(new Error('解决失败'));
            await hookResult.resolveConflict('conflict_1', {
                type: 'local',
                reason: '测试'
            });
            expect(hookResult.error).toBe('解决失败');
        });
    });
    describe('性能监控集成', () => {
        it('应该在冲突解决时跟踪性能', async () => {
            const { result } = (0, react_1.renderHook)(() => (0, use_conflicts_1.useConflicts)(), {
                wrapper: ({ children }) => (React.createElement(ConflictPanelProvider, null, children))
            });
            await result.current.resolveConflict('conflict_1', {
                type: 'local',
                reason: '测试'
            });
            expect(performance_monitor_1.performanceMonitor.startConflictResolution).toHaveBeenCalled();
            expect(performance_monitor_1.performanceMonitor.trackUserInteraction).toHaveBeenCalledWith('resolve_conflict', expect.any(Number), true);
        });
        it('应该在批量操作时跟踪性能', async () => {
            const { result } = (0, react_1.renderHook)(() => (0, use_conflicts_1.useConflicts)(), {
                wrapper: ({ children }) => (React.createElement(ConflictPanelProvider, null, children))
            });
            await result.current.batchResolveConflicts(['conflict_1'], {
                type: 'local',
                reason: '测试'
            });
            expect(performance_monitor_1.performanceMonitor.startBatchOperation).toHaveBeenCalled();
        });
    });
    describe('错误处理', () => {
        it('应该处理网络错误', async () => {
            unified_sync_service_1.unifiedSyncService.resolveConflict.mockRejectedValue(new Error('网络连接失败'));
            (0, react_1.render)(React.createElement(conflict_panel_1.ConflictPanel, {
                isOpen: true,
                onClose: jest.fn()
            }));
            const resolveButton = react_1.screen.getAllByText('保留本地')[0];
            react_1.fireEvent.click(resolveButton);
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('网络连接失败')).toBeInTheDocument();
            });
        });
        it('应该处理权限错误', async () => {
            unified_sync_service_1.unifiedSyncService.resolveConflict.mockRejectedValue(new Error('权限不足'));
            (0, react_1.render)(React.createElement(conflict_panel_1.ConflictPanel, {
                isOpen: true,
                onClose: jest.fn()
            }));
            const resolveButton = react_1.screen.getAllByText('保留本地')[0];
            react_1.fireEvent.click(resolveButton);
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('权限不足')).toBeInTheDocument();
            });
        });
        it('应该处理并发冲突', async () => {
            unified_sync_service_1.unifiedSyncService.resolveConflict.mockRejectedValue(new Error('冲突已被其他用户解决'));
            (0, react_1.render)(React.createElement(conflict_panel_1.ConflictPanel, {
                isOpen: true,
                onClose: jest.fn()
            }));
            const resolveButton = react_1.screen.getAllByText('保留本地')[0];
            react_1.fireEvent.click(resolveButton);
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('冲突已被其他用户解决')).toBeInTheDocument();
            });
        });
    });
    describe('可访问性', () => {
        it('应该支持键盘导航', () => {
            (0, react_1.render)(React.createElement(conflict_panel_1.ConflictPanel, {
                isOpen: true,
                onClose: jest.fn()
            }));
            const firstConflict = react_1.screen.getByText('本地标题').closest('div');
            react_1.fireEvent.keyDown(firstConflict, { key: 'Enter' });
            expect(react_1.screen.getByText('查看详情')).toBeInTheDocument();
        });
        it('应该提供适当的ARIA标签', () => {
            (0, react_1.render)(React.createElement(conflict_panel_1.ConflictPanel, {
                isOpen: true,
                onClose: jest.fn()
            }));
            expect(react_1.screen.getByRole('dialog')).toHaveAttribute('aria-modal', 'true');
            expect(react_1.screen.getByRole('dialog')).toHaveAttribute('aria-labelledby', expect.any(String));
        });
        it('应该支持屏幕阅读器', () => {
            (0, react_1.render)(React.createElement(conflict_panel_1.ConflictPanel, {
                isOpen: true,
                onClose: jest.fn()
            }));
            const statusElement = react_1.screen.getByText('2 待解决');
            expect(statusElement).toHaveAttribute('aria-live', 'polite');
        });
    });
});
// 辅助组件
const ConflictPanelProvider = ({ children }) => {
    return React.createElement('div', null, children);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
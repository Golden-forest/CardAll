{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\data-migration-tool.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\data-migration-tool.ts"],"sourcesContent":["import { db, DbCard, DbFolder, DbTag, DbImage, AppSettings, OfflineSnapshot } from './database-unified'\nimport { Card, Folder, Tag, ImageData } from '@/types/card'\nimport { fileSystemService } from './file-system'\n\n// ============================================================================\n// 数据迁移工具 - 安全、可靠的数据迁移机制\n// ============================================================================\n\nexport interface MigrationSource {\n  type: 'localStorage' | 'database-simple' | 'database-full' | 'cloud' | 'backup'\n  version?: string\n  metadata?: any\n  path?: string // 备份文件路径\n}\n\nexport interface MigrationTarget {\n  version: string\n  database: string\n  schema: Record<string, any>\n}\n\nexport interface MigrationStep {\n  id: string\n  name: string\n  description: string\n  type: 'data' | 'schema' | 'validation' | 'cleanup' | 'backup' | 'restore'\n  priority: 'critical' | 'high' | 'medium' | 'low'\n  estimatedTime: number // 毫秒\n  required: boolean\n  retryCount?: number\n  maxRetries?: number\n}\n\nexport interface MigrationPlan {\n  id: string\n  source: MigrationSource\n  target: MigrationTarget\n  steps: MigrationStep[]\n  estimatedTime: number\n  backupRequired: boolean\n  rollbackEnabled: boolean\n  validationLevel: 'basic' | 'strict' | 'comprehensive'\n}\n\nexport interface MigrationResult {\n  success: boolean\n  planId: string\n  executedAt: Date\n  duration: number\n  stepsCompleted: number\n  totalSteps: number\n  migratedCards: number\n  migratedFolders: number\n  migratedTags: number\n  migratedImages: number\n  migratedSettings: number\n  dataSize: number\n  errors: string[]\n  warnings: string[]\n  rollbackPoint?: string\n  validationPassed: boolean\n}\n\nexport interface MigrationProgress {\n  planId: string\n  status: 'pending' | 'running' | 'paused' | 'completed' | 'failed' | 'rolled_back'\n  progress: number // 0-100\n  currentStep: string\n  currentStepProgress: number\n  startTime?: Date\n  estimatedEndTime?: Date\n  speed: number // 记录/秒\n  remainingTime?: number\n}\n\nexport interface DataBackup {\n  id: string\n  timestamp: Date\n  type: 'full' | 'incremental' | 'differential'\n  source: MigrationSource\n  data: any\n  checksum: string\n  size: number\n  compressedSize: number\n  encrypted: boolean\n  metadata: {\n    deviceInfo: string\n    version: string\n    stats: any\n  }\n}\n\nexport interface ValidationReport {\n  success: boolean\n  integrity: {\n    cardsValid: number\n    cardsInvalid: number\n    foldersValid: number\n    foldersInvalid: number\n    tagsValid: number\n    tagsInvalid: number\n    imagesValid: number\n    imagesInvalid: number\n  }\n  consistency: {\n    referencesValid: boolean\n    duplicatesFound: number\n    orphansFound: number\n  }\n  performance: {\n    totalTime: number\n    dataSize: number\n    throughput: number // MB/s\n  }\n  issues: string[]\n  recommendations: string[]\n}\n\n/**\n * 统一数据迁移工具\n * 提供安全、可靠的数据迁移机制\n */\nclass DataMigrationTool {\n  private isMigrating = false\n  private currentPlan: MigrationPlan | null = null\n  private progressCallbacks: Set<(progress: MigrationProgress) => void> = new Set()\n  private migrationQueue: MigrationPlan[] = []\n  private activeMigrations = new Map<string, MigrationProgress>()\n  private retryDelays = [1000, 2000, 5000, 10000, 30000] // 重试延迟\n\n  /**\n   * 分析数据源并创建迁移计划\n   */\n  async analyzeAndCreatePlan(source: MigrationSource): Promise<MigrationPlan> {\n    console.log(`Analyzing migration source: ${source.type}`)\n\n    const sourceData = await this.analyzeDataSource(source)\n    const target: MigrationTarget = {\n      version: '4.0.0',\n      database: 'CardAllUnifiedDatabase',\n      schema: await this.getTargetSchema()\n    }\n\n    const steps = this.createMigrationSteps(source, sourceData, target)\n\n    const plan: MigrationPlan = {\n      id: crypto.randomUUID(),\n      source,\n      target,\n      steps,\n      estimatedTime: steps.reduce((total, step) => total + step.estimatedTime, 0),\n      backupRequired: this.needsBackup(source),\n      rollbackEnabled: true,\n      validationLevel: this.getValidationLevel(source)\n    }\n\n    console.log(`Migration plan created: ${plan.id}`)\n    return plan\n  }\n\n  /**\n   * 分析数据源\n   */\n  private async analyzeDataSource(source: MigrationSource): Promise<any> {\n    switch (source.type) {\n      case 'localStorage':\n        return await this.analyzeLocalStorage()\n      case 'database-simple':\n        return await this.analyzeSimpleDatabase()\n      case 'database-full':\n        return await this.analyzeFullDatabase()\n      case 'backup':\n        return await this.analyzeBackup(source.path!)\n      case 'cloud':\n        return await this.analyzeCloudSource()\n      default:\n        throw new Error(`Unknown migration source: ${source.type}`)\n    }\n  }\n\n  /**\n   * 分析localStorage数据源\n   */\n  private async analyzeLocalStorage(): Promise<any> {\n    const data: any = {}\n\n    // 分析卡片数据\n    const cardsData = localStorage.getItem('cardall-cards')\n    if (cardsData) {\n      try {\n        data.cards = JSON.parse(cardsData)\n        data.cardCount = data.cards.length\n        data.hasImages = data.cards.some((card: Card) =>\n          card.frontContent.images.length > 0 || card.backContent.images.length > 0\n        )\n      } catch (error) {\n        console.warn('Failed to parse cards data:', error)\n      }\n    }\n\n    // 分析文件夹数据\n    const foldersData = localStorage.getItem('cardall-folders')\n    if (foldersData) {\n      try {\n        data.folders = JSON.parse(foldersData)\n        data.folderCount = data.folders.length\n      } catch (error) {\n        console.warn('Failed to parse folders data:', error)\n      }\n    }\n\n    // 分析标签数据\n    const tagsData = localStorage.getItem('cardall-tags')\n    if (tagsData) {\n      try {\n        data.tags = JSON.parse(tagsData)\n        data.tagCount = data.tags.length\n      } catch (error) {\n        console.warn('Failed to parse tags data:', error)\n      }\n    }\n\n    // 分析设置数据\n    const hiddenTags = localStorage.getItem('cardall-hidden-tags')\n    if (hiddenTags) {\n      try {\n        data.hiddenTags = JSON.parse(hiddenTags)\n      } catch (error) {\n        console.warn('Failed to parse hidden tags data:', error)\n      }\n    }\n\n    // 计算数据大小\n    data.size = this.calculateDataSize(data)\n\n    return data\n  }\n\n  /**\n   * 分析简化版数据库\n   */\n  private async analyzeSimpleDatabase(): Promise<any> {\n    try {\n      // 尝试连接旧数据库\n      const oldDb = new (Dexie as any)('CardAllDatabase')\n      await oldDb.open()\n\n      const stats = {\n        cardCount: await oldDb.cards.count(),\n        folderCount: await oldDb.folders.count(),\n        tagCount: await oldDb.tags.count(),\n        imageCount: await oldDb.images.count(),\n        syncQueueCount: await oldDb.syncQueue.count()\n      }\n\n      await oldDb.close()\n\n      return {\n        ...stats,\n        type: 'simple-database',\n        size: 0 // 简化版本\n      }\n    } catch (error) {\n      console.log('No simple database found:', error)\n      return { exists: false }\n    }\n  }\n\n  /**\n   * 分析完整版数据库\n   */\n  private async analyzeFullDatabase(): Promise<any> {\n    try {\n      const stats = await db.getStats()\n      const health = await db.healthCheck()\n\n      return {\n        ...stats,\n        isHealthy: health.isHealthy,\n        issues: health.issues,\n        type: 'full-database'\n      }\n    } catch (error) {\n      console.log('Database analysis failed:', error)\n      return { exists: false, error: error instanceof Error ? error.message : 'Unknown error' }\n    }\n  }\n\n  /**\n   * 分析备份文件\n   */\n  private async analyzeBackup(backupPath: string): Promise<any> {\n    try {\n      // 这里可以实现从文件系统读取备份\n      const backupData = localStorage.getItem(backupPath)\n      if (!backupData) {\n        return { exists: false }\n      }\n\n      const backup = JSON.parse(backupData)\n      return {\n        ...backup,\n        type: 'backup',\n        size: JSON.stringify(backup).length\n      }\n    } catch (error) {\n      console.error('Failed to analyze backup:', error)\n      return { exists: false, error: error instanceof Error ? error.message : 'Unknown error' }\n    }\n  }\n\n  /**\n   * 分析云端数据源\n   */\n  private async analyzeCloudSource(): Promise<any> {\n    // 这里可以实现云端数据源分析\n    return {\n      type: 'cloud',\n      supported: false,\n      message: 'Cloud migration not yet implemented'\n    }\n  }\n\n  /**\n   * 获取目标架构\n   */\n  private async getTargetSchema(): Promise<Record<string, any>> {\n    return {\n      cards: {\n        version: 4,\n        indexes: ['userId', 'folderId', 'createdAt', 'updatedAt', 'syncVersion', 'pendingSync'],\n        requiredFields: ['frontContent.title', 'backContent.title']\n      },\n      folders: {\n        version: 4,\n        indexes: ['userId', 'parentId', 'createdAt', 'updatedAt', 'syncVersion', 'pendingSync'],\n        requiredFields: ['name']\n      },\n      tags: {\n        version: 4,\n        indexes: ['userId', 'name', 'createdAt', 'syncVersion', 'pendingSync'],\n        requiredFields: ['name']\n      },\n      images: {\n        version: 4,\n        indexes: ['cardId', 'userId', 'createdAt', 'updatedAt', 'syncVersion', 'pendingSync'],\n        requiredFields: ['cardId', 'fileName', 'filePath', 'metadata']\n      },\n      syncQueue: {\n        version: 4,\n        indexes: ['type', 'entity', 'entityId', 'timestamp', 'priority'],\n        requiredFields: ['type', 'entity', 'entityId']\n      }\n    }\n  }\n\n  /**\n   * 创建迁移步骤\n   */\n  private createMigrationSteps(source: MigrationSource, sourceData: any, target: MigrationTarget): MigrationStep[] {\n    const steps: MigrationStep[] = []\n\n    // 数据验证步骤\n    steps.push({\n      id: 'validate-source',\n      name: '验证源数据',\n      description: '验证源数据的完整性和可用性',\n      type: 'validation',\n      priority: 'critical',\n      estimatedTime: 1000,\n      required: true\n    })\n\n    // 创建备份步骤\n    if (this.needsBackup(source)) {\n      steps.push({\n        id: 'create-backup',\n        name: '创建数据备份',\n        description: '创建当前数据的完整备份',\n        type: 'backup',\n        priority: 'critical',\n        estimatedTime: 5000,\n        required: true,\n        retryCount: 0,\n        maxRetries: 3\n      })\n    }\n\n    // 根据数据源类型添加迁移步骤\n    switch (source.type) {\n      case 'localStorage':\n        if (sourceData.cardCount > 0) {\n          steps.push({\n            id: 'migrate-cards',\n            name: '迁移卡片数据',\n            description: `迁移 ${sourceData.cardCount} 个卡片`,\n            type: 'data',\n            priority: 'high',\n            estimatedTime: Math.max(2000, sourceData.cardCount * 10),\n            required: true,\n            retryCount: 0,\n            maxRetries: 5\n          })\n        }\n\n        if (sourceData.folderCount > 0) {\n          steps.push({\n            id: 'migrate-folders',\n            name: '迁移文件夹数据',\n            description: `迁移 ${sourceData.folderCount} 个文件夹`,\n            type: 'data',\n            priority: 'high',\n            estimatedTime: Math.max(1000, sourceData.folderCount * 5),\n            required: true\n          })\n        }\n\n        if (sourceData.tagCount > 0) {\n          steps.push({\n            id: 'migrate-tags',\n            name: '迁移标签数据',\n            description: `迁移 ${sourceData.tagCount} 个标签`,\n            type: 'data',\n            priority: 'high',\n            estimatedTime: Math.max(500, sourceData.tagCount * 2),\n            required: true\n          })\n        }\n\n        if (sourceData.hasImages) {\n          steps.push({\n            id: 'migrate-images',\n            name: '迁移图片数据',\n            description: '迁移卡片中的图片文件',\n            type: 'data',\n            priority: 'medium',\n            estimatedTime: 10000,\n            required: true,\n            retryCount: 0,\n            maxRetries: 3\n          })\n        }\n        break\n\n      case 'database-simple':\n        steps.push({\n          id: 'migrate-simple-db',\n          name: '迁移简化版数据库',\n          description: '从简化版数据库迁移所有数据',\n          type: 'data',\n          priority: 'high',\n          estimatedTime: 15000,\n          required: true,\n          retryCount: 0,\n          maxRetries: 3\n        })\n        break\n\n      case 'database-full':\n        steps.push({\n          id: 'upgrade-schema',\n          name: '升级数据库架构',\n          description: '升级到最新版本的数据库架构',\n          type: 'schema',\n          priority: 'critical',\n          estimatedTime: 5000,\n          required: true\n        })\n        break\n    }\n\n    // 数据转换和优化步骤\n    steps.push({\n      id: 'transform-data',\n      name: '数据转换和优化',\n      description: '转换数据格式并优化性能',\n      type: 'data',\n      priority: 'medium',\n      estimatedTime: 3000,\n      required: true\n    })\n\n    // 验证迁移结果\n    steps.push({\n      id: 'validate-migration',\n      name: '验证迁移结果',\n      description: '验证迁移后数据的完整性和一致性',\n      type: 'validation',\n      priority: 'high',\n      estimatedTime: 2000,\n      required: true\n    })\n\n    // 清理步骤（可选）\n    steps.push({\n      id: 'cleanup-source',\n      name: '清理源数据',\n      description: '清理迁移后的源数据（可选）',\n      type: 'cleanup',\n      priority: 'low',\n      estimatedTime: 1000,\n      required: false\n    })\n\n    return steps\n  }\n\n  /**\n   * 判断是否需要备份\n   */\n  private needsBackup(source: MigrationSource): boolean {\n    return source.type !== 'backup' // 非备份源需要备份\n  }\n\n  /**\n   * 获取验证级别\n   */\n  private getValidationLevel(source: MigrationSource): 'basic' | 'strict' | 'comprehensive' {\n    switch (source.type) {\n      case 'localStorage':\n        return 'strict'\n      case 'database-full':\n        return 'basic'\n      default:\n        return 'comprehensive'\n    }\n  }\n\n  /**\n   * 计算数据大小\n   */\n  private calculateDataSize(data: any): number {\n    return JSON.stringify(data).length\n  }\n\n  /**\n   * 执行迁移计划\n   */\n  async executeMigration(plan: MigrationPlan): Promise<MigrationResult> {\n    if (this.isMigrating) {\n      throw new Error('Migration already in progress')\n    }\n\n    this.isMigrating = true\n    this.currentPlan = plan\n    const startTime = Date.now()\n\n    const result: MigrationResult = {\n      success: false,\n      planId: plan.id,\n      executedAt: new Date(),\n      duration: 0,\n      stepsCompleted: 0,\n      totalSteps: plan.steps.length,\n      migratedCards: 0,\n      migratedFolders: 0,\n      migratedTags: 0,\n      migratedImages: 0,\n      migratedSettings: 0,\n      dataSize: 0,\n      errors: [],\n      warnings: [],\n      validationPassed: false\n    }\n\n    const progress: MigrationProgress = {\n      planId: plan.id,\n      status: 'running',\n      progress: 0,\n      currentStep: '',\n      currentStepProgress: 0,\n      startTime: new Date(),\n      speed: 0\n    }\n\n    this.activeMigrations.set(plan.id, progress)\n    this.notifyProgress(progress)\n\n    try {\n      console.log(`Starting migration plan: ${plan.id}`)\n\n      // 创建回滚点\n      const rollbackPoint = await this.createRollbackPoint()\n      result.rollbackPoint = rollbackPoint\n\n      // 按优先级执行迁移步骤\n      const sortedSteps = this.sortStepsByPriority(plan.steps)\n\n      for (let i = 0; i < sortedSteps.length; i++) {\n        const step = sortedSteps[i]\n        progress.currentStep = step.name\n        progress.currentStepProgress = 0\n        progress.progress = (i / sortedSteps.length) * 100\n\n        this.notifyProgress(progress)\n\n        console.log(`Executing migration step: ${step.name}`)\n\n        try {\n          const stepResult = await this.executeStep(step, plan)\n          result.stepsCompleted++\n\n          if (stepResult.success) {\n            // 更新迁移统计\n            result.migratedCards += stepResult.migratedCards || 0\n            result.migratedFolders += stepResult.migratedFolders || 0\n            result.migratedTags += stepResult.migratedTags || 0\n            result.migratedImages += stepResult.migratedImages || 0\n            result.migratedSettings += stepResult.migratedSettings || 0\n            result.dataSize += stepResult.dataSize || 0\n\n            if (stepResult.warnings) {\n              result.warnings.push(...stepResult.warnings)\n            }\n          } else {\n            const errorMsg = `Step ${step.name} failed: ${stepResult.error}`\n            result.errors.push(errorMsg)\n\n            if (step.required) {\n              throw new Error(`Required migration step failed: ${step.name}`)\n            }\n          }\n        } catch (error) {\n          const errorMsg = `Step ${step.name} failed: ${error}`\n          result.errors.push(errorMsg)\n\n          // 重试逻辑\n          if (step.required && step.retryCount! < (step.maxRetries || 3)) {\n            console.log(`Retrying step ${step.name} (${step.retryCount! + 1}/${step.maxRetries})`)\n            step.retryCount = (step.retryCount || 0) + 1\n            i-- // 重试当前步骤\n            await this.delay(this.retryDelays[step.retryCount - 1])\n            continue\n          }\n\n          if (step.required) {\n            throw error\n          }\n        }\n      }\n\n      // 验证迁移结果\n      const validation = await this.validateMigration(plan)\n      result.validationPassed = validation.success\n\n      if (!validation.success) {\n        result.errors.push('Migration validation failed')\n        result.errors.push(...validation.issues)\n      } else {\n        result.success = true\n        console.log('Migration completed successfully')\n      }\n\n    } catch (error) {\n      console.error('Migration failed:', error)\n      result.errors.push(error instanceof Error ? error.message : 'Unknown error')\n\n      // 尝试回滚\n      try {\n        if (plan.rollbackEnabled) {\n          await this.rollbackMigration(rollbackPoint!)\n          progress.status = 'rolled_back'\n        }\n      } catch (rollbackError) {\n        result.errors.push(`Rollback failed: ${rollbackError}`)\n      }\n    } finally {\n      this.isMigrating = false\n      progress.status = result.success ? 'completed' : 'failed'\n      progress.progress = 100\n      progress.currentStepProgress = 100\n      progress.currentStep = result.success ? 'Migration completed' : 'Migration failed'\n\n      result.duration = Date.now() - startTime\n\n      this.notifyProgress(progress)\n      this.activeMigrations.delete(plan.id)\n\n      // 清理临时数据\n      await this.cleanupMigration(plan.id)\n    }\n\n    return result\n  }\n\n  /**\n   * 按优先级排序步骤\n   */\n  private sortStepsByPriority(steps: MigrationStep[]): MigrationStep[] {\n    const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 }\n    return [...steps].sort((a, b) => priorityOrder[b.priority] - priorityOrder[a.priority])\n  }\n\n  /**\n   * 创建回滚点\n   */\n  private async createRollbackPoint(): Promise<string> {\n    const rollbackId = crypto.randomUUID()\n    const timestamp = new Date()\n\n    try {\n      // 创建完整的数据库备份\n      const backup = {\n        id: rollbackId,\n        timestamp,\n        version: '4.0.0',\n        data: {\n          cards: await db.cards.toArray(),\n          folders: await db.folders.toArray(),\n          tags: await db.tags.toArray(),\n          images: await db.images.toArray(),\n          settings: await db.settings.toArray(),\n          syncQueue: await db.syncQueue.toArray()\n        },\n        checksum: await this.calculateChecksum()\n      }\n\n      // 保存回滚点\n      await db.settings.add({\n        key: `rollback_${rollbackId}`,\n        value: backup,\n        updatedAt: new Date(),\n        scope: 'global'\n      })\n\n      console.log(`Rollback point created: ${rollbackId}`)\n      return rollbackId\n    } catch (error) {\n      console.error('Failed to create rollback point:', error)\n      throw new Error(`Failed to create rollback point: ${error}`)\n    }\n  }\n\n  /**\n   * 执行迁移步骤\n   */\n  private async executeStep(step: MigrationStep, plan: MigrationPlan): Promise<{\n    success: boolean\n    migratedCards?: number\n    migratedFolders?: number\n    migratedTags?: number\n    migratedImages?: number\n    migratedSettings?: number\n    dataSize?: number\n    warnings?: string[]\n    error?: string\n  }> {\n    try {\n      switch (step.id) {\n        case 'validate-source':\n          return await this.validateSource(plan.source)\n\n        case 'create-backup':\n          return await this.createBackup(plan)\n\n        case 'migrate-cards':\n          return await this.migrateCardsFromLocalStorage()\n\n        case 'migrate-folders':\n          return await this.migrateFoldersFromLocalStorage()\n\n        case 'migrate-tags':\n          return await this.migrateTagsFromLocalStorage()\n\n        case 'migrate-images':\n          return await this.migrateImagesFromLocalStorage()\n\n        case 'migrate-simple-db':\n          return await this.migrateFromSimpleDatabase()\n\n        case 'upgrade-schema':\n          return await this.upgradeDatabaseSchema()\n\n        case 'transform-data':\n          return await this.transformData()\n\n        case 'validate-migration':\n          return await this.validateMigrationStep(plan)\n\n        case 'cleanup-source':\n          return await this.cleanupSource(plan.source)\n\n        default:\n          return { success: false, error: `Unknown migration step: ${step.id}` }\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n    }\n  }\n\n  /**\n   * 验证源数据\n   */\n  private async validateSource(source: MigrationSource): Promise<{\n    success: boolean\n    warnings?: string[]\n    error?: string\n  }> {\n    try {\n      const warnings: string[] = []\n\n      switch (source.type) {\n        case 'localStorage':\n          // 验证localStorage数据格式\n          const cardsData = localStorage.getItem('cardall-cards')\n          if (cardsData) {\n            try {\n              const cards = JSON.parse(cardsData)\n              if (!Array.isArray(cards)) {\n                warnings.push('Cards data is not an array')\n              }\n            } catch {\n              warnings.push('Invalid cards data format')\n            }\n          }\n\n          const foldersData = localStorage.getItem('cardall-folders')\n          if (foldersData) {\n            try {\n              const folders = JSON.parse(foldersData)\n              if (!Array.isArray(folders)) {\n                warnings.push('Folders data is not an array')\n              }\n            } catch {\n              warnings.push('Invalid folders data format')\n            }\n          }\n          break\n\n        case 'database-simple':\n          // 验证旧数据库\n          try {\n            const oldDb = new (Dexie as any)('CardAllDatabase')\n            await oldDb.open()\n            await oldDb.close()\n          } catch {\n            warnings.push('Cannot connect to legacy database')\n          }\n          break\n      }\n\n      return {\n        success: true,\n        warnings: warnings.length > 0 ? warnings : undefined\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n    }\n  }\n\n  /**\n   * 创建备份\n   */\n  private async createBackup(plan: MigrationPlan): Promise<{\n    success: boolean\n    dataSize?: number\n    warnings?: string[]\n    error?: string\n  }> {\n    try {\n      console.log('Creating backup before migration...')\n\n      const backup = {\n        id: crypto.randomUUID(),\n        timestamp: new Date(),\n        planId: plan.id,\n        source: plan.source,\n        data: {\n          cards: await db.cards.toArray(),\n          folders: await db.folders.toArray(),\n          tags: await db.tags.toArray(),\n          images: await db.images.toArray(),\n          settings: await db.settings.toArray(),\n          syncQueue: await db.syncQueue.toArray()\n        },\n        checksum: await this.calculateChecksum()\n      }\n\n      const dataSize = JSON.stringify(backup.data).length\n\n      // 保存备份到数据库\n      await db.settings.add({\n        key: `migration_backup_${backup.id}`,\n        value: backup,\n        updatedAt: new Date(),\n        scope: 'global'\n      })\n\n      // 同时保存到localStorage作为额外保护\n      localStorage.setItem(`migration_backup_${backup.id}`, JSON.stringify(backup))\n\n      console.log(`Backup created successfully (${dataSize} bytes)`)\n\n      return {\n        success: true,\n        dataSize\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n    }\n  }\n\n  /**\n   * 从localStorage迁移卡片\n   */\n  private async migrateCardsFromLocalStorage(): Promise<{\n    success: boolean\n    migratedCards: number\n    dataSize: number\n    warnings?: string[]\n    error?: string\n  }> {\n    const cardsData = localStorage.getItem('cardall-cards')\n    if (!cardsData) {\n      return { success: true, migratedCards: 0, dataSize: 0 }\n    }\n\n    try {\n      const cards: Card[] = JSON.parse(cardsData)\n      const dbCards: DbCard[] = []\n      let totalSize = 0\n\n      for (const card of cards) {\n        const dbCard: DbCard = {\n          ...card,\n          userId: 'default',\n          syncVersion: 1,\n          pendingSync: true,\n          updatedAt: new Date(card.updatedAt),\n          searchVector: this.generateSearchVector(card),\n          folderId: card.folderId\n        }\n\n        dbCards.push(dbCard)\n        totalSize += JSON.stringify(dbCard).length\n      }\n\n      await db.cards.bulkAdd(dbCards)\n      console.log(`Migrated ${dbCards.length} cards from localStorage`)\n\n      return {\n        success: true,\n        migratedCards: dbCards.length,\n        dataSize: totalSize\n      }\n    } catch (error) {\n      return {\n        success: false,\n        migratedCards: 0,\n        dataSize: 0,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n    }\n  }\n\n  /**\n   * 从localStorage迁移文件夹\n   */\n  private async migrateFoldersFromLocalStorage(): Promise<{\n    success: boolean\n    migratedFolders: number\n    dataSize: number\n    error?: string\n  }> {\n    const foldersData = localStorage.getItem('cardall-folders')\n    if (!foldersData) {\n      return { success: true, migratedFolders: 0, dataSize: 0 }\n    }\n\n    try {\n      const folders: Folder[] = JSON.parse(foldersData)\n      const dbFolders: DbFolder[] = []\n      let totalSize = 0\n\n      for (const folder of folders) {\n        const dbFolder: DbFolder = {\n          ...folder,\n          userId: 'default',\n          syncVersion: 1,\n          pendingSync: true,\n          updatedAt: new Date(folder.updatedAt),\n          fullPath: this.generateFullPath(folder),\n          depth: this.calculateDepth(folder)\n        }\n\n        dbFolders.push(dbFolder)\n        totalSize += JSON.stringify(dbFolder).length\n      }\n\n      await db.folders.bulkAdd(dbFolders)\n      console.log(`Migrated ${dbFolders.length} folders from localStorage`)\n\n      return {\n        success: true,\n        migratedFolders: dbFolders.length,\n        dataSize: totalSize\n      }\n    } catch (error) {\n      return {\n        success: false,\n        migratedFolders: 0,\n        dataSize: 0,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n    }\n  }\n\n  /**\n   * 从localStorage迁移标签\n   */\n  private async migrateTagsFromLocalStorage(): Promise<{\n    success: boolean\n    migratedTags: number\n    dataSize: number\n    error?: string\n  }> {\n    const tagsData = localStorage.getItem('cardall-tags')\n    if (!tagsData) {\n      return { success: true, migratedTags: 0, dataSize: 0 }\n    }\n\n    try {\n      const tags: Tag[] = JSON.parse(tagsData)\n      const dbTags: DbTag[] = []\n      let totalSize = 0\n\n      for (const tag of tags) {\n        const dbTag: DbTag = {\n          ...tag,\n          userId: 'default',\n          syncVersion: 1,\n          pendingSync: true,\n          updatedAt: new Date(tag.createdAt),\n          count: 0 // 初始计数\n        }\n\n        dbTags.push(dbTag)\n        totalSize += JSON.stringify(dbTag).length\n      }\n\n      await db.tags.bulkAdd(dbTags)\n      console.log(`Migrated ${dbTags.length} tags from localStorage`)\n\n      return {\n        success: true,\n        migratedTags: dbTags.length,\n        dataSize: totalSize\n      }\n    } catch (error) {\n      return {\n        success: false,\n        migratedTags: 0,\n        dataSize: 0,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n    }\n  }\n\n  /**\n   * 从localStorage迁移图片\n   */\n  private async migrateImagesFromLocalStorage(): Promise<{\n    success: boolean\n    migratedImages: number\n    dataSize: number\n    warnings?: string[]\n    error?: string\n  }> {\n    const cardsData = localStorage.getItem('cardall-cards')\n    if (!cardsData) {\n      return { success: true, migratedImages: 0, dataSize: 0 }\n    }\n\n    try {\n      const cards: Card[] = JSON.parse(cardsData)\n      const warnings: string[] = []\n      let migratedImages = 0\n      let totalSize = 0\n\n      for (const card of cards) {\n        // 处理正面图片\n        for (const image of card.frontContent.images) {\n          if (image.url && image.url.startsWith('data:')) {\n            const result = await this.migrateImage(image, card.id, card.folderId)\n            if (result.success) {\n              migratedImages++\n              totalSize += result.size\n            } else {\n              warnings.push(`Failed to migrate image from card ${card.id}: ${result.error}`)\n            }\n          }\n        }\n\n        // 处理背面图片\n        for (const image of card.backContent.images) {\n          if (image.url && image.url.startsWith('data:')) {\n            const result = await this.migrateImage(image, card.id, card.folderId)\n            if (result.success) {\n              migratedImages++\n              totalSize += result.size\n            } else {\n              warnings.push(`Failed to migrate image from card ${card.id}: ${result.error}`)\n            }\n          }\n        }\n      }\n\n      console.log(`Migrated ${migratedImages} images from localStorage`)\n\n      return {\n        success: true,\n        migratedImages,\n        dataSize: totalSize,\n        warnings: warnings.length > 0 ? warnings : undefined\n      }\n    } catch (error) {\n      return {\n        success: false,\n        migratedImages: 0,\n        dataSize: 0,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n    }\n  }\n\n  /**\n   * 迁移单个图片\n   */\n  private async migrateImage(image: ImageData, cardId: string, folderId?: string): Promise<{\n    success: boolean\n    size: number\n    error?: string\n  }> {\n    try {\n      if (!image.url || !image.url.startsWith('data:')) {\n        return { success: true, size: 0 } // 非base64图片，无需迁移\n      }\n\n      // 转换base64为Blob\n      const blob = await this.base64ToBlob(image.url)\n      const file = new File([blob], image.alt || 'migrated-image.jpg', {\n        type: blob.type\n      })\n\n      // 保存到文件系统\n      const processedImage = await fileSystemService.saveImage(file, cardId, folderId)\n\n      // 创建图片记录\n      const dbImage: DbImage = {\n        id: crypto.randomUUID(),\n        cardId,\n        userId: 'default',\n        fileName: image.alt || 'migrated-image.jpg',\n        filePath: processedImage.filePath,\n        metadata: {\n          originalName: image.alt || 'migrated-image.jpg',\n          size: blob.size,\n          width: processedImage.metadata.width,\n          height: processedImage.metadata.height,\n          format: blob.type.split('/')[1],\n          compressed: false\n        },\n        storageMode: 'filesystem',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        syncVersion: 1,\n        pendingSync: true\n      }\n\n      await db.images.add(dbImage)\n\n      return {\n        success: true,\n        size: blob.size\n      }\n    } catch (error) {\n      return {\n        success: false,\n        size: 0,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n    }\n  }\n\n  /**\n   * 从简化版数据库迁移\n   */\n  private async migrateFromSimpleDatabase(): Promise<{\n    success: boolean\n    migratedCards: number\n    migratedFolders: number\n    migratedTags: number\n    dataSize: number\n    error?: string\n  }> {\n    try {\n      const oldDb = new (Dexie as any)('CardAllDatabase')\n      await oldDb.open()\n\n      let migratedCards = 0\n      let migratedFolders = 0\n      let migratedTags = 0\n      let totalSize = 0\n\n      // 迁移卡片\n      const oldCards = await oldDb.cards.toArray()\n      const dbCards: DbCard[] = oldCards.map(card => ({\n        ...card,\n        userId: 'default',\n        syncVersion: 1,\n        pendingSync: true,\n        updatedAt: new Date(card.updatedAt)\n      }))\n\n      await db.cards.bulkAdd(dbCards)\n      migratedCards = dbCards.length\n      totalSize += JSON.stringify(dbCards).length\n\n      // 迁移文件夹\n      const oldFolders = await oldDb.folders.toArray()\n      const dbFolders: DbFolder[] = oldFolders.map(folder => ({\n        ...folder,\n        userId: 'default',\n        syncVersion: 1,\n        pendingSync: true,\n        updatedAt: new Date(folder.updatedAt)\n      }))\n\n      await db.folders.bulkAdd(dbFolders)\n      migratedFolders = dbFolders.length\n      totalSize += JSON.stringify(dbFolders).length\n\n      // 迁移标签\n      const oldTags = await oldDb.tags.toArray()\n      const dbTags: DbTag[] = oldTags.map(tag => ({\n        ...tag,\n        userId: 'default',\n        syncVersion: 1,\n        pendingSync: true,\n        updatedAt: new Date(tag.createdAt)\n      }))\n\n      await db.tags.bulkAdd(dbTags)\n      migratedTags = dbTags.length\n      totalSize += JSON.stringify(dbTags).length\n\n      await oldDb.close()\n\n      console.log(`Migrated from simple database: ${migratedCards} cards, ${migratedFolders} folders, ${migratedTags} tags`)\n\n      return {\n        success: true,\n        migratedCards,\n        migratedFolders,\n        migratedTags,\n        dataSize: totalSize\n      }\n    } catch (error) {\n      return {\n        success: false,\n        migratedCards: 0,\n        migratedFolders: 0,\n        migratedTags: 0,\n        dataSize: 0,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n    }\n  }\n\n  /**\n   * 升级数据库架构\n   */\n  private async upgradeDatabaseSchema(): Promise<{\n    success: boolean\n    warnings?: string[]\n    error?: string\n  }> {\n    try {\n      // 数据库架构升级已经在 database-unified.ts 的 upgradeDatabase 方法中处理\n      console.log('Database schema upgrade completed')\n      return { success: true }\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n    }\n  }\n\n  /**\n   * 转换和优化数据\n   */\n  private async transformData(): Promise<{\n    success: boolean\n    warnings?: string[]\n    error?: string\n  }> {\n    try {\n      const warnings: string[] = []\n\n      // 重建搜索索引\n      const cards = await db.cards.toArray()\n      for (const card of cards) {\n        if (!card.searchVector) {\n          await db.cards.update(card.id!, {\n            searchVector: this.generateSearchVector(card)\n          })\n        }\n      }\n\n      // 更新文件夹路径和深度\n      const folders = await db.folders.toArray()\n      for (const folder of folders) {\n        if (!folder.fullPath || folder.depth === undefined) {\n          await db.folders.update(folder.id!, {\n            fullPath: this.generateFullPath(folder),\n            depth: this.calculateDepth(folder)\n          })\n        }\n      }\n\n      console.log('Data transformation completed')\n\n      return {\n        success: true,\n        warnings: warnings.length > 0 ? warnings : undefined\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n    }\n  }\n\n  /**\n   * 验证迁移步骤\n   */\n  private async validateMigrationStep(plan: MigrationPlan): Promise<{\n    success: boolean\n    warnings?: string[]\n    error?: string\n  }> {\n    const validation = await this.validateMigration(plan)\n    return {\n      success: validation.success,\n      warnings: validation.issues.length > 0 ? validation.issues : undefined,\n      error: validation.success ? undefined : 'Migration validation failed'\n    }\n  }\n\n  /**\n   * 清理源数据\n   */\n  private async cleanupSource(source: MigrationSource): Promise<{\n    success: boolean\n    warnings?: string[]\n    error?: string\n  }> {\n    try {\n      const warnings: string[] = []\n\n      switch (source.type) {\n        case 'localStorage':\n          // 清理localStorage数据\n          localStorage.removeItem('cardall-cards')\n          localStorage.removeItem('cardall-folders')\n          localStorage.removeItem('cardall-tags')\n          localStorage.removeItem('cardall-hidden-tags')\n          console.log('LocalStorage data cleaned up')\n          break\n\n        case 'database-simple':\n          // 清理旧数据库\n          try {\n            const oldDb = new (Dexie as any)('CardAllDatabase')\n            await oldDb.delete()\n            console.log('Legacy database cleaned up')\n          } catch (error) {\n            warnings.push(`Failed to cleanup legacy database: ${error}`)\n          }\n          break\n      }\n\n      return {\n        success: true,\n        warnings: warnings.length > 0 ? warnings : undefined\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n    }\n  }\n\n  /**\n   * 验证迁移结果\n   */\n  private async validateMigration(plan: MigrationPlan): Promise<{\n    success: boolean\n    issues: string[]\n    recommendations: string[]\n  }> {\n    const issues: string[] = []\n    const recommendations: string[] = []\n\n    try {\n      // 数据完整性验证\n      const stats = await db.getStats()\n\n      if (stats.cards === 0 && stats.folders === 0 && stats.tags === 0) {\n        issues.push('No data was migrated')\n      }\n\n      // 数据一致性验证\n      const cards = await db.cards.toArray()\n      for (const card of cards) {\n        if (!card.frontContent?.title) {\n          issues.push(`Card ${card.id} is missing front title`)\n        }\n        if (!card.backContent?.title) {\n          issues.push(`Card ${card.id} is missing back title`)\n        }\n      }\n\n      const folders = await db.folders.toArray()\n      for (const folder of folders) {\n        if (!folder.name) {\n          issues.push(`Folder ${folder.id} is missing name`)\n        }\n      }\n\n      const tags = await db.tags.toArray()\n      for (const tag of tags) {\n        if (!tag.name) {\n          issues.push(`Tag ${tag.id} is missing name`)\n        }\n      }\n\n      // 数据库健康检查\n      const health = await db.healthCheck()\n      if (!health.isHealthy) {\n        issues.push(...health.issues)\n      }\n\n      // 性能评估\n      if (stats.totalSize > 100 * 1024 * 1024) { // 100MB\n        recommendations.push('Consider optimizing large images for better performance')\n      }\n\n      if (stats.pendingSync > 100) {\n        recommendations.push('Large number of pending sync operations may impact performance')\n      }\n\n      return {\n        success: issues.length === 0,\n        issues,\n        recommendations\n      }\n    } catch (error) {\n      return {\n        success: false,\n        issues: [error instanceof Error ? error.message : 'Unknown error'],\n        recommendations: []\n      }\n    }\n  }\n\n  /**\n   * 回滚迁移\n   */\n  private async rollbackMigration(rollbackPoint: string): Promise<void> {\n    try {\n      console.log(`Rolling back migration to point: ${rollbackPoint}`)\n\n      // 获取回滚数据\n      const rollbackData = await db.settings\n        .where('key')\n        .equals(`rollback_${rollbackPoint}`)\n        .first()\n\n      if (!rollbackData) {\n        throw new Error('Rollback point not found')\n      }\n\n      const backup = rollbackData.value\n\n      // 清理当前数据\n      await db.clearAll()\n\n      // 恢复备份数据\n      if (backup.data.cards) {\n        await db.cards.bulkAdd(backup.data.cards)\n      }\n      if (backup.data.folders) {\n        await db.folders.bulkAdd(backup.data.folders)\n      }\n      if (backup.data.tags) {\n        await db.tags.bulkAdd(backup.data.tags)\n      }\n      if (backup.data.images) {\n        await db.images.bulkAdd(backup.data.images)\n      }\n      if (backup.data.settings) {\n        await db.settings.bulkAdd(backup.data.settings)\n      }\n      if (backup.data.syncQueue) {\n        await db.syncQueue.bulkAdd(backup.data.syncQueue)\n      }\n\n      console.log('Rollback completed successfully')\n    } catch (error) {\n      throw new Error(`Rollback failed: ${error}`)\n    }\n  }\n\n  /**\n   * 计算数据校验和\n   */\n  private async calculateChecksum(): Promise<string> {\n    const data = {\n      cards: await db.cards.count(),\n      folders: await db.folders.count(),\n      tags: await db.tags.count(),\n      images: await db.images.count()\n    }\n\n    const dataString = JSON.stringify(data)\n    const encoder = new TextEncoder()\n    const dataBuffer = encoder.encode(dataString)\n    const hashBuffer = await crypto.subtle.digest('SHA-256', dataBuffer)\n    const hashArray = Array.from(new Uint8Array(hashBuffer))\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('')\n  }\n\n  /**\n   * 生成搜索向量\n   */\n  private generateSearchVector(card: Card): string {\n    const searchableText = [\n      card.frontContent.title,\n      card.frontContent.text,\n      card.backContent.title,\n      card.backContent.text,\n      ...card.frontContent.tags,\n      ...card.backContent.tags\n    ].join(' ').toLowerCase()\n\n    return searchableText\n  }\n\n  /**\n   * 生成完整路径\n   */\n  private generateFullPath(folder: Folder): string {\n    // 简化实现，实际应该根据父文件夹构建完整路径\n    return folder.name\n  }\n\n  /**\n   * 计算文件夹深度\n   */\n  private calculateDepth(folder: Folder): number {\n    // 简化实现，实际应该根据父文件夹计算深度\n    return folder.parentId ? 1 : 0\n  }\n\n  /**\n   * Base64转Blob\n   */\n  private async base64ToBlob(base64: string): Promise<Blob> {\n    const response = await fetch(base64)\n    return response.blob()\n  }\n\n  /**\n   * 延迟执行\n   */\n  private async delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms))\n  }\n\n  /**\n   * 清理迁移数据\n   */\n  private async cleanupMigration(planId: string): Promise<void> {\n    try {\n      // 清理回滚点\n      const rollbackKeys = await db.settings\n        .where('key')\n        .startsWith('rollback_')\n        .keys()\n\n      for (const key of rollbackKeys) {\n        await db.settings.delete(key)\n      }\n\n      console.log(`Migration cleanup completed for plan: ${planId}`)\n    } catch (error) {\n      console.warn('Failed to cleanup migration data:', error)\n    }\n  }\n\n  /**\n   * 通知进度更新\n   */\n  private notifyProgress(progress: MigrationProgress): void {\n    this.progressCallbacks.forEach(callback => callback(progress))\n  }\n\n  // ============================================================================\n  // 公共接口方法\n  // ============================================================================\n\n  /**\n   * 注册进度回调\n   */\n  onProgress(callback: (progress: MigrationProgress) => void): () => void {\n    this.progressCallbacks.add(callback)\n    return () => this.progressCallbacks.delete(callback)\n  }\n\n  /**\n   * 获取迁移进度\n   */\n  getMigrationProgress(planId: string): MigrationProgress | undefined {\n    return this.activeMigrations.get(planId)\n  }\n\n  /**\n   * 取消迁移\n   */\n  async cancelMigration(planId: string): Promise<boolean> {\n    const progress = this.activeMigrations.get(planId)\n    if (!progress || progress.status !== 'running') {\n      return false\n    }\n\n    progress.status = 'paused'\n    this.notifyProgress(progress)\n\n    // 这里可以实现更复杂的取消逻辑\n    // 例如设置取消标志，让正在运行的步骤检测并停止\n\n    return true\n  }\n\n  /**\n   * 获取迁移历史\n   */\n  async getMigrationHistory(): Promise<MigrationResult[]> {\n    try {\n      const historyKeys = await db.settings\n        .where('key')\n        .startsWith('migration_result_')\n        .toArray()\n\n      const results: MigrationResult[] = []\n\n      for (const key of historyKeys) {\n        try {\n          const result = JSON.parse(key.value)\n          results.push(result)\n        } catch (error) {\n          console.warn(`Failed to parse migration result: ${key.key}`, error)\n        }\n      }\n\n      return results.sort((a, b) => b.executedAt.getTime() - a.executedAt.getTime())\n    } catch (error) {\n      console.error('Failed to get migration history:', error)\n      return []\n    }\n  }\n\n  /**\n   * 创建验证报告\n   */\n  async createValidationReport(): Promise<ValidationReport> {\n    const startTime = Date.now()\n\n    try {\n      const stats = await db.getStats()\n      const health = await db.healthCheck()\n\n      // 数据完整性检查\n      const cards = await db.cards.toArray()\n      const folders = await db.folders.toArray()\n      const tags = await db.tags.toArray()\n      const images = await db.images.toArray()\n\n      const integrity = {\n        cardsValid: cards.filter(card =>\n          card.frontContent?.title && card.backContent?.title\n        ).length,\n        cardsInvalid: cards.filter(card =>\n          !card.frontContent?.title || !card.backContent?.title\n        ).length,\n        foldersValid: folders.filter(folder => folder.name).length,\n        foldersInvalid: folders.filter(folder => !folder.name).length,\n        tagsValid: tags.filter(tag => tag.name).length,\n        tagsInvalid: tags.filter(tag => !tag.name).length,\n        imagesValid: images.filter(image =>\n          image.cardId && image.filePath && image.metadata\n        ).length,\n        imagesInvalid: images.filter(image =>\n          !image.cardId || !image.filePath || !image.metadata\n        ).length\n      }\n\n      // 一致性检查\n      const cardIds = new Set(cards.map(card => card.id))\n      const folderIds = new Set(folders.map(folder => folder.id))\n\n      const orphanedImages = images.filter(image => !cardIds.has(image.cardId))\n      const invalidFolders = folders.filter(folder =>\n        folder.parentId && !folderIds.has(folder.parentId)\n      )\n\n      const consistency = {\n        referencesValid: orphanedImages.length === 0 && invalidFolders.length === 0,\n        duplicatesFound: 0, // 简化实现\n        orphansFound: orphanedImages.length + invalidFolders.length\n      }\n\n      // 性能评估\n      const duration = Date.now() - startTime\n      const dataSize = await this.calculateTotalSize()\n\n      const performance = {\n        totalTime: duration,\n        dataSize,\n        throughput: dataSize / (duration / 1000) / 1024 / 1024 // MB/s\n      }\n\n      // 生成问题和建议\n      const issues: string[] = []\n      const recommendations: string[] = []\n\n      if (!health.isHealthy) {\n        issues.push(...health.issues)\n      }\n\n      if (integrity.cardsInvalid > 0) {\n        issues.push(`${integrity.cardsInvalid} cards have missing required fields`)\n      }\n\n      if (consistency.orphansFound > 0) {\n        issues.push(`${consistency.orphansFound} orphaned records found`)\n      }\n\n      if (performance.throughput < 1) {\n        recommendations.push('Database performance may be slow, consider optimizing indexes')\n      }\n\n      if (stats.pendingSync > 100) {\n        recommendations.push('High number of pending sync operations')\n      }\n\n      return {\n        success: issues.length === 0,\n        integrity,\n        consistency,\n        performance,\n        issues,\n        recommendations\n      }\n    } catch (error) {\n      return {\n        success: false,\n        integrity: {\n          cardsValid: 0,\n          cardsInvalid: 0,\n          foldersValid: 0,\n          foldersInvalid: 0,\n          tagsValid: 0,\n          tagsInvalid: 0,\n          imagesValid: 0,\n          imagesInvalid: 0\n        },\n        consistency: {\n          referencesValid: false,\n          duplicatesFound: 0,\n          orphansFound: 0\n        },\n        performance: {\n          totalTime: 0,\n          dataSize: 0,\n          throughput: 0\n        },\n        issues: [error instanceof Error ? error.message : 'Unknown error'],\n        recommendations: []\n      }\n    }\n  }\n\n  /**\n   * 计算总数据大小\n   */\n  private async calculateTotalSize(): Promise<number> {\n    const [cards, folders, tags, images] = await Promise.all([\n      db.cards.toArray(),\n      db.folders.toArray(),\n      db.tags.toArray(),\n      db.images.toArray()\n    ])\n\n    const cardSize = JSON.stringify(cards).length\n    const folderSize = JSON.stringify(folders).length\n    const tagSize = JSON.stringify(tags).length\n    const imageSize = images.reduce((total, image) => total + image.metadata.size, 0)\n\n    return cardSize + folderSize + tagSize + imageSize\n  }\n\n  /**\n   * 获取系统状态\n   */\n  async getSystemStatus(): Promise<{\n    isMigrating: boolean\n    activeMigrations: string[]\n    databaseHealthy: boolean\n    storageQuota: { used: number; total: number }\n    lastMigration?: Date\n  }> {\n    const health = await db.healthCheck()\n    const activeMigrationIds = Array.from(this.activeMigrations.keys())\n    const lastMigration = await this.getLastMigrationTime()\n    const storageQuota = await this.getStorageQuota()\n\n    return {\n      isMigrating: this.isMigrating,\n      activeMigrations: activeMigrationIds,\n      databaseHealthy: health.isHealthy,\n      storageQuota,\n      lastMigration\n    }\n  }\n\n  /**\n   * 获取最后迁移时间\n   */\n  private async getLastMigrationTime(): Promise<Date | undefined> {\n    try {\n      const history = await this.getMigrationHistory()\n      return history.length > 0 ? history[0].executedAt : undefined\n    } catch {\n      return undefined\n    }\n  }\n\n  /**\n   * 获取存储配额\n   */\n  private async getStorageQuota(): Promise<{ used: number; total: number }> {\n    try {\n      if ('storage' in navigator && 'estimate' in (navigator as any).storage) {\n        const estimate = await (navigator as any).storage.estimate()\n        return {\n          used: estimate.usage || 0,\n          total: estimate.quota || 0\n        }\n      }\n    } catch (error) {\n      console.warn('Failed to get storage quota:', error)\n    }\n\n    return { used: 0, total: 0 }\n  }\n\n  /**\n   * 检查是否需要迁移\n   */\n  async checkMigrationNeeds(): Promise<{\n    needsMigration: boolean\n    sources: MigrationSource[]\n    recommendations: string[]\n  }> {\n    const sources: MigrationSource[] = []\n    const recommendations: string[] = []\n\n    // 检查localStorage数据\n    const hasLocalStorageData = await this.hasLocalStorageData()\n    if (hasLocalStorageData) {\n      sources.push({\n        type: 'localStorage',\n        version: '1.0'\n      })\n      recommendations.push('Migrate localStorage data to IndexedDB for better performance')\n    }\n\n    // 检查旧数据库\n    const hasOldDatabase = await this.hasOldDatabase()\n    if (hasOldDatabase) {\n      sources.push({\n        type: 'database-simple',\n        version: '1.0'\n      })\n      recommendations.push('Migrate legacy database to unified database structure')\n    }\n\n    // 检查数据库版本\n    const currentVersion = await db.getSetting('databaseVersion')\n    if (currentVersion !== '4.0.0') {\n      sources.push({\n        type: 'database-full',\n        version: currentVersion || 'unknown'\n      })\n      recommendations.push('Upgrade database to latest version')\n    }\n\n    return {\n      needsMigration: sources.length > 0,\n      sources,\n      recommendations\n    }\n  }\n\n  /**\n   * 检查localStorage数据\n   */\n  private async hasLocalStorageData(): Promise<boolean> {\n    const hasCards = !!localStorage.getItem('cardall-cards')\n    const hasFolders = !!localStorage.getItem('cardall-folders')\n    const hasTags = !!localStorage.getItem('cardall-tags')\n\n    return hasCards || hasFolders || hasTags\n  }\n\n  /**\n   * 检查旧数据库\n   */\n  private async hasOldDatabase(): Promise<boolean> {\n    try {\n      const oldDb = new (Dexie as any)('CardAllDatabase')\n      await oldDb.open()\n      await oldDb.close()\n      return true\n    } catch {\n      return false\n    }\n  }\n\n  /**\n   * 智能迁移建议\n   */\n  async getMigrationRecommendations(): Promise<{\n    priority: 'high' | 'medium' | 'low'\n    source: MigrationSource\n    reason: string\n    estimatedTime: number\n    risk: 'low' | 'medium' | 'high'\n  }[]> {\n    const needs = await this.checkMigrationNeeds()\n    const recommendations: any[] = []\n\n    for (const source of needs.sources) {\n      switch (source.type) {\n        case 'localStorage':\n          recommendations.push({\n            priority: 'high' as const,\n            source,\n            reason: 'LocalStorage data is vulnerable to clearing and has size limitations',\n            estimatedTime: 15000,\n            risk: 'low' as const\n          })\n          break\n\n        case 'database-simple':\n          recommendations.push({\n            priority: 'medium' as const,\n            source,\n            reason: 'Legacy database lacks advanced features and optimizations',\n            estimatedTime: 10000,\n            risk: 'low' as const\n          })\n          break\n\n        case 'database-full':\n          recommendations.push({\n            priority: 'medium' as const,\n            source,\n            reason: 'Database version upgrade available with performance improvements',\n            estimatedTime: 5000,\n            risk: 'low' as const\n          })\n          break\n      }\n    }\n\n    return recommendations\n  }\n}\n\n// 创建数据迁移工具实例\nexport const dataMigrationTool = new DataMigrationTool()\n\n// 导出便捷函数\nexport const createMigrationPlan = (source: MigrationSource) =>\n  dataMigrationTool.analyzeAndCreatePlan(source)\n\nexport const executeMigrationPlan = (plan: MigrationPlan) =>\n  dataMigrationTool.executeMigration(plan)\n\nexport const checkMigrationNeeds = () =>\n  dataMigrationTool.checkMigrationNeeds()\n\nexport const getMigrationProgress = (planId: string) =>\n  dataMigrationTool.getMigrationProgress(planId)\n\nexport const createValidationReport = () =>\n  dataMigrationTool.createValidationReport()\n\nexport const getSystemStatus = () =>\n  dataMigrationTool.getSystemStatus()"],"version":3}
bed5eb7eb1004681b14499c1185d6622
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.clearQueryCache = exports.cachedQuery = exports.validateCardData = exports.batchOperation = exports.generateSearchVector = exports.convertFromDbCard = exports.convertToDbCard = exports.initializeDatabase = exports.db = void 0;
const dexie_1 = __importDefault(require("dexie"));
// ============================================================================
// 统一数据库类
// ============================================================================
class CardAllUnifiedDatabase extends dexie_1.default {
    constructor() {
        super('CardAllUnifiedDatabase');
        // 数据表定义
        Object.defineProperty(this, "cards", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "folders", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "tags", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "images", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "syncQueue", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "sessions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // 版本 3: 完整的统一数据库架构
        this.version(3).stores({
            // 核心实体表 - 优化的索引设计
            cards: '++id, userId, folderId, createdAt, updatedAt, syncVersion, pendingSync, [userId+folderId], searchVector',
            folders: '++id, userId, parentId, createdAt, updatedAt, syncVersion, pendingSync, [userId+parentId], fullPath, depth',
            tags: '++id, userId, name, createdAt, syncVersion, pendingSync, [userId+name]',
            images: '++id, cardId, userId, createdAt, updatedAt, syncVersion, pendingSync, storageMode, [cardId+userId]',
            // 同步和设置表
            syncQueue: '++id, type, entity, entityId, userId, timestamp, retryCount, priority, [userId+priority]',
            settings: '++id, key, updatedAt, scope, [key+scope]',
            sessions: '++id, userId, deviceId, lastActivity, isActive, [userId+deviceId]'
        });
        // 数据库升级逻辑 - 支持从旧版本迁移
        this.upgradeDatabase();
    }
    async upgradeDatabase() {
        // 版本 1 -> 2: 添加用户支持
        this.version(2).upgrade(async (tx) => {
            console.log('Upgrading to version 2: Adding user support...');
            // 检查是否需要从旧数据库迁移
            const oldDb = new CardAllDatabase_v1();
            try {
                await oldDb.open();
                console.log('Found old database, migrating data...');
                // 迁移卡片
                const oldCards = await oldDb.cards.toArray();
                const newCards = oldCards.map(card => ({
                    ...card,
                    userId: 'default', // 设置默认用户
                    updatedAt: new Date()
                }));
                await this.cards.bulkAdd(newCards);
                // 迁移文件夹
                const oldFolders = await oldDb.folders.toArray();
                const newFolders = oldFolders.map(folder => ({
                    ...folder,
                    userId: 'default',
                    updatedAt: new Date()
                }));
                await this.folders.bulkAdd(newFolders);
                // 迁移标签
                const oldTags = await oldDb.tags.toArray();
                const newTags = oldTags.map(tag => ({
                    ...tag,
                    userId: 'default',
                    updatedAt: new Date()
                }));
                await this.tags.bulkAdd(newTags);
                console.log('Migration completed successfully');
            }
            catch (error) {
                console.log('No old database found or migration failed:', error);
            }
        });
        // 版本 2 -> 3: 优化索引和添加新功能
        this.version(3).upgrade(async (tx) => {
            console.log('Upgrading to version 3: Optimizing indexes and adding new features...');
            // 添加默认设置
            await this.initializeDefaultSettings();
            // 重建搜索索引
            await this.rebuildSearchIndexes();
        });
    }
    async initializeDefaultSettings() {
        const defaultSettings = [
            {
                key: 'storageMode',
                value: 'hybrid',
                scope: 'global',
                updatedAt: new Date()
            },
            {
                key: 'syncEnabled',
                value: true,
                scope: 'global',
                updatedAt: new Date()
            },
            {
                key: 'imageCompression',
                value: {
                    enabled: true,
                    quality: 0.8,
                    maxWidth: 1920,
                    maxHeight: 1080,
                    format: 'webp'
                },
                scope: 'global',
                updatedAt: new Date()
            },
            {
                key: 'databaseVersion',
                value: '3.0.0',
                scope: 'global',
                updatedAt: new Date()
            }
        ];
        for (const setting of defaultSettings) {
            const exists = await this.settings.where('key').equals(setting.key).first();
            if (!exists) {
                await this.settings.add(setting);
            }
        }
    }
    async rebuildSearchIndexes() {
        console.log('Rebuilding search indexes...');
        // 这里可以实现搜索索引的重建逻辑
    }
    // ============================================================================
    // 统一的CRUD操作方法
    // ============================================================================
    // 获取设置 - 支持用户级和全局设置
    async getSetting(key, userId) {
        // 优先返回用户级设置
        if (userId) {
            const userSetting = await this.settings
                .where('[key+scope]')
                .equals([key, 'user'])
                .and(setting => !setting.userId || setting.userId === userId)
                .first();
            if (userSetting)
                return userSetting.value;
        }
        // 返回全局设置
        const globalSetting = await this.settings
            .where('[key+scope]')
            .equals([key, 'global'])
            .first();
        return globalSetting?.value;
    }
    // 更新设置
    async updateSetting(key, value, scope = 'global', userId) {
        await this.settings.where('[key+scope]').equals([key, scope]).modify({
            value,
            userId,
            updatedAt: new Date()
        });
    }
    // 获取数据库统计信息
    async getStats() {
        const [cards, folders, tags, images, pendingSync] = await Promise.all([
            this.cards.count(),
            this.folders.count(),
            this.tags.count(),
            this.images.count(),
            this.syncQueue.count()
        ]);
        // 计算总大小（简化版本）
        const totalSize = await this.calculateTotalSize();
        return {
            cards,
            folders,
            tags,
            images,
            pendingSync,
            totalSize,
            version: '3.0.0'
        };
    }
    async calculateTotalSize() {
        // 计算所有图片的总大小
        const images = await this.images.toArray();
        return images.reduce((total, image) => total + image.metadata.size, 0);
    }
    // 统一的卡片操作
    async createCard(cardData, userId) {
        const id = crypto.randomUUID();
        const now = new Date();
        await this.cards.add({
            ...cardData,
            id,
            userId,
            syncVersion: 1,
            pendingSync: true,
            updatedAt: now
        });
        return id;
    }
    async updateCard(id, updates) {
        const result = await this.cards.update(id, {
            ...updates,
            syncVersion: updates.syncVersion ? updates.syncVersion + 1 : undefined,
            pendingSync: true,
            updatedAt: new Date()
        });
        return result;
    }
    async deleteCard(id) {
        await this.transaction('rw', [this.cards, this.images], async () => {
            // 删除相关图片
            await this.images.where('cardId').equals(id).delete();
            // 删除卡片
            await this.cards.delete(id);
        });
    }
    // 批量操作支持
    async bulkCreateCards(cardsData, userId) {
        const now = new Date();
        const cards = cardsData.map(cardData => ({
            ...cardData,
            id: crypto.randomUUID(),
            userId,
            syncVersion: 1,
            pendingSync: true,
            updatedAt: now
        }));
        await this.cards.bulkAdd(cards);
        return cards.map(card => card.id);
    }
    // 性能优化的查询方法
    async getCardsByFolder(folderId, userId) {
        return await this.cards
            .where('[userId+folderId]')
            .equals([userId || 'default', folderId])
            .toArray();
    }
    async searchCards(searchTerm, userId) {
        const searchLower = searchTerm.toLowerCase();
        return await this.cards
            .filter(card => card.searchVector?.includes(searchLower) ||
            card.frontContent.title.toLowerCase().includes(searchLower) ||
            card.frontContent.text.toLowerCase().includes(searchLower) ||
            card.backContent.title.toLowerCase().includes(searchLower) ||
            card.backContent.text.toLowerCase().includes(searchLower))
            .toArray();
    }
    // 数据库清理和优化
    async cleanup() {
        await this.transaction('rw', [this.cards, this.folders, this.tags, this.images, this.syncQueue], async () => {
            // 清理过期的同步操作
            const expiredDate = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000); // 7天前
            await this.syncQueue.where('timestamp').below(expiredDate).delete();
            // 清理孤立图片（没有对应卡片的图片）
            const cardIds = await this.cards.toCollection().primaryKeys();
            await this.images.where('cardId').noneOf(cardIds).delete();
            console.log('Database cleanup completed');
        });
    }
    // 数据库健康检查
    async healthCheck() {
        const issues = [];
        try {
            // 检查数据库连接
            await this.tables.toArray();
            // 检查数据一致性
            const stats = await this.getStats();
            // 检查是否有大量待同步项目
            if (stats.pendingSync > 1000) {
                issues.push(`High number of pending sync operations: ${stats.pendingSync}`);
            }
            // 检查数据库大小
            if (stats.totalSize > 500 * 1024 * 1024) { // 500MB
                issues.push(`Database size is large: ${(stats.totalSize / 1024 / 1024).toFixed(2)} MB`);
            }
            return {
                isHealthy: issues.length === 0,
                issues,
                stats
            };
        }
        catch (error) {
            return {
                isHealthy: false,
                issues: [`Database connection failed: ${error}`],
                stats: { cards: 0, folders: 0, tags: 0, images: 0, pendingSync: 0, totalSize: 0, version: '3.0.0' }
            };
        }
    }
    // 完全清理数据库（谨慎使用）
    async clearAll() {
        await this.transaction('rw', [this.cards, this.folders, this.tags, this.images, this.syncQueue, this.settings, this.sessions], async () => {
            await this.cards.clear();
            await this.folders.clear();
            await this.tags.clear();
            await this.images.clear();
            await this.syncQueue.clear();
            // 保留设置，只清除用户数据
            await this.sessions.clear();
        });
    }
    // ============================================================================
    // 向后兼容的方法 - 保持现有代码不中断
    // ============================================================================
    // 旧版getSetting方法（保持兼容）
    async getSettingLegacy(key) {
        return await this.getSetting(key);
    }
    // 旧版updateSetting方法（保持兼容）
    async updateSettingLegacy(key, value) {
        await this.updateSetting(key, value);
    }
    // 旧版clearAll方法（保持兼容）
    async clearAllLegacy() {
        await this.transaction('rw', this.cards, this.folders, this.tags, this.images, this.syncQueue, async () => {
            await this.cards.clear();
            await this.folders.clear();
            await this.tags.clear();
            await this.images.clear();
            await this.syncQueue.clear();
        });
    }
    // 旧版getStats方法（保持兼容）
    async getStatsLegacy() {
        const stats = await this.getStats();
        return {
            cards: stats.cards,
            folders: stats.folders,
            tags: stats.tags,
            images: stats.images,
            pendingSync: stats.pendingSync
        };
    }
}
// ============================================================================
// 向后兼容支持
// ============================================================================
// 旧版本数据库类（用于迁移）
class CardAllDatabase_v1 extends dexie_1.default {
    constructor() {
        super('CardAllDatabase');
        Object.defineProperty(this, "cards", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "folders", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "tags", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "images", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "syncQueue", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.version(1).stores({
            cards: '++id, folderId, createdAt, updatedAt, syncVersion, pendingSync',
            folders: '++id, parentId, createdAt, updatedAt, syncVersion, pendingSync',
            tags: '++id, name, createdAt, syncVersion, pendingSync',
            images: '++id, cardId, filePath, createdAt, syncVersion, pendingSync',
            syncQueue: '++id, type, entity, entityId, timestamp, retryCount',
            settings: '++id, key, updatedAt'
        });
    }
}
// 创建数据库实例
exports.db = new CardAllUnifiedDatabase();
// 数据库初始化
const initializeDatabase = async () => {
    try {
        await exports.db.open();
        console.log('CardAll unified database initialized successfully');
        // 执行健康检查
        const health = await exports.db.healthCheck();
        if (!health.isHealthy) {
            console.warn('Database health issues detected:', health.issues);
        }
        // 定期清理
        setInterval(() => {
            exports.db.cleanup().catch(console.error);
        }, 24 * 60 * 60 * 1000); // 每天清理一次
    }
    catch (error) {
        console.error('Failed to initialize database:', error);
        throw error;
    }
};
exports.initializeDatabase = initializeDatabase;
// 数据库错误处理
exports.db.on('error', (error) => {
    console.error('Database error:', error);
});
exports.db.on('blocked', () => {
    console.warn('Database operation blocked');
});
exports.db.on('versionchange', () => {
    console.warn('Database version changed, reloading page...');
    window.location.reload();
});
exports.db.on('ready', () => {
    console.log('Database is ready');
});
// ============================================================================
// 导出工具函数
// ============================================================================
// 数据转换工具
const convertToDbCard = (card, userId) => {
    return {
        ...card,
        userId,
        syncVersion: 1,
        pendingSync: true,
        updatedAt: new Date()
    };
};
exports.convertToDbCard = convertToDbCard;
const convertFromDbCard = (dbCard) => {
    const { userId, syncVersion, lastSyncAt, pendingSync, ...card } = dbCard;
    return {
        ...card,
        id: card.id || '',
        createdAt: new Date(card.createdAt),
        updatedAt: new Date(card.updatedAt)
    };
};
exports.convertFromDbCard = convertFromDbCard;
// 搜索优化工具
const generateSearchVector = (card) => {
    const searchableText = [
        card.frontContent.title,
        card.frontContent.text,
        card.backContent.title,
        card.backContent.text,
        ...card.frontContent.tags,
        ...card.backContent.tags
    ].join(' ').toLowerCase();
    return searchableText;
};
exports.generateSearchVector = generateSearchVector;
// 批量操作工具
const batchOperation = async (items, batchSize = 100, operation) => {
    for (let i = 0; i < items.length; i += batchSize) {
        const batch = items.slice(i, i + batchSize);
        await operation(batch);
    }
};
exports.batchOperation = batchOperation;
// 数据验证工具
const validateCardData = (card) => {
    const errors = [];
    if (!card.frontContent?.title) {
        errors.push('Front content title is required');
    }
    if (!card.backContent?.title) {
        errors.push('Back content title is required');
    }
    if (card.style && !['solid', 'gradient', 'glass'].includes(card.style.type)) {
        errors.push('Invalid card style type');
    }
    return errors;
};
exports.validateCardData = validateCardData;
// ============================================================================
// 性能优化和缓存
// ============================================================================
// 简单的查询缓存
const queryCache = new Map();
const CACHE_TTL = 5 * 60 * 1000; // 5分钟缓存
const cachedQuery = async (key, query) => {
    const cached = queryCache.get(key);
    if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
        return cached.data;
    }
    const data = await query();
    queryCache.set(key, { data, timestamp: Date.now() });
    return data;
};
exports.cachedQuery = cachedQuery;
// 清理缓存
const clearQueryCache = () => {
    queryCache.clear();
};
exports.clearQueryCache = clearQueryCache;
// 定期清理过期缓存
setInterval(() => {
    const now = Date.now();
    for (const [key, value] of queryCache.entries()) {
        if (now - value.timestamp > CACHE_TTL) {
            queryCache.delete(key);
        }
    }
}, CACHE_TTL);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
a2884fa9f9ffc0f4e80df4d62a13e9e8
"use strict";
/**
 * 测试辅助函数
 * 提供通用的测试辅助函数和断言方法
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateRandomData = exports.cleanupAllMocks = exports.mockFetch = exports.expectErrorBoundary = exports.measureMemory = exports.measurePerformance = exports.describeAsync = exports.testAsync = exports.mockConsole = exports.mockCryptoRandomUUID = exports.mockMathRandom = exports.mockDateNow = exports.createMockStorage = exports.createMockElement = exports.createMockFileList = exports.createMockFile = exports.createMockEvent = exports.createTestEvent = exports.mockApiError = exports.mockApiResponse = exports.mockPromiseReject = exports.mockPromiseResolve = exports.waitForAsync = exports.waitForCondition = exports.asyncWait = void 0;
const react_1 = require("@testing-library/react");
// Jest全局函数不需要导入
// 异步工具函数
const asyncWait = (ms) => {
    return new Promise(resolve => setTimeout(resolve, ms));
};
exports.asyncWait = asyncWait;
// 等待条件满足
const waitForCondition = async (condition, timeout = 5000, interval = 100) => {
    const startTime = Date.now();
    while (Date.now() - startTime < timeout) {
        if (condition()) {
            return;
        }
        await (0, exports.asyncWait)(interval);
    }
    throw new Error(`Condition not met within ${timeout}ms`);
};
exports.waitForCondition = waitForCondition;
// 等待异步操作完成
const waitForAsync = async (fn, timeout = 5000) => {
    try {
        await (0, react_1.waitFor)(fn, { timeout });
    }
    catch (error) {
        throw new Error(`Async operation timed out after ${timeout}ms`);
    }
};
exports.waitForAsync = waitForAsync;
// 模拟Promise解决
const mockPromiseResolve = (data, delay = 0) => {
    return new Promise(resolve => {
        setTimeout(() => resolve(data), delay);
    });
};
exports.mockPromiseResolve = mockPromiseResolve;
// 模拟Promise拒绝
const mockPromiseReject = (error, delay = 0) => {
    return new Promise((_, reject) => {
        setTimeout(() => reject(error), delay);
    });
};
exports.mockPromiseReject = mockPromiseReject;
// 模拟API响应
const mockApiResponse = (data, status = 200, statusText = 'OK') => {
    return Promise.resolve({
        ok: status >= 200 && status < 300,
        status,
        statusText,
        json: () => Promise.resolve(data),
        text: () => Promise.resolve(JSON.stringify(data)),
        headers: new Headers(),
        redirected: false,
        type: 'basic',
        url: 'http://test.com',
        clone: () => (0, exports.mockApiResponse)(data, status, statusText),
    });
};
exports.mockApiResponse = mockApiResponse;
// 模拟API错误
const mockApiError = (error, status = 400, statusText = 'Bad Request') => {
    return Promise.resolve({
        ok: false,
        status,
        statusText,
        json: () => Promise.resolve({ error }),
        text: () => Promise.resolve(JSON.stringify({ error })),
        headers: new Headers(),
        redirected: false,
        type: 'basic',
        url: 'http://test.com',
        clone: () => (0, exports.mockApiError)(error, status, statusText),
    });
};
exports.mockApiError = mockApiError;
// 创建测试事件
const createTestEvent = (type, data = {}) => {
    return new Event(type, {
        bubbles: true,
        cancelable: true,
        ...data,
    });
};
exports.createTestEvent = createTestEvent;
// 创建模拟事件
const createMockEvent = (type, data = {}) => {
    return {
        type,
        bubbles: true,
        cancelable: true,
        defaultPrevented: false,
        preventDefault: vi.fn(),
        stopPropagation: vi.fn(),
        stopImmediatePropagation: vi.fn(),
        ...data,
    };
};
exports.createMockEvent = createMockEvent;
// 模拟文件对象
const createMockFile = (name, type, size = 1024) => {
    const content = new Uint8Array(size);
    return new File([content], name, { type });
};
exports.createMockFile = createMockFile;
// 模拟文件列表
const createMockFileList = (files) => {
    const fileList = {
        length: files.length,
        item: (index) => files[index] || null,
        [Symbol.iterator]: function* () {
            for (const file of files) {
                yield file;
            }
        },
    };
    files.forEach((file, index) => {
        fileList[index] = file;
    });
    return fileList;
};
exports.createMockFileList = createMockFileList;
// 模拟DOM元素
const createMockElement = (overrides = {}) => {
    return {
        addEventListener: vi.fn(),
        removeEventListener: vi.fn(),
        dispatchEvent: vi.fn(),
        appendChild: vi.fn(),
        removeChild: vi.fn(),
        replaceChild: vi.fn(),
        insertBefore: vi.fn(),
        getAttribute: vi.fn(),
        setAttribute: vi.fn(),
        removeAttribute: vi.fn(),
        hasAttribute: vi.fn(),
        getBoundingClientRect: vi.fn(() => ({
            top: 0,
            left: 0,
            width: 100,
            height: 100,
            right: 100,
            bottom: 100,
            x: 0,
            y: 0,
            toJSON: vi.fn(),
        })),
        focus: vi.fn(),
        blur: vi.fn(),
        click: vi.fn(),
        classList: {
            add: vi.fn(),
            remove: vi.fn(),
            contains: vi.fn(),
            toggle: vi.fn(),
            replace: vi.fn(),
        },
        style: {
            display: '',
            visibility: '',
            opacity: '',
            transform: '',
        },
        ...overrides,
    };
};
exports.createMockElement = createMockElement;
// 模拟Storage对象
const createMockStorage = () => {
    const store = {};
    return {
        length: 0,
        key: (index) => Object.keys(store)[index] || null,
        getItem: (key) => store[key] || null,
        setItem: (key, value) => {
            store[key] = String(value);
        },
        removeItem: (key) => {
            delete store[key];
        },
        clear: () => {
            Object.keys(store).forEach(key => delete store[key]);
        },
    };
};
exports.createMockStorage = createMockStorage;
// 模拟Date对象
const mockDateNow = (timestamp) => {
    const originalDateNow = Date.now;
    Date.now = () => timestamp;
    return () => {
        Date.now = originalDateNow;
    };
};
exports.mockDateNow = mockDateNow;
// 模拟Math.random
const mockMathRandom = (value) => {
    const originalMathRandom = Math.random;
    Math.random = () => value;
    return () => {
        Math.random = originalMathRandom;
    };
};
exports.mockMathRandom = mockMathRandom;
// 模拟crypto.randomUUID
const mockCryptoRandomUUID = (uuid) => {
    const originalRandomUUID = crypto.randomUUID;
    crypto.randomUUID = () => uuid;
    return () => {
        crypto.randomUUID = originalRandomUUID;
    };
};
exports.mockCryptoRandomUUID = mockCryptoRandomUUID;
// 模拟console方法
const mockConsole = () => {
    const originalConsole = { ...console };
    console.log = vi.fn();
    console.error = vi.fn();
    console.warn = vi.fn();
    console.info = vi.fn();
    console.debug = vi.fn();
    return () => {
        Object.assign(console, originalConsole);
    };
};
exports.mockConsole = mockConsole;
// 测试用例包装器
const testAsync = (name, fn) => {
    return test(name, async () => {
        await (0, react_1.act)(async () => {
            await fn();
        });
    });
};
exports.testAsync = testAsync;
// 分组测试包装器
const describeAsync = (name, fn) => {
    return describe(name, fn);
};
exports.describeAsync = describeAsync;
// 性能测试工具
const measurePerformance = async (name, fn, maxTimeMs = 1000) => {
    const startTime = performance.now();
    const result = await fn();
    const duration = performance.now() - startTime;
    if (duration > maxTimeMs) {
        console.warn(`Performance warning: ${name} took ${duration}ms (expected < ${maxTimeMs}ms)`);
    }
    return { result, duration };
};
exports.measurePerformance = measurePerformance;
// 内存使用测试工具
const measureMemory = async (name, fn, maxMemoryMB = 100) => {
    const memoryBefore = process.memoryUsage();
    const result = await fn();
    const memoryAfter = process.memoryUsage();
    const memoryUsage = {
        rss: memoryAfter.rss - memoryBefore.rss,
        heapTotal: memoryAfter.heapTotal - memoryBefore.heapTotal,
        heapUsed: memoryAfter.heapUsed - memoryBefore.heapUsed,
        external: memoryAfter.external - memoryBefore.external,
        arrayBuffers: memoryAfter.arrayBuffers - memoryBefore.arrayBuffers,
    };
    const memoryMB = memoryUsage.heapUsed / (1024 * 1024);
    if (memoryMB > maxMemoryMB) {
        console.warn(`Memory warning: ${name} used ${memoryMB}MB (expected < ${maxMemoryMB}MB)`);
    }
    return { result, memoryUsage };
};
exports.measureMemory = measureMemory;
// 错误边界测试工具
const expectErrorBoundary = async (fn, expectedError) => {
    try {
        await fn();
        fail('Expected error was not thrown');
    }
    catch (error) {
        if (typeof expectedError === 'string') {
            expect(error.message).toContain(expectedError);
        }
        else {
            expect(error).toBeInstanceOf(expectedError.constructor);
            expect(error.message).toBe(expectedError.message);
        }
    }
};
exports.expectErrorBoundary = expectErrorBoundary;
// 模拟网络请求
const mockFetch = (responses = []) => {
    const mockFetchFn = vi.fn();
    mockFetchFn.mockImplementation((url, options) => {
        const matchingResponse = responses.find(r => !r.condition || r.condition(url, options));
        if (matchingResponse) {
            return matchingResponse.response;
        }
        return (0, exports.mockApiResponse)({ error: 'Not found' }, 404);
    });
    const originalFetch = global.fetch;
    global.fetch = mockFetchFn;
    return () => {
        global.fetch = originalFetch;
    };
};
exports.mockFetch = mockFetch;
// 清理所有mock
const cleanupAllMocks = () => {
    vi.clearAllMocks();
    vi.resetAllMocks();
    vi.restoreAllMocks();
};
exports.cleanupAllMocks = cleanupAllMocks;
// 生成随机测试数据
exports.generateRandomData = {
    string: (length = 10) => {
        return Math.random().toString(36).substring(2, length + 2);
    },
    number: (min = 0, max = 100) => {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    },
    boolean: () => {
        return Math.random() > 0.5;
    },
    date: (start = new Date('2020-01-01'), end = new Date()) => {
        return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
    },
    email: () => {
        return `${exports.generateRandomData.string()}@${exports.generateRandomData.string(5)}.com`;
    },
    uuid: () => {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
            const r = Math.random() * 16 | 0;
            const v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    },
};
exports.default = {
    asyncWait: exports.asyncWait,
    waitForCondition: exports.waitForCondition,
    waitForAsync: exports.waitForAsync,
    mockPromiseResolve: exports.mockPromiseResolve,
    mockPromiseReject: exports.mockPromiseReject,
    mockApiResponse: exports.mockApiResponse,
    mockApiError: exports.mockApiError,
    createTestEvent: exports.createTestEvent,
    createMockEvent: exports.createMockEvent,
    createMockFile: exports.createMockFile,
    createMockFileList: exports.createMockFileList,
    createMockElement: exports.createMockElement,
    createMockStorage: exports.createMockStorage,
    mockDateNow: exports.mockDateNow,
    mockMathRandom: exports.mockMathRandom,
    mockCryptoRandomUUID: exports.mockCryptoRandomUUID,
    mockConsole: exports.mockConsole,
    testAsync: exports.testAsync,
    describeAsync: exports.describeAsync,
    measurePerformance: exports.measurePerformance,
    measureMemory: exports.measureMemory,
    expectErrorBoundary: exports.expectErrorBoundary,
    mockFetch: exports.mockFetch,
    cleanupAllMocks: exports.cleanupAllMocks,
    generateRandomData: exports.generateRandomData,
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\tests\\offline\\data-consistency.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\tests\\offline\\data-consistency.test.ts"],"sourcesContent":["// 数据一致性验证测试\r\n// 测试 Week 2 Day 8-9 的数据一致性和完整性验证功能\r\n\r\nimport { jest } from '@jest/globals'\r\n\r\n// ============================================================================\r\n// 数据一致性验证工具\r\n// ============================================================================\r\n\r\nclass DataConsistencyValidator {\r\n  private validationResults: any[] = []\r\n  private dataStore: Map<string, any> = new Map()\r\n  \r\n  /**\r\n   * 验证数据一致性\r\n   */\r\n  async validateConsistency(): Promise<{\r\n    valid: boolean\r\n    score: number\r\n    issues: string[]\r\n    details: any\r\n  }> {\r\n    console.log('🔍 开始数据一致性验证...')\r\n    \r\n    const issues: string[] = []\r\n    let score = 1.0\r\n    \r\n    // 1. 验证数据完整性\r\n    const integrityResult = await this.validateDataIntegrity()\r\n    if (!integrityResult.valid) {\r\n      issues.push(...integrityResult.issues)\r\n      score -= integrityResult.issues.length * 0.1\r\n    }\r\n    \r\n    // 2. 验证数据同步状态\r\n    const syncResult = await this.validateSyncState()\r\n    if (!syncResult.valid) {\r\n      issues.push(...syncResult.issues)\r\n      score -= syncResult.issues.length * 0.15\r\n    }\r\n    \r\n    // 3. 验证数据版本一致性\r\n    const versionResult = await this.validateVersionConsistency()\r\n    if (!versionResult.valid) {\r\n      issues.push(...versionResult.issues)\r\n      score -= versionResult.issues.length * 0.2\r\n    }\r\n    \r\n    // 4. 验证数据关系完整性\r\n    const relationResult = await this.validateDataRelations()\r\n    if (!relationResult.valid) {\r\n      issues.push(...relationResult.issues)\r\n      score -= relationResult.issues.length * 0.1\r\n    }\r\n    \r\n    // 5. 验证数据备份一致性\r\n    const backupResult = await this.validateBackupConsistency()\r\n    if (!backupResult.valid) {\r\n      issues.push(...backupResult.issues)\r\n      score -= backupResult.issues.length * 0.05\r\n    }\r\n    \r\n    // 确保分数不低于0\r\n    score = Math.max(0, score)\r\n    \r\n    const result = {\r\n      valid: issues.length === 0,\r\n      score,\r\n      issues,\r\n      details: {\r\n        integrity: integrityResult,\r\n        sync: syncResult,\r\n        version: versionResult,\r\n        relations: relationResult,\r\n        backup: backupResult\r\n      }\r\n    }\r\n    \r\n    this.validationResults.push(result)\r\n    \r\n    console.log(`✅ 数据一致性验证完成 - 分数: ${(score * 100).toFixed(1)}%`)\r\n    if (issues.length > 0) {\r\n      console.log(`   发现问题: ${issues.length} 个`)\r\n    }\r\n    \r\n    return result\r\n  }\r\n  \r\n  /**\r\n   * 验证数据完整性\r\n   */\r\n  private async validateDataIntegrity(): Promise<{\r\n    valid: boolean\r\n    issues: string[]\r\n    details: any\r\n  }> {\r\n    const issues: string[] = []\r\n    const details = {\r\n      totalRecords: 0,\r\n      corruptedRecords: 0,\r\n      missingFields: 0\r\n    }\r\n    \r\n    // 模拟数据完整性检查\r\n    for (const [key, data] of this.dataStore) {\r\n      details.totalRecords++\r\n      \r\n      // 检查必要字段\r\n      const requiredFields = ['id', 'createdAt', 'updatedAt']\r\n      for (const field of requiredFields) {\r\n        if (!data[field]) {\r\n          issues.push(`记录 ${key} 缺少必要字段: ${field}`)\r\n          details.missingFields++\r\n        }\r\n      }\r\n      \r\n      // 检查数据损坏\r\n      if (this.isDataCorrupted(data)) {\r\n        issues.push(`记录 ${key} 数据损坏`)\r\n        details.corruptedRecords++\r\n      }\r\n    }\r\n    \r\n    return {\r\n      valid: issues.length === 0,\r\n      issues,\r\n      details\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 验证同步状态一致性\r\n   */\r\n  private async validateSyncState(): Promise<{\r\n    valid: boolean\r\n    issues: string[]\r\n    details: any\r\n  }> {\r\n    const issues: string[] = []\r\n    const details = {\r\n      totalOperations: 0,\r\n      pendingOperations: 0,\r\n      completedOperations: 0,\r\n      inconsistentStates: 0\r\n    }\r\n    \r\n    // 模拟同步状态检查\r\n    for (const [key, data] of this.dataStore) {\r\n      details.totalOperations++\r\n      \r\n      if (data.syncStatus === 'pending') {\r\n        details.pendingOperations++\r\n        \r\n        // 检查挂起时间是否过长\r\n        const pendingTime = Date.now() - new Date(data.updatedAt).getTime()\r\n        if (pendingTime > 24 * 60 * 60 * 1000) { // 24小时\r\n          issues.push(`记录 ${key} 挂起时间过长: ${pendingTime}ms`)\r\n          details.inconsistentStates++\r\n        }\r\n      } else if (data.syncStatus === 'completed') {\r\n        details.completedOperations++\r\n      }\r\n    }\r\n    \r\n    return {\r\n      valid: issues.length === 0,\r\n      issues,\r\n      details\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 验证版本一致性\r\n   */\r\n  private async validateVersionConsistency(): Promise<{\r\n    valid: boolean\r\n    issues: string[]\r\n    details: any\r\n  }> {\r\n    const issues: string[] = []\r\n    const details = {\r\n      versionConflicts: 0,\r\n      outdatedVersions: 0,\r\n      totalRecords: 0\r\n    }\r\n    \r\n    // 模拟版本一致性检查\r\n    for (const [key, data] of this.dataStore) {\r\n      details.totalRecords++\r\n      \r\n      if (data.version) {\r\n        // 检查版本冲突\r\n        if (data.localVersion && data.remoteVersion && data.localVersion !== data.remoteVersion) {\r\n          issues.push(`记录 ${key} 版本冲突: 本地${data.localVersion} vs 远程${data.remoteVersion}`)\r\n          details.versionConflicts++\r\n        }\r\n        \r\n        // 检查版本是否过时\r\n        if (data.version < data.expectedVersion) {\r\n          issues.push(`记录 ${key} 版本过时: ${data.version} < ${data.expectedVersion}`)\r\n          details.outdatedVersions++\r\n        }\r\n      }\r\n    }\r\n    \r\n    return {\r\n      valid: issues.length === 0,\r\n      issues,\r\n      details\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 验证数据关系完整性\r\n   */\r\n  private async validateDataRelations(): Promise<{\r\n    valid: boolean\r\n    issues: string[]\r\n    details: any\r\n  }> {\r\n    const issues: string[] = []\r\n    const details = {\r\n      totalRelations: 0,\r\n      brokenRelations: 0,\r\n      orphanedRecords: 0\r\n    }\r\n    \r\n    // 模拟数据关系检查\r\n    const cards = Array.from(this.dataStore.values()).filter(data => data.type === 'card')\r\n    const folders = Array.from(this.dataStore.values()).filter(data => data.type === 'folder')\r\n    \r\n    // 检查卡片-文件夹关系\r\n    for (const card of cards) {\r\n      if (card.folderId) {\r\n        details.totalRelations++\r\n        \r\n        const folderExists = folders.some(folder => folder.id === card.folderId)\r\n        if (!folderExists) {\r\n          issues.push(`卡片 ${card.id} 引用了不存在的文件夹: ${card.folderId}`)\r\n          details.brokenRelations++\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 检查孤立记录\r\n    for (const folder of folders) {\r\n      if (folder.parentId) {\r\n        const parentExists = folders.some(f => f.id === folder.parentId)\r\n        if (!parentExists) {\r\n          issues.push(`文件夹 ${folder.id} 是孤立记录: 父文件夹 ${folder.parentId} 不存在`)\r\n          details.orphanedRecords++\r\n        }\r\n      }\r\n    }\r\n    \r\n    return {\r\n      valid: issues.length === 0,\r\n      issues,\r\n      details\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 验证备份一致性\r\n   */\r\n  private async validateBackupConsistency(): Promise<{\r\n    valid: boolean\r\n    issues: string[]\r\n    details: any\r\n  }> {\r\n    const issues: string[] = []\r\n    const details = {\r\n      totalBackups: 0,\r\n      inconsistentBackups: 0,\r\n      missingBackups: 0\r\n    }\r\n    \r\n    // 模拟备份一致性检查\r\n    const backupKeys = Array.from(this.dataStore.keys()).filter(key => key.startsWith('backup-'))\r\n    details.totalBackups = backupKeys.length\r\n    \r\n    for (const backupKey of backupKeys) {\r\n      const backup = this.dataStore.get(backupKey)\r\n      \r\n      // 检查备份完整性\r\n      if (!backup.data || !backup.timestamp) {\r\n        issues.push(`备份 ${backupKey} 不完整`)\r\n        details.inconsistentBackups++\r\n      }\r\n      \r\n      // 检查备份数据一致性\r\n      if (backup.data && backup.originalData) {\r\n        const dataHash = this.calculateDataHash(backup.data)\r\n        const originalHash = this.calculateDataHash(backup.originalData)\r\n        \r\n        if (dataHash !== originalHash) {\r\n          issues.push(`备份 ${backupKey} 数据不一致`)\r\n          details.inconsistentBackups++\r\n        }\r\n      }\r\n    }\r\n    \r\n    return {\r\n      valid: issues.length === 0,\r\n      issues,\r\n      details\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 检查数据是否损坏\r\n   */\r\n  private isDataCorrupted(data: any): boolean {\r\n    // 模拟数据损坏检测\r\n    return data.corrupted === true || \r\n           data.content === null && data.type === 'card' ||\r\n           typeof data.id !== 'string'\r\n  }\r\n  \r\n  /**\r\n   * 计算数据哈希\r\n   */\r\n  private calculateDataHash(data: any): string {\r\n    // 简单的哈希计算\r\n    return JSON.stringify(data).length.toString()\r\n  }\r\n  \r\n  /**\r\n   * 添加测试数据\r\n   */\r\n  addTestData(key: string, data: any): void {\r\n    this.dataStore.set(key, data)\r\n  }\r\n  \r\n  /**\r\n   * 清理测试数据\r\n   */\r\n  clearTestData(): void {\r\n    this.dataStore.clear()\r\n    this.validationResults = []\r\n  }\r\n  \r\n  /**\r\n   * 获取验证结果\r\n   */\r\n  getValidationResults(): any[] {\r\n    return this.validationResults\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// 数据一致性测试场景\r\n// ============================================================================\r\n\r\ndescribe('Week 2 Day 8-9 数据一致性验证测试', () => {\r\n  \r\n  let validator: DataConsistencyValidator\r\n  \r\n  beforeAll(async () => {\r\n    console.log('🚀 开始 Week 2 Day 8-9 数据一致性验证测试')\r\n    \r\n    validator = new DataConsistencyValidator()\r\n  })\r\n  \r\n  afterAll(async () => {\r\n    console.log('✅ 数据一致性验证测试完成')\r\n  })\r\n  \r\n  describe('基本数据一致性测试', () => {\r\n    \r\n    test('应该能够验证完整数据的一致性', async () => {\r\n      // 添加完整数据\r\n      validator.addTestData('card-1', {\r\n        id: 'card-1',\r\n        type: 'card',\r\n        title: 'Test Card 1',\r\n        content: 'Test content',\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        syncStatus: 'completed',\r\n        version: 1\r\n      })\r\n      \r\n      validator.addTestData('folder-1', {\r\n        id: 'folder-1',\r\n        type: 'folder',\r\n        name: 'Test Folder',\r\n        parentId: null,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        syncStatus: 'completed',\r\n        version: 1\r\n      })\r\n      \r\n      const result = await validator.validateConsistency()\r\n      \r\n      expect(result.valid).toBe(true)\r\n      expect(result.score).toBe(1.0)\r\n      expect(result.issues).toHaveLength(0)\r\n      \r\n      console.log(`✅ 完整数据一致性测试通过 - 分数: ${(result.score * 100).toFixed(1)}%`)\r\n    })\r\n    \r\n    test('应该能够检测数据损坏', async () => {\r\n      // 添加损坏的数据\r\n      validator.addTestData('corrupted-card', {\r\n        id: 'corrupted-card',\r\n        type: 'card',\r\n        title: 'Corrupted Card',\r\n        content: null, // 损坏的内容\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        syncStatus: 'pending',\r\n        corrupted: true\r\n      })\r\n      \r\n      const result = await validator.validateConsistency()\r\n      \r\n      expect(result.valid).toBe(false)\r\n      expect(result.score).toBeLessThan(1.0)\r\n      expect(result.issues.length).toBeGreaterThan(0)\r\n      \r\n      console.log(`✅ 数据损坏检测测试通过 - 发现 ${result.issues.length} 个问题`)\r\n    })\r\n    \r\n    test('应该能够检测版本冲突', async () => {\r\n      // 添加版本冲突的数据\r\n      validator.addTestData('version-conflict-card', {\r\n        id: 'version-conflict-card',\r\n        type: 'card',\r\n        title: 'Version Conflict Card',\r\n        content: 'Test content',\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        syncStatus: 'pending',\r\n        localVersion: 2,\r\n        remoteVersion: 3,\r\n        expectedVersion: 3\r\n      })\r\n      \r\n      const result = await validator.validateConsistency()\r\n      \r\n      expect(result.valid).toBe(false)\r\n      expect(result.details.version.versionConflicts).toBeGreaterThan(0)\r\n      \r\n      console.log(`✅ 版本冲突检测测试通过 - 发现 ${result.details.version.versionConflicts} 个冲突`)\r\n    })\r\n  })\r\n  \r\n  describe('数据关系一致性测试', () => {\r\n    \r\n    test('应该能够验证数据关系完整性', async () => {\r\n      // 清理之前的数据\r\n      validator.clearTestData()\r\n      \r\n      // 添加有关系的数据\r\n      validator.addTestData('folder-parent', {\r\n        id: 'folder-parent',\r\n        type: 'folder',\r\n        name: 'Parent Folder',\r\n        parentId: null,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        syncStatus: 'completed'\r\n      })\r\n      \r\n      validator.addTestData('folder-child', {\r\n        id: 'folder-child',\r\n        type: 'folder',\r\n        name: 'Child Folder',\r\n        parentId: 'folder-parent',\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        syncStatus: 'completed'\r\n      })\r\n      \r\n      validator.addTestData('card-in-folder', {\r\n        id: 'card-in-folder',\r\n        type: 'card',\r\n        title: 'Card in Folder',\r\n        content: 'Test content',\r\n        folderId: 'folder-child',\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        syncStatus: 'completed'\r\n      })\r\n      \r\n      const result = await validator.validateConsistency()\r\n      \r\n      expect(result.valid).toBe(true)\r\n      expect(result.details.relations.brokenRelations).toBe(0)\r\n      expect(result.details.relations.orphanedRecords).toBe(0)\r\n      \r\n      console.log(`✅ 数据关系完整性测试通过 - 关系数: ${result.details.relations.totalRelations}`)\r\n    })\r\n    \r\n    test('应该能够检测损坏的数据关系', async () => {\r\n      // 清理之前的数据\r\n      validator.clearTestData()\r\n      \r\n      // 添加有损坏关系的数据\r\n      validator.addTestData('card-broken-relation', {\r\n        id: 'card-broken-relation',\r\n        type: 'card',\r\n        title: 'Card with Broken Relation',\r\n        content: 'Test content',\r\n        folderId: 'non-existent-folder', // 不存在的文件夹\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        syncStatus: 'pending'\r\n      })\r\n      \r\n      validator.addTestData('folder-orphaned', {\r\n        id: 'folder-orphaned',\r\n        type: 'folder',\r\n        name: 'Orphaned Folder',\r\n        parentId: 'non-existent-parent', // 不存在的父文件夹\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        syncStatus: 'pending'\r\n      })\r\n      \r\n      const result = await validator.validateConsistency()\r\n      \r\n      expect(result.valid).toBe(false)\r\n      expect(result.details.relations.brokenRelations).toBeGreaterThan(0)\r\n      expect(result.details.relations.orphanedRecords).toBeGreaterThan(0)\r\n      \r\n      console.log(`✅ 损坏关系检测测试通过 - 发现 ${result.details.relations.brokenRelations} 个损坏关系`)\r\n    })\r\n  })\r\n  \r\n  describe('备份一致性测试', () => {\r\n    \r\n    test('应该能够验证备份一致性', async () => {\r\n      // 清理之前的数据\r\n      validator.clearTestData()\r\n      \r\n      // 添加备份数据\r\n      const originalData = {\r\n        id: 'backup-test-card',\r\n        type: 'card',\r\n        title: 'Backup Test Card',\r\n        content: 'Test content for backup',\r\n        createdAt: new Date(),\r\n        updatedAt: new Date()\r\n      }\r\n      \r\n      validator.addTestData('backup-test-card', originalData)\r\n      \r\n      validator.addTestData('backup-backup-test-card', {\r\n        id: 'backup-backup-test-card',\r\n        type: 'backup',\r\n        originalData: originalData,\r\n        data: { ...originalData }, // 复制的数据\r\n        timestamp: new Date(),\r\n        version: 1\r\n      })\r\n      \r\n      const result = await validator.validateConsistency()\r\n      \r\n      expect(result.valid).toBe(true)\r\n      expect(result.details.backup.inconsistentBackups).toBe(0)\r\n      \r\n      console.log(`✅ 备份一致性测试通过 - 备份数: ${result.details.backup.totalBackups}`)\r\n    })\r\n    \r\n    test('应该能够检测备份不一致', async () => {\r\n      // 清理之前的数据\r\n      validator.clearTestData()\r\n      \r\n      // 添加不一致的备份数据\r\n      const originalData = {\r\n        id: 'inconsistent-backup-card',\r\n        type: 'card',\r\n        title: 'Inconsistent Backup Card',\r\n        content: 'Original content',\r\n        createdAt: new Date(),\r\n        updatedAt: new Date()\r\n      }\r\n      \r\n      validator.addTestData('inconsistent-backup-card', originalData)\r\n      \r\n      validator.addTestData('backup-inconsistent-backup-card', {\r\n        id: 'backup-inconsistent-backup-card',\r\n        type: 'backup',\r\n        originalData: originalData,\r\n        data: { \r\n          ...originalData, \r\n          content: 'Modified content' // 修改后的内容，与原数据不一致\r\n        },\r\n        timestamp: new Date(),\r\n        version: 1\r\n      })\r\n      \r\n      const result = await validator.validateConsistency()\r\n      \r\n      expect(result.valid).toBe(false)\r\n      expect(result.details.backup.inconsistentBackups).toBeGreaterThan(0)\r\n      \r\n      console.log(`✅ 备份不一致检测测试通过 - 发现 ${result.details.backup.inconsistentBackups} 个不一致备份`)\r\n    })\r\n  })\r\n  \r\n  describe('同步状态一致性测试', () => {\r\n    \r\n    test('应该能够验证同步状态一致性', async () => {\r\n      // 清理之前的数据\r\n      validator.clearTestData()\r\n      \r\n      // 添加不同同步状态的数据\r\n      validator.addTestData('synced-card', {\r\n        id: 'synced-card',\r\n        type: 'card',\r\n        title: 'Synced Card',\r\n        content: 'Synced content',\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        syncStatus: 'completed'\r\n      })\r\n      \r\n      validator.addTestData('pending-card', {\r\n        id: 'pending-card',\r\n        type: 'card',\r\n        title: 'Pending Card',\r\n        content: 'Pending content',\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        syncStatus: 'pending'\r\n      })\r\n      \r\n      const result = await validator.validateConsistency()\r\n      \r\n      expect(result.valid).toBe(true)\r\n      expect(result.details.sync.pendingOperations).toBe(1)\r\n      expect(result.details.sync.completedOperations).toBe(1)\r\n      \r\n      console.log(`✅ 同步状态一致性测试通过 - 待处理: ${result.details.sync.pendingOperations}, 已完成: ${result.details.sync.completedOperations}`)\r\n    })\r\n    \r\n    test('应该能够检测过期的挂起操作', async () => {\r\n      // 清理之前的数据\r\n      validator.clearTestData()\r\n      \r\n      // 添加过期的挂起操作\r\n      const oldDate = new Date(Date.now() - 25 * 60 * 60 * 1000) // 25小时前\r\n      \r\n      validator.addTestData('expired-pending-card', {\r\n        id: 'expired-pending-card',\r\n        type: 'card',\r\n        title: 'Expired Pending Card',\r\n        content: 'Expired pending content',\r\n        createdAt: oldDate,\r\n        updatedAt: oldDate,\r\n        syncStatus: 'pending'\r\n      })\r\n      \r\n      const result = await validator.validateConsistency()\r\n      \r\n      expect(result.valid).toBe(false)\r\n      expect(result.details.sync.inconsistentStates).toBeGreaterThan(0)\r\n      \r\n      console.log(`✅ 过期挂起操作检测测试通过 - 发现 ${result.details.sync.inconsistentStates} 个不一致状态`)\r\n    })\r\n  })\r\n  \r\n  describe('综合一致性测试', () => {\r\n    \r\n    test('应该能够处理复杂的一致性验证场景', async () => {\r\n      // 清理之前的数据\r\n      validator.clearTestData()\r\n      \r\n      // 创建复杂的测试场景\r\n      const testData = [\r\n        // 正常数据\r\n        {\r\n          id: 'normal-card-1',\r\n          type: 'card',\r\n          title: 'Normal Card 1',\r\n          content: 'Normal content',\r\n          folderId: 'normal-folder-1',\r\n          createdAt: new Date(),\r\n          updatedAt: new Date(),\r\n          syncStatus: 'completed',\r\n          version: 1\r\n        },\r\n        {\r\n          id: 'normal-folder-1',\r\n          type: 'folder',\r\n          name: 'Normal Folder 1',\r\n          parentId: null,\r\n          createdAt: new Date(),\r\n          updatedAt: new Date(),\r\n          syncStatus: 'completed',\r\n          version: 1\r\n        },\r\n        \r\n        // 有问题的数据\r\n        {\r\n          id: 'corrupted-card-1',\r\n          type: 'card',\r\n          title: 'Corrupted Card 1',\r\n          content: null, // 损坏\r\n          createdAt: new Date(),\r\n          updatedAt: new Date(),\r\n          syncStatus: 'pending'\r\n        },\r\n        {\r\n          id: 'orphaned-card-1',\r\n          type: 'card',\r\n          title: 'Orphaned Card 1',\r\n          content: 'Orphaned content',\r\n          folderId: 'non-existent-folder', // 不存在的文件夹\r\n          createdAt: new Date(),\r\n          updatedAt: new Date(),\r\n          syncStatus: 'pending'\r\n        },\r\n        {\r\n          id: 'version-conflict-card-1',\r\n          type: 'card',\r\n          title: 'Version Conflict Card 1',\r\n          content: 'Version conflict content',\r\n          createdAt: new Date(),\r\n          updatedAt: new Date(),\r\n          syncStatus: 'pending',\r\n          localVersion: 1,\r\n          remoteVersion: 2,\r\n          expectedVersion: 2\r\n        }\r\n      ]\r\n      \r\n      // 添加测试数据\r\n      testData.forEach(data => {\r\n        validator.addTestData(data.id, data)\r\n      })\r\n      \r\n      // 执行一致性验证\r\n      const result = await validator.validateConsistency()\r\n      \r\n      // 验证结果\r\n      expect(result.valid).toBe(false)\r\n      expect(result.issues.length).toBeGreaterThan(0)\r\n      expect(result.score).toBeGreaterThan(0.3) // 应该有一定分数\r\n      expect(result.score).toBeLessThan(1.0)\r\n      \r\n      // 验证详细结果\r\n      expect(result.details.integrity.corruptedRecords).toBeGreaterThan(0)\r\n      expect(result.details.relations.brokenRelations).toBeGreaterThan(0)\r\n      expect(result.details.version.versionConflicts).toBeGreaterThan(0)\r\n      \r\n      console.log(`✅ 复杂一致性验证测试通过`)\r\n      console.log(`   - 总分数: ${(result.score * 100).toFixed(1)}%`)\r\n      console.log(`   - 问题总数: ${result.issues.length}`)\r\n      console.log(`   - 损坏记录: ${result.details.integrity.corruptedRecords}`)\r\n      console.log(`   - 关系问题: ${result.details.relations.brokenRelations}`)\r\n      console.log(`   - 版本冲突: ${result.details.version.versionConflicts}`)\r\n    })\r\n    \r\n    test('应该能够生成详细的验证报告', async () => {\r\n      const results = validator.getValidationResults()\r\n      \r\n      expect(results.length).toBeGreaterThan(0)\r\n      \r\n      const latestResult = results[results.length - 1]\r\n      \r\n      expect(latestResult).toHaveProperty('valid')\r\n      expect(latestResult).toHaveProperty('score')\r\n      expect(latestResult).toHaveProperty('issues')\r\n      expect(latestResult).toHaveProperty('details')\r\n      \r\n      console.log(`✅ 验证报告生成测试通过 - 历史验证结果: ${results.length} 个`)\r\n    })\r\n  })\r\n})\r\n\r\n// ============================================================================\r\n// 测试导出\r\n// ============================================================================\r\n\r\nexport async function runDataConsistencyTests() {\r\n  console.log('🚀 运行数据一致性验证测试')\r\n  \r\n  try {\r\n    // 运行 Jest 测试\r\n    const { execSync } = require('child_process')\r\n    \r\n    execSync('npx jest tests/offline/data-consistency.test.ts --verbose', {\r\n      stdio: 'inherit',\r\n      cwd: process.cwd()\r\n    })\r\n    \r\n    console.log('✅ 数据一致性验证测试完成')\r\n    \r\n  } catch (error) {\r\n    console.error('❌ 数据一致性验证测试失败:', error)\r\n    process.exit(1)\r\n  }\r\n}\r\n\r\n// 如果直接运行此文件\r\nif (require.main === module) {\r\n  runDataConsistencyTests()\r\n}"],"version":3}
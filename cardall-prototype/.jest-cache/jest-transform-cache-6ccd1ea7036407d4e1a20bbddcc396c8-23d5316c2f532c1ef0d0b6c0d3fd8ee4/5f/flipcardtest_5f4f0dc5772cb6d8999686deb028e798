c884b1f8cc09db92fd08246000b9461b
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// 翻转卡片组件单元测试
const react_1 = __importDefault(require("react"));
const test_utils_1 = require("../../../test-utils");
const jest_axe_1 = require("jest-axe");
const flip_card_1 = require("../../../../src/components/card/flip-card");
const data_fixtures_1 = require("../../../fixtures/data-fixtures");
describe('FlipCard', () => {
    const mockCard = data_fixtures_1.cardFixtures.textCard;
    const mockOnFlip = jest.fn();
    const mockOnEdit = jest.fn();
    const mockOnDelete = jest.fn();
    const mockOnStyleChange = jest.fn();
    beforeEach(() => {
        jest.clearAllMocks();
    });
    describe('基本渲染', () => {
        it('应该正确渲染卡片标题和内容', () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: mockCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            expect(test_utils_1.screen.getByText(mockCard.title)).toBeInTheDocument();
            expect(test_utils_1.screen.getByText(/This is a simple text card/)).toBeInTheDocument();
        });
        it('应该显示正确的样式', () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: mockCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            const cardElement = test_utils_1.screen.getByRole('article');
            expect(cardElement).toHaveClass('flip-card');
            expect(cardElement).toHaveClass('style-default');
        });
        it('应该显示操作按钮', () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: mockCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            expect(test_utils_1.screen.getByRole('button', { name: /flip/i })).toBeInTheDocument();
            expect(test_utils_1.screen.getByRole('button', { name: /edit/i })).toBeInTheDocument();
            expect(test_utils_1.screen.getByRole('button', { name: /delete/i })).toBeInTheDocument();
            expect(test_utils_1.screen.getByRole('button', { name: /style/i })).toBeInTheDocument();
        });
    });
    describe('翻转功能', () => {
        it('点击卡片时应该翻转', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: mockCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            const card = test_utils_1.screen.getByRole('article');
            test_utils_1.fireEvent.click(card);
            await (0, test_utils_1.waitFor)(() => {
                expect(mockOnFlip).toHaveBeenCalledWith(mockCard.id);
            });
        });
        it('点击翻转按钮时应该翻转', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: mockCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            const flipButton = test_utils_1.screen.getByRole('button', { name: /flip/i });
            test_utils_1.fireEvent.click(flipButton);
            await (0, test_utils_1.waitFor)(() => {
                expect(mockOnFlip).toHaveBeenCalledWith(mockCard.id);
            });
        });
        it('应该正确显示翻转状态', () => {
            const flippedCard = { ...mockCard, isFlipped: true };
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: flippedCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            const cardElement = test_utils_1.screen.getByRole('article');
            expect(cardElement).toHaveClass('flipped');
        });
    });
    describe('编辑功能', () => {
        it('点击编辑按钮时应该进入编辑模式', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: mockCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            const editButton = test_utils_1.screen.getByRole('button', { name: /edit/i });
            test_utils_1.fireEvent.click(editButton);
            await (0, test_utils_1.waitFor)(() => {
                expect(mockOnEdit).toHaveBeenCalledWith(mockCard.id, 'content');
            });
        });
        it('双击卡片时应该进入编辑模式', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: mockCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            const card = test_utils_1.screen.getByRole('article');
            test_utils_1.fireEvent.doubleClick(card);
            await (0, test_utils_1.waitFor)(() => {
                expect(mockOnEdit).toHaveBeenCalledWith(mockCard.id, 'content');
            });
        });
    });
    describe('删除功能', () => {
        it('点击删除按钮时应该触发删除', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: mockCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            const deleteButton = test_utils_1.screen.getByRole('button', { name: /delete/i });
            test_utils_1.fireEvent.click(deleteButton);
            await (0, test_utils_1.waitFor)(() => {
                expect(mockOnDelete).toHaveBeenCalledWith(mockCard.id);
            });
        });
        it('应该显示删除确认对话框', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: mockCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            const deleteButton = test_utils_1.screen.getByRole('button', { name: /delete/i });
            test_utils_1.fireEvent.click(deleteButton);
            await (0, test_utils_1.waitFor)(() => {
                expect(test_utils_1.screen.getByText(/Are you sure you want to delete this card?/i)).toBeInTheDocument();
            });
        });
    });
    describe('样式功能', () => {
        it('点击样式按钮时应该打开样式选择器', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: mockCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            const styleButton = test_utils_1.screen.getByRole('button', { name: /style/i });
            test_utils_1.fireEvent.click(styleButton);
            await (0, test_utils_1.waitFor)(() => {
                expect(test_utils_1.screen.getByText(/Choose a style/i)).toBeInTheDocument();
            });
        });
        it('选择样式时应该触发样式变更', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: mockCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            const styleButton = test_utils_1.screen.getByRole('button', { name: /style/i });
            test_utils_1.fireEvent.click(styleButton);
            const styleOption = test_utils_1.screen.getByText(/Gradient Blue/i);
            test_utils_1.fireEvent.click(styleOption);
            await (0, test_utils_1.waitFor)(() => {
                expect(mockOnStyleChange).toHaveBeenCalledWith(mockCard.id, 'gradient-blue');
            });
        });
    });
    describe('标签显示', () => {
        it('应该显示卡片的标签', () => {
            const cardWithTags = { ...mockCard, tags: ['important', 'work'] };
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: cardWithTags, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            expect(test_utils_1.screen.getByText('important')).toBeInTheDocument();
            expect(test_utils_1.screen.getByText('work')).toBeInTheDocument();
        });
        it('应该正确显示标签颜色', () => {
            const cardWithColoredTags = {
                ...mockCard,
                tags: [
                    { id: 'tag-1', name: 'Important', color: '#ef4444' },
                    { id: 'tag-2', name: 'Work', color: '#3b82f6' },
                ],
            };
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: cardWithColoredTags, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            const importantTag = test_utils_1.screen.getByText('Important');
            const workTag = test_utils_1.screen.getByText('Work');
            expect(importantTag).toHaveStyle({ backgroundColor: '#ef4444' });
            expect(workTag).toHaveStyle({ backgroundColor: '#3b82f6' });
        });
    });
    describe('图片显示', () => {
        it('应该正确显示图片', () => {
            const imageCard = data_fixtures_1.cardFixtures.imageCard;
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: imageCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            const image = test_utils_1.screen.getByAltText('Test image');
            expect(image).toBeInTheDocument();
            expect(image).toHaveAttribute('src', 'test.jpg');
        });
        it('点击图片时应该放大', async () => {
            const imageCard = data_fixtures_1.cardFixtures.imageCard;
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: imageCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            const image = test_utils_1.screen.getByAltText('Test image');
            test_utils_1.fireEvent.click(image);
            await (0, test_utils_1.waitFor)(() => {
                expect(test_utils_1.screen.getByRole('dialog')).toBeInTheDocument();
                expect(test_utils_1.screen.getByAltText('Test image')).toBeInTheDocument();
            });
        });
    });
    describe('键盘交互', () => {
        it('应该支持键盘导航', () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: mockCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            const card = test_utils_1.screen.getByRole('article');
            // Tab 键导航
            test_utils_1.fireEvent.keyDown(card, { key: 'Tab' });
            expect(card).toHaveFocus();
            // 空格键翻转
            test_utils_1.fireEvent.keyDown(card, { key: ' ' });
            expect(mockOnFlip).toHaveBeenCalledWith(mockCard.id);
            // Enter 键编辑
            test_utils_1.fireEvent.keyDown(card, { key: 'Enter' });
            expect(mockOnEdit).toHaveBeenCalledWith(mockCard.id, 'content');
            // Delete 键删除
            test_utils_1.fireEvent.keyDown(card, { key: 'Delete' });
            expect(mockOnDelete).toHaveBeenCalledWith(mockCard.id);
        });
        it('应该显示键盘快捷键提示', () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: mockCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            expect(test_utils_1.screen.getByTitle(/Press Space to flip/i)).toBeInTheDocument();
            expect(test_utils_1.screen.getByTitle(/Press Enter to edit/i)).toBeInTheDocument();
            expect(test_utils_1.screen.getByTitle(/Press Delete to delete/i)).toBeInTheDocument();
        });
    });
    describe('拖拽功能', () => {
        it('应该正确设置拖拽属性', () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: mockCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange, draggable: true }));
            const card = test_utils_1.screen.getByRole('article');
            expect(card).toHaveAttribute('draggable', 'true');
        });
        it('应该处理拖拽事件', () => {
            const mockOnDragStart = jest.fn();
            const mockOnDragEnd = jest.fn();
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: mockCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange, draggable: true, onDragStart: mockOnDragStart, onDragEnd: mockOnDragEnd }));
            const card = test_utils_1.screen.getByRole('article');
            const dragEvent = {
                dataTransfer: {
                    setData: jest.fn(),
                    getData: jest.fn(),
                },
            };
            test_utils_1.fireEvent.dragStart(card, dragEvent);
            expect(mockOnDragStart).toHaveBeenCalledWith(expect.objectContaining({
                type: 'dragstart',
                dataTransfer: dragEvent.dataTransfer,
            }));
            test_utils_1.fireEvent.dragEnd(card);
            expect(mockOnDragEnd).toHaveBeenCalled();
        });
    });
    describe('响应式设计', () => {
        it('应该在不同屏幕尺寸下正确显示', () => {
            // 测试移动端视图
            Object.defineProperty(window, 'innerWidth', { writable: true, configurable: true, value: 375 });
            Object.defineProperty(window, 'innerHeight', { writable: true, configurable: true, value: 667 });
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: mockCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            const card = test_utils_1.screen.getByRole('article');
            expect(card).toHaveClass('mobile-optimized');
            // 测试桌面端视图
            Object.defineProperty(window, 'innerWidth', { writable: true, configurable: true, value: 1920 });
            Object.defineProperty(window, 'innerHeight', { writable: true, configurable: true, value: 1080 });
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: mockCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            const desktopCard = test_utils_1.screen.getByRole('article');
            expect(desktopCard).toHaveClass('desktop-optimized');
        });
    });
    describe('可访问性', () => {
        it('应该通过可访问性测试', async () => {
            const { container } = (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: mockCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            const results = await (0, jest_axe_1.axe)(container);
            expect(results).toHaveNoViolations();
        });
        it('应该有正确的 ARIA 属性', () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: mockCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            const card = test_utils_1.screen.getByRole('article');
            expect(card).toHaveAttribute('aria-label', `Card: ${mockCard.title}`);
            expect(card).toHaveAttribute('aria-roledescription', 'Flip card');
        });
        it('应该有正确的焦点管理', () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: mockCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            const card = test_utils_1.screen.getByRole('article');
            const flipButton = test_utils_1.screen.getByRole('button', { name: /flip/i });
            // 卡片应该可以接收焦点
            expect(card).toHaveAttribute('tabindex', '0');
            // 按钮应该在 Tab 顺序中
            expect(flipButton).toHaveAttribute('tabindex', '0');
        });
    });
    describe('性能优化', () => {
        it('应该使用 React.memo 优化渲染', () => {
            const { rerender } = (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: mockCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            const initialRender = test_utils_1.screen.getByRole('article');
            // 重新渲染相同的卡片
            rerender((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: mockCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            const reRendered = test_utils_1.screen.getByRole('article');
            expect(initialRender).toBe(reRendered);
        });
        it('应该懒加载图片', () => {
            const imageCard = data_fixtures_1.cardFixtures.imageCard;
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: imageCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            const image = test_utils_1.screen.getByAltText('Test image');
            expect(image).toHaveAttribute('loading', 'lazy');
        });
    });
    describe('错误处理', () => {
        it('应该处理无效的卡片数据', () => {
            const invalidCard = { ...mockCard, content: null };
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: invalidCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            expect(test_utils_1.screen.getByText(/Invalid card data/i)).toBeInTheDocument();
        });
        it('应该处理图片加载错误', () => {
            const imageCard = data_fixtures_1.cardFixtures.imageCard;
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: imageCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            const image = test_utils_1.screen.getByAltText('Test image');
            test_utils_1.fireEvent.error(image);
            expect(test_utils_1.screen.getByAltText(/Failed to load image/i)).toBeInTheDocument();
        });
    });
    describe('边界条件', () => {
        it('应该处理超长标题', () => {
            const longTitleCard = {
                ...mockCard,
                title: 'A'.repeat(1000), // 超长标题
            };
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: longTitleCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            const titleElement = test_utils_1.screen.getByText(/A+/);
            expect(titleElement).toHaveClass('line-clamp-2'); // 应该截断长文本
        });
        it('应该处理空内容', () => {
            const emptyCard = {
                ...mockCard,
                content: '',
            };
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: emptyCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            expect(test_utils_1.screen.getByText(/No content/i)).toBeInTheDocument();
        });
        it('应该处理特殊字符', () => {
            const specialCard = {
                ...mockCard,
                title: 'Card with <script>alert("test")</script>',
                content: 'Content with "quotes" and &ampersands',
            };
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: specialCard, onFlip: mockOnFlip, onEdit: mockOnEdit, onDelete: mockOnDelete, onStyleChange: mockOnStyleChange }));
            // 应该正确转义 HTML
            expect(test_utils_1.screen.queryByTestId('script')).not.toBeInTheDocument();
            expect(test_utils_1.screen.getByText(/Card with/)).toBeInTheDocument();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
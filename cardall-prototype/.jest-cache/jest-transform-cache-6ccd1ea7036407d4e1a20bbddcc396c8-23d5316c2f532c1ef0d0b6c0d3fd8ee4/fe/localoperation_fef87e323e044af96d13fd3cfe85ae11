c159a097e6bdcfbbffee62300b66cf1f
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.createImageOperation = exports.createTagOperation = exports.createFolderOperation = exports.createCardOperation = exports.localOperationService = exports.LocalOperationService = exports.DEFAULT_QUEUE_CONFIG = void 0;
const database_1 = require("./database");
// 默认队列配置
exports.DEFAULT_QUEUE_CONFIG = {
    maxRetries: 5,
    initialRetryDelay: 1000, // 1秒
    maxRetryDelay: 300000, // 5分钟
    retryBackoffMultiplier: 2,
    batchSize: 10,
    batchTimeout: 5000, // 5秒
    maxConcurrentBatches: 3,
    processingTimeout: 30000, // 30秒
    idleCheckInterval: 10000, // 10秒
    cleanupInterval: 300000, // 5分钟
    networkAware: true,
    offlineMode: true,
    requireWifiForLargeFiles: true,
    maxQueueSize: 10000,
    maxAge: 7 * 24 * 60 * 60 * 1000 // 7天
};
// ============================================================================
// 本地操作服务 - 核心队列管理
// ============================================================================
class LocalOperationService {
    constructor(config = {}) {
        Object.defineProperty(this, "config", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "isProcessing", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "processingTimer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "cleanupTimer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "currentBatches", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        // 事件监听器
        Object.defineProperty(this, "listeners", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        this.config = { ...exports.DEFAULT_QUEUE_CONFIG, ...config };
        this.initialize();
    }
    // 初始化服务
    async initialize() {
        try {
            // 确保数据库已初始化
            await database_1.db.open();
            // 从本地存储恢复队列
            await this.restoreQueueFromStorage();
            // 启动定期处理
            this.startProcessing();
            // 启动定期清理
            this.startCleanup();
            console.log('LocalOperationService initialized successfully');
        }
        catch (error) {
            console.error('Failed to initialize LocalOperationService:', error);
        }
    }
    // 从本地存储恢复队列
    async restoreQueueFromStorage() {
        try {
            const storedQueue = localStorage.getItem('syncQueue');
            if (storedQueue) {
                const queue = JSON.parse(storedQueue);
                // 将存储的操作添加到数据库
                for (const operation of queue) {
                    // 转换旧格式到新格式（如果需要）
                    const convertedOperation = this.convertOperationFormat(operation);
                    try {
                        await database_1.db.syncQueue.add(convertedOperation);
                    }
                    catch (error) {
                        // 如果操作已存在，跳过
                        console.warn('Operation already exists in database, skipping:', operation.id);
                    }
                }
                // 清空本地存储
                localStorage.removeItem('syncQueue');
                console.log(`Restored ${queue.length} operations from local storage`);
            }
        }
        catch (error) {
            console.error('Failed to restore queue from storage:', error);
        }
    }
    // 转换操作格式（旧格式到新格式）
    convertOperationFormat(operation) {
        // 如果是新格式，直接返回
        if (operation.entityType && operation.operationType && operation.entityId) {
            return operation;
        }
        // 转换旧格式到新格式
        return {
            id: operation.id,
            entityType: operation.table === 'cards' ? 'card' :
                operation.table === 'folders' ? 'folder' :
                    operation.table === 'tags' ? 'tag' : 'image',
            operationType: operation.type,
            entityId: operation.localId,
            data: operation.data,
            timestamp: operation.timestamp,
            retryCount: operation.retryCount || 0,
            status: operation.status || 'pending',
            localVersion: operation.localVersion || 1,
            priority: operation.priority || 'normal',
            dependsOn: operation.dependsOn || []
        };
    }
    // ============================================================================
    // 核心队列操作
    // ============================================================================
    // 添加操作到队列
    async addOperation(operation) {
        // 验证必需字段
        if (!operation.entityId || operation.entityId.trim() === '') {
            throw new Error('Local ID is required');
        }
        if (!operation.entityType || !['card', 'folder', 'tag', 'image'].includes(operation.entityType)) {
            throw new Error('Invalid entity type');
        }
        if (!operation.operationType || !['create', 'update', 'delete'].includes(operation.operationType)) {
            throw new Error('Invalid operation type');
        }
        if (!operation.data) {
            throw new Error('Operation data is required');
        }
        const id = crypto.randomUUID();
        const now = new Date();
        const fullOperation = {
            ...operation,
            id,
            timestamp: now,
            retryCount: 0,
            status: 'pending',
            localVersion: Date.now(), // 使用时间戳作为本地版本
            retryDelay: this.config.initialRetryDelay,
            maxRetries: this.config.maxRetries
        };
        // 获取当前网络信息
        if (this.config.networkAware) {
            fullOperation.networkInfo = await this.getNetworkInfo();
        }
        // 检查重复操作
        const existingOperation = await database_1.db.syncQueue
            .where('entityId')
            .equals(operation.entityId)
            .and(op => op.entityType === operation.entityType && op.status === 'pending')
            .first();
        try {
            if (existingOperation) {
                // 更新现有操作而不是创建新操作
                await database_1.db.syncQueue.update(existingOperation.id, {
                    data: operation.data,
                    previousData: operation.previousData,
                    timestamp: now,
                    localVersion: Date.now()
                });
                console.log(`Operation updated in queue: ${existingOperation.id}`);
                return existingOperation.id;
            }
            await database_1.db.syncQueue.add(fullOperation);
            // 通知监听器
            this.notifyListeners('operationAdded', fullOperation);
            // 更新统计信息
            await this.updateQueueStats();
            console.log(`Operation added to queue: ${id}`);
            return id;
        }
        catch (error) {
            console.error('Failed to add operation to queue:', error);
            throw error;
        }
    }
    // 获取待处理操作
    async getPendingOperations(limit = this.config.batchSize, priorityFilter) {
        try {
            let query = database_1.db.syncQueue
                .where('status')
                .equals('pending')
                .orderBy('priority') // 按优先级排序
                .reverse(); // 高优先级在前
            // 应用优先级过滤
            if (priorityFilter && priorityFilter.length > 0) {
                query = query.filter(op => priorityFilter.includes(op.priority));
            }
            const operations = await query.limit(limit).toArray();
            // 检查依赖关系
            const readyOperations = await this.filterReadyOperations(operations);
            return readyOperations;
        }
        catch (error) {
            console.error('Failed to get pending operations:', error);
            return [];
        }
    }
    // 标记操作为处理中
    async markOperationProcessing(operationId) {
        try {
            await database_1.db.syncQueue.update(operationId, {
                status: 'processing',
                processingStartedAt: new Date()
            });
        }
        catch (error) {
            console.error(`Failed to mark operation ${operationId} as processing:`, error);
        }
    }
    // 标记操作完成
    async markOperationCompleted(operationId) {
        try {
            const operation = await database_1.db.syncQueue.get(operationId);
            if (!operation)
                return;
            await database_1.db.syncQueue.update(operationId, {
                status: 'completed',
                processingEndedAt: new Date()
            });
            // 通知监听器
            this.notifyListeners('operationCompleted', operation);
            // 更新统计信息
            await this.updateQueueStats();
        }
        catch (error) {
            console.error(`Failed to mark operation ${operationId} as completed:`, error);
        }
    }
    // 标记操作失败
    async markOperationFailed(operationId, error) {
        try {
            const operation = await database_1.db.syncQueue.get(operationId);
            if (!operation)
                return;
            const retryCount = operation.retryCount + 1;
            const nextRetryDelay = Math.min(operation.retryDelay * this.config.retryBackoffMultiplier, this.config.maxRetryDelay);
            const update = {
                retryCount,
                retryDelay: nextRetryDelay,
                lastError: error.message
            };
            // 检查是否超过最大重试次数
            if (retryCount >= operation.maxRetries) {
                update.status = 'failed';
            }
            else {
                // 重置为pending以便重试
                update.status = 'pending';
            }
            await database_1.db.syncQueue.update(operationId, update);
            // 通知监听器
            this.notifyListeners('operationFailed', operation, error);
            // 更新统计信息
            await this.updateQueueStats();
        }
        catch (error) {
            console.error(`Failed to mark operation ${operationId} as failed:`, error);
        }
    }
    // 取消操作
    async cancelOperation(operationId, reason) {
        try {
            const operation = await database_1.db.syncQueue.get(operationId);
            if (!operation)
                return;
            await database_1.db.syncQueue.update(operationId, {
                status: 'cancelled',
                lastError: reason || 'Cancelled by user'
            });
            // 通知监听器
            this.notifyListeners('operationFailed', operation, new Error(reason || 'Operation cancelled'));
            // 更新统计信息
            await this.updateQueueStats();
        }
        catch (error) {
            console.error(`Failed to cancel operation ${operationId}:`, error);
        }
    }
    // ============================================================================
    // 批处理和队列管理
    // ============================================================================
    // 开始处理队列
    startProcessing() {
        if (this.processingTimer) {
            clearInterval(this.processingTimer);
        }
        this.processingTimer = setInterval(async () => {
            if (!this.isProcessing) {
                await this.processQueue();
            }
        }, this.config.idleCheckInterval);
    }
    // 处理队列
    async processQueue() {
        if (this.isProcessing || this.currentBatches.size >= this.config.maxConcurrentBatches) {
            return;
        }
        this.isProcessing = true;
        try {
            // 获取待处理操作
            const operations = await this.getPendingOperations();
            if (operations.length === 0) {
                return;
            }
            // 分批处理
            const batches = await this.createBatches(operations);
            for (const batch of batches) {
                const batchId = crypto.randomUUID();
                const batchPromise = this.processBatch(batch, batchId);
                this.currentBatches.set(batchId, batchPromise);
                batchPromise
                    .catch(error => {
                    console.error(`Batch ${batchId} failed:`, error);
                })
                    .finally(() => {
                    this.currentBatches.delete(batchId);
                });
            }
        }
        catch (error) {
            console.error('Error processing queue:', error);
        }
        finally {
            this.isProcessing = false;
        }
    }
    // 创建批处理组
    async createBatches(operations) {
        const batches = [];
        let currentBatch = [];
        // 按优先级排序
        const sortedOperations = [...operations].sort((a, b) => {
            const priorityOrder = { critical: 4, high: 3, normal: 2, low: 1 };
            return priorityOrder[b.priority] - priorityOrder[a.priority];
        });
        for (const operation of sortedOperations) {
            // 检查批次大小限制
            if (currentBatch.length >= this.config.batchSize) {
                batches.push(currentBatch);
                currentBatch = [];
            }
            // 检查网络限制
            if (this.config.requireWifiForLargeFiles && operation.entityType === 'image') {
                const networkInfo = await this.getNetworkInfo();
                if (networkInfo.connectionType !== 'wifi') {
                    continue; // 跳过大文件操作
                }
            }
            currentBatch.push(operation);
        }
        if (currentBatch.length > 0) {
            batches.push(currentBatch);
        }
        return batches;
    }
    // 处理批次
    async processBatch(operations, batchId) {
        const batchStartTime = Date.now();
        try {
            // 标记所有操作为处理中
            await Promise.all(operations.map(op => this.markOperationProcessing(op.id)));
            // 通知监听器
            operations.forEach(op => {
                this.notifyListeners('operationStarted', op);
            });
            // 调用实际的同步逻辑
            await this.executeBatchSync(operations, batchId);
            // 标记所有操作为完成
            await Promise.all(operations.map(op => this.markOperationCompleted(op.id)));
            console.log(`Batch ${batchId} processed successfully (${operations.length} operations)`);
        }
        catch (error) {
            console.error(`Batch ${batchId} failed:`, error);
            // 标记所有操作为失败
            await Promise.all(operations.map(op => this.markOperationFailed(op.id, error)));
        }
    }
    // 执行批处理同步逻辑
    async executeBatchSync(operations, batchId) {
        try {
            // 导入统一同步服务（延迟导入避免循环依赖）
            const { unifiedSyncService } = await Promise.resolve().then(() => __importStar(require('./unified-sync-service')));
            // 按操作类型分组处理
            const operationGroups = this.groupOperationsByType(operations);
            // 处理每个操作组
            for (const [entityType, entityOperations] of Object.entries(operationGroups)) {
                await this.processEntityGroup(entityType, entityOperations, unifiedSyncService);
            }
            console.log(`Batch ${batchId} sync execution completed`);
        }
        catch (error) {
            console.error(`Batch ${batchId} sync execution failed:`, error);
            throw error;
        }
    }
    // 按实体类型分组操作
    groupOperationsByType(operations) {
        const groups = {};
        for (const operation of operations) {
            if (!groups[operation.entityType]) {
                groups[operation.entityType] = [];
            }
            groups[operation.entityType].push(operation);
        }
        return groups;
    }
    // 处理实体操作组
    async processEntityGroup(entityType, operations, syncService) {
        switch (entityType) {
            case 'card':
                await this.processCardOperations(operations, syncService);
                break;
            case 'folder':
                await this.processFolderOperations(operations, syncService);
                break;
            case 'tag':
                await this.processTagOperations(operations, syncService);
                break;
            case 'image':
                await this.processImageOperations(operations, syncService);
                break;
            default:
                console.warn(`Unknown entity type: ${entityType}`);
        }
    }
    // 处理卡片操作
    async processCardOperations(operations, syncService) {
        for (const operation of operations) {
            try {
                switch (operation.operationType) {
                    case 'create':
                        await syncService.addOperation({
                            type: 'create',
                            entity: 'card',
                            entityId: operation.entityId,
                            data: operation.data,
                            priority: operation.priority,
                            userId: operation.userId
                        });
                        break;
                    case 'update':
                        await syncService.addOperation({
                            type: 'update',
                            entity: 'card',
                            entityId: operation.entityId,
                            data: operation.data,
                            priority: operation.priority,
                            userId: operation.userId
                        });
                        break;
                    case 'delete':
                        await syncService.addOperation({
                            type: 'delete',
                            entity: 'card',
                            entityId: operation.entityId,
                            data: { userId: operation.userId },
                            priority: operation.priority,
                            userId: operation.userId
                        });
                        break;
                }
            }
            catch (error) {
                console.error(`Failed to process card operation ${operation.id}:`, error);
                throw error;
            }
        }
    }
    // 处理文件夹操作
    async processFolderOperations(operations, syncService) {
        for (const operation of operations) {
            try {
                switch (operation.operationType) {
                    case 'create':
                        await syncService.addOperation({
                            type: 'create',
                            entity: 'folder',
                            entityId: operation.entityId,
                            data: operation.data,
                            priority: operation.priority,
                            userId: operation.userId
                        });
                        break;
                    case 'update':
                        await syncService.addOperation({
                            type: 'update',
                            entity: 'folder',
                            entityId: operation.entityId,
                            data: operation.data,
                            priority: operation.priority,
                            userId: operation.userId
                        });
                        break;
                    case 'delete':
                        await syncService.addOperation({
                            type: 'delete',
                            entity: 'folder',
                            entityId: operation.entityId,
                            data: { userId: operation.userId },
                            priority: operation.priority,
                            userId: operation.userId
                        });
                        break;
                }
            }
            catch (error) {
                console.error(`Failed to process folder operation ${operation.id}:`, error);
                throw error;
            }
        }
    }
    // 处理标签操作
    async processTagOperations(operations, syncService) {
        for (const operation of operations) {
            try {
                switch (operation.operationType) {
                    case 'create':
                        await syncService.addOperation({
                            type: 'create',
                            entity: 'tag',
                            entityId: operation.entityId,
                            data: operation.data,
                            priority: operation.priority,
                            userId: operation.userId
                        });
                        break;
                    case 'update':
                        await syncService.addOperation({
                            type: 'update',
                            entity: 'tag',
                            entityId: operation.entityId,
                            data: operation.data,
                            priority: operation.priority,
                            userId: operation.userId
                        });
                        break;
                    case 'delete':
                        await syncService.addOperation({
                            type: 'delete',
                            entity: 'tag',
                            entityId: operation.entityId,
                            data: { userId: operation.userId },
                            priority: operation.priority,
                            userId: operation.userId
                        });
                        break;
                }
            }
            catch (error) {
                console.error(`Failed to process tag operation ${operation.id}:`, error);
                throw error;
            }
        }
    }
    // 处理图片操作
    async processImageOperations(operations, syncService) {
        for (const operation of operations) {
            try {
                switch (operation.operationType) {
                    case 'create':
                        await syncService.addOperation({
                            type: 'create',
                            entity: 'image',
                            entityId: operation.entityId,
                            data: operation.data,
                            priority: operation.priority,
                            userId: operation.userId
                        });
                        break;
                    case 'update':
                        await syncService.addOperation({
                            type: 'update',
                            entity: 'image',
                            entityId: operation.entityId,
                            data: operation.data,
                            priority: operation.priority,
                            userId: operation.userId
                        });
                        break;
                    case 'delete':
                        await syncService.addOperation({
                            type: 'delete',
                            entity: 'image',
                            entityId: operation.entityId,
                            data: { userId: operation.userId },
                            priority: operation.priority,
                            userId: operation.userId
                        });
                        break;
                }
            }
            catch (error) {
                console.error(`Failed to process image operation ${operation.id}:`, error);
                throw error;
            }
        }
    }
    // ============================================================================
    // 清理和维护
    // ============================================================================
    // 启动定期清理
    startCleanup() {
        if (this.cleanupTimer) {
            clearInterval(this.cleanupTimer);
        }
        this.cleanupTimer = setInterval(async () => {
            await this.cleanupQueue();
        }, this.config.cleanupInterval);
    }
    // 清理队列
    async cleanupQueue() {
        try {
            const now = Date.now();
            // 清理过期的操作
            const expiredDate = new Date(now - this.config.maxAge);
            await database_1.db.syncQueue
                .where('timestamp')
                .below(expiredDate)
                .delete();
            // 清理已完成操作（保留最近的1000条用于统计）
            const completedOperations = await database_1.db.syncQueue
                .where('status')
                .equals('completed')
                .orderBy('timestamp')
                .reverse()
                .offset(1000)
                .toArray();
            if (completedOperations.length > 0) {
                await database_1.db.syncQueue.bulkDelete(completedOperations.map(op => op.id));
            }
            // 检查队列大小限制
            const totalCount = await database_1.db.syncQueue.count();
            if (totalCount > this.config.maxQueueSize) {
                const excess = totalCount - this.config.maxQueueSize;
                const oldestOperations = await database_1.db.syncQueue
                    .orderBy('timestamp')
                    .limit(excess)
                    .toArray();
                await database_1.db.syncQueue.bulkDelete(oldestOperations.map(op => op.id));
            }
            console.log('Queue cleanup completed');
        }
        catch (error) {
            console.error('Queue cleanup failed:', error);
        }
    }
    // ============================================================================
    // 网络状态检测
    // ============================================================================
    // 获取网络信息
    async getNetworkInfo() {
        if (!('connection' in navigator)) {
            return {
                online: navigator.onLine,
                connectionType: 'none',
                effectiveType: '4g'
            };
        }
        const connection = navigator.connection;
        return {
            online: navigator.onLine,
            connectionType: this.getConnectionType(connection),
            effectiveType: connection.effectiveType || '4g',
            rtt: connection.rtt,
            downlink: connection.downlink
        };
    }
    // 获取连接类型
    getConnectionType(connection) {
        if (!connection)
            return 'none';
        switch (connection.type) {
            case 'wifi':
            case 'ethernet':
                return 'wifi';
            case 'cellular':
            case 'bluetooth':
                return 'cellular';
            default:
                return 'none';
        }
    }
    // ============================================================================
    // 依赖关系检查
    // ============================================================================
    // 检查操作是否准备就绪（依赖关系已满足）
    async filterReadyOperations(operations) {
        const readyOperations = [];
        for (const operation of operations) {
            if (!operation.dependsOn || operation.dependsOn.length === 0) {
                readyOperations.push(operation);
                continue;
            }
            // 检查所有依赖操作是否已完成
            const dependencies = await database_1.db.syncQueue
                .where('id')
                .anyOf(operation.dependsOn)
                .toArray();
            const allDependenciesCompleted = dependencies.every(dep => dep.status === 'completed');
            if (allDependenciesCompleted) {
                readyOperations.push(operation);
            }
        }
        return readyOperations;
    }
    // ============================================================================
    // 统计和监控
    // ============================================================================
    // 获取队列统计信息
    async getQueueStats() {
        try {
            const allOperations = await database_1.db.syncQueue.toArray();
            const stats = {
                totalOperations: allOperations.length,
                pendingOperations: 0,
                processingOperations: 0,
                failedOperations: 0,
                completedOperations: 0,
                byType: {
                    card: 0,
                    folder: 0,
                    tag: 0,
                    image: 0
                },
                byPriority: {
                    critical: 0,
                    high: 0,
                    normal: 0,
                    low: 0
                },
                byStatus: {
                    pending: 0,
                    processing: 0,
                    completed: 0,
                    failed: 0,
                    cancelled: 0
                },
                averageProcessingTime: 0,
                failureRate: 0,
                oldestPendingAge: 0,
                averageRetryCount: 0
            };
            // 计算各类统计
            for (const operation of allOperations) {
                // 按类型统计
                stats.byType[operation.entityType]++;
                // 按优先级统计
                stats.byPriority[operation.priority]++;
                // 按状态统计
                stats.byStatus[operation.status]++;
                // 计算处理时间
                if (operation.status === 'completed' && operation.processingStartedAt) {
                    const processingTime = operation.timestamp.getTime() - operation.processingStartedAt.getTime();
                    stats.averageProcessingTime += processingTime;
                }
                // 计算平均重试次数
                stats.averageRetryCount += operation.retryCount;
            }
            // 计算衍生统计
            stats.pendingOperations = stats.byStatus.pending;
            stats.processingOperations = stats.byStatus.processing;
            stats.failedOperations = stats.byStatus.failed;
            stats.completedOperations = stats.byStatus.completed;
            // 计算平均处理时间
            const completedCount = stats.byStatus.completed;
            if (completedCount > 0) {
                stats.averageProcessingTime /= completedCount;
            }
            // 计算平均重试次数
            if (allOperations.length > 0) {
                stats.averageRetryCount /= allOperations.length;
            }
            // 计算失败率
            const totalWithStatus = allOperations.filter(op => ['completed', 'failed'].includes(op.status)).length;
            if (totalWithStatus > 0) {
                stats.failureRate = stats.failedOperations / totalWithStatus;
            }
            // 计算最老的待处理操作年龄
            const pendingOperations = allOperations.filter(op => op.status === 'pending');
            if (pendingOperations.length > 0) {
                const oldest = pendingOperations.reduce((oldest, current) => {
                    const oldestTime = typeof oldest.timestamp === 'string' ? new Date(oldest.timestamp).getTime() : oldest.timestamp.getTime();
                    const currentTime = typeof current.timestamp === 'string' ? new Date(current.timestamp).getTime() : current.timestamp.getTime();
                    return currentTime < oldestTime ? current : oldest;
                });
                const oldestTime = typeof oldest.timestamp === 'string' ? new Date(oldest.timestamp).getTime() : oldest.timestamp.getTime();
                stats.oldestPendingAge = Date.now() - oldestTime;
            }
            return stats;
        }
        catch (error) {
            console.error('Failed to get queue stats:', error);
            return this.getEmptyStats();
        }
    }
    // 获取空统计信息
    getEmptyStats() {
        return {
            totalOperations: 0,
            pendingOperations: 0,
            processingOperations: 0,
            failedOperations: 0,
            completedOperations: 0,
            byType: { card: 0, folder: 0, tag: 0, image: 0 },
            byPriority: { critical: 0, high: 0, normal: 0, low: 0 },
            byStatus: { pending: 0, processing: 0, completed: 0, failed: 0, cancelled: 0 },
            averageProcessingTime: 0,
            failureRate: 0,
            oldestPendingAge: 0,
            averageRetryCount: 0
        };
    }
    // 更新队列统计信息并通知监听器
    async updateQueueStats() {
        try {
            const stats = await this.getQueueStats();
            this.notifyListeners('queueStatsChanged', stats);
        }
        catch (error) {
            console.error('Failed to update queue stats:', error);
        }
    }
    // ============================================================================
    // 事件监听器管理
    // ============================================================================
    // 添加事件监听器
    addEventListener(event, callback) {
        this.listeners[event] = callback;
    }
    // 移除事件监听器
    removeEventListener(event) {
        delete this.listeners[event];
    }
    // 通知监听器
    notifyListeners(event, ...args) {
        const listener = this.listeners[event];
        if (listener) {
            try {
                listener(...args);
            }
            catch (error) {
                console.error(`Error in ${event} listener:`, error);
            }
        }
    }
    // ============================================================================
    // 便利方法
    // ============================================================================
    // 清空队列
    async clearQueue() {
        try {
            await database_1.db.syncQueue.clear();
            await this.updateQueueStats();
            console.log('Queue cleared successfully');
        }
        catch (error) {
            console.error('Failed to clear queue:', error);
        }
    }
    // 获取操作详情
    async getOperation(id) {
        try {
            return await database_1.db.syncQueue.get(id);
        }
        catch (error) {
            console.error(`Failed to get operation ${id}:`, error);
            return undefined;
        }
    }
    // 删除操作
    async removeOperation(id) {
        try {
            await database_1.db.syncQueue.delete(id);
            await this.updateQueueStats();
        }
        catch (error) {
            console.error(`Failed to remove operation ${id}:`, error);
            throw error;
        }
    }
    // 重试失败的操作
    async retryFailedOperations() {
        try {
            const failedOperations = await database_1.db.syncQueue
                .where('status')
                .equals('failed')
                .toArray();
            for (const operation of failedOperations) {
                await database_1.db.syncQueue.update(operation.id, {
                    status: 'pending',
                    retryCount: 0,
                    retryDelay: this.config.initialRetryDelay,
                    lastError: undefined
                });
            }
            await this.updateQueueStats();
            console.log(`Retried ${failedOperations.length} failed operations`);
            return failedOperations.length;
        }
        catch (error) {
            console.error('Failed to retry failed operations:', error);
            return 0;
        }
    }
    // 清理已完成的操作
    async clearCompletedOperations() {
        try {
            const completedOperations = await database_1.db.syncQueue
                .where('status')
                .equals('completed')
                .toArray();
            // 保留最近完成的操作用于历史记录
            const keepRecentCount = 100;
            const operationsToDelete = completedOperations.slice(0, -keepRecentCount);
            for (const operation of operationsToDelete) {
                await database_1.db.syncQueue.delete(operation.id);
            }
            await this.updateQueueStats();
            console.log(`Cleared ${operationsToDelete.length} completed operations, kept ${completedOperations.length - operationsToDelete.length} recent ones`);
            return operationsToDelete.length;
        }
        catch (error) {
            console.error('Failed to clear completed operations:', error);
            return 0;
        }
    }
    // 更新配置
    updateConfig(newConfig) {
        // 验证配置参数
        if (newConfig.maxRetries !== undefined && newConfig.maxRetries < 0) {
            throw new Error('maxRetries must be non-negative');
        }
        if (newConfig.batchSize !== undefined && newConfig.batchSize <= 0) {
            throw new Error('batchSize must be positive');
        }
        if (newConfig.maxQueueSize !== undefined && newConfig.maxQueueSize < 0) {
            throw new Error('maxQueueSize must be non-negative');
        }
        if (newConfig.processingTimeout !== undefined && newConfig.processingTimeout <= 0) {
            throw new Error('processingTimeout must be positive');
        }
        if (newConfig.idleCheckInterval !== undefined && newConfig.idleCheckInterval <= 0) {
            throw new Error('idleCheckInterval must be positive');
        }
        // 更新配置
        this.config = { ...this.config, ...newConfig };
        // 如果定时器间隔改变，重新启动定时器
        if (newConfig.idleCheckInterval !== undefined) {
            this.startProcessing();
        }
        if (newConfig.cleanupInterval !== undefined) {
            this.startCleanup();
        }
        console.log('LocalOperationService config updated');
    }
    // 销毁服务
    destroy() {
        if (this.processingTimer) {
            clearInterval(this.processingTimer);
        }
        if (this.cleanupTimer) {
            clearInterval(this.cleanupTimer);
        }
        // 等待当前批次完成
        Promise.all(this.currentBatches.values()).then(() => {
            console.log('LocalOperationService destroyed');
        });
    }
}
exports.LocalOperationService = LocalOperationService;
// 导出单例实例
exports.localOperationService = new LocalOperationService();
// ============================================================================
// 导出工具函数
// ============================================================================
// 创建卡片操作
const createCardOperation = (operationType, cardData, userId, previousData) => {
    return {
        entityType: 'card',
        operationType,
        entityId: cardData.id,
        data: cardData,
        previousData,
        userId,
        priority: operationType === 'delete' ? 'high' : 'normal',
        maxRetries: 5
    };
};
exports.createCardOperation = createCardOperation;
// 创建文件夹操作
const createFolderOperation = (operationType, folderData, userId, previousData) => {
    return {
        entityType: 'folder',
        operationType,
        entityId: folderData.id,
        data: folderData,
        previousData,
        userId,
        priority: operationType === 'delete' ? 'high' : 'normal',
        maxRetries: 5
    };
};
exports.createFolderOperation = createFolderOperation;
// 创建标签操作
const createTagOperation = (operationType, tagData, userId, previousData) => {
    return {
        entityType: 'tag',
        operationType,
        entityId: tagData.id,
        data: tagData,
        previousData,
        userId,
        priority: 'normal',
        maxRetries: 3
    };
};
exports.createTagOperation = createTagOperation;
// 创建图片操作
const createImageOperation = (operationType, imageData, userId, previousData) => {
    return {
        entityType: 'image',
        operationType,
        entityId: imageData.id,
        data: imageData,
        previousData,
        userId,
        priority: operationType === 'delete' ? 'high' : 'low',
        maxRetries: 3
    };
};
exports.createImageOperation = createImageOperation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXHNyY1xcc2VydmljZXNcXGxvY2FsLW9wZXJhdGlvbi50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx5Q0FBeUc7QUF3SHpHLFNBQVM7QUFDSSxRQUFBLG9CQUFvQixHQUFnQjtJQUMvQyxVQUFVLEVBQUUsQ0FBQztJQUNiLGlCQUFpQixFQUFFLElBQUksRUFBRSxLQUFLO0lBQzlCLGFBQWEsRUFBRSxNQUFNLEVBQUUsTUFBTTtJQUM3QixzQkFBc0IsRUFBRSxDQUFDO0lBRXpCLFNBQVMsRUFBRSxFQUFFO0lBQ2IsWUFBWSxFQUFFLElBQUksRUFBRSxLQUFLO0lBQ3pCLG9CQUFvQixFQUFFLENBQUM7SUFFdkIsaUJBQWlCLEVBQUUsS0FBSyxFQUFFLE1BQU07SUFDaEMsaUJBQWlCLEVBQUUsS0FBSyxFQUFFLE1BQU07SUFDaEMsZUFBZSxFQUFFLE1BQU0sRUFBRSxNQUFNO0lBRS9CLFlBQVksRUFBRSxJQUFJO0lBQ2xCLFdBQVcsRUFBRSxJQUFJO0lBQ2pCLHdCQUF3QixFQUFFLElBQUk7SUFFOUIsWUFBWSxFQUFFLEtBQUs7SUFDbkIsTUFBTSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSztDQUN0QyxDQUFBO0FBRUQsK0VBQStFO0FBQy9FLGtCQUFrQjtBQUNsQiwrRUFBK0U7QUFFL0UsTUFBYSxxQkFBcUI7SUFnQmhDLFlBQVksU0FBK0IsRUFBRTtRQWZyQzs7Ozs7V0FBbUI7UUFDbkI7Ozs7bUJBQWUsS0FBSztXQUFBO1FBQ3BCOzs7O21CQUF5QyxJQUFJO1dBQUE7UUFDN0M7Ozs7bUJBQXNDLElBQUk7V0FBQTtRQUMxQzs7OzttQkFBNkMsSUFBSSxHQUFHLEVBQUU7V0FBQTtRQUU5RCxRQUFRO1FBQ0E7Ozs7bUJBTUosRUFBRTtXQUFBO1FBR0osSUFBSSxDQUFDLE1BQU0sR0FB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TUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRO1FBQ3hELFVBQVUsRUFBRSxDQUFDO0tBQ2QsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQWhCWSxRQUFBLHFCQUFxQix5QkFnQmpDO0FBRUQsU0FBUztBQUNGLE1BQU0sa0JBQWtCLEdBQUcsQ0FDaEMsYUFBNkMsRUFDN0MsT0FBYyxFQUNkLE1BQWUsRUFDZixZQUFvQixFQUNxRSxFQUFFO0lBQzNGLE9BQU87UUFDTCxVQUFVLEVBQUUsS0FBSztRQUNqQixhQUFhO1FBQ2IsUUFBUSxFQUFFLE9BQU8sQ0FBQyxFQUFHO1FBQ3JCLElBQUksRUFBRSxPQUFPO1FBQ2IsWUFBWTtRQUNaLE1BQU07UUFDTixRQUFRLEVBQUUsUUFBUTtRQUNsQixVQUFVLEVBQUUsQ0FBQztLQUNkLENBQUE7QUFDSCxDQUFDLENBQUE7QUFoQlksUUFBQSxrQkFBa0Isc0JBZ0I5QjtBQUVELFNBQVM7QUFDRixNQUFNLG9CQUFvQixHQUFHLENBQ2xDLGFBQTZDLEVBQzdDLFNBQWtCLEVBQ2xCLE1BQWUsRUFDZixZQUFzQixFQUNtRSxFQUFFO0lBQzNGLE9BQU87UUFDTCxVQUFVLEVBQUUsT0FBTztRQUNuQixhQUFhO1FBQ2IsUUFBUSxFQUFFLFNBQVMsQ0FBQyxFQUFHO1FBQ3ZCLElBQUksRUFBRSxTQUFTO1FBQ2YsWUFBWTtRQUNaLE1BQU07UUFDTixRQUFRLEVBQUUsYUFBYSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLO1FBQ3JELFVBQVUsRUFBRSxDQUFDO0tBQ2QsQ0FBQTtBQUNILENBQUMsQ0FBQTtBQWhCWSxRQUFBLG9CQUFvQix3QkFnQmhDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkQ6XFxQcm9qZWN0c1xcQ2FyZEV2ZXJ5dGhpbmdcXGNhcmRhbGwtcHJvdG90eXBlXFxzcmNcXHNlcnZpY2VzXFxsb2NhbC1vcGVyYXRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGIsIHR5cGUgU3luY09wZXJhdGlvbiwgdHlwZSBEYkNhcmQsIHR5cGUgRGJGb2xkZXIsIHR5cGUgRGJUYWcsIHR5cGUgRGJJbWFnZSB9IGZyb20gJy4vZGF0YWJhc2UnXG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIOacrOWcsOaTjeS9nOmYn+WIl+euoeeQhiAtIOS8mOWMlueahOWQjOatpemYn+WIl+ezu+e7n1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyDmianlsZXnmoTlkIzmraXmk43kvZzmjqXlj6MgLSDmlK/mjIHmm7TlpI3mnYLnmoTpmJ/liJfnrqHnkIZcbmV4cG9ydCBpbnRlcmZhY2UgTG9jYWxTeW5jT3BlcmF0aW9uIGV4dGVuZHMgU3luY09wZXJhdGlvbiB7XG4gIC8vIOaTjeS9nOWFg+aVsOaNrlxuICBpZDogc3RyaW5nXG4gIGVudGl0eUlkOiBzdHJpbmdcbiAgZW50aXR5VHlwZTogJ2NhcmQnIHwgJ2ZvbGRlcicgfCAndGFnJyB8ICdpbWFnZSdcbiAgb3BlcmF0aW9uVHlwZTogJ2NyZWF0ZScgfCAndXBkYXRlJyB8ICdkZWxldGUnXG4gIHVzZXJJZD86IHN0cmluZ1xuICBcbiAgLy8g5pWw5o2u5b+r54WnXG4gIGRhdGE6IGFueVxuICBwcmV2aW91c0RhdGE/OiBhbnkgLy8g55So5LqO5Zue5rua5ZKM5Yay56qB5qOA5rWLXG4gIFxuICAvLyDml7bpl7TmiLPlkozniYjmnKzmjqfliLZcbiAgdGltZXN0YW1wOiBEYXRlXG4gIGxvY2FsVmVyc2lvbjogbnVtYmVyXG4gIGV4cGVjdGVkQ2xvdWRWZXJzaW9uPzogbnVtYmVyXG4gIFxuICAvLyDph43or5XlkozplJnor6/lpITnkIZcbiAgcmV0cnlDb3VudDogbnVtYmVyXG4gIG1heFJldHJpZXM6IG51bWJlclxuICByZXRyeURlbGF5OiBudW1iZXJcbiAgbGFzdEVycm9yPzogc3RyaW5nXG4gIFxuICAvLyDkvJjlhYjnuqflkozkvp3otZblhbPns7tcbiAgcHJpb3JpdHk6ICdjcml0aWNhbCcgfCAnaGlnaCcgfCAnbm9ybWFsJyB8ICdsb3cnXG4gIGRlcGVuZHNPbj86IHN0cmluZ1tdIC8vIOS+nei1lueahOaTjeS9nElEXG4gIFxuICAvLyDnirbmgIHnrqHnkIZcbiAgc3RhdHVzOiAncGVuZGluZycgfCAncHJvY2Vzc2luZycgfCAnY29tcGxldGVkJyB8ICdmYWlsZWQnIHwgJ2NhbmNlbGxlZCdcbiAgcHJvY2Vzc2luZ1N0YXJ0ZWRBdD86IERhdGVcbiAgXG4gIC8vIOaJueWkhOeQhuS/oeaBr1xuICBiYXRjaElkPzogc3RyaW5nXG4gIGJhdGNoU2l6ZT86IG51bWJlclxuICBcbiAgLy8g572R57uc5ZKM5oCn6IO95L+h5oGvXG4gIG5ldHdvcmtJbmZvPzoge1xuICAgIG9ubGluZTogYm9vbGVhblxuICAgIGNvbm5lY3Rpb25UeXBlOiAnd2lmaScgfCAnY2VsbHVsYXInIHwgJ25vbmUnXG4gICAgZWZmZWN0aXZlVHlwZTogJzRnJyB8ICczZycgfCAnMmcnIHwgJ3Nsb3ctMmcnXG4gICAgcnR0PzogbnVtYmVyXG4gICAgZG93bmxpbms/OiBudW1iZXJcbiAgfVxufVxuXG4vLyDpmJ/liJfnirbmgIHnu5/orqFcbmV4cG9ydCBpbnRlcmZhY2UgUXVldWVTdGF0cyB7XG4gIHRvdGFsT3BlcmF0aW9uczogbnVtYmVyXG4gIHBlbmRpbmdPcGVyYXRpb25zOiBudW1iZXJcbiAgcHJvY2Vzc2luZ09wZXJhdGlvbnM6IG51bWJlclxuICBmYWlsZWRPcGVyYXRpb25zOiBudW1iZXJcbiAgY29tcGxldGVkT3BlcmF0aW9uczogbnVtYmVyXG4gIFxuICAvLyDmjInnsbvlnovnu5/orqFcbiAgYnlUeXBlOiB7XG4gICAgY2FyZDogbnVtYmVyXG4gICAgZm9sZGVyOiBudW1iZXJcbiAgICB0YWc6IG51bWJlclxuICAgIGltYWdlOiBudW1iZXJcbiAgfVxuICBcbiAgLy8g5oyJ5LyY5YWI57qn57uf6K6hXG4gIGJ5UHJpb3JpdHk6IHtcbiAgICBjcml0aWNhbDogbnVtYmVyXG4gICAgaGlnaDogbnVtYmVyXG4gICAgbm9ybWFsOiBudW1iZXJcbiAgICBsb3c6IG51bWJlclxuICB9XG4gIFxuICAvLyDmjInnirbmgIHnu5/orqFcbiAgYnlTdGF0dXM6IHtcbiAgICBwZW5kaW5nOiBudW1iZXJcbiAgICBwcm9jZXNzaW5nOiBudW1iZXJcbiAgICBjb21wbGV0ZWQ6IG51bWJlclxuICAgIGZhaWxlZDogbnVtYmVyXG4gICAgY2FuY2VsbGVkOiBudW1iZXJcbiAgfVxuICBcbiAgLy8g5oCn6IO95oyH5qCHXG4gIGF2ZXJhZ2VQcm9jZXNzaW5nVGltZTogbnVtYmVyXG4gIGZhaWx1cmVSYXRlOiBudW1iZXJcbiAgb2xkZXN0UGVuZGluZ0FnZTogbnVtYmVyXG4gIGF2ZXJhZ2VSZXRyeUNvdW50OiBudW1iZXJcbn1cblxuLy8g6Zif5YiX6YWN572u6YCJ6aG5XG5leHBvcnQgaW50ZXJmYWNlIFF1ZXVlQ29uZmlnIHtcbiAgLy8g6YeN6K+V6YWN572uXG4gIG1heFJldHJpZXM6IG51bWJlclxuICBpbml0aWFsUmV0cnlEZWxheTogbnVtYmVyXG4gIG1heFJldHJ5RGVsYXk6IG51bWJlclxuICByZXRyeUJhY2tvZmZNdWx0aXBsaWVyOiBudW1iZXJcbiAgXG4gIC8vIOaJueWkhOeQhumFjee9rlxuICBiYXRjaFNpemU6IG51bWJlclxuICBiYXRjaFRpbWVvdXQ6IG51bWJlclxuICBtYXhDb25jdXJyZW50QmF0Y2hlczogbnVtYmVyXG4gIFxuICAvLyDmgKfog73phY3nva5cbiAgcHJvY2Vzc2luZ1RpbWVvdXQ6IG51bWJlclxuICBpZGxlQ2hlY2tJbnRlcnZhbDogbnVtYmVyXG4gIGNsZWFudXBJbnRlcnZhbDogbnVtYmVyXG4gIFxuICAvLyDnvZHnu5zphY3nva5cbiAgbmV0d29ya0F3YXJlOiBib29sZWFuXG4gIG9mZmxpbmVNb2RlOiBib29sZWFuXG4gIHJlcXVpcmVXaWZpRm9yTGFyZ2VGaWxlczogYm9vbGVhblxuICBcbiAgLy8g6Zif5YiX6ZmQ5Yi2XG4gIG1heFF1ZXVlU2l6ZTogbnVtYmVyXG4gIG1heEFnZTogbnVtYmVyIC8vIOacgOWkp+aTjeS9nOW5tOm+hO+8iOavq+enku+8iVxufVxuXG4vLyDpu5jorqTpmJ/liJfphY3nva5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1FVRVVFX0NPTkZJRzogUXVldWVDb25maWcgPSB7XG4gIG1heFJldHJpZXM6IDUsXG4gIGluaXRpYWxSZXRyeURlbGF5OiAxMDAwLCAvLyAx56eSXG4gIG1heFJldHJ5RGVsYXk6IDMwMDAwMCwgLy8gNeWIhumSn1xuICByZXRyeUJhY2tvZmZNdWx0aXBsaWVyOiAyLFxuICBcbiAgYmF0Y2hTaXplOiAxMCxcbiAgYmF0Y2hUaW1lb3V0OiA1MDAwLCAvLyA156eSXG4gIG1heENvbmN1cnJlbnRCYXRjaGVzOiAzLFxuICBcbiAgcHJvY2Vzc2luZ1RpbWVvdXQ6IDMwMDAwLCAvLyAzMOenklxuICBpZGxlQ2hlY2tJbnRlcnZhbDogMTAwMDAsIC8vIDEw56eSXG4gIGNsZWFudXBJbnRlcnZhbDogMzAwMDAwLCAvLyA15YiG6ZKfXG4gIFxuICBuZXR3b3JrQXdhcmU6IHRydWUsXG4gIG9mZmxpbmVNb2RlOiB0cnVlLFxuICByZXF1aXJlV2lmaUZvckxhcmdlRmlsZXM6IHRydWUsXG4gIFxuICBtYXhRdWV1ZVNpemU6IDEwMDAwLFxuICBtYXhBZ2U6IDcgKiAyNCAqIDYwICogNjAgKiAxMDAwIC8vIDflpKlcbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8g5pys5Zyw5pON5L2c5pyN5YqhIC0g5qC45b+D6Zif5YiX566h55CGXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmV4cG9ydCBjbGFzcyBMb2NhbE9wZXJhdGlvblNlcnZpY2Uge1xuICBwcml2YXRlIGNvbmZpZzogUXVldWVDb25maWdcbiAgcHJpdmF0ZSBpc1Byb2Nlc3NpbmcgPSBmYWxzZVxuICBwcml2YXRlIHByb2Nlc3NpbmdUaW1lcjogTm9kZUpTLlRpbWVvdXQgfCBudWxsID0gbnVsbFxuICBwcml2YXRlIGNsZWFudXBUaW1lcjogTm9kZUpTLlRpbWVvdXQgfCBudWxsID0gbnVsbFxuICBwcml2YXRlIGN1cnJlbnRCYXRjaGVzOiBNYXA8c3RyaW5nLCBQcm9taXNlPHZvaWQ+PiA9IG5ldyBNYXAoKVxuICBcbiAgLy8g5LqL5Lu255uR5ZCs5ZmoXG4gIHByaXZhdGUgbGlzdGVuZXJzOiB7XG4gICAgb3BlcmF0aW9uQWRkZWQ/OiAob3BlcmF0aW9uOiBMb2NhbFN5bmNPcGVyYXRpb24pID0+IHZvaWRcbiAgICBvcGVyYXRpb25TdGFydGVkPzogKG9wZXJhdGlvbjogTG9jYWxTeW5jT3BlcmF0aW9uKSA9PiB2b2lkXG4gICAgb3BlcmF0aW9uQ29tcGxldGVkPzogKG9wZXJhdGlvbjogTG9jYWxTeW5jT3BlcmF0aW9uKSA9PiB2b2lkXG4gICAgb3BlcmF0aW9uRmFpbGVkPzogKG9wZXJhdGlvbjogTG9jYWxTeW5jT3BlcmF0aW9uLCBlcnJvcjogRXJyb3IpID0+IHZvaWRcbiAgICBxdWV1ZVN0YXRzQ2hhbmdlZD86IChzdGF0czogUXVldWVTdGF0cykgPT4gdm9pZFxuICB9ID0ge31cblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFBhcnRpYWw8UXVldWVDb25maWc+ID0ge30pIHtcbiAgICB0aGlzLmNvbmZpZyA9IHsgLi4uREVGQVVMVF9RVUVVRV9DT05GSUcsIC4uLmNvbmZpZyB9XG4gICAgdGhpcy5pbml0aWFsaXplKClcbiAgfVxuXG4gIC8vIOWIneWni+WMluacjeWKoVxuICBwcml2YXRlIGFzeW5jIGluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIOehruS/neaVsOaNruW6k+W3suWIneWni+WMllxuICAgICAgYXdhaXQgZGIub3BlbigpXG4gICAgICBcbiAgICAgIC8vIOS7juacrOWcsOWtmOWCqOaBouWkjemYn+WIl1xuICAgICAgYXdhaXQgdGhpcy5yZXN0b3JlUXVldWVGcm9tU3RvcmFnZSgpXG4gICAgICBcbiAgICAgIC8vIOWQr+WKqOWumuacn+WkhOeQhlxuICAgICAgdGhpcy5zdGFydFByb2Nlc3NpbmcoKVxuICAgICAgXG4gICAgICAvLyDlkK/liqjlrprmnJ/muIXnkIZcbiAgICAgIHRoaXMuc3RhcnRDbGVhbnVwKClcbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coJ0xvY2FsT3BlcmF0aW9uU2VydmljZSBpbml0aWFsaXplZCBzdWNjZXNzZnVsbHknKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gaW5pdGlhbGl6ZSBMb2NhbE9wZXJhdGlvblNlcnZpY2U6JywgZXJyb3IpXG4gICAgfVxuICB9XG5cbiAgLy8g5LuO5pys5Zyw5a2Y5YKo5oGi5aSN6Zif5YiXXG4gIHByaXZhdGUgYXN5bmMgcmVzdG9yZVF1ZXVlRnJvbVN0b3JhZ2UoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHN0b3JlZFF1ZXVlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3N5bmNRdWV1ZScpXG4gICAgICBpZiAoc3RvcmVkUXVldWUpIHtcbiAgICAgICAgY29uc3QgcXVldWUgPSBKU09OLnBhcnNlKHN0b3JlZFF1ZXVlKVxuICAgICAgICBcbiAgICAgICAgLy8g5bCG5a2Y5YKo55qE5pON5L2c5re75Yqg5Yiw5pWw5o2u5bqTXG4gICAgICAgIGZvciAoY29uc3Qgb3BlcmF0aW9uIG9mIHF1ZXVlKSB7XG4gICAgICAgICAgLy8g6L2s5o2i5pen5qC85byP5Yiw5paw5qC85byP77yI5aaC5p6c6ZyA6KaB77yJXG4gICAgICAgICAgY29uc3QgY29udmVydGVkT3BlcmF0aW9uID0gdGhpcy5jb252ZXJ0T3BlcmF0aW9uRm9ybWF0KG9wZXJhdGlvbilcbiAgICAgICAgICBcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgZGIuc3luY1F1ZXVlLmFkZChjb252ZXJ0ZWRPcGVyYXRpb24pXG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIOWmguaenOaTjeS9nOW3suWtmOWcqO+8jOi3s+i/h1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdPcGVyYXRpb24gYWxyZWFkeSBleGlzdHMgaW4gZGF0YWJhc2UsIHNraXBwaW5nOicsIG9wZXJhdGlvbi5pZClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIOa4heepuuacrOWcsOWtmOWCqFxuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnc3luY1F1ZXVlJylcbiAgICAgICAgY29uc29sZS5sb2coYFJlc3RvcmVkICR7cXVldWUubGVuZ3RofSBvcGVyYXRpb25zIGZyb20gbG9jYWwgc3RvcmFnZWApXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byByZXN0b3JlIHF1ZXVlIGZyb20gc3RvcmFnZTonLCBlcnJvcilcbiAgICB9XG4gIH1cblxuICAvLyDovazmjaLmk43kvZzmoLzlvI/vvIjml6fmoLzlvI/liLDmlrDmoLzlvI/vvIlcbiAgcHJpdmF0ZSBjb252ZXJ0T3BlcmF0aW9uRm9ybWF0KG9wZXJhdGlvbjogYW55KTogTG9jYWxTeW5jT3BlcmF0aW9uIHtcbiAgICAvLyDlpoLmnpzmmK/mlrDmoLzlvI/vvIznm7TmjqXov5Tlm55cbiAgICBpZiAob3BlcmF0aW9uLmVudGl0eVR5cGUgJiYgb3BlcmF0aW9uLm9wZXJhdGlvblR5cGUgJiYgb3BlcmF0aW9uLmVudGl0eUlkKSB7XG4gICAgICByZXR1cm4gb3BlcmF0aW9uIGFzIExvY2FsU3luY09wZXJhdGlvblxuICAgIH1cbiAgICBcbiAgICAvLyDovazmjaLml6fmoLzlvI/liLDmlrDmoLzlvI9cbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IG9wZXJhdGlvbi5pZCxcbiAgICAgIGVudGl0eVR5cGU6IG9wZXJhdGlvbi50YWJsZSA9PT0gJ2NhcmRzJyA/ICdjYXJkJyA6IFxuICAgICAgICAgICAgICAgIG9wZXJhdGlvbi50YWJsZSA9PT0gJ2ZvbGRlcnMnID8gJ2ZvbGRlcicgOiBcbiAgICAgICAgICAgICAgICBvcGVyYXRpb24udGFibGUgPT09ICd0YWdzJyA/ICd0YWcnIDogJ2ltYWdlJyxcbiAgICAgIG9wZXJhdGlvblR5cGU6IG9wZXJhdGlvbi50eXBlLFxuICAgICAgZW50aXR5SWQ6IG9wZXJhdGlvbi5sb2NhbElkLFxuICAgICAgZGF0YTogb3BlcmF0aW9uLmRhdGEsXG4gICAgICB0aW1lc3RhbXA6IG9wZXJhdGlvbi50aW1lc3RhbXAsXG4gICAgICByZXRyeUNvdW50OiBvcGVyYXRpb24ucmV0cnlDb3VudCB8fCAwLFxuICAgICAgc3RhdHVzOiBvcGVyYXRpb24uc3RhdHVzIHx8ICdwZW5kaW5nJyxcbiAgICAgIGxvY2FsVmVyc2lvbjogb3BlcmF0aW9uLmxvY2FsVmVyc2lvbiB8fCAxLFxuICAgICAgcHJpb3JpdHk6IG9wZXJhdGlvbi5wcmlvcml0eSB8fCAnbm9ybWFsJyxcbiAgICAgIGRlcGVuZHNPbjogb3BlcmF0aW9uLmRlcGVuZHNPbiB8fCBbXVxuICAgIH1cbiAgfVxuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8g5qC45b+D6Zif5YiX5pON5L2cXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICAvLyDmt7vliqDmk43kvZzliLDpmJ/liJdcbiAgYXN5bmMgYWRkT3BlcmF0aW9uKFxuICAgIG9wZXJhdGlvbjogT21pdDxMb2NhbFN5bmNPcGVyYXRpb24sICdpZCcgfCAndGltZXN0YW1wJyB8ICdyZXRyeUNvdW50JyB8ICdzdGF0dXMnIHwgJ2xvY2FsVmVyc2lvbic+XG4gICk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgLy8g6aqM6K+B5b+F6ZyA5a2X5q61XG4gICAgaWYgKCFvcGVyYXRpb24uZW50aXR5SWQgfHwgb3BlcmF0aW9uLmVudGl0eUlkLnRyaW0oKSA9PT0gJycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTG9jYWwgSUQgaXMgcmVxdWlyZWQnKVxuICAgIH1cbiAgICBpZiAoIW9wZXJhdGlvbi5lbnRpdHlUeXBlIHx8ICFbJ2NhcmQnLCAnZm9sZGVyJywgJ3RhZycsICdpbWFnZSddLmluY2x1ZGVzKG9wZXJhdGlvbi5lbnRpdHlUeXBlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGVudGl0eSB0eXBlJylcbiAgICB9XG4gICAgaWYgKCFvcGVyYXRpb24ub3BlcmF0aW9uVHlwZSB8fCAhWydjcmVhdGUnLCAndXBkYXRlJywgJ2RlbGV0ZSddLmluY2x1ZGVzKG9wZXJhdGlvbi5vcGVyYXRpb25UeXBlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG9wZXJhdGlvbiB0eXBlJylcbiAgICB9XG4gICAgaWYgKCFvcGVyYXRpb24uZGF0YSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdPcGVyYXRpb24gZGF0YSBpcyByZXF1aXJlZCcpXG4gICAgfVxuXG4gICAgY29uc3QgaWQgPSBjcnlwdG8ucmFuZG9tVVVJRCgpXG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKVxuICAgIFxuICAgIGNvbnN0IGZ1bGxPcGVyYXRpb246IExvY2FsU3luY09wZXJhdGlvbiA9IHtcbiAgICAgIC4uLm9wZXJhdGlvbixcbiAgICAgIGlkLFxuICAgICAgdGltZXN0YW1wOiBub3csXG4gICAgICByZXRyeUNvdW50OiAwLFxuICAgICAgc3RhdHVzOiAncGVuZGluZycsXG4gICAgICBsb2NhbFZlcnNpb246IERhdGUubm93KCksIC8vIOS9v+eUqOaXtumXtOaIs+S9nOS4uuacrOWcsOeJiOacrFxuICAgICAgcmV0cnlEZWxheTogdGhpcy5jb25maWcuaW5pdGlhbFJldHJ5RGVsYXksXG4gICAgICBtYXhSZXRyaWVzOiB0aGlzLmNvbmZpZy5tYXhSZXRyaWVzXG4gICAgfVxuXG4gICAgLy8g6I635Y+W5b2T5YmN572R57uc5L+h5oGvXG4gICAgaWYgKHRoaXMuY29uZmlnLm5ldHdvcmtBd2FyZSkge1xuICAgICAgZnVsbE9wZXJhdGlvbi5uZXR3b3JrSW5mbyA9IGF3YWl0IHRoaXMuZ2V0TmV0d29ya0luZm8oKVxuICAgIH1cblxuICAgIC8vIOajgOafpemHjeWkjeaTjeS9nFxuICAgIGNvbnN0IGV4aXN0aW5nT3BlcmF0aW9uID0gYXdhaXQgZGIuc3luY1F1ZXVlXG4gICAgICAud2hlcmUoJ2VudGl0eUlkJylcbiAgICAgIC5lcXVhbHMob3BlcmF0aW9uLmVudGl0eUlkKVxuICAgICAgLmFuZChvcCA9PiBvcC5lbnRpdHlUeXBlID09PSBvcGVyYXRpb24uZW50aXR5VHlwZSAmJiBvcC5zdGF0dXMgPT09ICdwZW5kaW5nJylcbiAgICAgIC5maXJzdCgpXG5cbiAgICB0cnkge1xuICAgICAgaWYgKGV4aXN0aW5nT3BlcmF0aW9uKSB7XG4gICAgICAgIC8vIOabtOaWsOeOsOacieaTjeS9nOiAjOS4jeaYr+WIm+W7uuaWsOaTjeS9nFxuICAgICAgICBhd2FpdCBkYi5zeW5jUXVldWUudXBkYXRlKGV4aXN0aW5nT3BlcmF0aW9uLmlkISwge1xuICAgICAgICAgIGRhdGE6IG9wZXJhdGlvbi5kYXRhLFxuICAgICAgICAgIHByZXZpb3VzRGF0YTogb3BlcmF0aW9uLnByZXZpb3VzRGF0YSxcbiAgICAgICAgICB0aW1lc3RhbXA6IG5vdyxcbiAgICAgICAgICBsb2NhbFZlcnNpb246IERhdGUubm93KClcbiAgICAgICAgfSlcbiAgICAgICAgY29uc29sZS5sb2coYE9wZXJhdGlvbiB1cGRhdGVkIGluIHF1ZXVlOiAke2V4aXN0aW5nT3BlcmF0aW9uLmlkfWApXG4gICAgICAgIHJldHVybiBleGlzdGluZ09wZXJhdGlvbi5pZCFcbiAgICAgIH1cblxuICAgICAgYXdhaXQgZGIuc3luY1F1ZXVlLmFkZChmdWxsT3BlcmF0aW9uKVxuICAgICAgXG4gICAgICAvLyDpgJrnn6Xnm5HlkKzlmahcbiAgICAgIHRoaXMubm90aWZ5TGlzdGVuZXJzKCdvcGVyYXRpb25BZGRlZCcsIGZ1bGxPcGVyYXRpb24pXG4gICAgICBcbiAgICAgIC8vIOabtOaWsOe7n+iuoeS/oeaBr1xuICAgICAgYXdhaXQgdGhpcy51cGRhdGVRdWV1ZVN0YXRzKClcbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coYE9wZXJhdGlvbiBhZGRlZCB0byBxdWV1ZTogJHtpZH1gKVxuICAgICAgcmV0dXJuIGlkXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBhZGQgb3BlcmF0aW9uIHRvIHF1ZXVlOicsIGVycm9yKVxuICAgICAgdGhyb3cgZXJyb3JcbiAgICB9XG4gIH1cblxuICAvLyDojrflj5blvoXlpITnkIbmk43kvZxcbiAgYXN5bmMgZ2V0UGVuZGluZ09wZXJhdGlvbnMoXG4gICAgbGltaXQ6IG51bWJlciA9IHRoaXMuY29uZmlnLmJhdGNoU2l6ZSxcbiAgICBwcmlvcml0eUZpbHRlcj86ICgnY3JpdGljYWwnIHwgJ2hpZ2gnIHwgJ25vcm1hbCcgfCAnbG93JylbXVxuICApOiBQcm9taXNlPExvY2FsU3luY09wZXJhdGlvbltdPiB7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBxdWVyeSA9IGRiLnN5bmNRdWV1ZVxuICAgICAgICAud2hlcmUoJ3N0YXR1cycpXG4gICAgICAgIC5lcXVhbHMoJ3BlbmRpbmcnKVxuICAgICAgICAub3JkZXJCeSgncHJpb3JpdHknKSAvLyDmjInkvJjlhYjnuqfmjpLluo9cbiAgICAgICAgLnJldmVyc2UoKSAvLyDpq5jkvJjlhYjnuqflnKjliY1cbiAgICAgIFxuICAgICAgLy8g5bqU55So5LyY5YWI57qn6L+H5rukXG4gICAgICBpZiAocHJpb3JpdHlGaWx0ZXIgJiYgcHJpb3JpdHlGaWx0ZXIubGVuZ3RoID4gMCkge1xuICAgICAgICBxdWVyeSA9IHF1ZXJ5LmZpbHRlcihvcCA9PiBwcmlvcml0eUZpbHRlci5pbmNsdWRlcyhvcC5wcmlvcml0eSkpXG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnN0IG9wZXJhdGlvbnMgPSBhd2FpdCBxdWVyeS5saW1pdChsaW1pdCkudG9BcnJheSgpXG4gICAgICBcbiAgICAgIC8vIOajgOafpeS+nei1luWFs+ezu1xuICAgICAgY29uc3QgcmVhZHlPcGVyYXRpb25zID0gYXdhaXQgdGhpcy5maWx0ZXJSZWFkeU9wZXJhdGlvbnMob3BlcmF0aW9ucylcbiAgICAgIFxuICAgICAgcmV0dXJuIHJlYWR5T3BlcmF0aW9uc1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZ2V0IHBlbmRpbmcgb3BlcmF0aW9uczonLCBlcnJvcilcbiAgICAgIHJldHVybiBbXVxuICAgIH1cbiAgfVxuXG4gIC8vIOagh+iusOaTjeS9nOS4uuWkhOeQhuS4rVxuICBhc3luYyBtYXJrT3BlcmF0aW9uUHJvY2Vzc2luZyhvcGVyYXRpb25JZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGRiLnN5bmNRdWV1ZS51cGRhdGUob3BlcmF0aW9uSWQsIHtcbiAgICAgICAgc3RhdHVzOiAncHJvY2Vzc2luZycsXG4gICAgICAgIHByb2Nlc3NpbmdTdGFydGVkQXQ6IG5ldyBEYXRlKClcbiAgICAgIH0pXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBtYXJrIG9wZXJhdGlvbiAke29wZXJhdGlvbklkfSBhcyBwcm9jZXNzaW5nOmAsIGVycm9yKVxuICAgIH1cbiAgfVxuXG4gIC8vIOagh+iusOaTjeS9nOWujOaIkFxuICBhc3luYyBtYXJrT3BlcmF0aW9uQ29tcGxldGVkKG9wZXJhdGlvbklkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgb3BlcmF0aW9uID0gYXdhaXQgZGIuc3luY1F1ZXVlLmdldChvcGVyYXRpb25JZClcbiAgICAgIGlmICghb3BlcmF0aW9uKSByZXR1cm5cblxuICAgICAgYXdhaXQgZGIuc3luY1F1ZXVlLnVwZGF0ZShvcGVyYXRpb25JZCwge1xuICAgICAgICBzdGF0dXM6ICdjb21wbGV0ZWQnLFxuICAgICAgICBwcm9jZXNzaW5nRW5kZWRBdDogbmV3IERhdGUoKVxuICAgICAgfSlcblxuICAgICAgLy8g6YCa55+l55uR5ZCs5ZmoXG4gICAgICB0aGlzLm5vdGlmeUxpc3RlbmVycygnb3BlcmF0aW9uQ29tcGxldGVkJywgb3BlcmF0aW9uKVxuICAgICAgXG4gICAgICAvLyDmm7TmlrDnu5/orqHkv6Hmga9cbiAgICAgIGF3YWl0IHRoaXMudXBkYXRlUXVldWVTdGF0cygpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBtYXJrIG9wZXJhdGlvbiAke29wZXJhdGlvbklkfSBhcyBjb21wbGV0ZWQ6YCwgZXJyb3IpXG4gICAgfVxuICB9XG5cbiAgLy8g5qCH6K6w5pON5L2c5aSx6LSlXG4gIGFzeW5jIG1hcmtPcGVyYXRpb25GYWlsZWQob3BlcmF0aW9uSWQ6IHN0cmluZywgZXJyb3I6IEVycm9yKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG9wZXJhdGlvbiA9IGF3YWl0IGRiLnN5bmNRdWV1ZS5nZXQob3BlcmF0aW9uSWQpXG4gICAgICBpZiAoIW9wZXJhdGlvbikgcmV0dXJuXG5cbiAgICAgIGNvbnN0IHJldHJ5Q291bnQgPSBvcGVyYXRpb24ucmV0cnlDb3VudCArIDFcbiAgICAgIGNvbnN0IG5leHRSZXRyeURlbGF5ID0gTWF0aC5taW4oXG4gICAgICAgIG9wZXJhdGlvbi5yZXRyeURlbGF5ICogdGhpcy5jb25maWcucmV0cnlCYWNrb2ZmTXVsdGlwbGllcixcbiAgICAgICAgdGhpcy5jb25maWcubWF4UmV0cnlEZWxheVxuICAgICAgKVxuXG4gICAgICBjb25zdCB1cGRhdGU6IFBhcnRpYWw8TG9jYWxTeW5jT3BlcmF0aW9uPiA9IHtcbiAgICAgICAgcmV0cnlDb3VudCxcbiAgICAgICAgcmV0cnlEZWxheTogbmV4dFJldHJ5RGVsYXksXG4gICAgICAgIGxhc3RFcnJvcjogZXJyb3IubWVzc2FnZVxuICAgICAgfVxuXG4gICAgICAvLyDmo4Dmn6XmmK/lkKbotoXov4fmnIDlpKfph43or5XmrKHmlbBcbiAgICAgIGlmIChyZXRyeUNvdW50ID49IG9wZXJhdGlvbi5tYXhSZXRyaWVzKSB7XG4gICAgICAgIHVwZGF0ZS5zdGF0dXMgPSAnZmFpbGVkJ1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8g6YeN572u5Li6cGVuZGluZ+S7peS+v+mHjeivlVxuICAgICAgICB1cGRhdGUuc3RhdHVzID0gJ3BlbmRpbmcnXG4gICAgICB9XG5cbiAgICAgIGF3YWl0IGRiLnN5bmNRdWV1ZS51cGRhdGUob3BlcmF0aW9uSWQsIHVwZGF0ZSlcblxuICAgICAgLy8g6YCa55+l55uR5ZCs5ZmoXG4gICAgICB0aGlzLm5vdGlmeUxpc3RlbmVycygnb3BlcmF0aW9uRmFpbGVkJywgb3BlcmF0aW9uLCBlcnJvcilcbiAgICAgIFxuICAgICAgLy8g5pu05paw57uf6K6h5L+h5oGvXG4gICAgICBhd2FpdCB0aGlzLnVwZGF0ZVF1ZXVlU3RhdHMoKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gbWFyayBvcGVyYXRpb24gJHtvcGVyYXRpb25JZH0gYXMgZmFpbGVkOmAsIGVycm9yKVxuICAgIH1cbiAgfVxuXG4gIC8vIOWPlua2iOaTjeS9nFxuICBhc3luYyBjYW5jZWxPcGVyYXRpb24ob3BlcmF0aW9uSWQ6IHN0cmluZywgcmVhc29uPzogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG9wZXJhdGlvbiA9IGF3YWl0IGRiLnN5bmNRdWV1ZS5nZXQob3BlcmF0aW9uSWQpXG4gICAgICBpZiAoIW9wZXJhdGlvbikgcmV0dXJuXG5cbiAgICAgIGF3YWl0IGRiLnN5bmNRdWV1ZS51cGRhdGUob3BlcmF0aW9uSWQsIHtcbiAgICAgICAgc3RhdHVzOiAnY2FuY2VsbGVkJyxcbiAgICAgICAgbGFzdEVycm9yOiByZWFzb24gfHwgJ0NhbmNlbGxlZCBieSB1c2VyJ1xuICAgICAgfSlcblxuICAgICAgLy8g6YCa55+l55uR5ZCs5ZmoXG4gICAgICB0aGlzLm5vdGlmeUxpc3RlbmVycygnb3BlcmF0aW9uRmFpbGVkJywgb3BlcmF0aW9uLCBuZXcgRXJyb3IocmVhc29uIHx8ICdPcGVyYXRpb24gY2FuY2VsbGVkJykpXG4gICAgICBcbiAgICAgIC8vIOabtOaWsOe7n+iuoeS/oeaBr1xuICAgICAgYXdhaXQgdGhpcy51cGRhdGVRdWV1ZVN0YXRzKClcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGNhbmNlbCBvcGVyYXRpb24gJHtvcGVyYXRpb25JZH06YCwgZXJyb3IpXG4gICAgfVxuICB9XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyDmibnlpITnkIblkozpmJ/liJfnrqHnkIZcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIC8vIOW8gOWni+WkhOeQhumYn+WIl1xuICBwcml2YXRlIHN0YXJ0UHJvY2Vzc2luZygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5wcm9jZXNzaW5nVGltZXIpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5wcm9jZXNzaW5nVGltZXIpXG4gICAgfVxuXG4gICAgdGhpcy5wcm9jZXNzaW5nVGltZXIgPSBzZXRJbnRlcnZhbChhc3luYyAoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuaXNQcm9jZXNzaW5nKSB7XG4gICAgICAgIGF3YWl0IHRoaXMucHJvY2Vzc1F1ZXVlKClcbiAgICAgIH1cbiAgICB9LCB0aGlzLmNvbmZpZy5pZGxlQ2hlY2tJbnRlcnZhbClcbiAgfVxuXG4gIC8vIOWkhOeQhumYn+WIl1xuICBwcml2YXRlIGFzeW5jIHByb2Nlc3NRdWV1ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAodGhpcy5pc1Byb2Nlc3NpbmcgfHwgdGhpcy5jdXJyZW50QmF0Y2hlcy5zaXplID49IHRoaXMuY29uZmlnLm1heENvbmN1cnJlbnRCYXRjaGVzKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLmlzUHJvY2Vzc2luZyA9IHRydWVcblxuICAgIHRyeSB7XG4gICAgICAvLyDojrflj5blvoXlpITnkIbmk43kvZxcbiAgICAgIGNvbnN0IG9wZXJhdGlvbnMgPSBhd2FpdCB0aGlzLmdldFBlbmRpbmdPcGVyYXRpb25zKClcbiAgICAgIFxuICAgICAgaWYgKG9wZXJhdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICAvLyDliIbmibnlpITnkIZcbiAgICAgIGNvbnN0IGJhdGNoZXMgPSBhd2FpdCB0aGlzLmNyZWF0ZUJhdGNoZXMob3BlcmF0aW9ucylcbiAgICAgIFxuICAgICAgZm9yIChjb25zdCBiYXRjaCBvZiBiYXRjaGVzKSB7XG4gICAgICAgIGNvbnN0IGJhdGNoSWQgPSBjcnlwdG8ucmFuZG9tVVVJRCgpXG4gICAgICAgIGNvbnN0IGJhdGNoUHJvbWlzZSA9IHRoaXMucHJvY2Vzc0JhdGNoKGJhdGNoLCBiYXRjaElkKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5jdXJyZW50QmF0Y2hlcy5zZXQoYmF0Y2hJZCwgYmF0Y2hQcm9taXNlKVxuICAgICAgICBcbiAgICAgICAgYmF0Y2hQcm9taXNlXG4gICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEJhdGNoICR7YmF0Y2hJZH0gZmFpbGVkOmAsIGVycm9yKVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50QmF0Y2hlcy5kZWxldGUoYmF0Y2hJZClcbiAgICAgICAgICB9KVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBwcm9jZXNzaW5nIHF1ZXVlOicsIGVycm9yKVxuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLmlzUHJvY2Vzc2luZyA9IGZhbHNlXG4gICAgfVxuICB9XG5cbiAgLy8g5Yib5bu65om55aSE55CG57uEXG4gIHByaXZhdGUgYXN5bmMgY3JlYXRlQmF0Y2hlcyhvcGVyYXRpb25zOiBMb2NhbFN5bmNPcGVyYXRpb25bXSk6IFByb21pc2U8TG9jYWxTeW5jT3BlcmF0aW9uW11bXT4ge1xuICAgIGNvbnN0IGJhdGNoZXM6IExvY2FsU3luY09wZXJhdGlvbltdW10gPSBbXVxuICAgIGxldCBjdXJyZW50QmF0Y2g6IExvY2FsU3luY09wZXJhdGlvbltdID0gW11cbiAgICBcbiAgICAvLyDmjInkvJjlhYjnuqfmjpLluo9cbiAgICBjb25zdCBzb3J0ZWRPcGVyYXRpb25zID0gWy4uLm9wZXJhdGlvbnNdLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIGNvbnN0IHByaW9yaXR5T3JkZXIgPSB7IGNyaXRpY2FsOiA0LCBoaWdoOiAzLCBub3JtYWw6IDIsIGxvdzogMSB9XG4gICAgICByZXR1cm4gcHJpb3JpdHlPcmRlcltiLnByaW9yaXR5XSAtIHByaW9yaXR5T3JkZXJbYS5wcmlvcml0eV1cbiAgICB9KVxuXG4gICAgZm9yIChjb25zdCBvcGVyYXRpb24gb2Ygc29ydGVkT3BlcmF0aW9ucykge1xuICAgICAgLy8g5qOA5p+l5om55qyh5aSn5bCP6ZmQ5Yi2XG4gICAgICBpZiAoY3VycmVudEJhdGNoLmxlbmd0aCA+PSB0aGlzLmNvbmZpZy5iYXRjaFNpemUpIHtcbiAgICAgICAgYmF0Y2hlcy5wdXNoKGN1cnJlbnRCYXRjaClcbiAgICAgICAgY3VycmVudEJhdGNoID0gW11cbiAgICAgIH1cblxuICAgICAgLy8g5qOA5p+l572R57uc6ZmQ5Yi2XG4gICAgICBpZiAodGhpcy5jb25maWcucmVxdWlyZVdpZmlGb3JMYXJnZUZpbGVzICYmIG9wZXJhdGlvbi5lbnRpdHlUeXBlID09PSAnaW1hZ2UnKSB7XG4gICAgICAgIGNvbnN0IG5ldHdvcmtJbmZvID0gYXdhaXQgdGhpcy5nZXROZXR3b3JrSW5mbygpXG4gICAgICAgIGlmIChuZXR3b3JrSW5mby5jb25uZWN0aW9uVHlwZSAhPT0gJ3dpZmknKSB7XG4gICAgICAgICAgY29udGludWUgLy8g6Lez6L+H5aSn5paH5Lu25pON5L2cXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY3VycmVudEJhdGNoLnB1c2gob3BlcmF0aW9uKVxuICAgIH1cblxuICAgIGlmIChjdXJyZW50QmF0Y2gubGVuZ3RoID4gMCkge1xuICAgICAgYmF0Y2hlcy5wdXNoKGN1cnJlbnRCYXRjaClcbiAgICB9XG5cbiAgICByZXR1cm4gYmF0Y2hlc1xuICB9XG5cbiAgLy8g5aSE55CG5om55qyhXG4gIHByaXZhdGUgYXN5bmMgcHJvY2Vzc0JhdGNoKG9wZXJhdGlvbnM6IExvY2FsU3luY09wZXJhdGlvbltdLCBiYXRjaElkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBiYXRjaFN0YXJ0VGltZSA9IERhdGUubm93KClcbiAgICBcbiAgICB0cnkge1xuICAgICAgLy8g5qCH6K6w5omA5pyJ5pON5L2c5Li65aSE55CG5LitXG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgb3BlcmF0aW9ucy5tYXAob3AgPT4gdGhpcy5tYXJrT3BlcmF0aW9uUHJvY2Vzc2luZyhvcC5pZCkpXG4gICAgICApXG5cbiAgICAgIC8vIOmAmuefpeebkeWQrOWZqFxuICAgICAgb3BlcmF0aW9ucy5mb3JFYWNoKG9wID0+IHtcbiAgICAgICAgdGhpcy5ub3RpZnlMaXN0ZW5lcnMoJ29wZXJhdGlvblN0YXJ0ZWQnLCBvcClcbiAgICAgIH0pXG5cbiAgICAgIC8vIOiwg+eUqOWunumZheeahOWQjOatpemAu+i+kVxuICAgICAgYXdhaXQgdGhpcy5leGVjdXRlQmF0Y2hTeW5jKG9wZXJhdGlvbnMsIGJhdGNoSWQpXG5cbiAgICAgIC8vIOagh+iusOaJgOacieaTjeS9nOS4uuWujOaIkFxuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgIG9wZXJhdGlvbnMubWFwKG9wID0+IHRoaXMubWFya09wZXJhdGlvbkNvbXBsZXRlZChvcC5pZCkpXG4gICAgICApXG5cbiAgICAgIGNvbnNvbGUubG9nKGBCYXRjaCAke2JhdGNoSWR9IHByb2Nlc3NlZCBzdWNjZXNzZnVsbHkgKCR7b3BlcmF0aW9ucy5sZW5ndGh9IG9wZXJhdGlvbnMpYClcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihgQmF0Y2ggJHtiYXRjaElkfSBmYWlsZWQ6YCwgZXJyb3IpXG4gICAgICBcbiAgICAgIC8vIOagh+iusOaJgOacieaTjeS9nOS4uuWksei0pVxuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgIG9wZXJhdGlvbnMubWFwKG9wID0+IHRoaXMubWFya09wZXJhdGlvbkZhaWxlZChvcC5pZCwgZXJyb3IgYXMgRXJyb3IpKVxuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIC8vIOaJp+ihjOaJueWkhOeQhuWQjOatpemAu+i+kVxuICBwcml2YXRlIGFzeW5jIGV4ZWN1dGVCYXRjaFN5bmMob3BlcmF0aW9uczogTG9jYWxTeW5jT3BlcmF0aW9uW10sIGJhdGNoSWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICAvLyDlr7zlhaXnu5/kuIDlkIzmraXmnI3liqHvvIjlu7bov5/lr7zlhaXpgb/lhY3lvqrnjq/kvp3otZbvvIlcbiAgICAgIGNvbnN0IHsgdW5pZmllZFN5bmNTZXJ2aWNlIH0gPSBhd2FpdCBpbXBvcnQoJy4vdW5pZmllZC1zeW5jLXNlcnZpY2UnKVxuICAgICAgXG4gICAgICAvLyDmjInmk43kvZznsbvlnovliIbnu4TlpITnkIZcbiAgICAgIGNvbnN0IG9wZXJhdGlvbkdyb3VwcyA9IHRoaXMuZ3JvdXBPcGVyYXRpb25zQnlUeXBlKG9wZXJhdGlvbnMpXG4gICAgICBcbiAgICAgIC8vIOWkhOeQhuavj+S4quaTjeS9nOe7hFxuICAgICAgZm9yIChjb25zdCBbZW50aXR5VHlwZSwgZW50aXR5T3BlcmF0aW9uc10gb2YgT2JqZWN0LmVudHJpZXMob3BlcmF0aW9uR3JvdXBzKSkge1xuICAgICAgICBhd2FpdCB0aGlzLnByb2Nlc3NFbnRpdHlHcm91cChlbnRpdHlUeXBlLCBlbnRpdHlPcGVyYXRpb25zLCB1bmlmaWVkU3luY1NlcnZpY2UpXG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnNvbGUubG9nKGBCYXRjaCAke2JhdGNoSWR9IHN5bmMgZXhlY3V0aW9uIGNvbXBsZXRlZGApXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEJhdGNoICR7YmF0Y2hJZH0gc3luYyBleGVjdXRpb24gZmFpbGVkOmAsIGVycm9yKVxuICAgICAgdGhyb3cgZXJyb3JcbiAgICB9XG4gIH1cblxuICAvLyDmjInlrp7kvZPnsbvlnovliIbnu4Tmk43kvZxcbiAgcHJpdmF0ZSBncm91cE9wZXJhdGlvbnNCeVR5cGUob3BlcmF0aW9uczogTG9jYWxTeW5jT3BlcmF0aW9uW10pOiBSZWNvcmQ8c3RyaW5nLCBMb2NhbFN5bmNPcGVyYXRpb25bXT4ge1xuICAgIGNvbnN0IGdyb3VwczogUmVjb3JkPHN0cmluZywgTG9jYWxTeW5jT3BlcmF0aW9uW10+ID0ge31cbiAgICBcbiAgICBmb3IgKGNvbnN0IG9wZXJhdGlvbiBvZiBvcGVyYXRpb25zKSB7XG4gICAgICBpZiAoIWdyb3Vwc1tvcGVyYXRpb24uZW50aXR5VHlwZV0pIHtcbiAgICAgICAgZ3JvdXBzW29wZXJhdGlvbi5lbnRpdHlUeXBlXSA9IFtdXG4gICAgICB9XG4gICAgICBncm91cHNbb3BlcmF0aW9uLmVudGl0eVR5cGVdLnB1c2gob3BlcmF0aW9uKVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gZ3JvdXBzXG4gIH1cblxuICAvLyDlpITnkIblrp7kvZPmk43kvZznu4RcbiAgcHJpdmF0ZSBhc3luYyBwcm9jZXNzRW50aXR5R3JvdXAoXG4gICAgZW50aXR5VHlwZTogc3RyaW5nLCBcbiAgICBvcGVyYXRpb25zOiBMb2NhbFN5bmNPcGVyYXRpb25bXSwgXG4gICAgc3luY1NlcnZpY2U6IGFueVxuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBzd2l0Y2ggKGVudGl0eVR5cGUpIHtcbiAgICAgIGNhc2UgJ2NhcmQnOlxuICAgICAgICBhd2FpdCB0aGlzLnByb2Nlc3NDYXJkT3BlcmF0aW9ucyhvcGVyYXRpb25zLCBzeW5jU2VydmljZSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2ZvbGRlcic6XG4gICAgICAgIGF3YWl0IHRoaXMucHJvY2Vzc0ZvbGRlck9wZXJhdGlvbnMob3BlcmF0aW9ucywgc3luY1NlcnZpY2UpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICd0YWcnOlxuICAgICAgICBhd2FpdCB0aGlzLnByb2Nlc3NUYWdPcGVyYXRpb25zKG9wZXJhdGlvbnMsIHN5bmNTZXJ2aWNlKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnaW1hZ2UnOlxuICAgICAgICBhd2FpdCB0aGlzLnByb2Nlc3NJbWFnZU9wZXJhdGlvbnMob3BlcmF0aW9ucywgc3luY1NlcnZpY2UpXG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBjb25zb2xlLndhcm4oYFVua25vd24gZW50aXR5IHR5cGU6ICR7ZW50aXR5VHlwZX1gKVxuICAgIH1cbiAgfVxuXG4gIC8vIOWkhOeQhuWNoeeJh+aTjeS9nFxuICBwcml2YXRlIGFzeW5jIHByb2Nlc3NDYXJkT3BlcmF0aW9ucyhvcGVyYXRpb25zOiBMb2NhbFN5bmNPcGVyYXRpb25bXSwgc3luY1NlcnZpY2U6IGFueSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGZvciAoY29uc3Qgb3BlcmF0aW9uIG9mIG9wZXJhdGlvbnMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHN3aXRjaCAob3BlcmF0aW9uLm9wZXJhdGlvblR5cGUpIHtcbiAgICAgICAgICBjYXNlICdjcmVhdGUnOlxuICAgICAgICAgICAgYXdhaXQgc3luY1NlcnZpY2UuYWRkT3BlcmF0aW9uKHtcbiAgICAgICAgICAgICAgdHlwZTogJ2NyZWF0ZScsXG4gICAgICAgICAgICAgIGVudGl0eTogJ2NhcmQnLFxuICAgICAgICAgICAgICBlbnRpdHlJZDogb3BlcmF0aW9uLmVudGl0eUlkLFxuICAgICAgICAgICAgICBkYXRhOiBvcGVyYXRpb24uZGF0YSxcbiAgICAgICAgICAgICAgcHJpb3JpdHk6IG9wZXJhdGlvbi5wcmlvcml0eSxcbiAgICAgICAgICAgICAgdXNlcklkOiBvcGVyYXRpb24udXNlcklkXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIFxuICAgICAgICAgIGNhc2UgJ3VwZGF0ZSc6XG4gICAgICAgICAgICBhd2FpdCBzeW5jU2VydmljZS5hZGRPcGVyYXRpb24oe1xuICAgICAgICAgICAgICB0eXBlOiAndXBkYXRlJyxcbiAgICAgICAgICAgICAgZW50aXR5OiAnY2FyZCcsXG4gICAgICAgICAgICAgIGVudGl0eUlkOiBvcGVyYXRpb24uZW50aXR5SWQsXG4gICAgICAgICAgICAgIGRhdGE6IG9wZXJhdGlvbi5kYXRhLFxuICAgICAgICAgICAgICBwcmlvcml0eTogb3BlcmF0aW9uLnByaW9yaXR5LFxuICAgICAgICAgICAgICB1c2VySWQ6IG9wZXJhdGlvbi51c2VySWRcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgXG4gICAgICAgICAgY2FzZSAnZGVsZXRlJzpcbiAgICAgICAgICAgIGF3YWl0IHN5bmNTZXJ2aWNlLmFkZE9wZXJhdGlvbih7XG4gICAgICAgICAgICAgIHR5cGU6ICdkZWxldGUnLFxuICAgICAgICAgICAgICBlbnRpdHk6ICdjYXJkJyxcbiAgICAgICAgICAgICAgZW50aXR5SWQ6IG9wZXJhdGlvbi5lbnRpdHlJZCxcbiAgICAgICAgICAgICAgZGF0YTogeyB1c2VySWQ6IG9wZXJhdGlvbi51c2VySWQgfSxcbiAgICAgICAgICAgICAgcHJpb3JpdHk6IG9wZXJhdGlvbi5wcmlvcml0eSxcbiAgICAgICAgICAgICAgdXNlcklkOiBvcGVyYXRpb24udXNlcklkXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIHByb2Nlc3MgY2FyZCBvcGVyYXRpb24gJHtvcGVyYXRpb24uaWR9OmAsIGVycm9yKVxuICAgICAgICB0aHJvdyBlcnJvclxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIOWkhOeQhuaWh+S7tuWkueaTjeS9nFxuICBwcml2YXRlIGFzeW5jIHByb2Nlc3NGb2xkZXJPcGVyYXRpb25zKG9wZXJhdGlvbnM6IExvY2FsU3luY09wZXJhdGlvbltdLCBzeW5jU2VydmljZTogYW55KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgZm9yIChjb25zdCBvcGVyYXRpb24gb2Ygb3BlcmF0aW9ucykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3dpdGNoIChvcGVyYXRpb24ub3BlcmF0aW9uVHlwZSkge1xuICAgICAgICAgIGNhc2UgJ2NyZWF0ZSc6XG4gICAgICAgICAgICBhd2FpdCBzeW5jU2VydmljZS5hZGRPcGVyYXRpb24oe1xuICAgICAgICAgICAgICB0eXBlOiAnY3JlYXRlJyxcbiAgICAgICAgICAgICAgZW50aXR5OiAnZm9sZGVyJyxcbiAgICAgICAgICAgICAgZW50aXR5SWQ6IG9wZXJhdGlvbi5lbnRpdHlJZCxcbiAgICAgICAgICAgICAgZGF0YTogb3BlcmF0aW9uLmRhdGEsXG4gICAgICAgICAgICAgIHByaW9yaXR5OiBvcGVyYXRpb24ucHJpb3JpdHksXG4gICAgICAgICAgICAgIHVzZXJJZDogb3BlcmF0aW9uLnVzZXJJZFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBcbiAgICAgICAgICBjYXNlICd1cGRhdGUnOlxuICAgICAgICAgICAgYXdhaXQgc3luY1NlcnZpY2UuYWRkT3BlcmF0aW9uKHtcbiAgICAgICAgICAgICAgdHlwZTogJ3VwZGF0ZScsXG4gICAgICAgICAgICAgIGVudGl0eTogJ2ZvbGRlcicsXG4gICAgICAgICAgICAgIGVudGl0eUlkOiBvcGVyYXRpb24uZW50aXR5SWQsXG4gICAgICAgICAgICAgIGRhdGE6IG9wZXJhdGlvbi5kYXRhLFxuICAgICAgICAgICAgICBwcmlvcml0eTogb3BlcmF0aW9uLnByaW9yaXR5LFxuICAgICAgICAgICAgICB1c2VySWQ6IG9wZXJhdGlvbi51c2VySWRcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgXG4gICAgICAgICAgY2FzZSAnZGVsZXRlJzpcbiAgICAgICAgICAgIGF3YWl0IHN5bmNTZXJ2aWNlLmFkZE9wZXJhdGlvbih7XG4gICAgICAgICAgICAgIHR5cGU6ICdkZWxldGUnLFxuICAgICAgICAgICAgICBlbnRpdHk6ICdmb2xkZXInLFxuICAgICAgICAgICAgICBlbnRpdHlJZDogb3BlcmF0aW9uLmVudGl0eUlkLFxuICAgICAgICAgICAgICBkYXRhOiB7IHVzZXJJZDogb3BlcmF0aW9uLnVzZXJJZCB9LFxuICAgICAgICAgICAgICBwcmlvcml0eTogb3BlcmF0aW9uLnByaW9yaXR5LFxuICAgICAgICAgICAgICB1c2VySWQ6IG9wZXJhdGlvbi51c2VySWRcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gcHJvY2VzcyBmb2xkZXIgb3BlcmF0aW9uICR7b3BlcmF0aW9uLmlkfTpgLCBlcnJvcilcbiAgICAgICAgdGhyb3cgZXJyb3JcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyDlpITnkIbmoIfnrb7mk43kvZxcbiAgcHJpdmF0ZSBhc3luYyBwcm9jZXNzVGFnT3BlcmF0aW9ucyhvcGVyYXRpb25zOiBMb2NhbFN5bmNPcGVyYXRpb25bXSwgc3luY1NlcnZpY2U6IGFueSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGZvciAoY29uc3Qgb3BlcmF0aW9uIG9mIG9wZXJhdGlvbnMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHN3aXRjaCAob3BlcmF0aW9uLm9wZXJhdGlvblR5cGUpIHtcbiAgICAgICAgICBjYXNlICdjcmVhdGUnOlxuICAgICAgICAgICAgYXdhaXQgc3luY1NlcnZpY2UuYWRkT3BlcmF0aW9uKHtcbiAgICAgICAgICAgICAgdHlwZTogJ2NyZWF0ZScsXG4gICAgICAgICAgICAgIGVudGl0eTogJ3RhZycsXG4gICAgICAgICAgICAgIGVudGl0eUlkOiBvcGVyYXRpb24uZW50aXR5SWQsXG4gICAgICAgICAgICAgIGRhdGE6IG9wZXJhdGlvbi5kYXRhLFxuICAgICAgICAgICAgICBwcmlvcml0eTogb3BlcmF0aW9uLnByaW9yaXR5LFxuICAgICAgICAgICAgICB1c2VySWQ6IG9wZXJhdGlvbi51c2VySWRcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgXG4gICAgICAgICAgY2FzZSAndXBkYXRlJzpcbiAgICAgICAgICAgIGF3YWl0IHN5bmNTZXJ2aWNlLmFkZE9wZXJhdGlvbih7XG4gICAgICAgICAgICAgIHR5cGU6ICd1cGRhdGUnLFxuICAgICAgICAgICAgICBlbnRpdHk6ICd0YWcnLFxuICAgICAgICAgICAgICBlbnRpdHlJZDogb3BlcmF0aW9uLmVudGl0eUlkLFxuICAgICAgICAgICAgICBkYXRhOiBvcGVyYXRpb24uZGF0YSxcbiAgICAgICAgICAgICAgcHJpb3JpdHk6IG9wZXJhdGlvbi5wcmlvcml0eSxcbiAgICAgICAgICAgICAgdXNlcklkOiBvcGVyYXRpb24udXNlcklkXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIFxuICAgICAgICAgIGNhc2UgJ2RlbGV0ZSc6XG4gICAgICAgICAgICBhd2FpdCBzeW5jU2VydmljZS5hZGRPcGVyYXRpb24oe1xuICAgICAgICAgICAgICB0eXBlOiAnZGVsZXRlJyxcbiAgICAgICAgICAgICAgZW50aXR5OiAndGFnJyxcbiAgICAgICAgICAgICAgZW50aXR5SWQ6IG9wZXJhdGlvbi5lbnRpdHlJZCxcbiAgICAgICAgICAgICAgZGF0YTogeyB1c2VySWQ6IG9wZXJhdGlvbi51c2VySWQgfSxcbiAgICAgICAgICAgICAgcHJpb3JpdHk6IG9wZXJhdGlvbi5wcmlvcml0eSxcbiAgICAgICAgICAgICAgdXNlcklkOiBvcGVyYXRpb24udXNlcklkXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIHByb2Nlc3MgdGFnIG9wZXJhdGlvbiAke29wZXJhdGlvbi5pZH06YCwgZXJyb3IpXG4gICAgICAgIHRocm93IGVycm9yXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8g5aSE55CG5Zu+54mH5pON5L2cXG4gIHByaXZhdGUgYXN5bmMgcHJvY2Vzc0ltYWdlT3BlcmF0aW9ucyhvcGVyYXRpb25zOiBMb2NhbFN5bmNPcGVyYXRpb25bXSwgc3luY1NlcnZpY2U6IGFueSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGZvciAoY29uc3Qgb3BlcmF0aW9uIG9mIG9wZXJhdGlvbnMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHN3aXRjaCAob3BlcmF0aW9uLm9wZXJhdGlvblR5cGUpIHtcbiAgICAgICAgICBjYXNlICdjcmVhdGUnOlxuICAgICAgICAgICAgYXdhaXQgc3luY1NlcnZpY2UuYWRkT3BlcmF0aW9uKHtcbiAgICAgICAgICAgICAgdHlwZTogJ2NyZWF0ZScsXG4gICAgICAgICAgICAgIGVudGl0eTogJ2ltYWdlJyxcbiAgICAgICAgICAgICAgZW50aXR5SWQ6IG9wZXJhdGlvbi5lbnRpdHlJZCxcbiAgICAgICAgICAgICAgZGF0YTogb3BlcmF0aW9uLmRhdGEsXG4gICAgICAgICAgICAgIHByaW9yaXR5OiBvcGVyYXRpb24ucHJpb3JpdHksXG4gICAgICAgICAgICAgIHVzZXJJZDogb3BlcmF0aW9uLnVzZXJJZFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBcbiAgICAgICAgICBjYXNlICd1cGRhdGUnOlxuICAgICAgICAgICAgYXdhaXQgc3luY1NlcnZpY2UuYWRkT3BlcmF0aW9uKHtcbiAgICAgICAgICAgICAgdHlwZTogJ3VwZGF0ZScsXG4gICAgICAgICAgICAgIGVudGl0eTogJ2ltYWdlJyxcbiAgICAgICAgICAgICAgZW50aXR5SWQ6IG9wZXJhdGlvbi5lbnRpdHlJZCxcbiAgICAgICAgICAgICAgZGF0YTogb3BlcmF0aW9uLmRhdGEsXG4gICAgICAgICAgICAgIHByaW9yaXR5OiBvcGVyYXRpb24ucHJpb3JpdHksXG4gICAgICAgICAgICAgIHVzZXJJZDogb3BlcmF0aW9uLnVzZXJJZFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBcbiAgICAgICAgICBjYXNlICdkZWxldGUnOlxuICAgICAgICAgICAgYXdhaXQgc3luY1NlcnZpY2UuYWRkT3BlcmF0aW9uKHtcbiAgICAgICAgICAgICAgdHlwZTogJ2RlbGV0ZScsXG4gICAgICAgICAgICAgIGVudGl0eTogJ2ltYWdlJyxcbiAgICAgICAgICAgICAgZW50aXR5SWQ6IG9wZXJhdGlvbi5lbnRpdHlJZCxcbiAgICAgICAgICAgICAgZGF0YTogeyB1c2VySWQ6IG9wZXJhdGlvbi51c2VySWQgfSxcbiAgICAgICAgICAgICAgcHJpb3JpdHk6IG9wZXJhdGlvbi5wcmlvcml0eSxcbiAgICAgICAgICAgICAgdXNlcklkOiBvcGVyYXRpb24udXNlcklkXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIHByb2Nlc3MgaW1hZ2Ugb3BlcmF0aW9uICR7b3BlcmF0aW9uLmlkfTpgLCBlcnJvcilcbiAgICAgICAgdGhyb3cgZXJyb3JcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIOa4heeQhuWSjOe7tOaKpFxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgLy8g5ZCv5Yqo5a6a5pyf5riF55CGXG4gIHByaXZhdGUgc3RhcnRDbGVhbnVwKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmNsZWFudXBUaW1lcikge1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmNsZWFudXBUaW1lcilcbiAgICB9XG5cbiAgICB0aGlzLmNsZWFudXBUaW1lciA9IHNldEludGVydmFsKGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHRoaXMuY2xlYW51cFF1ZXVlKClcbiAgICB9LCB0aGlzLmNvbmZpZy5jbGVhbnVwSW50ZXJ2YWwpXG4gIH1cblxuICAvLyDmuIXnkIbpmJ/liJdcbiAgcHJpdmF0ZSBhc3luYyBjbGVhbnVwUXVldWUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KClcbiAgICAgIFxuICAgICAgLy8g5riF55CG6L+H5pyf55qE5pON5L2cXG4gICAgICBjb25zdCBleHBpcmVkRGF0ZSA9IG5ldyBEYXRlKG5vdyAtIHRoaXMuY29uZmlnLm1heEFnZSlcbiAgICAgIGF3YWl0IGRiLnN5bmNRdWV1ZVxuICAgICAgICAud2hlcmUoJ3RpbWVzdGFtcCcpXG4gICAgICAgIC5iZWxvdyhleHBpcmVkRGF0ZSlcbiAgICAgICAgLmRlbGV0ZSgpXG4gICAgICBcbiAgICAgIC8vIOa4heeQhuW3suWujOaIkOaTjeS9nO+8iOS/neeVmeacgOi/keeahDEwMDDmnaHnlKjkuo7nu5/orqHvvIlcbiAgICAgIGNvbnN0IGNvbXBsZXRlZE9wZXJhdGlvbnMgPSBhd2FpdCBkYi5zeW5jUXVldWVcbiAgICAgICAgLndoZXJlKCdzdGF0dXMnKVxuICAgICAgICAuZXF1YWxzKCdjb21wbGV0ZWQnKVxuICAgICAgICAub3JkZXJCeSgndGltZXN0YW1wJylcbiAgICAgICAgLnJldmVyc2UoKVxuICAgICAgICAub2Zmc2V0KDEwMDApXG4gICAgICAgIC50b0FycmF5KClcbiAgICAgIFxuICAgICAgaWYgKGNvbXBsZXRlZE9wZXJhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICBhd2FpdCBkYi5zeW5jUXVldWUuYnVsa0RlbGV0ZShjb21wbGV0ZWRPcGVyYXRpb25zLm1hcChvcCA9PiBvcC5pZCEpKVxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyDmo4Dmn6XpmJ/liJflpKflsI/pmZDliLZcbiAgICAgIGNvbnN0IHRvdGFsQ291bnQgPSBhd2FpdCBkYi5zeW5jUXVldWUuY291bnQoKVxuICAgICAgaWYgKHRvdGFsQ291bnQgPiB0aGlzLmNvbmZpZy5tYXhRdWV1ZVNpemUpIHtcbiAgICAgICAgY29uc3QgZXhjZXNzID0gdG90YWxDb3VudCAtIHRoaXMuY29uZmlnLm1heFF1ZXVlU2l6ZVxuICAgICAgICBjb25zdCBvbGRlc3RPcGVyYXRpb25zID0gYXdhaXQgZGIuc3luY1F1ZXVlXG4gICAgICAgICAgLm9yZGVyQnkoJ3RpbWVzdGFtcCcpXG4gICAgICAgICAgLmxpbWl0KGV4Y2VzcylcbiAgICAgICAgICAudG9BcnJheSgpXG4gICAgICAgIFxuICAgICAgICBhd2FpdCBkYi5zeW5jUXVldWUuYnVsa0RlbGV0ZShvbGRlc3RPcGVyYXRpb25zLm1hcChvcCA9PiBvcC5pZCEpKVxuICAgICAgfVxuICAgICAgXG4gICAgICBjb25zb2xlLmxvZygnUXVldWUgY2xlYW51cCBjb21wbGV0ZWQnKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdRdWV1ZSBjbGVhbnVwIGZhaWxlZDonLCBlcnJvcilcbiAgICB9XG4gIH1cblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIOe9kee7nOeKtuaAgeajgOa1i1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgLy8g6I635Y+W572R57uc5L+h5oGvXG4gIHByaXZhdGUgYXN5bmMgZ2V0TmV0d29ya0luZm8oKTogUHJvbWlzZTxMb2NhbFN5bmNPcGVyYXRpb25bJ25ldHdvcmtJbmZvJ10+IHtcbiAgICBpZiAoISgnY29ubmVjdGlvbicgaW4gbmF2aWdhdG9yKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb25saW5lOiBuYXZpZ2F0b3Iub25MaW5lLFxuICAgICAgICBjb25uZWN0aW9uVHlwZTogJ25vbmUnLFxuICAgICAgICBlZmZlY3RpdmVUeXBlOiAnNGcnXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgY29ubmVjdGlvbiA9IChuYXZpZ2F0b3IgYXMgYW55KS5jb25uZWN0aW9uXG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgIG9ubGluZTogbmF2aWdhdG9yLm9uTGluZSxcbiAgICAgIGNvbm5lY3Rpb25UeXBlOiB0aGlzLmdldENvbm5lY3Rpb25UeXBlKGNvbm5lY3Rpb24pLFxuICAgICAgZWZmZWN0aXZlVHlwZTogY29ubmVjdGlvbi5lZmZlY3RpdmVUeXBlIHx8ICc0ZycsXG4gICAgICBydHQ6IGNvbm5lY3Rpb24ucnR0LFxuICAgICAgZG93bmxpbms6IGNvbm5lY3Rpb24uZG93bmxpbmtcbiAgICB9XG4gIH1cblxuICAvLyDojrflj5bov57mjqXnsbvlnotcbiAgcHJpdmF0ZSBnZXRDb25uZWN0aW9uVHlwZShjb25uZWN0aW9uOiBhbnkpOiAnd2lmaScgfCAnY2VsbHVsYXInIHwgJ25vbmUnIHtcbiAgICBpZiAoIWNvbm5lY3Rpb24pIHJldHVybiAnbm9uZSdcbiAgICBcbiAgICBzd2l0Y2ggKGNvbm5lY3Rpb24udHlwZSkge1xuICAgICAgY2FzZSAnd2lmaSc6XG4gICAgICBjYXNlICdldGhlcm5ldCc6XG4gICAgICAgIHJldHVybiAnd2lmaSdcbiAgICAgIGNhc2UgJ2NlbGx1bGFyJzpcbiAgICAgIGNhc2UgJ2JsdWV0b290aCc6XG4gICAgICAgIHJldHVybiAnY2VsbHVsYXInXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ25vbmUnXG4gICAgfVxuICB9XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyDkvp3otZblhbPns7vmo4Dmn6VcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIC8vIOajgOafpeaTjeS9nOaYr+WQpuWHhuWkh+Wwsee7qu+8iOS+nei1luWFs+ezu+W3sua7oei2s++8iVxuICBwcml2YXRlIGFzeW5jIGZpbHRlclJlYWR5T3BlcmF0aW9ucyhvcGVyYXRpb25zOiBMb2NhbFN5bmNPcGVyYXRpb25bXSk6IFByb21pc2U8TG9jYWxTeW5jT3BlcmF0aW9uW10+IHtcbiAgICBjb25zdCByZWFkeU9wZXJhdGlvbnM6IExvY2FsU3luY09wZXJhdGlvbltdID0gW11cbiAgICBcbiAgICBmb3IgKGNvbnN0IG9wZXJhdGlvbiBvZiBvcGVyYXRpb25zKSB7XG4gICAgICBpZiAoIW9wZXJhdGlvbi5kZXBlbmRzT24gfHwgb3BlcmF0aW9uLmRlcGVuZHNPbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmVhZHlPcGVyYXRpb25zLnB1c2gob3BlcmF0aW9uKVxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyDmo4Dmn6XmiYDmnInkvp3otZbmk43kvZzmmK/lkKblt7LlrozmiJBcbiAgICAgIGNvbnN0IGRlcGVuZGVuY2llcyA9IGF3YWl0IGRiLnN5bmNRdWV1ZVxuICAgICAgICAud2hlcmUoJ2lkJylcbiAgICAgICAgLmFueU9mKG9wZXJhdGlvbi5kZXBlbmRzT24pXG4gICAgICAgIC50b0FycmF5KClcbiAgICAgIFxuICAgICAgY29uc3QgYWxsRGVwZW5kZW5jaWVzQ29tcGxldGVkID0gZGVwZW5kZW5jaWVzLmV2ZXJ5KGRlcCA9PiBkZXAuc3RhdHVzID09PSAnY29tcGxldGVkJylcbiAgICAgIFxuICAgICAgaWYgKGFsbERlcGVuZGVuY2llc0NvbXBsZXRlZCkge1xuICAgICAgICByZWFkeU9wZXJhdGlvbnMucHVzaChvcGVyYXRpb24pXG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJldHVybiByZWFkeU9wZXJhdGlvbnNcbiAgfVxuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8g57uf6K6h5ZKM55uR5o6nXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICAvLyDojrflj5bpmJ/liJfnu5/orqHkv6Hmga9cbiAgYXN5bmMgZ2V0UXVldWVTdGF0cygpOiBQcm9taXNlPFF1ZXVlU3RhdHM+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgYWxsT3BlcmF0aW9ucyA9IGF3YWl0IGRiLnN5bmNRdWV1ZS50b0FycmF5KClcbiAgICAgIFxuICAgICAgY29uc3Qgc3RhdHM6IFF1ZXVlU3RhdHMgPSB7XG4gICAgICAgIHRvdGFsT3BlcmF0aW9uczogYWxsT3BlcmF0aW9ucy5sZW5ndGgsXG4gICAgICAgIHBlbmRpbmdPcGVyYXRpb25zOiAwLFxuICAgICAgICBwcm9jZXNzaW5nT3BlcmF0aW9uczogMCxcbiAgICAgICAgZmFpbGVkT3BlcmF0aW9uczogMCxcbiAgICAgICAgY29tcGxldGVkT3BlcmF0aW9uczogMCxcbiAgICAgICAgXG4gICAgICAgIGJ5VHlwZToge1xuICAgICAgICAgIGNhcmQ6IDAsXG4gICAgICAgICAgZm9sZGVyOiAwLFxuICAgICAgICAgIHRhZzogMCxcbiAgICAgICAgICBpbWFnZTogMFxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgYnlQcmlvcml0eToge1xuICAgICAgICAgIGNyaXRpY2FsOiAwLFxuICAgICAgICAgIGhpZ2g6IDAsXG4gICAgICAgICAgbm9ybWFsOiAwLFxuICAgICAgICAgIGxvdzogMFxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgYnlTdGF0dXM6IHtcbiAgICAgICAgICBwZW5kaW5nOiAwLFxuICAgICAgICAgIHByb2Nlc3Npbmc6IDAsXG4gICAgICAgICAgY29tcGxldGVkOiAwLFxuICAgICAgICAgIGZhaWxlZDogMCxcbiAgICAgICAgICBjYW5jZWxsZWQ6IDBcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIGF2ZXJhZ2VQcm9jZXNzaW5nVGltZTogMCxcbiAgICAgICAgZmFpbHVyZVJhdGU6IDAsXG4gICAgICAgIG9sZGVzdFBlbmRpbmdBZ2U6IDAsXG4gICAgICAgIGF2ZXJhZ2VSZXRyeUNvdW50OiAwXG4gICAgICB9XG5cbiAgICAgIC8vIOiuoeeul+WQhOexu+e7n+iuoVxuICAgICAgZm9yIChjb25zdCBvcGVyYXRpb24gb2YgYWxsT3BlcmF0aW9ucykge1xuICAgICAgICAvLyDmjInnsbvlnovnu5/orqFcbiAgICAgICAgc3RhdHMuYnlUeXBlW29wZXJhdGlvbi5lbnRpdHlUeXBlXSsrXG4gICAgICAgIFxuICAgICAgICAvLyDmjInkvJjlhYjnuqfnu5/orqFcbiAgICAgICAgc3RhdHMuYnlQcmlvcml0eVtvcGVyYXRpb24ucHJpb3JpdHldKytcbiAgICAgICAgXG4gICAgICAgIC8vIOaMieeKtuaAgee7n+iuoVxuICAgICAgICBzdGF0cy5ieVN0YXR1c1tvcGVyYXRpb24uc3RhdHVzXSsrXG4gICAgICAgIFxuICAgICAgICAvLyDorqHnrpflpITnkIbml7bpl7RcbiAgICAgICAgaWYgKG9wZXJhdGlvbi5zdGF0dXMgPT09ICdjb21wbGV0ZWQnICYmIG9wZXJhdGlvbi5wcm9jZXNzaW5nU3RhcnRlZEF0KSB7XG4gICAgICAgICAgY29uc3QgcHJvY2Vzc2luZ1RpbWUgPSBvcGVyYXRpb24udGltZXN0YW1wLmdldFRpbWUoKSAtIG9wZXJhdGlvbi5wcm9jZXNzaW5nU3RhcnRlZEF0LmdldFRpbWUoKVxuICAgICAgICAgIHN0YXRzLmF2ZXJhZ2VQcm9jZXNzaW5nVGltZSArPSBwcm9jZXNzaW5nVGltZVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyDorqHnrpflubPlnYfph43or5XmrKHmlbBcbiAgICAgICAgc3RhdHMuYXZlcmFnZVJldHJ5Q291bnQgKz0gb3BlcmF0aW9uLnJldHJ5Q291bnRcbiAgICAgIH1cblxuICAgICAgLy8g6K6h566X6KGN55Sf57uf6K6hXG4gICAgICBzdGF0cy5wZW5kaW5nT3BlcmF0aW9ucyA9IHN0YXRzLmJ5U3RhdHVzLnBlbmRpbmdcbiAgICAgIHN0YXRzLnByb2Nlc3NpbmdPcGVyYXRpb25zID0gc3RhdHMuYnlTdGF0dXMucHJvY2Vzc2luZ1xuICAgICAgc3RhdHMuZmFpbGVkT3BlcmF0aW9ucyA9IHN0YXRzLmJ5U3RhdHVzLmZhaWxlZFxuICAgICAgc3RhdHMuY29tcGxldGVkT3BlcmF0aW9ucyA9IHN0YXRzLmJ5U3RhdHVzLmNvbXBsZXRlZFxuICAgICAgXG4gICAgICAvLyDorqHnrpflubPlnYflpITnkIbml7bpl7RcbiAgICAgIGNvbnN0IGNvbXBsZXRlZENvdW50ID0gc3RhdHMuYnlTdGF0dXMuY29tcGxldGVkXG4gICAgICBpZiAoY29tcGxldGVkQ291bnQgPiAwKSB7XG4gICAgICAgIHN0YXRzLmF2ZXJhZ2VQcm9jZXNzaW5nVGltZSAvPSBjb21wbGV0ZWRDb3VudFxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyDorqHnrpflubPlnYfph43or5XmrKHmlbBcbiAgICAgIGlmIChhbGxPcGVyYXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgc3RhdHMuYXZlcmFnZVJldHJ5Q291bnQgLz0gYWxsT3BlcmF0aW9ucy5sZW5ndGhcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8g6K6h566X5aSx6LSl546HXG4gICAgICBjb25zdCB0b3RhbFdpdGhTdGF0dXMgPSBhbGxPcGVyYXRpb25zLmZpbHRlcihvcCA9PiBcbiAgICAgICAgWydjb21wbGV0ZWQnLCAnZmFpbGVkJ10uaW5jbHVkZXMob3Auc3RhdHVzKVxuICAgICAgKS5sZW5ndGhcbiAgICAgIGlmICh0b3RhbFdpdGhTdGF0dXMgPiAwKSB7XG4gICAgICAgIHN0YXRzLmZhaWx1cmVSYXRlID0gc3RhdHMuZmFpbGVkT3BlcmF0aW9ucyAvIHRvdGFsV2l0aFN0YXR1c1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyDorqHnrpfmnIDogIHnmoTlvoXlpITnkIbmk43kvZzlubTpvoRcbiAgICAgIGNvbnN0IHBlbmRpbmdPcGVyYXRpb25zID0gYWxsT3BlcmF0aW9ucy5maWx0ZXIob3AgPT4gb3Auc3RhdHVzID09PSAncGVuZGluZycpXG4gICAgICBpZiAocGVuZGluZ09wZXJhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBvbGRlc3QgPSBwZW5kaW5nT3BlcmF0aW9ucy5yZWR1Y2UoKG9sZGVzdCwgY3VycmVudCkgPT4ge1xuICAgICAgICAgIGNvbnN0IG9sZGVzdFRpbWUgPSB0eXBlb2Ygb2xkZXN0LnRpbWVzdGFtcCA9PT0gJ3N0cmluZycgPyBuZXcgRGF0ZShvbGRlc3QudGltZXN0YW1wKS5nZXRUaW1lKCkgOiBvbGRlc3QudGltZXN0YW1wLmdldFRpbWUoKVxuICAgICAgICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gdHlwZW9mIGN1cnJlbnQudGltZXN0YW1wID09PSAnc3RyaW5nJyA/IG5ldyBEYXRlKGN1cnJlbnQudGltZXN0YW1wKS5nZXRUaW1lKCkgOiBjdXJyZW50LnRpbWVzdGFtcC5nZXRUaW1lKClcbiAgICAgICAgICByZXR1cm4gY3VycmVudFRpbWUgPCBvbGRlc3RUaW1lID8gY3VycmVudCA6IG9sZGVzdFxuICAgICAgICB9KVxuICAgICAgICBjb25zdCBvbGRlc3RUaW1lID0gdHlwZW9mIG9sZGVzdC50aW1lc3RhbXAgPT09ICdzdHJpbmcnID8gbmV3IERhdGUob2xkZXN0LnRpbWVzdGFtcCkuZ2V0VGltZSgpIDogb2xkZXN0LnRpbWVzdGFtcC5nZXRUaW1lKClcbiAgICAgICAgc3RhdHMub2xkZXN0UGVuZGluZ0FnZSA9IERhdGUubm93KCkgLSBvbGRlc3RUaW1lXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdGF0c1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZ2V0IHF1ZXVlIHN0YXRzOicsIGVycm9yKVxuICAgICAgcmV0dXJuIHRoaXMuZ2V0RW1wdHlTdGF0cygpXG4gICAgfVxuICB9XG5cbiAgLy8g6I635Y+W56m657uf6K6h5L+h5oGvXG4gIHByaXZhdGUgZ2V0RW1wdHlTdGF0cygpOiBRdWV1ZVN0YXRzIHtcbiAgICByZXR1cm4ge1xuICAgICAgdG90YWxPcGVyYXRpb25zOiAwLFxuICAgICAgcGVuZGluZ09wZXJhdGlvbnM6IDAsXG4gICAgICBwcm9jZXNzaW5nT3BlcmF0aW9uczogMCxcbiAgICAgIGZhaWxlZE9wZXJhdGlvbnM6IDAsXG4gICAgICBjb21wbGV0ZWRPcGVyYXRpb25zOiAwLFxuICAgICAgYnlUeXBlOiB7IGNhcmQ6IDAsIGZvbGRlcjogMCwgdGFnOiAwLCBpbWFnZTogMCB9LFxuICAgICAgYnlQcmlvcml0eTogeyBjcml0aWNhbDogMCwgaGlnaDogMCwgbm9ybWFsOiAwLCBsb3c6IDAgfSxcbiAgICAgIGJ5U3RhdHVzOiB7IHBlbmRpbmc6IDAsIHByb2Nlc3Npbmc6IDAsIGNvbXBsZXRlZDogMCwgZmFpbGVkOiAwLCBjYW5jZWxsZWQ6IDAgfSxcbiAgICAgIGF2ZXJhZ2VQcm9jZXNzaW5nVGltZTogMCxcbiAgICAgIGZhaWx1cmVSYXRlOiAwLFxuICAgICAgb2xkZXN0UGVuZGluZ0FnZTogMCxcbiAgICAgIGF2ZXJhZ2VSZXRyeUNvdW50OiAwXG4gICAgfVxuICB9XG5cbiAgLy8g5pu05paw6Zif5YiX57uf6K6h5L+h5oGv5bm26YCa55+l55uR5ZCs5ZmoXG4gIHByaXZhdGUgYXN5bmMgdXBkYXRlUXVldWVTdGF0cygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgc3RhdHMgPSBhd2FpdCB0aGlzLmdldFF1ZXVlU3RhdHMoKVxuICAgICAgdGhpcy5ub3RpZnlMaXN0ZW5lcnMoJ3F1ZXVlU3RhdHNDaGFuZ2VkJywgc3RhdHMpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byB1cGRhdGUgcXVldWUgc3RhdHM6JywgZXJyb3IpXG4gICAgfVxuICB9XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyDkuovku7bnm5HlkKzlmajnrqHnkIZcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIC8vIOa3u+WKoOS6i+S7tuebkeWQrOWZqFxuICBhZGRFdmVudExpc3RlbmVyPEsgZXh0ZW5kcyBrZXlvZiB0eXBlb2YgdGhpcy5saXN0ZW5lcnM+KFxuICAgIGV2ZW50OiBLLFxuICAgIGNhbGxiYWNrOiBOb25OdWxsYWJsZTx0eXBlb2YgdGhpcy5saXN0ZW5lcnNbS10+XG4gICk6IHZvaWQge1xuICAgIHRoaXMubGlzdGVuZXJzW2V2ZW50XSA9IGNhbGxiYWNrIGFzIGFueVxuICB9XG5cbiAgLy8g56e76Zmk5LqL5Lu255uR5ZCs5ZmoXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXI8SyBleHRlbmRzIGtleW9mIHR5cGVvZiB0aGlzLmxpc3RlbmVycz4oXG4gICAgZXZlbnQ6IEtcbiAgKTogdm9pZCB7XG4gICAgZGVsZXRlIHRoaXMubGlzdGVuZXJzW2V2ZW50XVxuICB9XG5cbiAgLy8g6YCa55+l55uR5ZCs5ZmoXG4gIHByaXZhdGUgbm90aWZ5TGlzdGVuZXJzPEsgZXh0ZW5kcyBrZXlvZiB0eXBlb2YgdGhpcy5saXN0ZW5lcnM+KFxuICAgIGV2ZW50OiBLLFxuICAgIC4uLmFyZ3M6IGFueVtdXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IGxpc3RlbmVyID0gdGhpcy5saXN0ZW5lcnNbZXZlbnRdXG4gICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICB0cnkge1xuICAgICAgICAobGlzdGVuZXIgYXMgRnVuY3Rpb24pKC4uLmFyZ3MpXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBpbiAke2V2ZW50fSBsaXN0ZW5lcjpgLCBlcnJvcilcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIOS+v+WIqeaWueazlVxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgLy8g5riF56m66Zif5YiXXG4gIGFzeW5jIGNsZWFyUXVldWUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGRiLnN5bmNRdWV1ZS5jbGVhcigpXG4gICAgICBhd2FpdCB0aGlzLnVwZGF0ZVF1ZXVlU3RhdHMoKVxuICAgICAgY29uc29sZS5sb2coJ1F1ZXVlIGNsZWFyZWQgc3VjY2Vzc2Z1bGx5JylcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGNsZWFyIHF1ZXVlOicsIGVycm9yKVxuICAgIH1cbiAgfVxuXG4gIC8vIOiOt+WPluaTjeS9nOivpuaDhVxuICBhc3luYyBnZXRPcGVyYXRpb24oaWQ6IHN0cmluZyk6IFByb21pc2U8TG9jYWxTeW5jT3BlcmF0aW9uIHwgdW5kZWZpbmVkPiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCBkYi5zeW5jUXVldWUuZ2V0KGlkKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gZ2V0IG9wZXJhdGlvbiAke2lkfTpgLCBlcnJvcilcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG4gIH1cblxuICAvLyDliKDpmaTmk43kvZxcbiAgYXN5bmMgcmVtb3ZlT3BlcmF0aW9uKGlkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgZGIuc3luY1F1ZXVlLmRlbGV0ZShpZClcbiAgICAgIGF3YWl0IHRoaXMudXBkYXRlUXVldWVTdGF0cygpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byByZW1vdmUgb3BlcmF0aW9uICR7aWR9OmAsIGVycm9yKVxuICAgICAgdGhyb3cgZXJyb3JcbiAgICB9XG4gIH1cblxuICAvLyDph43or5XlpLHotKXnmoTmk43kvZxcbiAgYXN5bmMgcmV0cnlGYWlsZWRPcGVyYXRpb25zKCk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGZhaWxlZE9wZXJhdGlvbnMgPSBhd2FpdCBkYi5zeW5jUXVldWVcbiAgICAgICAgLndoZXJlKCdzdGF0dXMnKVxuICAgICAgICAuZXF1YWxzKCdmYWlsZWQnKVxuICAgICAgICAudG9BcnJheSgpXG4gICAgICBcbiAgICAgIGZvciAoY29uc3Qgb3BlcmF0aW9uIG9mIGZhaWxlZE9wZXJhdGlvbnMpIHtcbiAgICAgICAgYXdhaXQgZGIuc3luY1F1ZXVlLnVwZGF0ZShvcGVyYXRpb24uaWQhLCB7XG4gICAgICAgICAgc3RhdHVzOiAncGVuZGluZycsXG4gICAgICAgICAgcmV0cnlDb3VudDogMCxcbiAgICAgICAgICByZXRyeURlbGF5OiB0aGlzLmNvbmZpZy5pbml0aWFsUmV0cnlEZWxheSxcbiAgICAgICAgICBsYXN0RXJyb3I6IHVuZGVmaW5lZFxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgXG4gICAgICBhd2FpdCB0aGlzLnVwZGF0ZVF1ZXVlU3RhdHMoKVxuICAgICAgY29uc29sZS5sb2coYFJldHJpZWQgJHtmYWlsZWRPcGVyYXRpb25zLmxlbmd0aH0gZmFpbGVkIG9wZXJhdGlvbnNgKVxuICAgICAgcmV0dXJuIGZhaWxlZE9wZXJhdGlvbnMubGVuZ3RoXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byByZXRyeSBmYWlsZWQgb3BlcmF0aW9uczonLCBlcnJvcilcbiAgICAgIHJldHVybiAwXG4gICAgfVxuICB9XG5cbiAgLy8g5riF55CG5bey5a6M5oiQ55qE5pON5L2cXG4gIGFzeW5jIGNsZWFyQ29tcGxldGVkT3BlcmF0aW9ucygpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBjb21wbGV0ZWRPcGVyYXRpb25zID0gYXdhaXQgZGIuc3luY1F1ZXVlXG4gICAgICAgIC53aGVyZSgnc3RhdHVzJylcbiAgICAgICAgLmVxdWFscygnY29tcGxldGVkJylcbiAgICAgICAgLnRvQXJyYXkoKVxuICAgICAgXG4gICAgICAvLyDkv53nlZnmnIDov5HlrozmiJDnmoTmk43kvZznlKjkuo7ljoblj7LorrDlvZVcbiAgICAgIGNvbnN0IGtlZXBSZWNlbnRDb3VudCA9IDEwMFxuICAgICAgY29uc3Qgb3BlcmF0aW9uc1RvRGVsZXRlID0gY29tcGxldGVkT3BlcmF0aW9ucy5zbGljZSgwLCAta2VlcFJlY2VudENvdW50KVxuICAgICAgXG4gICAgICBmb3IgKGNvbnN0IG9wZXJhdGlvbiBvZiBvcGVyYXRpb25zVG9EZWxldGUpIHtcbiAgICAgICAgYXdhaXQgZGIuc3luY1F1ZXVlLmRlbGV0ZShvcGVyYXRpb24uaWQhKVxuICAgICAgfVxuICAgICAgXG4gICAgICBhd2FpdCB0aGlzLnVwZGF0ZVF1ZXVlU3RhdHMoKVxuICAgICAgY29uc29sZS5sb2coYENsZWFyZWQgJHtvcGVyYXRpb25zVG9EZWxldGUubGVuZ3RofSBjb21wbGV0ZWQgb3BlcmF0aW9ucywga2VwdCAke2NvbXBsZXRlZE9wZXJhdGlvbnMubGVuZ3RoIC0gb3BlcmF0aW9uc1RvRGVsZXRlLmxlbmd0aH0gcmVjZW50IG9uZXNgKVxuICAgICAgcmV0dXJuIG9wZXJhdGlvbnNUb0RlbGV0ZS5sZW5ndGhcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGNsZWFyIGNvbXBsZXRlZCBvcGVyYXRpb25zOicsIGVycm9yKVxuICAgICAgcmV0dXJuIDBcbiAgICB9XG4gIH1cblxuICAvLyDmm7TmlrDphY3nva5cbiAgdXBkYXRlQ29uZmlnKG5ld0NvbmZpZzogUGFydGlhbDxRdWV1ZUNvbmZpZz4pOiB2b2lkIHtcbiAgICAvLyDpqozor4HphY3nva7lj4LmlbBcbiAgICBpZiAobmV3Q29uZmlnLm1heFJldHJpZXMgIT09IHVuZGVmaW5lZCAmJiBuZXdDb25maWcubWF4UmV0cmllcyA8IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignbWF4UmV0cmllcyBtdXN0IGJlIG5vbi1uZWdhdGl2ZScpXG4gICAgfVxuICAgIGlmIChuZXdDb25maWcuYmF0Y2hTaXplICE9PSB1bmRlZmluZWQgJiYgbmV3Q29uZmlnLmJhdGNoU2l6ZSA8PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2JhdGNoU2l6ZSBtdXN0IGJlIHBvc2l0aXZlJylcbiAgICB9XG4gICAgaWYgKG5ld0NvbmZpZy5tYXhRdWV1ZVNpemUgIT09IHVuZGVmaW5lZCAmJiBuZXdDb25maWcubWF4UXVldWVTaXplIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYXhRdWV1ZVNpemUgbXVzdCBiZSBub24tbmVnYXRpdmUnKVxuICAgIH1cbiAgICBpZiAobmV3Q29uZmlnLnByb2Nlc3NpbmdUaW1lb3V0ICE9PSB1bmRlZmluZWQgJiYgbmV3Q29uZmlnLnByb2Nlc3NpbmdUaW1lb3V0IDw9IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzc2luZ1RpbWVvdXQgbXVzdCBiZSBwb3NpdGl2ZScpXG4gICAgfVxuICAgIGlmIChuZXdDb25maWcuaWRsZUNoZWNrSW50ZXJ2YWwgIT09IHVuZGVmaW5lZCAmJiBuZXdDb25maWcuaWRsZUNoZWNrSW50ZXJ2YWwgPD0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpZGxlQ2hlY2tJbnRlcnZhbCBtdXN0IGJlIHBvc2l0aXZlJylcbiAgICB9XG4gICAgXG4gICAgLy8g5pu05paw6YWN572uXG4gICAgdGhpcy5jb25maWcgPSB7IC4uLnRoaXMuY29uZmlnLCAuLi5uZXdDb25maWcgfVxuICAgIFxuICAgIC8vIOWmguaenOWumuaXtuWZqOmXtOmalOaUueWPmO+8jOmHjeaWsOWQr+WKqOWumuaXtuWZqFxuICAgIGlmIChuZXdDb25maWcuaWRsZUNoZWNrSW50ZXJ2YWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5zdGFydFByb2Nlc3NpbmcoKVxuICAgIH1cbiAgICBpZiAobmV3Q29uZmlnLmNsZWFudXBJbnRlcnZhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnN0YXJ0Q2xlYW51cCgpXG4gICAgfVxuICAgIFxuICAgIGNvbnNvbGUubG9nKCdMb2NhbE9wZXJhdGlvblNlcnZpY2UgY29uZmlnIHVwZGF0ZWQnKVxuICB9XG5cbiAgLy8g6ZSA5q+B5pyN5YqhXG4gIGRlc3Ryb3koKTogdm9pZCB7XG4gICAgaWYgKHRoaXMucHJvY2Vzc2luZ1RpbWVyKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMucHJvY2Vzc2luZ1RpbWVyKVxuICAgIH1cbiAgICBcbiAgICBpZiAodGhpcy5jbGVhbnVwVGltZXIpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5jbGVhbnVwVGltZXIpXG4gICAgfVxuICAgIFxuICAgIC8vIOetieW+heW9k+WJjeaJueasoeWujOaIkFxuICAgIFByb21pc2UuYWxsKHRoaXMuY3VycmVudEJhdGNoZXMudmFsdWVzKCkpLnRoZW4oKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ0xvY2FsT3BlcmF0aW9uU2VydmljZSBkZXN0cm95ZWQnKVxuICAgIH0pXG4gIH1cbn1cblxuLy8g5a+85Ye65Y2V5L6L5a6e5L6LXG5leHBvcnQgY29uc3QgbG9jYWxPcGVyYXRpb25TZXJ2aWNlID0gbmV3IExvY2FsT3BlcmF0aW9uU2VydmljZSgpXG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIOWvvOWHuuW3peWFt+WHveaVsFxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyDliJvlu7rljaHniYfmk43kvZxcbmV4cG9ydCBjb25zdCBjcmVhdGVDYXJkT3BlcmF0aW9uID0gKFxuICBvcGVyYXRpb25UeXBlOiAnY3JlYXRlJyB8ICd1cGRhdGUnIHwgJ2RlbGV0ZScsXG4gIGNhcmREYXRhOiBEYkNhcmQsXG4gIHVzZXJJZD86IHN0cmluZyxcbiAgcHJldmlvdXNEYXRhPzogRGJDYXJkXG4pOiBPbWl0PExvY2FsU3luY09wZXJhdGlvbiwgJ2lkJyB8ICd0aW1lc3RhbXAnIHwgJ3JldHJ5Q291bnQnIHwgJ3N0YXR1cycgfCAnbG9jYWxWZXJzaW9uJz4gPT4ge1xuICByZXR1cm4ge1xuICAgIGVudGl0eVR5cGU6ICdjYXJkJyxcbiAgICBvcGVyYXRpb25UeXBlLFxuICAgIGVudGl0eUlkOiBjYXJkRGF0YS5pZCEsXG4gICAgZGF0YTogY2FyZERhdGEsXG4gICAgcHJldmlvdXNEYXRhLFxuICAgIHVzZXJJZCxcbiAgICBwcmlvcml0eTogb3BlcmF0aW9uVHlwZSA9PT0gJ2RlbGV0ZScgPyAnaGlnaCcgOiAnbm9ybWFsJyxcbiAgICBtYXhSZXRyaWVzOiA1XG4gIH1cbn1cblxuLy8g5Yib5bu65paH5Lu25aS55pON5L2cXG5leHBvcnQgY29uc3QgY3JlYXRlRm9sZGVyT3BlcmF0aW9uID0gKFxuICBvcGVyYXRpb25UeXBlOiAnY3JlYXRlJyB8ICd1cGRhdGUnIHwgJ2RlbGV0ZScsXG4gIGZvbGRlckRhdGE6IERiRm9sZGVyLFxuICB1c2VySWQ/OiBzdHJpbmcsXG4gIHByZXZpb3VzRGF0YT86IERiRm9sZGVyXG4pOiBPbWl0PExvY2FsU3luY09wZXJhdGlvbiwgJ2lkJyB8ICd0aW1lc3RhbXAnIHwgJ3JldHJ5Q291bnQnIHwgJ3N0YXR1cycgfCAnbG9jYWxWZXJzaW9uJz4gPT4ge1xuICByZXR1cm4ge1xuICAgIGVudGl0eVR5cGU6ICdmb2xkZXInLFxuICAgIG9wZXJhdGlvblR5cGUsXG4gICAgZW50aXR5SWQ6IGZvbGRlckRhdGEuaWQhLFxuICAgIGRhdGE6IGZvbGRlckRhdGEsXG4gICAgcHJldmlvdXNEYXRhLFxuICAgIHVzZXJJZCxcbiAgICBwcmlvcml0eTogb3BlcmF0aW9uVHlwZSA9PT0gJ2RlbGV0ZScgPyAnaGlnaCcgOiAnbm9ybWFsJyxcbiAgICBtYXhSZXRyaWVzOiA1XG4gIH1cbn1cblxuLy8g5Yib5bu65qCH562+5pON5L2cXG5leHBvcnQgY29uc3QgY3JlYXRlVGFnT3BlcmF0aW9uID0gKFxuICBvcGVyYXRpb25UeXBlOiAnY3JlYXRlJyB8ICd1cGRhdGUnIHwgJ2RlbGV0ZScsXG4gIHRhZ0RhdGE6IERiVGFnLFxuICB1c2VySWQ/OiBzdHJpbmcsXG4gIHByZXZpb3VzRGF0YT86IERiVGFnXG4pOiBPbWl0PExvY2FsU3luY09wZXJhdGlvbiwgJ2lkJyB8ICd0aW1lc3RhbXAnIHwgJ3JldHJ5Q291bnQnIHwgJ3N0YXR1cycgfCAnbG9jYWxWZXJzaW9uJz4gPT4ge1xuICByZXR1cm4ge1xuICAgIGVudGl0eVR5cGU6ICd0YWcnLFxuICAgIG9wZXJhdGlvblR5cGUsXG4gICAgZW50aXR5SWQ6IHRhZ0RhdGEuaWQhLFxuICAgIGRhdGE6IHRhZ0RhdGEsXG4gICAgcHJldmlvdXNEYXRhLFxuICAgIHVzZXJJZCxcbiAgICBwcmlvcml0eTogJ25vcm1hbCcsXG4gICAgbWF4UmV0cmllczogM1xuICB9XG59XG5cbi8vIOWIm+W7uuWbvueJh+aTjeS9nFxuZXhwb3J0IGNvbnN0IGNyZWF0ZUltYWdlT3BlcmF0aW9uID0gKFxuICBvcGVyYXRpb25UeXBlOiAnY3JlYXRlJyB8ICd1cGRhdGUnIHwgJ2RlbGV0ZScsXG4gIGltYWdlRGF0YTogRGJJbWFnZSxcbiAgdXNlcklkPzogc3RyaW5nLFxuICBwcmV2aW91c0RhdGE/OiBEYkltYWdlXG4pOiBPbWl0PExvY2FsU3luY09wZXJhdGlvbiwgJ2lkJyB8ICd0aW1lc3RhbXAnIHwgJ3JldHJ5Q291bnQnIHwgJ3N0YXR1cycgfCAnbG9jYWxWZXJzaW9uJz4gPT4ge1xuICByZXR1cm4ge1xuICAgIGVudGl0eVR5cGU6ICdpbWFnZScsXG4gICAgb3BlcmF0aW9uVHlwZSxcbiAgICBlbnRpdHlJZDogaW1hZ2VEYXRhLmlkISxcbiAgICBkYXRhOiBpbWFnZURhdGEsXG4gICAgcHJldmlvdXNEYXRhLFxuICAgIHVzZXJJZCxcbiAgICBwcmlvcml0eTogb3BlcmF0aW9uVHlwZSA9PT0gJ2RlbGV0ZScgPyAnaGlnaCcgOiAnbG93JyxcbiAgICBtYXhSZXRyaWVzOiAzXG4gIH1cbn0iXSwidmVyc2lvbiI6M30=
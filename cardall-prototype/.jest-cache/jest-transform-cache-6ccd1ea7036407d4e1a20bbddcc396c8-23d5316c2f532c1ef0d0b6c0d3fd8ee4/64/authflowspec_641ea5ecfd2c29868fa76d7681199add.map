{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\tests\\e2e\\auth-flow.spec.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\tests\\e2e\\auth-flow.spec.ts"],"sourcesContent":["// 认证流程E2E测试\nimport { test, expect } from '@playwright/test'\n\ntest.describe('认证流程', () => {\n  test.beforeEach(async ({ page }) => {\n    // 在每个测试前清理本地存储\n    await page.goto('/')\n    await page.evaluate(() => {\n      localStorage.clear()\n      sessionStorage.clear()\n    })\n  })\n\n  test.describe('注册流程', () => {\n    test('应该能够成功注册新用户', async ({ page }) => {\n      await page.goto('/auth/register')\n\n      // 填写注册表单\n      await page.fill('[data-testid=\"email-input\"]', 'newuser@example.com')\n      await page.fill('[data-testid=\"password-input\"]', 'password123')\n      await page.fill('[data-testid=\"confirm-password-input\"]', 'password123')\n      await page.fill('[data-testid=\"name-input\"]', '新用户')\n\n      // 点击注册按钮\n      await page.click('[data-testid=\"register-button\"]')\n\n      // 等待注册成功\n      await page.waitForURL('/dashboard')\n      \n      // 验证用户已登录\n      await expect(page.locator('[data-testid=\"user-menu\"]')).toBeVisible()\n      await expect(page.locator('[data-testid=\"user-name\"]')).toHaveText('新用户')\n    })\n\n    test('应该验证密码匹配', async ({ page }) => {\n      await page.goto('/auth/register')\n\n      // 填写不匹配的密码\n      await page.fill('[data-testid=\"email-input\"]', 'test@example.com')\n      await page.fill('[data-testid=\"password-input\"]', 'password123')\n      await page.fill('[data-testid=\"confirm-password-input\"]', 'differentpassword')\n      await page.fill('[data-testid=\"name-input\"]', '测试用户')\n\n      // 点击注册按钮\n      await page.click('[data-testid=\"register-button\"]')\n\n      // 应该显示错误消息\n      await expect(page.locator('[data-testid=\"password-mismatch-error\"]')).toBeVisible()\n      await expect(page.locator('[data-testid=\"password-mismatch-error\"]')).toHaveText('密码不匹配')\n    })\n\n    test('应该验证必填字段', async ({ page }) => {\n      await page.goto('/auth/register')\n\n      // 尝试提交空表单\n      await page.click('[data-testid=\"register-button\"]')\n\n      // 应该显示必填字段错误\n      await expect(page.locator('[data-testid=\"email-required-error\"]')).toBeVisible()\n      await expect(page.locator('[data-testid=\"password-required-error\"]')).toBeVisible()\n      await expect(page.locator('[data-testid=\"name-required-error\"]')).toBeVisible()\n    })\n\n    test('应该验证邮箱格式', async ({ page }) => {\n      await page.goto('/auth/register')\n\n      // 填写无效邮箱\n      await page.fill('[data-testid=\"email-input\"]', 'invalid-email')\n      await page.fill('[data-testid=\"password-input\"]', 'password123')\n      await page.fill('[data-testid=\"confirm-password-input\"]', 'password123')\n      await page.fill('[data-testid=\"name-input\"]', '测试用户')\n\n      // 点击注册按钮\n      await page.click('[data-testid=\"register-button\"]')\n\n      // 应该显示邮箱格式错误\n      await expect(page.locator('[data-testid=\"email-format-error\"]')).toBeVisible()\n    })\n  })\n\n  test.describe('登录流程', () => {\n    test('应该能够成功登录', async ({ page }) => {\n      await page.goto('/auth/login')\n\n      // 填写登录表单\n      await page.fill('[data-testid=\"email-input\"]', 'test@example.com')\n      await page.fill('[data-testid=\"password-input\"]', 'password123')\n\n      // 点击登录按钮\n      await page.click('[data-testid=\"login-button\"]')\n\n      // 等待登录成功\n      await page.waitForURL('/dashboard')\n      \n      // 验证用户已登录\n      await expect(page.locator('[data-testid=\"user-menu\"]')).toBeVisible()\n    })\n\n    test('应该显示登录错误信息', async ({ page }) => {\n      await page.goto('/auth/login')\n\n      // 填写错误的凭据\n      await page.fill('[data-testid=\"email-input\"]', 'wrong@example.com')\n      await page.fill('[data-testid=\"password-input\"]', 'wrongpassword')\n\n      // 点击登录按钮\n      await page.click('[data-testid=\"login-button\"]')\n\n      // 应该显示错误消息\n      await expect(page.locator('[data-testid=\"login-error\"]')).toBeVisible()\n      await expect(page.locator('[data-testid=\"login-error\"]')).toHaveText('邮箱或密码错误')\n    })\n\n    test('应该提供忘记密码功能', async ({ page }) => {\n      await page.goto('/auth/login')\n\n      // 点击忘记密码链接\n      await page.click('[data-testid=\"forgot-password-link\"]')\n\n      // 应该导航到重置密码页面\n      await expect(page).toHaveURL('/auth/reset-password')\n      await expect(page.locator('[data-testid=\"reset-password-form\"]')).toBeVisible()\n    })\n\n    test('应该支持社交登录', async ({ page }) => {\n      await page.goto('/auth/login')\n\n      // 应该显示社交登录按钮\n      await expect(page.locator('[data-testid=\"google-login-button\"]')).toBeVisible()\n      await expect(page.locator('[data-testid=\"github-login-button\"]')).toBeVisible()\n    })\n  })\n\n  test.describe('密码重置流程', () => {\n    test('应该能够请求密码重置', async ({ page }) => {\n      await page.goto('/auth/reset-password')\n\n      // 填写邮箱\n      await page.fill('[data-testid=\"email-input\"]', 'test@example.com')\n\n      // 点击发送重置邮件按钮\n      await page.click('[data-testid=\"send-reset-button\"]')\n\n      // 应该显示成功消息\n      await expect(page.locator('[data-testid=\"reset-success-message\"]')).toBeVisible()\n      await expect(page.locator('[data-testid=\"reset-success-message\"]')).toHaveText('重置邮件已发送')\n    })\n\n    test('应该验证邮箱格式', async ({ page }) => {\n      await page.goto('/auth/reset-password')\n\n      // 填写无效邮箱\n      await page.fill('[data-testid=\"email-input\"]', 'invalid-email')\n\n      // 点击发送重置邮件按钮\n      await page.click('[data-testid=\"send-reset-button\"]')\n\n      // 应该显示邮箱格式错误\n      await expect(page.locator('[data-testid=\"email-format-error\"]')).toBeVisible()\n    })\n  })\n\n  test.describe('会话管理', () => {\n    test('应该保持登录状态', async ({ page }) => {\n      // 先登录\n      await page.goto('/auth/login')\n      await page.fill('[data-testid=\"email-input\"]', 'test@example.com')\n      await page.fill('[data-testid=\"password-input\"]', 'password123')\n      await page.click('[data-testid=\"login-button\"]')\n\n      // 等待登录成功\n      await page.waitForURL('/dashboard')\n\n      // 刷新页面\n      await page.reload()\n\n      // 应该仍然保持登录状态\n      await expect(page.locator('[data-testid=\"user-menu\"]')).toBeVisible()\n    })\n\n    test('应该能够登出', async ({ page }) => {\n      // 先登录\n      await page.goto('/auth/login')\n      await page.fill('[data-testid=\"email-input\"]', 'test@example.com')\n      await page.fill('[data-testid=\"password-input\"]', 'password123')\n      await page.click('[data-testid=\"login-button\"]')\n\n      // 等待登录成功\n      await page.waitForURL('/dashboard')\n\n      // 点击用户菜单\n      await page.click('[data-testid=\"user-menu\"]')\n\n      // 点击登出按钮\n      await page.click('[data-testid=\"logout-button\"]')\n\n      // 应该重定向到登录页面\n      await expect(page).toHaveURL('/auth/login')\n      \n      // 用户菜单应该不可见\n      await expect(page.locator('[data-testid=\"user-menu\"]')).not.toBeVisible()\n    })\n\n    test('应该处理会话过期', async ({ page }) => {\n      // 模拟会话过期\n      await page.goto('/dashboard')\n\n      // 如果会话过期，应该重定向到登录页面\n      // 这里我们需要模拟会话过期的情况\n      await page.evaluate(() => {\n        localStorage.removeItem('supabase.auth.token')\n      })\n\n      await page.reload()\n\n      // 应该重定向到登录页面\n      await expect(page).toHaveURL('/auth/login')\n    })\n  })\n\n  test.describe('路由保护', () => {\n    test('应该保护需要认证的页面', async ({ page }) => {\n      // 尝试访问需要认证的页面\n      await page.goto('/dashboard')\n\n      // 应该重定向到登录页面\n      await expect(page).toHaveURL('/auth/login')\n      \n      // 登录后应该重定向回原始页面\n      await page.fill('[data-testid=\"email-input\"]', 'test@example.com')\n      await page.fill('[data-testid=\"password-input\"]', 'password123')\n      await page.click('[data-testid=\"login-button\"]')\n\n      // 应该重定向到dashboard\n      await expect(page).toHaveURL('/dashboard')\n    })\n\n    test('应该允许访问公开页面', async ({ page }) => {\n      // 应该能够访问登录页面\n      await page.goto('/auth/login')\n      await expect(page).toHaveURL('/auth/login')\n\n      // 应该能够访问注册页面\n      await page.goto('/auth/register')\n      await expect(page).toHaveURL('/auth/register')\n\n      // 应该能够访问重置密码页面\n      await page.goto('/auth/reset-password')\n      await expect(page).toHaveURL('/auth/reset-password')\n    })\n  })\n\n  test.describe('用户资料管理', () => {\n    test.beforeEach(async ({ page }) => {\n      // 登录用户\n      await page.goto('/auth/login')\n      await page.fill('[data-testid=\"email-input\"]', 'test@example.com')\n      await page.fill('[data-testid=\"password-input\"]', 'password123')\n      await page.click('[data-testid=\"login-button]')\n      await page.waitForURL('/dashboard')\n    })\n\n    test('应该能够更新用户资料', async ({ page }) => {\n      // 导航到用户资料页面\n      await page.click('[data-testid=\"user-menu\"]')\n      await page.click('[data-testid=\"profile-link\"]')\n\n      // 等待页面加载\n      await expect(page.locator('[data-testid=\"profile-form\"]')).toBeVisible()\n\n      // 更新用户信息\n      await page.fill('[data-testid=\"name-input\"]', '更新后的姓名')\n      await page.fill('[data-testid=\"bio-input\"]', '这是我的个人简介')\n\n      // 保存更改\n      await page.click('[data-testid=\"save-profile-button\"]')\n\n      // 应该显示成功消息\n      await expect(page.locator('[data-testid=\"save-success-message\"]')).toBeVisible()\n\n      // 验证更改已保存\n      await expect(page.locator('[data-testid=\"name-input\"]')).toHaveValue('更新后的姓名')\n      await expect(page.locator('[data-testid=\"bio-input\"]')).toHaveValue('这是我的个人简介')\n    })\n\n    test('应该能够更改密码', async ({ page }) => {\n      // 导航到用户设置页面\n      await page.click('[data-testid=\"user-menu\"]')\n      await page.click('[data-testid=\"settings-link\"]')\n\n      // 等待页面加载\n      await expect(page.locator('[data-testid=\"settings-form\"]')).toBeVisible()\n\n      // 更改密码\n      await page.fill('[data-testid=\"current-password-input\"]', 'password123')\n      await page.fill('[data-testid=\"new-password-input\"]', 'newpassword123')\n      await page.fill('[data-testid=\"confirm-new-password-input\"]', 'newpassword123')\n\n      // 保存更改\n      await page.click('[data-testid=\"change-password-button\"]')\n\n      // 应该显示成功消息\n      await expect(page.locator('[data-testid=\"password-change-success\"]')).toBeVisible()\n    })\n\n    test('应该验证密码更改', async ({ page }) => {\n      // 导航到用户设置页面\n      await page.click('[data-testid=\"user-menu\"]')\n      await page.click('[data-testid=\"settings-link\"]')\n\n      // 尝试使用不匹配的新密码\n      await page.fill('[data-testid=\"current-password-input\"]', 'password123')\n      await page.fill('[data-testid=\"new-password-input\"]', 'newpassword123')\n      await page.fill('[data-testid=\"confirm-new-password-input\"]', 'differentpassword')\n\n      // 保存更改\n      await page.click('[data-testid=\"change-password-button\"]')\n\n      // 应该显示密码不匹配错误\n      await expect(page.locator('[data-testid=\"password-mismatch-error\"]')).toBeVisible()\n    })\n  })\n\n  test.describe('响应式设计', () => {\n    test.describe('移动设备', () => {\n      test.beforeEach(async ({ page }) => {\n        // 设置移动设备视口\n        await page.setViewportSize({ width: 375, height: 667 })\n      })\n\n      test('应该在移动设备上正确显示认证表单', async ({ page }) => {\n        await page.goto('/auth/login')\n\n        // 表单应该适合移动屏幕\n        await expect(page.locator('[data-testid=\"login-form\"]')).toBeVisible()\n        \n        // 输入字段应该可以点击\n        await expect(page.locator('[data-testid=\"email-input\"]')).toBeVisible()\n        await expect(page.locator('[data-testid=\"password-input\"]')).toBeVisible()\n        await expect(page.locator('[data-testid=\"login-button\"]')).toBeVisible()\n      })\n\n      test('应该在移动设备上正确显示错误消息', async ({ page }) => {\n        await page.goto('/auth/login')\n\n        // 尝试使用错误的凭据登录\n        await page.fill('[data-testid=\"email-input\"]', 'wrong@example.com')\n        await page.fill('[data-testid=\"password-input\"]', 'wrongpassword')\n        await page.click('[data-testid=\"login-button\"]')\n\n        // 错误消息应该在移动设备上可见\n        await expect(page.locator('[data-testid=\"login-error\"]')).toBeVisible()\n      })\n    })\n\n    test.describe('平板设备', () => {\n      test.beforeEach(async ({ page }) => {\n        // 设置平板设备视口\n        await page.setViewportSize({ width: 768, height: 1024 })\n      })\n\n      test('应该在中等屏幕上正确显示认证表单', async ({ page }) => {\n        await page.goto('/auth/login')\n\n        // 表单应该居中显示\n        await expect(page.locator('[data-testid=\"login-form\"]')).toBeVisible()\n        \n        // 社交登录按钮应该水平排列\n        const socialButtons = page.locator('[data-testid^=\"social-login-button\"]')\n        await expect(socialButtons.first()).toBeVisible()\n        await expect(socialButtons.last()).toBeVisible()\n      })\n    })\n  })\n\n  test.describe('可访问性测试', () => {\n    test('应该具有正确的ARIA标签', async ({ page }) => {\n      await page.goto('/auth/login')\n\n      // 表单字段应该有正确的标签\n      await expect(page.locator('[data-testid=\"email-input\"]')).toHaveAttribute('aria-label', '邮箱地址')\n      await expect(page.locator('[data-testid=\"password-input\"]')).toHaveAttribute('aria-label', '密码')\n\n      // 错误消息应该在ARIA live区域\n      await expect(page.locator('[data-testid=\"login-error\"]')).toHaveAttribute('role', 'alert')\n    })\n\n    test('应该支持键盘导航', async ({ page }) => {\n      await page.goto('/auth/login')\n\n      // 使用Tab键导航\n      await page.press('[data-testid=\"email-input\"]', 'Tab')\n      await expect(page.locator('[data-testid=\"password-input\"]')).toBeFocused()\n\n      await page.press('[data-testid=\"password-input\"]', 'Tab')\n      await expect(page.locator('[data-testid=\"login-button\"]')).toBeFocused()\n\n      // 使用Enter键提交表单\n      await page.fill('[data-testid=\"email-input\"]', 'test@example.com')\n      await page.fill('[data-testid=\"password-input\"]', 'password123')\n      await page.press('[data-testid=\"login-button\"]', 'Enter')\n\n      // 应该提交表单\n      await expect(page).toHaveURL('/dashboard')\n    })\n\n    test('应该具有适当的颜色对比度', async ({ page }) => {\n      await page.goto('/auth/login')\n\n      // 检查文本颜色对比度（简化测试）\n      const emailInput = page.locator('[data-testid=\"email-input\"]')\n      const backgroundColor = await emailInput.evaluate((el) => {\n        return window.getComputedStyle(el).backgroundColor\n      })\n      \n      // 背景颜色应该是白色或浅色\n      expect(backgroundColor).toMatch(/rgb\\(255,\\s*255,\\s*255\\)|rgba\\(255,\\s*255,\\s*255/)\n    })\n  })\n\n  test.describe('性能测试', () => {\n    test('应该快速加载认证页面', async ({ page }) => {\n      const startTime = Date.now()\n      await page.goto('/auth/login')\n      const loadTime = Date.now() - startTime\n\n      // 页面应该在2秒内加载完成\n      expect(loadTime).toBeLessThan(2000)\n\n      // 关键元素应该立即可见\n      await expect(page.locator('[data-testid=\"login-form\"]')).toBeVisible({ timeout: 1000 })\n    })\n\n    test('应该快速响应表单提交', async ({ page }) => {\n      await page.goto('/auth/login')\n\n      // 填写表单\n      await page.fill('[data-testid=\"email-input\"]', 'test@example.com')\n      await page.fill('[data-testid=\"password-input\"]', 'password123')\n\n      // 测量提交响应时间\n      const startTime = Date.now()\n      await page.click('[data-testid=\"login-button\"]')\n      const responseTime = Date.now() - startTime\n\n      // 响应时间应该在3秒内\n      expect(responseTime).toBeLessThan(3000)\n    })\n  })\n})"],"version":3}
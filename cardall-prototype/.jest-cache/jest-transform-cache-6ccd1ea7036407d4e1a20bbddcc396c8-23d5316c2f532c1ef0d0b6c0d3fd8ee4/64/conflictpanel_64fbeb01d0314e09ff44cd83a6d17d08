91c16a63e537a5a1b7c16cd57f3c346c
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConflictPanel = ConflictPanel;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const button_1 = require("@/components/ui/button");
const badge_1 = require("@/components/ui/badge");
const card_1 = require("@/components/ui/card");
const scroll_area_1 = require("@/components/ui/scroll-area");
const sync_status_display_1 = require("@/components/sync/sync-status-display");
const lucide_react_1 = require("lucide-react");
const use_conflicts_1 = require("@/hooks/use-conflicts");
const utils_1 = require("@/lib/utils");
function ConflictPanel({ isOpen, onClose, className }) {
    const { conflicts, selectedConflict, setSelectedConflict, getStats, getPendingConflicts, getHighPriorityConflicts, resolveConflict, ignoreConflict, batchResolveConflicts, detectConflicts, refreshConflicts, isResolving, isLoading, error, syncStatus } = (0, use_conflicts_1.useConflicts)();
    const [filterType, setFilterType] = (0, react_1.useState)('all');
    const [searchTerm, setSearchTerm] = (0, react_1.useState)('');
    const [expandedConflicts, setExpandedConflicts] = (0, react_1.useState)(new Set());
    const [selectedConflicts, setSelectedConflicts] = (0, react_1.useState)(new Set());
    const [showDetail, setShowDetail] = (0, react_1.useState)(false);
    const [detailConflictId, setDetailConflictId] = (0, react_1.useState)(null);
    const stats = getStats();
    const pendingConflicts = getPendingConflicts();
    const highPriorityConflicts = getHighPriorityConflicts();
    const filteredConflicts = react_1.default.useMemo(() => {
        let filtered = conflicts;
        // 按状态过滤
        switch (filterType) {
            case 'pending':
                filtered = pendingConflicts;
                break;
            case 'high':
                filtered = highPriorityConflicts;
                break;
            case 'resolved':
                filtered = conflicts.filter(c => c.status === 'resolved');
                break;
        }
        // 按搜索词过滤
        if (searchTerm) {
            const term = searchTerm.toLowerCase();
            filtered = filtered.filter(conflict => {
                switch (conflict.entityType) {
                    case 'card':
                        return conflict.localVersion.content.frontContent.title.toLowerCase().includes(term);
                    case 'folder':
                        return conflict.localVersion.name.toLowerCase().includes(term);
                    case 'tag':
                        return conflict.localVersion.name.toLowerCase().includes(term);
                    default:
                        return false;
                }
            });
        }
        return filtered.sort((a, b) => {
            // 高优先级在前
            const severityOrder = { critical: 4, high: 3, medium: 2, low: 1 };
            const severityDiff = severityOrder[b.severity] - severityOrder[a.severity];
            if (severityDiff !== 0)
                return -severityDiff;
            // 时间排序（最新的在前）
            return b.timestamp.getTime() - a.timestamp.getTime();
        });
    }, [conflicts, filterType, searchTerm, pendingConflicts, highPriorityConflicts]);
    const handleToggleExpand = (conflictId) => {
        setExpandedConflicts(prev => {
            const newSet = new Set(prev);
            if (newSet.has(conflictId)) {
                newSet.delete(conflictId);
            }
            else {
                newSet.add(conflictId);
            }
            return newSet;
        });
    };
    const handleToggleSelect = (conflictId) => {
        setSelectedConflicts(prev => {
            const newSet = new Set(prev);
            if (newSet.has(conflictId)) {
                newSet.delete(conflictId);
            }
            else {
                newSet.add(conflictId);
            }
            return newSet;
        });
    };
    const handleViewDetail = (conflictId) => {
        setDetailConflictId(conflictId);
        setShowDetail(true);
    };
    const handleDetailResolve = async (conflictId, resolution) => {
        await resolveConflict(conflictId, resolution);
        setShowDetail(false);
        setDetailConflictId(null);
    };
    const handleDetailClose = () => {
        setShowDetail(false);
        setDetailConflictId(null);
    };
    const handleSelectAll = () => {
        if (selectedConflicts.size === filteredConflicts.length) {
            setSelectedConflicts(new Set());
        }
        else {
            setSelectedConflicts(new Set(filteredConflicts.map(c => c.id)));
        }
    };
    const handleBatchResolve = async (resolutionType) => {
        if (selectedConflicts.size === 0)
            return;
        const conflictIds = Array.from(selectedConflicts);
        await batchResolveConflicts(conflictIds, {
            type: resolutionType,
            reason: `批量选择${resolutionType === 'keep_local' ? '本地' : '远程'}版本`
        });
        setSelectedConflicts(new Set());
    };
    const getSeverityColor = (severity) => {
        switch (severity) {
            case 'critical':
                return 'text-red-600 bg-red-50 border-red-200';
            case 'high':
                return 'text-orange-600 bg-orange-50 border-orange-200';
            case 'medium':
                return 'text-yellow-600 bg-yellow-50 border-yellow-200';
            case 'low':
                return 'text-blue-600 bg-blue-50 border-blue-200';
            default:
                return 'text-gray-600 bg-gray-50 border-gray-200';
        }
    };
    const getStatusIcon = (status) => {
        switch (status) {
            case 'resolved':
                return (0, jsx_runtime_1.jsx)(lucide_react_1.CheckCircle, { className: "h-4 w-4 text-green-500" });
            case 'ignored':
                return (0, jsx_runtime_1.jsx)(lucide_react_1.XCircle, { className: "h-4 w-4 text-gray-500" });
            default:
                return (0, jsx_runtime_1.jsx)(lucide_react_1.Clock, { className: "h-4 w-4 text-yellow-500" });
        }
    };
    if (!isOpen)
        return null;
    return ((0, jsx_runtime_1.jsx)("div", { className: (0, utils_1.cn)("fixed inset-0 z-50 bg-black/50 flex items-center justify-center p-4", className), children: (0, jsx_runtime_1.jsxs)(card_1.Card, { className: "w-full max-w-4xl max-h-[90vh] flex flex-col", children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { className: "pb-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-3", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.AlertTriangle, { className: "h-5 w-5 text-orange-500" }), (0, jsx_runtime_1.jsx)(card_1.CardTitle, { className: "text-xl", children: "\u51B2\u7A81\u7BA1\u7406\u4E2D\u5FC3" }), (0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: "outline", className: "ml-2", children: [stats.pendingConflicts, " \u5F85\u89E3\u51B3"] })] }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "ghost", size: "sm", onClick: onClose, children: "\u00D7" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-4 text-sm text-muted-foreground", children: [(0, jsx_runtime_1.jsxs)("span", { children: ["\u603B\u8BA1: ", stats.totalConflicts] }), (0, jsx_runtime_1.jsxs)("span", { children: ["\u5DF2\u89E3\u51B3: ", stats.resolvedConflicts] }), (0, jsx_runtime_1.jsxs)("span", { children: ["\u5F85\u5904\u7406: ", stats.pendingConflicts] }), (0, jsx_runtime_1.jsxs)("span", { children: ["\u9AD8\u4F18\u5148\u7EA7: ", highPriorityConflicts.length] }), syncStatus && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)("div", { className: `w-2 h-2 rounded-full ${syncStatus.isSyncing ? 'bg-yellow-500 animate-pulse' :
                                                        syncStatus.networkStatus?.online ? 'bg-green-500' : 'bg-red-500'}` }), (0, jsx_runtime_1.jsx)("span", { children: syncStatus.isSyncing ? '同步中...' :
                                                        syncStatus.networkStatus?.online ? '在线' : '离线' })] }), syncStatus.pendingOperations > 0 && ((0, jsx_runtime_1.jsxs)("span", { children: ["\u5F85\u540C\u6B65: ", syncStatus.pendingOperations] }))] }))] }), (0, jsx_runtime_1.jsx)(sync_status_display_1.SyncStatusDisplay, { showDetails: true, compact: false, className: "mb-4" }), error && ((0, jsx_runtime_1.jsx)("div", { className: "p-3 bg-red-50 border border-red-200 rounded-lg", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsx)("span", { className: "text-sm text-red-600", children: error }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "ghost", size: "sm", onClick: () => window.location.reload(), children: "\u91CD\u8BD5" })] }) }))] }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: "flex-1 flex flex-col space-y-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsxs)("div", { className: "relative flex-1", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Search, { className: "absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" }), (0, jsx_runtime_1.jsx)("input", { type: "text", placeholder: "\u641C\u7D22\u51B2\u7A81...", value: searchTerm, onChange: (e) => setSearchTerm(e.target.value), className: "w-full pl-10 pr-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex gap-2", children: [(0, jsx_runtime_1.jsx)(button_1.Button, { variant: filterType === 'all' ? 'default' : 'outline', size: "sm", onClick: () => setFilterType('all'), children: "\u5168\u90E8" }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: filterType === 'pending' ? 'default' : 'outline', size: "sm", onClick: () => setFilterType('pending'), children: "\u5F85\u89E3\u51B3" }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: filterType === 'high' ? 'default' : 'outline', size: "sm", onClick: () => setFilterType('high'), children: "\u9AD8\u4F18\u5148\u7EA7" }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: filterType === 'resolved' ? 'default' : 'outline', size: "sm", onClick: () => setFilterType('resolved'), children: "\u5DF2\u89E3\u51B3" })] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", size: "sm", onClick: refreshConflicts, disabled: isLoading, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.RefreshCw, { className: `h-4 w-4 mr-2 ${isLoading ? 'animate-spin' : ''}` }), "\u5237\u65B0"] })] }), selectedConflicts.size > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between p-3 bg-blue-50 rounded-lg", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsxs)("span", { className: "text-sm font-medium", children: ["\u5DF2\u9009\u62E9 ", selectedConflicts.size, " \u4E2A\u51B2\u7A81"] }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "ghost", size: "sm", onClick: handleSelectAll, children: selectedConflicts.size === filteredConflicts.length ? '取消全选' : '全选' })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex gap-2", children: [(0, jsx_runtime_1.jsx)(button_1.Button, { variant: "outline", size: "sm", onClick: () => handleBatchResolve('keep_local'), disabled: isResolving, children: "\u6279\u91CF\u4FDD\u7559\u672C\u5730" }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "outline", size: "sm", onClick: () => handleBatchResolve('keep_remote'), disabled: isResolving, children: "\u6279\u91CF\u4FDD\u7559\u8FDC\u7A0B" })] })] })), (0, jsx_runtime_1.jsx)(scroll_area_1.ScrollArea, { className: "flex-1", children: (0, jsx_runtime_1.jsx)("div", { className: "space-y-3", children: isLoading ? ((0, jsx_runtime_1.jsxs)("div", { className: "text-center py-8", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.RefreshCw, { className: "h-8 w-8 animate-spin mx-auto mb-4 text-muted-foreground" }), (0, jsx_runtime_1.jsx)("p", { className: "text-muted-foreground", children: "\u52A0\u8F7D\u51B2\u7A81\u4FE1\u606F..." })] })) : filteredConflicts.length === 0 ? ((0, jsx_runtime_1.jsx)("div", { className: "text-center py-8 text-muted-foreground", children: searchTerm ? '没有找到匹配的冲突' : '暂无冲突' })) : (filteredConflicts.map((conflict) => ((0, jsx_runtime_1.jsx)(ConflictItem, { conflict: conflict, isExpanded: expandedConflicts.has(conflict.id), isSelected: selectedConflicts.has(conflict.id), onToggleExpand: () => handleToggleExpand(conflict.id), onToggleSelect: () => handleToggleSelect(conflict.id), onSelect: () => setSelectedConflict(conflict.id), onViewDetail: () => handleViewDetail(conflict.id), onResolve: (resolution) => resolveConflict(conflict.id, resolution), onIgnore: () => ignoreConflict(conflict.id), getSeverityColor: getSeverityColor, getStatusIcon: getStatusIcon, isResolving: isResolving }, conflict.id)))) }) })] })] }) }));
}
function ConflictItem({ conflict, isExpanded, isSelected, onToggleExpand, onToggleSelect, onSelect, onViewDetail, onResolve, onIgnore, getSeverityColor, getStatusIcon, isResolving }) {
    return ((0, jsx_runtime_1.jsx)(card_1.Card, { className: (0, utils_1.cn)("transition-all duration-200 cursor-pointer hover:shadow-md", getSeverityColor(conflict.severity), isSelected && "ring-2 ring-blue-500"), onClick: onSelect, children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: "p-4", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-start justify-between", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-start gap-3 flex-1", children: [(0, jsx_runtime_1.jsx)("input", { type: "checkbox", checked: isSelected, onChange: onToggleSelect, onClick: (e) => e.stopPropagation(), className: "mt-1" }), (0, jsx_runtime_1.jsxs)("div", { className: "flex-1", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2 mb-2", children: [getStatusIcon(conflict.status), (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: "outline", className: "text-xs", children: conflict.severity }), (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: "secondary", className: "text-xs", children: getConflictTypeLabel(conflict.type) }), (0, jsx_runtime_1.jsx)("span", { className: "text-xs text-muted-foreground", children: formatTime(conflict.timestamp) })] }), (0, jsx_runtime_1.jsx)("h4", { className: "font-medium mb-1", children: getConflictTitle(conflict) }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-muted-foreground mb-2", children: getConflictDescription(conflict) }), isExpanded && ((0, jsx_runtime_1.jsxs)("div", { className: "mt-3 pt-3 border-t space-y-2", children: [(0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-2 gap-4 text-sm", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("span", { className: "font-medium", children: "\u6765\u6E90\u8BBE\u5907:" }), (0, jsx_runtime_1.jsx)("span", { className: "ml-2", children: conflict.sourceDevice })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("span", { className: "font-medium", children: "\u51B2\u7A81\u65F6\u95F4:" }), (0, jsx_runtime_1.jsx)("span", { className: "ml-2", children: formatTime(conflict.timestamp) })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex gap-2 pt-2", children: [(0, jsx_runtime_1.jsx)(button_1.Button, { variant: "default", size: "sm", onClick: (e) => {
                                                            e.stopPropagation();
                                                            onViewDetail();
                                                        }, children: "\u67E5\u770B\u8BE6\u60C5" }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "outline", size: "sm", onClick: (e) => {
                                                            e.stopPropagation();
                                                            onResolve({ type: 'keep_local', reason: '保留本地版本' });
                                                        }, disabled: isResolving, children: "\u4FDD\u7559\u672C\u5730" }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "outline", size: "sm", onClick: (e) => {
                                                            e.stopPropagation();
                                                            onResolve({ type: 'keep_remote', reason: '保留远程版本' });
                                                        }, disabled: isResolving, children: "\u4FDD\u7559\u8FDC\u7A0B" }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "ghost", size: "sm", onClick: (e) => {
                                                            e.stopPropagation();
                                                            onIgnore();
                                                        }, children: "\u5FFD\u7565" })] })] }))] })] }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "ghost", size: "sm", onClick: (e) => {
                            e.stopPropagation();
                            onToggleExpand();
                        }, className: "ml-2", children: isExpanded ? (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronDown, { className: "h-4 w-4" }) : (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronRight, { className: "h-4 w-4" }) })] }) }) }));
}
// 辅助函数
function getConflictTypeLabel(type) {
    const labels = {
        'card_content': '卡片内容',
        'card_style': '卡片样式',
        'card_tags': '卡片标签',
        'card_folder': '卡片文件夹',
        'folder_name': '文件夹名称',
        'folder_structure': '文件夹结构',
        'tag_rename': '标签重命名',
        'tag_delete': '标签删除',
        'tag_color': '标签颜色'
    };
    return labels[type] || type;
}
function getConflictTitle(conflict) {
    switch (conflict.entityType) {
        case 'card':
            return conflict.localVersion.content.frontContent.title;
        case 'folder':
            return conflict.localVersion.name;
        case 'tag':
            return conflict.localVersion.name;
        default:
            return '未知冲突';
    }
}
function getConflictDescription(conflict) {
    switch (conflict.type) {
        case 'card_content':
            return '卡片内容在多设备上被同时编辑';
        case 'folder_name':
            return '文件夹名称与远程版本不一致';
        case 'tag_rename':
            return '标签重命名冲突';
        default:
            return '数据版本不一致';
    }
}
function formatTime(date) {
    const now = new Date();
    const diff = now.getTime() - date.getTime();
    const minutes = Math.floor(diff / 60000);
    if (minutes < 1)
        return '刚刚';
    if (minutes < 60)
        return `${minutes}分钟前`;
    if (minutes < 1440)
        return `${Math.floor(minutes / 60)}小时前`;
    return `${Math.floor(minutes / 1440)}天前`;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
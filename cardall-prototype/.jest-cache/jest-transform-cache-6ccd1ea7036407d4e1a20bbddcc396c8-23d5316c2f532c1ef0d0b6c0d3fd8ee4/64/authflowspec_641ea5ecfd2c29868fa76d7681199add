a7450f4af555858f5deed7ffeea36a1e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// 认证流程E2E测试
const test_1 = require("@playwright/test");
test_1.test.describe('认证流程', () => {
    test_1.test.beforeEach(async ({ page }) => {
        // 在每个测试前清理本地存储
        await page.goto('/');
        await page.evaluate(() => {
            localStorage.clear();
            sessionStorage.clear();
        });
    });
    test_1.test.describe('注册流程', () => {
        (0, test_1.test)('应该能够成功注册新用户', async ({ page }) => {
            await page.goto('/auth/register');
            // 填写注册表单
            await page.fill('[data-testid="email-input"]', 'newuser@example.com');
            await page.fill('[data-testid="password-input"]', 'password123');
            await page.fill('[data-testid="confirm-password-input"]', 'password123');
            await page.fill('[data-testid="name-input"]', '新用户');
            // 点击注册按钮
            await page.click('[data-testid="register-button"]');
            // 等待注册成功
            await page.waitForURL('/dashboard');
            // 验证用户已登录
            await (0, test_1.expect)(page.locator('[data-testid="user-menu"]')).toBeVisible();
            await (0, test_1.expect)(page.locator('[data-testid="user-name"]')).toHaveText('新用户');
        });
        (0, test_1.test)('应该验证密码匹配', async ({ page }) => {
            await page.goto('/auth/register');
            // 填写不匹配的密码
            await page.fill('[data-testid="email-input"]', 'test@example.com');
            await page.fill('[data-testid="password-input"]', 'password123');
            await page.fill('[data-testid="confirm-password-input"]', 'differentpassword');
            await page.fill('[data-testid="name-input"]', '测试用户');
            // 点击注册按钮
            await page.click('[data-testid="register-button"]');
            // 应该显示错误消息
            await (0, test_1.expect)(page.locator('[data-testid="password-mismatch-error"]')).toBeVisible();
            await (0, test_1.expect)(page.locator('[data-testid="password-mismatch-error"]')).toHaveText('密码不匹配');
        });
        (0, test_1.test)('应该验证必填字段', async ({ page }) => {
            await page.goto('/auth/register');
            // 尝试提交空表单
            await page.click('[data-testid="register-button"]');
            // 应该显示必填字段错误
            await (0, test_1.expect)(page.locator('[data-testid="email-required-error"]')).toBeVisible();
            await (0, test_1.expect)(page.locator('[data-testid="password-required-error"]')).toBeVisible();
            await (0, test_1.expect)(page.locator('[data-testid="name-required-error"]')).toBeVisible();
        });
        (0, test_1.test)('应该验证邮箱格式', async ({ page }) => {
            await page.goto('/auth/register');
            // 填写无效邮箱
            await page.fill('[data-testid="email-input"]', 'invalid-email');
            await page.fill('[data-testid="password-input"]', 'password123');
            await page.fill('[data-testid="confirm-password-input"]', 'password123');
            await page.fill('[data-testid="name-input"]', '测试用户');
            // 点击注册按钮
            await page.click('[data-testid="register-button"]');
            // 应该显示邮箱格式错误
            await (0, test_1.expect)(page.locator('[data-testid="email-format-error"]')).toBeVisible();
        });
    });
    test_1.test.describe('登录流程', () => {
        (0, test_1.test)('应该能够成功登录', async ({ page }) => {
            await page.goto('/auth/login');
            // 填写登录表单
            await page.fill('[data-testid="email-input"]', 'test@example.com');
            await page.fill('[data-testid="password-input"]', 'password123');
            // 点击登录按钮
            await page.click('[data-testid="login-button"]');
            // 等待登录成功
            await page.waitForURL('/dashboard');
            // 验证用户已登录
            await (0, test_1.expect)(page.locator('[data-testid="user-menu"]')).toBeVisible();
        });
        (0, test_1.test)('应该显示登录错误信息', async ({ page }) => {
            await page.goto('/auth/login');
            // 填写错误的凭据
            await page.fill('[data-testid="email-input"]', 'wrong@example.com');
            await page.fill('[data-testid="password-input"]', 'wrongpassword');
            // 点击登录按钮
            await page.click('[data-testid="login-button"]');
            // 应该显示错误消息
            await (0, test_1.expect)(page.locator('[data-testid="login-error"]')).toBeVisible();
            await (0, test_1.expect)(page.locator('[data-testid="login-error"]')).toHaveText('邮箱或密码错误');
        });
        (0, test_1.test)('应该提供忘记密码功能', async ({ page }) => {
            await page.goto('/auth/login');
            // 点击忘记密码链接
            await page.click('[data-testid="forgot-password-link"]');
            // 应该导航到重置密码页面
            await (0, test_1.expect)(page).toHaveURL('/auth/reset-password');
            await (0, test_1.expect)(page.locator('[data-testid="reset-password-form"]')).toBeVisible();
        });
        (0, test_1.test)('应该支持社交登录', async ({ page }) => {
            await page.goto('/auth/login');
            // 应该显示社交登录按钮
            await (0, test_1.expect)(page.locator('[data-testid="google-login-button"]')).toBeVisible();
            await (0, test_1.expect)(page.locator('[data-testid="github-login-button"]')).toBeVisible();
        });
    });
    test_1.test.describe('密码重置流程', () => {
        (0, test_1.test)('应该能够请求密码重置', async ({ page }) => {
            await page.goto('/auth/reset-password');
            // 填写邮箱
            await page.fill('[data-testid="email-input"]', 'test@example.com');
            // 点击发送重置邮件按钮
            await page.click('[data-testid="send-reset-button"]');
            // 应该显示成功消息
            await (0, test_1.expect)(page.locator('[data-testid="reset-success-message"]')).toBeVisible();
            await (0, test_1.expect)(page.locator('[data-testid="reset-success-message"]')).toHaveText('重置邮件已发送');
        });
        (0, test_1.test)('应该验证邮箱格式', async ({ page }) => {
            await page.goto('/auth/reset-password');
            // 填写无效邮箱
            await page.fill('[data-testid="email-input"]', 'invalid-email');
            // 点击发送重置邮件按钮
            await page.click('[data-testid="send-reset-button"]');
            // 应该显示邮箱格式错误
            await (0, test_1.expect)(page.locator('[data-testid="email-format-error"]')).toBeVisible();
        });
    });
    test_1.test.describe('会话管理', () => {
        (0, test_1.test)('应该保持登录状态', async ({ page }) => {
            // 先登录
            await page.goto('/auth/login');
            await page.fill('[data-testid="email-input"]', 'test@example.com');
            await page.fill('[data-testid="password-input"]', 'password123');
            await page.click('[data-testid="login-button"]');
            // 等待登录成功
            await page.waitForURL('/dashboard');
            // 刷新页面
            await page.reload();
            // 应该仍然保持登录状态
            await (0, test_1.expect)(page.locator('[data-testid="user-menu"]')).toBeVisible();
        });
        (0, test_1.test)('应该能够登出', async ({ page }) => {
            // 先登录
            await page.goto('/auth/login');
            await page.fill('[data-testid="email-input"]', 'test@example.com');
            await page.fill('[data-testid="password-input"]', 'password123');
            await page.click('[data-testid="login-button"]');
            // 等待登录成功
            await page.waitForURL('/dashboard');
            // 点击用户菜单
            await page.click('[data-testid="user-menu"]');
            // 点击登出按钮
            await page.click('[data-testid="logout-button"]');
            // 应该重定向到登录页面
            await (0, test_1.expect)(page).toHaveURL('/auth/login');
            // 用户菜单应该不可见
            await (0, test_1.expect)(page.locator('[data-testid="user-menu"]')).not.toBeVisible();
        });
        (0, test_1.test)('应该处理会话过期', async ({ page }) => {
            // 模拟会话过期
            await page.goto('/dashboard');
            // 如果会话过期，应该重定向到登录页面
            // 这里我们需要模拟会话过期的情况
            await page.evaluate(() => {
                localStorage.removeItem('supabase.auth.token');
            });
            await page.reload();
            // 应该重定向到登录页面
            await (0, test_1.expect)(page).toHaveURL('/auth/login');
        });
    });
    test_1.test.describe('路由保护', () => {
        (0, test_1.test)('应该保护需要认证的页面', async ({ page }) => {
            // 尝试访问需要认证的页面
            await page.goto('/dashboard');
            // 应该重定向到登录页面
            await (0, test_1.expect)(page).toHaveURL('/auth/login');
            // 登录后应该重定向回原始页面
            await page.fill('[data-testid="email-input"]', 'test@example.com');
            await page.fill('[data-testid="password-input"]', 'password123');
            await page.click('[data-testid="login-button"]');
            // 应该重定向到dashboard
            await (0, test_1.expect)(page).toHaveURL('/dashboard');
        });
        (0, test_1.test)('应该允许访问公开页面', async ({ page }) => {
            // 应该能够访问登录页面
            await page.goto('/auth/login');
            await (0, test_1.expect)(page).toHaveURL('/auth/login');
            // 应该能够访问注册页面
            await page.goto('/auth/register');
            await (0, test_1.expect)(page).toHaveURL('/auth/register');
            // 应该能够访问重置密码页面
            await page.goto('/auth/reset-password');
            await (0, test_1.expect)(page).toHaveURL('/auth/reset-password');
        });
    });
    test_1.test.describe('用户资料管理', () => {
        test_1.test.beforeEach(async ({ page }) => {
            // 登录用户
            await page.goto('/auth/login');
            await page.fill('[data-testid="email-input"]', 'test@example.com');
            await page.fill('[data-testid="password-input"]', 'password123');
            await page.click('[data-testid="login-button]');
            await page.waitForURL('/dashboard');
        });
        (0, test_1.test)('应该能够更新用户资料', async ({ page }) => {
            // 导航到用户资料页面
            await page.click('[data-testid="user-menu"]');
            await page.click('[data-testid="profile-link"]');
            // 等待页面加载
            await (0, test_1.expect)(page.locator('[data-testid="profile-form"]')).toBeVisible();
            // 更新用户信息
            await page.fill('[data-testid="name-input"]', '更新后的姓名');
            await page.fill('[data-testid="bio-input"]', '这是我的个人简介');
            // 保存更改
            await page.click('[data-testid="save-profile-button"]');
            // 应该显示成功消息
            await (0, test_1.expect)(page.locator('[data-testid="save-success-message"]')).toBeVisible();
            // 验证更改已保存
            await (0, test_1.expect)(page.locator('[data-testid="name-input"]')).toHaveValue('更新后的姓名');
            await (0, test_1.expect)(page.locator('[data-testid="bio-input"]')).toHaveValue('这是我的个人简介');
        });
        (0, test_1.test)('应该能够更改密码', async ({ page }) => {
            // 导航到用户设置页面
            await page.click('[data-testid="user-menu"]');
            await page.click('[data-testid="settings-link"]');
            // 等待页面加载
            await (0, test_1.expect)(page.locator('[data-testid="settings-form"]')).toBeVisible();
            // 更改密码
            await page.fill('[data-testid="current-password-input"]', 'password123');
            await page.fill('[data-testid="new-password-input"]', 'newpassword123');
            await page.fill('[data-testid="confirm-new-password-input"]', 'newpassword123');
            // 保存更改
            await page.click('[data-testid="change-password-button"]');
            // 应该显示成功消息
            await (0, test_1.expect)(page.locator('[data-testid="password-change-success"]')).toBeVisible();
        });
        (0, test_1.test)('应该验证密码更改', async ({ page }) => {
            // 导航到用户设置页面
            await page.click('[data-testid="user-menu"]');
            await page.click('[data-testid="settings-link"]');
            // 尝试使用不匹配的新密码
            await page.fill('[data-testid="current-password-input"]', 'password123');
            await page.fill('[data-testid="new-password-input"]', 'newpassword123');
            await page.fill('[data-testid="confirm-new-password-input"]', 'differentpassword');
            // 保存更改
            await page.click('[data-testid="change-password-button"]');
            // 应该显示密码不匹配错误
            await (0, test_1.expect)(page.locator('[data-testid="password-mismatch-error"]')).toBeVisible();
        });
    });
    test_1.test.describe('响应式设计', () => {
        test_1.test.describe('移动设备', () => {
            test_1.test.beforeEach(async ({ page }) => {
                // 设置移动设备视口
                await page.setViewportSize({ width: 375, height: 667 });
            });
            (0, test_1.test)('应该在移动设备上正确显示认证表单', async ({ page }) => {
                await page.goto('/auth/login');
                // 表单应该适合移动屏幕
                await (0, test_1.expect)(page.locator('[data-testid="login-form"]')).toBeVisible();
                // 输入字段应该可以点击
                await (0, test_1.expect)(page.locator('[data-testid="email-input"]')).toBeVisible();
                await (0, test_1.expect)(page.locator('[data-testid="password-input"]')).toBeVisible();
                await (0, test_1.expect)(page.locator('[data-testid="login-button"]')).toBeVisible();
            });
            (0, test_1.test)('应该在移动设备上正确显示错误消息', async ({ page }) => {
                await page.goto('/auth/login');
                // 尝试使用错误的凭据登录
                await page.fill('[data-testid="email-input"]', 'wrong@example.com');
                await page.fill('[data-testid="password-input"]', 'wrongpassword');
                await page.click('[data-testid="login-button"]');
                // 错误消息应该在移动设备上可见
                await (0, test_1.expect)(page.locator('[data-testid="login-error"]')).toBeVisible();
            });
        });
        test_1.test.describe('平板设备', () => {
            test_1.test.beforeEach(async ({ page }) => {
                // 设置平板设备视口
                await page.setViewportSize({ width: 768, height: 1024 });
            });
            (0, test_1.test)('应该在中等屏幕上正确显示认证表单', async ({ page }) => {
                await page.goto('/auth/login');
                // 表单应该居中显示
                await (0, test_1.expect)(page.locator('[data-testid="login-form"]')).toBeVisible();
                // 社交登录按钮应该水平排列
                const socialButtons = page.locator('[data-testid^="social-login-button"]');
                await (0, test_1.expect)(socialButtons.first()).toBeVisible();
                await (0, test_1.expect)(socialButtons.last()).toBeVisible();
            });
        });
    });
    test_1.test.describe('可访问性测试', () => {
        (0, test_1.test)('应该具有正确的ARIA标签', async ({ page }) => {
            await page.goto('/auth/login');
            // 表单字段应该有正确的标签
            await (0, test_1.expect)(page.locator('[data-testid="email-input"]')).toHaveAttribute('aria-label', '邮箱地址');
            await (0, test_1.expect)(page.locator('[data-testid="password-input"]')).toHaveAttribute('aria-label', '密码');
            // 错误消息应该在ARIA live区域
            await (0, test_1.expect)(page.locator('[data-testid="login-error"]')).toHaveAttribute('role', 'alert');
        });
        (0, test_1.test)('应该支持键盘导航', async ({ page }) => {
            await page.goto('/auth/login');
            // 使用Tab键导航
            await page.press('[data-testid="email-input"]', 'Tab');
            await (0, test_1.expect)(page.locator('[data-testid="password-input"]')).toBeFocused();
            await page.press('[data-testid="password-input"]', 'Tab');
            await (0, test_1.expect)(page.locator('[data-testid="login-button"]')).toBeFocused();
            // 使用Enter键提交表单
            await page.fill('[data-testid="email-input"]', 'test@example.com');
            await page.fill('[data-testid="password-input"]', 'password123');
            await page.press('[data-testid="login-button"]', 'Enter');
            // 应该提交表单
            await (0, test_1.expect)(page).toHaveURL('/dashboard');
        });
        (0, test_1.test)('应该具有适当的颜色对比度', async ({ page }) => {
            await page.goto('/auth/login');
            // 检查文本颜色对比度（简化测试）
            const emailInput = page.locator('[data-testid="email-input"]');
            const backgroundColor = await emailInput.evaluate((el) => {
                return window.getComputedStyle(el).backgroundColor;
            });
            // 背景颜色应该是白色或浅色
            (0, test_1.expect)(backgroundColor).toMatch(/rgb\(255,\s*255,\s*255\)|rgba\(255,\s*255,\s*255/);
        });
    });
    test_1.test.describe('性能测试', () => {
        (0, test_1.test)('应该快速加载认证页面', async ({ page }) => {
            const startTime = Date.now();
            await page.goto('/auth/login');
            const loadTime = Date.now() - startTime;
            // 页面应该在2秒内加载完成
            (0, test_1.expect)(loadTime).toBeLessThan(2000);
            // 关键元素应该立即可见
            await (0, test_1.expect)(page.locator('[data-testid="login-form"]')).toBeVisible({ timeout: 1000 });
        });
        (0, test_1.test)('应该快速响应表单提交', async ({ page }) => {
            await page.goto('/auth/login');
            // 填写表单
            await page.fill('[data-testid="email-input"]', 'test@example.com');
            await page.fill('[data-testid="password-input"]', 'password123');
            // 测量提交响应时间
            const startTime = Date.now();
            await page.click('[data-testid="login-button"]');
            const responseTime = Date.now() - startTime;
            // 响应时间应该在3秒内
            (0, test_1.expect)(responseTime).toBeLessThan(3000);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXHRlc3RzXFxlMmVcXGF1dGgtZmxvdy5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsWUFBWTtBQUNaLDJDQUErQztBQUUvQyxXQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7SUFDekIsV0FBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFO1FBQ2pDLGVBQWU7UUFDZixNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDcEIsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRTtZQUN2QixZQUFZLENBQUMsS0FBSyxFQUFFLENBQUE7WUFDcEIsY0FBYyxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ3hCLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7SUFFRixXQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7UUFDekIsSUFBQSxXQUFJLEVBQUMsYUFBYSxFQUFFLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUU7WUFDckMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUE7WUFFakMsU0FBUztZQUNULE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyw2QkFBNkIsRUFBRSxxQkFBcUIsQ0FBQyxDQUFBO1lBQ3JFLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxhQUFhLENBQUMsQ0FBQTtZQUNoRSxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsd0NBQXdDLEVBQUUsYUFBYSxDQUFDLENBQUE7WUFDeEUsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLDRCQUE0QixFQUFFLEtBQUssQ0FBQyxDQUFBO1lBRXBELFNBQVM7WUFDVCxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsaUNBQWlDLENBQUMsQ0FBQTtZQUVuRCxT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YSxDQUFDLENBQUE7WUFFOUIsT0FBTztZQUNQLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyw2QkFBNkIsRUFBRSxrQkFBa0IsQ0FBQyxDQUFBO1lBQ2xFLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxhQUFhLENBQUMsQ0FBQTtZQUVoRSxXQUFXO1lBQ1gsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFBO1lBQzVCLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxDQUFBO1lBQ2hELE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxTQUFTLENBQUE7WUFFM0MsYUFBYTtZQUNiLElBQUEsYUFBTSxFQUFDLFlBQVksQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUN6QyxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXHRlc3RzXFxlMmVcXGF1dGgtZmxvdy5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIOiupOivgea1geeoi0UyRea1i+ivlVxuaW1wb3J0IHsgdGVzdCwgZXhwZWN0IH0gZnJvbSAnQHBsYXl3cmlnaHQvdGVzdCdcblxudGVzdC5kZXNjcmliZSgn6K6k6K+B5rWB56iLJywgKCkgPT4ge1xuICB0ZXN0LmJlZm9yZUVhY2goYXN5bmMgKHsgcGFnZSB9KSA9PiB7XG4gICAgLy8g5Zyo5q+P5Liq5rWL6K+V5YmN5riF55CG5pys5Zyw5a2Y5YKoXG4gICAgYXdhaXQgcGFnZS5nb3RvKCcvJylcbiAgICBhd2FpdCBwYWdlLmV2YWx1YXRlKCgpID0+IHtcbiAgICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpXG4gICAgICBzZXNzaW9uU3RvcmFnZS5jbGVhcigpXG4gICAgfSlcbiAgfSlcblxuICB0ZXN0LmRlc2NyaWJlKCfms6jlhozmtYHnqIsnLCAoKSA9PiB7XG4gICAgdGVzdCgn5bqU6K+l6IO95aSf5oiQ5Yqf5rOo5YaM5paw55So5oi3JywgYXN5bmMgKHsgcGFnZSB9KSA9PiB7XG4gICAgICBhd2FpdCBwYWdlLmdvdG8oJy9hdXRoL3JlZ2lzdGVyJylcblxuICAgICAgLy8g5aGr5YaZ5rOo5YaM6KGo5Y2VXG4gICAgICBhd2FpdCBwYWdlLmZpbGwoJ1tkYXRhLXRlc3RpZD1cImVtYWlsLWlucHV0XCJdJywgJ25ld3VzZXJAZXhhbXBsZS5jb20nKVxuICAgICAgYXdhaXQgcGFnZS5maWxsKCdbZGF0YS10ZXN0aWQ9XCJwYXNzd29yZC1pbnB1dFwiXScsICdwYXNzd29yZDEyMycpXG4gICAgICBhd2FpdCBwYWdlLmZpbGwoJ1tkYXRhLXRlc3RpZD1cImNvbmZpcm0tcGFzc3dvcmQtaW5wdXRcIl0nLCAncGFzc3dvcmQxMjMnKVxuICAgICAgYXdhaXQgcGFnZS5maWxsKCdbZGF0YS10ZXN0aWQ9XCJuYW1lLWlucHV0XCJdJywgJ+aWsOeUqOaItycpXG5cbiAgICAgIC8vIOeCueWHu+azqOWGjOaMiemSrlxuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwicmVnaXN0ZXItYnV0dG9uXCJdJylcblxuICAgICAgLy8g562J5b6F5rOo5YaM5oiQ5YqfXG4gICAgICBhd2FpdCBwYWdlLndhaXRGb3JVUkwoJy9kYXNoYm9hcmQnKVxuICAgICAgXG4gICAgICAvLyDpqozor4HnlKjmiLflt7LnmbvlvZVcbiAgICAgIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoJ1tkYXRhLXRlc3RpZD1cInVzZXItbWVudVwiXScpKS50b0JlVmlzaWJsZSgpXG4gICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWQ9XCJ1c2VyLW5hbWVcIl0nKSkudG9IYXZlVGV4dCgn5paw55So5oi3JylcbiAgICB9KVxuXG4gICAgdGVzdCgn5bqU6K+l6aqM6K+B5a+G56CB5Yy56YWNJywgYXN5bmMgKHsgcGFnZSB9KSA9PiB7XG4gICAgICBhd2FpdCBwYWdlLmdvdG8oJy9hdXRoL3JlZ2lzdGVyJylcblxuICAgICAgLy8g5aGr5YaZ5LiN5Yy56YWN55qE5a+G56CBXG4gICAgICBhd2FpdCBwYWdlLmZpbGwoJ1tkYXRhLXRlc3RpZD1cImVtYWlsLWlucHV0XCJdJywgJ3Rlc3RAZXhhbXBsZS5jb20nKVxuICAgICAgYXdhaXQgcGFnZS5maWxsKCdbZGF0YS10ZXN0aWQ9XCJwYXNzd29yZC1pbnB1dFwiXScsICdwYXNzd29yZDEyMycpXG4gICAgICBhd2FpdCBwYWdlLmZpbGwoJ1tkYXRhLXRlc3RpZD1cImNvbmZpcm0tcGFzc3dvcmQtaW5wdXRcIl0nLCAnZGlmZmVyZW50cGFzc3dvcmQnKVxuICAgICAgYXdhaXQgcGFnZS5maWxsKCdbZGF0YS10ZXN0aWQ9XCJuYW1lLWlucHV0XCJdJywgJ+a1i+ivleeUqOaItycpXG5cbiAgICAgIC8vIOeCueWHu+azqOWGjOaMiemSrlxuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwicmVnaXN0ZXItYnV0dG9uXCJdJylcblxuICAgICAgLy8g5bqU6K+l5pi+56S66ZSZ6K+v5raI5oGvXG4gICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWQ9XCJwYXNzd29yZC1taXNtYXRjaC1lcnJvclwiXScpKS50b0JlVmlzaWJsZSgpXG4gICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWQ9XCJwYXNzd29yZC1taXNtYXRjaC1lcnJvclwiXScpKS50b0hhdmVUZXh0KCflr4bnoIHkuI3ljLnphY0nKVxuICAgIH0pXG5cbiAgICB0ZXN0KCflupTor6Xpqozor4Hlv4XloavlrZfmrrUnLCBhc3luYyAoeyBwYWdlIH0pID0+IHtcbiAgICAgIGF3YWl0IHBhZ2UuZ290bygnL2F1dGgvcmVnaXN0ZXInKVxuXG4gICAgICAvLyDlsJ3or5Xmj5DkuqTnqbrooajljZVcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cInJlZ2lzdGVyLWJ1dHRvblwiXScpXG5cbiAgICAgIC8vIOW6lOivpeaYvuekuuW/heWhq+Wtl+autemUmeivr1xuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwiZW1haWwtcmVxdWlyZWQtZXJyb3JcIl0nKSkudG9CZVZpc2libGUoKVxuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwicGFzc3dvcmQtcmVxdWlyZWQtZXJyb3JcIl0nKSkudG9CZVZpc2libGUoKVxuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwibmFtZS1yZXF1aXJlZC1lcnJvclwiXScpKS50b0JlVmlzaWJsZSgpXG4gICAgfSlcblxuICAgIHRlc3QoJ+W6lOivpemqjOivgemCrueuseagvOW8jycsIGFzeW5jICh7IHBhZ2UgfSkgPT4ge1xuICAgICAgYXdhaXQgcGFnZS5nb3RvKCcvYXV0aC9yZWdpc3RlcicpXG5cbiAgICAgIC8vIOWhq+WGmeaXoOaViOmCrueusVxuICAgICAgYXdhaXQgcGFnZS5maWxsKCdbZGF0YS10ZXN0aWQ9XCJlbWFpbC1pbnB1dFwiXScsICdpbnZhbGlkLWVtYWlsJylcbiAgICAgIGF3YWl0IHBhZ2UuZmlsbCgnW2RhdGEtdGVzdGlkPVwicGFzc3dvcmQtaW5wdXRcIl0nLCAncGFzc3dvcmQxMjMnKVxuICAgICAgYXdhaXQgcGFnZS5maWxsKCdbZGF0YS10ZXN0aWQ9XCJjb25maXJtLXBhc3N3b3JkLWlucHV0XCJdJywgJ3Bhc3N3b3JkMTIzJylcbiAgICAgIGF3YWl0IHBhZ2UuZmlsbCgnW2RhdGEtdGVzdGlkPVwibmFtZS1pbnB1dFwiXScsICfmtYvor5XnlKjmiLcnKVxuXG4gICAgICAvLyDngrnlh7vms6jlhozmjInpkq5cbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cInJlZ2lzdGVyLWJ1dHRvblwiXScpXG5cbiAgICAgIC8vIOW6lOivpeaYvuekuumCrueuseagvOW8j+mUmeivr1xuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwiZW1haWwtZm9ybWF0LWVycm9yXCJdJykpLnRvQmVWaXNpYmxlKClcbiAgICB9KVxuICB9KVxuXG4gIHRlc3QuZGVzY3JpYmUoJ+eZu+W9lea1geeoiycsICgpID0+IHtcbiAgICB0ZXN0KCflupTor6Xog73lpJ/miJDlip/nmbvlvZUnLCBhc3luYyAoeyBwYWdlIH0pID0+IHtcbiAgICAgIGF3YWl0IHBhZ2UuZ290bygnL2F1dGgvbG9naW4nKVxuXG4gICAgICAvLyDloavlhpnnmbvlvZXooajljZVcbiAgICAgIGF3YWl0IHBhZ2UuZmlsbCgnW2RhdGEtdGVzdGlkPVwiZW1haWwtaW5wdXRcIl0nLCAndGVzdEBleGFtcGxlLmNvbScpXG4gICAgICBhd2FpdCBwYWdlLmZpbGwoJ1tkYXRhLXRlc3RpZD1cInBhc3N3b3JkLWlucHV0XCJdJywgJ3Bhc3N3b3JkMTIzJylcblxuICAgICAgLy8g54K55Ye755m75b2V5oyJ6ZKuXG4gICAgICBhd2FpdCBwYWdlLmNsaWNrKCdbZGF0YS10ZXN0aWQ9XCJsb2dpbi1idXR0b25cIl0nKVxuXG4gICAgICAvLyDnrYnlvoXnmbvlvZXmiJDlip9cbiAgICAgIGF3YWl0IHBhZ2Uud2FpdEZvclVSTCgnL2Rhc2hib2FyZCcpXG4gICAgICBcbiAgICAgIC8vIOmqjOivgeeUqOaIt+W3sueZu+W9lVxuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwidXNlci1tZW51XCJdJykpLnRvQmVWaXNpYmxlKClcbiAgICB9KVxuXG4gICAgdGVzdCgn5bqU6K+l5pi+56S655m75b2V6ZSZ6K+v5L+h5oGvJywgYXN5bmMgKHsgcGFnZSB9KSA9PiB7XG4gICAgICBhd2FpdCBwYWdlLmdvdG8oJy9hdXRoL2xvZ2luJylcblxuICAgICAgLy8g5aGr5YaZ6ZSZ6K+v55qE5Yet5o2uXG4gICAgICBhd2FpdCBwYWdlLmZpbGwoJ1tkYXRhLXRlc3RpZD1cImVtYWlsLWlucHV0XCJdJywgJ3dyb25nQGV4YW1wbGUuY29tJylcbiAgICAgIGF3YWl0IHBhZ2UuZmlsbCgnW2RhdGEtdGVzdGlkPVwicGFzc3dvcmQtaW5wdXRcIl0nLCAnd3JvbmdwYXNzd29yZCcpXG5cbiAgICAgIC8vIOeCueWHu+eZu+W9leaMiemSrlxuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwibG9naW4tYnV0dG9uXCJdJylcblxuICAgICAgLy8g5bqU6K+l5pi+56S66ZSZ6K+v5raI5oGvXG4gICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWQ9XCJsb2dpbi1lcnJvclwiXScpKS50b0JlVmlzaWJsZSgpXG4gICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWQ9XCJsb2dpbi1lcnJvclwiXScpKS50b0hhdmVUZXh0KCfpgq7nrrHmiJblr4bnoIHplJnor68nKVxuICAgIH0pXG5cbiAgICB0ZXN0KCflupTor6Xmj5Dkvpvlv5jorrDlr4bnoIHlip/og70nLCBhc3luYyAoeyBwYWdlIH0pID0+IHtcbiAgICAgIGF3YWl0IHBhZ2UuZ290bygnL2F1dGgvbG9naW4nKVxuXG4gICAgICAvLyDngrnlh7vlv5jorrDlr4bnoIHpk77mjqVcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cImZvcmdvdC1wYXNzd29yZC1saW5rXCJdJylcblxuICAgICAgLy8g5bqU6K+l5a+86Iiq5Yiw6YeN572u5a+G56CB6aG16Z2iXG4gICAgICBhd2FpdCBleHBlY3QocGFnZSkudG9IYXZlVVJMKCcvYXV0aC9yZXNldC1wYXNzd29yZCcpXG4gICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWQ9XCJyZXNldC1wYXNzd29yZC1mb3JtXCJdJykpLnRvQmVWaXNpYmxlKClcbiAgICB9KVxuXG4gICAgdGVzdCgn5bqU6K+l5pSv5oyB56S+5Lqk55m75b2VJywgYXN5bmMgKHsgcGFnZSB9KSA9PiB7XG4gICAgICBhd2FpdCBwYWdlLmdvdG8oJy9hdXRoL2xvZ2luJylcblxuICAgICAgLy8g5bqU6K+l5pi+56S656S+5Lqk55m75b2V5oyJ6ZKuXG4gICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWQ9XCJnb29nbGUtbG9naW4tYnV0dG9uXCJdJykpLnRvQmVWaXNpYmxlKClcbiAgICAgIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoJ1tkYXRhLXRlc3RpZD1cImdpdGh1Yi1sb2dpbi1idXR0b25cIl0nKSkudG9CZVZpc2libGUoKVxuICAgIH0pXG4gIH0pXG5cbiAgdGVzdC5kZXNjcmliZSgn5a+G56CB6YeN572u5rWB56iLJywgKCkgPT4ge1xuICAgIHRlc3QoJ+W6lOivpeiDveWkn+ivt+axguWvhueggemHjee9ricsIGFzeW5jICh7IHBhZ2UgfSkgPT4ge1xuICAgICAgYXdhaXQgcGFnZS5nb3RvKCcvYXV0aC9yZXNldC1wYXNzd29yZCcpXG5cbiAgICAgIC8vIOWhq+WGmemCrueusVxuICAgICAgYXdhaXQgcGFnZS5maWxsKCdbZGF0YS10ZXN0aWQ9XCJlbWFpbC1pbnB1dFwiXScsICd0ZXN0QGV4YW1wbGUuY29tJylcblxuICAgICAgLy8g54K55Ye75Y+R6YCB6YeN572u6YKu5Lu25oyJ6ZKuXG4gICAgICBhd2FpdCBwYWdlLmNsaWNrKCdbZGF0YS10ZXN0aWQ9XCJzZW5kLXJlc2V0LWJ1dHRvblwiXScpXG5cbiAgICAgIC8vIOW6lOivpeaYvuekuuaIkOWKn+a2iOaBr1xuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwicmVzZXQtc3VjY2Vzcy1tZXNzYWdlXCJdJykpLnRvQmVWaXNpYmxlKClcbiAgICAgIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoJ1tkYXRhLXRlc3RpZD1cInJlc2V0LXN1Y2Nlc3MtbWVzc2FnZVwiXScpKS50b0hhdmVUZXh0KCfph43nva7pgq7ku7blt7Llj5HpgIEnKVxuICAgIH0pXG5cbiAgICB0ZXN0KCflupTor6Xpqozor4Hpgq7nrrHmoLzlvI8nLCBhc3luYyAoeyBwYWdlIH0pID0+IHtcbiAgICAgIGF3YWl0IHBhZ2UuZ290bygnL2F1dGgvcmVzZXQtcGFzc3dvcmQnKVxuXG4gICAgICAvLyDloavlhpnml6DmlYjpgq7nrrFcbiAgICAgIGF3YWl0IHBhZ2UuZmlsbCgnW2RhdGEtdGVzdGlkPVwiZW1haWwtaW5wdXRcIl0nLCAnaW52YWxpZC1lbWFpbCcpXG5cbiAgICAgIC8vIOeCueWHu+WPkemAgemHjee9rumCruS7tuaMiemSrlxuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwic2VuZC1yZXNldC1idXR0b25cIl0nKVxuXG4gICAgICAvLyDlupTor6XmmL7npLrpgq7nrrHmoLzlvI/plJnor69cbiAgICAgIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoJ1tkYXRhLXRlc3RpZD1cImVtYWlsLWZvcm1hdC1lcnJvclwiXScpKS50b0JlVmlzaWJsZSgpXG4gICAgfSlcbiAgfSlcblxuICB0ZXN0LmRlc2NyaWJlKCfkvJror53nrqHnkIYnLCAoKSA9PiB7XG4gICAgdGVzdCgn5bqU6K+l5L+d5oyB55m75b2V54q25oCBJywgYXN5bmMgKHsgcGFnZSB9KSA9PiB7XG4gICAgICAvLyDlhYjnmbvlvZVcbiAgICAgIGF3YWl0IHBhZ2UuZ290bygnL2F1dGgvbG9naW4nKVxuICAgICAgYXdhaXQgcGFnZS5maWxsKCdbZGF0YS10ZXN0aWQ9XCJlbWFpbC1pbnB1dFwiXScsICd0ZXN0QGV4YW1wbGUuY29tJylcbiAgICAgIGF3YWl0IHBhZ2UuZmlsbCgnW2RhdGEtdGVzdGlkPVwicGFzc3dvcmQtaW5wdXRcIl0nLCAncGFzc3dvcmQxMjMnKVxuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwibG9naW4tYnV0dG9uXCJdJylcblxuICAgICAgLy8g562J5b6F55m75b2V5oiQ5YqfXG4gICAgICBhd2FpdCBwYWdlLndhaXRGb3JVUkwoJy9kYXNoYm9hcmQnKVxuXG4gICAgICAvLyDliLfmlrDpobXpnaJcbiAgICAgIGF3YWl0IHBhZ2UucmVsb2FkKClcblxuICAgICAgLy8g5bqU6K+l5LuN54S25L+d5oyB55m75b2V54q25oCBXG4gICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWQ9XCJ1c2VyLW1lbnVcIl0nKSkudG9CZVZpc2libGUoKVxuICAgIH0pXG5cbiAgICB0ZXN0KCflupTor6Xog73lpJ/nmbvlh7onLCBhc3luYyAoeyBwYWdlIH0pID0+IHtcbiAgICAgIC8vIOWFiOeZu+W9lVxuICAgICAgYXdhaXQgcGFnZS5nb3RvKCcvYXV0aC9sb2dpbicpXG4gICAgICBhd2FpdCBwYWdlLmZpbGwoJ1tkYXRhLXRlc3RpZD1cImVtYWlsLWlucHV0XCJdJywgJ3Rlc3RAZXhhbXBsZS5jb20nKVxuICAgICAgYXdhaXQgcGFnZS5maWxsKCdbZGF0YS10ZXN0aWQ9XCJwYXNzd29yZC1pbnB1dFwiXScsICdwYXNzd29yZDEyMycpXG4gICAgICBhd2FpdCBwYWdlLmNsaWNrKCdbZGF0YS10ZXN0aWQ9XCJsb2dpbi1idXR0b25cIl0nKVxuXG4gICAgICAvLyDnrYnlvoXnmbvlvZXmiJDlip9cbiAgICAgIGF3YWl0IHBhZ2Uud2FpdEZvclVSTCgnL2Rhc2hib2FyZCcpXG5cbiAgICAgIC8vIOeCueWHu+eUqOaIt+iPnOWNlVxuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwidXNlci1tZW51XCJdJylcblxuICAgICAgLy8g54K55Ye755m75Ye65oyJ6ZKuXG4gICAgICBhd2FpdCBwYWdlLmNsaWNrKCdbZGF0YS10ZXN0aWQ9XCJsb2dvdXQtYnV0dG9uXCJdJylcblxuICAgICAgLy8g5bqU6K+l6YeN5a6a5ZCR5Yiw55m75b2V6aG16Z2iXG4gICAgICBhd2FpdCBleHBlY3QocGFnZSkudG9IYXZlVVJMKCcvYXV0aC9sb2dpbicpXG4gICAgICBcbiAgICAgIC8vIOeUqOaIt+iPnOWNleW6lOivpeS4jeWPr+ingVxuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwidXNlci1tZW51XCJdJykpLm5vdC50b0JlVmlzaWJsZSgpXG4gICAgfSlcblxuICAgIHRlc3QoJ+W6lOivpeWkhOeQhuS8muivnei/h+acnycsIGFzeW5jICh7IHBhZ2UgfSkgPT4ge1xuICAgICAgLy8g5qih5ouf5Lya6K+d6L+H5pyfXG4gICAgICBhd2FpdCBwYWdlLmdvdG8oJy9kYXNoYm9hcmQnKVxuXG4gICAgICAvLyDlpoLmnpzkvJror53ov4fmnJ/vvIzlupTor6Xph43lrprlkJHliLDnmbvlvZXpobXpnaJcbiAgICAgIC8vIOi/memHjOaIkeS7rOmcgOimgeaooeaLn+S8muivnei/h+acn+eahOaDheWGtVxuICAgICAgYXdhaXQgcGFnZS5ldmFsdWF0ZSgoKSA9PiB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdzdXBhYmFzZS5hdXRoLnRva2VuJylcbiAgICAgIH0pXG5cbiAgICAgIGF3YWl0IHBhZ2UucmVsb2FkKClcblxuICAgICAgLy8g5bqU6K+l6YeN5a6a5ZCR5Yiw55m75b2V6aG16Z2iXG4gICAgICBhd2FpdCBleHBlY3QocGFnZSkudG9IYXZlVVJMKCcvYXV0aC9sb2dpbicpXG4gICAgfSlcbiAgfSlcblxuICB0ZXN0LmRlc2NyaWJlKCfot6/nlLHkv53miqQnLCAoKSA9PiB7XG4gICAgdGVzdCgn5bqU6K+l5L+d5oqk6ZyA6KaB6K6k6K+B55qE6aG16Z2iJywgYXN5bmMgKHsgcGFnZSB9KSA9PiB7XG4gICAgICAvLyDlsJ3or5Xorr/pl67pnIDopoHorqTor4HnmoTpobXpnaJcbiAgICAgIGF3YWl0IHBhZ2UuZ290bygnL2Rhc2hib2FyZCcpXG5cbiAgICAgIC8vIOW6lOivpemHjeWumuWQkeWIsOeZu+W9lemhtemdolxuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UpLnRvSGF2ZVVSTCgnL2F1dGgvbG9naW4nKVxuICAgICAgXG4gICAgICAvLyDnmbvlvZXlkI7lupTor6Xph43lrprlkJHlm57ljp/lp4vpobXpnaJcbiAgICAgIGF3YWl0IHBhZ2UuZmlsbCgnW2RhdGEtdGVzdGlkPVwiZW1haWwtaW5wdXRcIl0nLCAndGVzdEBleGFtcGxlLmNvbScpXG4gICAgICBhd2FpdCBwYWdlLmZpbGwoJ1tkYXRhLXRlc3RpZD1cInBhc3N3b3JkLWlucHV0XCJdJywgJ3Bhc3N3b3JkMTIzJylcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cImxvZ2luLWJ1dHRvblwiXScpXG5cbiAgICAgIC8vIOW6lOivpemHjeWumuWQkeWIsGRhc2hib2FyZFxuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UpLnRvSGF2ZVVSTCgnL2Rhc2hib2FyZCcpXG4gICAgfSlcblxuICAgIHRlc3QoJ+W6lOivpeWFgeiuuOiuv+mXruWFrOW8gOmhtemdoicsIGFzeW5jICh7IHBhZ2UgfSkgPT4ge1xuICAgICAgLy8g5bqU6K+l6IO95aSf6K6/6Zeu55m75b2V6aG16Z2iXG4gICAgICBhd2FpdCBwYWdlLmdvdG8oJy9hdXRoL2xvZ2luJylcbiAgICAgIGF3YWl0IGV4cGVjdChwYWdlKS50b0hhdmVVUkwoJy9hdXRoL2xvZ2luJylcblxuICAgICAgLy8g5bqU6K+l6IO95aSf6K6/6Zeu5rOo5YaM6aG16Z2iXG4gICAgICBhd2FpdCBwYWdlLmdvdG8oJy9hdXRoL3JlZ2lzdGVyJylcbiAgICAgIGF3YWl0IGV4cGVjdChwYWdlKS50b0hhdmVVUkwoJy9hdXRoL3JlZ2lzdGVyJylcblxuICAgICAgLy8g5bqU6K+l6IO95aSf6K6/6Zeu6YeN572u5a+G56CB6aG16Z2iXG4gICAgICBhd2FpdCBwYWdlLmdvdG8oJy9hdXRoL3Jlc2V0LXBhc3N3b3JkJylcbiAgICAgIGF3YWl0IGV4cGVjdChwYWdlKS50b0hhdmVVUkwoJy9hdXRoL3Jlc2V0LXBhc3N3b3JkJylcbiAgICB9KVxuICB9KVxuXG4gIHRlc3QuZGVzY3JpYmUoJ+eUqOaIt+i1hOaWmeeuoeeQhicsICgpID0+IHtcbiAgICB0ZXN0LmJlZm9yZUVhY2goYXN5bmMgKHsgcGFnZSB9KSA9PiB7XG4gICAgICAvLyDnmbvlvZXnlKjmiLdcbiAgICAgIGF3YWl0IHBhZ2UuZ290bygnL2F1dGgvbG9naW4nKVxuICAgICAgYXdhaXQgcGFnZS5maWxsKCdbZGF0YS10ZXN0aWQ9XCJlbWFpbC1pbnB1dFwiXScsICd0ZXN0QGV4YW1wbGUuY29tJylcbiAgICAgIGF3YWl0IHBhZ2UuZmlsbCgnW2RhdGEtdGVzdGlkPVwicGFzc3dvcmQtaW5wdXRcIl0nLCAncGFzc3dvcmQxMjMnKVxuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwibG9naW4tYnV0dG9uXScpXG4gICAgICBhd2FpdCBwYWdlLndhaXRGb3JVUkwoJy9kYXNoYm9hcmQnKVxuICAgIH0pXG5cbiAgICB0ZXN0KCflupTor6Xog73lpJ/mm7TmlrDnlKjmiLfotYTmlpknLCBhc3luYyAoeyBwYWdlIH0pID0+IHtcbiAgICAgIC8vIOWvvOiIquWIsOeUqOaIt+i1hOaWmemhtemdolxuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwidXNlci1tZW51XCJdJylcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cInByb2ZpbGUtbGlua1wiXScpXG5cbiAgICAgIC8vIOetieW+hemhtemdouWKoOi9vVxuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwicHJvZmlsZS1mb3JtXCJdJykpLnRvQmVWaXNpYmxlKClcblxuICAgICAgLy8g5pu05paw55So5oi35L+h5oGvXG4gICAgICBhd2FpdCBwYWdlLmZpbGwoJ1tkYXRhLXRlc3RpZD1cIm5hbWUtaW5wdXRcIl0nLCAn5pu05paw5ZCO55qE5aeT5ZCNJylcbiAgICAgIGF3YWl0IHBhZ2UuZmlsbCgnW2RhdGEtdGVzdGlkPVwiYmlvLWlucHV0XCJdJywgJ+i/meaYr+aIkeeahOS4quS6uueugOS7iycpXG5cbiAgICAgIC8vIOS/neWtmOabtOaUuVxuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwic2F2ZS1wcm9maWxlLWJ1dHRvblwiXScpXG5cbiAgICAgIC8vIOW6lOivpeaYvuekuuaIkOWKn+a2iOaBr1xuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwic2F2ZS1zdWNjZXNzLW1lc3NhZ2VcIl0nKSkudG9CZVZpc2libGUoKVxuXG4gICAgICAvLyDpqozor4Hmm7TmlLnlt7Lkv53lrZhcbiAgICAgIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoJ1tkYXRhLXRlc3RpZD1cIm5hbWUtaW5wdXRcIl0nKSkudG9IYXZlVmFsdWUoJ+abtOaWsOWQjueahOWnk+WQjScpXG4gICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWQ9XCJiaW8taW5wdXRcIl0nKSkudG9IYXZlVmFsdWUoJ+i/meaYr+aIkeeahOS4quS6uueugOS7iycpXG4gICAgfSlcblxuICAgIHRlc3QoJ+W6lOivpeiDveWkn+abtOaUueWvhueggScsIGFzeW5jICh7IHBhZ2UgfSkgPT4ge1xuICAgICAgLy8g5a+86Iiq5Yiw55So5oi36K6+572u6aG16Z2iXG4gICAgICBhd2FpdCBwYWdlLmNsaWNrKCdbZGF0YS10ZXN0aWQ9XCJ1c2VyLW1lbnVcIl0nKVxuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwic2V0dGluZ3MtbGlua1wiXScpXG5cbiAgICAgIC8vIOetieW+hemhtemdouWKoOi9vVxuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwic2V0dGluZ3MtZm9ybVwiXScpKS50b0JlVmlzaWJsZSgpXG5cbiAgICAgIC8vIOabtOaUueWvhueggVxuICAgICAgYXdhaXQgcGFnZS5maWxsKCdbZGF0YS10ZXN0aWQ9XCJjdXJyZW50LXBhc3N3b3JkLWlucHV0XCJdJywgJ3Bhc3N3b3JkMTIzJylcbiAgICAgIGF3YWl0IHBhZ2UuZmlsbCgnW2RhdGEtdGVzdGlkPVwibmV3LXBhc3N3b3JkLWlucHV0XCJdJywgJ25ld3Bhc3N3b3JkMTIzJylcbiAgICAgIGF3YWl0IHBhZ2UuZmlsbCgnW2RhdGEtdGVzdGlkPVwiY29uZmlybS1uZXctcGFzc3dvcmQtaW5wdXRcIl0nLCAnbmV3cGFzc3dvcmQxMjMnKVxuXG4gICAgICAvLyDkv53lrZjmm7TmlLlcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cImNoYW5nZS1wYXNzd29yZC1idXR0b25cIl0nKVxuXG4gICAgICAvLyDlupTor6XmmL7npLrmiJDlip/mtojmga9cbiAgICAgIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoJ1tkYXRhLXRlc3RpZD1cInBhc3N3b3JkLWNoYW5nZS1zdWNjZXNzXCJdJykpLnRvQmVWaXNpYmxlKClcbiAgICB9KVxuXG4gICAgdGVzdCgn5bqU6K+l6aqM6K+B5a+G56CB5pu05pS5JywgYXN5bmMgKHsgcGFnZSB9KSA9PiB7XG4gICAgICAvLyDlr7zoiKrliLDnlKjmiLforr7nva7pobXpnaJcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cInVzZXItbWVudVwiXScpXG4gICAgICBhd2FpdCBwYWdlLmNsaWNrKCdbZGF0YS10ZXN0aWQ9XCJzZXR0aW5ncy1saW5rXCJdJylcblxuICAgICAgLy8g5bCd6K+V5L2/55So5LiN5Yy56YWN55qE5paw5a+G56CBXG4gICAgICBhd2FpdCBwYWdlLmZpbGwoJ1tkYXRhLXRlc3RpZD1cImN1cnJlbnQtcGFzc3dvcmQtaW5wdXRcIl0nLCAncGFzc3dvcmQxMjMnKVxuICAgICAgYXdhaXQgcGFnZS5maWxsKCdbZGF0YS10ZXN0aWQ9XCJuZXctcGFzc3dvcmQtaW5wdXRcIl0nLCAnbmV3cGFzc3dvcmQxMjMnKVxuICAgICAgYXdhaXQgcGFnZS5maWxsKCdbZGF0YS10ZXN0aWQ9XCJjb25maXJtLW5ldy1wYXNzd29yZC1pbnB1dFwiXScsICdkaWZmZXJlbnRwYXNzd29yZCcpXG5cbiAgICAgIC8vIOS/neWtmOabtOaUuVxuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwiY2hhbmdlLXBhc3N3b3JkLWJ1dHRvblwiXScpXG5cbiAgICAgIC8vIOW6lOivpeaYvuekuuWvhueggeS4jeWMuemFjemUmeivr1xuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwicGFzc3dvcmQtbWlzbWF0Y2gtZXJyb3JcIl0nKSkudG9CZVZpc2libGUoKVxuICAgIH0pXG4gIH0pXG5cbiAgdGVzdC5kZXNjcmliZSgn5ZON5bqU5byP6K6+6K6hJywgKCkgPT4ge1xuICAgIHRlc3QuZGVzY3JpYmUoJ+enu+WKqOiuvuWkhycsICgpID0+IHtcbiAgICAgIHRlc3QuYmVmb3JlRWFjaChhc3luYyAoeyBwYWdlIH0pID0+IHtcbiAgICAgICAgLy8g6K6+572u56e75Yqo6K6+5aSH6KeG5Y+jXG4gICAgICAgIGF3YWl0IHBhZ2Uuc2V0Vmlld3BvcnRTaXplKHsgd2lkdGg6IDM3NSwgaGVpZ2h0OiA2NjcgfSlcbiAgICAgIH0pXG5cbiAgICAgIHRlc3QoJ+W6lOivpeWcqOenu+WKqOiuvuWkh+S4iuato+ehruaYvuekuuiupOivgeihqOWNlScsIGFzeW5jICh7IHBhZ2UgfSkgPT4ge1xuICAgICAgICBhd2FpdCBwYWdlLmdvdG8oJy9hdXRoL2xvZ2luJylcblxuICAgICAgICAvLyDooajljZXlupTor6XpgILlkIjnp7vliqjlsY/luZVcbiAgICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwibG9naW4tZm9ybVwiXScpKS50b0JlVmlzaWJsZSgpXG4gICAgICAgIFxuICAgICAgICAvLyDovpPlhaXlrZfmrrXlupTor6Xlj6/ku6Xngrnlh7tcbiAgICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwiZW1haWwtaW5wdXRcIl0nKSkudG9CZVZpc2libGUoKVxuICAgICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWQ9XCJwYXNzd29yZC1pbnB1dFwiXScpKS50b0JlVmlzaWJsZSgpXG4gICAgICAgIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoJ1tkYXRhLXRlc3RpZD1cImxvZ2luLWJ1dHRvblwiXScpKS50b0JlVmlzaWJsZSgpXG4gICAgICB9KVxuXG4gICAgICB0ZXN0KCflupTor6XlnKjnp7vliqjorr7lpIfkuIrmraPnoa7mmL7npLrplJnor6/mtojmga8nLCBhc3luYyAoeyBwYWdlIH0pID0+IHtcbiAgICAgICAgYXdhaXQgcGFnZS5nb3RvKCcvYXV0aC9sb2dpbicpXG5cbiAgICAgICAgLy8g5bCd6K+V5L2/55So6ZSZ6K+v55qE5Yet5o2u55m75b2VXG4gICAgICAgIGF3YWl0IHBhZ2UuZmlsbCgnW2RhdGEtdGVzdGlkPVwiZW1haWwtaW5wdXRcIl0nLCAnd3JvbmdAZXhhbXBsZS5jb20nKVxuICAgICAgICBhd2FpdCBwYWdlLmZpbGwoJ1tkYXRhLXRlc3RpZD1cInBhc3N3b3JkLWlucHV0XCJdJywgJ3dyb25ncGFzc3dvcmQnKVxuICAgICAgICBhd2FpdCBwYWdlLmNsaWNrKCdbZGF0YS10ZXN0aWQ9XCJsb2dpbi1idXR0b25cIl0nKVxuXG4gICAgICAgIC8vIOmUmeivr+a2iOaBr+W6lOivpeWcqOenu+WKqOiuvuWkh+S4iuWPr+ingVxuICAgICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWQ9XCJsb2dpbi1lcnJvclwiXScpKS50b0JlVmlzaWJsZSgpXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICB0ZXN0LmRlc2NyaWJlKCflubPmnb/orr7lpIcnLCAoKSA9PiB7XG4gICAgICB0ZXN0LmJlZm9yZUVhY2goYXN5bmMgKHsgcGFnZSB9KSA9PiB7XG4gICAgICAgIC8vIOiuvue9ruW5s+adv+iuvuWkh+inhuWPo1xuICAgICAgICBhd2FpdCBwYWdlLnNldFZpZXdwb3J0U2l6ZSh7IHdpZHRoOiA3NjgsIGhlaWdodDogMTAyNCB9KVxuICAgICAgfSlcblxuICAgICAgdGVzdCgn5bqU6K+l5Zyo5Lit562J5bGP5bmV5LiK5q2j56Gu5pi+56S66K6k6K+B6KGo5Y2VJywgYXN5bmMgKHsgcGFnZSB9KSA9PiB7XG4gICAgICAgIGF3YWl0IHBhZ2UuZ290bygnL2F1dGgvbG9naW4nKVxuXG4gICAgICAgIC8vIOihqOWNleW6lOivpeWxheS4reaYvuekulxuICAgICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWQ9XCJsb2dpbi1mb3JtXCJdJykpLnRvQmVWaXNpYmxlKClcbiAgICAgICAgXG4gICAgICAgIC8vIOekvuS6pOeZu+W9leaMiemSruW6lOivpeawtOW5s+aOkuWIl1xuICAgICAgICBjb25zdCBzb2NpYWxCdXR0b25zID0gcGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWRePVwic29jaWFsLWxvZ2luLWJ1dHRvblwiXScpXG4gICAgICAgIGF3YWl0IGV4cGVjdChzb2NpYWxCdXR0b25zLmZpcnN0KCkpLnRvQmVWaXNpYmxlKClcbiAgICAgICAgYXdhaXQgZXhwZWN0KHNvY2lhbEJ1dHRvbnMubGFzdCgpKS50b0JlVmlzaWJsZSgpXG4gICAgICB9KVxuICAgIH0pXG4gIH0pXG5cbiAgdGVzdC5kZXNjcmliZSgn5Y+v6K6/6Zeu5oCn5rWL6K+VJywgKCkgPT4ge1xuICAgIHRlc3QoJ+W6lOivpeWFt+acieato+ehrueahEFSSUHmoIfnrb4nLCBhc3luYyAoeyBwYWdlIH0pID0+IHtcbiAgICAgIGF3YWl0IHBhZ2UuZ290bygnL2F1dGgvbG9naW4nKVxuXG4gICAgICAvLyDooajljZXlrZfmrrXlupTor6XmnInmraPnoa7nmoTmoIfnrb5cbiAgICAgIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoJ1tkYXRhLXRlc3RpZD1cImVtYWlsLWlucHV0XCJdJykpLnRvSGF2ZUF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsICfpgq7nrrHlnLDlnYAnKVxuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwicGFzc3dvcmQtaW5wdXRcIl0nKSkudG9IYXZlQXR0cmlidXRlKCdhcmlhLWxhYmVsJywgJ+WvhueggScpXG5cbiAgICAgIC8vIOmUmeivr+a2iOaBr+W6lOivpeWcqEFSSUEgbGl2ZeWMuuWfn1xuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwibG9naW4tZXJyb3JcIl0nKSkudG9IYXZlQXR0cmlidXRlKCdyb2xlJywgJ2FsZXJ0JylcbiAgICB9KVxuXG4gICAgdGVzdCgn5bqU6K+l5pSv5oyB6ZSu55uY5a+86IiqJywgYXN5bmMgKHsgcGFnZSB9KSA9PiB7XG4gICAgICBhd2FpdCBwYWdlLmdvdG8oJy9hdXRoL2xvZ2luJylcblxuICAgICAgLy8g5L2/55SoVGFi6ZSu5a+86IiqXG4gICAgICBhd2FpdCBwYWdlLnByZXNzKCdbZGF0YS10ZXN0aWQ9XCJlbWFpbC1pbnB1dFwiXScsICdUYWInKVxuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwicGFzc3dvcmQtaW5wdXRcIl0nKSkudG9CZUZvY3VzZWQoKVxuXG4gICAgICBhd2FpdCBwYWdlLnByZXNzKCdbZGF0YS10ZXN0aWQ9XCJwYXNzd29yZC1pbnB1dFwiXScsICdUYWInKVxuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwibG9naW4tYnV0dG9uXCJdJykpLnRvQmVGb2N1c2VkKClcblxuICAgICAgLy8g5L2/55SoRW50ZXLplK7mj5DkuqTooajljZVcbiAgICAgIGF3YWl0IHBhZ2UuZmlsbCgnW2RhdGEtdGVzdGlkPVwiZW1haWwtaW5wdXRcIl0nLCAndGVzdEBleGFtcGxlLmNvbScpXG4gICAgICBhd2FpdCBwYWdlLmZpbGwoJ1tkYXRhLXRlc3RpZD1cInBhc3N3b3JkLWlucHV0XCJdJywgJ3Bhc3N3b3JkMTIzJylcbiAgICAgIGF3YWl0IHBhZ2UucHJlc3MoJ1tkYXRhLXRlc3RpZD1cImxvZ2luLWJ1dHRvblwiXScsICdFbnRlcicpXG5cbiAgICAgIC8vIOW6lOivpeaPkOS6pOihqOWNlVxuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UpLnRvSGF2ZVVSTCgnL2Rhc2hib2FyZCcpXG4gICAgfSlcblxuICAgIHRlc3QoJ+W6lOivpeWFt+aciemAguW9k+eahOminOiJsuWvueavlOW6picsIGFzeW5jICh7IHBhZ2UgfSkgPT4ge1xuICAgICAgYXdhaXQgcGFnZS5nb3RvKCcvYXV0aC9sb2dpbicpXG5cbiAgICAgIC8vIOajgOafpeaWh+acrOminOiJsuWvueavlOW6pu+8iOeugOWMlua1i+ivle+8iVxuICAgICAgY29uc3QgZW1haWxJbnB1dCA9IHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwiZW1haWwtaW5wdXRcIl0nKVxuICAgICAgY29uc3QgYmFja2dyb3VuZENvbG9yID0gYXdhaXQgZW1haWxJbnB1dC5ldmFsdWF0ZSgoZWwpID0+IHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKS5iYWNrZ3JvdW5kQ29sb3JcbiAgICAgIH0pXG4gICAgICBcbiAgICAgIC8vIOiDjOaZr+minOiJsuW6lOivpeaYr+eZveiJsuaIlua1heiJslxuICAgICAgZXhwZWN0KGJhY2tncm91bmRDb2xvcikudG9NYXRjaCgvcmdiXFwoMjU1LFxccyoyNTUsXFxzKjI1NVxcKXxyZ2JhXFwoMjU1LFxccyoyNTUsXFxzKjI1NS8pXG4gICAgfSlcbiAgfSlcblxuICB0ZXN0LmRlc2NyaWJlKCfmgKfog73mtYvor5UnLCAoKSA9PiB7XG4gICAgdGVzdCgn5bqU6K+l5b+r6YCf5Yqg6L296K6k6K+B6aG16Z2iJywgYXN5bmMgKHsgcGFnZSB9KSA9PiB7XG4gICAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpXG4gICAgICBhd2FpdCBwYWdlLmdvdG8oJy9hdXRoL2xvZ2luJylcbiAgICAgIGNvbnN0IGxvYWRUaW1lID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZVxuXG4gICAgICAvLyDpobXpnaLlupTor6XlnKgy56eS5YaF5Yqg6L295a6M5oiQXG4gICAgICBleHBlY3QobG9hZFRpbWUpLnRvQmVMZXNzVGhhbigyMDAwKVxuXG4gICAgICAvLyDlhbPplK7lhYPntKDlupTor6Xnq4vljbPlj6/op4FcbiAgICAgIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoJ1tkYXRhLXRlc3RpZD1cImxvZ2luLWZvcm1cIl0nKSkudG9CZVZpc2libGUoeyB0aW1lb3V0OiAxMDAwIH0pXG4gICAgfSlcblxuICAgIHRlc3QoJ+W6lOivpeW/q+mAn+WTjeW6lOihqOWNleaPkOS6pCcsIGFzeW5jICh7IHBhZ2UgfSkgPT4ge1xuICAgICAgYXdhaXQgcGFnZS5nb3RvKCcvYXV0aC9sb2dpbicpXG5cbiAgICAgIC8vIOWhq+WGmeihqOWNlVxuICAgICAgYXdhaXQgcGFnZS5maWxsKCdbZGF0YS10ZXN0aWQ9XCJlbWFpbC1pbnB1dFwiXScsICd0ZXN0QGV4YW1wbGUuY29tJylcbiAgICAgIGF3YWl0IHBhZ2UuZmlsbCgnW2RhdGEtdGVzdGlkPVwicGFzc3dvcmQtaW5wdXRcIl0nLCAncGFzc3dvcmQxMjMnKVxuXG4gICAgICAvLyDmtYvph4/mj5DkuqTlk43lupTml7bpl7RcbiAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KClcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cImxvZ2luLWJ1dHRvblwiXScpXG4gICAgICBjb25zdCByZXNwb25zZVRpbWUgPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lXG5cbiAgICAgIC8vIOWTjeW6lOaXtumXtOW6lOivpeWcqDPnp5LlhoVcbiAgICAgIGV4cGVjdChyZXNwb25zZVRpbWUpLnRvQmVMZXNzVGhhbigzMDAwKVxuICAgIH0pXG4gIH0pXG59KSJdLCJ2ZXJzaW9uIjozfQ==
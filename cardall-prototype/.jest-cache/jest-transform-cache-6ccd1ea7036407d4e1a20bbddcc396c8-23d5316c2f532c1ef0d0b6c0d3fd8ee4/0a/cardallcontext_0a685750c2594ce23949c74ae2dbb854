adec4307abff5dabb1162fdd8bd6199a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CardAllProvider = CardAllProvider;
exports.useCardAll = useCardAll;
exports.useCardAllCards = useCardAllCards;
exports.useCardAllFolders = useCardAllFolders;
exports.useCardAllTags = useCardAllTags;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const use_cards_1 = require("@/hooks/use-cards");
const use_folders_1 = require("@/hooks/use-folders");
const use_tags_1 = require("@/hooks/use-tags");
const CardAllContext = (0, react_1.createContext)(null);
function CardAllProvider({ children }) {
    const cards = (0, use_cards_1.useCards)();
    const folders = (0, use_folders_1.useFolders)();
    const tags = (0, use_tags_1.useTags)();
    // Sync tags with card data
    react_1.default.useEffect(() => {
        const allCardTags = [];
        cards.allCards.forEach(card => {
            allCardTags.push(...card.frontContent.tags, ...card.backContent.tags);
        });
        tags.syncTagsWithCards(allCardTags);
    }, [cards.allCards, tags.syncTagsWithCards]);
    const value = {
        cards,
        folders,
        tags
    };
    return ((0, jsx_runtime_1.jsx)(CardAllContext.Provider, { value: value, children: children }));
}
function useCardAll() {
    const context = (0, react_1.useContext)(CardAllContext);
    if (!context) {
        throw new Error('useCardAll must be used within a CardAllProvider');
    }
    return context;
}
// Individual hook exports for convenience
function useCardAllCards() {
    return useCardAll().cards;
}
function useCardAllFolders() {
    return useCardAll().folders;
}
function useCardAllTags() {
    return useCardAll().tags;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXHNyY1xcY29udGV4dHNcXGNhcmRhbGwtY29udGV4dC50c3giLCJtYXBwaW5ncyI6Ijs7QUFpQkEsMENBeUJDO0FBRUQsZ0NBTUM7QUFHRCwwQ0FFQztBQUVELDhDQUVDO0FBRUQsd0NBRUM7O0FBL0RELGlDQUFtRTtBQUNuRSxpREFBNEM7QUFDNUMscURBQWdEO0FBQ2hELCtDQUEwQztBQVExQyxNQUFNLGNBQWMsR0FBRyxJQUFBLHFCQUFhLEVBQTRCLElBQUksQ0FBQyxDQUFBO0FBTXJFLFNBQWdCLGVBQWUsQ0FBQyxFQUFFLFFBQVEsRUFBd0I7SUFDaEUsTUFBTSxLQUFLLEdBQUcsSUFBQSxvQkFBUSxHQUFFLENBQUE7SUFDeEIsTUFBTSxPQUFPLEdBQUcsSUFBQSx3QkFBVSxHQUFFLENBQUE7SUFDNUIsTUFBTSxJQUFJLEdBQUcsSUFBQSxrQkFBTyxHQUFFLENBQUE7SUFFdEIsMkJBQTJCO0lBQzNCLGVBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ25CLE1BQU0sV0FBVyxHQUFhLEVBQUUsQ0FBQTtRQUNoQyxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM1QixXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ3ZFLENBQUMsQ0FBQyxDQUFBO1FBQ0YsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBQ3JDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQTtJQUU1QyxNQUFNLEtBQUssR0FBdUI7UUFDaEMsS0FBSztRQUNMLE9BQU87UUFDUCxJQUFJO0tBQ0wsQ0FBQTtJQUVELE9BQU8sQ0FDTCx1QkFBQyxjQUFjLENBQUMsUUFBUSxJQUFDLEtBQUssRUFBRSxLQUFLLFlBQ2xDLFFBQVEsR0FDZSxDQUMzQixDQUFBO0FBQ0gsQ0FBQztBQUVELFNBQWdCLFVBQVU7SUFDeEIsTUFBTSxPQUFPLEdBQUcsSUFBQSxrQkFBVSxFQUFDLGNBQWMsQ0FBQyxDQUFBO0lBQzFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNiLE1BQU0sSUFBSSxLQUFLLENBQUMsa0RBQWtELENBQUMsQ0FBQTtJQUNyRSxDQUFDO0lBQ0QsT0FBTyxPQUFPLENBQUE7QUFDaEIsQ0FBQztBQUVELDBDQUEwQztBQUMxQyxTQUFnQixlQUFlO0lBQzdCLE9BQU8sVUFBVSxFQUFFLENBQUMsS0FBSyxDQUFBO0FBQzNCLENBQUM7QUFFRCxTQUFnQixpQkFBaUI7SUFDL0IsT0FBTyxVQUFVLEVBQUUsQ0FBQyxPQUFPLENBQUE7QUFDN0IsQ0FBQztBQUVELFNBQWdCLGNBQWM7SUFDNUIsT0FBTyxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUE7QUFDMUIsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJEOlxcUHJvamVjdHNcXENhcmRFdmVyeXRoaW5nXFxjYXJkYWxsLXByb3RvdHlwZVxcc3JjXFxjb250ZXh0c1xcY2FyZGFsbC1jb250ZXh0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCwgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IHVzZUNhcmRzIH0gZnJvbSAnQC9ob29rcy91c2UtY2FyZHMnXHJcbmltcG9ydCB7IHVzZUZvbGRlcnMgfSBmcm9tICdAL2hvb2tzL3VzZS1mb2xkZXJzJ1xyXG5pbXBvcnQgeyB1c2VUYWdzIH0gZnJvbSAnQC9ob29rcy91c2UtdGFncydcclxuXHJcbmludGVyZmFjZSBDYXJkQWxsQ29udGV4dFR5cGUge1xyXG4gIGNhcmRzOiBSZXR1cm5UeXBlPHR5cGVvZiB1c2VDYXJkcz5cclxuICBmb2xkZXJzOiBSZXR1cm5UeXBlPHR5cGVvZiB1c2VGb2xkZXJzPlxyXG4gIHRhZ3M6IFJldHVyblR5cGU8dHlwZW9mIHVzZVRhZ3M+XHJcbn1cclxuXHJcbmNvbnN0IENhcmRBbGxDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxDYXJkQWxsQ29udGV4dFR5cGUgfCBudWxsPihudWxsKVxyXG5cclxuaW50ZXJmYWNlIENhcmRBbGxQcm92aWRlclByb3BzIHtcclxuICBjaGlsZHJlbjogUmVhY3ROb2RlXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBDYXJkQWxsUHJvdmlkZXIoeyBjaGlsZHJlbiB9OiBDYXJkQWxsUHJvdmlkZXJQcm9wcykge1xyXG4gIGNvbnN0IGNhcmRzID0gdXNlQ2FyZHMoKVxyXG4gIGNvbnN0IGZvbGRlcnMgPSB1c2VGb2xkZXJzKClcclxuICBjb25zdCB0YWdzID0gdXNlVGFncygpXHJcblxyXG4gIC8vIFN5bmMgdGFncyB3aXRoIGNhcmQgZGF0YVxyXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBjb25zdCBhbGxDYXJkVGFnczogc3RyaW5nW10gPSBbXVxyXG4gICAgY2FyZHMuYWxsQ2FyZHMuZm9yRWFjaChjYXJkID0+IHtcclxuICAgICAgYWxsQ2FyZFRhZ3MucHVzaCguLi5jYXJkLmZyb250Q29udGVudC50YWdzLCAuLi5jYXJkLmJhY2tDb250ZW50LnRhZ3MpXHJcbiAgICB9KVxyXG4gICAgdGFncy5zeW5jVGFnc1dpdGhDYXJkcyhhbGxDYXJkVGFncylcclxuICB9LCBbY2FyZHMuYWxsQ2FyZHMsIHRhZ3Muc3luY1RhZ3NXaXRoQ2FyZHNdKVxyXG5cclxuICBjb25zdCB2YWx1ZTogQ2FyZEFsbENvbnRleHRUeXBlID0ge1xyXG4gICAgY2FyZHMsXHJcbiAgICBmb2xkZXJzLFxyXG4gICAgdGFnc1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxDYXJkQWxsQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17dmFsdWV9PlxyXG4gICAgICB7Y2hpbGRyZW59XHJcbiAgICA8L0NhcmRBbGxDb250ZXh0LlByb3ZpZGVyPlxyXG4gIClcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZUNhcmRBbGwoKSB7XHJcbiAgY29uc3QgY29udGV4dCA9IHVzZUNvbnRleHQoQ2FyZEFsbENvbnRleHQpXHJcbiAgaWYgKCFjb250ZXh0KSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3VzZUNhcmRBbGwgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIENhcmRBbGxQcm92aWRlcicpXHJcbiAgfVxyXG4gIHJldHVybiBjb250ZXh0XHJcbn1cclxuXHJcbi8vIEluZGl2aWR1YWwgaG9vayBleHBvcnRzIGZvciBjb252ZW5pZW5jZVxyXG5leHBvcnQgZnVuY3Rpb24gdXNlQ2FyZEFsbENhcmRzKCkge1xyXG4gIHJldHVybiB1c2VDYXJkQWxsKCkuY2FyZHNcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZUNhcmRBbGxGb2xkZXJzKCkge1xyXG4gIHJldHVybiB1c2VDYXJkQWxsKCkuZm9sZGVyc1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXNlQ2FyZEFsbFRhZ3MoKSB7XHJcbiAgcmV0dXJuIHVzZUNhcmRBbGwoKS50YWdzXHJcbn0iXSwidmVyc2lvbiI6M30=
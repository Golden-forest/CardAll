8de43730700e1f65f1d7cd409f6c5b6b
"use strict";
/**
 * LocalOperationService 简化单元测试
 * 测试高性能本地操作服务的核心功能
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// 模拟数据库
globals_1.jest.mock('../../services/database-unified', () => {
    const mockTable = {
        add: globals_1.jest.fn(),
        get: globals_1.jest.fn(),
        update: globals_1.jest.fn(),
        delete: globals_1.jest.fn(),
        where: globals_1.jest.fn(() => mockTable),
        toArray: globals_1.jest.fn(),
        bulkAdd: globals_1.jest.fn(),
        bulkPut: globals_1.jest.fn(),
        bulkDelete: globals_1.jest.fn(),
        count: globals_1.jest.fn(),
        equals: globals_1.jest.fn(() => mockTable),
        sortBy: globals_1.jest.fn(() => mockTable),
        orderBy: globals_1.jest.fn(() => mockTable),
        reverse: globals_1.jest.fn(() => mockTable),
        offset: globals_1.jest.fn(() => mockTable),
        limit: globals_1.jest.fn(() => mockTable),
    };
    const mockDb = {
        cards: { ...mockTable },
        folders: { ...mockTable },
        tags: { ...mockTable },
        cardTags: { ...mockTable },
        images: { ...mockTable },
        syncQueue: { ...mockTable },
        syncOperations: { ...mockTable },
        transaction: globals_1.jest.fn().mockImplementation(async (mode, tables, callback) => {
            return await callback();
        }),
        open: globals_1.jest.fn().mockResolvedValue(true),
        on: globals_1.jest.fn(),
        close: globals_1.jest.fn(),
    };
    return {
        db: mockDb,
    };
});
const local_operation_service_1 = require("../../services/local-operation-service");
// 创建简单的Mock工具
const createMockCard = () => ({
    frontContent: {
        title: '测试卡片',
        text: '正面内容',
        tags: ['测试标签'],
        style: { backgroundColor: '#ffffff' }
    },
    backContent: {
        title: '背面标题',
        text: '背面内容',
        tags: ['背面标签'],
        style: { backgroundColor: '#f0f0f0' }
    },
    style: {
        type: 'solid',
        colors: ['#ffffff', '#f0f0f0']
    },
    folderId: crypto.randomUUID(),
    userId: 'test-user'
});
const createMockFolder = () => ({
    id: crypto.randomUUID(),
    name: '测试文件夹',
    parentId: null,
    createdAt: new Date(),
    updatedAt: new Date()
});
(0, globals_1.describe)('LocalOperationServiceOptimized', () => {
    let service;
    (0, globals_1.beforeEach)(() => {
        // 重置服务实例
        service = new local_operation_service_1.LocalOperationServiceOptimized();
        // 清理所有模拟
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.afterEach)(() => {
        // 清理服务
        if (service.destroy) {
            service.destroy();
        }
    });
    // ============================================================================
    // 初始化测试
    // ============================================================================
    (0, globals_1.describe)('初始化', () => {
        (0, globals_1.test)('应该正确初始化服务', async () => {
            await service.initialize();
            (0, globals_1.expect)(service).toBeInstanceOf(local_operation_service_1.LocalOperationServiceOptimized);
        });
        (0, globals_1.test)('应该处理初始化错误', async () => {
            // 模拟初始化错误
            globals_1.jest.spyOn(service, 'initialize').mockRejectedValue(new Error('初始化失败'));
            await (0, globals_1.expect)(service.initialize()).rejects.toThrow('初始化失败');
        });
    });
    // ============================================================================
    // 卡片操作测试
    // ============================================================================
    (0, globals_1.describe)('卡片操作', () => {
        (0, globals_1.test)('应该成功创建卡片', async () => {
            const cardData = createMockCard();
            const mockResult = { ...cardData, id: crypto.randomUUID() };
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            db.cards.add.mockResolvedValue(mockResult.id);
            const result = await service.createCard(cardData);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.id).toBeDefined();
            // 验证数据库调用，但接受服务可能添加了额外字段
            (0, globals_1.expect)(db.cards.add).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                frontContent: globals_1.expect.objectContaining({
                    title: cardData.frontContent.title,
                    text: cardData.frontContent.text,
                }),
                backContent: globals_1.expect.objectContaining({
                    title: cardData.backContent.title,
                    text: cardData.backContent.text,
                }),
                userId: cardData.userId,
                folderId: cardData.folderId,
            }));
        });
        (0, globals_1.test)('应该成功读取卡片', async () => {
            const cardId = crypto.randomUUID();
            const mockCard = createMockCard();
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            db.cards.get.mockResolvedValue(mockCard);
            const result = await service.getCard(cardId);
            (0, globals_1.expect)(result).toEqual(mockCard);
            (0, globals_1.expect)(db.cards.get).toHaveBeenCalledWith(cardId);
        });
        (0, globals_1.test)('应该成功更新卡片', async () => {
            const cardId = crypto.randomUUID();
            const updateData = { title: '更新后的标题' };
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            db.cards.update.mockResolvedValue(1);
            const result = await service.updateCard(cardId, updateData);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(db.cards.update).toHaveBeenCalledWith(cardId, updateData);
        });
        (0, globals_1.test)('应该成功删除卡片', async () => {
            const cardId = crypto.randomUUID();
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            db.cards.delete.mockResolvedValue(1);
            const result = await service.deleteCard(cardId);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(db.cards.delete).toHaveBeenCalledWith(cardId);
        });
        (0, globals_1.test)('应该处理数据库操作错误', async () => {
            const cardData = createMockCard();
            // 模拟数据库错误
            const { db } = require('../../services/database-unified');
            db.cards.add.mockRejectedValue(new Error('数据库错误'));
            const result = await service.createCard(cardData);
            (0, globals_1.expect)(result.success).toBe(false);
            (0, globals_1.expect)(result.error).toBe('数据库错误');
        });
    });
    // ============================================================================
    // 文件夹操作测试
    // ============================================================================
    (0, globals_1.describe)('文件夹操作', () => {
        (0, globals_1.test)('应该成功创建文件夹', async () => {
            const folderData = createMockFolder();
            const mockResult = { ...folderData, id: crypto.randomUUID() };
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            db.folders.add.mockResolvedValue(mockResult.id);
            const result = await service.createFolder(folderData);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.id).toBeDefined();
            (0, globals_1.expect)(db.folders.add).toHaveBeenCalledWith(folderData);
        });
        (0, globals_1.test)('应该成功获取文件夹', async () => {
            const folderId = crypto.randomUUID();
            const mockFolder = createMockFolder();
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            db.folders.get.mockResolvedValue(mockFolder);
            const result = await service.getFolder(folderId);
            (0, globals_1.expect)(result).toEqual(mockFolder);
            (0, globals_1.expect)(db.folders.get).toHaveBeenCalledWith(folderId);
        });
    });
    // ============================================================================
    // 批量操作测试
    // ============================================================================
    (0, globals_1.describe)('批量操作', () => {
        (0, globals_1.test)('应该成功批量插入卡片', async () => {
            const cards = Array.from({ length: 10 }, () => createMockCard());
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            db.cards.bulkAdd.mockResolvedValue(cards.map(c => c.id));
            const result = await service.bulkCreateCards(cards);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.count).toBe(10);
            (0, globals_1.expect)(db.cards.bulkAdd).toHaveBeenCalledWith(cards);
        });
        (0, globals_1.test)('应该成功批量更新卡片', async () => {
            const updates = Array.from({ length: 5 }, (_, i) => ({
                id: crypto.randomUUID(),
                changes: { title: `更新标题 ${i}` }
            }));
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            db.cards.bulkPut.mockResolvedValue(updates.length);
            const result = await service.bulkUpdateCards(updates);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.count).toBe(5);
            (0, globals_1.expect)(db.cards.bulkPut).toHaveBeenCalledWith(updates.map(u => ({ ...createMockCard(), ...u.changes, id: u.id })));
        });
    });
    // ============================================================================
    // 查询操作测试
    // ============================================================================
    (0, globals_1.describe)('查询操作', () => {
        (0, globals_1.test)('应该成功查询卡片列表', async () => {
            const mockCards = Array.from({ length: 5 }, () => createMockCard());
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            db.cards.toArray.mockResolvedValue(mockCards);
            const result = await service.getAllCards();
            (0, globals_1.expect)(result).toEqual(mockCards);
            (0, globals_1.expect)(db.cards.toArray).toHaveBeenCalled();
        });
        (0, globals_1.test)('应该支持条件查询', async () => {
            const folderId = crypto.randomUUID();
            const mockCards = Array.from({ length: 3 }, () => ({
                ...createMockCard(),
                folderId
            }));
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            const whereMock = {
                equals: globals_1.jest.fn().mockResolvedValue(mockCards)
            };
            db.cards.where.mockReturnValue(whereMock);
            const result = await service.getCardsByFolder(folderId);
            (0, globals_1.expect)(result).toEqual(mockCards);
            (0, globals_1.expect)(db.cards.where).toHaveBeenCalledWith('folderId');
            (0, globals_1.expect)(whereMock.equals).toHaveBeenCalledWith(folderId);
        });
    });
    // ============================================================================
    // 同步操作测试
    // ============================================================================
    (0, globals_1.describe)('同步操作', () => {
        (0, globals_1.test)('应该正确记录同步操作', async () => {
            const operation = {
                type: 'create',
                entityType: 'card',
                entityId: crypto.randomUUID(),
                data: createMockCard(),
                timestamp: new Date()
            };
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            db.syncOperations.add.mockResolvedValue(crypto.randomUUID());
            const result = await service.recordSyncOperation(operation);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(db.syncOperations.add).toHaveBeenCalledWith(operation);
        });
        (0, globals_1.test)('应该获取待同步操作', async () => {
            const mockOperations = Array.from({ length: 3 }, () => ({
                id: crypto.randomUUID(),
                type: 'create',
                entityType: 'card',
                entityId: crypto.randomUUID(),
                data: createMockCard(),
                timestamp: new Date()
            }));
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            db.syncOperations.toArray.mockResolvedValue(mockOperations);
            const result = await service.getPendingSyncOperations();
            (0, globals_1.expect)(result).toEqual(mockOperations);
            (0, globals_1.expect)(db.syncOperations.toArray).toHaveBeenCalled();
        });
    });
    // ============================================================================
    // 性能监控测试
    // ============================================================================
    (0, globals_1.describe)('性能监控', () => {
        (0, globals_1.test)('应该记录操作耗时', async () => {
            const cardData = createMockCard();
            const mockResult = { ...cardData, id: crypto.randomUUID() };
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            db.cards.add.mockResolvedValue(mockResult.id);
            // 监控性能
            const startTime = performance.now();
            await service.createCard(cardData);
            const endTime = performance.now();
            (0, globals_1.expect)(endTime - startTime).toBeGreaterThan(0);
        });
        (0, globals_1.test)('应该处理大量数据操作', async () => {
            const largeDataset = Array.from({ length: 100 }, () => createMockCard());
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            db.cards.bulkAdd.mockResolvedValue(largeDataset.map(c => c.id));
            const result = await service.bulkCreateCards(largeDataset);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.count).toBe(100);
        });
    });
    // ============================================================================
    // 错误处理测试
    // ============================================================================
    (0, globals_1.describe)('错误处理', () => {
        (0, globals_1.test)('应该正确处理无效输入', async () => {
            // 测试空数据
            const result1 = await service.createCard({});
            (0, globals_1.expect)(result1.success).toBe(false);
            // 测试无效ID
            const result2 = await service.getCard('');
            (0, globals_1.expect)(result2).toBeNull();
            // 测试无效更新
            const result3 = await service.updateCard('', {});
            (0, globals_1.expect)(result3.success).toBe(false);
        });
        (0, globals_1.test)('应该处理并发操作', async () => {
            const cardData = createMockCard();
            const mockResult = { ...cardData, id: crypto.randomUUID() };
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            db.cards.add.mockResolvedValue(mockResult.id);
            // 并发创建多个卡片
            const promises = Array.from({ length: 5 }, () => service.createCard(cardData));
            const results = await Promise.all(promises);
            (0, globals_1.expect)(results).toHaveLength(5);
            (0, globals_1.expect)(results.every(r => r.success)).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXHNyY1xcX190ZXN0c19fXFxzZXJ2aWNlc1xcbG9jYWwtb3BlcmF0aW9uLXNlcnZpY2Utc2ltcGxlLnRlc3QudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7QUFFSCwyQ0FBbUY7QUFpQ25GLFFBQVE7QUFDUixjQUFJLENBQUMsSUFBSSxDQUFDLGlDQUFpQyxFQUFFLEdBQUcsRUFBRTtJQUNoRCxNQUFNLFNBQVMsR0FBRztRQUNoQixHQUFHLEVBQUUsY0FBSSxDQUFDLEVBQUUsRUFBRTtRQUNkLEdBQUcsRUFBRSxjQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2QsTUFBTSxFQUFFLGNBQUksQ0FBQyxFQUFFLEVBQUU7UUFDakIsTUFBTSxFQUFFLGNBQUksQ0FBQyxFQUFFLEVBQUU7UUFDakIsS0FBSyxFQUFFLGNBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDO1FBQy9CLE9BQU8sRUFBRSxjQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2xCLE9BQU8sRUFBRSxjQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2xCLE9BQU8sRUFBRSxjQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2xCLFVBQVUsRUFBRSxjQUFJLENBQUMsRUFBRSxFQUFFO1FBQ3JCLEtBQUssRUFBRSxjQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2hCLE1BQU0sRUFBRSxjQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQztRQUNoQyxNQUFNLEVBQUUsY0FBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUM7UUFDaEMsT0FBTyxFQUFFLGNBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDO1FBQ2pDLE9BQU8sRUFBRSxjQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQztRQUNqQyxNQUFNLEVBQUUsY0FBSSxDQUFDLEVBQUUs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QUFJLEVBQUU7WUFDMUIsTUFBTSxRQUFRLEdBQUcsY0FBYyxFQUFFLENBQUE7WUFDakMsTUFBTSxVQUFVLEdBQUcsRUFBRSxHQUFHLFFBQVEsRUFBRSxFQUFFLEVBQUUsTUFBTSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUE7WUFFM0QsVUFBVTtZQUNWLE1BQU0sRUFBRSxFQUFFLEVBQUUsR0FBRyxPQUFPLENBQUMsaUNBQWlDLENBQUMsQ0FBQTtZQUN6RCxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUE7WUFFN0MsV0FBVztZQUNYLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFBO1lBQzlFLE1BQU0sT0FBTyxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtZQUUzQyxJQUFBLGdCQUFNLEVBQUMsT0FBTyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQy9CLElBQUEsZ0JBQU0sRUFBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ2xELENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJEOlxcUHJvamVjdHNcXENhcmRFdmVyeXRoaW5nXFxjYXJkYWxsLXByb3RvdHlwZVxcc3JjXFxfX3Rlc3RzX19cXHNlcnZpY2VzXFxsb2NhbC1vcGVyYXRpb24tc2VydmljZS1zaW1wbGUudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogTG9jYWxPcGVyYXRpb25TZXJ2aWNlIOeugOWMluWNleWFg+a1i+ivlVxyXG4gKiDmtYvor5Xpq5jmgKfog73mnKzlnLDmk43kvZzmnI3liqHnmoTmoLjlv4Plip/og71cclxuICovXHJcblxyXG5pbXBvcnQgeyBkZXNjcmliZSwgdGVzdCwgZXhwZWN0LCBqZXN0LCBiZWZvcmVFYWNoLCBhZnRlckVhY2ggfSBmcm9tICdAamVzdC9nbG9iYWxzJ1xyXG5pbXBvcnQgeyBMb2NhbE9wZXJhdGlvblNlcnZpY2VPcHRpbWl6ZWQgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9sb2NhbC1vcGVyYXRpb24tc2VydmljZSdcclxuXHJcbi8vIOWIm+W7uueugOWNleeahE1vY2vlt6XlhbdcclxuY29uc3QgY3JlYXRlTW9ja0NhcmQgPSAoKSA9PiAoe1xyXG4gIGZyb250Q29udGVudDoge1xyXG4gICAgdGl0bGU6ICfmtYvor5XljaHniYcnLFxyXG4gICAgdGV4dDogJ+ato+mdouWGheWuuScsXHJcbiAgICB0YWdzOiBbJ+a1i+ivleagh+etviddLFxyXG4gICAgc3R5bGU6IHsgYmFja2dyb3VuZENvbG9yOiAnI2ZmZmZmZicgfVxyXG4gIH0sXHJcbiAgYmFja0NvbnRlbnQ6IHtcclxuICAgIHRpdGxlOiAn6IOM6Z2i5qCH6aKYJyxcclxuICAgIHRleHQ6ICfog4zpnaLlhoXlrrknLFxyXG4gICAgdGFnczogWyfog4zpnaLmoIfnrb4nXSxcclxuICAgIHN0eWxlOiB7IGJhY2tncm91bmRDb2xvcjogJyNmMGYwZjAnIH1cclxuICB9LFxyXG4gIHN0eWxlOiB7XHJcbiAgICB0eXBlOiAnc29saWQnIGFzIGNvbnN0LFxyXG4gICAgY29sb3JzOiBbJyNmZmZmZmYnLCAnI2YwZjBmMCddXHJcbiAgfSxcclxuICBmb2xkZXJJZDogY3J5cHRvLnJhbmRvbVVVSUQoKSxcclxuICB1c2VySWQ6ICd0ZXN0LXVzZXInXHJcbn0pXHJcblxyXG5jb25zdCBjcmVhdGVNb2NrRm9sZGVyID0gKCkgPT4gKHtcclxuICBpZDogY3J5cHRvLnJhbmRvbVVVSUQoKSxcclxuICBuYW1lOiAn5rWL6K+V5paH5Lu25aS5JyxcclxuICBwYXJlbnRJZDogbnVsbCxcclxuICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXHJcbiAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpXHJcbn0pXHJcblxyXG4vLyDmqKHmi5/mlbDmja7lupNcclxuamVzdC5tb2NrKCcuLi8uLi9zZXJ2aWNlcy9kYXRhYmFzZS11bmlmaWVkJywgKCkgPT4ge1xyXG4gIGNvbnN0IG1vY2tUYWJsZSA9IHtcclxuICAgIGFkZDogamVzdC5mbigpLFxyXG4gICAgZ2V0OiBqZXN0LmZuKCksXHJcbiAgICB1cGRhdGU6IGplc3QuZm4oKSxcclxuICAgIGRlbGV0ZTogamVzdC5mbigpLFxyXG4gICAgd2hlcmU6IGplc3QuZm4oKCkgPT4gbW9ja1RhYmxlKSxcclxuICAgIHRvQXJyYXk6IGplc3QuZm4oKSxcclxuICAgIGJ1bGtBZGQ6IGplc3QuZm4oKSxcclxuICAgIGJ1bGtQdXQ6IGplc3QuZm4oKSxcclxuICAgIGJ1bGtEZWxldGU6IGplc3QuZm4oKSxcclxuICAgIGNvdW50OiBqZXN0LmZuKCksXHJcbiAgICBlcXVhbHM6IGplc3QuZm4oKCkgPT4gbW9ja1RhYmxlKSxcclxuICAgIHNvcnRCeTogamVzdC5mbigoKSA9PiBtb2NrVGFibGUpLFxyXG4gICAgb3JkZXJCeTogamVzdC5mbigoKSA9PiBtb2NrVGFibGUpLFxyXG4gICAgcmV2ZXJzZTogamVzdC5mbigoKSA9PiBtb2NrVGFibGUpLFxyXG4gICAgb2Zmc2V0OiBqZXN0LmZuKCgpID0+IG1vY2tUYWJsZSksXHJcbiAgICBsaW1pdDogamVzdC5mbigoKSA9PiBtb2NrVGFibGUpLFxyXG4gIH1cclxuXHJcbiAgY29uc3QgbW9ja0RiID0ge1xyXG4gICAgY2FyZHM6IHsgLi4ubW9ja1RhYmxlIH0sXHJcbiAgICBmb2xkZXJzOiB7IC4uLm1vY2tUYWJsZSB9LFxyXG4gICAgdGFnczogeyAuLi5tb2NrVGFibGUgfSxcclxuICAgIGNhcmRUYWdzOiB7IC4uLm1vY2tUYWJsZSB9LFxyXG4gICAgaW1hZ2VzOiB7IC4uLm1vY2tUYWJsZSB9LFxyXG4gICAgc3luY1F1ZXVlOiB7IC4uLm1vY2tUYWJsZSB9LFxyXG4gICAgc3luY09wZXJhdGlvbnM6IHsgLi4ubW9ja1RhYmxlIH0sXHJcbiAgICB0cmFuc2FjdGlvbjogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbihhc3luYyAobW9kZSwgdGFibGVzLCBjYWxsYmFjaykgPT4ge1xyXG4gICAgICByZXR1cm4gYXdhaXQgY2FsbGJhY2soKVxyXG4gICAgfSksXHJcbiAgICBvcGVuOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSksXHJcbiAgICBvbjogamVzdC5mbigpLFxyXG4gICAgY2xvc2U6IGplc3QuZm4oKSxcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBkYjogbW9ja0RiLFxyXG4gIH1cclxufSlcclxuXHJcbmRlc2NyaWJlKCdMb2NhbE9wZXJhdGlvblNlcnZpY2VPcHRpbWl6ZWQnLCAoKSA9PiB7XHJcbiAgbGV0IHNlcnZpY2U6IExvY2FsT3BlcmF0aW9uU2VydmljZU9wdGltaXplZFxyXG5cclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIC8vIOmHjee9ruacjeWKoeWunuS+i1xyXG4gICAgc2VydmljZSA9IG5ldyBMb2NhbE9wZXJhdGlvblNlcnZpY2VPcHRpbWl6ZWQoKVxyXG4gICAgXHJcbiAgICAvLyDmuIXnkIbmiYDmnInmqKHmi59cclxuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpXHJcbiAgfSlcclxuXHJcbiAgYWZ0ZXJFYWNoKCgpID0+IHtcclxuICAgIC8vIOa4heeQhuacjeWKoVxyXG4gICAgaWYgKHNlcnZpY2UuZGVzdHJveSkge1xyXG4gICAgICBzZXJ2aWNlLmRlc3Ryb3koKVxyXG4gICAgfVxyXG4gIH0pXHJcblxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAvLyDliJ3lp4vljJbmtYvor5VcclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gIGRlc2NyaWJlKCfliJ3lp4vljJYnLCAoKSA9PiB7XHJcbiAgICB0ZXN0KCflupTor6XmraPnoa7liJ3lp4vljJbmnI3liqEnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGF3YWl0IHNlcnZpY2UuaW5pdGlhbGl6ZSgpXHJcbiAgICAgIGV4cGVjdChzZXJ2aWNlKS50b0JlSW5zdGFuY2VPZihMb2NhbE9wZXJhdGlvblNlcnZpY2VPcHRpbWl6ZWQpXHJcbiAgICB9KVxyXG5cclxuICAgIHRlc3QoJ+W6lOivpeWkhOeQhuWIneWni+WMlumUmeivrycsIGFzeW5jICgpID0+IHtcclxuICAgICAgLy8g5qih5ouf5Yid5aeL5YyW6ZSZ6K+vXHJcbiAgICAgIGplc3Quc3B5T24oc2VydmljZSwgJ2luaXRpYWxpemUnIGFzIGFueSkubW9ja1JlamVjdGVkVmFsdWUobmV3IEVycm9yKCfliJ3lp4vljJblpLHotKUnKSlcclxuICAgICAgXHJcbiAgICAgIGF3YWl0IGV4cGVjdChzZXJ2aWNlLmluaXRpYWxpemUoKSkucmVqZWN0cy50b1Rocm93KCfliJ3lp4vljJblpLHotKUnKVxyXG4gICAgfSlcclxuICB9KVxyXG5cclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8g5Y2h54mH5pON5L2c5rWL6K+VXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICBkZXNjcmliZSgn5Y2h54mH5pON5L2cJywgKCkgPT4ge1xyXG4gICAgdGVzdCgn5bqU6K+l5oiQ5Yqf5Yib5bu65Y2h54mHJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBjYXJkRGF0YSA9IGNyZWF0ZU1vY2tDYXJkKClcclxuICAgICAgY29uc3QgbW9ja1Jlc3VsdCA9IHsgLi4uY2FyZERhdGEsIGlkOiBjcnlwdG8ucmFuZG9tVVVJRCgpIH1cclxuICAgICAgXHJcbiAgICAgIC8vIOaooeaLn+aVsOaNruW6k+i/lOWbnlxyXG4gICAgICBjb25zdCB7IGRiIH0gPSByZXF1aXJlKCcuLi8uLi9zZXJ2aWNlcy9kYXRhYmFzZS11bmlmaWVkJylcclxuICAgICAgZGIuY2FyZHMuYWRkLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tSZXN1bHQuaWQpXHJcbiAgICAgIFxyXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzZXJ2aWNlLmNyZWF0ZUNhcmQoY2FyZERhdGEpXHJcbiAgICAgIFxyXG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSlcclxuICAgICAgZXhwZWN0KHJlc3VsdC5pZCkudG9CZURlZmluZWQoKVxyXG4gICAgICAvLyDpqozor4HmlbDmja7lupPosIPnlKjvvIzkvYbmjqXlj5fmnI3liqHlj6/og73mt7vliqDkuobpop3lpJblrZfmrrVcclxuICAgICAgZXhwZWN0KGRiLmNhcmRzLmFkZCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXHJcbiAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xyXG4gICAgICAgICAgZnJvbnRDb250ZW50OiBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XHJcbiAgICAgICAgICAgIHRpdGxlOiBjYXJkRGF0YS5mcm9udENvbnRlbnQudGl0bGUsXHJcbiAgICAgICAgICAgIHRleHQ6IGNhcmREYXRhLmZyb250Q29udGVudC50ZXh0LFxyXG4gICAgICAgICAgfSksXHJcbiAgICAgICAgICBiYWNrQ29udGVudDogZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xyXG4gICAgICAgICAgICB0aXRsZTogY2FyZERhdGEuYmFja0NvbnRlbnQudGl0bGUsXHJcbiAgICAgICAgICAgIHRleHQ6IGNhcmREYXRhLmJhY2tDb250ZW50LnRleHQsXHJcbiAgICAgICAgICB9KSxcclxuICAgICAgICAgIHVzZXJJZDogY2FyZERhdGEudXNlcklkLFxyXG4gICAgICAgICAgZm9sZGVySWQ6IGNhcmREYXRhLmZvbGRlcklkLFxyXG4gICAgICAgIH0pXHJcbiAgICAgIClcclxuICAgIH0pXHJcblxyXG4gICAgdGVzdCgn5bqU6K+l5oiQ5Yqf6K+75Y+W5Y2h54mHJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBjYXJkSWQgPSBjcnlwdG8ucmFuZG9tVVVJRCgpXHJcbiAgICAgIGNvbnN0IG1vY2tDYXJkID0gY3JlYXRlTW9ja0NhcmQoKVxyXG4gICAgICBcclxuICAgICAgLy8g5qih5ouf5pWw5o2u5bqT6L+U5ZueXHJcbiAgICAgIGNvbnN0IHsgZGIgfSA9IHJlcXVpcmUoJy4uLy4uL3NlcnZpY2VzL2RhdGFiYXNlLXVuaWZpZWQnKVxyXG4gICAgICBkYi5jYXJkcy5nZXQubW9ja1Jlc29sdmVkVmFsdWUobW9ja0NhcmQpXHJcbiAgICAgIFxyXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzZXJ2aWNlLmdldENhcmQoY2FyZElkKVxyXG4gICAgICBcclxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChtb2NrQ2FyZClcclxuICAgICAgZXhwZWN0KGRiLmNhcmRzLmdldCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoY2FyZElkKVxyXG4gICAgfSlcclxuXHJcbiAgICB0ZXN0KCflupTor6XmiJDlip/mm7TmlrDljaHniYcnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGNhcmRJZCA9IGNyeXB0by5yYW5kb21VVUlEKClcclxuICAgICAgY29uc3QgdXBkYXRlRGF0YSA9IHsgdGl0bGU6ICfmm7TmlrDlkI7nmoTmoIfpopgnIH1cclxuICAgICAgXHJcbiAgICAgIC8vIOaooeaLn+aVsOaNruW6k+i/lOWbnlxyXG4gICAgICBjb25zdCB7IGRiIH0gPSByZXF1aXJlKCcuLi8uLi9zZXJ2aWNlcy9kYXRhYmFzZS11bmlmaWVkJylcclxuICAgICAgZGIuY2FyZHMudXBkYXRlLm1vY2tSZXNvbHZlZFZhbHVlKDEpXHJcbiAgICAgIFxyXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzZXJ2aWNlLnVwZGF0ZUNhcmQoY2FyZElkLCB1cGRhdGVEYXRhKVxyXG4gICAgICBcclxuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKHRydWUpXHJcbiAgICAgIGV4cGVjdChkYi5jYXJkcy51cGRhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGNhcmRJZCwgdXBkYXRlRGF0YSlcclxuICAgIH0pXHJcblxyXG4gICAgdGVzdCgn5bqU6K+l5oiQ5Yqf5Yig6Zmk5Y2h54mHJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBjYXJkSWQgPSBjcnlwdG8ucmFuZG9tVVVJRCgpXHJcbiAgICAgIFxyXG4gICAgICAvLyDmqKHmi5/mlbDmja7lupPov5Tlm55cclxuICAgICAgY29uc3QgeyBkYiB9ID0gcmVxdWlyZSgnLi4vLi4vc2VydmljZXMvZGF0YWJhc2UtdW5pZmllZCcpXHJcbiAgICAgIGRiLmNhcmRzLmRlbGV0ZS5tb2NrUmVzb2x2ZWRWYWx1ZSgxKVxyXG4gICAgICBcclxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2VydmljZS5kZWxldGVDYXJkKGNhcmRJZClcclxuICAgICAgXHJcbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKVxyXG4gICAgICBleHBlY3QoZGIuY2FyZHMuZGVsZXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChjYXJkSWQpXHJcbiAgICB9KVxyXG5cclxuICAgIHRlc3QoJ+W6lOivpeWkhOeQhuaVsOaNruW6k+aTjeS9nOmUmeivrycsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgY2FyZERhdGEgPSBjcmVhdGVNb2NrQ2FyZCgpXHJcbiAgICAgIFxyXG4gICAgICAvLyDmqKHmi5/mlbDmja7lupPplJnor69cclxuICAgICAgY29uc3QgeyBkYiB9ID0gcmVxdWlyZSgnLi4vLi4vc2VydmljZXMvZGF0YWJhc2UtdW5pZmllZCcpXHJcbiAgICAgIGRiLmNhcmRzLmFkZC5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ+aVsOaNruW6k+mUmeivrycpKVxyXG4gICAgICBcclxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2VydmljZS5jcmVhdGVDYXJkKGNhcmREYXRhKVxyXG4gICAgICBcclxuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKGZhbHNlKVxyXG4gICAgICBleHBlY3QocmVzdWx0LmVycm9yKS50b0JlKCfmlbDmja7lupPplJnor68nKVxyXG4gICAgfSlcclxuICB9KVxyXG5cclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8g5paH5Lu25aS55pON5L2c5rWL6K+VXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICBkZXNjcmliZSgn5paH5Lu25aS55pON5L2cJywgKCkgPT4ge1xyXG4gICAgdGVzdCgn5bqU6K+l5oiQ5Yqf5Yib5bu65paH5Lu25aS5JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBmb2xkZXJEYXRhID0gY3JlYXRlTW9ja0ZvbGRlcigpXHJcbiAgICAgIGNvbnN0IG1vY2tSZXN1bHQgPSB7IC4uLmZvbGRlckRhdGEsIGlkOiBjcnlwdG8ucmFuZG9tVVVJRCgpIH1cclxuICAgICAgXHJcbiAgICAgIC8vIOaooeaLn+aVsOaNruW6k+i/lOWbnlxyXG4gICAgICBjb25zdCB7IGRiIH0gPSByZXF1aXJlKCcuLi8uLi9zZXJ2aWNlcy9kYXRhYmFzZS11bmlmaWVkJylcclxuICAgICAgZGIuZm9sZGVycy5hZGQubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Jlc3VsdC5pZClcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNlcnZpY2UuY3JlYXRlRm9sZGVyKGZvbGRlckRhdGEpXHJcbiAgICAgIFxyXG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSlcclxuICAgICAgZXhwZWN0KHJlc3VsdC5pZCkudG9CZURlZmluZWQoKVxyXG4gICAgICBleHBlY3QoZGIuZm9sZGVycy5hZGQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGZvbGRlckRhdGEpXHJcbiAgICB9KVxyXG5cclxuICAgIHRlc3QoJ+W6lOivpeaIkOWKn+iOt+WPluaWh+S7tuWkuScsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgZm9sZGVySWQgPSBjcnlwdG8ucmFuZG9tVVVJRCgpXHJcbiAgICAgIGNvbnN0IG1vY2tGb2xkZXIgPSBjcmVhdGVNb2NrRm9sZGVyKClcclxuICAgICAgXHJcbiAgICAgIC8vIOaooeaLn+aVsOaNruW6k+i/lOWbnlxyXG4gICAgICBjb25zdCB7IGRiIH0gPSByZXF1aXJlKCcuLi8uLi9zZXJ2aWNlcy9kYXRhYmFzZS11bmlmaWVkJylcclxuICAgICAgZGIuZm9sZGVycy5nZXQubW9ja1Jlc29sdmVkVmFsdWUobW9ja0ZvbGRlcilcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNlcnZpY2UuZ2V0Rm9sZGVyKGZvbGRlcklkKVxyXG4gICAgICBcclxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChtb2NrRm9sZGVyKVxyXG4gICAgICBleHBlY3QoZGIuZm9sZGVycy5nZXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGZvbGRlcklkKVxyXG4gICAgfSlcclxuICB9KVxyXG5cclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8g5om56YeP5pON5L2c5rWL6K+VXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICBkZXNjcmliZSgn5om56YeP5pON5L2cJywgKCkgPT4ge1xyXG4gICAgdGVzdCgn5bqU6K+l5oiQ5Yqf5om56YeP5o+S5YWl5Y2h54mHJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBjYXJkcyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDEwIH0sICgpID0+IGNyZWF0ZU1vY2tDYXJkKCkpXHJcbiAgICAgIFxyXG4gICAgICAvLyDmqKHmi5/mlbDmja7lupPov5Tlm55cclxuICAgICAgY29uc3QgeyBkYiB9ID0gcmVxdWlyZSgnLi4vLi4vc2VydmljZXMvZGF0YWJhc2UtdW5pZmllZCcpXHJcbiAgICAgIGRiLmNhcmRzLmJ1bGtBZGQubW9ja1Jlc29sdmVkVmFsdWUoY2FyZHMubWFwKGMgPT4gYy5pZCkpXHJcbiAgICAgIFxyXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzZXJ2aWNlLmJ1bGtDcmVhdGVDYXJkcyhjYXJkcylcclxuICAgICAgXHJcbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKVxyXG4gICAgICBleHBlY3QocmVzdWx0LmNvdW50KS50b0JlKDEwKVxyXG4gICAgICBleHBlY3QoZGIuY2FyZHMuYnVsa0FkZCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoY2FyZHMpXHJcbiAgICB9KVxyXG5cclxuICAgIHRlc3QoJ+W6lOivpeaIkOWKn+aJuemHj+abtOaWsOWNoeeJhycsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgdXBkYXRlcyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDUgfSwgKF8sIGkpID0+ICh7XHJcbiAgICAgICAgaWQ6IGNyeXB0by5yYW5kb21VVUlEKCksXHJcbiAgICAgICAgY2hhbmdlczogeyB0aXRsZTogYOabtOaWsOagh+mimCAke2l9YCB9XHJcbiAgICAgIH0pKVxyXG4gICAgICBcclxuICAgICAgLy8g5qih5ouf5pWw5o2u5bqT6L+U5ZueXHJcbiAgICAgIGNvbnN0IHsgZGIgfSA9IHJlcXVpcmUoJy4uLy4uL3NlcnZpY2VzL2RhdGFiYXNlLXVuaWZpZWQnKVxyXG4gICAgICBkYi5jYXJkcy5idWxrUHV0Lm1vY2tSZXNvbHZlZFZhbHVlKHVwZGF0ZXMubGVuZ3RoKVxyXG4gICAgICBcclxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2VydmljZS5idWxrVXBkYXRlQ2FyZHModXBkYXRlcylcclxuICAgICAgXHJcbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKVxyXG4gICAgICBleHBlY3QocmVzdWx0LmNvdW50KS50b0JlKDUpXHJcbiAgICAgIGV4cGVjdChkYi5jYXJkcy5idWxrUHV0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcclxuICAgICAgICB1cGRhdGVzLm1hcCh1ID0+ICh7IC4uLmNyZWF0ZU1vY2tDYXJkKCksIC4uLnUuY2hhbmdlcywgaWQ6IHUuaWQgfSkpXHJcbiAgICAgIClcclxuICAgIH0pXHJcbiAgfSlcclxuXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gIC8vIOafpeivouaTjeS9nOa1i+ivlVxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgZGVzY3JpYmUoJ+afpeivouaTjeS9nCcsICgpID0+IHtcclxuICAgIHRlc3QoJ+W6lOivpeaIkOWKn+afpeivouWNoeeJh+WIl+ihqCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgbW9ja0NhcmRzID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogNSB9LCAoKSA9PiBjcmVhdGVNb2NrQ2FyZCgpKVxyXG4gICAgICBcclxuICAgICAgLy8g5qih5ouf5pWw5o2u5bqT6L+U5ZueXHJcbiAgICAgIGNvbnN0IHsgZGIgfSA9IHJlcXVpcmUoJy4uLy4uL3NlcnZpY2VzL2RhdGFiYXNlLXVuaWZpZWQnKVxyXG4gICAgICBkYi5jYXJkcy50b0FycmF5Lm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tDYXJkcylcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNlcnZpY2UuZ2V0QWxsQ2FyZHMoKVxyXG4gICAgICBcclxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChtb2NrQ2FyZHMpXHJcbiAgICAgIGV4cGVjdChkYi5jYXJkcy50b0FycmF5KS50b0hhdmVCZWVuQ2FsbGVkKClcclxuICAgIH0pXHJcblxyXG4gICAgdGVzdCgn5bqU6K+l5pSv5oyB5p2h5Lu25p+l6K+iJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBmb2xkZXJJZCA9IGNyeXB0by5yYW5kb21VVUlEKClcclxuICAgICAgY29uc3QgbW9ja0NhcmRzID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogMyB9LCAoKSA9PiAoe1xyXG4gICAgICAgIC4uLmNyZWF0ZU1vY2tDYXJkKCksXHJcbiAgICAgICAgZm9sZGVySWRcclxuICAgICAgfSkpXHJcbiAgICAgIFxyXG4gICAgICAvLyDmqKHmi5/mlbDmja7lupPov5Tlm55cclxuICAgICAgY29uc3QgeyBkYiB9ID0gcmVxdWlyZSgnLi4vLi4vc2VydmljZXMvZGF0YWJhc2UtdW5pZmllZCcpXHJcbiAgICAgIGNvbnN0IHdoZXJlTW9jayA9IHtcclxuICAgICAgICBlcXVhbHM6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrQ2FyZHMpXHJcbiAgICAgIH1cclxuICAgICAgZGIuY2FyZHMud2hlcmUubW9ja1JldHVyblZhbHVlKHdoZXJlTW9jaylcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNlcnZpY2UuZ2V0Q2FyZHNCeUZvbGRlcihmb2xkZXJJZClcclxuICAgICAgXHJcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwobW9ja0NhcmRzKVxyXG4gICAgICBleHBlY3QoZGIuY2FyZHMud2hlcmUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdmb2xkZXJJZCcpXHJcbiAgICAgIGV4cGVjdCh3aGVyZU1vY2suZXF1YWxzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChmb2xkZXJJZClcclxuICAgIH0pXHJcbiAgfSlcclxuXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gIC8vIOWQjOatpeaTjeS9nOa1i+ivlVxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgZGVzY3JpYmUoJ+WQjOatpeaTjeS9nCcsICgpID0+IHtcclxuICAgIHRlc3QoJ+W6lOivpeato+ehruiusOW9leWQjOatpeaTjeS9nCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3Qgb3BlcmF0aW9uID0ge1xyXG4gICAgICAgIHR5cGU6ICdjcmVhdGUnIGFzIGNvbnN0LFxyXG4gICAgICAgIGVudGl0eVR5cGU6ICdjYXJkJyBhcyBjb25zdCxcclxuICAgICAgICBlbnRpdHlJZDogY3J5cHRvLnJhbmRvbVVVSUQoKSxcclxuICAgICAgICBkYXRhOiBjcmVhdGVNb2NrQ2FyZCgpLFxyXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvLyDmqKHmi5/mlbDmja7lupPov5Tlm55cclxuICAgICAgY29uc3QgeyBkYiB9ID0gcmVxdWlyZSgnLi4vLi4vc2VydmljZXMvZGF0YWJhc2UtdW5pZmllZCcpXHJcbiAgICAgIGRiLnN5bmNPcGVyYXRpb25zLmFkZC5tb2NrUmVzb2x2ZWRWYWx1ZShjcnlwdG8ucmFuZG9tVVVJRCgpKVxyXG4gICAgICBcclxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2VydmljZS5yZWNvcmRTeW5jT3BlcmF0aW9uKG9wZXJhdGlvbilcclxuICAgICAgXHJcbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKVxyXG4gICAgICBleHBlY3QoZGIuc3luY09wZXJhdGlvbnMuYWRkKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChvcGVyYXRpb24pXHJcbiAgICB9KVxyXG5cclxuICAgIHRlc3QoJ+W6lOivpeiOt+WPluW+heWQjOatpeaTjeS9nCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgbW9ja09wZXJhdGlvbnMgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiAzIH0sICgpID0+ICh7XHJcbiAgICAgICAgaWQ6IGNyeXB0by5yYW5kb21VVUlEKCksXHJcbiAgICAgICAgdHlwZTogJ2NyZWF0ZScsXHJcbiAgICAgICAgZW50aXR5VHlwZTogJ2NhcmQnLFxyXG4gICAgICAgIGVudGl0eUlkOiBjcnlwdG8ucmFuZG9tVVVJRCgpLFxyXG4gICAgICAgIGRhdGE6IGNyZWF0ZU1vY2tDYXJkKCksXHJcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpXHJcbiAgICAgIH0pKVxyXG4gICAgICBcclxuICAgICAgLy8g5qih5ouf5pWw5o2u5bqT6L+U5ZueXHJcbiAgICAgIGNvbnN0IHsgZGIgfSA9IHJlcXVpcmUoJy4uLy4uL3NlcnZpY2VzL2RhdGFiYXNlLXVuaWZpZWQnKVxyXG4gICAgICBkYi5zeW5jT3BlcmF0aW9ucy50b0FycmF5Lm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tPcGVyYXRpb25zKVxyXG4gICAgICBcclxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2VydmljZS5nZXRQZW5kaW5nU3luY09wZXJhdGlvbnMoKVxyXG4gICAgICBcclxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChtb2NrT3BlcmF0aW9ucylcclxuICAgICAgZXhwZWN0KGRiLnN5bmNPcGVyYXRpb25zLnRvQXJyYXkpLnRvSGF2ZUJlZW5DYWxsZWQoKVxyXG4gICAgfSlcclxuICB9KVxyXG5cclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8g5oCn6IO955uR5o6n5rWL6K+VXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICBkZXNjcmliZSgn5oCn6IO955uR5o6nJywgKCkgPT4ge1xyXG4gICAgdGVzdCgn5bqU6K+l6K6w5b2V5pON5L2c6ICX5pe2JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBjYXJkRGF0YSA9IGNyZWF0ZU1vY2tDYXJkKClcclxuICAgICAgY29uc3QgbW9ja1Jlc3VsdCA9IHsgLi4uY2FyZERhdGEsIGlkOiBjcnlwdG8ucmFuZG9tVVVJRCgpIH1cclxuICAgICAgXHJcbiAgICAgIC8vIOaooeaLn+aVsOaNruW6k+i/lOWbnlxyXG4gICAgICBjb25zdCB7IGRiIH0gPSByZXF1aXJlKCcuLi8uLi9zZXJ2aWNlcy9kYXRhYmFzZS11bmlmaWVkJylcclxuICAgICAgZGIuY2FyZHMuYWRkLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tSZXN1bHQuaWQpXHJcbiAgICAgIFxyXG4gICAgICAvLyDnm5HmjqfmgKfog71cclxuICAgICAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcclxuICAgICAgYXdhaXQgc2VydmljZS5jcmVhdGVDYXJkKGNhcmREYXRhKVxyXG4gICAgICBjb25zdCBlbmRUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcclxuICAgICAgXHJcbiAgICAgIGV4cGVjdChlbmRUaW1lIC0gc3RhcnRUaW1lKS50b0JlR3JlYXRlclRoYW4oMClcclxuICAgIH0pXHJcblxyXG4gICAgdGVzdCgn5bqU6K+l5aSE55CG5aSn6YeP5pWw5o2u5pON5L2cJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBsYXJnZURhdGFzZXQgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiAxMDAgfSwgKCkgPT4gY3JlYXRlTW9ja0NhcmQoKSlcclxuICAgICAgXHJcbiAgICAgIC8vIOaooeaLn+aVsOaNruW6k+i/lOWbnlxyXG4gICAgICBjb25zdCB7IGRiIH0gPSByZXF1aXJlKCcuLi8uLi9zZXJ2aWNlcy9kYXRhYmFzZS11bmlmaWVkJylcclxuICAgICAgZGIuY2FyZHMuYnVsa0FkZC5tb2NrUmVzb2x2ZWRWYWx1ZShsYXJnZURhdGFzZXQubWFwKGMgPT4gYy5pZCkpXHJcbiAgICAgIFxyXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzZXJ2aWNlLmJ1bGtDcmVhdGVDYXJkcyhsYXJnZURhdGFzZXQpXHJcbiAgICAgIFxyXG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSlcclxuICAgICAgZXhwZWN0KHJlc3VsdC5jb3VudCkudG9CZSgxMDApXHJcbiAgICB9KVxyXG4gIH0pXHJcblxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAvLyDplJnor6/lpITnkIbmtYvor5VcclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gIGRlc2NyaWJlKCfplJnor6/lpITnkIYnLCAoKSA9PiB7XHJcbiAgICB0ZXN0KCflupTor6XmraPnoa7lpITnkIbml6DmlYjovpPlhaUnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIC8vIOa1i+ivleepuuaVsOaNrlxyXG4gICAgICBjb25zdCByZXN1bHQxID0gYXdhaXQgc2VydmljZS5jcmVhdGVDYXJkKHt9IGFzIGFueSlcclxuICAgICAgZXhwZWN0KHJlc3VsdDEuc3VjY2VzcykudG9CZShmYWxzZSlcclxuICAgICAgXHJcbiAgICAgIC8vIOa1i+ivleaXoOaViElEXHJcbiAgICAgIGNvbnN0IHJlc3VsdDIgPSBhd2FpdCBzZXJ2aWNlLmdldENhcmQoJycpXHJcbiAgICAgIGV4cGVjdChyZXN1bHQyKS50b0JlTnVsbCgpXHJcbiAgICAgIFxyXG4gICAgICAvLyDmtYvor5Xml6DmlYjmm7TmlrBcclxuICAgICAgY29uc3QgcmVzdWx0MyA9IGF3YWl0IHNlcnZpY2UudXBkYXRlQ2FyZCgnJywge30pXHJcbiAgICAgIGV4cGVjdChyZXN1bHQzLnN1Y2Nlc3MpLnRvQmUoZmFsc2UpXHJcbiAgICB9KVxyXG5cclxuICAgIHRlc3QoJ+W6lOivpeWkhOeQhuW5tuWPkeaTjeS9nCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgY2FyZERhdGEgPSBjcmVhdGVNb2NrQ2FyZCgpXHJcbiAgICAgIGNvbnN0IG1vY2tSZXN1bHQgPSB7IC4uLmNhcmREYXRhLCBpZDogY3J5cHRvLnJhbmRvbVVVSUQoKSB9XHJcbiAgICAgIFxyXG4gICAgICAvLyDmqKHmi5/mlbDmja7lupPov5Tlm55cclxuICAgICAgY29uc3QgeyBkYiB9ID0gcmVxdWlyZSgnLi4vLi4vc2VydmljZXMvZGF0YWJhc2UtdW5pZmllZCcpXHJcbiAgICAgIGRiLmNhcmRzLmFkZC5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrUmVzdWx0LmlkKVxyXG4gICAgICBcclxuICAgICAgLy8g5bm25Y+R5Yib5bu65aSa5Liq5Y2h54mHXHJcbiAgICAgIGNvbnN0IHByb21pc2VzID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogNSB9LCAoKSA9PiBzZXJ2aWNlLmNyZWF0ZUNhcmQoY2FyZERhdGEpKVxyXG4gICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpXHJcbiAgICAgIFxyXG4gICAgICBleHBlY3QocmVzdWx0cykudG9IYXZlTGVuZ3RoKDUpXHJcbiAgICAgIGV4cGVjdChyZXN1bHRzLmV2ZXJ5KHIgPT4gci5zdWNjZXNzKSkudG9CZSh0cnVlKVxyXG4gICAgfSlcclxuICB9KVxyXG59KSJdLCJ2ZXJzaW9uIjozfQ==
{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\tests\\performance\\local-operation-performance.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\tests\\performance\\local-operation-performance.test.ts"],"sourcesContent":["/**\r\n * LocalOperationService 性能测试\r\n * 验证本地操作响应时间和性能指标\r\n */\r\n\r\nimport { localOperationServiceOptimized } from '../src/services/local-operation-service'\r\nimport { db } from '../src/services/database-unified'\r\n\r\n// ============================================================================\r\n// 测试配置\r\n// ============================================================================\r\n\r\ninterface TestConfig {\r\n  iterations: number\r\n  batchSize: number\r\n  testData: any[]\r\n}\r\n\r\ninterface TestResult {\r\n  operation: string\r\n  totalDuration: number\r\n  averageDuration: number\r\n  minDuration: number\r\n  maxDuration: number\r\n  successRate: number\r\n  withinThreshold: boolean\r\n}\r\n\r\n// ============================================================================\r\n// 测试数据生成器\r\n// ============================================================================\r\n\r\nclass TestDataGenerator {\r\n  static generateCardData(count: number = 1) {\r\n    const cards = []\r\n    \r\n    for (let i = 0; i < count; i++) {\r\n      cards.push({\r\n        frontContent: {\r\n          title: `Test Card ${i + 1}`,\r\n          text: `This is test card number ${i + 1} with some sample content.`,\r\n          tags: [`tag${i % 5}`, `test`, `generated`]\r\n        },\r\n        backContent: {\r\n          title: `Back ${i + 1}`,\r\n          text: `Back content for card ${i + 1}`,\r\n          tags: [`back${i % 3}`, `test`]\r\n        },\r\n        style: {\r\n          type: ['solid', 'gradient', 'glass'][Math.floor(Math.random() * 3)],\r\n          colors: ['#ff6b6b', '#4ecdc4', '#45b7d1']\r\n        },\r\n        userId: 'test_user'\r\n      })\r\n    }\r\n    \r\n    return cards\r\n  }\r\n  \r\n  static generateSearchTerms(count: number = 10): string[] {\r\n    const terms = [\r\n      'test', 'card', 'content', 'back', 'front', 'title', \r\n      'sample', 'generated', 'data', 'performance'\r\n    ]\r\n    \r\n    const searchTerms = []\r\n    for (let i = 0; i < count; i++) {\r\n      searchTerms.push(terms[Math.floor(Math.random() * terms.length)])\r\n    }\r\n    \r\n    return searchTerms\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// 性能测试执行器\r\n// ============================================================================\r\n\r\nclass PerformanceTestRunner {\r\n  private results: TestResult[] = []\r\n  private thresholdMs = 100 // 100ms 阈值\r\n\r\n  async runAllTests(): Promise<TestResult[]> {\r\n    console.log('🚀 开始 LocalOperationService 性能测试...')\r\n    \r\n    // 确保数据库初始化\r\n    await db.open()\r\n    \r\n    // 运行所有测试\r\n    await this.testCreateCard()\r\n    await this.testUpdateCard()\r\n    await this.testDeleteCard()\r\n    await this.testBulkCreate()\r\n    await this.testGetCards()\r\n    await this.testSearchCards()\r\n    \r\n    // 输出测试结果\r\n    this.printResults()\r\n    \r\n    return this.results\r\n  }\r\n\r\n  private async testCreateCard(): Promise<void> {\r\n    console.log('\\n📝 测试创建卡片性能...')\r\n    \r\n    const testData = TestDataGenerator.generateCardData(50)\r\n    const durations: number[] = []\r\n    let successCount = 0\r\n    \r\n    for (const cardData of testData) {\r\n      const startTime = performance.now()\r\n      \r\n      try {\r\n        const result = await localOperationServiceOptimized.createCard(cardData)\r\n        const duration = performance.now() - startTime\r\n        \r\n        durations.push(duration)\r\n        if (result.success) successCount++\r\n        \r\n        // 清理测试数据\r\n        if (result.success && result.id) {\r\n          await db.cards.delete(result.id)\r\n        }\r\n      } catch (error) {\r\n        const duration = performance.now() - startTime\r\n        durations.push(duration)\r\n        console.error(`Create card failed:`, error)\r\n      }\r\n    }\r\n    \r\n    this.addTestResult('createCard', durations, successCount, testData.length)\r\n  }\r\n\r\n  private async testUpdateCard(): Promise<void> {\r\n    console.log('\\n✏️ 测试更新卡片性能...')\r\n    \r\n    // 先创建测试卡片\r\n    const testCard = await localOperationServiceOptimized.createCard(\r\n      TestDataGenerator.generateCardData(1)[0]\r\n    )\r\n    \r\n    if (!testCard.success || !testCard.id) {\r\n      console.error('无法创建测试卡片进行更新测试')\r\n      return\r\n    }\r\n    \r\n    const durations: number[] = []\r\n    let successCount = 0\r\n    \r\n    for (let i = 0; i < 50; i++) {\r\n      const startTime = performance.now()\r\n      \r\n      try {\r\n        const result = await localOperationServiceOptimized.updateCard(testCard.id, {\r\n          frontContent: {\r\n            title: `Updated Title ${i}`,\r\n            text: `Updated content ${i}`\r\n          }\r\n        })\r\n        const duration = performance.now() - startTime\r\n        \r\n        durations.push(duration)\r\n        if (result.success) successCount++\r\n      } catch (error) {\r\n        const duration = performance.now() - startTime\r\n        durations.push(duration)\r\n        console.error(`Update card failed:`, error)\r\n      }\r\n    }\r\n    \r\n    // 清理测试数据\r\n    await db.cards.delete(testCard.id)\r\n    \r\n    this.addTestResult('updateCard', durations, successCount, 50)\r\n  }\r\n\r\n  private async testDeleteCard(): Promise<void> {\r\n    console.log('\\n🗑️ 测试删除卡片性能...')\r\n    \r\n    // 先创建测试卡片\r\n    const testCards: any[] = []\r\n    for (let i = 0; i < 50; i++) {\r\n      const result = await localOperationServiceOptimized.createCard(\r\n        TestDataGenerator.generateCardData(1)[0]\r\n      )\r\n      if (result.success && result.id) {\r\n        testCards.push(result)\r\n      }\r\n    }\r\n    \r\n    const durations: number[] = []\r\n    let successCount = 0\r\n    \r\n    for (const card of testCards) {\r\n      const startTime = performance.now()\r\n      \r\n      try {\r\n        const result = await localOperationServiceOptimized.deleteCard(card.id)\r\n        const duration = performance.now() - startTime\r\n        \r\n        durations.push(duration)\r\n        if (result.success) successCount++\r\n      } catch (error) {\r\n        const duration = performance.now() - startTime\r\n        durations.push(duration)\r\n        console.error(`Delete card failed:`, error)\r\n      }\r\n    }\r\n    \r\n    this.addTestResult('deleteCard', durations, successCount, testCards.length)\r\n  }\r\n\r\n  private async testBulkCreate(): Promise<void> {\r\n    console.log('\\n📦 测试批量创建卡片性能...')\r\n    \r\n    const batchSizes = [10, 25, 50]\r\n    \r\n    for (const batchSize of batchSizes) {\r\n      const testData = TestDataGenerator.generateCardData(batchSize)\r\n      const durations: number[] = []\r\n      \r\n      for (let i = 0; i < 10; i++) { // 每个批次大小测试10次\r\n        const startTime = performance.now()\r\n        \r\n        try {\r\n          const results = await localOperationServiceOptimized.bulkCreateCards(testData)\r\n          const duration = performance.now() - startTime\r\n          \r\n          durations.push(duration)\r\n          \r\n          // 清理测试数据\r\n          for (const result of results) {\r\n            if (result.success && result.id) {\r\n              await db.cards.delete(result.id)\r\n            }\r\n          }\r\n        } catch (error) {\r\n          const duration = performance.now() - startTime\r\n          durations.push(duration)\r\n          console.error(`Bulk create failed:`, error)\r\n        }\r\n      }\r\n      \r\n      this.addTestResult(`bulkCreate_${batchSize}`, durations, durations.length, durations.length)\r\n    }\r\n  }\r\n\r\n  private async testGetCards(): Promise<void> {\r\n    console.log('\\n📋 测试获取卡片列表性能...')\r\n    \r\n    // 创建一些测试数据\r\n    const testData = TestDataGenerator.generateCardData(100)\r\n    const createdCards: any[] = []\r\n    \r\n    for (const cardData of testData) {\r\n      const result = await localOperationServiceOptimized.createCard(cardData)\r\n      if (result.success && result.id) {\r\n        createdCards.push(result)\r\n      }\r\n    }\r\n    \r\n    const durations: number[] = []\r\n    const testOptions = [\r\n      { limit: 10 },\r\n      { limit: 50 },\r\n      { limit: 100 },\r\n      { folderId: createdCards[0]?.id ? 'test_folder' : undefined, limit: 25 }\r\n    ]\r\n    \r\n    for (const options of testOptions) {\r\n      const startTime = performance.now()\r\n      \r\n      try {\r\n        await localOperationServiceOptimized.getCards(options)\r\n        const duration = performance.now() - startTime\r\n        durations.push(duration)\r\n      } catch (error) {\r\n        const duration = performance.now() - startTime\r\n        durations.push(duration)\r\n        console.error(`Get cards failed:`, error)\r\n      }\r\n    }\r\n    \r\n    // 清理测试数据\r\n    for (const card of createdCards) {\r\n      await db.cards.delete(card.id)\r\n    }\r\n    \r\n    this.addTestResult('getCards', durations, durations.length, durations.length)\r\n  }\r\n\r\n  private async testSearchCards(): Promise<void> {\r\n    console.log('\\n🔍 测试搜索卡片性能...')\r\n    \r\n    // 创建测试数据\r\n    const testData = TestDataGenerator.generateCardData(50)\r\n    const createdCards: any[] = []\r\n    \r\n    for (const cardData of testData) {\r\n      const result = await localOperationServiceOptimized.createCard(cardData)\r\n      if (result.success && result.id) {\r\n        createdCards.push(result)\r\n      }\r\n    }\r\n    \r\n    const searchTerms = TestDataGenerator.generateSearchTerms(20)\r\n    const durations: number[] = []\r\n    \r\n    for (const searchTerm of searchTerms) {\r\n      const startTime = performance.now()\r\n      \r\n      try {\r\n        await localOperationServiceOptimized.searchCards({\r\n          term: searchTerm,\r\n          limit: 25\r\n        })\r\n        const duration = performance.now() - startTime\r\n        durations.push(duration)\r\n      } catch (error) {\r\n        const duration = performance.now() - startTime\r\n        durations.push(duration)\r\n        console.error(`Search cards failed:`, error)\r\n      }\r\n    }\r\n    \r\n    // 清理测试数据\r\n    for (const card of createdCards) {\r\n      await db.cards.delete(card.id)\r\n    }\r\n    \r\n    this.addTestResult('searchCards', durations, durations.length, durations.length)\r\n  }\r\n\r\n  private addTestResult(operation: string, durations: number[], successCount: number, totalCount: number): void {\r\n    const totalDuration = durations.reduce((sum, d) => sum + d, 0)\r\n    const averageDuration = totalDuration / durations.length\r\n    const minDuration = Math.min(...durations)\r\n    const maxDuration = Math.max(...durations)\r\n    const successRate = successCount / totalCount\r\n    \r\n    const result: TestResult = {\r\n      operation,\r\n      totalDuration,\r\n      averageDuration,\r\n      minDuration,\r\n      maxDuration,\r\n      successRate,\r\n      withinThreshold: averageDuration <= this.thresholdMs\r\n    }\r\n    \r\n    this.results.push(result)\r\n  }\r\n\r\n  private printResults(): void {\r\n    console.log('\\n📊 性能测试结果:')\r\n    console.log('='.repeat(80))\r\n    \r\n    const header = '| 操作类型               | 平均时间 | 最小时间 | 最大时间 | 成功率 | 达标 |'\r\n    console.log(header)\r\n    console.log('|' + '-'.repeat(78) + '|')\r\n    \r\n    for (const result of this.results) {\r\n      const status = result.withinThreshold ? '✅' : '❌'\r\n      const row = `| ${result.operation.padEnd(22)} | ${result.averageDuration.toFixed(2).padStart(8)}ms | ${result.minDuration.toFixed(2).padStart(8)}ms | ${result.maxDuration.toFixed(2).padStart(8)}ms | ${(result.successRate * 100).toFixed(1).padStart(5)}% | ${status.padEnd(4)} |`\r\n      console.log(row)\r\n    }\r\n    \r\n    console.log('\\n📈 总体统计:')\r\n    const avgTime = this.results.reduce((sum, r) => sum + r.averageDuration, 0) / this.results.length\r\n    const overallSuccessRate = this.results.reduce((sum, r) => sum + r.successRate, 0) / this.results.length\r\n    const passCount = this.results.filter(r => r.withinThreshold).length\r\n    \r\n    console.log(`平均响应时间: ${avgTime.toFixed(2)}ms`)\r\n    console.log(`总体成功率: ${(overallSuccessRate * 100).toFixed(1)}%`)\r\n    console.log(`达标操作数: ${passCount}/${this.results.length}`)\r\n    console.log(`达标率: ${(passCount / this.results.length * 100).toFixed(1)}%`)\r\n    \r\n    console.log('\\n🎯 性能目标验证:')\r\n    if (avgTime <= 50) {\r\n      console.log('✅ 平均响应时间 < 50ms: 达标')\r\n    } else {\r\n      console.log(`❌ 平均响应时间 < 50ms: 未达标 (实际: ${avgTime.toFixed(2)}ms)`)\r\n    }\r\n    \r\n    if (overallSuccessRate >= 0.99) {\r\n      console.log('✅ 成功率 >= 99%: 达标')\r\n    } else {\r\n      console.log(`❌ 成功率 >= 99%: 未达标 (实际: ${(overallSuccessRate * 100).toFixed(1)}%)`)\r\n    }\r\n    \r\n    if (passCount === this.results.length) {\r\n      console.log('✅ 所有操作响应时间 < 100ms: 达标')\r\n    } else {\r\n      console.log(`❌ 所有操作响应时间 < 100ms: 未达标 (达标: ${passCount}/${this.results.length})`)\r\n    }\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// 内存使用测试\r\n// ============================================================================\r\n\r\nclass MemoryUsageTest {\r\n  async runMemoryTest(): Promise<void> {\r\n    console.log('\\n💾 内存使用测试...')\r\n    \r\n    // 获取初始内存使用\r\n    const initialMemory = this.getMemoryUsage()\r\n    console.log(`初始内存使用: ${(initialMemory.usedJSHeapSize / 1024 / 1024).toFixed(2)} MB`)\r\n    \r\n    // 执行大量操作\r\n    const testData = TestDataGenerator.generateCardData(1000)\r\n    const startTime = performance.now()\r\n    \r\n    const createdCards: any[] = []\r\n    for (const cardData of testData) {\r\n      const result = await localOperationServiceOptimized.createCard(cardData)\r\n      if (result.success && result.id) {\r\n        createdCards.push(result)\r\n      }\r\n    }\r\n    \r\n    // 获取峰值内存使用\r\n    const peakMemory = this.getMemoryUsage()\r\n    console.log(`峰值内存使用: ${(peakMemory.usedJSHeapSize / 1024 / 1024).toFixed(2)} MB`)\r\n    \r\n    // 清理数据\r\n    for (const card of createdCards) {\r\n      await db.cards.delete(card.id)\r\n    }\r\n    \r\n    // 获取清理后内存使用\r\n    const finalMemory = this.getMemoryUsage()\r\n    console.log(`清理后内存使用: ${(finalMemory.usedJSHeapSize / 1024 / 1024).toFixed(2)} MB`)\r\n    \r\n    const memoryIncrease = peakMemory.usedJSHeapSize - initialMemory.usedJSHeapSize\r\n    console.log(`内存增长: ${(memoryIncrease / 1024 / 1024).toFixed(2)} MB`)\r\n    \r\n    const duration = performance.now() - startTime\r\n    console.log(`创建1000张卡片耗时: ${duration.toFixed(2)}ms`)\r\n    console.log(`平均每张卡片耗时: ${(duration / 1000).toFixed(2)}ms`)\r\n    \r\n    // 验证内存使用目标\r\n    if (memoryIncrease < 50 * 1024 * 1024) { // 50MB\r\n      console.log('✅ 内存使用增长 < 50MB: 达标')\r\n    } else {\r\n      console.log(`❌ 内存使用增长 < 50MB: 未达标 (实际: ${(memoryIncrease / 1024 / 1024).toFixed(2)}MB)`)\r\n    }\r\n  }\r\n  \r\n  private getMemoryUsage() {\r\n    if ('memory' in performance) {\r\n      return (performance as any).memory\r\n    }\r\n    return {\r\n      usedJSHeapSize: 0,\r\n      totalJSHeapSize: 0,\r\n      jsHeapSizeLimit: 0\r\n    }\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// 并发性能测试\r\n// ============================================================================\r\n\r\nclass ConcurrencyTest {\r\n  async runConcurrencyTest(): Promise<void> {\r\n    console.log('\\n⚡ 并发性能测试...')\r\n    \r\n    const concurrentOperations = 50\r\n    const testData = TestDataGenerator.generateCardData(concurrentOperations)\r\n    \r\n    const startTime = performance.now()\r\n    \r\n    // 并发执行创建操作\r\n    const promises = testData.map(cardData => \r\n      localOperationServiceOptimized.createCard(cardData)\r\n    )\r\n    \r\n    const results = await Promise.all(promises)\r\n    const duration = performance.now() - startTime\r\n    \r\n    const successCount = results.filter(r => r.success).length\r\n    const averageTime = duration / concurrentOperations\r\n    \r\n    console.log(`并发创建${concurrentOperations}张卡片耗时: ${duration.toFixed(2)}ms`)\r\n    console.log(`平均每张卡片耗时: ${averageTime.toFixed(2)}ms`)\r\n    console.log(`成功率: ${(successCount / concurrentOperations * 100).toFixed(1)}%`)\r\n    \r\n    // 清理测试数据\r\n    for (const result of results) {\r\n      if (result.success && result.id) {\r\n        await db.cards.delete(result.id)\r\n      }\r\n    }\r\n    \r\n    // 验证并发性能目标\r\n    if (averageTime <= 100) {\r\n      console.log('✅ 并发操作平均时间 < 100ms: 达标')\r\n    } else {\r\n      console.log(`❌ 并发操作平均时间 < 100ms: 未达标 (实际: ${averageTime.toFixed(2)}ms)`)\r\n    }\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// 小数据集优化测试\r\n// ============================================================================\r\n\r\nclass SmallDatasetOptimizationTest {\r\n  async runSmallDatasetTest(): Promise<void> {\r\n    console.log('\\n📊 小数据集优化测试...')\r\n    \r\n    // 创建小数据集测试数据 (9 cards, 8 folders, 13 tags)\r\n    const smallCards = TestDataGenerator.generateCardData(9)\r\n    const createdCards: any[] = []\r\n    \r\n    console.log('创建小数据集测试数据...')\r\n    for (const cardData of smallCards) {\r\n      const result = await localOperationServiceOptimized.createCard(cardData)\r\n      if (result.success && result.id) {\r\n        createdCards.push(result)\r\n      }\r\n    }\r\n    \r\n    console.log(`✅ 创建了 ${createdCards.length} 张测试卡片`)\r\n    \r\n    // 测试小数据集查询性能\r\n    const queryTestResults = await this.testQueryPerformance(createdCards)\r\n    \r\n    // 测试内存缓存效果\r\n    const cacheTestResults = await this.testCacheEffectiveness(createdCards)\r\n    \r\n    // 测试搜索性能\r\n    const searchTestResults = await this.testSearchPerformance(createdCards)\r\n    \r\n    // 清理测试数据\r\n    console.log('清理小数据集测试数据...')\r\n    for (const card of createdCards) {\r\n      await db.cards.delete(card.id)\r\n    }\r\n    \r\n    // 输出综合结果\r\n    console.log('\\n📈 小数据集优化测试结果:')\r\n    console.log(`查询性能: ${queryTestResults.averageQueryTime.toFixed(2)}ms (目标: < 10ms) ${queryTestResults.passed ? '✅' : '❌'}`)\r\n    console.log(`缓存命中率: ${(cacheTestResults.hitRate * 100).toFixed(1)}% (目标: > 90%) ${cacheTestResults.passed ? '✅' : '❌'}`)\r\n    console.log(`搜索性能: ${searchTestResults.averageSearchTime.toFixed(2)}ms (目标: < 15ms) ${searchTestResults.passed ? '✅' : '❌'}`)\r\n    \r\n    const allPassed = queryTestResults.passed && cacheTestResults.passed && searchTestResults.passed\r\n    console.log(`\\n小数据集优化总体: ${allPassed ? '✅ 通过' : '❌ 未通过'}`)\r\n    \r\n    return allPassed\r\n  }\r\n  \r\n  private async testQueryPerformance(cards: any[]): Promise<{\r\n    averageQueryTime: number\r\n    passed: boolean\r\n  }> {\r\n    console.log('测试小数据集查询性能...')\r\n    \r\n    const queryTimes: number[] = []\r\n    const testIterations = 20\r\n    \r\n    for (let i = 0; i < testIterations; i++) {\r\n      const startTime = performance.now()\r\n      \r\n      try {\r\n        await localOperationServiceOptimized.getCards({ limit: 9 })\r\n        const queryTime = performance.now() - startTime\r\n        queryTimes.push(queryTime)\r\n      } catch (error) {\r\n        console.warn(`查询测试 ${i + 1} 失败:`, error)\r\n      }\r\n    }\r\n    \r\n    const averageQueryTime = queryTimes.reduce((sum, time) => sum + time, 0) / queryTimes.length\r\n    const passed = averageQueryTime < 10 // 目标: 小于10ms\r\n    \r\n    console.log(`平均查询时间: ${averageQueryTime.toFixed(2)}ms`)\r\n    \r\n    return { averageQueryTime, passed }\r\n  }\r\n  \r\n  private async testCacheEffectiveness(cards: any[]): Promise<{\r\n    hitRate: number\r\n    passed: boolean\r\n  }> {\r\n    console.log('测试小数据集缓存效果...')\r\n    \r\n    let cacheHits = 0\r\n    const totalQueries = 15\r\n    \r\n    // 首次查询 (缓存未命中)\r\n    await localOperationServiceOptimized.getCards({ limit: 9 })\r\n    \r\n    // 重复查询 (测试缓存命中)\r\n    for (let i = 0; i < totalQueries; i++) {\r\n      const startTime = performance.now()\r\n      \r\n      try {\r\n        await localOperationServiceOptimized.getCards({ limit: 9 })\r\n        const queryTime = performance.now() - startTime\r\n        \r\n        // 如果查询时间小于1ms，认为是缓存命中\r\n        if (queryTime < 1) {\r\n          cacheHits++\r\n        }\r\n      } catch (error) {\r\n        console.warn(`缓存测试 ${i + 1} 失败:`, error)\r\n      }\r\n    }\r\n    \r\n    const hitRate = cacheHits / totalQueries\r\n    const passed = hitRate > 0.9 // 目标: 大于90%\r\n    \r\n    console.log(`缓存命中率: ${(hitRate * 100).toFixed(1)}%`)\r\n    \r\n    return { hitRate, passed }\r\n  }\r\n  \r\n  private async testSearchPerformance(cards: any[]): Promise<{\r\n    averageSearchTime: number\r\n    passed: boolean\r\n  }> {\r\n    console.log('测试小数据集搜索性能...')\r\n    \r\n    const searchTerms = ['test', 'card', 'content', 'title', 'back']\r\n    const searchTimes: number[] = []\r\n    \r\n    for (const term of searchTerms) {\r\n      const startTime = performance.now()\r\n      \r\n      try {\r\n        await localOperationServiceOptimized.searchCards({\r\n          term,\r\n          limit: 10\r\n        })\r\n        const searchTime = performance.now() - startTime\r\n        searchTimes.push(searchTime)\r\n      } catch (error) {\r\n        console.warn(`搜索测试失败:`, error)\r\n      }\r\n    }\r\n    \r\n    const averageSearchTime = searchTimes.reduce((sum, time) => sum + time, 0) / searchTimes.length\r\n    const passed = averageSearchTime < 15 // 目标: 小于15ms\r\n    \r\n    console.log(`平均搜索时间: ${averageSearchTime.toFixed(2)}ms`)\r\n    \r\n    return { averageSearchTime, passed }\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// 主测试入口\r\n// ============================================================================\r\n\r\nexport async function runLocalOperationPerformanceTests(): Promise<void> {\r\n  console.log('🧪 LocalOperationService 性能测试开始')\r\n  console.log('='.repeat(80))\r\n  \r\n  try {\r\n    // 运行基础性能测试\r\n    const testRunner = new PerformanceTestRunner()\r\n    await testRunner.runAllTests()\r\n    \r\n    // 运行内存使用测试\r\n    const memoryTest = new MemoryUsageTest()\r\n    await memoryTest.runMemoryTest()\r\n    \r\n    // 运行并发性能测试\r\n    const concurrencyTest = new ConcurrencyTest()\r\n    await concurrencyTest.runConcurrencyTest()\r\n    \r\n    // 运行小数据集优化测试\r\n    const smallDatasetTest = new SmallDatasetOptimizationTest()\r\n    await smallDatasetTest.runSmallDatasetTest()\r\n    \r\n    console.log('\\n🎉 所有性能测试完成!')\r\n    \r\n  } catch (error) {\r\n    console.error('\\n❌ 性能测试失败:', error)\r\n  }\r\n}\r\n\r\n// 如果直接运行此文件，执行测试\r\nif (typeof window !== 'undefined') {\r\n  // 浏览器环境\r\n  (window as any).runLocalOperationPerformanceTests = runLocalOperationPerformanceTests\r\n} else if (typeof process !== 'undefined') {\r\n  // Node.js环境\r\n  runLocalOperationPerformanceTests().catch(console.error)\r\n}"],"version":3}
{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\utils\\current-performance-baseline.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\utils\\current-performance-baseline.test.ts"],"sourcesContent":["/**\n * 当前性能基准测试\n * 测试currentPerformanceBaseline模块的所有功能\n */\n\n// Jest全局函数不需要导入\nimport {\n  currentPerformanceBaseline,\n  CurrentPerformanceBaseline,\n  calculateOverallImprovementTarget,\n  getHighPriorityOptimizations,\n  getCategoryImprovementTargets,\n  setPerformanceTargets,\n  generateOptimizationTimeline,\n  validateTargets,\n  initializePerformanceBaseline\n} from '../../utils/current-performance-baseline'\n\n// Mock performanceBenchmark\njest.mock('../../utils/performance-benchmark', () => ({\n  performanceBenchmark: {\n    setPerformanceTargets: jest.fn()\n  }\n}))\n\ndescribe('CurrentPerformanceBaseline', () => {\n  let consoleSpy: any\n\n  beforeEach(() => {\n    consoleSpy = {\n      log: jest.spyOn(console, 'log').mockImplementation(() => {}),\n      warn: jest.spyOn(console, 'warn').mockImplementation(() => {})\n    }\n    jest.clearAllMocks()\n  })\n\n  afterEach(() => {\n    jest.restoreAllMocks()\n  })\n\n  describe('性能基准数据结构', () => {\n    test('应该包含完整的性能基准数据', () => {\n      expect(Array.isArray(currentPerformanceBaseline)).toBe(true)\n      expect(currentPerformanceBaseline.length).toBeGreaterThan(0)\n\n      // 验证每个基准项的结构\n      currentPerformanceBaseline.forEach(baseline => {\n        expect(baseline).toHaveProperty('category')\n        expect(baseline).toHaveProperty('metric')\n        expect(baseline).toHaveProperty('currentValue')\n        expect(baseline).toHaveProperty('targetValue')\n        expect(baseline).toHaveProperty('unit')\n        expect(baseline).toHaveProperty('improvementTarget')\n        expect(baseline).toHaveProperty('priority')\n        expect(baseline).toHaveProperty('reasoning')\n\n        expect(['high', 'medium', 'low']).toContain(baseline.priority)\n        expect(typeof baseline.currentValue).toBe('number')\n        expect(typeof baseline.targetValue).toBe('number')\n        expect(typeof baseline.improvementTarget).toBe('number')\n        expect(baseline.currentValue).toBeGreaterThan(0)\n        expect(baseline.targetValue).toBeGreaterThan(0)\n        expect(baseline.improvementTarget).toBeGreaterThan(0)\n      })\n    })\n\n    test('应该包含所有性能分类', () => {\n      const categories = currentPerformanceBaseline.map(b => b.category)\n      const expectedCategories = ['加载性能', '运行时性能', '同步性能', '数据库性能', '网络性能']\n\n      expectedCategories.forEach(category => {\n        expect(categories).toContain(category)\n      })\n    })\n\n    test('应该有合理的改进目标', () => {\n      currentPerformanceBaseline.forEach(baseline => {\n        // 改进目标应该在合理范围内\n        expect(baseline.improvementTarget).toBeGreaterThan(0)\n        expect(baseline.improvementTarget).toBeLessThanOrEqual(150)\n\n        // 当前值应该大于目标值（需要改进）\n        if (baseline.metric !== '同步成功率') {\n          expect(baseline.currentValue).toBeGreaterThan(baseline.targetValue)\n        } else {\n          // 成功率当前值应该小于目标值\n          expect(baseline.currentValue).toBeLessThan(baseline.targetValue)\n        }\n      })\n    })\n  })\n\n  describe('总体改进目标计算', () => {\n    test('应该正确计算加权平均改进目标', () => {\n      const overallTarget = calculateOverallImprovementTarget()\n\n      expect(typeof overallTarget).toBe('number')\n      expect(overallTarget).toBeGreaterThan(0)\n      expect(overallTarget).toBeLessThan(100)\n\n      // 基于数据估算，应该在70-80之间\n      expect(overallTarget).toBeGreaterThanOrEqual(70)\n      expect(overallTarget).toBeLessThanOrEqual(80)\n    })\n\n    test('应该正确应用权重计算', () => {\n      // 创建测试数据验证权重逻辑\n      const testBaselines: CurrentPerformanceBaseline[] = [\n        {\n          category: '测试',\n          metric: '高优先级',\n          currentValue: 100,\n          targetValue: 50,\n          unit: 'ms',\n          improvementTarget: 50,\n          priority: 'high',\n          reasoning: 'test'\n        },\n        {\n          category: '测试',\n          metric: '中优先级',\n          currentValue: 100,\n          targetValue: 60,\n          unit: 'ms',\n          improvementTarget: 40,\n          priority: 'medium',\n          reasoning: 'test'\n        },\n        {\n          category: '测试',\n          metric: '低优先级',\n          currentValue: 100,\n          targetValue: 70,\n          unit: 'ms',\n          improvementTarget: 30,\n          priority: 'low',\n          reasoning: 'test'\n        }\n      ]\n\n      // 临时替换基准数据\n      const originalBaselines = currentPerformanceBaseline\n      ;(currentPerformanceBaseline as any) = testBaselines\n\n      const result = calculateOverallImprovementTarget()\n      // 预期: (50*3 + 40*2 + 30*1) / (3+2+1) = (150 + 80 + 30) / 6 = 260/6 = 43.33\n      expect(result).toBeCloseTo(43.33, 1)\n\n      // 恢复原始数据\n      ;(currentPerformanceBaseline as any) = originalBaselines\n    })\n\n    test('应该处理空数据情况', () => {\n      const originalBaselines = currentPerformanceBaseline\n      ;(currentPerformanceBaseline as any) = []\n\n      const result = calculateOverallImprovementTarget()\n      expect(result).toBe(0)\n\n      // 恢复原始数据\n      ;(currentPerformanceBaseline as any) = originalBaselines\n    })\n  })\n\n  describe('高优先级优化项目', () => {\n    test('应该正确筛选高优先级项目', () => {\n      const highPriorityItems = getHighPriorityOptimizations()\n\n      expect(Array.isArray(highPriorityItems)).toBe(true)\n      expect(highPriorityItems.length).toBeGreaterThan(0)\n\n      // 验证所有项目都是高优先级\n      highPriorityItems.forEach(item => {\n        expect(item.priority).toBe('high')\n      })\n\n      // 验证高优先级项目数量合理\n      const totalCount = currentPerformanceBaseline.length\n      const highPriorityCount = highPriorityItems.length\n      expect(highPriorityCount).toBeLessThan(totalCount)\n\n      // 基于数据，应该有大量高优先级项目\n      expect(highPriorityCount).toBeGreaterThan(10)\n    })\n\n    test('应该返回高优先级项目的完整信息', () => {\n      const highPriorityItems = getHighPriorityOptimizations()\n\n      highPriorityItems.forEach(item => {\n        expect(item).toHaveProperty('category')\n        expect(item).toHaveProperty('metric')\n        expect(item).toHaveProperty('currentValue')\n        expect(item).toHaveProperty('targetValue')\n        expect(item).toHaveProperty('improvementTarget')\n        expect(item).toHaveProperty('reasoning')\n      })\n    })\n  })\n\n  describe('分类改进目标', () => {\n    test('应该计算各分类的平均改进目标', () => {\n      const categoryTargets = getCategoryImprovementTargets()\n\n      expect(typeof categoryTargets).toBe('object')\n      expect(Object.keys(categoryTargets).length).toBeGreaterThan(0)\n\n      // 验证所有分类都有目标\n      const expectedCategories = ['加载性能', '运行时性能', '同步性能', '数据库性能', '网络性能']\n      expectedCategories.forEach(category => {\n        expect(categoryTargets).toHaveProperty(category)\n        expect(typeof categoryTargets[category]).toBe('number')\n        expect(categoryTargets[category]).toBeGreaterThan(0)\n      })\n    })\n\n    test('应该正确计算分类平均值', () => {\n      const categoryTargets = getCategoryImprovementTargets()\n\n      // 验证各分类的目标值合理\n      Object.values(categoryTargets).forEach(target => {\n        expect(target).toBeGreaterThan(0)\n        expect(target).toBeLessThan(100)\n      })\n\n      // 基于数据特征，网络和加载性能应该有较高的改进目标\n      expect(categoryTargets['网络性能']).toBeGreaterThan(60)\n      expect(categoryTargets['加载性能']).toBeGreaterThan(60)\n    })\n  })\n\n  describe('性能目标设定', () => {\n    test('应该调用performanceBenchmark的设定方法', () => {\n      setPerformanceTargets()\n\n      expect(performanceBenchmark.setPerformanceTargets).toHaveBeenCalled()\n    })\n\n    test('应该传递正确的目标参数', () => {\n      setPerformanceTargets()\n\n      // 验证调用的参数包含所有性能指标\n      const callArgs = (performanceBenchmark.setPerformanceTargets as any).mock.calls[0][0]\n      expect(typeof callArgs).toBe('object')\n\n      // 验证包含一些关键指标\n      const expectedMetrics = ['Bundle总大小', '首次内容绘制时间', '组件渲染时间', '同步操作时间']\n      expectedMetrics.forEach(metric => {\n        expect(callArgs).toHaveProperty(metric)\n      })\n    })\n\n    test('应该处理空基准数据情况', () => {\n      const originalBaselines = currentPerformanceBaseline\n      ;(currentPerformanceBaseline as any) = []\n\n      expect(() => setPerformanceTargets()).not.toThrow()\n\n      // 恢复原始数据\n      ;(currentPerformanceBaseline as any) = originalBaselines\n    })\n  })\n\n  describe('优化时间表生成', () => {\n    test('应该生成完整的优化时间表', () => {\n      const timeline = generateOptimizationTimeline()\n\n      expect(Array.isArray(timeline)).toBe(true)\n      expect(timeline.length).toBe(5) // 5个阶段\n\n      // 验证每个阶段的结构\n      timeline.forEach(phase => {\n        expect(phase).toHaveProperty('phase')\n        expect(phase).toHaveProperty('duration')\n        expect(phase).toHaveProperty('improvements')\n        expect(phase).toHaveProperty('expectedImprovement')\n\n        expect(typeof phase.duration).toBe('number')\n        expect(Array.isArray(phase.improvements)).toBe(true)\n        expect(typeof phase.expectedImprovement).toBe('number')\n        expect(phase.duration).toBeGreaterThan(0)\n        expect(phase.expectedImprovement).toBeGreaterThan(0)\n      })\n    })\n\n    test('应该包含所有优化阶段', () => {\n      const timeline = generateOptimizationTimeline()\n      const phases = timeline.map(p => p.phase)\n\n      const expectedPhases = [\n        '第一阶段：Bundle优化',\n        '第二阶段：运行时优化',\n        '第三阶段：同步系统重构',\n        '第四阶段：数据库优化',\n        '第五阶段：网络优化'\n      ]\n\n      expectedPhases.forEach(phase => {\n        expect(phases).toContain(phase)\n      })\n    })\n\n    test('应该有合理的持续时间分布', () => {\n      const timeline = generateOptimizationTimeline()\n      const totalDuration = timeline.reduce((sum, phase) => sum + phase.duration, 0)\n\n      expect(totalDuration).toBe(10) // 总共10个单位时间\n\n      // 每个阶段的持续时间应该合理\n      timeline.forEach(phase => {\n        expect(phase.duration).toBeGreaterThan(0)\n        expect(phase.duration).toBeLessThanOrEqual(3)\n      })\n    })\n\n    test('应该包含具体的改进措施', () => {\n      const timeline = generateOptimizationTimeline()\n\n      timeline.forEach(phase => {\n        expect(phase.improvements.length).toBeGreaterThan(0)\n\n        // 验证改进措施是具体的\n        phase.improvements.forEach(improvement => {\n          expect(typeof improvement).toBe('string')\n          expect(improvement.length).toBeGreaterThan(0)\n        })\n      })\n    })\n  })\n\n  describe('目标验证', () => {\n    test('应该验证目标可达性', () => {\n      const isValid = validateTargets()\n\n      expect(typeof isValid).toBe('boolean')\n\n      // 基于当前数据，应该返回true\n      expect(isValid).toBe(true)\n\n      // 验证控制台输出\n      expect(consoleSpy.log).toHaveBeenCalledWith(\n        expect.stringContaining('总体改进目标'),\n        expect.any(Number)\n      )\n      expect(consoleSpy.log).toHaveBeenCalledWith(\n        '分类改进目标:',\n        expect.any(Object)\n      )\n    })\n\n    test('应该检测不可达的目标', () => {\n      // 临时修改基准数据为不可达目标\n      const originalBaselines = currentPerformanceBaseline\n      ;(currentPerformanceBaseline as any)[0].improvementTarget = 10 // 太低\n\n      const isValid = validateTargets()\n      expect(isValid).toBe(false)\n\n      // 恢复原始数据\n      ;(currentPerformanceBaseline as any) = originalBaselines\n    })\n\n    test('应该检查高优先级项目的目标', () => {\n      // 临时设置一个高优先级项目无目标\n      const originalBaselines = currentPerformanceBaseline\n      ;(currentPerformanceBaseline as any)[0].targetValue = 0\n\n      const isValid = validateTargets()\n      expect(isValid).toBe(false)\n\n      // 恢复原始数据\n      ;(currentPerformanceBaseline as any) = originalBaselines\n    })\n  })\n\n  describe('初始化功能', () => {\n    test('应该完整初始化性能基准', () => {\n      initializePerformanceBaseline()\n\n      // 验证所有必要的调用\n      expect(performanceBenchmark.setPerformanceTargets).toHaveBeenCalled()\n      expect(consoleSpy.log).toHaveBeenCalledWith(\n        expect.stringContaining('性能基准初始化完成')\n      )\n      expect(consoleSpy.log).toHaveBeenCalledWith(\n        expect.stringContaining('总体改进目标'),\n        expect.any(Number)\n      )\n    })\n\n    test('应该在目标不可达时显示警告', () => {\n      // 临时修改数据使目标不可达\n      const originalBaselines = currentPerformanceBaseline\n      ;(currentPerformanceBaseline as any)[0].improvementTarget = 10\n\n      initializePerformanceBaseline()\n\n      expect(consoleSpy.warn).toHaveBeenCalledWith(\n        '性能目标可能过于激进，请重新评估'\n      )\n\n      // 恢复原始数据\n      ;(currentPerformanceBaseline as any) = originalBaselines\n    })\n\n    test('应该生成并显示优化时间表', () => {\n      initializePerformanceBaseline()\n\n      expect(consoleSpy.log).toHaveBeenCalledWith(\n        '优化时间表:',\n        expect.any(Array)\n      )\n    })\n  })\n\n  describe('边界情况测试', () => {\n    test('应该处理数值边界情况', () => {\n      // 测试零值和负值\n      const testBaseline: CurrentPerformanceBaseline = {\n        category: '测试',\n        metric: '边界测试',\n        currentValue: 100,\n        targetValue: 50,\n        unit: 'ms',\n        improvementTarget: 50,\n        priority: 'medium',\n        reasoning: '边界测试'\n      }\n\n      expect(() => {\n        // 验证计算函数能处理各种数值\n        calculateOverallImprovementTarget()\n      }).not.toThrow()\n    })\n\n    test('应该处理字符串边界情况', () => {\n      // 测试空字符串和特殊字符\n      const testBaseline: CurrentPerformanceBaseline = {\n        category: '',\n        metric: '特殊字符测试 @#$%',\n        currentValue: 100,\n        targetValue: 50,\n        unit: 'ms',\n        improvementTarget: 50,\n        priority: 'medium',\n        reasoning: ''\n      }\n\n      expect(() => {\n        getCategoryImprovementTargets()\n      }).not.toThrow()\n    })\n  })\n\n  describe('性能测试', () => {\n    test('应该保持良好的计算性能', () => {\n      const start = performance.now()\n\n      // 执行多次计算操作\n      for (let i = 0; i < 1000; i++) {\n        calculateOverallImprovementTarget()\n        getHighPriorityOptimizations()\n        getCategoryImprovementTargets()\n        generateOptimizationTimeline()\n      }\n\n      const end = performance.now()\n      const duration = end - start\n\n      // 1000次计算操作应该在合理时间内完成\n      expect(duration).toBeLessThan(100) // 100ms\n    })\n\n    test('应该避免内存泄漏', () => {\n      // 创建多个实例\n      const results = []\n      for (let i = 0; i < 10000; i++) {\n        results.push({\n          overall: calculateOverallImprovementTarget(),\n          highPriority: getHighPriorityOptimizations(),\n          categories: getCategoryImprovementTargets(),\n          timeline: generateOptimizationTimeline()\n        })\n      }\n\n      // 清理\n      results.length = 0\n\n      // 如果没有内存泄漏，这个测试应该通过\n      expect(true).toBe(true)\n    })\n  })\n\n  describe('TypeScript类型检查', () => {\n    test('应该符合TypeScript接口', () => {\n      const baseline: CurrentPerformanceBaseline = currentPerformanceBaseline[0]\n      expect(baseline).toHaveProperty('category')\n      expect(baseline).toHaveProperty('metric')\n      expect(baseline).toHaveProperty('currentValue')\n      expect(baseline).toHaveProperty('targetValue')\n      expect(baseline).toHaveProperty('unit')\n      expect(baseline).toHaveProperty('improvementTarget')\n      expect(baseline).toHaveProperty('priority')\n      expect(baseline).toHaveProperty('reasoning')\n\n      const overallTarget: number = calculateOverallImprovementTarget()\n      expect(typeof overallTarget).toBe('number')\n\n      const highPriority: CurrentPerformanceBaseline[] = getHighPriorityOptimizations()\n      expect(Array.isArray(highPriority)).toBe(true)\n    })\n  })\n})"],"version":3}
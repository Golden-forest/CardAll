f4a26cb286aef51cb4ecfdf07e5e2e2a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// 组件交互集成测试
const react_1 = require("@testing-library/react");
const jest_axe_1 = require("jest-axe");
const core_1 = require("@dnd-kit/core");
const cardall_context_1 = require("@/contexts/cardall-context");
const dashboard_main_1 = require("@/components/dashboard/dashboard-main");
const flip_card_1 = require("@/components/card/flip-card");
const magnetic_card_grid_1 = require("@/components/card/magnetic-card-grid");
const dashboard_sidebar_1 = require("@/components/dashboard/dashboard-sidebar");
const test_utils_1 = require("@/tests/test-utils");
const data_fixtures_1 = require("@/tests/fixtures/data-fixtures");
// 测试组件渲染包装器
const TestWrapper = ({ children }) => ((0, jsx_runtime_1.jsx)(core_1.DndProvider, { children: (0, jsx_runtime_1.jsx)(cardall_context_1.CardOperationsProvider, { children: children }) }));
describe('Component Integration', () => {
    describe('Dashboard完整交互流程', () => {
        it('应该支持完整的卡片创建流程', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(dashboard_main_1.Dashboard, {}) }));
            // 点击创建卡片按钮
            const createButton = react_1.screen.getByText(/create card/i);
            react_1.fireEvent.click(createButton);
            // 填写卡片信息
            const titleInput = react_1.screen.getByPlaceholderText(/card title/i);
            const contentInput = react_1.screen.getByPlaceholderText(/card content/i);
            react_1.fireEvent.change(titleInput, { target: { value: 'Test Card' } });
            react_1.fireEvent.change(contentInput, { target: { value: 'Test content' } });
            // 保存卡片
            const saveButton = react_1.screen.getByText(/save/i);
            react_1.fireEvent.click(saveButton);
            // 验证卡片创建成功
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('Test Card')).toBeInTheDocument();
            });
        });
        it('应该支持卡片编辑流程', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(dashboard_main_1.Dashboard, {}) }));
            // 双击卡片进行编辑
            const card = react_1.screen.getByText('Test Card');
            react_1.fireEvent.doubleClick(card);
            // 编辑卡片内容
            const titleInput = react_1.screen.getByDisplayValue('Test Card');
            react_1.fireEvent.change(titleInput, { target: { value: 'Updated Card' } });
            // 保存更改
            const updateButton = react_1.screen.getByText(/update/i);
            react_1.fireEvent.click(updateButton);
            // 验证卡片更新成功
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('Updated Card')).toBeInTheDocument();
            });
        });
        it('应该支持卡片删除流程', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(dashboard_main_1.Dashboard, {}) }));
            // 点击删除按钮
            const deleteButton = react_1.screen.getByRole('button', { name: /delete/i });
            react_1.fireEvent.click(deleteButton);
            // 确认删除
            const confirmButton = react_1.screen.getByText(/confirm/i);
            react_1.fireEvent.click(confirmButton);
            // 验证卡片删除成功
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.queryByText('Test Card')).not.toBeInTheDocument();
            });
        });
        it('应该支持标签管理流程', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(dashboard_main_1.Dashboard, {}) }));
            // 打开标签管理
            const tagButton = react_1.screen.getByText(/tags/i);
            react_1.fireEvent.click(tagButton);
            // 创建新标签
            const newTagInput = react_1.screen.getByPlaceholderText(/new tag/i);
            react_1.fireEvent.change(newTagInput, { target: { value: 'Important' } });
            const addButton = react_1.screen.getByText(/add tag/i);
            react_1.fireEvent.click(addButton);
            // 验证标签创建成功
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('Important')).toBeInTheDocument();
            });
            // 为卡片添加标签
            const card = react_1.screen.getByText('Test Card');
            react_1.fireEvent.click(card);
            const tagCheckbox = react_1.screen.getByLabelText('Important');
            react_1.fireEvent.click(tagCheckbox);
            // 验证标签已添加到卡片
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('Important')).toBeInTheDocument();
            });
        });
        it('应该支持文件夹管理流程', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(dashboard_main_1.Dashboard, {}) }));
            // 打开文件夹管理
            const folderButton = react_1.screen.getByText(/folders/i);
            react_1.fireEvent.click(folderButton);
            // 创建新文件夹
            const newFolderInput = react_1.screen.getByPlaceholderText(/folder name/i);
            react_1.fireEvent.change(newFolderInput, { target: { value: 'Work' } });
            const createFolderButton = react_1.screen.getByText(/create folder/i);
            react_1.fireEvent.click(createFolderButton);
            // 验证文件夹创建成功
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('Work')).toBeInTheDocument();
            });
            // 将卡片拖拽到文件夹
            const card = react_1.screen.getByText('Test Card');
            const folder = react_1.screen.getByText('Work');
            react_1.fireEvent.dragStart(card);
            react_1.fireEvent.drop(folder);
            // 验证卡片已移动到文件夹
            await (0, react_1.waitFor)(() => {
                expect(folder).toContainElement(react_1.screen.getByText('Test Card'));
            });
        });
    });
    describe('FlipCard与Grid交互', () => {
        it('应该支持卡片翻转功能', async () => {
            const mockCard = data_fixtures_1.cardFixtures.textCard;
            const mockOnFlip = jest.fn();
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: mockCard, onFlip: mockOnFlip, onEdit: jest.fn(), onDelete: jest.fn(), onStyleChange: jest.fn() }) }));
            // 点击卡片进行翻转
            const card = react_1.screen.getByRole('article');
            react_1.fireEvent.click(card);
            // 验证翻转回调被调用
            await (0, react_1.waitFor)(() => {
                expect(mockOnFlip).toHaveBeenCalledWith(mockCard.id);
            });
            // 验证卡片显示背面内容
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText(/additional information/i)).toBeInTheDocument();
            });
        });
        it('应该支持卡片样式切换', async () => {
            const mockCard = data_fixtures_1.cardFixtures.textCard;
            const mockOnStyleChange = jest.fn();
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(flip_card_1.FlipCard, { card: mockCard, onFlip: jest.fn(), onEdit: jest.fn(), onDelete: jest.fn(), onStyleChange: mockOnStyleChange }) }));
            // 打开样式选择器
            const styleButton = react_1.screen.getByRole('button', { name: /style/i });
            react_1.fireEvent.click(styleButton);
            // 选择新样式
            const gradientOption = react_1.screen.getByText(/gradient blue/i);
            react_1.fireEvent.click(gradientOption);
            // 验证样式变更回调被调用
            await (0, react_1.waitFor)(() => {
                expect(mockOnStyleChange).toHaveBeenCalledWith(mockCard.id, 'gradient-blue');
            });
        });
        it('应该支持卡片拖拽功能', async () => {
            const cards = [data_fixtures_1.cardFixtures.textCard, data_fixtures_1.cardFixtures.imageCard];
            const mockOnDragEnd = jest.fn();
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(magnetic_card_grid_1.MagneticCardGrid, { cards: cards, onDragEnd: mockOnDragEnd, onCardClick: jest.fn() }) }));
            // 开始拖拽卡片
            const card = react_1.screen.getByText('Simple Text Card');
            react_1.fireEvent.dragStart(card);
            // 模拟拖拽到新位置
            const dragEvent = {
                active: { id: card.id },
                over: { id: cards[1].id },
            };
            // 触发拖拽结束
            react_1.fireEvent.dragEnd(card, dragEvent);
            // 验证拖拽回调被调用
            await (0, react_1.waitFor)(() => {
                expect(mockOnDragEnd).toHaveBeenCalledWith(dragEvent);
            });
        });
    });
    describe('Sidebar与主界面交互', () => {
        it('应该支持通过侧边栏筛选卡片', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsxs)(TestWrapper, { children: [(0, jsx_runtime_1.jsx)(dashboard_sidebar_1.DashboardSidebar, {}), (0, jsx_runtime_1.jsx)(magnetic_card_grid_1.MagneticCardGrid, { cards: [data_fixtures_1.cardFixtures.textCard, data_fixtures_1.cardFixtures.imageCard], onDragEnd: jest.fn(), onCardClick: jest.fn() })] }));
            // 通过标签筛选
            const tagFilter = react_1.screen.getByText('text');
            react_1.fireEvent.click(tagFilter);
            // 验证筛选结果
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('Simple Text Card')).toBeInTheDocument();
                expect(react_1.screen.queryByText('Image Card')).not.toBeInTheDocument();
            });
        });
        it('应该支持通过文件夹筛选卡片', async () => {
            const cards = [
                { ...data_fixtures_1.cardFixtures.textCard, folderId: 'folder-1' },
                { ...data_fixtures_1.cardFixtures.imageCard, folderId: 'folder-2' },
            ];
            (0, react_1.render)((0, jsx_runtime_1.jsxs)(TestWrapper, { children: [(0, jsx_runtime_1.jsx)(dashboard_sidebar_1.DashboardSidebar, {}), (0, jsx_runtime_1.jsx)(magnetic_card_grid_1.MagneticCardGrid, { cards: cards, onDragEnd: jest.fn(), onCardClick: jest.fn() })] }));
            // 通过文件夹筛选
            const folderFilter = react_1.screen.getByText('Folder 1');
            react_1.fireEvent.click(folderFilter);
            // 验证筛选结果
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('Simple Text Card')).toBeInTheDocument();
                expect(react_1.screen.queryByText('Image Card')).not.toBeInTheDocument();
            });
        });
        it('应该支持搜索功能', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsxs)(TestWrapper, { children: [(0, jsx_runtime_1.jsx)(dashboard_sidebar_1.DashboardSidebar, {}), (0, jsx_runtime_1.jsx)(magnetic_card_grid_1.MagneticCardGrid, { cards: [data_fixtures_1.cardFixtures.textCard, data_fixtures_1.cardFixtures.imageCard], onDragEnd: jest.fn(), onCardClick: jest.fn() })] }));
            // 输入搜索关键词
            const searchInput = react_1.screen.getByPlaceholderText(/search/i);
            react_1.fireEvent.change(searchInput, { target: { value: 'Simple' } });
            // 验证搜索结果
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText('Simple Text Card')).toBeInTheDocument();
                expect(react_1.screen.queryByText('Image Card')).not.toBeInTheDocument();
            });
        });
    });
    describe('响应式设计交互', () => {
        it('应该在移动端适配触摸操作', async () => {
            // 模拟移动端设备
            Object.defineProperty(window, 'innerWidth', { writable: true, configurable: true, value: 375 });
            Object.defineProperty(window, 'innerHeight', { writable: true, configurable: true, value: 667 });
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(dashboard_main_1.Dashboard, {}) }));
            // 验证移动端布局
            const sidebar = react_1.screen.getByRole('complementary');
            expect(sidebar).toHaveClass('mobile-optimized');
            // 测试触摸滑动
            const card = react_1.screen.getByText('Test Card');
            react_1.fireEvent.touchStart(card, { touches: [{ clientX: 0, clientY: 0 }] });
            react_1.fireEvent.touchMove(card, { touches: [{ clientX: 100, clientY: 0 }] });
            react_1.fireEvent.touchEnd(card);
            // 验证滑动响应
            await (0, react_1.waitFor)(() => {
                expect(card).toHaveClass('swiped');
            });
        });
        it('应该在桌面端适配拖拽操作', async () => {
            // 模拟桌面端设备
            Object.defineProperty(window, 'innerWidth', { writable: true, configurable: true, value: 1920 });
            Object.defineProperty(window, 'innerHeight', { writable: true, configurable: true, value: 1080 });
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(dashboard_main_1.Dashboard, {}) }));
            // 验证桌面端布局
            const sidebar = react_1.screen.getByRole('complementary');
            expect(sidebar).toHaveClass('desktop-optimized');
            // 测试拖拽操作
            const card = react_1.screen.getByText('Test Card');
            react_1.fireEvent.dragStart(card);
            // 验证拖拽响应
            await (0, react_1.waitFor)(() => {
                expect(card).toHaveClass('dragging');
            });
        });
    });
    describe('键盘导航交互', () => {
        it('应该支持键盘导航', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(dashboard_main_1.Dashboard, {}) }));
            // 使用Tab键导航
            const card = react_1.screen.getByText('Test Card');
            react_1.fireEvent.keyDown(card, { key: 'Tab' });
            expect(card).toHaveFocus();
            // 使用空格键激活卡片
            react_1.fireEvent.keyDown(card, { key: ' ' });
            expect(card).toHaveClass('active');
            // 使用Enter键编辑卡片
            react_1.fireEvent.keyDown(card, { key: 'Enter' });
            expect(react_1.screen.getByDisplayValue('Test Card')).toBeInTheDocument();
            // 使用Delete键删除卡片
            react_1.fireEvent.keyDown(card, { key: 'Delete' });
            expect(react_1.screen.getByText(/confirm delete/i)).toBeInTheDocument();
        });
        it('应该支持快捷键操作', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(dashboard_main_1.Dashboard, {}) }));
            // 使用Ctrl+N创建新卡片
            react_1.fireEvent.keyDown(document, { key: 'n', ctrlKey: true });
            expect(react_1.screen.getByPlaceholderText(/card title/i)).toBeInTheDocument();
            // 使用Ctrl+F搜索
            react_1.fireEvent.keyDown(document, { key: 'f', ctrlKey: true });
            expect(react_1.screen.getByPlaceholderText(/search/i)).toBeInTheDocument();
            // 使用Ctrl+T管理标签
            react_1.fireEvent.keyDown(document, { key: 't', ctrlKey: true });
            expect(react_1.screen.getByText(/tags/i)).toBeInTheDocument();
        });
    });
    describe('可访问性交互', () => {
        it('应该支持屏幕阅读器', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(dashboard_main_1.Dashboard, {}) }));
            const card = react_1.screen.getByText('Test Card');
            // 验证ARIA属性
            expect(card).toHaveAttribute('role', 'article');
            expect(card).toHaveAttribute('aria-label', expect.stringContaining('Test Card'));
            // 验证实时区域更新
            const liveRegion = react_1.screen.getByRole('status');
            expect(liveRegion).toBeInTheDocument();
        });
        it('应该通过可访问性测试', async () => {
            const { container } = (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(dashboard_main_1.Dashboard, {}) }));
            const results = await (0, jest_axe_1.axe)(container);
            expect(results).toHaveNoViolations();
        });
    });
    describe('性能优化交互', () => {
        it('应该优化大量卡片的渲染性能', async () => {
            const cards = test_utils_1.mockDataUtils.generateCards(100);
            const renderTime = await test_utils_1.performanceUtils.measureRenderTime(() => {
                (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(magnetic_card_grid_1.MagneticCardGrid, { cards: cards, onDragEnd: jest.fn(), onCardClick: jest.fn() }) }));
            });
            expect(renderTime).toBeLessThan(1000); // 应该在1秒内完成渲染
        });
        it('应该优化拖拽性能', async () => {
            const cards = test_utils_1.mockDataUtils.generateCards(50);
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(magnetic_card_grid_1.MagneticCardGrid, { cards: cards, onDragEnd: jest.fn(), onCardClick: jest.fn() }) }));
            const card = react_1.screen.getByText('Card 1');
            // 测试拖拽性能
            const dragStartTime = performance.now();
            // 模拟连续拖拽操作
            for (let i = 0; i < 10; i++) {
                react_1.fireEvent.dragStart(card);
                react_1.fireEvent.dragOver(card);
                react_1.fireEvent.drop(card);
            }
            const dragEndTime = performance.now();
            expect(dragEndTime - dragStartTime).toBeLessThan(500); // 应该在500ms内完成
        });
    });
    describe('错误处理交互', () => {
        it('应该优雅处理网络错误', async () => {
            // 模拟网络错误
            jest.spyOn(global, 'fetch').mockImplementationOnce(() => Promise.reject(new Error('Network error')));
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(dashboard_main_1.Dashboard, {}) }));
            // 尝试同步操作
            const syncButton = react_1.screen.getByText(/sync/i);
            react_1.fireEvent.click(syncButton);
            // 验证错误提示
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText(/network error/i)).toBeInTheDocument();
            });
            // 验证重试按钮
            expect(react_1.screen.getByText(/retry/i)).toBeInTheDocument();
        });
        it('应该优雅处理数据验证错误', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(dashboard_main_1.Dashboard, {}) }));
            // 尝试创建无效卡片
            const createButton = react_1.screen.getByText(/create card/i);
            react_1.fireEvent.click(createButton);
            // 不填写标题，直接保存
            const saveButton = react_1.screen.getByText(/save/i);
            react_1.fireEvent.click(saveButton);
            // 验证验证错误提示
            await (0, react_1.waitFor)(() => {
                expect(react_1.screen.getByText(/title is required/i)).toBeInTheDocument();
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
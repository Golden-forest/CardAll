9c739a9b210fcf4cbf6ad628352183f8
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// 同步系统单元测试
const globals_1 = require("@jest/globals");
const mock_services_1 = require("../mock-services");
const data_fixtures_1 = require("../data-fixtures");
(0, globals_1.describe)('SyncSystem', () => {
    let supabaseService;
    let databaseService;
    let syncService;
    (0, globals_1.beforeEach)(() => {
        // 创建模拟服务实例
        supabaseService = new mock_services_1.MockSupabaseService();
        databaseService = new mock_services_1.MockDatabaseService();
        syncService = new mock_services_1.MockSyncService(supabaseService, databaseService);
    });
    (0, globals_1.afterEach)(() => {
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.describe)('同步状态管理', () => {
        (0, globals_1.it)('应该正确报告在线状态', () => {
            (0, globals_1.expect)(syncService.isOnline()).toBe(true);
            syncService.setOnline(false);
            (0, globals_1.expect)(syncService.isOnline()).toBe(false);
            syncService.setOnline(true);
            (0, globals_1.expect)(syncService.isOnline()).toBe(true);
        });
        (0, globals_1.it)('应该正确报告同步状态', () => {
            (0, globals_1.expect)(syncService.isSyncing()).toBe(false);
            // 开始同步时应该返回 true
            // 注意：这里我们测试的是状态，而不是实际的同步过程
        });
        (0, globals_1.it)('应该正确记录最后同步时间', () => {
            (0, globals_1.expect)(syncService.getLastSyncTime()).toBeNull();
            // 执行同步后应该更新时间
            // 这里我们只测试初始状态
        });
    });
    (0, globals_1.describe)('手动同步', () => {
        (0, globals_1.it)('应该成功同步空队列', async () => {
            const result = await syncService.syncNow();
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.syncedCount).toBe(0);
            (0, globals_1.expect)(result.errors).toBe(0);
        });
        (0, globals_1.it)('应该同步待处理的操作', async () => {
            // 创建测试数据
            const testOperation = data_fixtures_1.SyncOperationFixture.createCard('test-card-1');
            await databaseService.syncQueue.add(testOperation);
            const result = await syncService.syncNow();
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.syncedCount).toBe(1);
            (0, globals_1.expect)(result.errors).toBe(0);
        });
        (0, globals_1.it)('应该处理同步错误', async () => {
            // 创建会导致错误的操作
            const errorOperation = data_fixtures_1.SyncOperationFixture.createCard('error-card');
            globals_1.jest.spyOn(syncService, 'executeSyncOperation').mockRejectedValueOnce(new Error('Sync failed'));
            await databaseService.syncQueue.add(errorOperation);
            const result = await syncService.syncNow();
            (0, globals_1.expect)(result.success).toBe(false);
            (0, globals_1.expect)(result.syncedCount).toBe(0);
            (0, globals_1.expect)(result.errors).toBe(1);
            (0, globals_1.expect)(result.errorDetails).toHaveLength(1);
            (0, globals_1.expect)(result.errorDetails[0]).toContain('Sync failed');
        });
        (0, globals_1.it)('不应该在同步进行中时启动新的同步', async () => {
            // 模拟同步进行中
            globals_1.jest.spyOn(syncService, 'syncInProgress', 'get').mockReturnValueOnce(true);
            await (0, globals_1.expect)(syncService.syncNow()).rejects.toThrow('Sync already in progress');
        });
    });
    (0, globals_1.describe)('同步操作执行', () => {
        (0, globals_1.it)('应该正确执行卡片创建操作', async () => {
            const cardData = data_fixtures_1.TestDataGenerator.generateCard();
            const operation = {
                id: 'test-op-1',
                type: 'create',
                entity: 'card',
                entityId: cardData.id,
                data: cardData,
                priority: 'normal',
                timestamp: new Date(),
                retryCount: 0,
                maxRetries: 3,
                status: 'pending',
            };
            await syncService.executeSyncOperation(operation);
            (0, globals_1.expect)(supabaseService.from('cards').insert).toHaveBeenCalledWith(cardData);
        });
        (0, globals_1.it)('应该正确执行卡片更新操作', async () => {
            const cardData = data_fixtures_1.TestDataGenerator.generateCard();
            const operation = {
                id: 'test-op-2',
                type: 'update',
                entity: 'card',
                entityId: cardData.id,
                data: { title: 'Updated Title' },
                priority: 'normal',
                timestamp: new Date(),
                retryCount: 0,
                maxRetries: 3,
                status: 'pending',
            };
            await syncService.executeSyncOperation(operation);
            (0, globals_1.expect)(supabaseService.from('cards').update).toHaveBeenCalledWith({ title: 'Updated Title' });
            (0, globals_1.expect)(supabaseService.from('cards').update).toHaveBeenCalledWith({ title: 'Updated Title' });
        });
        (0, globals_1.it)('应该正确执行卡片删除操作', async () => {
            const operation = {
                id: 'test-op-3',
                type: 'delete',
                entity: 'card',
                entityId: 'test-card-id',
                data: {},
                priority: 'high',
                timestamp: new Date(),
                retryCount: 0,
                maxRetries: 3,
                status: 'pending',
            };
            await syncService.executeSyncOperation(operation);
            (0, globals_1.expect)(supabaseService.from('cards').delete).toHaveBeenCalled();
        });
        (0, globals_1.it)('应该正确执行文件夹操作', async () => {
            const folderData = data_fixtures_1.TestDataGenerator.generateFolder();
            const operation = {
                id: 'test-op-4',
                type: 'create',
                entity: 'folder',
                entityId: folderData.id,
                data: folderData,
                priority: 'normal',
                timestamp: new Date(),
                retryCount: 0,
                maxRetries: 3,
                status: 'pending',
            };
            await syncService.executeSyncOperation(operation);
            (0, globals_1.expect)(supabaseService.from('folders').insert).toHaveBeenCalledWith(folderData);
        });
        (0, globals_1.it)('应该正确执行标签操作', async () => {
            const tagData = data_fixtures_1.TestDataGenerator.generateTag();
            const operation = {
                id: 'test-op-5',
                type: 'create',
                entity: 'tag',
                entityId: tagData.id,
                data: tagData,
                priority: 'normal',
                timestamp: new Date(),
                retryCount: 0,
                maxRetries: 3,
                status: 'pending',
            };
            await syncService.executeSyncOperation(operation);
            (0, globals_1.expect)(supabaseService.from('tags').insert).toHaveBeenCalledWith(tagData);
        });
        (0, globals_1.it)('应该处理未知实体类型的错误', async () => {
            const operation = {
                id: 'test-op-6',
                type: 'create',
                entity: 'unknown',
                entityId: 'test-id',
                data: {},
                priority: 'normal',
                timestamp: new Date(),
                retryCount: 0,
                maxRetries: 3,
                status: 'pending',
            };
            await (0, globals_1.expect)(syncService.executeSyncOperation(operation))
                .rejects.toThrow('Unknown entity type: unknown');
        });
    });
    (0, globals_1.describe)('自动同步', () => {
        (0, globals_1.it)('应该启动自动同步并返回停止函数', () => {
            const stopSync = syncService.startAutoSync(1000);
            (0, globals_1.expect)(typeof stopSync).toBe('function');
            // 停止同步
            stopSync();
        });
        (0, globals_1.it)('应该只在在线状态且非同步中时执行自动同步', async () => {
            const syncNowSpy = globals_1.jest.spyOn(syncService, 'syncNow');
            // 设置为在线状态
            syncService.setOnline(true);
            globals_1.jest.spyOn(syncService, 'syncInProgress', 'get').mockReturnValue(false);
            const stopSync = syncService.startAutoSync(100);
            // 等待一个时间间隔
            await new Promise(resolve => setTimeout(resolve, 150));
            (0, globals_1.expect)(syncNowSpy).toHaveBeenCalled();
            stopSync();
        });
        (0, globals_1.it)('应该在离线状态时不执行自动同步', async () => {
            const syncNowSpy = globals_1.jest.spyOn(syncService, 'syncNow');
            // 设置为离线状态
            syncService.setOnline(false);
            const stopSync = syncService.startAutoSync(100);
            // 等待一个时间间隔
            await new Promise(resolve => setTimeout(resolve, 150));
            (0, globals_1.expect)(syncNowSpy).not.toHaveBeenCalled();
            stopSync();
        });
        (0, globals_1.it)('应该在同步进行中时不执行自动同步', async () => {
            const syncNowSpy = globals_1.jest.spyOn(syncService, 'syncNow');
            // 设置为同步进行中
            globals_1.jest.spyOn(syncService, 'syncInProgress', 'get').mockReturnValue(true);
            const stopSync = syncService.startAutoSync(100);
            // 等待一个时间间隔
            await new Promise(resolve => setTimeout(resolve, 150));
            (0, globals_1.expect)(syncNowSpy).not.toHaveBeenCalled();
            stopSync();
        });
    });
    (0, globals_1.describe)('冲突解决', () => {
        (0, globals_1.it)('应该能够解决冲突', async () => {
            const conflicts = [
                {
                    id: 'conflict-1',
                    localData: { title: 'Local Title' },
                    remoteData: { title: 'Remote Title' },
                    entityType: 'card',
                },
                {
                    id: 'conflict-2',
                    localData: { name: 'Local Name' },
                    remoteData: { name: 'Remote Name' },
                    entityType: 'folder',
                },
            ];
            const resolved = await syncService.resolveConflicts(conflicts);
            (0, globals_1.expect)(resolved).toHaveLength(2);
            resolved.forEach(conflict => {
                (0, globals_1.expect)(conflict.resolved).toBe(true);
                (0, globals_1.expect)(conflict.resolution).toBe('local-wins');
            });
        });
        (0, globals_1.it)('应该处理空冲突列表', async () => {
            const resolved = await syncService.resolveConflicts([]);
            (0, globals_1.expect)(resolved).toHaveLength(0);
        });
    });
    (0, globals_1.describe)('错误管理', () => {
        (0, globals_1.it)('应该记录同步错误', async () => {
            // 初始状态应该没有错误
            (0, globals_1.expect)(syncService.getSyncErrors()).toHaveLength(0);
            // 执行一个会失败的同步
            const errorOperation = data_fixtures_1.SyncOperationFixture.createCard('error-card');
            globals_1.jest.spyOn(syncService, 'executeSyncOperation').mockRejectedValueOnce(new Error('Test error'));
            await databaseService.syncQueue.add(errorOperation);
            await syncService.syncNow();
            // 应该记录错误
            const errors = syncService.getSyncErrors();
            (0, globals_1.expect)(errors.length).toBeGreaterThan(0);
            (0, globals_1.expect)(errors[0]).toContain('Test error');
        });
        (0, globals_1.it)('应该能够清除错误', () => {
            // 手动添加一些错误（模拟）
            syncService.syncErrors = ['Error 1', 'Error 2'];
            (0, globals_1.expect)(syncService.getSyncErrors()).toHaveLength(2);
            syncService.clearErrors();
            (0, globals_1.expect)(syncService.getSyncErrors()).toHaveLength(0);
        });
    });
    (0, globals_1.describe)('性能测试', () => {
        (0, globals_1.it)('应该能够处理大量同步操作', async () => {
            // 创建大量同步操作
            const operations = [];
            for (let i = 0; i < 100; i++) {
                const operation = data_fixtures_1.SyncOperationFixture.createCard(`card-${i}`);
                await databaseService.syncQueue.add(operation);
                operations.push(operation);
            }
            const startTime = performance.now();
            const result = await syncService.syncNow();
            const endTime = performance.now();
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.syncedCount).toBe(100);
            (0, globals_1.expect)(result.errors).toBe(0);
            // 性能检查：应该在合理时间内完成
            const executionTime = endTime - startTime;
            (0, globals_1.expect)(executionTime).toBeLessThan(5000); // 5秒内完成
        }, 10000); // 增加超时时间
        (0, globals_1.it)('应该正确处理网络延迟', async () => {
            // 模拟网络延迟
            globals_1.jest.spyOn(syncService, 'executeSyncOperation').mockImplementationOnce(async () => {
                await new Promise(resolve => setTimeout(resolve, 1000));
                return true;
            });
            const operation = data_fixtures_1.SyncOperationFixture.createCard('delayed-card');
            await databaseService.syncQueue.add(operation);
            const startTime = performance.now();
            const result = await syncService.syncNow();
            const endTime = performance.now();
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.syncedCount).toBe(1);
            // 应该考虑网络延迟
            const executionTime = endTime - startTime;
            (0, globals_1.expect)(executionTime).toBeGreaterThan(900); // 接近延迟时间
        }, 5000);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
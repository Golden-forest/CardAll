fa81c0b6ce5973bbb6d0d61d33e7c5d1
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// 卡片管理集成测试
const globals_1 = require("@jest/globals");
const react_1 = require("@testing-library/react");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
const mock_services_1 = require("../mock-services");
const data_fixtures_1 = require("../data-fixtures");
const advanced_test_utils_1 = require("../advanced-test-utils");
// 模拟组件
const CardGrid = ({ cards, onCardClick, onCardDelete, onCardFlip }) => ((0, jsx_runtime_1.jsx)("div", { "data-testid": "card-grid", children: cards.map(card => ((0, jsx_runtime_1.jsxs)("div", { "data-testid": `card-${card.id}`, "data-card-id": card.id, children: [(0, jsx_runtime_1.jsx)("div", { "data-testid": `card-title-${card.id}`, children: card.frontContent.title }), (0, jsx_runtime_1.jsx)("div", { "data-testid": `card-content-${card.id}`, children: card.frontContent.text }), (0, jsx_runtime_1.jsx)("button", { "data-testid": `card-flip-${card.id}`, onClick: () => onCardFlip(card.id), children: "\u7FFB\u8F6C" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": `card-delete-${card.id}`, onClick: () => onCardDelete(card.id), children: "\u5220\u9664" }), (0, jsx_runtime_1.jsx)("div", { "data-testid": `card-click-${card.id}`, onClick: () => onCardClick(card), children: "\u70B9\u51FB\u533A\u57DF" })] }, card.id))) }));
const CardForm = ({ onSubmit, onCancel }) => {
    const [title, setTitle] = useState('');
    const [content, setContent] = useState('');
    const handleSubmit = (e) => {
        e.preventDefault();
        onSubmit({
            frontContent: {
                title,
                text: content,
                images: [],
                tags: [],
                lastModified: new Date(),
            },
            backContent: {
                title: '',
                text: '',
                images: [],
                tags: [],
                lastModified: new Date(),
            },
            style: {
                type: 'solid',
                backgroundColor: '#ffffff',
                fontFamily: 'system-ui',
                fontSize: 'base',
                fontWeight: 'normal',
                textColor: '#1f2937',
                borderRadius: 'xl',
                shadow: 'md',
                borderWidth: 0,
            },
            isFlipped: false,
            createdAt: new Date(),
            updatedAt: new Date(),
        });
    };
    return ((0, jsx_runtime_1.jsxs)("form", { "data-testid": "card-form", onSubmit: handleSubmit, children: [(0, jsx_runtime_1.jsx)("input", { "data-testid": "card-title-input", value: title, onChange: (e) => setTitle(e.target.value), placeholder: "\u5361\u7247\u6807\u9898", required: true }), (0, jsx_runtime_1.jsx)("textarea", { "data-testid": "card-content-input", value: content, onChange: (e) => setContent(e.target.value), placeholder: "\u5361\u7247\u5185\u5BB9", required: true }), (0, jsx_runtime_1.jsx)("button", { type: "submit", "data-testid": "card-submit-button", children: "\u521B\u5EFA\u5361\u7247" }), (0, jsx_runtime_1.jsx)("button", { type: "button", "data-testid": "card-cancel-button", onClick: onCancel, children: "\u53D6\u6D88" })] }));
};
const CardSearch = ({ onSearch }) => {
    const [searchTerm, setSearchTerm] = useState('');
    const handleSearch = (e) => {
        const term = e.target.value;
        setSearchTerm(term);
        onSearch(term);
    };
    return ((0, jsx_runtime_1.jsx)("div", { "data-testid": "card-search", children: (0, jsx_runtime_1.jsx)("input", { "data-testid": "search-input", value: searchTerm, onChange: handleSearch, placeholder: "\u641C\u7D22\u5361\u7247..." }) }));
};
// 模拟状态管理
function useState(initial) {
    let state = initial;
    return [
        state,
        (value) => {
            state = value;
        }
    ];
}
(0, globals_1.describe)('CardManagementIntegration', () => {
    let databaseService;
    let supabaseService;
    let syncService;
    let performanceTester;
    let user;
    (0, globals_1.beforeEach)(() => {
        // 创建模拟服务
        databaseService = new mock_services_1.MockDatabaseService();
        supabaseService = new mock_services_1.MockSupabaseService();
        syncService = new mock_services_1.MockSyncService(supabaseService, databaseService);
        performanceTester = new advanced_test_utils_1.PerformanceTester();
        user = user_event_1.default.setup();
    });
    (0, globals_1.afterEach)(() => {
        // 清理
        databaseService.reset();
        supabaseService.reset();
        syncService.reset();
        performanceTester.clear();
    });
    (0, globals_1.describe)('卡片创建和显示', () => {
        (0, globals_1.it)('应该能够创建新卡片并显示在网格中', async () => {
            const mockCards = [];
            const mockOnCardClick = jest.fn();
            const mockOnCardDelete = jest.fn();
            const mockOnCardFlip = jest.fn();
            const { rerender } = (0, react_1.render)((0, jsx_runtime_1.jsx)(CardGrid, { cards: mockCards, onCardClick: mockOnCardClick, onCardDelete: mockOnCardDelete, onCardFlip: mockOnCardFlip }));
            // 初始状态应该没有卡片
            (0, globals_1.expect)(react_1.screen.queryByTestId('card-grid')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.queryAllByTestId(/^card-/)).toHaveLength(0);
            // 创建新卡片
            const newCard = data_fixtures_1.CardFixture.basic();
            mockCards.push(newCard);
            // 重新渲染
            rerender((0, jsx_runtime_1.jsx)(CardGrid, { cards: mockCards, onCardClick: mockOnCardClick, onCardDelete: mockOnCardDelete, onCardFlip: mockOnCardFlip }));
            // 新卡片应该显示在网格中
            (0, globals_1.expect)(react_1.screen.getByTestId(`card-${newCard.id}`)).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByTestId(`card-title-${newCard.id}`)).toHaveText(newCard.frontContent.title);
            (0, globals_1.expect)(react_1.screen.getByTestId(`card-content-${newCard.id}`)).toHaveText(newCard.frontContent.text);
        });
        (0, globals_1.it)('应该能够通过表单创建卡片', async () => {
            const mockOnSubmit = jest.fn();
            const mockOnCancel = jest.fn();
            (0, react_1.render)((0, jsx_runtime_1.jsx)(CardForm, { onSubmit: mockOnSubmit, onCancel: mockOnCancel }));
            // 填写表单
            const titleInput = react_1.screen.getByTestId('card-title-input');
            const contentInput = react_1.screen.getByTestId('card-content-input');
            const submitButton = react_1.screen.getByTestId('card-submit-button');
            await user.type(titleInput, '测试卡片标题');
            await user.type(contentInput, '测试卡片内容');
            // 提交表单
            await user.click(submitButton);
            // 应该调用onSubmit回调
            (0, globals_1.expect)(mockOnSubmit).toHaveBeenCalledTimes(1);
            (0, globals_1.expect)(mockOnSubmit).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                frontContent: globals_1.expect.objectContaining({
                    title: '测试卡片标题',
                    text: '测试卡片内容',
                }),
            }));
        });
        (0, globals_1.it)('应该验证表单输入', async () => {
            const mockOnSubmit = jest.fn();
            const mockOnCancel = jest.fn();
            (0, react_1.render)((0, jsx_runtime_1.jsx)(CardForm, { onSubmit: mockOnSubmit, onCancel: mockOnCancel }));
            const submitButton = react_1.screen.getByTestId('card-submit-button');
            // 尝试提交空表单
            await user.click(submitButton);
            // 不应该调用onSubmit（HTML5验证会阻止提交）
            (0, globals_1.expect)(mockOnSubmit).not.toHaveBeenCalled();
            // 填写标题但不填写内容
            const titleInput = react_1.screen.getByTestId('card-title-input');
            await user.type(titleInput, '只有标题');
            await user.click(submitButton);
            // 仍然不应该调用onSubmit（内容是必需的）
            (0, globals_1.expect)(mockOnSubmit).not.toHaveBeenCalled();
        });
    });
    (0, globals_1.describe)('卡片操作', () => {
        (0, globals_1.it)('应该能够删除卡片', async () => {
            const testCard = data_fixtures_1.CardFixture.basic();
            const mockCards = [testCard];
            const mockOnCardDelete = jest.fn();
            (0, react_1.render)((0, jsx_runtime_1.jsx)(CardGrid, { cards: mockCards, onCardClick: jest.fn(), onCardDelete: mockOnCardDelete, onCardFlip: jest.fn() }));
            // 点击删除按钮
            const deleteButton = react_1.screen.getByTestId(`card-delete-${testCard.id}`);
            await user.click(deleteButton);
            // 应该调用删除回调
            (0, globals_1.expect)(mockOnCardDelete).toHaveBeenCalledTimes(1);
            (0, globals_1.expect)(mockOnCardDelete).toHaveBeenCalledWith(testCard.id);
        });
        (0, globals_1.it)('应该能够翻转卡片', async () => {
            const testCard = data_fixtures_1.CardFixture.basic();
            const mockCards = [testCard];
            const mockOnCardFlip = jest.fn();
            (0, react_1.render)((0, jsx_runtime_1.jsx)(CardGrid, { cards: mockCards, onCardClick: jest.fn(), onCardDelete: jest.fn(), onCardFlip: mockOnCardFlip }));
            // 点击翻转按钮
            const flipButton = react_1.screen.getByTestId(`card-flip-${testCard.id}`);
            await user.click(flipButton);
            // 应该调用翻转回调
            (0, globals_1.expect)(mockOnCardFlip).toHaveBeenCalledTimes(1);
            (0, globals_1.expect)(mockOnCardFlip).toHaveBeenCalledWith(testCard.id);
        });
        (0, globals_1.it)('应该能够点击卡片查看详情', async () => {
            const testCard = data_fixtures_1.CardFixture.basic();
            const mockCards = [testCard];
            const mockOnCardClick = jest.fn();
            (0, react_1.render)((0, jsx_runtime_1.jsx)(CardGrid, { cards: mockCards, onCardClick: mockOnCardClick, onCardDelete: jest.fn(), onCardFlip: jest.fn() }));
            // 点击卡片
            const clickArea = react_1.screen.getByTestId(`card-click-${testCard.id}`);
            await user.click(clickArea);
            // 应该调用点击回调
            (0, globals_1.expect)(mockOnCardClick).toHaveBeenCalledTimes(1);
            (0, globals_1.expect)(mockOnCardClick).toHaveBeenCalledWith(testCard);
        });
    });
    (0, globals_1.describe)('卡片搜索', () => {
        (0, globals_1.it)('应该能够搜索卡片', async () => {
            const mockOnSearch = jest.fn();
            (0, react_1.render)((0, jsx_runtime_1.jsx)(CardSearch, { onSearch: mockOnSearch }));
            const searchInput = react_1.screen.getByTestId('search-input');
            // 输入搜索词
            await user.type(searchInput, '搜索关键词');
            // 应该调用搜索回调
            (0, globals_1.expect)(mockOnSearch).toHaveBeenCalledTimes(5); // 每个字符触发一次
            (0, globals_1.expect)(mockOnSearch).toHaveBeenLastCalledWith('搜索关键词');
        });
        (0, globals_1.it)('应该处理搜索输入的防抖', async () => {
            const mockOnSearch = jest.fn();
            (0, react_1.render)((0, jsx_runtime_1.jsx)(CardSearch, { onSearch: mockOnSearch }));
            const searchInput = react_1.screen.getByTestId('search-input');
            // 快速输入多个字符
            await user.type(searchInput, '快速搜索测试');
            // 在实际应用中，这里应该有防抖逻辑
            // 在这个测试中，我们验证每次输入都会触发搜索
            (0, globals_1.expect)(mockOnSearch).toHaveBeenCalledTimes(6);
        });
    });
    (0, globals_1.describe)('数据库集成', () => {
        (0, globals_1.it)('应该能够将卡片保存到数据库', async () => {
            const cardData = data_fixtures_1.CardFixture.basic();
            // 性能测试
            const addTime = await performanceTester.measure('add-card', async () => {
                const result = await databaseService.cards.add(cardData);
                return result;
            });
            // 验证卡片已保存
            const savedCard = await databaseService.cards.get(cardData.id);
            (0, globals_1.expect)(savedCard).toBeDefined();
            (0, globals_1.expect)(savedCard?.frontContent.title).toBe(cardData.frontContent.title);
            // 验证性能
            (0, globals_1.expect)(addTime).toBeLessThan(100); // 应该在100ms内完成
        });
        (0, globals_1.it)('应该能够从数据库获取卡片列表', async () => {
            const cards = data_fixtures_1.CardFixture.list(10);
            // 批量添加卡片
            const bulkAddTime = await performanceTester.measure('bulk-add-cards', async () => {
                await databaseService.cards.bulkAdd(cards);
            });
            // 获取所有卡片
            const allCards = await databaseService.cards.getAll();
            (0, globals_1.expect)(allCards).toHaveLength(10);
            // 验证性能
            (0, globals_1.expect)(bulkAddTime).toBeLessThan(200); // 应该在200ms内完成
        });
        (0, globals_1.it)('应该能够更新卡片', async () => {
            const cardData = data_fixtures_1.CardFixture.basic();
            await databaseService.cards.add(cardData);
            const updates = {
                frontContent: {
                    ...cardData.frontContent,
                    title: '更新后的标题',
                },
            };
            const updateTime = await performanceTester.measure('update-card', async () => {
                await databaseService.cards.update(cardData.id, updates);
            });
            // 验证更新
            const updatedCard = await databaseService.cards.get(cardData.id);
            (0, globals_1.expect)(updatedCard?.frontContent.title).toBe('更新后的标题');
            // 验证性能
            (0, globals_1.expect)(updateTime).toBeLessThan(50); // 应该在50ms内完成
        });
        (0, globals_1.it)('应该能够删除卡片', async () => {
            const cardData = data_fixtures_1.CardFixture.basic();
            await databaseService.cards.add(cardData);
            const deleteTime = await performanceTester.measure('delete-card', async () => {
                await databaseService.cards.delete(cardData.id);
            });
            // 验证删除
            const deletedCard = await databaseService.cards.get(cardData.id);
            (0, globals_1.expect)(deletedCard).toBeUndefined();
            // 验证性能
            (0, globals_1.expect)(deleteTime).toBeLessThan(50); // 应该在50ms内完成
        });
    });
    (0, globals_1.describe)('同步集成', () => {
        (0, globals_1.it)('应该能够同步卡片到云端', async () => {
            // 创建本地卡片
            const cardData = data_fixtures_1.CardFixture.basic();
            await databaseService.cards.add(cardData);
            // 创建同步操作
            const syncOperation = {
                id: 'sync-op-1',
                type: 'create',
                entity: 'card',
                entityId: cardData.id,
                data: cardData,
                priority: 'normal',
                timestamp: new Date(),
                retryCount: 0,
                maxRetries: 3,
                status: 'pending',
            };
            await databaseService.syncQueue.add(syncOperation);
            // 执行同步
            const syncTime = await performanceTester.measure('sync-card', async () => {
                const result = await syncService.syncNow();
                return result;
            });
            // 验证同步结果
            (0, globals_1.expect)(syncTime).toBeLessThan(1000); // 应该在1秒内完成
            // 验证同步队列状态
            const syncStats = await databaseService.syncQueue.getStats();
            (0, globals_1.expect)(syncStats.completed).toBe(1);
            (0, globals_1.expect)(syncStats.pending).toBe(0);
        });
        (0, globals_1.it)('应该处理同步错误', async () => {
            // 设置离线状态
            syncService.setOnline(false);
            // 创建卡片并尝试同步
            const cardData = data_fixtures_1.CardFixture.basic();
            await databaseService.cards.add(cardData);
            const syncOperation = {
                id: 'sync-op-2',
                type: 'create',
                entity: 'card',
                entityId: cardData.id,
                data: cardData,
                priority: 'normal',
                timestamp: new Date(),
                retryCount: 0,
                maxRetries: 3,
                status: 'pending',
            };
            await databaseService.syncQueue.add(syncOperation);
            // 尝试同步
            const result = await syncService.syncNow();
            // 应该失败
            (0, globals_1.expect)(result.success).toBe(false);
            (0, globals_1.expect)(result.errors).toBeGreaterThan(0);
            // 验证同步队列状态
            const syncStats = await databaseService.syncQueue.getStats();
            (0, globals_1.expect)(syncStats.failed).toBe(1);
        });
    });
    (0, globals_1.describe)('文件夹集成', () => {
        (0, globals_1.it)('应该能够创建文件夹并将卡片移动到文件夹', async () => {
            // 创建文件夹
            const folderData = data_fixtures_1.FolderFixture.basic();
            await databaseService.folders.add(folderData);
            // 创建卡片
            const cardData = data_fixtures_1.CardFixture.inFolder(folderData.id);
            await databaseService.cards.add(cardData);
            // 验证文件夹包含卡片
            const folderCards = await databaseService.cards.findByFolder(folderData.id);
            (0, globals_1.expect)(folderCards).toHaveLength(1);
            (0, globals_1.expect)(folderCards[0].id).toBe(cardData.id);
        });
        (0, globals_1.it)('应该能够获取文件夹层级结构', async () => {
            // 创建文件夹层级
            const rootFolder = data_fixtures_1.FolderFixture.basic({ id: 'root' });
            const childFolder1 = data_fixtures_1.FolderFixture.nested('root', { id: 'child1' });
            const childFolder2 = data_fixtures_1.FolderFixture.nested('root', { id: 'child2' });
            await Promise.all([
                databaseService.folders.add(rootFolder),
                databaseService.folders.add(childFolder1),
                databaseService.folders.add(childFolder2),
            ]);
            // 获取根文件夹
            const rootFolders = await databaseService.folders.getRoot();
            (0, globals_1.expect)(rootFolders).toHaveLength(1);
            (0, globals_1.expect)(rootFolders[0].id).toBe('root');
            // 获取子文件夹
            const childFolders = await databaseService.folders.getChildren('root');
            (0, globals_1.expect)(childFolders).toHaveLength(2);
            (0, globals_1.expect)(childFolders.map(f => f.id)).toEqual(['child1', 'child2']);
        });
    });
    (0, globals_1.describe)('标签集成', () => {
        (0, globals_1.it)('应该能够为卡片添加标签', async () => {
            // 创建标签
            const tagData = data_fixtures_1.TagFixture.basic();
            await databaseService.tags.add(tagData);
            // 创建带标签的卡片
            const cardData = data_fixtures_1.CardFixture.basic({
                frontContent: {
                    ...data_fixtures_1.CardFixture.basic().frontContent,
                    tags: [tagData.name],
                },
            });
            await databaseService.cards.add(cardData);
            // 通过标签查找卡片
            const taggedCards = await databaseService.cards.findByTag(tagData.name);
            (0, globals_1.expect)(taggedCards).toHaveLength(1);
            (0, globals_1.expect)(taggedCards[0].id).toBe(cardData.id);
        });
        (0, globals_1.it)('应该能够获取标签统计信息', async () => {
            // 创建多个标签和卡片
            const tags = data_fixtures_1.TagFixture.list().slice(0, 3);
            await Promise.all(tags.map(tag => databaseService.tags.add(tag)));
            const cards = [
                data_fixtures_1.CardFixture.basic({
                    frontContent: {
                        ...data_fixtures_1.CardFixture.basic().frontContent,
                        tags: [tags[0].name, tags[1].name],
                    },
                }),
                data_fixtures_1.CardFixture.basic({
                    frontContent: {
                        ...data_fixtures_1.CardFixture.basic().frontContent,
                        tags: [tags[0].name],
                    },
                }),
            ];
            await Promise.all(cards.map(card => databaseService.cards.add(card)));
            // 获取所有标签（应该更新计数）
            const allTags = await databaseService.tags.getAll();
            (0, globals_1.expect)(allTags).toHaveLength(3);
        });
    });
    (0, globals_1.describe)('性能测试', () => {
        (0, globals_1.it)('应该能够处理大量卡片', async () => {
            // 创建大量卡片
            const largeCardCount = 100;
            const cards = data_fixtures_1.CardFixture.list(largeCardCount);
            const bulkAddTime = await performanceTester.measure('bulk-add-large-cards', async () => {
                await databaseService.cards.bulkAdd(cards);
            });
            // 验证所有卡片都已保存
            const allCards = await databaseService.cards.getAll();
            (0, globals_1.expect)(allCards).toHaveLength(largeCardCount);
            // 验证性能
            (0, globals_1.expect)(bulkAddTime).toBeLessThan(1000); // 应该在1秒内完成
            // 测试获取性能
            const getAllTime = await performanceTester.measure('get-all-cards', async () => {
                return await databaseService.cards.getAll();
            });
            (0, globals_1.expect)(getAllTime).toBeLessThan(100); // 应该在100ms内完成
        });
        (0, globals_1.it)('应该能够处理快速连续操作', async () => {
            // 快速连续创建卡片
            const operations = [];
            for (let i = 0; i < 10; i++) {
                operations.push(performanceTester.measure(`create-card-${i}`, async () => {
                    const card = data_fixtures_1.CardFixture.basic();
                    await databaseService.cards.add(card);
                    return card;
                }));
            }
            // 并行执行所有操作
            const results = await Promise.all(operations);
            // 验证所有操作都成功
            (0, globals_1.expect)(results).toHaveLength(10);
            // 验证性能（每个操作都应该很快）
            results.forEach((time, index) => {
                (0, globals_1.expect)(time).toBeLessThan(100); // 每个操作应该在100ms内完成
            });
        });
    });
    (0, globals_1.describe)('错误处理', () => {
        (0, globals_1.it)('应该处理数据库操作失败', async () => {
            // 模拟数据库错误
            jest.spyOn(databaseService.cards, 'add').mockRejectedValueOnce(new Error('Database error'));
            // 尝试添加卡片
            await (0, globals_1.expect)(databaseService.cards.add(data_fixtures_1.CardFixture.basic())).rejects.toThrow('Database error');
        });
        (0, globals_1.it)('应该处理同步失败', async () => {
            // 模拟网络错误
            jest.spyOn(supabaseService.from('cards'), 'insert').mockRejectedValueOnce(new Error('Network error'));
            // 创建卡片并尝试同步
            const cardData = data_fixtures_1.CardFixture.basic();
            await databaseService.cards.add(cardData);
            const syncOperation = {
                id: 'sync-op-error',
                type: 'create',
                entity: 'card',
                entityId: cardData.id,
                data: cardData,
                priority: 'normal',
                timestamp: new Date(),
                retryCount: 0,
                maxRetries: 3,
                status: 'pending',
            };
            await databaseService.syncQueue.add(syncOperation);
            // 尝试同步
            const result = await syncService.syncNow();
            // 应该失败
            (0, globals_1.expect)(result.success).toBe(false);
            (0, globals_1.expect)(result.errors).toBeGreaterThan(0);
            // 应该记录错误
            const syncErrors = syncService.getSyncErrors();
            (0, globals_1.expect)(syncErrors.length).toBeGreaterThan(0);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
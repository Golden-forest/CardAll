{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\tests\\unit\\services\\local-operation.test.ts","mappings":";;AAGA,QAAQ;AACR,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,GAAG,EAAE,CAAC,CAAC;IACtC,EAAE,EAAE;QACF,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;QAC5C,SAAS,EAAE;YACT,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;YACd,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;YACd,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;YACjB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;YACjB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;YACjB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;YAChB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;YACjC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;YAClC,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;YAC/B,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;YACjC,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;YACjC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;YACnC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;YACnC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;YAChC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;YAClC,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;YACjC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;YAClC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;YAClB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;YAChB,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;YACrB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;SACjB;KACF;CACF,CAAC,CAAC,CAAA;AA/BH,gEAAoJ;AACpJ,kDAAwC;AAgCxC,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACrC,IAAI,OAA8B,CAAA;IAClC,IAAI,MAAW,CAAA;IAEf,UAAU,CAAC,GAAG,EAAE;QACd,IAAI,CAAC,aAAa,EAAE,CAAA;QACpB,MAAM,GAAG,aAAE,CAAC,SAAS,CAAA;QACrB,OAAO,GAAG,IAAI,uCAAqB,EAAE,CAAA;QAErC,kBAAkB;QAClB,MAAM,gBAAgB,GAAG;YACvB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;YAClB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;YAClB,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;YACrB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;SACjB,CAAA;QACD,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,cAAc,EAAE,EAAE,KAAK,EAAE,gBAAgB,EAAE,CAAC,CAAA;IAC5E,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,KAAK,EAAE,GAAG,EAAE;QACnB,EAAE,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;YACzB,MAAM,OAAO,CAAC,UAAU,EAAE,CAAA;YAC1B,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAA;QAC/B,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;YAC3B,MAAM,SAAS,GAAG;gBAChB;oBACE,EAAE,EAAE,QAAQ;oBACZ,IAAI,EAAE,QAAQ;oBACd,KAAK,EAAE,OAAO;oBACd,IAAI,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE;oBAC9B,OAAO,EAAE,QAAQ;oBACjB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACnC,UAAU,EAAE,CAAC;oBACb,MAAM,EAAE,SAAkB;oBAC1B,YAAY,EAAE,CAAC;iBAChB;aACF,CAAA;YAED,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAA;YAE3E,8BAA8B;YAC9B,IAAI,kBAAkB,GAAU,EAAE,CAAA;YAElC,oBAAoB;YACpB,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,SAAS,EAAE,EAAE;gBACtD,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;gBAClC,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC,CAAA;YACtC,CAAC,CAAC,CAAA;YAEF,qBAAqB;YACrB,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBACjD,OAAO,OAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAA;YAC5C,CAAC,CAAC,CAAA;YAEF,MAAM,OAAO,CAAC,UAAU,EAAE,CAAA;YAE1B,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,aAAa,EAAE,CAAA;YAC3C,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACvC,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;QACpB,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;YAC3B,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAA;YACnD,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAA;YAEhD,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,YAAY,CAAC;gBAC7C,UAAU,EAAE,MAAM;gBAClB,aAAa,EAAE,QAAQ;gBACvB,QAAQ,EAAE,QAAQ;gBAClB,IAAI,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE,WAAW,EAAE,QAAQ,EAAE;gBACrD,QAAQ,EAAE,QAAQ;gBAClB,SAAS,EAAE,EAAE;aACd,CAAC,CAAA;YAEF,MAAM,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAA;YACjC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,gBAAgB,EAAE,CAAA;QACvC,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YACxB,MAAM,aAAa,GAAG;gBACpB,EAAE,EAAE,aAAa;gBACjB,UAAU,EAAE,MAAe;gBAC3B,aAAa,EAAE,QAAiB;gBAChC,QAAQ,EAAE,QAAQ;gBAClB,IAAI,EAAE,EAAE,YAAY,EAAE,SAAS,EAAE;gBACjC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,UAAU,EAAE,CAAC;gBACb,MAAM,EAAE,SAAkB;gBAC1B,YAAY,EAAE,CAAC;gBACf,QAAQ,EAAE,QAAiB;gBAC3B,SAAS,EAAE,EAAE;aACd,CAAA;YAED,oBAAoB;YACpB,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAA;YACzD,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAA;YAE9C,MAAM,OAAO,CAAC,YAAY,CAAC;gBACzB,UAAU,EAAE,MAAM;gBAClB,aAAa,EAAE,QAAQ;gBACvB,QAAQ,EAAE,QAAQ;gBAClB,IAAI,EAAE,EAAE,YAAY,EAAE,YAAY,EAAE;aACrC,CAAC,CAAA;YAEF,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,gBAAgB,EAAE,CAAA;QAC1C,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YACxB,MAAM,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC;gBAChC,UAAU,EAAE,MAAM;gBAClB,aAAa,EAAE,QAAQ;gBACvB,QAAQ,EAAE,EAAE;gBACZ,IAAI,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE;aAC/B,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAA;QAC7C,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;QACpB,EAAE,CAAC,eAAe,EAAE,KAAK,IAAI,EAAE;YAC7B,MAAM,cAAc,GAAG;gBACrB;oBACE,EAAE,EAAE,MAAM;oBACV,UAAU,EAAE,MAAe;oBAC3B,aAAa,EAAE,QAAiB;oBAChC,QAAQ,EAAE,QAAQ;oBAClB,IAAI,EAAE,EAAE;oBACR,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,UAAU,EAAE,CAAC;oBACb,MAAM,EAAE,SAAkB;oBAC1B,YAAY,EAAE,CAAC;oBACf,QAAQ,EAAE,MAAe;iBAC1B;gBACD;oBACE,EAAE,EAAE,MAAM;oBACV,UAAU,EAAE,QAAiB;oBAC7B,aAAa,EAAE,QAAiB;oBAChC,QAAQ,EAAE,UAAU;oBACpB,IAAI,EAAE,EAAE;oBACR,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,UAAU,EAAE,CAAC;oBACb,MAAM,EAAE,QAAiB;oBACzB,YAAY,EAAE,CAAC;oBACf,QAAQ,EAAE,QAAiB;iBAC5B;gBACD;oBACE,EAAE,EAAE,MAAM;oBACV,UAAU,EAAE,KAAc;oBAC1B,aAAa,EAAE,QAAiB;oBAChC,QAAQ,EAAE,OAAO;oBACjB,IAAI,EAAE,EAAE;oBACR,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,UAAU,EAAE,CAAC;oBACb,MAAM,EAAE,QAAiB;oBACzB,YAAY,EAAE,CAAC;oBACf,QAAQ,EAAE,KAAc;iBACzB;aACF,CAAA;YAED,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAA;YAE5D,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,aAAa,EAAE,CAAA;YAE3C,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACrC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACjC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACnC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YAChC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YAClC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACtC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACrC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACrC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACvC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACpC,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACzC,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,SAAS,EAAE,KAAK,IAAI,EAAE;YACvB,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAA;YAEhD,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,aAAa,EAAE,CAAA;YAE3C,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACrC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;gBAC3B,IAAI,EAAE,CAAC;gBACP,MAAM,EAAE,CAAC;gBACT,GAAG,EAAE,CAAC;gBACN,KAAK,EAAE,CAAC;aACT,CAAC,CAAA;YACF,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC;gBAC7B,OAAO,EAAE,CAAC;gBACV,UAAU,EAAE,CAAC;gBACb,SAAS,EAAE,CAAC;gBACZ,MAAM,EAAE,CAAC;gBACT,SAAS,EAAE,CAAC;aACb,CAAC,CAAA;YACF,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACzC,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;QACpB,EAAE,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;YACzB,MAAM,cAAc,GAAG;gBACrB;oBACE,EAAE,EAAE,eAAe;oBACnB,UAAU,EAAE,MAAe;oBAC3B,aAAa,EAAE,QAAiB;oBAChC,QAAQ,EAAE,QAAQ;oBAClB,IAAI,EAAE,EAAE;oBACR,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,UAAU,EAAE,CAAC;oBACb,MAAM,EAAE,SAAkB;oBAC1B,YAAY,EAAE,CAAC;oBACf,QAAQ,EAAE,MAAe;iBAC1B;aACF,CAAA;YAED,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAA;YAE5D,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC,oBAAoB,EAAE,CAAA;YAEvD,MAAM,CAAC,UAAU,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;YAClC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;QAChD,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM,cAAc,GAAG;gBACrB;oBACE,EAAE,EAAE,eAAe;oBACnB,UAAU,EAAE,MAAe;oBAC3B,aAAa,EAAE,QAAiB;oBAChC,QAAQ,EAAE,QAAQ;oBAClB,IAAI,EAAE,EAAE;oBACR,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,UAAU,EAAE,CAAC;oBACb,MAAM,EAAE,SAAkB;oBAC1B,YAAY,EAAE,CAAC;oBACf,QAAQ,EAAE,MAAe;iBAC1B;gBACD;oBACE,EAAE,EAAE,cAAc;oBAClB,UAAU,EAAE,MAAe;oBAC3B,aAAa,EAAE,QAAiB;oBAChC,QAAQ,EAAE,QAAQ;oBAClB,IAAI,EAAE,EAAE;oBACR,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,UAAU,EAAE,CAAC;oBACb,MAAM,EAAE,SAAkB;oBAC1B,YAAY,EAAE,CAAC;oBACf,QAAQ,EAAE,KAAc;iBACzB;aACF,CAAA;YAED,SAAS;YACT,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;gBAC1D,GAAG,MAAM;gBACT,OAAO,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;aAChE,CAAC,CAAC,CAAA;YAEH,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAA;YAE5D,MAAM,eAAe,GAAG,MAAM,OAAO,CAAC,oBAAoB,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,CAAA;YAExE,MAAM,CAAC,eAAe,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;YACvC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QAClD,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;QACpB,EAAE,CAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YACxB,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAA;YAE7C,MAAM,OAAO,CAAC,UAAU,EAAE,CAAA;YAE1B,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,gBAAgB,EAAE,CAAA;QACzC,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAA;YAE9C,MAAM,OAAO,CAAC,eAAe,CAAC,YAAY,CAAC,CAAA;YAE3C,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAA;QAC1D,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM,aAAa,GAAG;gBACpB,EAAE,EAAE,SAAS;gBACb,UAAU,EAAE,MAAe;gBAC3B,aAAa,EAAE,QAAiB;gBAChC,QAAQ,EAAE,QAAQ;gBAClB,IAAI,EAAE,EAAE;gBACR,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,UAAU,EAAE,CAAC;gBACb,MAAM,EAAE,SAAkB;gBAC1B,YAAY,EAAE,CAAC;aAChB,CAAA;YAED,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAA;YAEvD,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,CAAA;YAEvD,MAAM,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAA;YAC/B,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;QACvC,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;QACpB,EAAE,CAAC,gBAAgB,EAAE,GAAG,EAAE;YACxB,MAAM,YAAY,GAAG,IAAI,CAAC,EAAE,EAAE,CAAA;YAE9B,OAAO,CAAC,gBAAgB,CAAC,mBAAmB,EAAE,YAAY,CAAC,CAAA;YAE3D,QAAQ;YACR,OAAO,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,CAAA;QAClD,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,aAAa,EAAE,GAAG,EAAE;YACrB,MAAM,YAAY,GAAG,IAAI,CAAC,EAAE,EAAE,CAAA;YAE9B,OAAO,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAA;YACxD,OAAO,CAAC,gBAAgB,CAAC,oBAAoB,EAAE,YAAY,CAAC,CAAA;YAE5D,mBAAmB;YACnB,MAAM,CAAE,OAAe,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;YACpE,MAAM,CAAE,OAAe,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;QAC1E,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;QACpB,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;YAC3B,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAA;YACrE,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAA;YAEhD,MAAM,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC;gBAChC,UAAU,EAAE,MAAM;gBAClB,aAAa,EAAE,QAAQ;gBACvB,QAAQ,EAAE,QAAQ;gBAClB,IAAI,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE;aAC/B,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAA;QACvC,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,cAAc,EAAE,KAAK,IAAI,EAAE;YAC5B,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAA;YACnD,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAA;YAChD,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAA;YAEhD,qBAAqB;YACrB,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBACvD,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAA;YAClC,CAAC,CAAC,CAAA;YAEF,kBAAkB;YAClB,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,YAAY,CAAC;gBAC7C,UAAU,EAAE,MAAM;gBAClB,aAAa,EAAE,QAAQ;gBACvB,QAAQ,EAAE,QAAQ;gBAClB,IAAI,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE;aAC/B,CAAC,CAAA;YAEF,MAAM,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAA;QACnC,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,cAAc,EAAE,KAAK,IAAI,EAAE;YAC5B,MAAM,aAAa,GAAG;gBACpB,EAAE,EAAE,SAAS;gBACb,UAAU,EAAE,MAAe;gBAC3B,aAAa,EAAE,QAAiB;gBAChC,QAAQ,EAAE,QAAQ;gBAClB,IAAI,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE;gBAC9B,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,UAAU,EAAE,CAAC;gBACb,MAAM,EAAE,SAAkB;gBAC1B,YAAY,EAAE,CAAC;gBACf,QAAQ,EAAE,QAAiB;gBAC3B,SAAS,EAAE,EAAE;aACd,CAAA;YAED,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAA;YACvD,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAA;YAE9C,MAAM,OAAO,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAA;YAEhD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,SAAS,EAAE;gBACpD,MAAM,EAAE,YAAY;gBACpB,mBAAmB,EAAE,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC;aACtC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,cAAc,EAAE,KAAK,IAAI,EAAE;YAC5B,MAAM,aAAa,GAAG;gBACpB,EAAE,EAAE,SAAS;gBACb,UAAU,EAAE,MAAe;gBAC3B,aAAa,EAAE,QAAiB;gBAChC,QAAQ,EAAE,QAAQ;gBAClB,IAAI,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE;gBAC9B,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,UAAU,EAAE,CAAC;gBACb,MAAM,EAAE,YAAqB;gBAC7B,YAAY,EAAE,CAAC;gBACf,QAAQ,EAAE,QAAiB;gBAC3B,SAAS,EAAE,EAAE;gBACb,mBAAmB,EAAE,IAAI,IAAI,EAAE;aAChC,CAAA;YAED,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAA;YACvD,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAA;YAE9C,MAAM,OAAO,CAAC,sBAAsB,CAAC,SAAS,CAAC,CAAA;YAE/C,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,SAAS,EAAE;gBACpD,MAAM,EAAE,WAAW;gBACnB,iBAAiB,EAAE,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC;aACpC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;YAC3B,MAAM,aAAa,GAAG;gBACpB,EAAE,EAAE,SAAS;gBACb,UAAU,EAAE,MAAe;gBAC3B,aAAa,EAAE,QAAiB;gBAChC,QAAQ,EAAE,QAAQ;gBAClB,IAAI,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE;gBAC9B,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,UAAU,EAAE,CAAC,EAAE,WAAW;gBAC1B,MAAM,EAAE,YAAqB;gBAC7B,YAAY,EAAE,CAAC;gBACf,QAAQ,EAAE,QAAiB;gBAC3B,SAAS,EAAE,EAAE;gBACb,UAAU,EAAE,CAAC;gBACb,UAAU,EAAE,IAAI;aACjB,CAAA;YAED,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAA;YACvD,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAA;YAE9C,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,YAAY,CAAC,CAAA;YACrC,MAAM,OAAO,CAAC,mBAAmB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAA;YAEnD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,SAAS,EAAE;gBACpD,UAAU,EAAE,CAAC;gBACb,UAAU,EAAE,IAAI,EAAE,SAAS;gBAC3B,SAAS,EAAE,KAAK,CAAC,OAAO;gBACxB,MAAM,EAAE,QAAQ,CAAC,WAAW;aAC7B,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YACxB,MAAM,aAAa,GAAG;gBACpB,EAAE,EAAE,SAAS;gBACb,UAAU,EAAE,MAAe;gBAC3B,aAAa,EAAE,QAAiB;gBAChC,QAAQ,EAAE,QAAQ;gBAClB,IAAI,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE;gBAC9B,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,UAAU,EAAE,CAAC;gBACb,MAAM,EAAE,SAAkB;gBAC1B,YAAY,EAAE,CAAC;gBACf,QAAQ,EAAE,QAAiB;gBAC3B,SAAS,EAAE,EAAE;aACd,CAAA;YAED,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAA;YACvD,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAA;YAE9C,MAAM,OAAO,CAAC,eAAe,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAA;YAE1D,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,SAAS,EAAE;gBACpD,MAAM,EAAE,WAAW;gBACnB,SAAS,EAAE,gBAAgB;aAC5B,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;QACpB,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;YAC3B,MAAM,cAAc,GAAG;gBACrB;oBACE,EAAE,EAAE,aAAa;oBACjB,UAAU,EAAE,MAAe;oBAC3B,aAAa,EAAE,QAAiB;oBAChC,QAAQ,EAAE,QAAQ;oBAClB,IAAI,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE;oBAC9B,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,UAAU,EAAE,CAAC;oBACb,MAAM,EAAE,QAAiB;oBACzB,YAAY,EAAE,CAAC;oBACf,QAAQ,EAAE,QAAiB;oBAC3B,SAAS,EAAE,EAAE;iBACd;gBACD;oBACE,EAAE,EAAE,aAAa;oBACjB,UAAU,EAAE,MAAe;oBAC3B,aAAa,EAAE,QAAiB;oBAChC,QAAQ,EAAE,QAAQ;oBAClB,IAAI,EAAE,EAAE,YAAY,EAAE,OAAO,EAAE;oBAC/B,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,UAAU,EAAE,CAAC;oBACb,MAAM,EAAE,QAAiB;oBACzB,YAAY,EAAE,CAAC;oBACf,QAAQ,EAAE,QAAiB;oBAC3B,SAAS,EAAE,EAAE;iBACd;aACF,CAAA;YAED,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAA;YAC5D,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAA;YAE9C,MAAM,YAAY,GAAG,MAAM,OAAO,CAAC,qBAAqB,EAAE,CAAA;YAE1D,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YAC5B,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAA;QAChD,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,cAAc,EAAE,KAAK,IAAI,EAAE;YAC5B,mCAAmC;YACnC,MAAM,cAAc,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;gBAC5D,EAAE,EAAE,gBAAgB,CAAC,EAAE;gBACvB,UAAU,EAAE,MAAe;gBAC3B,aAAa,EAAE,QAAiB;gBAChC,QAAQ,EAAE,QAAQ,CAAC,EAAE;gBACrB,IAAI,EAAE,EAAE,YAAY,EAAE,OAAO,CAAC,EAAE,EAAE;gBAClC,SAAS,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,EAAE,UAAU;gBACtD,UAAU,EAAE,CAAC;gBACb,MAAM,EAAE,WAAoB;gBAC5B,YAAY,EAAE,CAAC;gBACf,QAAQ,EAAE,QAAiB;gBAC3B,SAAS,EAAE,EAAE;aACd,CAAC,CAAC,CAAA;YAEH,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAA;YAC5D,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAA;YAE9C,MAAM,YAAY,GAAG,MAAM,OAAO,CAAC,wBAAwB,EAAE,CAAA;YAE7D,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA,CAAC,sBAAsB;YACnD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,CAAA,CAAC,UAAU;QACzE,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,UAAU,CAAC,GAAG,EAAE;YACd,kBAAkB;YAClB,MAAM,iBAAiB,GAAG,EAAE,GAAG,SAAS,EAAE,CAAA;YAE1C,SAAS;YACT,OAAO,GAAG,EAAE;gBACV,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAA;YAC7C,CAAC,CAAA;QACH,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC1B,WAAW;YACX,MAAM,cAAc,GAAG;gBACrB,IAAI,EAAE,MAAM;gBACZ,aAAa,EAAE,IAAI;gBACnB,QAAQ,EAAE,EAAE;gBACZ,GAAG,EAAE,GAAG;gBACR,QAAQ,EAAE,KAAK;aAChB,CAAA;YAED,MAAM,CAAC,cAAc,CAAC,SAAS,EAAE,YAAY,EAAE;gBAC7C,KAAK,EAAE,cAAc;gBACrB,YAAY,EAAE,IAAI;aACnB,CAAC,CAAA;YAEF,MAAM,CAAC,cAAc,CAAC,SAAS,EAAE,QAAQ,EAAE;gBACzC,KAAK,EAAE,IAAI;gBACX,YAAY,EAAE,IAAI;aACnB,CAAC,CAAA;YAEF,MAAM,WAAW,GAAG,MAAO,OAAe,CAAC,cAAc,EAAE,CAAA;YAE3D,MAAM,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC;gBAC1B,MAAM,EAAE,IAAI;gBACZ,cAAc,EAAE,MAAM;gBACtB,aAAa,EAAE,IAAI;gBACnB,QAAQ,EAAE,EAAE;gBACZ,GAAG,EAAE,GAAG;aACT,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YACxB,MAAM,CAAC,cAAc,CAAC,SAAS,EAAE,QAAQ,EAAE;gBACzC,KAAK,EAAE,KAAK;gBACZ,YAAY,EAAE,IAAI;aACnB,CAAC,CAAA;YAEF,iBAAiB;YACjB,OAAQ,SAAiB,CAAC,UAAU,CAAA;YAEpC,MAAM,WAAW,GAAG,MAAO,OAAe,CAAC,cAAc,EAAE,CAAA;YAE3D,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YACtC,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;YAC/C,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC9C,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;QACpB,EAAE,CAAC,UAAU,EAAE,GAAG,EAAE;YAClB,MAAM,SAAS,GAAG;gBAChB,UAAU,EAAE,EAAE;gBACd,iBAAiB,EAAE,GAAG;gBACtB,aAAa,EAAE,MAAM;gBACrB,sBAAsB,EAAE,CAAC;gBACzB,SAAS,EAAE,EAAE;gBACb,YAAY,EAAE,KAAK;gBACnB,oBAAoB,EAAE,CAAC;gBACvB,iBAAiB,EAAE,KAAK;gBACxB,iBAAiB,EAAE,KAAK;gBACxB,eAAe,EAAE,MAAM;gBACvB,YAAY,EAAE,KAAK;gBACnB,WAAW,EAAE,IAAI;gBACjB,wBAAwB,EAAE,KAAK;gBAC/B,YAAY,EAAE,KAAK;gBACnB,MAAM,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;aACjC,CAAA;YAED,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,CAAA;YAE/B,oBAAoB;YACpB,MAAM,CAAE,OAAe,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC,SAAS,CAAC,CAAA;QAC1D,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,UAAU,EAAE,GAAG,EAAE;YAClB,MAAM,aAAa,GAAG;gBACpB,UAAU,EAAE,CAAC,CAAC;gBACd,SAAS,EAAE,CAAC;aACb,CAAA;YAED,MAAM,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,aAAoB,CAAC,CAAC,CAAC,OAAO,EAAE,CAAA;QACpE,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\tests\\unit\\services\\local-operation.test.ts"],"sourcesContent":["import { LocalOperationService, type LocalSyncOperation, type QueueStats, type QueueConfig, DEFAULT_QUEUE_CONFIG } from '@/services/local-operation'\nimport { db } from '@/services/database'\n\n// 模拟数据库\njest.mock('@/services/database', () => ({\n  db: {\n    open: jest.fn().mockResolvedValue(undefined),\n    syncQueue: {\n      add: jest.fn(),\n      get: jest.fn(),\n      getAll: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n      clear: jest.fn(),\n      where: jest.fn().mockReturnThis(),\n      equals: jest.fn().mockReturnThis(),\n      and: jest.fn().mockReturnThis(),\n      below: jest.fn().mockReturnThis(),\n      anyOf: jest.fn().mockReturnThis(),\n      orderBy: jest.fn().mockReturnThis(),\n      reverse: jest.fn().mockReturnThis(),\n      sort: jest.fn().mockReturnThis(),\n      filter: jest.fn().mockReturnThis(),\n      limit: jest.fn().mockReturnThis(),\n      offset: jest.fn().mockReturnThis(),\n      toArray: jest.fn(),\n      count: jest.fn(),\n      bulkDelete: jest.fn(),\n      first: jest.fn(),\n    }\n  }\n}))\n\ndescribe('LocalOperationService', () => {\n  let service: LocalOperationService\n  let mockDb: any\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n    mockDb = db.syncQueue\n    service = new LocalOperationService()\n    \n    // 模拟 localStorage\n    const localStorageMock = {\n      getItem: jest.fn(),\n      setItem: jest.fn(),\n      removeItem: jest.fn(),\n      clear: jest.fn(),\n    }\n    Object.defineProperty(window, 'localStorage', { value: localStorageMock })\n  })\n\n  describe('初始化', () => {\n    it('应该正确初始化服务', async () => {\n      await service.initialize()\n      expect(service).toBeDefined()\n    })\n\n    it('应该从本地存储恢复队列', async () => {\n      const mockQueue = [\n        {\n          id: 'test-1',\n          type: 'create',\n          table: 'cards',\n          data: { frontContent: 'test' },\n          localId: 'card-1',\n          timestamp: new Date().toISOString(),\n          retryCount: 0,\n          status: 'pending' as const,\n          localVersion: 1\n        }\n      ]\n      \n      localStorage.getItem = jest.fn().mockReturnValue(JSON.stringify(mockQueue))\n      \n      // 初始化时不模拟 toArray，让它实际反映恢复的操作\n      let restoredOperations: any[] = []\n      \n      // 模拟 add 方法来捕获恢复的操作\n      mockDb.add = jest.fn().mockImplementation((operation) => {\n        restoredOperations.push(operation)\n        return Promise.resolve(operation.id)\n      })\n      \n      // 模拟 toArray 返回恢复的操作\n      mockDb.toArray = jest.fn().mockImplementation(() => {\n        return Promise.resolve(restoredOperations)\n      })\n\n      await service.initialize()\n      \n      const stats = await service.getQueueStats()\n      expect(stats.totalOperations).toBe(1)\n    })\n  })\n\n  describe('添加操作', () => {\n    it('应该成功添加操作到队列', async () => {\n      mockDb.add = jest.fn().mockResolvedValue('test-id')\n      mockDb.toArray = jest.fn().mockResolvedValue([])\n\n      const operationId = await service.addOperation({\n        entityType: 'card',\n        operationType: 'create',\n        entityId: 'card-1',\n        data: { frontContent: 'test', backContent: 'answer' },\n        priority: 'normal',\n        dependsOn: []\n      })\n\n      expect(operationId).toBeDefined()\n      expect(mockDb.add).toHaveBeenCalled()\n    })\n\n    it('应该处理重复操作', async () => {\n      const mockOperation = {\n        id: 'existing-op',\n        entityType: 'card' as const,\n        operationType: 'update' as const,\n        entityId: 'card-1',\n        data: { frontContent: 'updated' },\n        timestamp: new Date().toISOString(),\n        retryCount: 0,\n        status: 'pending' as const,\n        localVersion: 1,\n        priority: 'normal' as const,\n        dependsOn: []\n      }\n\n      // 模拟 first 方法返回现有操作\n      mockDb.first = jest.fn().mockResolvedValue(mockOperation)\n      mockDb.update = jest.fn().mockResolvedValue(1)\n\n      await service.addOperation({\n        entityType: 'card',\n        operationType: 'update',\n        entityId: 'card-1',\n        data: { frontContent: 'new update' }\n      })\n\n      expect(mockDb.update).toHaveBeenCalled()\n    })\n\n    it('应该验证必需字段', async () => {\n      await expect(service.addOperation({\n        entityType: 'card',\n        operationType: 'create',\n        entityId: '',\n        data: { frontContent: 'test' }\n      })).rejects.toThrow('Local ID is required')\n    })\n  })\n\n  describe('队列统计', () => {\n    it('应该返回正确的队列统计信息', async () => {\n      const mockOperations = [\n        {\n          id: 'op-1',\n          entityType: 'card' as const,\n          operationType: 'create' as const,\n          entityId: 'card-1',\n          data: {},\n          timestamp: new Date(),\n          retryCount: 0,\n          status: 'pending' as const,\n          localVersion: 1,\n          priority: 'high' as const\n        },\n        {\n          id: 'op-2',\n          entityType: 'folder' as const,\n          operationType: 'update' as const,\n          entityId: 'folder-1',\n          data: {},\n          timestamp: new Date(),\n          retryCount: 2,\n          status: 'failed' as const,\n          localVersion: 1,\n          priority: 'normal' as const\n        },\n        {\n          id: 'op-3',\n          entityType: 'tag' as const,\n          operationType: 'delete' as const,\n          entityId: 'tag-1',\n          data: {},\n          timestamp: new Date(),\n          retryCount: 4,\n          status: 'failed' as const,\n          localVersion: 1,\n          priority: 'low' as const\n        }\n      ]\n\n      mockDb.toArray = jest.fn().mockResolvedValue(mockOperations)\n\n      const stats = await service.getQueueStats()\n\n      expect(stats.totalOperations).toBe(3)\n      expect(stats.byType.card).toBe(1)\n      expect(stats.byType.folder).toBe(1)\n      expect(stats.byType.tag).toBe(1)\n      expect(stats.byType.image).toBe(0)\n      expect(stats.byStatus.pending).toBe(1)\n      expect(stats.byStatus.failed).toBe(2)\n      expect(stats.byPriority.high).toBe(1)\n      expect(stats.byPriority.normal).toBe(1)\n      expect(stats.byPriority.low).toBe(1)\n      expect(stats.averageRetryCount).toBe(2)\n    })\n\n    it('应该处理空队列', async () => {\n      mockDb.toArray = jest.fn().mockResolvedValue([])\n\n      const stats = await service.getQueueStats()\n\n      expect(stats.totalOperations).toBe(0)\n      expect(stats.byType).toEqual({\n        card: 0,\n        folder: 0,\n        tag: 0,\n        image: 0\n      })\n      expect(stats.byStatus).toEqual({\n        pending: 0,\n        processing: 0,\n        completed: 0,\n        failed: 0,\n        cancelled: 0\n      })\n      expect(stats.averageRetryCount).toBe(0)\n    })\n  })\n\n  describe('操作处理', () => {\n    it('应该获取待处理操作', async () => {\n      const mockOperations = [\n        {\n          id: 'high-priority',\n          entityType: 'card' as const,\n          operationType: 'create' as const,\n          entityId: 'card-1',\n          data: {},\n          timestamp: new Date(),\n          retryCount: 0,\n          status: 'pending' as const,\n          localVersion: 1,\n          priority: 'high' as const\n        }\n      ]\n\n      mockDb.toArray = jest.fn().mockResolvedValue(mockOperations)\n\n      const pendingOps = await service.getPendingOperations()\n\n      expect(pendingOps).toHaveLength(1)\n      expect(pendingOps[0].id).toBe('high-priority')\n    })\n\n    it('应该按优先级过滤操作', async () => {\n      const mockOperations = [\n        {\n          id: 'high-priority',\n          entityType: 'card' as const,\n          operationType: 'create' as const,\n          entityId: 'card-1',\n          data: {},\n          timestamp: new Date(),\n          retryCount: 0,\n          status: 'pending' as const,\n          localVersion: 1,\n          priority: 'high' as const\n        },\n        {\n          id: 'low-priority',\n          entityType: 'card' as const,\n          operationType: 'create' as const,\n          entityId: 'card-2',\n          data: {},\n          timestamp: new Date(),\n          retryCount: 0,\n          status: 'pending' as const,\n          localVersion: 1,\n          priority: 'low' as const\n        }\n      ]\n\n      // 模拟过滤逻辑\n      mockDb.filter = jest.fn().mockImplementation((filterFn) => ({\n        ...mockDb,\n        toArray: () => Promise.resolve(mockOperations.filter(filterFn))\n      }))\n      \n      mockDb.toArray = jest.fn().mockResolvedValue(mockOperations)\n\n      const highPriorityOps = await service.getPendingOperations(10, ['high'])\n\n      expect(highPriorityOps).toHaveLength(1)\n      expect(highPriorityOps[0].priority).toBe('high')\n    })\n  })\n\n  describe('队列管理', () => {\n    it('应该能够清空队列', async () => {\n      mockDb.clear = jest.fn().mockResolvedValue(1)\n\n      await service.clearQueue()\n\n      expect(mockDb.clear).toHaveBeenCalled()\n    })\n\n    it('应该能够删除指定操作', async () => {\n      mockDb.delete = jest.fn().mockResolvedValue(1)\n\n      await service.removeOperation('test-op-id')\n\n      expect(mockDb.delete).toHaveBeenCalledWith('test-op-id')\n    })\n\n    it('应该能够获取操作详情', async () => {\n      const mockOperation = {\n        id: 'test-op',\n        entityType: 'card' as const,\n        operationType: 'create' as const,\n        entityId: 'card-1',\n        data: {},\n        timestamp: new Date(),\n        retryCount: 0,\n        status: 'pending' as const,\n        localVersion: 1\n      }\n\n      mockDb.get = jest.fn().mockResolvedValue(mockOperation)\n\n      const operation = await service.getOperation('test-op')\n\n      expect(operation).toBeDefined()\n      expect(operation?.id).toBe('test-op')\n    })\n  })\n\n  describe('事件监听', () => {\n    it('应该能够添加和移除事件监听器', () => {\n      const mockListener = jest.fn()\n\n      service.addEventListener('queueStatsChanged', mockListener)\n      \n      // 移除监听器\n      service.removeEventListener('queueStatsChanged')\n    })\n\n    it('应该正确添加事件监听器', () => {\n      const mockListener = jest.fn()\n\n      service.addEventListener('operationAdded', mockListener)\n      service.addEventListener('operationCompleted', mockListener)\n      \n      // 验证监听器已添加（通过私有属性）\n      expect((service as any).listeners.operationAdded).toBe(mockListener)\n      expect((service as any).listeners.operationCompleted).toBe(mockListener)\n    })\n  })\n\n  describe('错误处理', () => {\n    it('应该处理数据库操作失败', async () => {\n      mockDb.add = jest.fn().mockRejectedValue(new Error('Database error'))\n      mockDb.first = jest.fn().mockResolvedValue(null)\n\n      await expect(service.addOperation({\n        entityType: 'card',\n        operationType: 'create',\n        entityId: 'card-1',\n        data: { frontContent: 'test' }\n      })).rejects.toThrow('Database error')\n    })\n\n    it('应该处理本地存储操作失败', async () => {\n      mockDb.add = jest.fn().mockResolvedValue('test-id')\n      mockDb.toArray = jest.fn().mockResolvedValue([])\n      mockDb.first = jest.fn().mockResolvedValue(null)\n      \n      // 模拟 localStorage 失败\n      localStorage.setItem = jest.fn().mockImplementation(() => {\n        throw new Error('Storage error')\n      })\n\n      // 操作应该仍然成功，但会记录错误\n      const operationId = await service.addOperation({\n        entityType: 'card',\n        operationType: 'create',\n        entityId: 'card-1',\n        data: { frontContent: 'test' }\n      })\n\n      expect(operationId).toBeDefined()\n    })\n  })\n\n  describe('操作状态管理', () => {\n    it('应该能够标记操作为处理中', async () => {\n      const mockOperation = {\n        id: 'test-op',\n        entityType: 'card' as const,\n        operationType: 'create' as const,\n        entityId: 'card-1',\n        data: { frontContent: 'test' },\n        timestamp: new Date(),\n        retryCount: 0,\n        status: 'pending' as const,\n        localVersion: 1,\n        priority: 'normal' as const,\n        dependsOn: []\n      }\n\n      mockDb.get = jest.fn().mockResolvedValue(mockOperation)\n      mockDb.update = jest.fn().mockResolvedValue(1)\n\n      await service.markOperationProcessing('test-op')\n\n      expect(mockDb.update).toHaveBeenCalledWith('test-op', {\n        status: 'processing',\n        processingStartedAt: expect.any(Date)\n      })\n    })\n\n    it('应该能够标记操作为已完成', async () => {\n      const mockOperation = {\n        id: 'test-op',\n        entityType: 'card' as const,\n        operationType: 'create' as const,\n        entityId: 'card-1',\n        data: { frontContent: 'test' },\n        timestamp: new Date(),\n        retryCount: 0,\n        status: 'processing' as const,\n        localVersion: 1,\n        priority: 'normal' as const,\n        dependsOn: [],\n        processingStartedAt: new Date()\n      }\n\n      mockDb.get = jest.fn().mockResolvedValue(mockOperation)\n      mockDb.update = jest.fn().mockResolvedValue(1)\n\n      await service.markOperationCompleted('test-op')\n\n      expect(mockDb.update).toHaveBeenCalledWith('test-op', {\n        status: 'completed',\n        processingEndedAt: expect.any(Date)\n      })\n    })\n\n    it('应该能够标记操作为失败', async () => {\n      const mockOperation = {\n        id: 'test-op',\n        entityType: 'card' as const,\n        operationType: 'create' as const,\n        entityId: 'card-1',\n        data: { frontContent: 'test' },\n        timestamp: new Date(),\n        retryCount: 4, // 接近最大重试次数\n        status: 'processing' as const,\n        localVersion: 1,\n        priority: 'normal' as const,\n        dependsOn: [],\n        maxRetries: 5,\n        retryDelay: 1000\n      }\n\n      mockDb.get = jest.fn().mockResolvedValue(mockOperation)\n      mockDb.update = jest.fn().mockResolvedValue(1)\n\n      const error = new Error('Test error')\n      await service.markOperationFailed('test-op', error)\n\n      expect(mockDb.update).toHaveBeenCalledWith('test-op', {\n        retryCount: 5,\n        retryDelay: 2000, // 重试延迟翻倍\n        lastError: error.message,\n        status: 'failed' // 超过最大重试次数\n      })\n    })\n\n    it('应该能够取消操作', async () => {\n      const mockOperation = {\n        id: 'test-op',\n        entityType: 'card' as const,\n        operationType: 'create' as const,\n        entityId: 'card-1',\n        data: { frontContent: 'test' },\n        timestamp: new Date(),\n        retryCount: 0,\n        status: 'pending' as const,\n        localVersion: 1,\n        priority: 'normal' as const,\n        dependsOn: []\n      }\n\n      mockDb.get = jest.fn().mockResolvedValue(mockOperation)\n      mockDb.update = jest.fn().mockResolvedValue(1)\n\n      await service.cancelOperation('test-op', 'User cancelled')\n\n      expect(mockDb.update).toHaveBeenCalledWith('test-op', {\n        status: 'cancelled',\n        lastError: 'User cancelled'\n      })\n    })\n  })\n\n  describe('队列清理', () => {\n    it('应该能够重试失败的操作', async () => {\n      const mockOperations = [\n        {\n          id: 'failed-op-1',\n          entityType: 'card' as const,\n          operationType: 'create' as const,\n          entityId: 'card-1',\n          data: { frontContent: 'test' },\n          timestamp: new Date(),\n          retryCount: 1,\n          status: 'failed' as const,\n          localVersion: 1,\n          priority: 'normal' as const,\n          dependsOn: []\n        },\n        {\n          id: 'failed-op-2',\n          entityType: 'card' as const,\n          operationType: 'update' as const,\n          entityId: 'card-2',\n          data: { frontContent: 'test2' },\n          timestamp: new Date(),\n          retryCount: 3,\n          status: 'failed' as const,\n          localVersion: 1,\n          priority: 'normal' as const,\n          dependsOn: []\n        }\n      ]\n\n      mockDb.toArray = jest.fn().mockResolvedValue(mockOperations)\n      mockDb.update = jest.fn().mockResolvedValue(1)\n\n      const retriedCount = await service.retryFailedOperations()\n\n      expect(retriedCount).toBe(2)\n      expect(mockDb.update).toHaveBeenCalledTimes(2)\n    })\n\n    it('应该能够清理已完成的操作', async () => {\n      // 创建101个已完成操作，应该只清理最旧的1个（保留最近100个）\n      const mockOperations = Array.from({ length: 101 }, (_, i) => ({\n        id: `completed-op-${i}`,\n        entityType: 'card' as const,\n        operationType: 'create' as const,\n        entityId: `card-${i}`,\n        data: { frontContent: `test${i}` },\n        timestamp: new Date(Date.now() - i * 1000), // 越早的索引越老\n        retryCount: 0,\n        status: 'completed' as const,\n        localVersion: 1,\n        priority: 'normal' as const,\n        dependsOn: []\n      }))\n\n      mockDb.toArray = jest.fn().mockResolvedValue(mockOperations)\n      mockDb.delete = jest.fn().mockResolvedValue(1)\n\n      const clearedCount = await service.clearCompletedOperations()\n\n      expect(clearedCount).toBe(1) // 清理最旧的1个操作，保留100个最近的\n      expect(mockDb.delete).toHaveBeenCalledWith('completed-op-0') // 删除最旧的操作\n    })\n  })\n\n  describe('网络信息处理', () => {\n    beforeEach(() => {\n      // 保存原始navigator属性\n      const originalNavigator = { ...navigator }\n      \n      // 恢复原始属性\n      return () => {\n        Object.assign(navigator, originalNavigator)\n      }\n    })\n\n    it('应该能够获取网络信息', async () => {\n      // 模拟网络连接信息\n      const mockConnection = {\n        type: 'wifi',\n        effectiveType: '4g',\n        downlink: 10,\n        rtt: 100,\n        saveData: false\n      }\n\n      Object.defineProperty(navigator, 'connection', {\n        value: mockConnection,\n        configurable: true\n      })\n\n      Object.defineProperty(navigator, 'onLine', {\n        value: true,\n        configurable: true\n      })\n\n      const networkInfo = await (service as any).getNetworkInfo()\n\n      expect(networkInfo).toEqual({\n        online: true,\n        connectionType: 'wifi',\n        effectiveType: '4g',\n        downlink: 10,\n        rtt: 100\n      })\n    })\n\n    it('应该处理离线状态', async () => {\n      Object.defineProperty(navigator, 'onLine', {\n        value: false,\n        configurable: true\n      })\n\n      // 移除connection属性\n      delete (navigator as any).connection\n\n      const networkInfo = await (service as any).getNetworkInfo()\n\n      expect(networkInfo.online).toBe(false)\n      expect(networkInfo.connectionType).toBe('none')\n      expect(networkInfo.effectiveType).toBe('4g')\n    })\n  })\n\n  describe('配置管理', () => {\n    it('应该能够更新配置', () => {\n      const newConfig = {\n        maxRetries: 10,\n        initialRetryDelay: 500,\n        maxRetryDelay: 600000,\n        retryBackoffMultiplier: 3,\n        batchSize: 20,\n        batchTimeout: 10000,\n        maxConcurrentBatches: 5,\n        processingTimeout: 60000,\n        idleCheckInterval: 20000,\n        cleanupInterval: 600000,\n        networkAware: false,\n        offlineMode: true,\n        requireWifiForLargeFiles: false,\n        maxQueueSize: 20000,\n        maxAge: 14 * 24 * 60 * 60 * 1000\n      }\n\n      service.updateConfig(newConfig)\n\n      // 验证配置已更新（通过检查私有属性）\n      expect((service as any).config).toMatchObject(newConfig)\n    })\n\n    it('应该验证配置参数', () => {\n      const invalidConfig = {\n        maxRetries: -1,\n        batchSize: 0\n      }\n\n      expect(() => service.updateConfig(invalidConfig as any)).toThrow()\n    })\n  })\n})"],"version":3}
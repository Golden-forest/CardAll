{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\tests\\mock-services.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\tests\\mock-services.ts"],"sourcesContent":["// 模拟服务 - 为测试提供完整的服务层模拟\nimport { MockSupabaseClient, MockIndexedDB } from './advanced-test-utils'\nimport type { TestCardData, TestFolderData, TestTagData, TestSyncOperation } from './advanced-test-utils'\n\n// ============================================================================\n// Supabase 服务模拟\n// ============================================================================\n\nexport class MockSupabaseService {\n  private client: MockSupabaseClient\n  private authState = {\n    user: null,\n    session: null,\n    isLoading: false,\n  }\n\n  constructor() {\n    this.client = new MockSupabaseClient()\n  }\n\n  // 认证服务\n  auth = {\n    signUp: jest.fn(async ({ email, password }: { email: string; password: string }) => {\n      this.authState.isLoading = true\n      await new Promise(resolve => setTimeout(resolve, 100))\n      \n      const user = {\n        id: crypto.randomUUID(),\n        email,\n        created_at: new Date().toISOString(),\n      }\n      \n      this.authState.user = user\n      this.authState.isLoading = false\n      \n      return {\n        user,\n        session: { access_token: 'mock-token', user },\n        error: null,\n      }\n    }),\n\n    signIn: jest.fn(async ({ email, password }: { email: string; password: string }) => {\n      this.authState.isLoading = true\n      await new Promise(resolve => setTimeout(resolve, 100))\n      \n      if (email === 'error@example.com') {\n        this.authState.isLoading = false\n        return {\n          user: null,\n          session: null,\n          error: { message: 'Invalid credentials' },\n        }\n      }\n      \n      const user = {\n        id: 'mock-user-id',\n        email,\n        created_at: new Date().toISOString(),\n      }\n      \n      this.authState.user = user\n      this.authState.isLoading = false\n      \n      return {\n        user,\n        session: { access_token: 'mock-token', user },\n        error: null,\n      }\n    }),\n\n    signOut: jest.fn(async () => {\n      this.authState.isLoading = true\n      await new Promise(resolve => setTimeout(resolve, 50))\n      \n      this.authState.user = null\n      this.authState.session = null\n      this.authState.isLoading = false\n      \n      return { error: null }\n    }),\n\n    getCurrentUser: jest.fn(() => {\n      return this.authState.user\n    }),\n\n    onAuthStateChange: jest.fn((callback: (event: string, session: any) => void) => {\n      // 返回一个取消订阅函数\n      return {\n        data: {\n          subscription: {\n            unsubscribe: jest.fn(),\n          },\n        },\n      }\n    }),\n\n    resetPasswordForEmail: jest.fn(async (email: string) => {\n      await new Promise(resolve => setTimeout(resolve, 100))\n      return { error: null }\n    }),\n\n    updateUser: jest.fn(async (attributes: any) => {\n      await new Promise(resolve => setTimeout(resolve, 100))\n      \n      if (this.authState.user) {\n        this.authState.user = { ...this.authState.user, ...attributes }\n      }\n      \n      return {\n        user: this.authState.user,\n        error: null,\n      }\n    }),\n  }\n\n  // 数据库服务\n  from = jest.fn((table: string) => {\n    switch (table) {\n      case 'cards':\n        return this.client.cards\n      case 'folders':\n        return this.client.folders\n      case 'tags':\n        return this.client.tags\n      default:\n        return {\n          select: jest.fn(() => ({ data: [], error: null })),\n          insert: jest.fn(() => ({ data: [], error: null })),\n          update: jest.fn(() => ({ data: [], error: null })),\n          delete: jest.fn(() => ({ data: null, error: null })),\n        }\n    }\n  })\n\n  // 实时服务\n  channel = jest.fn((channelName: string) => {\n    return {\n      on: jest.fn((event: string, callback: (payload: any) => void) => {\n        return this\n      }),\n      subscribe: jest.fn(() => {\n        return {\n          unsubscribe: jest.fn(),\n        }\n      }),\n      send: jest.fn((payload: any) => {\n        return Promise.resolve()\n      }),\n    }\n  })\n\n  // 存储服务\n  storage = {\n    from: jest.fn((bucket: string) => ({\n      upload: jest.fn(async (path: string, file: File) => {\n        await new Promise(resolve => setTimeout(resolve, 200))\n        return {\n          data: { path: `${bucket}/${path}` },\n          error: null,\n        }\n      }),\n      getPublicUrl: jest.fn((path: string) => ({\n        data: { publicUrl: `https://example.com/${bucket}/${path}` },\n      })),\n      remove: jest.fn(async (paths: string[]) => {\n        await new Promise(resolve => setTimeout(resolve, 100))\n        return { error: null }\n      }),\n      list: jest.fn(() => ({\n        data: [],\n        error: null,\n      })),\n    })),\n  }\n\n  // 辅助方法\n  getClient = () => this.client\n  getAuthState = () => this.authState\n  setAuthState = (state: any) => {\n    this.authState = { ...this.authState, ...state }\n  }\n  reset = () => {\n    this.client.reset()\n    this.authState = {\n      user: null,\n      session: null,\n      isLoading: false,\n    }\n  }\n}\n\n// ============================================================================\n// 数据库服务模拟\n// ============================================================================\n\nexport class MockDatabaseService {\n  private db: MockIndexedDB\n  private syncOperations: TestSyncOperation[] = []\n\n  constructor() {\n    this.db = new MockIndexedDB()\n  }\n\n  // 卡片操作\n  cards = {\n    add: jest.fn(async (card: Partial<TestCardData>) => {\n      const result = await this.db.table('cards').add(card)\n      return result\n    }),\n\n    get: jest.fn(async (id: string) => {\n      return await this.db.table('cards').get(id)\n    }),\n\n    getAll: jest.fn(async () => {\n      return await this.db.table('cards').toArray()\n    }),\n\n    update: jest.fn(async (id: string, updates: Partial<TestCardData>) => {\n      await this.db.table('cards').where('id').equals(id).modify(updates)\n      return true\n    }),\n\n    delete: jest.fn(async (id: string) => {\n      const deleted = await this.db.table('cards').where('id').equals(id).delete()\n      return deleted > 0\n    }),\n\n    bulkAdd: jest.fn(async (cards: Partial<TestCardData>[]) => {\n      const results = await this.db.table('cards').bulkAdd(cards)\n      return results\n    }),\n\n    clear: jest.fn(async () => {\n      await this.db.table('cards').clear()\n    }),\n\n    findByFolder: jest.fn(async (folderId: string) => {\n      return await this.db.table('cards').where('folderId').equals(folderId).toArray()\n    }),\n\n    findByTag: jest.fn(async (tag: string) => {\n      const allCards = await this.db.table('cards').toArray()\n      return allCards.filter(card => \n        card.frontContent.tags.includes(tag) || card.backContent.tags.includes(tag)\n      )\n    }),\n\n    search: jest.fn(async (searchTerm: string) => {\n      const allCards = await this.db.table('cards').toArray()\n      const term = searchTerm.toLowerCase()\n      \n      return allCards.filter(card => \n        card.frontContent.title.toLowerCase().includes(term) ||\n        card.frontContent.text.toLowerCase().includes(term) ||\n        card.backContent.title.toLowerCase().includes(term) ||\n        card.backContent.text.toLowerCase().includes(term)\n      )\n    }),\n  }\n\n  // 文件夹操作\n  folders = {\n    add: jest.fn(async (folder: Partial<TestFolderData>) => {\n      const result = await this.db.table('folders').add(folder)\n      return result\n    }),\n\n    get: jest.fn(async (id: string) => {\n      return await this.db.table('folders').get(id)\n    }),\n\n    getAll: jest.fn(async () => {\n      return await this.db.table('folders').toArray()\n    }),\n\n    update: jest.fn(async (id: string, updates: Partial<TestFolderData>) => {\n      await this.db.table('folders').where('id').equals(id).modify(updates)\n      return true\n    }),\n\n    delete: jest.fn(async (id: string) => {\n      const deleted = await this.db.table('folders').where('id').equals(id).delete()\n      return deleted > 0\n    }),\n\n    bulkAdd: jest.fn(async (folders: Partial<TestFolderData>[]) => {\n      const results = await this.db.table('folders').bulkAdd(folders)\n      return results\n    }),\n\n    clear: jest.fn(async () => {\n      await this.db.table('folders').clear()\n    }),\n\n    getChildren: jest.fn(async (parentId: string) => {\n      return await this.db.table('folders').where('parentId').equals(parentId).toArray()\n    }),\n\n    getRoot: jest.fn(async () => {\n      return await this.db.table('folders').where('parentId').equals(undefined).toArray()\n    }),\n  }\n\n  // 标签操作\n  tags = {\n    add: jest.fn(async (tag: Partial<TestTagData>) => {\n      const result = await this.db.table('tags').add(tag)\n      return result\n    }),\n\n    get: jest.fn(async (id: string) => {\n      return await this.db.table('tags').get(id)\n    }),\n\n    getAll: jest.fn(async () => {\n      return await this.db.table('tags').toArray()\n    }),\n\n    update: jest.fn(async (id: string, updates: Partial<TestTagData>) => {\n      await this.db.table('tags').where('id').equals(id).modify(updates)\n      return true\n    }),\n\n    delete: jest.fn(async (id: string) => {\n      const deleted = await this.db.table('tags').where('id').equals(id).delete()\n      return deleted > 0\n    }),\n\n    bulkAdd: jest.fn(async (tags: Partial<TestTagData>[]) => {\n      const results = await this.db.table('tags').bulkAdd(tags)\n      return results\n    }),\n\n    clear: jest.fn(async () => {\n      await this.db.table('tags').clear()\n    }),\n\n    getVisible: jest.fn(async () => {\n      const allTags = await this.db.table('tags').toArray()\n      return allTags.filter(tag => !tag.isHidden)\n    }),\n\n    getHidden: jest.fn(async () => {\n      const allTags = await this.db.table('tags').toArray()\n      return allTags.filter(tag => tag.isHidden)\n    }),\n  }\n\n  // 同步队列操作\n  syncQueue = {\n    add: jest.fn(async (operation: Partial<TestSyncOperation>) => {\n      const result = await this.db.table('syncQueue').add(operation)\n      this.syncOperations.push(operation as TestSyncOperation)\n      return result\n    }),\n\n    get: jest.fn(async (id: string) => {\n      return await this.db.table('syncQueue').get(id)\n    }),\n\n    getAll: jest.fn(async () => {\n      return await this.db.table('syncQueue').toArray()\n    }),\n\n    getPending: jest.fn(async () => {\n      return await this.db.table('syncQueue').where('status').equals('pending').toArray()\n    }),\n\n    getFailed: jest.fn(async () => {\n      return await this.db.table('syncQueue').where('status').equals('failed').toArray()\n    }),\n\n    update: jest.fn(async (id: string, updates: Partial<TestSyncOperation>) => {\n      await this.db.table('syncQueue').where('id').equals(id).modify(updates)\n      return true\n    }),\n\n    delete: jest.fn(async (id: string) => {\n      const deleted = await this.db.table('syncQueue').where('id').equals(id).delete()\n      this.syncOperations = this.syncOperations.filter(op => op.id !== id)\n      return deleted > 0\n    }),\n\n    clear: jest.fn(async () => {\n      await this.db.table('syncQueue').clear()\n      this.syncOperations = []\n    }),\n\n    getStats: jest.fn(() => {\n      const pending = this.syncOperations.filter(op => op.status === 'pending').length\n      const processing = this.syncOperations.filter(op => op.status === 'processing').length\n      const completed = this.syncOperations.filter(op => op.status === 'completed').length\n      const failed = this.syncOperations.filter(op => op.status === 'failed').length\n      \n      return {\n        total: this.syncOperations.length,\n        pending,\n        processing,\n        completed,\n        failed,\n      }\n    }),\n  }\n\n  // 数据库管理\n  clearAll = jest.fn(async () => {\n    await this.cards.clear()\n    await this.folders.clear()\n    await this.tags.clear()\n    await this.syncQueue.clear()\n    this.syncOperations = []\n  })\n\n  exportData = jest.fn(async () => {\n    const [cards, folders, tags, syncQueue] = await Promise.all([\n      this.cards.getAll(),\n      this.folders.getAll(),\n      this.tags.getAll(),\n      this.syncQueue.getAll(),\n    ])\n\n    return {\n      cards,\n      folders,\n      tags,\n      syncQueue,\n      exportedAt: new Date(),\n    }\n  })\n\n  importData = jest.fn(async (data: any) => {\n    await this.clearAll()\n    \n    await Promise.all([\n      this.cards.bulkAdd(data.cards || []),\n      this.folders.bulkAdd(data.folders || []),\n      this.tags.bulkAdd(data.tags || []),\n      this.syncQueue.bulkAdd(data.syncQueue || []),\n    ])\n  })\n\n  // 辅助方法\n  getDB = () => this.db\n  reset = () => {\n    this.db.reset()\n    this.syncOperations = []\n  }\n}\n\n// ============================================================================\n// 同步服务模拟\n// ============================================================================\n\nexport class MockSyncService {\n  private supabaseService: MockSupabaseService\n  private databaseService: MockDatabaseService\n  private isOnline = true\n  private syncInProgress = false\n  private lastSyncTime: Date | null = null\n  private syncErrors: string[] = []\n\n  constructor(\n    supabaseService: MockSupabaseService,\n    databaseService: MockDatabaseService\n  ) {\n    this.supabaseService = supabaseService\n    this.databaseService = databaseService\n  }\n\n  // 同步状态\n  isOnline = jest.fn(() => this.isOnline)\n  isSyncing = jest.fn(() => this.syncInProgress)\n  getLastSyncTime = jest.fn(() => this.lastSyncTime)\n  getSyncErrors = jest.fn(() => [...this.syncErrors])\n\n  // 网络状态管理\n  setOnline = jest.fn((online: boolean) => {\n    this.isOnline = online\n  })\n\n  // 手动同步\n  syncNow = jest.fn(async () => {\n    if (this.syncInProgress) {\n      throw new Error('Sync already in progress')\n    }\n\n    this.syncInProgress = true\n    this.syncErrors = []\n\n    try {\n      // 获取待同步的操作\n      const pendingOperations = await this.databaseService.syncQueue.getPending()\n      \n      if (pendingOperations.length === 0) {\n        this.lastSyncTime = new Date()\n        this.syncInProgress = false\n        return { success: true, syncedCount: 0 }\n      }\n\n      // 处理每个操作\n      let syncedCount = 0\n      const errors: string[] = []\n\n      for (const operation of pendingOperations) {\n        try {\n          await this.executeSyncOperation(operation)\n          syncedCount++\n          \n          // 标记操作为已完成\n          await this.databaseService.syncQueue.update(operation.id, {\n            status: 'completed',\n            error: null,\n          })\n        } catch (error) {\n          const errorMsg = `Failed to sync operation ${operation.id}: ${error}`\n          errors.push(errorMsg)\n          this.syncErrors.push(errorMsg)\n          \n          // 标记操作为失败\n          await this.databaseService.syncQueue.update(operation.id, {\n            status: 'failed',\n            error: errorMsg,\n          })\n        }\n      }\n\n      this.lastSyncTime = new Date()\n      this.syncInProgress = false\n\n      return {\n        success: errors.length === 0,\n        syncedCount,\n        errors: errors.length,\n        errorDetails: errors,\n      }\n    } catch (error) {\n      this.syncInProgress = false\n      const errorMsg = `Sync failed: ${error}`\n      this.syncErrors.push(errorMsg)\n      \n      return {\n        success: false,\n        syncedCount: 0,\n        errors: 1,\n        errorDetails: [errorMsg],\n      }\n    }\n  })\n\n  // 自动同步\n  startAutoSync = jest.fn((interval: number = 30000) => {\n    const intervalId = setInterval(async () => {\n      if (this.isOnline && !this.syncInProgress) {\n        await this.syncNow()\n      }\n    }, interval)\n    \n    return () => clearInterval(intervalId)\n  })\n\n  // 执行同步操作\n  private executeSyncOperation = async (operation: TestSyncOperation) => {\n    // 模拟网络延迟\n    await new Promise(resolve => setTimeout(resolve, Math.random() * 100 + 50))\n\n    switch (operation.entity) {\n      case 'card':\n        return await this.syncCard(operation)\n      case 'folder':\n        return await this.syncFolder(operation)\n      case 'tag':\n        return await this.syncTag(operation)\n      default:\n        throw new Error(`Unknown entity type: ${operation.entity}`)\n    }\n  }\n\n  private syncCard = async (operation: TestSyncOperation) => {\n    switch (operation.type) {\n      case 'create':\n        await this.supabaseService.from('cards').insert(operation.data)\n        break\n      case 'update':\n        await this.supabaseService.from('cards').update(operation.data).eq('id', operation.entityId)\n        break\n      case 'delete':\n        await this.supabaseService.from('cards').delete().eq('id', operation.entityId)\n        break\n    }\n  }\n\n  private syncFolder = async (operation: TestSyncOperation) => {\n    switch (operation.type) {\n      case 'create':\n        await this.supabaseService.from('folders').insert(operation.data)\n        break\n      case 'update':\n        await this.supabaseService.from('folders').update(operation.data).eq('id', operation.entityId)\n        break\n      case 'delete':\n        await this.supabaseService.from('folders').delete().eq('id', operation.entityId)\n        break\n    }\n  }\n\n  private syncTag = async (operation: TestSyncOperation) => {\n    switch (operation.type) {\n      case 'create':\n        await this.supabaseService.from('tags').insert(operation.data)\n        break\n      case 'update':\n        await this.supabaseService.from('tags').update(operation.data).eq('id', operation.entityId)\n        break\n      case 'delete':\n        await this.supabaseService.from('tags').delete().eq('id', operation.entityId)\n        break\n    }\n  }\n\n  // 冲突解决\n  resolveConflicts = jest.fn(async (conflicts: any[]) => {\n    // 模拟冲突解决逻辑\n    const resolvedConflicts = conflicts.map(conflict => ({\n      ...conflict,\n      resolved: true,\n      resolution: 'local-wins',\n    }))\n    \n    return resolvedConflicts\n  })\n\n  // 辅助方法\n  clearErrors = jest.fn(() => {\n    this.syncErrors = []\n  })\n\n  reset = jest.fn(() => {\n    this.isOnline = true\n    this.syncInProgress = false\n    this.lastSyncTime = null\n    this.syncErrors = []\n  })\n}\n\n// ============================================================================\n// 服务工厂\n// ============================================================================\n\nexport class ServiceFactory {\n  private static supabaseService: MockSupabaseService | null = null\n  private static databaseService: MockDatabaseService | null = null\n  private static syncService: MockSyncService | null = null\n\n  static createSupabaseService(): MockSupabaseService {\n    if (!this.supabaseService) {\n      this.supabaseService = new MockSupabaseService()\n    }\n    return this.supabaseService\n  }\n\n  static createDatabaseService(): MockDatabaseService {\n    if (!this.databaseService) {\n      this.databaseService = new MockDatabaseService()\n    }\n    return this.databaseService\n  }\n\n  static createSyncService(\n    supabaseService?: MockSupabaseService,\n    databaseService?: MockDatabaseService\n  ): MockSyncService {\n    if (!this.syncService) {\n      const supa = supabaseService || this.createSupabaseService()\n      const db = databaseService || this.createDatabaseService()\n      this.syncService = new MockSyncService(supa, db)\n    }\n    return this.syncService\n  }\n\n  static resetAll(): void {\n    this.supabaseService?.reset()\n    this.databaseService?.reset()\n    this.syncService?.reset()\n    \n    this.supabaseService = null\n    this.databaseService = null\n    this.syncService = null\n  }\n}\n\n// ============================================================================\n// 导出\n// ============================================================================\n\nexport {\n  MockSupabaseService,\n  MockDatabaseService,\n  MockSyncService,\n  ServiceFactory,\n}"],"version":3}
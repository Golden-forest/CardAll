{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\hooks\\use-conflicts.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\hooks\\use-conflicts.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react'\r\nimport {\r\n  ConflictBase,\r\n  CardConflict,\r\n  FolderConflict,\r\n  TagConflict,\r\n  ConflictResolution,\r\n  ConflictSuggestion,\r\n  ConflictStats,\r\n  ConflictStatus,\r\n  ConflictSeverity\r\n} from '@/types/conflict'\r\nimport { ConflictResolutionEngine } from '@/utils/conflict-resolution'\r\nimport { unifiedSyncService } from '@/services/core/sync/unified-sync.service'\r\nimport type {\r\n  UnifiedConflict,\r\n  ConflictResolution as UnifiedConflictResolution,\r\n  ConflictEngineMetrics\r\n} from '@/services/sync/conflict-resolution-engine/unified-conflict-resolution-engine'\r\n\r\nexport function useConflicts() {\r\n  const [conflicts, setConflicts] = useState<(CardConflict | FolderConflict | TagConflict)[]>([])\r\n  const [selectedConflict, setSelectedConflict] = useState<string | null>(null)\r\n  const [isResolving, setIsResolving] = useState(false)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [metrics, setMetrics] = useState<ConflictEngineMetrics | null>(null)\r\n  const [syncStatus, setSyncStatus] = useState<any>(null)\r\n\r\n  const statsRef = useRef<ConflictStats>({\r\n    totalConflicts: 0,\r\n    resolvedConflicts: 0,\r\n    pendingConflicts: 0,\r\n    conflictsByType: {} as any,\r\n    conflictsBySeverity: {} as any,\r\n    averageResolutionTime: 0\r\n  })\r\n\r\n  // 计算冲突统计\r\n  useEffect(() => {\r\n    const newStats: ConflictStats = {\r\n      totalConflicts: conflicts.length,\r\n      resolvedConflicts: conflicts.filter(c => c.status === 'resolved').length,\r\n      pendingConflicts: conflicts.filter(c => c.status === 'pending').length,\r\n      conflictsByType: {} as any,\r\n      conflictsBySeverity: {} as any,\r\n      averageResolutionTime: calculateAverageResolutionTime()\r\n    }\r\n\r\n    // 按类型统计\r\n    conflicts.forEach(conflict => {\r\n      newStats.conflictsByType[conflict.type] = (newStats.conflictsByType[conflict.type] || 0) + 1\r\n      newStats.conflictsBySeverity[conflict.severity] = (newStats.conflictsBySeverity[conflict.severity] || 0) + 1\r\n    })\r\n\r\n    statsRef.current = newStats\r\n  }, [conflicts])\r\n\r\n  // 初始化冲突管理\r\n  useEffect(() => {\r\n    initializeConflictManagement()\r\n\r\n    // 监听同步状态变化\r\n    const syncInterval = setInterval(() => {\r\n      updateSyncStatus()\r\n    }, 5000) // 每5秒更新同步状态\r\n\r\n    return () => {\r\n      clearInterval(syncInterval)\r\n    }\r\n  }, [])\r\n\r\n  // 初始化冲突管理\r\n  const initializeConflictManagement = async () => {\r\n    setIsLoading(true)\r\n    try {\r\n      // 从统一同步服务获取冲突\r\n      await loadConflictsFromService()\r\n      await updateSyncStatus()\r\n      setError(null)\r\n    } catch (err) {\r\n      console.error('Failed to initialize conflict management:', err)\r\n      setError(err instanceof Error ? err.message : 'Unknown error')\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  // 从服务加载冲突\r\n  const loadConflictsFromService = async () => {\r\n    try {\r\n      // 获取统一同步服务的冲突\r\n      const syncConflicts = unifiedSyncService.getConflicts()\r\n\r\n      // 转换为前端冲突格式\r\n      const convertedConflicts = convertSyncConflictsToUIConflicts(syncConflicts)\r\n\r\n      setConflicts(convertedConflicts)\r\n      return convertedConflicts\r\n    } catch (err) {\r\n      console.error('Failed to load conflicts from service:', err)\r\n      // 如果服务失败，返回空数组而不是错误\r\n      return []\r\n    }\r\n  }\r\n\r\n  // 转换同步服务冲突到UI冲突格式\r\n  const convertSyncConflictsToUIConflicts = (syncConflicts: any[]): (CardConflict | FolderConflict | TagConflict)[] => {\r\n    return syncConflicts.map(syncConflict => {\r\n      const baseConflict: ConflictBase = {\r\n        id: syncConflict.id,\r\n        type: mapConflictType(syncConflict.conflictType),\r\n        entityType: syncConflict.entityType,\r\n        entityId: syncConflict.entityId,\r\n        timestamp: syncConflict.detectedAt || new Date(),\r\n        sourceDevice: syncConflict.sourceDevice || 'Unknown',\r\n        severity: syncConflict.severity,\r\n        status: mapConflictStatus(syncConflict.status),\r\n        createdAt: syncConflict.detectedAt || new Date(),\r\n        resolvedAt: syncConflict.resolvedAt,\r\n        resolvedBy: syncConflict.resolvedBy,\r\n        resolution: syncConflict.resolution ? mapConflictResolution(syncConflict.resolution) : undefined\r\n      }\r\n\r\n      switch (syncConflict.entityType) {\r\n        case 'card':\r\n          return {\r\n            ...baseConflict,\r\n            type: 'card_content',\r\n            localVersion: syncConflict.localData,\r\n            remoteVersion: syncConflict.cloudData,\r\n            conflictFields: syncConflict.conflictFields || [],\r\n            suggestions: syncConflict.suggestions?.map((s: any) => ({\r\n              type: s.type,\r\n              confidence: s.confidence,\r\n              reason: s.reasoning || s.reason,\r\n              preview: s.preview\r\n            }))\r\n          } as CardConflict\r\n\r\n        case 'folder':\r\n          return {\r\n            ...baseConflict,\r\n            type: 'folder_name',\r\n            localVersion: syncConflict.localData,\r\n            remoteVersion: syncConflict.cloudData,\r\n            affectedCards: syncConflict.conflictDetails?.affectedEntities || []\r\n          } as FolderConflict\r\n\r\n        case 'tag':\r\n          return {\r\n            ...baseConflict,\r\n            type: 'tag_rename',\r\n            localVersion: syncConflict.localData,\r\n            remoteVersion: syncConflict.cloudData,\r\n            affectedCards: syncConflict.conflictDetails?.affectedEntities || []\r\n          } as TagConflict\r\n\r\n        default:\r\n          throw new Error(`Unknown entity type: ${syncConflict.entityType}`)\r\n      }\r\n    })\r\n  }\r\n\r\n  // 映射冲突类型\r\n  const mapConflictType = (syncType: string) => {\r\n    const typeMap: Record<string, any> = {\r\n      'content': 'card_content',\r\n      'version': 'card_content',\r\n      'structure': 'folder_structure',\r\n      'delete': 'tag_delete',\r\n      'field': 'card_content'\r\n    }\r\n    return typeMap[syncType] || 'card_content'\r\n  }\r\n\r\n  // 映射冲突状态\r\n  const mapConflictStatus = (syncStatus: string): ConflictStatus => {\r\n    const statusMap: Record<string, ConflictStatus> = {\r\n      'pending': 'pending',\r\n      'resolving': 'reviewing',\r\n      'resolved': 'resolved',\r\n      'manual_required': 'pending'\r\n    }\r\n    return statusMap[syncStatus] || 'pending'\r\n  }\r\n\r\n  // 映射冲突解决方式\r\n  const mapConflictResolution = (syncResolution: any): ConflictResolution => {\r\n    return {\r\n      type: syncResolution.type,\r\n      mergedData: syncResolution.mergedData,\r\n      reason: syncResolution.reasoning,\r\n      manualChanges: syncResolution.manualChanges\r\n    }\r\n  }\r\n\r\n  // 计算平均解决时间\r\n  const calculateAverageResolutionTime = (): number => {\r\n    const resolvedConflicts = conflicts.filter(c => c.status === 'resolved' && c.resolvedAt)\r\n    if (resolvedConflicts.length === 0) return 0\r\n\r\n    const totalTime = resolvedConflicts.reduce((sum, conflict) => {\r\n      return sum + (conflict.resolvedAt!.getTime() - conflict.createdAt.getTime())\r\n    }, 0)\r\n\r\n    return totalTime / resolvedConflicts.length\r\n  }\r\n\r\n  // 更新同步状态\r\n  const updateSyncStatus = async () => {\r\n    try {\r\n      const status = unifiedSyncService.getStatus()\r\n      setSyncStatus(status)\r\n\r\n      // 自动检测新冲突\r\n      if (status.isSyncing === false && status.networkStatus?.online) {\r\n        await detectNewConflicts()\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to update sync status:', err)\r\n    }\r\n  }\r\n\r\n  // 检测新冲突\r\n  const detectNewConflicts = async () => {\r\n    try {\r\n      const currentConflicts = await loadConflictsFromService()\r\n      const newConflicts = currentConflicts.filter(c => c.status === 'pending')\r\n\r\n      // 如果有新的冲突，触发事件或更新UI\r\n      if (newConflicts.length > conflicts.filter(c => c.status === 'pending').length) {\r\n        setConflicts(currentConflicts)\r\n        // 这里可以触发通知\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to detect new conflicts:', err)\r\n    }\r\n  }\r\n\r\n  // 获取冲突详情\r\n  const getConflictById = useCallback((id: string) => {\r\n    return conflicts.find(c => c.id === id)\r\n  }, [conflicts])\r\n\r\n  // 获取待解决的冲突\r\n  const getPendingConflicts = useCallback(() => {\r\n    return conflicts.filter(c => c.status === 'pending')\r\n  }, [conflicts])\r\n\r\n  // 获取高优先级冲突\r\n  const getHighPriorityConflicts = useCallback(() => {\r\n    return conflicts.filter(c => c.severity === 'high' || c.severity === 'critical')\r\n  }, [conflicts])\r\n\r\n  // 获取统计信息\r\n  const getStats = useCallback(() => {\r\n    return { ...statsRef.current }\r\n  }, [])\r\n\r\n  // 解决冲突\r\n  const resolveConflict = useCallback(async (conflictId: string, resolution: ConflictResolution) => {\r\n    setIsResolving(true)\r\n    setError(null)\r\n\r\n    try {\r\n      // 调用统一同步服务解决冲突\r\n      const success = await unifiedSyncService.resolveConflict(\r\n        conflictId,\r\n        resolution.type as 'local' | 'cloud' | 'merge',\r\n        resolution.mergedData\r\n      )\r\n\r\n      if (success) {\r\n        // 更新本地状态\r\n        setConflicts(prev => prev.map(conflict =>\r\n          conflict.id === conflictId\r\n            ? {\r\n                ...conflict,\r\n                status: 'resolved' as ConflictStatus,\r\n                resolvedAt: new Date(),\r\n                resolvedBy: 'user',\r\n                resolution\r\n              }\r\n            : conflict\r\n        ))\r\n\r\n        setSelectedConflict(null)\r\n\r\n        // 刷新同步状态\r\n        await updateSyncStatus()\r\n\r\n        return true\r\n      } else {\r\n        throw new Error('Failed to resolve conflict via sync service')\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to resolve conflict:', err)\r\n      setError(err instanceof Error ? err.message : 'Unknown error')\r\n      return false\r\n    } finally {\r\n      setIsResolving(false)\r\n    }\r\n  }, [])\r\n\r\n  // 忽略冲突\r\n  const ignoreConflict = useCallback(async (conflictId: string) => {\r\n    try {\r\n      // 在同步服务中标记为忽略\r\n      const conflict = conflicts.find(c => c.id === conflictId)\r\n      if (!conflict) return\r\n\r\n      // 这里可以调用服务API来忽略冲突\r\n      // 目前先更新本地状态\r\n      setConflicts(prev => prev.map(conflict =>\r\n        conflict.id === conflictId\r\n          ? { ...conflict, status: 'ignored' as ConflictStatus }\r\n          : conflict\r\n      ))\r\n\r\n      setSelectedConflict(null)\r\n    } catch (err) {\r\n      console.error('Failed to ignore conflict:', err)\r\n      setError(err instanceof Error ? err.message : 'Unknown error')\r\n    }\r\n  }, [conflicts])\r\n\r\n  // 批量解决冲突\r\n  const batchResolveConflicts = useCallback(async (conflictIds: string[], resolution: ConflictResolution) => {\r\n    setIsResolving(true)\r\n    setError(null)\r\n\r\n    try {\r\n      // 批量解决冲突\r\n      const results = await Promise.allSettled(\r\n        conflictIds.map(conflictId =>\r\n          unifiedSyncService.resolveConflict(\r\n            conflictId,\r\n            resolution.type as 'local' | 'cloud' | 'merge',\r\n            resolution.mergedData\r\n          )\r\n        )\r\n      )\r\n\r\n      const successfulResolves = results.filter(r => r.status === 'fulfilled').length\r\n      const failedResolves = results.filter(r => r.status === 'rejected').length\r\n\r\n      if (successfulResolves > 0) {\r\n        // 更新本地状态\r\n        setConflicts(prev => prev.map(conflict =>\r\n          conflictIds.includes(conflict.id)\r\n            ? {\r\n                ...conflict,\r\n                status: 'resolved' as ConflictStatus,\r\n                resolvedAt: new Date(),\r\n                resolvedBy: 'user',\r\n                resolution\r\n              }\r\n            : conflict\r\n        ))\r\n      }\r\n\r\n      if (failedResolves > 0) {\r\n        throw new Error(`${failedResolves} conflicts failed to resolve`)\r\n      }\r\n\r\n      // 刷新同步状态\r\n      await updateSyncStatus()\r\n\r\n      return true\r\n    } catch (err) {\r\n      console.error('Failed to batch resolve conflicts:', err)\r\n      setError(err instanceof Error ? err.message : 'Unknown error')\r\n      return false\r\n    } finally {\r\n      setIsResolving(false)\r\n    }\r\n  }, [])\r\n\r\n  // 获取冲突解决建议\r\n  const getSuggestions = useCallback((conflictId: string): ConflictSuggestion[] => {\r\n    const conflict = getConflictById(conflictId)\r\n    if (!conflict) return []\r\n\r\n    // 使用智能冲突解决引擎生成建议\r\n    const engineSuggestions = ConflictResolutionEngine.generateSuggestions(conflict)\r\n\r\n    // 添加基于同步服务的建议\r\n    const syncSuggestions = unifiedSyncService.getConflict(conflictId)?.suggestions || []\r\n\r\n    // 合并并去重建议\r\n    const allSuggestions = [...engineSuggestions, ...syncSuggestions.map((s: any) => ({\r\n      type: s.type,\r\n      confidence: s.confidence,\r\n      reason: s.reasoning || s.reason,\r\n      preview: s.preview\r\n    }))]\r\n\r\n    // 按置信度排序\r\n    return allSuggestions.sort((a, b) => b.confidence - a.confidence)\r\n  }, [getConflictById])\r\n\r\n  // 检测新冲突\r\n  const detectConflicts = useCallback(async () => {\r\n    setIsLoading(true)\r\n    try {\r\n      // 执行同步以检测新冲突\r\n      const syncResult = await unifiedSyncService.sync({\r\n        type: 'incremental',\r\n        direction: 'bidirectional'\r\n      })\r\n\r\n      // 加载更新后的冲突\r\n      const updatedConflicts = await loadConflictsFromService()\r\n      const newConflicts = updatedConflicts.filter(c => c.status === 'pending')\r\n\r\n      setConflicts(updatedConflicts)\r\n\r\n      return newConflicts\r\n    } catch (err) {\r\n      console.error('Failed to detect conflicts:', err)\r\n      setError(err instanceof Error ? err.message : 'Unknown error')\r\n      return []\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }, [])\r\n\r\n  // 自动解决冲突\r\n  const autoResolveConflicts = useCallback(async (): Promise<number> => {\r\n    setIsResolving(true)\r\n    try {\r\n      const resolvedCount = await unifiedSyncService.autoResolveConflicts()\r\n\r\n      // 刷新冲突列表\r\n      await loadConflictsFromService()\r\n      await updateSyncStatus()\r\n\r\n      return resolvedCount\r\n    } catch (err) {\r\n      console.error('Failed to auto-resolve conflicts:', err)\r\n      setError(err instanceof Error ? err.message : 'Unknown error')\r\n      return 0\r\n    } finally {\r\n      setIsResolving(false)\r\n    }\r\n  }, [])\r\n\r\n  // 获取冲突详情（完整信息）\r\n  const getConflictDetails = useCallback(async (conflictId: string) => {\r\n    try {\r\n      const conflict = getConflictById(conflictId)\r\n      if (!conflict) return null\r\n\r\n      // 获取同步服务中的详细信息\r\n      const syncConflict = unifiedSyncService.getConflict(conflictId)\r\n\r\n      return {\r\n        ...conflict,\r\n        syncDetails: syncConflict,\r\n        suggestions: getSuggestions(conflictId)\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to get conflict details:', err)\r\n      return null\r\n    }\r\n  }, [getConflictById, getSuggestions])\r\n\r\n  // 刷新冲突列表\r\n  const refreshConflicts = useCallback(async () => {\r\n    setIsLoading(true)\r\n    try {\r\n      await loadConflictsFromService()\r\n      await updateSyncStatus()\r\n      setError(null)\r\n    } catch (err) {\r\n      console.error('Failed to refresh conflicts:', err)\r\n      setError(err instanceof Error ? err.message : 'Unknown error')\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }, [])\r\n\r\n  // 清除错误\r\n  const clearError = useCallback(() => {\r\n    setError(null)\r\n  }, [])\r\n\r\n  return {\r\n    // 状态\r\n    conflicts,\r\n    selectedConflict,\r\n    setSelectedConflict,\r\n    isResolving,\r\n    isLoading,\r\n    error,\r\n    syncStatus,\r\n    metrics,\r\n\r\n    // 方法\r\n    getConflictById,\r\n    getPendingConflicts,\r\n    getHighPriorityConflicts,\r\n    getStats,\r\n    resolveConflict,\r\n    ignoreConflict,\r\n    batchResolveConflicts,\r\n    getSuggestions,\r\n    detectConflicts,\r\n    autoResolveConflicts,\r\n    getConflictDetails,\r\n    refreshConflicts,\r\n    clearError\r\n  }\r\n}"],"version":3}
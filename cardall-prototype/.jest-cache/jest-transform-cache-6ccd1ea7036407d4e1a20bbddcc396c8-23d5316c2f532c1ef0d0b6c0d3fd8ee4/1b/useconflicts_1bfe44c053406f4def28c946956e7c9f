bdc6f8588339869a8425c7b725c5bbe9
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useConflicts = useConflicts;
const react_1 = require("react");
const conflict_resolution_1 = require("@/utils/conflict-resolution");
const unified_sync_service_1 = require("@/services/core/sync/unified-sync.service");
function useConflicts() {
    const [conflicts, setConflicts] = (0, react_1.useState)([]);
    const [selectedConflict, setSelectedConflict] = (0, react_1.useState)(null);
    const [isResolving, setIsResolving] = (0, react_1.useState)(false);
    const [isLoading, setIsLoading] = (0, react_1.useState)(false);
    const [error, setError] = (0, react_1.useState)(null);
    const [metrics, setMetrics] = (0, react_1.useState)(null);
    const [syncStatus, setSyncStatus] = (0, react_1.useState)(null);
    const statsRef = (0, react_1.useRef)({
        totalConflicts: 0,
        resolvedConflicts: 0,
        pendingConflicts: 0,
        conflictsByType: {},
        conflictsBySeverity: {},
        averageResolutionTime: 0
    });
    // 计算冲突统计
    (0, react_1.useEffect)(() => {
        const newStats = {
            totalConflicts: conflicts.length,
            resolvedConflicts: conflicts.filter(c => c.status === 'resolved').length,
            pendingConflicts: conflicts.filter(c => c.status === 'pending').length,
            conflictsByType: {},
            conflictsBySeverity: {},
            averageResolutionTime: calculateAverageResolutionTime()
        };
        // 按类型统计
        conflicts.forEach(conflict => {
            newStats.conflictsByType[conflict.type] = (newStats.conflictsByType[conflict.type] || 0) + 1;
            newStats.conflictsBySeverity[conflict.severity] = (newStats.conflictsBySeverity[conflict.severity] || 0) + 1;
        });
        statsRef.current = newStats;
    }, [conflicts]);
    // 初始化冲突管理
    (0, react_1.useEffect)(() => {
        initializeConflictManagement();
        // 监听同步状态变化
        const syncInterval = setInterval(() => {
            updateSyncStatus();
        }, 5000); // 每5秒更新同步状态
        return () => {
            clearInterval(syncInterval);
        };
    }, []);
    // 初始化冲突管理
    const initializeConflictManagement = async () => {
        setIsLoading(true);
        try {
            // 从统一同步服务获取冲突
            await loadConflictsFromService();
            await updateSyncStatus();
            setError(null);
        }
        catch (err) {
            console.error('Failed to initialize conflict management:', err);
            setError(err instanceof Error ? err.message : 'Unknown error');
        }
        finally {
            setIsLoading(false);
        }
    };
    // 从服务加载冲突
    const loadConflictsFromService = async () => {
        try {
            // 获取统一同步服务的冲突
            const syncConflicts = unified_sync_service_1.unifiedSyncService.getConflicts();
            // 转换为前端冲突格式
            const convertedConflicts = convertSyncConflictsToUIConflicts(syncConflicts);
            setConflicts(convertedConflicts);
            return convertedConflicts;
        }
        catch (err) {
            console.error('Failed to load conflicts from service:', err);
            // 如果服务失败，返回空数组而不是错误
            return [];
        }
    };
    // 转换同步服务冲突到UI冲突格式
    const convertSyncConflictsToUIConflicts = (syncConflicts) => {
        return syncConflicts.map(syncConflict => {
            const baseConflict = {
                id: syncConflict.id,
                type: mapConflictType(syncConflict.conflictType),
                entityType: syncConflict.entityType,
                entityId: syncConflict.entityId,
                timestamp: syncConflict.detectedAt || new Date(),
                sourceDevice: syncConflict.sourceDevice || 'Unknown',
                severity: syncConflict.severity,
                status: mapConflictStatus(syncConflict.status),
                createdAt: syncConflict.detectedAt || new Date(),
                resolvedAt: syncConflict.resolvedAt,
                resolvedBy: syncConflict.resolvedBy,
                resolution: syncConflict.resolution ? mapConflictResolution(syncConflict.resolution) : undefined
            };
            switch (syncConflict.entityType) {
                case 'card':
                    return {
                        ...baseConflict,
                        type: 'card_content',
                        localVersion: syncConflict.localData,
                        remoteVersion: syncConflict.cloudData,
                        conflictFields: syncConflict.conflictFields || [],
                        suggestions: syncConflict.suggestions?.map((s) => ({
                            type: s.type,
                            confidence: s.confidence,
                            reason: s.reasoning || s.reason,
                            preview: s.preview
                        }))
                    };
                case 'folder':
                    return {
                        ...baseConflict,
                        type: 'folder_name',
                        localVersion: syncConflict.localData,
                        remoteVersion: syncConflict.cloudData,
                        affectedCards: syncConflict.conflictDetails?.affectedEntities || []
                    };
                case 'tag':
                    return {
                        ...baseConflict,
                        type: 'tag_rename',
                        localVersion: syncConflict.localData,
                        remoteVersion: syncConflict.cloudData,
                        affectedCards: syncConflict.conflictDetails?.affectedEntities || []
                    };
                default:
                    throw new Error(`Unknown entity type: ${syncConflict.entityType}`);
            }
        });
    };
    // 映射冲突类型
    const mapConflictType = (syncType) => {
        const typeMap = {
            'content': 'card_content',
            'version': 'card_content',
            'structure': 'folder_structure',
            'delete': 'tag_delete',
            'field': 'card_content'
        };
        return typeMap[syncType] || 'card_content';
    };
    // 映射冲突状态
    const mapConflictStatus = (syncStatus) => {
        const statusMap = {
            'pending': 'pending',
            'resolving': 'reviewing',
            'resolved': 'resolved',
            'manual_required': 'pending'
        };
        return statusMap[syncStatus] || 'pending';
    };
    // 映射冲突解决方式
    const mapConflictResolution = (syncResolution) => {
        return {
            type: syncResolution.type,
            mergedData: syncResolution.mergedData,
            reason: syncResolution.reasoning,
            manualChanges: syncResolution.manualChanges
        };
    };
    // 计算平均解决时间
    const calculateAverageResolutionTime = () => {
        const resolvedConflicts = conflicts.filter(c => c.status === 'resolved' && c.resolvedAt);
        if (resolvedConflicts.length === 0)
            return 0;
        const totalTime = resolvedConflicts.reduce((sum, conflict) => {
            return sum + (conflict.resolvedAt.getTime() - conflict.createdAt.getTime());
        }, 0);
        return totalTime / resolvedConflicts.length;
    };
    // 更新同步状态
    const updateSyncStatus = async () => {
        try {
            const status = unified_sync_service_1.unifiedSyncService.getStatus();
            setSyncStatus(status);
            // 自动检测新冲突
            if (status.isSyncing === false && status.networkStatus?.online) {
                await detectNewConflicts();
            }
        }
        catch (err) {
            console.error('Failed to update sync status:', err);
        }
    };
    // 检测新冲突
    const detectNewConflicts = async () => {
        try {
            const currentConflicts = await loadConflictsFromService();
            const newConflicts = currentConflicts.filter(c => c.status === 'pending');
            // 如果有新的冲突，触发事件或更新UI
            if (newConflicts.length > conflicts.filter(c => c.status === 'pending').length) {
                setConflicts(currentConflicts);
                // 这里可以触发通知
            }
        }
        catch (err) {
            console.error('Failed to detect new conflicts:', err);
        }
    };
    // 获取冲突详情
    const getConflictById = (0, react_1.useCallback)((id) => {
        return conflicts.find(c => c.id === id);
    }, [conflicts]);
    // 获取待解决的冲突
    const getPendingConflicts = (0, react_1.useCallback)(() => {
        return conflicts.filter(c => c.status === 'pending');
    }, [conflicts]);
    // 获取高优先级冲突
    const getHighPriorityConflicts = (0, react_1.useCallback)(() => {
        return conflicts.filter(c => c.severity === 'high' || c.severity === 'critical');
    }, [conflicts]);
    // 获取统计信息
    const getStats = (0, react_1.useCallback)(() => {
        return { ...statsRef.current };
    }, []);
    // 解决冲突
    const resolveConflict = (0, react_1.useCallback)(async (conflictId, resolution) => {
        setIsResolving(true);
        setError(null);
        try {
            // 调用统一同步服务解决冲突
            const success = await unified_sync_service_1.unifiedSyncService.resolveConflict(conflictId, resolution.type, resolution.mergedData);
            if (success) {
                // 更新本地状态
                setConflicts(prev => prev.map(conflict => conflict.id === conflictId
                    ? {
                        ...conflict,
                        status: 'resolved',
                        resolvedAt: new Date(),
                        resolvedBy: 'user',
                        resolution
                    }
                    : conflict));
                setSelectedConflict(null);
                // 刷新同步状态
                await updateSyncStatus();
                return true;
            }
            else {
                throw new Error('Failed to resolve conflict via sync service');
            }
        }
        catch (err) {
            console.error('Failed to resolve conflict:', err);
            setError(err instanceof Error ? err.message : 'Unknown error');
            return false;
        }
        finally {
            setIsResolving(false);
        }
    }, []);
    // 忽略冲突
    const ignoreConflict = (0, react_1.useCallback)(async (conflictId) => {
        try {
            // 在同步服务中标记为忽略
            const conflict = conflicts.find(c => c.id === conflictId);
            if (!conflict)
                return;
            // 这里可以调用服务API来忽略冲突
            // 目前先更新本地状态
            setConflicts(prev => prev.map(conflict => conflict.id === conflictId
                ? { ...conflict, status: 'ignored' }
                : conflict));
            setSelectedConflict(null);
        }
        catch (err) {
            console.error('Failed to ignore conflict:', err);
            setError(err instanceof Error ? err.message : 'Unknown error');
        }
    }, [conflicts]);
    // 批量解决冲突
    const batchResolveConflicts = (0, react_1.useCallback)(async (conflictIds, resolution) => {
        setIsResolving(true);
        setError(null);
        try {
            // 批量解决冲突
            const results = await Promise.allSettled(conflictIds.map(conflictId => unified_sync_service_1.unifiedSyncService.resolveConflict(conflictId, resolution.type, resolution.mergedData)));
            const successfulResolves = results.filter(r => r.status === 'fulfilled').length;
            const failedResolves = results.filter(r => r.status === 'rejected').length;
            if (successfulResolves > 0) {
                // 更新本地状态
                setConflicts(prev => prev.map(conflict => conflictIds.includes(conflict.id)
                    ? {
                        ...conflict,
                        status: 'resolved',
                        resolvedAt: new Date(),
                        resolvedBy: 'user',
                        resolution
                    }
                    : conflict));
            }
            if (failedResolves > 0) {
                throw new Error(`${failedResolves} conflicts failed to resolve`);
            }
            // 刷新同步状态
            await updateSyncStatus();
            return true;
        }
        catch (err) {
            console.error('Failed to batch resolve conflicts:', err);
            setError(err instanceof Error ? err.message : 'Unknown error');
            return false;
        }
        finally {
            setIsResolving(false);
        }
    }, []);
    // 获取冲突解决建议
    const getSuggestions = (0, react_1.useCallback)((conflictId) => {
        const conflict = getConflictById(conflictId);
        if (!conflict)
            return [];
        // 使用智能冲突解决引擎生成建议
        const engineSuggestions = conflict_resolution_1.ConflictResolutionEngine.generateSuggestions(conflict);
        // 添加基于同步服务的建议
        const syncSuggestions = unified_sync_service_1.unifiedSyncService.getConflict(conflictId)?.suggestions || [];
        // 合并并去重建议
        const allSuggestions = [...engineSuggestions, ...syncSuggestions.map((s) => ({
                type: s.type,
                confidence: s.confidence,
                reason: s.reasoning || s.reason,
                preview: s.preview
            }))];
        // 按置信度排序
        return allSuggestions.sort((a, b) => b.confidence - a.confidence);
    }, [getConflictById]);
    // 检测新冲突
    const detectConflicts = (0, react_1.useCallback)(async () => {
        setIsLoading(true);
        try {
            // 执行同步以检测新冲突
            const syncResult = await unified_sync_service_1.unifiedSyncService.sync({
                type: 'incremental',
                direction: 'bidirectional'
            });
            // 加载更新后的冲突
            const updatedConflicts = await loadConflictsFromService();
            const newConflicts = updatedConflicts.filter(c => c.status === 'pending');
            setConflicts(updatedConflicts);
            return newConflicts;
        }
        catch (err) {
            console.error('Failed to detect conflicts:', err);
            setError(err instanceof Error ? err.message : 'Unknown error');
            return [];
        }
        finally {
            setIsLoading(false);
        }
    }, []);
    // 自动解决冲突
    const autoResolveConflicts = (0, react_1.useCallback)(async () => {
        setIsResolving(true);
        try {
            const resolvedCount = await unified_sync_service_1.unifiedSyncService.autoResolveConflicts();
            // 刷新冲突列表
            await loadConflictsFromService();
            await updateSyncStatus();
            return resolvedCount;
        }
        catch (err) {
            console.error('Failed to auto-resolve conflicts:', err);
            setError(err instanceof Error ? err.message : 'Unknown error');
            return 0;
        }
        finally {
            setIsResolving(false);
        }
    }, []);
    // 获取冲突详情（完整信息）
    const getConflictDetails = (0, react_1.useCallback)(async (conflictId) => {
        try {
            const conflict = getConflictById(conflictId);
            if (!conflict)
                return null;
            // 获取同步服务中的详细信息
            const syncConflict = unified_sync_service_1.unifiedSyncService.getConflict(conflictId);
            return {
                ...conflict,
                syncDetails: syncConflict,
                suggestions: getSuggestions(conflictId)
            };
        }
        catch (err) {
            console.error('Failed to get conflict details:', err);
            return null;
        }
    }, [getConflictById, getSuggestions]);
    // 刷新冲突列表
    const refreshConflicts = (0, react_1.useCallback)(async () => {
        setIsLoading(true);
        try {
            await loadConflictsFromService();
            await updateSyncStatus();
            setError(null);
        }
        catch (err) {
            console.error('Failed to refresh conflicts:', err);
            setError(err instanceof Error ? err.message : 'Unknown error');
        }
        finally {
            setIsLoading(false);
        }
    }, []);
    // 清除错误
    const clearError = (0, react_1.useCallback)(() => {
        setError(null);
    }, []);
    return {
        // 状态
        conflicts,
        selectedConflict,
        setSelectedConflict,
        isResolving,
        isLoading,
        error,
        syncStatus,
        metrics,
        // 方法
        getConflictById,
        getPendingConflicts,
        getHighPriorityConflicts,
        getStats,
        resolveConflict,
        ignoreConflict,
        batchResolveConflicts,
        getSuggestions,
        detectConflicts,
        autoResolveConflicts,
        getConflictDetails,
        refreshConflicts,
        clearError
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
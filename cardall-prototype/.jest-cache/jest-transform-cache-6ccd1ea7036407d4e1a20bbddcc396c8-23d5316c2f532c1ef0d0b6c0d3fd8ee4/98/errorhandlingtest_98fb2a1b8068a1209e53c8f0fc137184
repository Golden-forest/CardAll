a683275a511eba5773a86b3a4ea7271d
"use strict";
/**
 * 错误处理服务单元测试
 * 测试错误处理、恢复机制、监控和自愈功能
 */
Object.defineProperty(exports, "__esModule", { value: true });
const error_handling_service_1 = require("@/services/error-handling/error-handling-service");
const test_helpers_1 = require("../utils/test-helpers");
const vitest_1 = require("vitest");
// 模拟依赖模块
const mockUnifiedErrorHandler = {
    unifiedErrorHandler: {},
    handleError: vitest_1.vi.fn(),
    createErrorContext: vitest_1.vi.fn(),
    UnifiedError: class {
        constructor(message, category, level, operation, retryable = true) {
            Object.defineProperty(this, "message", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: message
            });
            Object.defineProperty(this, "category", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: category
            });
            Object.defineProperty(this, "level", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: level
            });
            Object.defineProperty(this, "operation", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: operation
            });
            Object.defineProperty(this, "retryable", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: retryable
            });
        }
    }
};
const mockErrorMonitoringService = {
    getInstance: vitest_1.vi.fn().mockReturnValue({
        getMetrics: vitest_1.vi.fn().mockReturnValue({
            metrics: {
                errorRate: 0.03,
                recoveryRate: 0.95,
                errorCount: 15,
                recoveryCount: 14
            }
        }),
        getRecentErrors: vitest_1.vi.fn().mockReturnValue([])
    })
};
const mockRecoveryStrategyManager = {
    getInstance: vitest_1.vi.fn().mockReturnValue({
        attemptRecovery: vitest_1.vi.fn().mockResolvedValue({ success: true })
    })
};
const mockSelfHealingFramework = {
    getInstance: vitest_1.vi.fn().mockReturnValue({
        attemptHealing: vitest_1.vi.fn().mockResolvedValue(true)
    })
};
const mockNetworkStateDetector = {
    getCurrentState: vitest_1.vi.fn().mockReturnValue({
        online: true,
        type: 'wifi',
        strength: 'excellent'
    })
};
vitest_1.vi.mock('@/services/error-handling/unified-error-handler', () => mockUnifiedErrorHandler);
vitest_1.vi.mock('@/services/error-handling/error-monitoring-service', () => mockErrorMonitoringService);
vitest_1.vi.mock('@/services/error-handling/recovery-strategy-manager', () => mockRecoveryStrategyManager);
vitest_1.vi.mock('@/services/error-handling/self-healing-framework', () => mockSelfHealingFramework);
vitest_1.vi.mock('@/services/network-state-detector', () => mockNetworkStateDetector);
(0, vitest_1.describe)('ErrorHandlingService', () => {
    let errorHandlingService;
    (0, vitest_1.beforeEach)(() => {
        (0, test_helpers_1.cleanupAllMocks)();
        // 重置所有mock
        vitest_1.vi.clearAllMocks();
        // 设置默认mock返回值
        mockUnifiedErrorHandler.handleError.mockResolvedValue({
            handled: true,
            error: new mockUnifiedErrorHandler.UnifiedError('Test error', 'NETWORK', 'ERROR', 'test-operation')
        });
        mockUnifiedErrorHandler.createErrorContext.mockReturnValue({
            operation: 'test',
            userId: 'test-user',
            environment: 'test'
        });
        // 创建新的服务实例
        errorHandlingService = new error_handling_service_1.CardAllErrorHandlingService();
    });
    (0, vitest_1.afterEach)(() => {
        (0, test_helpers_1.cleanupAllMocks)();
    });
    (0, vitest_1.describe)('Constructor and Configuration', () => {
        (0, vitest_1.test)('should initialize with default config', () => {
            const service = new error_handling_service_1.CardAllErrorHandlingService();
            const config = service.getConfig();
            (0, vitest_1.expect)(config.enableMonitoring).toBe(true);
            (0, vitest_1.expect)(config.enableRecovery).toBe(true);
            (0, vitest_1.expect)(config.enableSelfHealing).toBe(true);
            (0, vitest_1.expect)(config.monitoring.bufferSize).toBe(1000);
            (0, vitest_1.expect)(config.recovery.maxRetries).toBe(3);
            (0, vitest_1.expect)(config.selfHealing.enabled).toBe(true);
            (0, vitest_1.expect)(config.alerts.enabled).toBe(true);
        });
        (0, vitest_1.test)('should merge custom config with defaults', () => {
            const customConfig = {
                enableMonitoring: false,
                enableRecovery: false,
                monitoring: {
                    bufferSize: 500,
                    historySize: 100,
                    sampleRate: 0.5
                },
                recovery: {
                    maxRetries: 5,
                    baseDelay: 2000,
                    maxDelay: 60000
                }
            };
            const service = new error_handling_service_1.CardAllErrorHandlingService(customConfig);
            const config = service.getConfig();
            (0, vitest_1.expect)(config.enableMonitoring).toBe(false);
            (0, vitest_1.expect)(config.enableRecovery).toBe(false);
            (0, vitest_1.expect)(config.enableSelfHealing).toBe(true); // 保持默认值
            (0, vitest_1.expect)(config.monitoring.bufferSize).toBe(500);
            (0, vitest_1.expect)(config.monitoring.historySize).toBe(100);
            (0, vitest_1.expect)(config.monitoring.sampleRate).toBe(0.5);
            (0, vitest_1.expect)(config.recovery.maxRetries).toBe(5);
            (0, vitest_1.expect)(config.recovery.baseDelay).toBe(2000);
        });
        (0, vitest_1.test)('should initialize dependent services correctly', () => {
            new error_handling_service_1.CardAllErrorHandlingService();
            (0, vitest_1.expect)(mockErrorMonitoringService.getInstance).toHaveBeenCalled();
            (0, vitest_1.expect)(mockRecoveryStrategyManager.getInstance).toHaveBeenCalled();
            (0, vitest_1.expect)(mockSelfHealingFramework.getInstance).toHaveBeenCalled();
        });
        (0, vitest_1.test)('should create singleton instance', () => {
            const instance1 = error_handling_service_1.CardAllErrorHandlingService.getInstance();
            const instance2 = error_handling_service_1.CardAllErrorHandlingService.getInstance();
            (0, vitest_1.expect)(instance1).toBe(instance2);
        });
    });
    (0, vitest_1.describe)('Error Handling', () => {
        (0, vitest_1.test)('should handle sync errors correctly', async () => {
            const error = new Error('Sync failed');
            const context = { entityType: 'card', userId: 'test-user' };
            const result = await errorHandlingService.handleSyncError(error, context);
            (0, vitest_1.expect)(mockUnifiedErrorHandler.handleError).toHaveBeenCalledWith(error, vitest_1.expect.objectContaining({
                operation: 'sync',
                entityType: 'card',
                userId: 'test-user',
                environment: 'test'
            }));
            (0, vitest_1.expect)(result.handled).toBe(true);
            if (result.error) {
                (0, vitest_1.expect)(result.error.operation).toBe('sync');
                (0, vitest_1.expect)(result.error.entity).toBe('card');
            }
        });
        (0, vitest_1.test)('should handle network errors with network state', async () => {
            const error = new Error('Network error');
            const context = { url: 'https://api.example.com', method: 'GET' };
            const result = await errorHandlingService.handleNetworkError(error, context);
            (0, vitest_1.expect)(mockUnifiedErrorHandler.handleError).toHaveBeenCalledWith(error, vitest_1.expect.objectContaining({
                operation: 'network',
                url: 'https://api.example.com',
                method: 'GET'
            }));
            (0, vitest_1.expect)(mockNetworkStateDetector.getCurrentState).toHaveBeenCalled();
            if (result.error) {
                (0, vitest_1.expect)(result.error.details).toHaveProperty('networkState');
                (0, vitest_1.expect)(result.error.details).toHaveProperty('timestamp');
            }
        });
        (0, vitest_1.test)('should handle data errors with entity information', async () => {
            const error = new Error('Data validation failed');
            const context = {
                entity: 'card',
                dataType: 'CardContent',
                operation: 'create'
            };
            const result = await errorHandlingService.handleDataError(error, context);
            (0, vitest_1.expect)(mockUnifiedErrorHandler.handleError).toHaveBeenCalledWith(error, vitest_1.expect.objectContaining({
                operation: 'data',
                entity: 'card',
                dataType: 'CardContent',
                operation: 'create'
            }));
            if (result.error) {
                (0, vitest_1.expect)(result.error.entity).toBe('card');
                (0, vitest_1.expect)(result.error.details).toHaveProperty('dataType', 'CardContent');
                (0, vitest_1.expect)(result.error.details).toHaveProperty('operation', 'create');
            }
        });
        (0, vitest_1.test)('should handle system errors as critical', async () => {
            const error = new Error('System crash');
            const context = { component: 'Database', action: 'query' };
            const result = await errorHandlingService.handleSystemError(error, context);
            (0, vitest_1.expect)(mockUnifiedErrorHandler.handleError).toHaveBeenCalledWith(error, vitest_1.expect.objectContaining({
                operation: 'system',
                component: 'Database',
                action: 'query'
            }));
            if (result.error) {
                (0, vitest_1.expect)(result.error.level).toBe('CRITICAL');
                (0, vitest_1.expect)(result.error.retryable).toBe(false);
            }
        });
        (0, vitest_1.test)('should handle errors without context', async () => {
            const error = new Error('Unknown error');
            const result = await errorHandlingService.handleSyncError(error);
            (0, vitest_1.expect)(mockUnifiedErrorHandler.handleError).toHaveBeenCalledWith(error, vitest_1.expect.objectContaining({
                operation: 'sync',
                environment: 'development'
            }));
            (0, vitest_1.expect)(result.handled).toBe(true);
        });
        (0, vitest_1.test)('should handle error handling failures', async () => {
            const error = new Error('Critical error');
            mockUnifiedErrorHandler.handleError.mockRejectedValue(new Error('Handler failed'));
            await (0, vitest_1.expect)(errorHandlingService.handleSyncError(error))
                .rejects.toThrow('Handler failed');
        });
    });
    (0, vitest_1.describe)('Monitoring and Statistics', () => {
        (0, vitest_1.test)('should return error statistics when monitoring is enabled', () => {
            const service = new error_handling_service_1.CardAllErrorHandlingService();
            const stats = service.getErrorStatistics();
            (0, vitest_1.expect)(stats).toEqual({
                metrics: {
                    errorRate: 0.03,
                    recoveryRate: 0.95,
                    errorCount: 15,
                    recoveryCount: 14
                }
            });
        });
        (0, vitest_1.test)('should return null when monitoring is disabled', () => {
            const service = new error_handling_service_1.CardAllErrorHandlingService({
                enableMonitoring: false
            });
            const stats = service.getErrorStatistics();
            (0, vitest_1.expect)(stats).toBeNull();
        });
        (0, vitest_1.test)('should calculate health status correctly', () => {
            const service = new error_handling_service_1.CardAllErrorHandlingService();
            // 健康状态
            mockErrorMonitoringService.getInstance.mockReturnValue({
                getMetrics: vitest_1.vi.fn().mockReturnValue({
                    metrics: {
                        errorRate: 0.01,
                        recoveryRate: 0.98,
                        errorCount: 5,
                        recoveryCount: 5
                    }
                })
            });
            const healthStatus = service.getHealthStatus();
            (0, vitest_1.expect)(healthStatus.status).toBe('healthy');
            (0, vitest_1.expect)(healthStatus.score).toBeGreaterThanOrEqual(90);
            (0, vitest_1.expect)(healthStatus.timestamp).toBeInstanceOf(Date);
            (0, vitest_1.expect)(healthStatus.recommendations).toBeInstanceOf(Array);
        });
        (0, vitest_1.test)('should handle degraded health status', () => {
            const service = new error_handling_service_1.CardAllErrorHandlingService();
            mockErrorMonitoringService.getInstance.mockReturnValue({
                getMetrics: vitest_1.vi.fn().mockReturnValue({
                    metrics: {
                        errorRate: 0.08,
                        recoveryRate: 0.85,
                        errorCount: 20,
                        recoveryCount: 17
                    }
                })
            });
            const healthStatus = service.getHealthStatus();
            (0, vitest_1.expect)(healthStatus.status).toBe('degraded');
            (0, vitest_1.expect)(healthStatus.score).toBeLessThan(90);
            (0, vitest_1.expect)(healthStatus.score).toBeGreaterThanOrEqual(70);
        });
        (0, vitest_1.test)('should handle unhealthy status', () => {
            const service = new error_handling_service_1.CardAllErrorHandlingService();
            mockErrorMonitoringService.getInstance.mockReturnValue({
                getMetrics: vitest_1.vi.fn().mockReturnValue({
                    metrics: {
                        errorRate: 0.15,
                        recoveryRate: 0.70,
                        errorCount: 50,
                        recoveryCount: 35
                    }
                })
            });
            const healthStatus = service.getHealthStatus();
            (0, vitest_1.expect)(healthStatus.status).toBe('unhealthy');
            (0, vitest_1.expect)(healthStatus.score).toBeLessThan(70);
            (0, vitest_1.expect)(healthStatus.score).toBeGreaterThanOrEqual(0);
        });
        (0, vitest_1.test)('should generate appropriate recommendations', () => {
            const service = new error_handling_service_1.CardAllErrorHandlingService();
            mockErrorMonitoringService.getInstance.mockReturnValue({
                getMetrics: vitest_1.vi.fn().mockReturnValue({
                    metrics: {
                        errorRate: 0.12,
                        recoveryRate: 0.75,
                        errorCount: 100,
                        recoveryCount: 75
                    }
                })
            });
            const healthStatus = service.getHealthStatus();
            (0, vitest_1.expect)(healthStatus.recommendations.length).toBeGreaterThan(0);
            (0, vitest_1.expect)(healthStatus.recommendations).toEqual(vitest_1.expect.arrayContaining([
                vitest_1.expect.stringContaining('系统健康状况不佳'),
                vitest_1.expect.stringContaining('错误率较高'),
                vitest_1.expect.stringContaining('恢复率偏低')
            ]));
        });
        (0, vitest_1.test)('should return recent errors with limit', () => {
            const service = new error_handling_service_1.CardAllErrorHandlingService();
            const recentErrors = service.getRecentErrors(10);
            (0, vitest_1.expect)(recentErrors).toEqual([]);
            (0, vitest_1.expect)(mockErrorMonitoringService.getInstance().getRecentErrors).toHaveBeenCalledWith(10);
        });
        (0, vitest_1.test)('should return empty array when monitoring is disabled', () => {
            const service = new error_handling_service_1.CardAllErrorHandlingService({
                enableMonitoring: false
            });
            const recentErrors = service.getRecentErrors();
            (0, vitest_1.expect)(recentErrors).toEqual([]);
            (0, vitest_1.expect)(mockErrorMonitoringService.getInstance().getRecentErrors).not.toHaveBeenCalled();
        });
    });
    (0, vitest_1.describe)('Configuration Management', () => {
        (0, vitest_1.test)('should update configuration correctly', () => {
            const service = new error_handling_service_1.CardAllErrorHandlingService();
            const newConfig = {
                enableMonitoring: false,
                enableRecovery: false,
                recovery: {
                    maxRetries: 10,
                    baseDelay: 5000
                }
            };
            service.updateConfig(newConfig);
            const config = service.getConfig();
            (0, vitest_1.expect)(config.enableMonitoring).toBe(false);
            (0, vitest_1.expect)(config.enableRecovery).toBe(false);
            (0, vitest_1.expect)(config.recovery.maxRetries).toBe(10);
            (0, vitest_1.expect)(config.recovery.baseDelay).toBe(5000);
        });
        (0, vitest_1.test)('should reconfigure services when config is updated', () => {
            const service = new error_handling_service_1.CardAllErrorHandlingService();
            service.updateConfig({
                enableMonitoring: false,
                enableSelfHealing: false
            });
            // 验证服务被重新初始化
            (0, vitest_1.expect)(mockErrorMonitoringService.getInstance).toHaveBeenCalledTimes(2);
            (0, vitest_1.expect)(mockSelfHealingFramework.getInstance).toHaveBeenCalledTimes(2);
        });
        (0, vitest_1.test)('should return a copy of config to prevent mutation', () => {
            const service = new error_handling_service_1.CardAllErrorHandlingService();
            const config = service.getConfig();
            config.enableMonitoring = false;
            const originalConfig = service.getConfig();
            (0, vitest_1.expect)(originalConfig.enableMonitoring).toBe(true);
        });
    });
    (0, vitest_1.describe)('Recovery and Self-Healing', () => {
        (0, vitest_1.test)('should attempt recovery when enabled', async () => {
            const service = new error_handling_service_1.CardAllErrorHandlingService();
            const error = new mockUnifiedErrorHandler.UnifiedError('Test error', 'NETWORK', 'ERROR', 'sync-operation');
            const result = await service.attemptRecovery(error);
            (0, vitest_1.expect)(result).toBe(true);
            (0, vitest_1.expect)(mockRecoveryStrategyManager.getInstance().attemptRecovery).toHaveBeenCalledWith(error, vitest_1.expect.objectContaining({
                operation: 'sync-operation',
                userId: error.userId,
                environment: 'production'
            }));
        });
        (0, vitest_1.test)('should return false when recovery is disabled', async () => {
            const service = new error_handling_service_1.CardAllErrorHandlingService({
                enableRecovery: false
            });
            const error = new mockUnifiedErrorHandler.UnifiedError('Test error', 'NETWORK', 'ERROR', 'sync-operation');
            const result = await service.attemptRecovery(error);
            (0, vitest_1.expect)(result).toBe(false);
            (0, vitest_1.expect)(mockRecoveryStrategyManager.getInstance().attemptRecovery).not.toHaveBeenCalled();
        });
        (0, vitest_1.test)('should handle recovery failures gracefully', async () => {
            const service = new error_handling_service_1.CardAllErrorHandlingService();
            mockRecoveryStrategyManager.getInstance.mockReturnValue({
                attemptRecovery: vitest_1.vi.fn().mockRejectedValue(new Error('Recovery failed'))
            });
            const error = new mockUnifiedErrorHandler.UnifiedError('Test error', 'NETWORK', 'ERROR', 'sync-operation');
            const consoleErrorSpy = vitest_1.vi.spyOn(console, 'error');
            const result = await service.attemptRecovery(error);
            (0, vitest_1.expect)(result).toBe(false);
            (0, vitest_1.expect)(consoleErrorSpy).toHaveBeenCalledWith('Recovery attempt failed:', vitest_1.expect.any(Error));
        });
        (0, vitest_1.test)('should trigger self-healing when enabled', async () => {
            const service = new error_handling_service_1.CardAllErrorHandlingService();
            const error = new mockUnifiedErrorHandler.UnifiedError('Test error', 'SYSTEM', 'CRITICAL', 'system-operation');
            const result = await service.triggerSelfHealing(error);
            (0, vitest_1.expect)(result).toBe(true);
            (0, vitest_1.expect)(mockSelfHealingFramework.getInstance().attemptHealing).toHaveBeenCalledWith(error, vitest_1.expect.objectContaining({
                operation: 'system-operation',
                userId: error.userId,
                environment: 'production'
            }));
        });
        (0, vitest_1.test)('should return false when self-healing is disabled', async () => {
            const service = new error_handling_service_1.CardAllErrorHandlingService({
                enableSelfHealing: false
            });
            const error = new mockUnifiedErrorHandler.UnifiedError('Test error', 'SYSTEM', 'CRITICAL', 'system-operation');
            const result = await service.triggerSelfHealing(error);
            (0, vitest_1.expect)(result).toBe(false);
            (0, vitest_1.expect)(mockSelfHealingFramework.getInstance().attemptHealing).not.toHaveBeenCalled();
        });
        (0, vitest_1.test)('should handle self-healing failures gracefully', async () => {
            const service = new error_handling_service_1.CardAllErrorHandlingService();
            mockSelfHealingFramework.getInstance.mockReturnValue({
                attemptHealing: vitest_1.vi.fn().mockRejectedValue(new Error('Healing failed'))
            });
            const error = new mockUnifiedErrorHandler.UnifiedError('Test error', 'SYSTEM', 'CRITICAL', 'system-operation');
            const consoleErrorSpy = vitest_1.vi.spyOn(console, 'error');
            const result = await service.triggerSelfHealing(error);
            (0, vitest_1.expect)(result).toBe(false);
            (0, vitest_1.expect)(consoleErrorSpy).toHaveBeenCalledWith('Self-healing attempt failed:', vitest_1.expect.any(Error));
        });
    });
    (0, vitest_1.describe)('Error Handling Scenarios', () => {
        (0, vitest_1.test)('should handle network connectivity errors', async () => {
            mockNetworkStateDetector.getCurrentState.mockReturnValue({
                online: false,
                type: 'none',
                strength: 'poor'
            });
            const error = new Error('Failed to fetch');
            const context = { url: 'https://api.example.com/data' };
            const result = await errorHandlingService.handleNetworkError(error, context);
            if (result.error) {
                (0, vitest_1.expect)(result.error.details.networkState.online).toBe(false);
                (0, vitest_1.expect)(result.error.details.networkState.type).toBe('none');
            }
        });
        (0, vitest_1.test)('should handle data validation errors', async () => {
            const error = new Error('Validation failed: required field missing');
            const context = {
                entity: 'user',
                dataType: 'UserProfile',
                operation: 'update',
                field: 'email'
            };
            const result = await errorHandlingService.handleDataError(error, context);
            if (result.error) {
                (0, vitest_1.expect)(result.error.details.dataType).toBe('UserProfile');
                (0, vitest_1.expect)(result.error.details.operation).toBe('update');
            }
        });
        (0, vitest_1.test)('should handle authentication errors', async () => {
            const error = new Error('Unauthorized: invalid token');
            const context = {
                operation: 'auth',
                token: 'invalid-token',
                userId: 'test-user'
            };
            const result = await errorHandlingService.handleSystemError(error, context);
            if (result.error) {
                (0, vitest_1.expect)(result.error.level).toBe('CRITICAL');
                (0, vitest_1.expect)(result.error.retryable).toBe(false);
            }
        });
        (0, vitest_1.test)('should handle timeout errors', async () => {
            const error = new Error('Request timeout after 5000ms');
            const context = {
                operation: 'api',
                timeout: 5000,
                endpoint: '/sync'
            };
            const result = await errorHandlingService.handleNetworkError(error, context);
            (0, vitest_1.expect)(result.handled).toBe(true);
            if (result.error) {
                (0, vitest_1.expect)(result.error.details).toHaveProperty('timeout', 5000);
            }
        });
    });
    (0, vitest_1.describe)('Integration Tests', () => {
        (0, vitest_1.test)('should handle complex error scenarios', async () => {
            // 模拟连续的错误处理
            const errors = [
                { error: new Error('Network error'), type: 'network' },
                { error: new Error('Data error'), type: 'data' },
                { error: new Error('System error'), type: 'system' }
            ];
            const results = await Promise.all(errors.map(({ error, type }) => {
                switch (type) {
                    case 'network':
                        return errorHandlingService.handleNetworkError(error);
                    case 'data':
                        return errorHandlingService.handleDataError(error);
                    case 'system':
                        return errorHandlingService.handleSystemError(error);
                    default:
                        return errorHandlingService.handleSyncError(error);
                }
            }));
            (0, vitest_1.expect)(results).toHaveLength(3);
            results.forEach(result => {
                (0, vitest_1.expect)(result.handled).toBe(true);
            });
        });
        (0, vitest_1.test)('should maintain error statistics across multiple operations', async () => {
            const service = new error_handling_service_1.CardAllErrorHandlingService();
            // 处理多个错误
            for (let i = 0; i < 10; i++) {
                await service.handleNetworkError(new Error(`Network error ${i}`));
            }
            const stats = service.getErrorStatistics();
            const healthStatus = service.getHealthStatus();
            (0, vitest_1.expect)(stats).toBeDefined();
            (0, vitest_1.expect)(healthStatus.status).toBeDefined();
            (0, vitest_1.expect)(healthStatus.score).toBeGreaterThanOrEqual(0);
        });
        (0, vitest_1.test)('should handle configuration changes dynamically', async () => {
            const service = new error_handling_service_1.CardAllErrorHandlingService();
            // 初始配置
            let config = service.getConfig();
            (0, vitest_1.expect)(config.enableMonitoring).toBe(true);
            // 禁用监控
            service.updateConfig({ enableMonitoring: false });
            config = service.getConfig();
            (0, vitest_1.expect)(config.enableMonitoring).toBe(false);
            // 验证统计功能被禁用
            const stats = service.getErrorStatistics();
            (0, vitest_1.expect)(stats).toBeNull();
            // 重新启用监控
            service.updateConfig({ enableMonitoring: true });
            config = service.getConfig();
            (0, vitest_1.expect)(config.enableMonitoring).toBe(true);
        });
    });
    (0, vitest_1.describe)('Performance Tests', () => {
        (0, vitest_1.test)('should handle high error rates efficiently', async () => {
            const service = new error_handling_service_1.CardAllErrorHandlingService();
            const startTime = performance.now();
            // 模拟高错误率
            const errorPromises = Array.from({ length: 100 }, (_, i) => service.handleNetworkError(new Error(`Error ${i}`)));
            await Promise.all(errorPromises);
            const endTime = performance.now();
            const duration = endTime - startTime;
            (0, vitest_1.expect)(duration).toBeLessThan(1000); // 应该在1秒内处理100个错误
        });
        (0, vitest_1.test)('should handle concurrent error processing', async () => {
            const service = new error_handling_service_1.CardAllErrorHandlingService();
            const concurrentOperations = [
                service.handleSyncError(new Error('Sync error')),
                service.handleNetworkError(new Error('Network error')),
                service.handleDataError(new Error('Data error')),
                service.handleSystemError(new Error('System error')),
                service.getErrorStatistics(),
                service.getHealthStatus()
            ];
            const results = await Promise.all(concurrentOperations);
            (0, vitest_1.expect)(results).toHaveLength(6);
            results.forEach(result => {
                (0, vitest_1.expect)(result).toBeDefined();
            });
        });
        (0, vitest_1.test)('should manage memory usage during error storms', async () => {
            const service = new error_handling_service_1.CardAllErrorHandlingService();
            const initialMemory = process.memoryUsage().heapUsed;
            // 模拟错误风暴
            for (let i = 0; i < 1000; i++) {
                await service.handleNetworkError(new Error(`Storm error ${i}`));
            }
            const finalMemory = process.memoryUsage().heapUsed;
            const memoryIncrease = finalMemory - initialMemory;
            // 内存增长应该在合理范围内
            (0, vitest_1.expect)(memoryIncrease).toBeLessThan(50 * 1024 * 1024); // 小于50MB
        });
    });
    (0, vitest_1.describe)('Edge Cases', () => {
        (0, vitest_1.test)('should handle null or undefined errors', async () => {
            const service = new error_handling_service_1.CardAllErrorHandlingService();
            const result = await service.handleSyncError(null);
            (0, vitest_1.expect)(result).toBeDefined();
        });
        (0, vitest_1.test)('should handle object errors', async () => {
            const service = new error_handling_service_1.CardAllErrorHandlingService();
            const error = { code: 500, message: 'Internal Server Error' };
            const result = await service.handleSystemError(error);
            (0, vitest_1.expect)(result).toBeDefined();
        });
        (0, vitest_1.test)('should handle circular reference errors', async () => {
            const service = new error_handling_service_1.CardAllErrorHandlingService();
            const error = new Error('Circular reference');
            error.self = error;
            const result = await service.handleDataError(error);
            (0, vitest_1.expect)(result).toBeDefined();
        });
        (0, vitest_1.test)('should handle empty error objects', async () => {
            const service = new error_handling_service_1.CardAllErrorHandlingService();
            const error = {};
            const result = await service.handleSyncError(error);
            (0, vitest_1.expect)(result).toBeDefined();
        });
        (0, vitest_1.test)('should handle very large error contexts', async () => {
            const service = new error_handling_service_1.CardAllErrorHandlingService();
            const largeContext = {
                data: 'x'.repeat(10000), // 10KB of data
                nested: {
                    level1: {
                        level2: {
                            level3: {
                                deep: 'value'
                            }
                        }
                    }
                }
            };
            const result = await service.handleDataError(new Error('Large context'), largeContext);
            (0, vitest_1.expect)(result).toBeDefined();
        });
    });
    (0, vitest_1.describe)('Error Boundaries', () => {
        (0, vitest_1.test)('should handle service initialization failures', () => {
            mockErrorMonitoringService.getInstance.mockImplementation(() => {
                throw new Error('Service initialization failed');
            });
            (0, vitest_1.expect)(() => {
                new error_handling_service_1.CardAllErrorHandlingService();
            }).not.toThrow(); // 应该优雅地处理初始化失败
        });
        (0, vitest_1.test)('should handle monitoring service failures', () => {
            const service = new error_handling_service_1.CardAllErrorHandlingService();
            mockErrorMonitoringService.getInstance.mockReturnValue({
                getMetrics: vitest_1.vi.fn().mockImplementation(() => {
                    throw new Error('Metrics failed');
                })
            });
            const stats = service.getErrorStatistics();
            // 应该返回null或默认值而不是抛出错误
            (0, vitest_1.expect)(stats).toBeDefined();
        });
        (0, vitest_1.test)('should handle network state detection failures', async () => {
            mockNetworkStateDetector.getCurrentState.mockImplementation(() => {
                throw new Error('Network detection failed');
            });
            const service = new error_handling_service_1.CardAllErrorHandlingService();
            const result = await service.handleNetworkError(new Error('Network error'));
            (0, vitest_1.expect)(result).toBeDefined();
        });
    });
});
(0, vitest_1.describe)('Convenience Functions', () => {
    (0, vitest_1.test)('handleSyncError should call service method', async () => {
        const service = new error_handling_service_1.CardAllErrorHandlingService();
        const spy = vitest_1.vi.spyOn(service, 'handleSyncError');
        await service.handleSyncError(new Error('Test'));
        (0, vitest_1.expect)(spy).toHaveBeenCalled();
    });
    (0, vitest_1.test)('handleNetworkError should call service method', async () => {
        const service = new error_handling_service_1.CardAllErrorHandlingService();
        const spy = vitest_1.vi.spyOn(service, 'handleNetworkError');
        await service.handleNetworkError(new Error('Test'));
        (0, vitest_1.expect)(spy).toHaveBeenCalled();
    });
    (0, vitest_1.test)('handleDataError should call service method', async () => {
        const service = new error_handling_service_1.CardAllErrorHandlingService();
        const spy = vitest_1.vi.spyOn(service, 'handleDataError');
        await service.handleDataError(new Error('Test'));
        (0, vitest_1.expect)(spy).toHaveBeenCalled();
    });
    (0, vitest_1.test)('handleSystemError should call service method', async () => {
        const service = new error_handling_service_1.CardAllErrorHandlingService();
        const spy = vitest_1.vi.spyOn(service, 'handleSystemError');
        await service.handleSystemError(new Error('Test'));
        (0, vitest_1.expect)(spy).toHaveBeenCalled();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
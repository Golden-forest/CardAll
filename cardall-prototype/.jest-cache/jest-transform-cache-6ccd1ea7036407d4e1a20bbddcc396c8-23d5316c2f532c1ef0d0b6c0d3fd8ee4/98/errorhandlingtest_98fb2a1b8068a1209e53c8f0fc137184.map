{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\services\\error-handling.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\services\\error-handling.test.ts"],"sourcesContent":["/**\n * 错误处理服务单元测试\n * 测试错误处理、恢复机制、监控和自愈功能\n */\n\nimport { CardAllErrorHandlingService, ErrorHandlingService } from '@/services/error-handling/error-handling-service'\nimport {\n  ErrorHandlingConfig,\n  ErrorHandlingResult\n} from '@/services/error-handling/error-handling-service'\nimport { errorTestData } from '../fixtures/test-data'\nimport {\n  mockPromiseResolve,\n  mockPromiseReject,\n  cleanupAllMocks\n} from '../utils/test-helpers'\nimport { vi, beforeEach, afterEach, describe, test, expect } from 'vitest'\n\n// 模拟依赖模块\nconst mockUnifiedErrorHandler = {\n  unifiedErrorHandler: {},\n  handleError: vi.fn(),\n  createErrorContext: vi.fn(),\n  UnifiedError: class {\n    constructor(\n      public message: string,\n      public category: string,\n      public level: string,\n      public operation: string,\n      public retryable: boolean = true\n    ) {}\n  }\n}\n\nconst mockErrorMonitoringService = {\n  getInstance: vi.fn().mockReturnValue({\n    getMetrics: vi.fn().mockReturnValue({\n      metrics: {\n        errorRate: 0.03,\n        recoveryRate: 0.95,\n        errorCount: 15,\n        recoveryCount: 14\n      }\n    }),\n    getRecentErrors: vi.fn().mockReturnValue([])\n  })\n}\n\nconst mockRecoveryStrategyManager = {\n  getInstance: vi.fn().mockReturnValue({\n    attemptRecovery: vi.fn().mockResolvedValue({ success: true })\n  })\n}\n\nconst mockSelfHealingFramework = {\n  getInstance: vi.fn().mockReturnValue({\n    attemptHealing: vi.fn().mockResolvedValue(true)\n  })\n}\n\nconst mockNetworkStateDetector = {\n  getCurrentState: vi.fn().mockReturnValue({\n    online: true,\n    type: 'wifi',\n    strength: 'excellent'\n  })\n}\n\nvi.mock('@/services/error-handling/unified-error-handler', () => mockUnifiedErrorHandler)\nvi.mock('@/services/error-handling/error-monitoring-service', () => mockErrorMonitoringService)\nvi.mock('@/services/error-handling/recovery-strategy-manager', () => mockRecoveryStrategyManager)\nvi.mock('@/services/error-handling/self-healing-framework', () => mockSelfHealingFramework)\nvi.mock('@/services/network-state-detector', () => mockNetworkStateDetector)\n\ndescribe('ErrorHandlingService', () => {\n  let errorHandlingService: ErrorHandlingService\n\n  beforeEach(() => {\n    cleanupAllMocks()\n\n    // 重置所有mock\n    vi.clearAllMocks()\n\n    // 设置默认mock返回值\n    mockUnifiedErrorHandler.handleError.mockResolvedValue({\n      handled: true,\n      error: new mockUnifiedErrorHandler.UnifiedError(\n        'Test error',\n        'NETWORK',\n        'ERROR',\n        'test-operation'\n      )\n    })\n\n    mockUnifiedErrorHandler.createErrorContext.mockReturnValue({\n      operation: 'test',\n      userId: 'test-user',\n      environment: 'test'\n    })\n\n    // 创建新的服务实例\n    errorHandlingService = new CardAllErrorHandlingService()\n  })\n\n  afterEach(() => {\n    cleanupAllMocks()\n  })\n\n  describe('Constructor and Configuration', () => {\n    test('should initialize with default config', () => {\n      const service = new CardAllErrorHandlingService()\n      const config = service.getConfig()\n\n      expect(config.enableMonitoring).toBe(true)\n      expect(config.enableRecovery).toBe(true)\n      expect(config.enableSelfHealing).toBe(true)\n      expect(config.monitoring.bufferSize).toBe(1000)\n      expect(config.recovery.maxRetries).toBe(3)\n      expect(config.selfHealing.enabled).toBe(true)\n      expect(config.alerts.enabled).toBe(true)\n    })\n\n    test('should merge custom config with defaults', () => {\n      const customConfig: Partial<ErrorHandlingConfig> = {\n        enableMonitoring: false,\n        enableRecovery: false,\n        monitoring: {\n          bufferSize: 500,\n          historySize: 100,\n          sampleRate: 0.5\n        },\n        recovery: {\n          maxRetries: 5,\n          baseDelay: 2000,\n          maxDelay: 60000\n        }\n      }\n\n      const service = new CardAllErrorHandlingService(customConfig)\n      const config = service.getConfig()\n\n      expect(config.enableMonitoring).toBe(false)\n      expect(config.enableRecovery).toBe(false)\n      expect(config.enableSelfHealing).toBe(true) // 保持默认值\n      expect(config.monitoring.bufferSize).toBe(500)\n      expect(config.monitoring.historySize).toBe(100)\n      expect(config.monitoring.sampleRate).toBe(0.5)\n      expect(config.recovery.maxRetries).toBe(5)\n      expect(config.recovery.baseDelay).toBe(2000)\n    })\n\n    test('should initialize dependent services correctly', () => {\n      new CardAllErrorHandlingService()\n\n      expect(mockErrorMonitoringService.getInstance).toHaveBeenCalled()\n      expect(mockRecoveryStrategyManager.getInstance).toHaveBeenCalled()\n      expect(mockSelfHealingFramework.getInstance).toHaveBeenCalled()\n    })\n\n    test('should create singleton instance', () => {\n      const instance1 = CardAllErrorHandlingService.getInstance()\n      const instance2 = CardAllErrorHandlingService.getInstance()\n\n      expect(instance1).toBe(instance2)\n    })\n  })\n\n  describe('Error Handling', () => {\n    test('should handle sync errors correctly', async () => {\n      const error = new Error('Sync failed')\n      const context = { entityType: 'card', userId: 'test-user' }\n\n      const result = await errorHandlingService.handleSyncError(error, context)\n\n      expect(mockUnifiedErrorHandler.handleError).toHaveBeenCalledWith(\n        error,\n        expect.objectContaining({\n          operation: 'sync',\n          entityType: 'card',\n          userId: 'test-user',\n          environment: 'test'\n        })\n      )\n\n      expect(result.handled).toBe(true)\n      if (result.error) {\n        expect(result.error.operation).toBe('sync')\n        expect(result.error.entity).toBe('card')\n      }\n    })\n\n    test('should handle network errors with network state', async () => {\n      const error = new Error('Network error')\n      const context = { url: 'https://api.example.com', method: 'GET' }\n\n      const result = await errorHandlingService.handleNetworkError(error, context)\n\n      expect(mockUnifiedErrorHandler.handleError).toHaveBeenCalledWith(\n        error,\n        expect.objectContaining({\n          operation: 'network',\n          url: 'https://api.example.com',\n          method: 'GET'\n        })\n      )\n\n      expect(mockNetworkStateDetector.getCurrentState).toHaveBeenCalled()\n\n      if (result.error) {\n        expect(result.error.details).toHaveProperty('networkState')\n        expect(result.error.details).toHaveProperty('timestamp')\n      }\n    })\n\n    test('should handle data errors with entity information', async () => {\n      const error = new Error('Data validation failed')\n      const context = {\n        entity: 'card',\n        dataType: 'CardContent',\n        operation: 'create'\n      }\n\n      const result = await errorHandlingService.handleDataError(error, context)\n\n      expect(mockUnifiedErrorHandler.handleError).toHaveBeenCalledWith(\n        error,\n        expect.objectContaining({\n          operation: 'data',\n          entity: 'card',\n          dataType: 'CardContent',\n          operation: 'create'\n        })\n      )\n\n      if (result.error) {\n        expect(result.error.entity).toBe('card')\n        expect(result.error.details).toHaveProperty('dataType', 'CardContent')\n        expect(result.error.details).toHaveProperty('operation', 'create')\n      }\n    })\n\n    test('should handle system errors as critical', async () => {\n      const error = new Error('System crash')\n      const context = { component: 'Database', action: 'query' }\n\n      const result = await errorHandlingService.handleSystemError(error, context)\n\n      expect(mockUnifiedErrorHandler.handleError).toHaveBeenCalledWith(\n        error,\n        expect.objectContaining({\n          operation: 'system',\n          component: 'Database',\n          action: 'query'\n        })\n      )\n\n      if (result.error) {\n        expect(result.error.level).toBe('CRITICAL')\n        expect(result.error.retryable).toBe(false)\n      }\n    })\n\n    test('should handle errors without context', async () => {\n      const error = new Error('Unknown error')\n\n      const result = await errorHandlingService.handleSyncError(error)\n\n      expect(mockUnifiedErrorHandler.handleError).toHaveBeenCalledWith(\n        error,\n        expect.objectContaining({\n          operation: 'sync',\n          environment: 'development'\n        })\n      )\n\n      expect(result.handled).toBe(true)\n    })\n\n    test('should handle error handling failures', async () => {\n      const error = new Error('Critical error')\n      mockUnifiedErrorHandler.handleError.mockRejectedValue(new Error('Handler failed'))\n\n      await expect(errorHandlingService.handleSyncError(error))\n        .rejects.toThrow('Handler failed')\n    })\n  })\n\n  describe('Monitoring and Statistics', () => {\n    test('should return error statistics when monitoring is enabled', () => {\n      const service = new CardAllErrorHandlingService()\n\n      const stats = service.getErrorStatistics()\n\n      expect(stats).toEqual({\n        metrics: {\n          errorRate: 0.03,\n          recoveryRate: 0.95,\n          errorCount: 15,\n          recoveryCount: 14\n        }\n      })\n    })\n\n    test('should return null when monitoring is disabled', () => {\n      const service = new CardAllErrorHandlingService({\n        enableMonitoring: false\n      })\n\n      const stats = service.getErrorStatistics()\n\n      expect(stats).toBeNull()\n    })\n\n    test('should calculate health status correctly', () => {\n      const service = new CardAllErrorHandlingService()\n\n      // 健康状态\n      mockErrorMonitoringService.getInstance.mockReturnValue({\n        getMetrics: vi.fn().mockReturnValue({\n          metrics: {\n            errorRate: 0.01,\n            recoveryRate: 0.98,\n            errorCount: 5,\n            recoveryCount: 5\n          }\n        })\n      })\n\n      const healthStatus = service.getHealthStatus()\n\n      expect(healthStatus.status).toBe('healthy')\n      expect(healthStatus.score).toBeGreaterThanOrEqual(90)\n      expect(healthStatus.timestamp).toBeInstanceOf(Date)\n      expect(healthStatus.recommendations).toBeInstanceOf(Array)\n    })\n\n    test('should handle degraded health status', () => {\n      const service = new CardAllErrorHandlingService()\n\n      mockErrorMonitoringService.getInstance.mockReturnValue({\n        getMetrics: vi.fn().mockReturnValue({\n          metrics: {\n            errorRate: 0.08,\n            recoveryRate: 0.85,\n            errorCount: 20,\n            recoveryCount: 17\n          }\n        })\n      })\n\n      const healthStatus = service.getHealthStatus()\n\n      expect(healthStatus.status).toBe('degraded')\n      expect(healthStatus.score).toBeLessThan(90)\n      expect(healthStatus.score).toBeGreaterThanOrEqual(70)\n    })\n\n    test('should handle unhealthy status', () => {\n      const service = new CardAllErrorHandlingService()\n\n      mockErrorMonitoringService.getInstance.mockReturnValue({\n        getMetrics: vi.fn().mockReturnValue({\n          metrics: {\n            errorRate: 0.15,\n            recoveryRate: 0.70,\n            errorCount: 50,\n            recoveryCount: 35\n          }\n        })\n      })\n\n      const healthStatus = service.getHealthStatus()\n\n      expect(healthStatus.status).toBe('unhealthy')\n      expect(healthStatus.score).toBeLessThan(70)\n      expect(healthStatus.score).toBeGreaterThanOrEqual(0)\n    })\n\n    test('should generate appropriate recommendations', () => {\n      const service = new CardAllErrorHandlingService()\n\n      mockErrorMonitoringService.getInstance.mockReturnValue({\n        getMetrics: vi.fn().mockReturnValue({\n          metrics: {\n            errorRate: 0.12,\n            recoveryRate: 0.75,\n            errorCount: 100,\n            recoveryCount: 75\n          }\n        })\n      })\n\n      const healthStatus = service.getHealthStatus()\n\n      expect(healthStatus.recommendations.length).toBeGreaterThan(0)\n      expect(healthStatus.recommendations).toEqual(\n        expect.arrayContaining([\n          expect.stringContaining('系统健康状况不佳'),\n          expect.stringContaining('错误率较高'),\n          expect.stringContaining('恢复率偏低')\n        ])\n      )\n    })\n\n    test('should return recent errors with limit', () => {\n      const service = new CardAllErrorHandlingService()\n\n      const recentErrors = service.getRecentErrors(10)\n\n      expect(recentErrors).toEqual([])\n      expect(mockErrorMonitoringService.getInstance().getRecentErrors).toHaveBeenCalledWith(10)\n    })\n\n    test('should return empty array when monitoring is disabled', () => {\n      const service = new CardAllErrorHandlingService({\n        enableMonitoring: false\n      })\n\n      const recentErrors = service.getRecentErrors()\n\n      expect(recentErrors).toEqual([])\n      expect(mockErrorMonitoringService.getInstance().getRecentErrors).not.toHaveBeenCalled()\n    })\n  })\n\n  describe('Configuration Management', () => {\n    test('should update configuration correctly', () => {\n      const service = new CardAllErrorHandlingService()\n\n      const newConfig: Partial<ErrorHandlingConfig> = {\n        enableMonitoring: false,\n        enableRecovery: false,\n        recovery: {\n          maxRetries: 10,\n          baseDelay: 5000\n        }\n      }\n\n      service.updateConfig(newConfig)\n\n      const config = service.getConfig()\n      expect(config.enableMonitoring).toBe(false)\n      expect(config.enableRecovery).toBe(false)\n      expect(config.recovery.maxRetries).toBe(10)\n      expect(config.recovery.baseDelay).toBe(5000)\n    })\n\n    test('should reconfigure services when config is updated', () => {\n      const service = new CardAllErrorHandlingService()\n\n      service.updateConfig({\n        enableMonitoring: false,\n        enableSelfHealing: false\n      })\n\n      // 验证服务被重新初始化\n      expect(mockErrorMonitoringService.getInstance).toHaveBeenCalledTimes(2)\n      expect(mockSelfHealingFramework.getInstance).toHaveBeenCalledTimes(2)\n    })\n\n    test('should return a copy of config to prevent mutation', () => {\n      const service = new CardAllErrorHandlingService()\n\n      const config = service.getConfig()\n      config.enableMonitoring = false\n\n      const originalConfig = service.getConfig()\n      expect(originalConfig.enableMonitoring).toBe(true)\n    })\n  })\n\n  describe('Recovery and Self-Healing', () => {\n    test('should attempt recovery when enabled', async () => {\n      const service = new CardAllErrorHandlingService()\n\n      const error = new mockUnifiedErrorHandler.UnifiedError(\n        'Test error',\n        'NETWORK',\n        'ERROR',\n        'sync-operation'\n      )\n\n      const result = await service.attemptRecovery(error)\n\n      expect(result).toBe(true)\n      expect(mockRecoveryStrategyManager.getInstance().attemptRecovery).toHaveBeenCalledWith(\n        error,\n        expect.objectContaining({\n          operation: 'sync-operation',\n          userId: error.userId,\n          environment: 'production'\n        })\n      )\n    })\n\n    test('should return false when recovery is disabled', async () => {\n      const service = new CardAllErrorHandlingService({\n        enableRecovery: false\n      })\n\n      const error = new mockUnifiedErrorHandler.UnifiedError(\n        'Test error',\n        'NETWORK',\n        'ERROR',\n        'sync-operation'\n      )\n\n      const result = await service.attemptRecovery(error)\n\n      expect(result).toBe(false)\n      expect(mockRecoveryStrategyManager.getInstance().attemptRecovery).not.toHaveBeenCalled()\n    })\n\n    test('should handle recovery failures gracefully', async () => {\n      const service = new CardAllErrorHandlingService()\n\n      mockRecoveryStrategyManager.getInstance.mockReturnValue({\n        attemptRecovery: vi.fn().mockRejectedValue(new Error('Recovery failed'))\n      })\n\n      const error = new mockUnifiedErrorHandler.UnifiedError(\n        'Test error',\n        'NETWORK',\n        'ERROR',\n        'sync-operation'\n      )\n\n      const consoleErrorSpy = vi.spyOn(console, 'error')\n      const result = await service.attemptRecovery(error)\n\n      expect(result).toBe(false)\n      expect(consoleErrorSpy).toHaveBeenCalledWith('Recovery attempt failed:', expect.any(Error))\n    })\n\n    test('should trigger self-healing when enabled', async () => {\n      const service = new CardAllErrorHandlingService()\n\n      const error = new mockUnifiedErrorHandler.UnifiedError(\n        'Test error',\n        'SYSTEM',\n        'CRITICAL',\n        'system-operation'\n      )\n\n      const result = await service.triggerSelfHealing(error)\n\n      expect(result).toBe(true)\n      expect(mockSelfHealingFramework.getInstance().attemptHealing).toHaveBeenCalledWith(\n        error,\n        expect.objectContaining({\n          operation: 'system-operation',\n          userId: error.userId,\n          environment: 'production'\n        })\n      )\n    })\n\n    test('should return false when self-healing is disabled', async () => {\n      const service = new CardAllErrorHandlingService({\n        enableSelfHealing: false\n      })\n\n      const error = new mockUnifiedErrorHandler.UnifiedError(\n        'Test error',\n        'SYSTEM',\n        'CRITICAL',\n        'system-operation'\n      )\n\n      const result = await service.triggerSelfHealing(error)\n\n      expect(result).toBe(false)\n      expect(mockSelfHealingFramework.getInstance().attemptHealing).not.toHaveBeenCalled()\n    })\n\n    test('should handle self-healing failures gracefully', async () => {\n      const service = new CardAllErrorHandlingService()\n\n      mockSelfHealingFramework.getInstance.mockReturnValue({\n        attemptHealing: vi.fn().mockRejectedValue(new Error('Healing failed'))\n      })\n\n      const error = new mockUnifiedErrorHandler.UnifiedError(\n        'Test error',\n        'SYSTEM',\n        'CRITICAL',\n        'system-operation'\n      )\n\n      const consoleErrorSpy = vi.spyOn(console, 'error')\n      const result = await service.triggerSelfHealing(error)\n\n      expect(result).toBe(false)\n      expect(consoleErrorSpy).toHaveBeenCalledWith('Self-healing attempt failed:', expect.any(Error))\n    })\n  })\n\n  describe('Error Handling Scenarios', () => {\n    test('should handle network connectivity errors', async () => {\n      mockNetworkStateDetector.getCurrentState.mockReturnValue({\n        online: false,\n        type: 'none',\n        strength: 'poor'\n      })\n\n      const error = new Error('Failed to fetch')\n      const context = { url: 'https://api.example.com/data' }\n\n      const result = await errorHandlingService.handleNetworkError(error, context)\n\n      if (result.error) {\n        expect(result.error.details.networkState.online).toBe(false)\n        expect(result.error.details.networkState.type).toBe('none')\n      }\n    })\n\n    test('should handle data validation errors', async () => {\n      const error = new Error('Validation failed: required field missing')\n      const context = {\n        entity: 'user',\n        dataType: 'UserProfile',\n        operation: 'update',\n        field: 'email'\n      }\n\n      const result = await errorHandlingService.handleDataError(error, context)\n\n      if (result.error) {\n        expect(result.error.details.dataType).toBe('UserProfile')\n        expect(result.error.details.operation).toBe('update')\n      }\n    })\n\n    test('should handle authentication errors', async () => {\n      const error = new Error('Unauthorized: invalid token')\n      const context = {\n        operation: 'auth',\n        token: 'invalid-token',\n        userId: 'test-user'\n      }\n\n      const result = await errorHandlingService.handleSystemError(error, context)\n\n      if (result.error) {\n        expect(result.error.level).toBe('CRITICAL')\n        expect(result.error.retryable).toBe(false)\n      }\n    })\n\n    test('should handle timeout errors', async () => {\n      const error = new Error('Request timeout after 5000ms')\n      const context = {\n        operation: 'api',\n        timeout: 5000,\n        endpoint: '/sync'\n      }\n\n      const result = await errorHandlingService.handleNetworkError(error, context)\n\n      expect(result.handled).toBe(true)\n      if (result.error) {\n        expect(result.error.details).toHaveProperty('timeout', 5000)\n      }\n    })\n  })\n\n  describe('Integration Tests', () => {\n    test('should handle complex error scenarios', async () => {\n      // 模拟连续的错误处理\n      const errors = [\n        { error: new Error('Network error'), type: 'network' },\n        { error: new Error('Data error'), type: 'data' },\n        { error: new Error('System error'), type: 'system' }\n      ]\n\n      const results = await Promise.all(\n        errors.map(({ error, type }) => {\n          switch (type) {\n            case 'network':\n              return errorHandlingService.handleNetworkError(error)\n            case 'data':\n              return errorHandlingService.handleDataError(error)\n            case 'system':\n              return errorHandlingService.handleSystemError(error)\n            default:\n              return errorHandlingService.handleSyncError(error)\n          }\n        })\n      )\n\n      expect(results).toHaveLength(3)\n      results.forEach(result => {\n        expect(result.handled).toBe(true)\n      })\n    })\n\n    test('should maintain error statistics across multiple operations', async () => {\n      const service = new CardAllErrorHandlingService()\n\n      // 处理多个错误\n      for (let i = 0; i < 10; i++) {\n        await service.handleNetworkError(new Error(`Network error ${i}`))\n      }\n\n      const stats = service.getErrorStatistics()\n      const healthStatus = service.getHealthStatus()\n\n      expect(stats).toBeDefined()\n      expect(healthStatus.status).toBeDefined()\n      expect(healthStatus.score).toBeGreaterThanOrEqual(0)\n    })\n\n    test('should handle configuration changes dynamically', async () => {\n      const service = new CardAllErrorHandlingService()\n\n      // 初始配置\n      let config = service.getConfig()\n      expect(config.enableMonitoring).toBe(true)\n\n      // 禁用监控\n      service.updateConfig({ enableMonitoring: false })\n      config = service.getConfig()\n      expect(config.enableMonitoring).toBe(false)\n\n      // 验证统计功能被禁用\n      const stats = service.getErrorStatistics()\n      expect(stats).toBeNull()\n\n      // 重新启用监控\n      service.updateConfig({ enableMonitoring: true })\n      config = service.getConfig()\n      expect(config.enableMonitoring).toBe(true)\n    })\n  })\n\n  describe('Performance Tests', () => {\n    test('should handle high error rates efficiently', async () => {\n      const service = new CardAllErrorHandlingService()\n\n      const startTime = performance.now()\n\n      // 模拟高错误率\n      const errorPromises = Array.from({ length: 100 }, (_, i) =>\n        service.handleNetworkError(new Error(`Error ${i}`))\n      )\n\n      await Promise.all(errorPromises)\n\n      const endTime = performance.now()\n      const duration = endTime - startTime\n\n      expect(duration).toBeLessThan(1000) // 应该在1秒内处理100个错误\n    })\n\n    test('should handle concurrent error processing', async () => {\n      const service = new CardAllErrorHandlingService()\n\n      const concurrentOperations = [\n        service.handleSyncError(new Error('Sync error')),\n        service.handleNetworkError(new Error('Network error')),\n        service.handleDataError(new Error('Data error')),\n        service.handleSystemError(new Error('System error')),\n        service.getErrorStatistics(),\n        service.getHealthStatus()\n      ]\n\n      const results = await Promise.all(concurrentOperations)\n\n      expect(results).toHaveLength(6)\n      results.forEach(result => {\n        expect(result).toBeDefined()\n      })\n    })\n\n    test('should manage memory usage during error storms', async () => {\n      const service = new CardAllErrorHandlingService()\n\n      const initialMemory = process.memoryUsage().heapUsed\n\n      // 模拟错误风暴\n      for (let i = 0; i < 1000; i++) {\n        await service.handleNetworkError(new Error(`Storm error ${i}`))\n      }\n\n      const finalMemory = process.memoryUsage().heapUsed\n      const memoryIncrease = finalMemory - initialMemory\n\n      // 内存增长应该在合理范围内\n      expect(memoryIncrease).toBeLessThan(50 * 1024 * 1024) // 小于50MB\n    })\n  })\n\n  describe('Edge Cases', () => {\n    test('should handle null or undefined errors', async () => {\n      const service = new CardAllErrorHandlingService()\n\n      const result = await service.handleSyncError(null as any)\n\n      expect(result).toBeDefined()\n    })\n\n    test('should handle object errors', async () => {\n      const service = new CardAllErrorHandlingService()\n\n      const error = { code: 500, message: 'Internal Server Error' }\n      const result = await service.handleSystemError(error)\n\n      expect(result).toBeDefined()\n    })\n\n    test('should handle circular reference errors', async () => {\n      const service = new CardAllErrorHandlingService()\n\n      const error: any = new Error('Circular reference')\n      error.self = error\n\n      const result = await service.handleDataError(error)\n\n      expect(result).toBeDefined()\n    })\n\n    test('should handle empty error objects', async () => {\n      const service = new CardAllErrorHandlingService()\n\n      const error = {}\n      const result = await service.handleSyncError(error)\n\n      expect(result).toBeDefined()\n    })\n\n    test('should handle very large error contexts', async () => {\n      const service = new CardAllErrorHandlingService()\n\n      const largeContext = {\n        data: 'x'.repeat(10000), // 10KB of data\n        nested: {\n          level1: {\n            level2: {\n              level3: {\n                deep: 'value'\n              }\n            }\n          }\n        }\n      }\n\n      const result = await service.handleDataError(new Error('Large context'), largeContext)\n\n      expect(result).toBeDefined()\n    })\n  })\n\n  describe('Error Boundaries', () => {\n    test('should handle service initialization failures', () => {\n      mockErrorMonitoringService.getInstance.mockImplementation(() => {\n        throw new Error('Service initialization failed')\n      })\n\n      expect(() => {\n        new CardAllErrorHandlingService()\n      }).not.toThrow() // 应该优雅地处理初始化失败\n    })\n\n    test('should handle monitoring service failures', () => {\n      const service = new CardAllErrorHandlingService()\n\n      mockErrorMonitoringService.getInstance.mockReturnValue({\n        getMetrics: vi.fn().mockImplementation(() => {\n          throw new Error('Metrics failed')\n        })\n      })\n\n      const stats = service.getErrorStatistics()\n\n      // 应该返回null或默认值而不是抛出错误\n      expect(stats).toBeDefined()\n    })\n\n    test('should handle network state detection failures', async () => {\n      mockNetworkStateDetector.getCurrentState.mockImplementation(() => {\n        throw new Error('Network detection failed')\n      })\n\n      const service = new CardAllErrorHandlingService()\n\n      const result = await service.handleNetworkError(new Error('Network error'))\n\n      expect(result).toBeDefined()\n    })\n  })\n})\n\ndescribe('Convenience Functions', () => {\n  test('handleSyncError should call service method', async () => {\n    const service = new CardAllErrorHandlingService()\n    const spy = vi.spyOn(service, 'handleSyncError')\n\n    await service.handleSyncError(new Error('Test'))\n\n    expect(spy).toHaveBeenCalled()\n  })\n\n  test('handleNetworkError should call service method', async () => {\n    const service = new CardAllErrorHandlingService()\n    const spy = vi.spyOn(service, 'handleNetworkError')\n\n    await service.handleNetworkError(new Error('Test'))\n\n    expect(spy).toHaveBeenCalled()\n  })\n\n  test('handleDataError should call service method', async () => {\n    const service = new CardAllErrorHandlingService()\n    const spy = vi.spyOn(service, 'handleDataError')\n\n    await service.handleDataError(new Error('Test'))\n\n    expect(spy).toHaveBeenCalled()\n  })\n\n  test('handleSystemError should call service method', async () => {\n    const service = new CardAllErrorHandlingService()\n    const spy = vi.spyOn(service, 'handleSystemError')\n\n    await service.handleSystemError(new Error('Test'))\n\n    expect(spy).toHaveBeenCalled()\n  })\n})"],"version":3}
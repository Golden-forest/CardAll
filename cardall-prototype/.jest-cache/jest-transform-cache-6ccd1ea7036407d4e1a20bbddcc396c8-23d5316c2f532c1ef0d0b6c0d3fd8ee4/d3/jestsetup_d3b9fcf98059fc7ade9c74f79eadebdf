236f6d21652f361c916ff4e7e95bbe2b
"use strict";

// Jest ÂÖ®Â±ÄÊµãËØïËÆæÁΩÆ

// Ê®°Êãü import.meta.env
Object.defineProperty(global, 'import', {
  value: {
    meta: {
      env: {
        VITE_SUPABASE_URL: 'https://test-project.supabase.co',
        VITE_SUPABASE_ANON_KEY: 'test-anon-key',
        NODE_ENV: 'test'
      }
    }
  },
  writable: true
});

// Ê®°Êãü localStorage
const localStorageMock = (() => {
  let store = {};
  return {
    getItem(key) {
      return store[key] || null;
    },
    setItem(key, value) {
      store[key] = String(value);
    },
    removeItem(key) {
      delete store[key];
    },
    clear() {
      store = {};
    },
    length: 0,
    key(index) {
      return Object.keys(store)[index] || null;
    }
  };
})();
Object.defineProperty(window, 'localStorage', {
  value: localStorageMock
});

// ‰ΩøÁî® fake-indexeddb Ê®°Êãü IndexedDB
const FIDB = require('fake-indexeddb');

// ËÆæÁΩÆÂÖ®Â±Ä IndexedDB
global.indexedDB = FIDB.indexedDB;
global.IDBKeyRange = FIDB.IDBKeyRange;
global.IDBTransaction = FIDB.IDBTransaction;
global.IDBDatabase = FIDB.IDBDatabase;
global.IDBObjectStore = FIDB.IDBObjectStore;
global.IDBCursor = FIDB.IDBCursor;
global.IDBCursorWithValue = FIDB.IDBCursorWithValue;
global.IDBOpenDBRequest = FIDB.IDBOpenDBRequest;
global.IDBRequest = FIDB.IDBRequest;
global.IDBFactory = FIDB.IDBFactory;
Object.defineProperty(window, 'indexedDB', {
  value: FIDB.indexedDB
});

// Ê®°Êãü crypto.randomUUID
Object.defineProperty(crypto, 'randomUUID', {
  value: () => {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {
      const r = Math.random() * 16 | 0;
      const v = c === 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  }
});

// Ê®°Êãü performance API
Object.defineProperty(window, 'performance', {
  value: {
    now: () => Date.now(),
    mark: name => {},
    measure: (name, startMark, endMark) => {},
    clearMarks: name => {},
    clearMeasures: name => {},
    getEntriesByType: type => [],
    getEntriesByName: (name, type) => [],
    toJSON: () => ({})
  }
});

// Ê®°Êãü requestAnimationFrame
Object.defineProperty(window, 'requestAnimationFrame', {
  value: callback => {
    return setTimeout(callback, 16);
  }
});
Object.defineProperty(window, 'cancelAnimationFrame', {
  value: id => {
    clearTimeout(id);
  }
});

// ÂÖ®Â±ÄÊµãËØïËæÖÂä©ÂáΩÊï∞
global.testHelpers = {
  wait: ms => new Promise(resolve => setTimeout(resolve, ms)),
  createEvent: (type, data = {}) => {
    return new Event(type, data);
  },
  createError: (message, code = 'UNKNOWN') => {
    const error = new Error(message);
    Object.assign(error, {
      code
    });
    return error;
  },
  clearAllMocks: () => {
    jest.clearAllMocks();
  },
  resetAllMocks: () => {
    jest.resetAllMocks();
  }
};

// ÂÖ®Â±ÄÊµãËØïÂâçËÆæÁΩÆ
beforeAll(() => {
  console.log('üß™ Jest ÊµãËØïÁéØÂ¢ÉÂ∑≤ÂàùÂßãÂåñ');
});

// ÊØè‰∏™ÊµãËØïÂâçÁöÑËÆæÁΩÆ
beforeEach(() => {
  localStorage.clear();
  jest.clearAllMocks();
});

// ÊâÄÊúâÊµãËØïÂêéÁöÑÊ∏ÖÁêÜ
afterAll(() => {
  console.log('üß™ Jest ÊµãËØïÁéØÂ¢ÉÂ∑≤Ê∏ÖÁêÜ');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
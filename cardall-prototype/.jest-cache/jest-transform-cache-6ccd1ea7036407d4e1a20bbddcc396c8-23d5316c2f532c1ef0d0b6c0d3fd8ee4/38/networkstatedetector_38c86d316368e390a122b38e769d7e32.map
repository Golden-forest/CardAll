{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\network-state-detector.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\network-state-detector.ts"],"sourcesContent":["// ============================================================================\r\n// 网络状态检测器 - 为数据库层统一提供网络支持\r\n// ============================================================================\r\n\r\nimport { networkMonitorService, type NetworkInfo, type NetworkQuality, type NetworkEvent } from './network-monitor'\r\n\r\n// 网络状态接口\r\nexport interface NetworkState {\r\n  // 基础状态\r\n  isOnline: boolean\r\n  isReliable: boolean\r\n  quality: NetworkQuality\r\n  qualityScore: number\r\n  \r\n  // 连接详情\r\n  connectionType: string\r\n  effectiveType: string\r\n  downlink?: number\r\n  rtt?: number\r\n  \r\n  // 同步相关\r\n  canSync: boolean\r\n  syncStrategy: SyncStrategy\r\n  estimatedSyncTime: number\r\n  \r\n  // 时间戳\r\n  lastUpdated: Date\r\n  lastStableTime?: Date\r\n}\r\n\r\n// 同步策略配置\r\nexport interface SyncStrategy {\r\n  // 批处理设置\r\n  batchSize: number\r\n  batchDelay: number\r\n  \r\n  // 超时设置\r\n  connectTimeout: number\r\n  requestTimeout: number\r\n  totalTimeout: number\r\n  \r\n  // 重试设置\r\n  maxRetries: number\r\n  retryDelay: number\r\n  retryBackoffMultiplier: number\r\n  \r\n  // 优化设置\r\n  compressionEnabled: boolean\r\n  prioritySyncEnabled: boolean\r\n  backgroundSyncEnabled: boolean\r\n  \r\n  // 错误处理\r\n  circuitBreakerEnabled: boolean\r\n  failureThreshold: number\r\n  recoveryTimeout: number\r\n}\r\n\r\n// 网络异常类型\r\nexport type NetworkErrorType = \r\n  | 'connection_lost'\r\n  | 'timeout' \r\n  | 'server_error'\r\n  | 'rate_limited'\r\n  | 'network_slow'\r\n  | 'unreliable_connection'\r\n\r\n// 网络异常信息\r\nexport interface NetworkError {\r\n  type: NetworkErrorType\r\n  message: string\r\n  code?: string\r\n  retryAfter?: number\r\n  details?: any\r\n  timestamp: Date\r\n  context?: string\r\n}\r\n\r\n// 同步操作优先级\r\nexport type SyncPriority = 'critical' | 'high' | 'normal' | 'low' | 'background'\r\n\r\n// 同步操作请求\r\nexport interface SyncRequest {\r\n  id: string\r\n  type: 'read' | 'write' | 'delete'\r\n  entity: 'card' | 'folder' | 'tag' | 'image' | 'batch'\r\n  priority: SyncPriority\r\n  data: any\r\n  timeout?: number\r\n  retryCount: number\r\n  maxRetries: number\r\n  timestamp: Date\r\n}\r\n\r\n// 同步操作响应\r\nexport interface SyncResponse<T = any> {\r\n  success: boolean\r\n  data?: T\r\n  error?: NetworkError\r\n  duration: number\r\n  retryCount: number\r\n  networkState: NetworkState\r\n}\r\n\r\n// 数据库网络状态监听器\r\nexport interface DatabaseNetworkListener {\r\n  onNetworkStateChanged(state: NetworkState): void\r\n  onNetworkError(error: NetworkError, context?: string): void\r\n  onSyncCompleted(request: SyncRequest, response: SyncResponse): void\r\n  onSyncStrategyChanged(strategy: SyncStrategy): void\r\n}\r\n\r\n// 断路器状态\r\nexport type CircuitBreakerState = 'closed' | 'open' | 'half_open'\r\n\r\n// 断路器配置\r\nexport interface CircuitBreakerConfig {\r\n  failureThreshold: number // 失败阈值\r\n  recoveryTimeout: number // 恢复超时（毫秒）\r\n  expectedException?: NetworkErrorType[] // 预期的异常类型\r\n}\r\n\r\n// 断路器状态信息\r\nexport interface CircuitBreakerStatus {\r\n  state: CircuitBreakerState\r\n  failureCount: number\r\n  lastFailureTime?: Date\r\n  nextAttemptTime?: Date\r\n  config: CircuitBreakerConfig\r\n}\r\n\r\n// ============================================================================\r\n// 网络状态检测器主类\r\n// ============================================================================\r\n\r\nexport class NetworkStateDetector {\r\n  private static instance: NetworkStateDetector\r\n  private currentState: NetworkState\r\n  private syncStrategy: SyncStrategy\r\n  private listeners: Set<DatabaseNetworkListener> = new Set()\r\n  \r\n  // 断路器状态\r\n  private circuitBreakers: Map<string, {\r\n    status: CircuitBreakerStatus\r\n    timer?: NodeJS.Timeout\r\n  }> = new Map()\r\n  \r\n  // 请求队列和批处理\r\n  private pendingRequests: Map<SyncPriority, SyncRequest[]> = new Map()\r\n  private batchTimer: NodeJS.Timeout | null = null\r\n  private isProcessing = false\r\n  \r\n  // 统计信息\r\n  private stats = {\r\n    totalRequests: 0,\r\n    successfulRequests: 0,\r\n    failedRequests: 0,\r\n    averageResponseTime: 0,\r\n    lastError: null as NetworkError | null,\r\n    circuitBreakerTrips: 0\r\n  }\r\n\r\n  // 网络历史记录\r\n  private networkHistory: NetworkEvent[] = []\r\n\r\n  private constructor() {\r\n    this.currentState = this.getInitialState()\r\n    this.syncStrategy = this.getDefaultStrategy()\r\n    this.initialize()\r\n  }\r\n\r\n  static getInstance(): NetworkStateDetector {\r\n    if (!NetworkStateDetector.instance) {\r\n      NetworkStateDetector.instance = new NetworkStateDetector()\r\n    }\r\n    return NetworkStateDetector.instance\r\n  }\r\n\r\n  // 获取初始状态\r\n  private getInitialState(): NetworkState {\r\n    const networkInfo = networkMonitorService.getCurrentState()\r\n    return {\r\n      isOnline: networkInfo.online,\r\n      isReliable: this.calculateReliability(networkInfo),\r\n      quality: networkMonitorService.getNetworkQuality(),\r\n      qualityScore: networkMonitorService.getNetworkQualityScore(),\r\n      connectionType: networkInfo.connectionType,\r\n      effectiveType: networkInfo.effectiveType,\r\n      downlink: networkInfo.downlink,\r\n      rtt: networkInfo.rtt,\r\n      canSync: this.canPerformSync(networkInfo),\r\n      syncStrategy: this.getDefaultStrategy(),\r\n      estimatedSyncTime: this.estimateSyncTime(networkInfo),\r\n      lastUpdated: new Date()\r\n    }\r\n  }\r\n\r\n  // 获取默认同步策略\r\n  private getDefaultStrategy(): SyncStrategy {\r\n    return {\r\n      batchSize: 10,\r\n      batchDelay: 1000,\r\n      connectTimeout: 5000,\r\n      requestTimeout: 30000,\r\n      totalTimeout: 120000,\r\n      maxRetries: 3,\r\n      retryDelay: 1000,\r\n      retryBackoffMultiplier: 2,\r\n      compressionEnabled: true,\r\n      prioritySyncEnabled: true,\r\n      backgroundSyncEnabled: true,\r\n      circuitBreakerEnabled: true,\r\n      failureThreshold: 5,\r\n      recoveryTimeout: 60000\r\n    }\r\n  }\r\n\r\n  // 初始化检测器\r\n  private initialize(): void {\r\n    // 监听网络监控服务事件\r\n    networkMonitorService.addEventListener(this.handleNetworkEvent.bind(this))\r\n    \r\n    // 初始化断路器\r\n    this.initializeCircuitBreakers()\r\n    \r\n    // 初始化请求队列\r\n    this.initializeRequestQueues()\r\n    \r\n    // 开始网络状态检查\r\n    this.startPeriodicChecks()\r\n    \r\n    console.log('NetworkStateDetector initialized')\r\n  }\r\n\r\n  // 初始化断路器\r\n  private initializeCircuitBreakers(): void {\r\n    const operations = ['read', 'write', 'delete', 'batch']\r\n    \r\n    operations.forEach(operation => {\r\n      const config: CircuitBreakerConfig = {\r\n        failureThreshold: this.syncStrategy.failureThreshold,\r\n        recoveryTimeout: this.syncStrategy.recoveryTimeout,\r\n        expectedException: ['timeout', 'connection_lost', 'network_slow']\r\n      }\r\n      \r\n      this.circuitBreakers.set(operation, {\r\n        status: {\r\n          state: 'closed',\r\n          failureCount: 0,\r\n          config\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  // 初始化请求队列\r\n  private initializeRequestQueues(): void {\r\n    const priorities: SyncPriority[] = ['critical', 'high', 'normal', 'low', 'background']\r\n    \r\n    priorities.forEach(priority => {\r\n      this.pendingRequests.set(priority, [])\r\n    })\r\n  }\r\n\r\n  // 开始定期检查\r\n  private startPeriodicChecks(): void {\r\n    // 每30秒检查一次网络状态\r\n    setInterval(() => {\r\n      this.updateNetworkState()\r\n    }, 30000)\r\n    \r\n    // 每5分钟更新同步策略\r\n    setInterval(() => {\r\n      this.updateSyncStrategy()\r\n    }, 300000)\r\n  }\r\n\r\n  // 处理网络事件\r\n  private handleNetworkEvent(event: NetworkEvent): void {\r\n    console.log('Network event detected:', event.type)\r\n    \r\n    // 更新网络状态\r\n    this.updateNetworkState()\r\n    \r\n    // 根据事件类型采取不同行动\r\n    switch (event.type) {\r\n      case 'online':\r\n        this.handleNetworkRestored()\r\n        break\r\n      case 'offline':\r\n        this.handleNetworkLost()\r\n        break\r\n      case 'quality-change':\r\n        this.handleQualityChange(event)\r\n        break\r\n      case 'error':\r\n        this.handleNetworkError(event)\r\n        break\r\n    }\r\n  }\r\n\r\n  // 更新网络状态\r\n  private async updateNetworkState(): Promise<void> {\r\n    try {\r\n      const networkInfo = await networkMonitorService.checkNetwork()\r\n      const healthStatus = await networkMonitorService.performHealthCheck()\r\n      \r\n      const newState: NetworkState = {\r\n        isOnline: networkInfo.online && healthStatus,\r\n        isReliable: this.calculateReliability(networkInfo),\r\n        quality: networkMonitorService.getNetworkQuality(),\r\n        qualityScore: networkMonitorService.getNetworkQualityScore(),\r\n        connectionType: networkInfo.connectionType,\r\n        effectiveType: networkInfo.effectiveType,\r\n        downlink: networkInfo.downlink,\r\n        rtt: networkInfo.rtt,\r\n        canSync: this.canPerformSync(networkInfo) && healthStatus,\r\n        syncStrategy: this.syncStrategy,\r\n        estimatedSyncTime: this.estimateSyncTime(networkInfo),\r\n        lastUpdated: new Date(),\r\n        lastStableTime: networkInfo.online ? new Date() : this.currentState.lastStableTime\r\n      }\r\n      \r\n      // 检查状态是否有显著变化\r\n      if (this.hasSignificantChange(this.currentState, newState)) {\r\n        this.currentState = newState\r\n        this.notifyStateChanged()\r\n        \r\n        // 如果网络恢复，尝试处理队列\r\n        if (newState.isOnline && newState.isReliable) {\r\n          this.processPendingRequests()\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to update network state:', error)\r\n    }\r\n  }\r\n\r\n  // 更新同步策略\r\n  private updateSyncStrategy(): void {\r\n    const newStrategy = this.calculateOptimalStrategy()\r\n    \r\n    if (this.hasStrategyChanged(this.syncStrategy, newStrategy)) {\r\n      this.syncStrategy = newStrategy\r\n      this.currentState.syncStrategy = newStrategy\r\n      this.notifyStrategyChanged()\r\n    }\r\n  }\r\n\r\n  // 计算最优同步策略\r\n  private calculateOptimalStrategy(): SyncStrategy {\r\n    const quality = this.currentState.quality\r\n    const score = this.currentState.qualityScore\r\n    \r\n    const baseStrategy = { ...this.getDefaultStrategy() }\r\n    \r\n    switch (quality) {\r\n      case 'excellent':\r\n        return {\r\n          ...baseStrategy,\r\n          batchSize: 50,\r\n          batchDelay: 500,\r\n          requestTimeout: 10000,\r\n          retryDelay: 500,\r\n          compressionEnabled: false\r\n        }\r\n        \r\n      case 'good':\r\n        return {\r\n          ...baseStrategy,\r\n          batchSize: 25,\r\n          batchDelay: 1000,\r\n          requestTimeout: 20000,\r\n          retryDelay: 1000\r\n        }\r\n        \r\n      case 'fair':\r\n        return {\r\n          ...baseStrategy,\r\n          batchSize: 10,\r\n          batchDelay: 2000,\r\n          requestTimeout: 30000,\r\n          compressionEnabled: true\r\n        }\r\n        \r\n      case 'poor':\r\n        return {\r\n          ...baseStrategy,\r\n          batchSize: 5,\r\n          batchDelay: 5000,\r\n          requestTimeout: 60000,\r\n          maxRetries: 5,\r\n          retryDelay: 2000,\r\n          compressionEnabled: true\r\n        }\r\n        \r\n      default: // offline\r\n        return {\r\n          ...baseStrategy,\r\n          batchSize: 1,\r\n          batchDelay: 10000,\r\n          requestTimeout: 120000,\r\n          maxRetries: 10,\r\n          compressionEnabled: true\r\n        }\r\n    }\r\n  }\r\n\r\n  // 计算网络可靠性\r\n  private calculateReliability(info: NetworkInfo): boolean {\r\n    if (!info.online) return false\r\n    \r\n    // 多维度可靠性评估\r\n    const factors = this.calculateReliabilityFactors(info)\r\n    const overallScore = this.calculateOverallReliabilityScore(factors)\r\n    \r\n    return overallScore >= 0.6 // 60%的可靠性阈值\r\n  }\r\n\r\n  private calculateReliabilityFactors(info: NetworkInfo): {\r\n    connectivity: number\r\n    latency: number\r\n    bandwidth: number\r\n    stability: number\r\n    connectionType: number\r\n  } {\r\n    // 连通性因子\r\n    const connectivity = info.online ? 1.0 : 0.0\r\n    \r\n    // 延迟因子 (0-1分，越低越好)\r\n    let latency = 1.0\r\n    if (info.rtt) {\r\n      if (info.rtt <= 100) latency = 1.0\r\n      else if (info.rtt <= 300) latency = 0.8\r\n      else if (info.rtt <= 1000) latency = 0.6\r\n      else if (info.rtt <= 2000) latency = 0.3\r\n      else latency = 0.1\r\n    }\r\n    \r\n    // 带宽因子 (0-1分)\r\n    let bandwidth = 0.5\r\n    if (info.downlink) {\r\n      if (info.downlink >= 10) bandwidth = 1.0\r\n      else if (info.downlink >= 5) bandwidth = 0.8\r\n      else if (info.downlink >= 1) bandwidth = 0.6\r\n      else if (info.downlink >= 0.5) bandwidth = 0.4\r\n      else bandwidth = 0.2\r\n    }\r\n    \r\n    // 稳定性因子 (基于历史数据)\r\n    const stability = this.calculateNetworkStability()\r\n    \r\n    // 连接类型因子\r\n    const connectionTypeScores: Record<string, number> = {\r\n      'ethernet': 1.0,\r\n      'wifi': 0.9,\r\n      '5g': 0.8,\r\n      '4g': 0.7,\r\n      '3g': 0.4,\r\n      '2g': 0.2,\r\n      'unknown': 0.3\r\n    }\r\n    const connectionType = connectionTypeScores[info.connectionType] || 0.3\r\n    \r\n    return {\r\n      connectivity,\r\n      latency,\r\n      bandwidth,\r\n      stability,\r\n      connectionType\r\n    }\r\n  }\r\n\r\n  private calculateOverallReliabilityScore(factors: {\r\n    connectivity: number\r\n    latency: number\r\n    bandwidth: number\r\n    stability: number\r\n    connectionType: number\r\n  }): number {\r\n    // 权重配置\r\n    const weights = {\r\n      connectivity: 0.3,    // 连通性最重要\r\n      latency: 0.25,        // 延迟影响用户体验\r\n      bandwidth: 0.2,       // 带宽影响传输速度\r\n      stability: 0.15,      // 稳定性影响长期体验\r\n      connectionType: 0.1   // 连接类型作为补充\r\n    }\r\n    \r\n    return (\r\n      factors.connectivity * weights.connectivity +\r\n      factors.latency * weights.latency +\r\n      factors.bandwidth * weights.bandwidth +\r\n      factors.stability * weights.stability +\r\n      factors.connectionType * weights.connectionType\r\n    )\r\n  }\r\n\r\n  private calculateNetworkStability(): number {\r\n    const now = Date.now()\r\n    const stabilityWindow = 5 * 60 * 1000 // 5分钟稳定性窗口\r\n    \r\n    // 计算最近5分钟内的网络变化次数\r\n    const recentChanges = this.networkHistory.filter(event => \r\n      now - event.timestamp.getTime() < stabilityWindow\r\n    ).length\r\n    \r\n    // 变化次数越少，稳定性越高\r\n    if (recentChanges === 0) return 1.0\r\n    if (recentChanges <= 2) return 0.8\r\n    if (recentChanges <= 5) return 0.6\r\n    if (recentChanges <= 10) return 0.4\r\n    return 0.2\r\n  }\r\n\r\n  // 判断是否可以执行同步\r\n  private canPerformSync(info: NetworkInfo): boolean {\r\n    if (!info.online) return false\r\n    \r\n    // 根据网络质量判断\r\n    const minQualityScore = 0.3 // 最低质量分数要求\r\n    return networkMonitorService.getNetworkQualityScore() >= minQualityScore\r\n  }\r\n\r\n  // 估计同步时间\r\n  private estimateSyncTime(info: NetworkInfo): number {\r\n    if (!info.online) return Infinity\r\n    \r\n    const baseTime = 1000 // 基础时间 1秒\r\n    \r\n    // 根据RTT调整\r\n    const rttMultiplier = info.rtt ? Math.max(1, info.rtt / 100) : 1\r\n    \r\n    // 根据下行速度调整\r\n    const downlinkMultiplier = info.downlink ? Math.max(0.5, 5 / info.downlink) : 2\r\n    \r\n    return baseTime * rttMultiplier * downlinkMultiplier\r\n  }\r\n\r\n  // 网络状态预测\r\n  private predictNetworkStability(windowMinutes: number = 30): {\r\n    isStable: boolean\r\n    confidence: number\r\n    predictedDowntime: number\r\n    recommendations: string[]\r\n  } {\r\n    const now = Date.now()\r\n    const windowMs = windowMinutes * 60 * 1000\r\n    \r\n    // 获取历史数据\r\n    const recentHistory = this.networkHistory.filter(event =>\r\n      now - event.timestamp.getTime() <= windowMs\r\n    )\r\n    \r\n    if (recentHistory.length < 5) {\r\n      return {\r\n        isStable: true,\r\n        confidence: 0.3,\r\n        predictedDowntime: 0,\r\n        recommendations: ['数据不足，建议监控网络状态']\r\n      }\r\n    }\r\n    \r\n    // 计算稳定性指标\r\n    const offlineEvents = recentHistory.filter(e => !e.networkInfo.online)\r\n    const stabilityScore = 1 - (offlineEvents.length / recentHistory.length)\r\n    \r\n    // 计算平均在线时间\r\n    const onlineDurations = this.calculateOnlineDurations(recentHistory)\r\n    const avgOnlineDuration = onlineDurations.reduce((a, b) => a + b, 0) / onlineDurations.length || 0\r\n    \r\n    // 预测未来可能的离线时间\r\n    const predictedDowntime = this.predictDowntime(recentHistory, windowMs)\r\n    \r\n    // 生成建议\r\n    const recommendations = this.generateNetworkRecommendations(\r\n      stabilityScore,\r\n      avgOnlineDuration,\r\n      predictedDowntime\r\n    )\r\n    \r\n    return {\r\n      isStable: stabilityScore >= 0.8,\r\n      confidence: Math.min(stabilityScore, 0.9),\r\n      predictedDowntime,\r\n      recommendations\r\n    }\r\n  }\r\n\r\n  private calculateOnlineDurations(history: NetworkEvent[]): number[] {\r\n    const durations: number[] = []\r\n    let onlineStartTime: number | null = null\r\n    \r\n    for (const event of history) {\r\n      if (event.networkInfo.online && onlineStartTime === null) {\r\n        onlineStartTime = event.timestamp.getTime()\r\n      } else if (!event.networkInfo.online && onlineStartTime !== null) {\r\n        durations.push(event.timestamp.getTime() - onlineStartTime)\r\n        onlineStartTime = null\r\n      }\r\n    }\r\n    \r\n    // 处理当前在线状态\r\n    if (onlineStartTime !== null) {\r\n      durations.push(Date.now() - onlineStartTime)\r\n    }\r\n    \r\n    return durations\r\n  }\r\n\r\n  private predictDowntime(history: NetworkEvent[], windowMs: number): number {\r\n    const offlineEvents = history.filter(e => !e.networkInfo.online)\r\n    \r\n    if (offlineEvents.length === 0) return 0\r\n    \r\n    // 计算平均离线时长\r\n    const offlineDurations: number[] = []\r\n    let offlineStartTime: number | null = null\r\n    \r\n    for (const event of history) {\r\n      if (!event.networkInfo.online && offlineStartTime === null) {\r\n        offlineStartTime = event.timestamp.getTime()\r\n      } else if (event.networkInfo.online && offlineStartTime !== null) {\r\n        offlineDurations.push(event.timestamp.getTime() - offlineStartTime)\r\n        offlineStartTime = null\r\n      }\r\n    }\r\n    \r\n    if (offlineDurations.length === 0) return 0\r\n    \r\n    const avgOfflineDuration = offlineDurations.reduce((a, b) => a + b, 0) / offlineDurations.length\r\n    const offlineFrequency = offlineEvents.length / (windowMs / (60 * 1000)) // 每分钟离线次数\r\n    \r\n    return avgOfflineDuration * offlineFrequency\r\n  }\r\n\r\n  private generateNetworkRecommendations(\r\n    stabilityScore: number,\r\n    avgOnlineDuration: number,\r\n    predictedDowntime: number\r\n  ): string[] {\r\n    const recommendations: string[] = []\r\n    \r\n    if (stabilityScore < 0.6) {\r\n      recommendations.push('网络连接不稳定，建议切换到更稳定的网络')\r\n      recommendations.push('建议启用离线模式')\r\n    }\r\n    \r\n    if (avgOnlineDuration < 5 * 60 * 1000) { // 少于5分钟\r\n      recommendations.push('网络连接持续时间短，建议检查网络设备')\r\n    }\r\n    \r\n    if (predictedDowntime > 10 * 60 * 1000) { // 超过10分钟\r\n      recommendations.push('预计网络中断时间较长，建议提前完成重要操作')\r\n    }\r\n    \r\n    if (stabilityScore >= 0.9 && avgOnlineDuration > 30 * 60 * 1000) {\r\n      recommendations.push('网络状态良好，适合进行大规模同步操作')\r\n    }\r\n    \r\n    return recommendations\r\n  }\r\n\r\n  // 检查状态是否有显著变化\r\n  private hasSignificantChange(oldState: NetworkState, newState: NetworkState): boolean {\r\n    // 在线状态变化\r\n    if (oldState.isOnline !== newState.isOnline) return true\r\n    \r\n    // 可靠性变化\r\n    if (oldState.isReliable !== newState.isReliable) return true\r\n    \r\n    // 质量等级变化\r\n    if (oldState.quality !== newState.quality) return true\r\n    \r\n    // 质量分数显著变化（超过10%）\r\n    const qualityChange = Math.abs(oldState.qualityScore - newState.qualityScore)\r\n    if (qualityChange > 0.1) return true\r\n    \r\n    // 同步能力变化\r\n    if (oldState.canSync !== newState.canSync) return true\r\n    \r\n    return false\r\n  }\r\n\r\n  // 检查策略是否变化\r\n  private hasStrategyChanged(oldStrategy: SyncStrategy, newStrategy: SyncStrategy): boolean {\r\n    return (\r\n      oldStrategy.batchSize !== newStrategy.batchSize ||\r\n      oldStrategy.requestTimeout !== newStrategy.requestTimeout ||\r\n      oldStrategy.compressionEnabled !== newStrategy.compressionEnabled ||\r\n      oldStrategy.maxRetries !== newStrategy.maxRetries\r\n    )\r\n  }\r\n\r\n  // 处理网络恢复\r\n  private handleNetworkRestored(): void {\r\n    console.log('Network restored, processing pending requests...')\r\n    \r\n    // 重置所有断路器\r\n    this.resetAllCircuitBreakers()\r\n    \r\n    // 处理等待中的请求\r\n    this.processPendingRequests()\r\n  }\r\n\r\n  // 处理网络丢失\r\n  private handleNetworkLost(): void {\r\n    console.log('Network lost, pausing sync operations...')\r\n    \r\n    // 清空批处理定时器\r\n    if (this.batchTimer) {\r\n      clearTimeout(this.batchTimer)\r\n      this.batchTimer = null\r\n    }\r\n  }\r\n\r\n  // 处理质量变化\r\n  private handleQualityChange(event: NetworkEvent): void {\r\n    console.log('Network quality changed:', event.details)\r\n    \r\n    // 更新同步策略\r\n    this.updateSyncStrategy()\r\n  }\r\n\r\n  // 处理网络错误\r\n  private handleNetworkError(event: NetworkEvent): void {\r\n    const error: NetworkError = {\r\n      type: 'network_slow',\r\n      message: 'Network quality degraded',\r\n      timestamp: new Date(),\r\n      details: event.details\r\n    }\r\n    \r\n    this.notifyError(error, 'quality_degradation')\r\n  }\r\n\r\n  // ============================================================================\r\n  // 断路器管理\r\n  // ============================================================================\r\n\r\n  // 检查断路器状态\r\n  private checkCircuitBreaker(operation: string): boolean {\r\n    const breaker = this.circuitBreakers.get(operation)\r\n    if (!breaker || !this.syncStrategy.circuitBreakerEnabled) return true\r\n    \r\n    const status = breaker.status\r\n    \r\n    // 如果断路器开启，检查是否可以尝试恢复\r\n    if (status.state === 'open') {\r\n      if (Date.now() >= (status.nextAttemptTime?.getTime() || 0)) {\r\n        // 切换到半开状态\r\n        status.state = 'half_open'\r\n        console.log(`Circuit breaker for ${operation} moved to half-open state`)\r\n        return true\r\n      }\r\n      return false\r\n    }\r\n    \r\n    return status.state !== 'open'\r\n  }\r\n\r\n  // 记录成功\r\n  private recordSuccess(operation: string): void {\r\n    const breaker = this.circuitBreakers.get(operation)\r\n    if (!breaker) return\r\n    \r\n    const status = breaker.status\r\n    \r\n    // 重置失败计数\r\n    status.failureCount = 0\r\n    status.state = 'closed'\r\n    \r\n    // 清除恢复定时器\r\n    if (breaker.timer) {\r\n      clearTimeout(breaker.timer)\r\n      breaker.timer = undefined\r\n    }\r\n  }\r\n\r\n  // 记录失败\r\n  private recordFailure(operation: string, error: NetworkError): void {\r\n    const breaker = this.circuitBreakers.get(operation)\r\n    if (!breaker || !this.syncStrategy.circuitBreakerEnabled) return\r\n    \r\n    const status = breaker.status\r\n    const config = status.config\r\n    \r\n    // 检查是否是预期异常\r\n    if (config.expectedException && !config.expectedException.includes(error.type)) {\r\n      return\r\n    }\r\n    \r\n    // 增加失败计数\r\n    status.failureCount++\r\n    status.lastFailureTime = new Date()\r\n    \r\n    // 检查是否达到阈值\r\n    if (status.failureCount >= config.failureThreshold) {\r\n      status.state = 'open'\r\n      status.nextAttemptTime = new Date(Date.now() + config.recoveryTimeout)\r\n      \r\n      this.stats.circuitBreakerTrips++\r\n      console.log(`Circuit breaker for ${operation} tripped: ${status.failureCount} failures`)\r\n      \r\n      // 设置恢复定时器\r\n      if (breaker.timer) {\r\n        clearTimeout(breaker.timer)\r\n      }\r\n      \r\n      breaker.timer = setTimeout(() => {\r\n        status.state = 'half_open'\r\n        console.log(`Circuit breaker for ${operation} moved to half-open state`)\r\n      }, config.recoveryTimeout)\r\n    }\r\n  }\r\n\r\n  // 重置断路器\r\n  private resetCircuitBreaker(operation: string): void {\r\n    const breaker = this.circuitBreakers.get(operation)\r\n    if (!breaker) return\r\n    \r\n    const status = breaker.status\r\n    status.failureCount = 0\r\n    status.state = 'closed'\r\n    status.lastFailureTime = undefined\r\n    status.nextAttemptTime = undefined\r\n    \r\n    if (breaker.timer) {\r\n      clearTimeout(breaker.timer)\r\n      breaker.timer = undefined\r\n    }\r\n  }\r\n\r\n  // 重置所有断路器\r\n  private resetAllCircuitBreakers(): void {\r\n    this.circuitBreakers.forEach((breaker, operation) => {\r\n      this.resetCircuitBreaker(operation)\r\n    })\r\n  }\r\n\r\n  // ============================================================================\r\n  // 请求处理\r\n  // ============================================================================\r\n\r\n  // 添加同步请求\r\n  async addSyncRequest(request: SyncRequest): Promise<SyncResponse> {\r\n    this.stats.totalRequests++\r\n    \r\n    // 检查网络状态\r\n    if (!this.currentState.canSync) {\r\n      const error: NetworkError = {\r\n        type: 'connection_lost',\r\n        message: 'Network not available for sync',\r\n        timestamp: new Date()\r\n      }\r\n      this.stats.failedRequests++\r\n      return { success: false, error, duration: 0, retryCount: 0, networkState: this.currentState }\r\n    }\r\n    \r\n    // 检查断路器\r\n    const operation = request.type === 'batch' ? 'batch' : request.type\r\n    if (!this.checkCircuitBreaker(operation)) {\r\n      const error: NetworkError = {\r\n        type: 'rate_limited',\r\n        message: 'Circuit breaker is open',\r\n        timestamp: new Date()\r\n      }\r\n      this.stats.failedRequests++\r\n      return { success: false, error, duration: 0, retryCount: 0, networkState: this.currentState }\r\n    }\r\n    \r\n    // 添加到队列\r\n    const queue = this.pendingRequests.get(request.priority)!\r\n    queue.push(request)\r\n    \r\n    // 如果是高优先级或队列达到批处理大小，立即处理\r\n    if (request.priority === 'critical' || queue.length >= this.syncStrategy.batchSize) {\r\n      await this.processPriorityQueue(request.priority)\r\n    } else if (!this.batchTimer) {\r\n      // 设置批处理定时器\r\n      this.batchTimer = setTimeout(() => {\r\n        this.processAllQueues()\r\n      }, this.syncStrategy.batchDelay)\r\n    }\r\n    \r\n    return { success: true, duration: 0, retryCount: 0, networkState: this.currentState }\r\n  }\r\n\r\n  // 处理特定优先级的队列\r\n  private async processPriorityQueue(priority: SyncPriority): Promise<void> {\r\n    if (this.isProcessing) return\r\n    \r\n    this.isProcessing = true\r\n    const queue = this.pendingRequests.get(priority)!\r\n    \r\n    if (queue.length === 0) {\r\n      this.isProcessing = false\r\n      return\r\n    }\r\n    \r\n    const batchSize = Math.min(queue.length, this.syncStrategy.batchSize)\r\n    const requests = queue.splice(0, batchSize)\r\n    \r\n    try {\r\n      // 批量处理请求\r\n      await this.executeBatchRequests(requests)\r\n    } catch (error) {\r\n      console.error('Failed to process batch requests:', error)\r\n    } finally {\r\n      this.isProcessing = false\r\n    }\r\n  }\r\n\r\n  // 处理所有队列\r\n  private async processAllQueues(): Promise<void> {\r\n    if (this.isProcessing) return\r\n    \r\n    this.isProcessing = true\r\n    this.batchTimer = null\r\n    \r\n    const priorities: SyncPriority[] = ['critical', 'high', 'normal', 'low', 'background']\r\n    \r\n    try {\r\n      for (const priority of priorities) {\r\n        const queue = this.pendingRequests.get(priority)!\r\n        if (queue.length > 0) {\r\n          await this.processPriorityQueue(priority)\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to process request queues:', error)\r\n    } finally {\r\n      this.isProcessing = false\r\n    }\r\n  }\r\n\r\n  // 处理等待中的请求\r\n  private async processPendingRequests(): Promise<void> {\r\n    if (this.currentState.canSync && !this.isProcessing) {\r\n      await this.processAllQueues()\r\n    }\r\n  }\r\n\r\n  // 执行批量请求\r\n  private async executeBatchRequests(requests: SyncRequest[]): Promise<void> {\r\n    for (const request of requests) {\r\n      try {\r\n        const response = await this.executeRequest(request)\r\n        this.notifySyncCompleted(request, response)\r\n        \r\n        if (response.success) {\r\n          this.recordSuccess(request.type)\r\n          this.stats.successfulRequests++\r\n        } else {\r\n          this.recordFailure(request.type, response.error!)\r\n          this.stats.failedRequests++\r\n          this.stats.lastError = response.error\r\n        }\r\n      } catch (error) {\r\n        const errorResponse: NetworkError = {\r\n          type: 'server_error',\r\n          message: error instanceof Error ? error.message : 'Unknown error',\r\n          timestamp: new Date()\r\n        }\r\n        \r\n        this.recordFailure(request.type, errorResponse)\r\n        this.stats.failedRequests++\r\n        this.stats.lastError = errorResponse\r\n        \r\n        this.notifySyncCompleted(request, { \r\n          success: false, \r\n          error: errorResponse, \r\n          duration: 0, \r\n          retryCount: 0, \r\n          networkState: this.currentState \r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  // 执行单个请求\r\n  private async executeRequest(request: SyncRequest): Promise<SyncResponse> {\r\n    const startTime = Date.now()\r\n    \r\n    // 这里应该实现实际的请求逻辑\r\n    // 目前返回模拟响应\r\n    await new Promise(resolve => setTimeout(resolve, 100)) // 模拟网络延迟\r\n    \r\n    return {\r\n      success: true,\r\n      data: { id: request.id, processed: true },\r\n      duration: Date.now() - startTime,\r\n      retryCount: request.retryCount,\r\n      networkState: this.currentState\r\n    }\r\n  }\r\n\r\n  // ============================================================================\r\n  // 事件通知\r\n  // ============================================================================\r\n\r\n  // 添加监听器\r\n  addListener(listener: DatabaseNetworkListener): void {\r\n    this.listeners.add(listener)\r\n  }\r\n\r\n  // 移除监听器\r\n  removeListener(listener: DatabaseNetworkListener): void {\r\n    this.listeners.delete(listener)\r\n  }\r\n\r\n  // 通知状态变化\r\n  private notifyStateChanged(): void {\r\n    this.listeners.forEach(listener => {\r\n      try {\r\n        listener.onNetworkStateChanged(this.currentState)\r\n      } catch (error) {\r\n        console.error('Error in network state listener:', error)\r\n      }\r\n    })\r\n  }\r\n\r\n  // 通知错误\r\n  private notifyError(error: NetworkError, context?: string): void {\r\n    this.listeners.forEach(listener => {\r\n      try {\r\n        listener.onNetworkError(error, context)\r\n      } catch (error) {\r\n        console.error('Error in network error listener:', error)\r\n      }\r\n    })\r\n  }\r\n\r\n  // 通知同步完成\r\n  private notifySyncCompleted(request: SyncRequest, response: SyncResponse): void {\r\n    this.listeners.forEach(listener => {\r\n      try {\r\n        listener.onSyncCompleted(request, response)\r\n      } catch (error) {\r\n        console.error('Error in sync completion listener:', error)\r\n      }\r\n    })\r\n  }\r\n\r\n  // 通知策略变化\r\n  private notifyStrategyChanged(): void {\r\n    this.listeners.forEach(listener => {\r\n      try {\r\n        listener.onSyncStrategyChanged(this.syncStrategy)\r\n      } catch (error) {\r\n        console.error('Error in sync strategy listener:', error)\r\n      }\r\n    })\r\n  }\r\n\r\n  // ============================================================================\r\n  // 公共API\r\n  // ============================================================================\r\n\r\n  // 获取当前网络状态\r\n  getCurrentState(): NetworkState {\r\n    return { ...this.currentState }\r\n  }\r\n\r\n  // 获取同步策略\r\n  getSyncStrategy(): SyncStrategy {\r\n    return { ...this.syncStrategy }\r\n  }\r\n\r\n  // 获取断路器状态\r\n  getCircuitBreakerStatus(operation: string): CircuitBreakerStatus | null {\r\n    const breaker = this.circuitBreakers.get(operation)\r\n    return breaker ? { ...breaker.status } : null\r\n  }\r\n\r\n  // 获取统计信息\r\n  getStats() {\r\n    return { ...this.stats }\r\n  }\r\n\r\n  // 强制更新网络状态\r\n  async forceUpdateNetworkState(): Promise<void> {\r\n    await this.updateNetworkState()\r\n  }\r\n\r\n  // 重置所有状态\r\n  reset(): void {\r\n    this.resetAllCircuitBreakers()\r\n    this.pendingRequests.forEach(queue => queue.length = 0)\r\n    if (this.batchTimer) {\r\n      clearTimeout(this.batchTimer)\r\n      this.batchTimer = null\r\n    }\r\n    this.stats = {\r\n      totalRequests: 0,\r\n      successfulRequests: 0,\r\n      failedRequests: 0,\r\n      averageResponseTime: 0,\r\n      lastError: null,\r\n      circuitBreakerTrips: 0\r\n    }\r\n  }\r\n}\r\n\r\n// 导出单例实例\r\nexport const networkStateDetector = NetworkStateDetector.getInstance()"],"version":3}
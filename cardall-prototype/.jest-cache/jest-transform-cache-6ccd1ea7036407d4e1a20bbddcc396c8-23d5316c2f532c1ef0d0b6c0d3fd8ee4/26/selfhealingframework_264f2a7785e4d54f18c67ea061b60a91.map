{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\error-handling\\self-healing-framework.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\error-handling\\self-healing-framework.ts"],"sourcesContent":["/**\n * 自愈框架\n *\n * 实现智能自愈能力，包括：\n * - 错误模式识别和学习\n * - 自动根因分析\n * - 智能修复策略生成\n * - 自愈执行和验证\n * - 知识库管理\n * - 效果评估和优化\n */\n\nimport {\n  UnifiedError,\n  ErrorCategory,\n  ErrorSeverity,\n  ErrorContext,\n  RecoveryResult,\n  HealingRule,\n  ErrorPattern,\n  TimePattern,\n  FrequencyPattern,\n  HealingCondition,\n  HealingAction\n} from './types'\nimport { RecoveryStrategyManager } from './recovery-strategy-manager'\nimport { ErrorMonitoringService } from './error-monitoring-service'\n\n// 自愈框架实现\n\n// 自愈会话\nexport interface HealingSession {\n  id: string\n  triggerError: UnifiedError\n  rule: HealingRule\n  startTime: number\n  endTime?: number\n  status: 'active' | 'completed' | 'failed' | 'cancelled'\n  actions: HealingExecution[]\n  result?: HealingResult\n  confidence: number\n}\n\n// 自愈执行\nexport interface HealingExecution {\n  action: HealingAction\n  startTime: number\n  endTime?: number\n  status: 'pending' | 'running' | 'completed' | 'failed'\n  result?: any\n  error?: any\n  rollbackAttempted?: boolean\n  rollbackResult?: any\n}\n\n// 自愈结果\nexport interface HealingResult {\n  success: boolean\n  actions: number\n  successfulActions: number\n  duration: number\n  confidence: number\n  effectiveness: number\n  message: string\n  details?: any\n  recommendation?: string\n}\n\n// 自愈指标\nexport interface HealingMetrics {\n  totalSessions: number\n  successfulSessions: number\n  failedSessions: number\n  averageHealingTime: number\n  successRate: number\n  averageConfidence: number\n  ruleEffectiveness: Map<string, number>\n  patternDetectionRate: number\n  autoResolutionRate: number\n  falsePositiveRate: number\n}\n\n// 知识库条目\nexport interface KnowledgeEntry {\n  id: string\n  pattern: ErrorPattern\n  solution: HealingSolution\n  confidence: number\n  usageCount: number\n  successCount: number\n  lastUsed: number\n  created: number\n  tags: string[]\n}\n\n// 自愈解决方案\nexport interface HealingSolution {\n  description: string\n  steps: HealingAction[]\n  prerequisites: string[]\n  sideEffects: string[]\n  estimatedDuration: number\n  successProbability: number\n}\n\n// 自愈模式\nexport interface HealingPattern {\n  id: string\n  name: string\n  description: string\n  errorPatterns: ErrorPattern[]\n  solution: HealingSolution\n  frequency: number\n  confidence: number\n  lastObserved: number\n}\n\n/**\n * 模式识别器\n */\nexport class PatternRecognizer {\n  private patterns: Map<string, HealingPattern> = new Map()\n  private recentErrors: UnifiedError[] = []\n  private maxRecentErrors = 1000\n\n  /**\n   * 识别错误模式\n   */\n  public async recognizePattern(error: UnifiedError): Promise<HealingPattern | null> {\n    // 添加到最近错误列表\n    this.addToRecentErrors(error)\n\n    // 分析单个错误模式\n    const singlePattern = this.analyzeSingleError(error)\n\n    // 分析时间序列模式\n    const timeSeriesPattern = await this.analyzeTimeSeriesPattern(error)\n\n    // 分析上下文模式\n    const contextPattern = this.analyzeContextPattern(error)\n\n    // 组合模式分析\n    const combinedPattern = this.combinePatterns(\n      singlePattern,\n      timeSeriesPattern,\n      contextPattern\n    )\n\n    // 查找匹配的已知模式\n    const matchedPattern = this.findMatchingPattern(combinedPattern)\n\n    if (matchedPattern) {\n      matchedPattern.lastObserved = Date.now()\n      return matchedPattern\n    }\n\n    // 创建新模式（如果符合条件）\n    if (this.shouldCreateNewPattern(combinedPattern)) {\n      return this.createNewPattern(combinedPattern)\n    }\n\n    return null\n  }\n\n  /**\n   * 学习新模式\n   */\n  public async learnPattern(pattern: ErrorPattern, solution: HealingSolution): Promise<void> {\n    const newPattern: HealingPattern = {\n      id: this.generatePatternId(),\n      name: `Learned Pattern ${Date.now()}`,\n      description: `Automatically learned pattern for ${pattern.category} errors`,\n      errorPatterns: [pattern],\n      solution,\n      frequency: 1,\n      confidence: 0.5,\n      lastObserved: Date.now()\n    }\n\n    this.patterns.set(newPattern.id, newPattern)\n    console.log(`学习到新模式: ${newPattern.name}`)\n  }\n\n  /**\n   * 获取所有模式\n   */\n  public getPatterns(): HealingPattern[] {\n    return Array.from(this.patterns.values())\n  }\n\n  private addToRecentErrors(error: UnifiedError): void {\n    this.recentErrors.push(error)\n\n    // 保持最近1000个错误\n    if (this.recentErrors.length > this.maxRecentErrors) {\n      this.recentErrors = this.recentErrors.slice(-this.maxRecentErrors)\n    }\n  }\n\n  private analyzeSingleError(error: UnifiedError): Partial<ErrorPattern> {\n    return {\n      category: error.category,\n      severity: error.severity,\n      errorCode: error.code,\n      messagePattern: this.extractMessagePattern(error.message),\n      stackPattern: this.extractStackPattern(error.stack)\n    }\n  }\n\n  private async analyzeTimeSeriesPattern(error: UnifiedError): Promise<Partial<ErrorPattern>> {\n    const now = Date.now()\n    const timeWindow = 300000 // 5分钟窗口\n\n    // 查找时间窗口内的相似错误\n    const similarErrors = this.recentErrors.filter(e => {\n      const timeDiff = now - e.timestamp\n      return timeDiff <= timeWindow && e.category === error.category\n    })\n\n    if (similarErrors.length >= 3) {\n      return {\n        frequencyPattern: {\n          count: similarErrors.length,\n          timeWindow: timeWindow,\n          threshold: 3\n        }\n      }\n    }\n\n    return {}\n  }\n\n  private analyzeContextPattern(error: UnifiedError): Partial<ErrorPattern> {\n    if (error.context) {\n      return {\n        contextPattern: {\n          operation: error.context.operation,\n          component: error.context.component,\n          environment: error.context.environment\n        }\n      }\n    }\n    return {}\n  }\n\n  private combinePatterns(\n    single: Partial<ErrorPattern>,\n    timeSeries: Partial<ErrorPattern>,\n    context: Partial<ErrorPattern>\n  ): Partial<ErrorPattern> {\n    return {\n      ...single,\n      ...timeSeries,\n      ...context\n    }\n  }\n\n  private findMatchingPattern(pattern: Partial<ErrorPattern>): HealingPattern | null {\n    for (const [id, existingPattern] of this.patterns) {\n      if (this.patternsMatch(pattern, existingPattern.errorPatterns[0])) {\n        return existingPattern\n      }\n    }\n    return null\n  }\n\n  private patternsMatch(pattern1: Partial<ErrorPattern>, pattern2: ErrorPattern): boolean {\n    // 简单的模式匹配逻辑\n    return pattern1.category === pattern2.category &&\n           pattern1.severity === pattern2.severity &&\n           (!pattern1.errorCode || pattern1.errorCode === pattern2.errorCode)\n  }\n\n  private shouldCreateNewPattern(pattern: Partial<ErrorPattern>): boolean {\n    // 简单的创建条件判断\n    return pattern.frequencyPattern !== undefined &&\n           pattern.frequencyPattern.count >= 5\n  }\n\n  private createNewPattern(pattern: Partial<ErrorPattern>): HealingPattern {\n    const newPattern: HealingPattern = {\n      id: this.generatePatternId(),\n      name: `New Pattern ${Date.now()}`,\n      description: `Discovered pattern for ${pattern.category} errors`,\n      errorPatterns: [pattern as ErrorPattern],\n      frequency: 1,\n      confidence: 0.3,\n      lastObserved: Date.now()\n    }\n\n    this.patterns.set(newPattern.id, newPattern)\n    return newPattern\n  }\n\n  private extractMessagePattern(message: string): string | undefined {\n    // 提取消息模式（简化实现）\n    if (message.includes('timeout')) return 'timeout'\n    if (message.includes('connection')) return 'connection'\n    if (message.includes('permission')) return 'permission'\n    return undefined\n  }\n\n  private extractStackPattern(stack: string | undefined): string | undefined {\n    // 提取堆栈模式（简化实现）\n    if (!stack) return undefined\n    if (stack.includes('network')) return 'network'\n    if (stack.includes('database')) return 'database'\n    return undefined\n  }\n\n  private generatePatternId(): string {\n    return `pattern-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n  }\n}\n\n/**\n * 根因分析器\n */\nexport class RootCauseAnalyzer {\n  private knowledgeBase: Map<string, KnowledgeEntry> = new Map()\n\n  /**\n   * 分析错误根因\n   */\n  public async analyzeRootCause(error: UnifiedError): Promise<{\n    rootCause: string\n    confidence: number\n    evidence: string[]\n    recommendations: string[]\n  }> {\n    const evidence: string[] = []\n    const recommendations: string[] = []\n\n    // 基于错误类型分析\n    const typeAnalysis = this.analyzeByErrorType(error)\n    evidence.push(...typeAnalysis.evidence)\n    recommendations.push(...typeAnalysis.recommendations)\n\n    // 基于上下文分析\n    const contextAnalysis = this.analyzeByContext(error)\n    evidence.push(...contextAnalysis.evidence)\n    recommendations.push(...contextAnalysis.recommendations)\n\n    // 基于历史数据分析\n    const historyAnalysis = await this.analyzeByHistory(error)\n    evidence.push(...historyAnalysis.evidence)\n    recommendations.push(...historyAnalysis.recommendations)\n\n    // 查找知识库\n    const knowledgeMatch = this.findKnowledgeMatch(error)\n    if (knowledgeMatch) {\n      evidence.push(`知识库匹配: ${knowledgeMatch.description}`)\n      recommendations.push(...knowledgeMatch.solution.steps.map(step => step.description))\n    }\n\n    // 计算置信度\n    const confidence = this.calculateConfidence(evidence.length, recommendations.length)\n\n    // 生成根因描述\n    const rootCause = this.generateRootCauseDescription(error, evidence, recommendations)\n\n    return {\n      rootCause,\n      confidence,\n      evidence,\n      recommendations\n    }\n  }\n\n  private analyzeByErrorType(error: UnifiedError): {\n    evidence: string[]\n    recommendations: string[]\n  } {\n    const evidence: string[] = []\n    const recommendations: string[] = []\n\n    switch (error.category) {\n      case ErrorCategory.NETWORK:\n        evidence.push('网络相关错误')\n        recommendations.push('检查网络连接', '增加重试机制', '实施熔断器')\n        break\n\n      case ErrorCategory.DATA:\n        evidence.push('数据相关错误')\n        recommendations.push('验证数据完整性', '实施数据校验', '准备回滚方案')\n        break\n\n      case ErrorCategory.SYSTEM:\n        evidence.push('系统相关错误')\n        recommendations.push('检查系统资源', '重启相关服务', '监控系统性能')\n        break\n\n      case ErrorCategory.BUSINESS:\n        evidence.push('业务逻辑错误')\n        recommendations.push('检查业务规则', '验证输入参数', '更新业务逻辑')\n        break\n\n      default:\n        evidence.push('未知错误类型')\n        recommendations.push('需要进一步调查')\n    }\n\n    return { evidence, recommendations }\n  }\n\n  private analyzeByContext(error: UnifiedError): {\n    evidence: string[]\n    recommendations: string[]\n  } {\n    const evidence: string[] = []\n    const recommendations: string[] = []\n\n    if (error.context) {\n      if (error.context.component) {\n        evidence.push(`发生在组件: ${error.context.component}`)\n        recommendations.push(`检查 ${error.context.component} 组件状态`)\n      }\n\n      if (error.context.operation) {\n        evidence.push(`发生在操作: ${error.context.operation}`)\n        recommendations.push(`验证 ${error.context.operation} 操作参数`)\n      }\n\n      if (error.context.environment) {\n        evidence.push(`环境: ${error.context.environment}`)\n        recommendations.push(`检查 ${error.context.environment} 环境配置`)\n      }\n    }\n\n    return { evidence, recommendations }\n  }\n\n  private async analyzeByHistory(error: UnifiedError): Promise<{\n    evidence: string[]\n    recommendations: string[]\n  }> {\n    // 这里应该查询历史错误数据\n    // 简化实现\n    return {\n      evidence: ['历史数据分析中...'],\n      recommendations: ['分析历史错误模式']\n    }\n  }\n\n  private findKnowledgeMatch(error: UnifiedError): KnowledgeEntry | null {\n    for (const [id, entry] of this.knowledgeBase) {\n      if (this.matchesKnowledgePattern(error, entry.pattern)) {\n        entry.usageCount++\n        entry.lastUsed = Date.now()\n        return entry\n      }\n    }\n    return null\n  }\n\n  private matchesKnowledgePattern(error: UnifiedError, pattern: ErrorPattern): boolean {\n    return pattern.category === error.category &&\n           pattern.severity === error.severity &&\n           (!pattern.errorCode || pattern.errorCode === error.code)\n  }\n\n  private calculateConfidence(evidenceCount: number, recommendationCount: number): number {\n    const baseConfidence = Math.min(evidenceCount * 0.2, 0.6)\n    const recommendationBonus = Math.min(recommendationCount * 0.1, 0.3)\n    return Math.min(baseConfidence + recommendationBonus, 0.9)\n  }\n\n  private generateRootCauseDescription(\n    error: UnifiedError,\n    evidence: string[],\n    recommendations: string[]\n  ): string {\n    return `根因分析结果：\n错误类型: ${error.category} (${error.severity})\n主要证据: ${evidence.slice(0, 3).join(', ')}\n建议措施: ${recommendations.slice(0, 2).join(', ')}`\n  }\n}\n\n/**\n * 自愈框架主类\n */\nexport class SelfHealingFramework {\n  private static instance: SelfHealingFramework\n  private rules: Map<string, HealingRule> = new Map()\n  private sessions: Map<string, HealingSession> = new Map()\n  private metrics: HealingMetrics = this.initializeMetrics()\n  private patternRecognizer: PatternRecognizer\n  private rootCauseAnalyzer: RootCauseAnalyzer\n  private recoveryManager: RecoveryStrategyManager\n  private monitoringService: ErrorMonitoringService\n\n  private constructor(\n    recoveryManager: RecoveryStrategyManager,\n    monitoringService: ErrorMonitoringService\n  ) {\n    this.recoveryManager = recoveryManager\n    this.monitoringService = monitoringService\n    this.patternRecognizer = new PatternRecognizer()\n    this.rootCauseAnalyzer = new RootCauseAnalyzer()\n    this.initializeDefaultRules()\n  }\n\n  public static getInstance(\n    recoveryManager: RecoveryStrategyManager,\n    monitoringService: ErrorMonitoringService\n  ): SelfHealingFramework {\n    if (!SelfHealingFramework.instance) {\n      SelfHealingFramework.instance = new SelfHealingFramework(recoveryManager, monitoringService)\n    }\n    return SelfHealingFramework.instance\n  }\n\n  /**\n   * 处理错误的自愈\n   */\n  public async handleSelfHealing(\n    error: UnifiedError,\n    context: ErrorContext\n  ): Promise<HealingResult | null> {\n    // 检查是否应该进行自愈\n    if (!this.shouldSelfHeal(error)) {\n      return null\n    }\n\n    // 创建自愈会话\n    const sessionId = this.generateSessionId()\n    const session: HealingSession = {\n      id: sessionId,\n      triggerError: error,\n      rule: this.findMatchingRule(error)!, // 已经检查过存在匹配规则\n      startTime: performance.now(),\n      status: 'active',\n      actions: [],\n      confidence: 0\n    }\n\n    this.sessions.set(sessionId, session)\n    this.metrics.totalSessions++\n\n    try {\n      // 模式识别\n      const pattern = await this.patternRecognizer.recognizePattern(error)\n\n      // 根因分析\n      const rootCauseAnalysis = await this.rootCauseAnalyzer.analyzeRootCause(error)\n\n      // 计算自愈置信度\n      session.confidence = this.calculateHealingConfidence(error, pattern, rootCauseAnalysis)\n\n      // 执行自愈动作\n      const result = await this.executeHealingActions(session, rootCauseAnalysis)\n\n      session.status = result.success ? 'completed' : 'failed'\n      session.result = result\n\n      this.updateMetrics(result)\n\n      // 记录自愈结果\n      await this.monitoringService.recordSelfHealing(error, result)\n\n      return result\n    } catch (healingError) {\n      const result: HealingResult = {\n        success: false,\n        actions: 0,\n        successfulActions: 0,\n        duration: performance.now() - session.startTime,\n        confidence: session.confidence,\n        effectiveness: 0,\n        message: '自愈过程发生错误',\n        details: { error: healingError }\n      }\n\n      session.status = 'failed'\n      session.result = result\n\n      this.updateMetrics(result)\n\n      return result\n    } finally {\n      session.endTime = performance.now()\n      this.cleanupSession(sessionId)\n    }\n  }\n\n  /**\n   * 注册自愈规则\n   */\n  public registerRule(rule: HealingRule): void {\n    this.rules.set(rule.id, rule)\n    console.log(`已注册自愈规则: ${rule.name} (${rule.id})`)\n  }\n\n  /**\n   * 取消注册自愈规则\n   */\n  public unregisterRule(ruleId: string): void {\n    this.rules.delete(ruleId)\n    console.log(`已取消注册自愈规则: ${ruleId}`)\n  }\n\n  /**\n   * 获取自愈指标\n   */\n  public getMetrics(): HealingMetrics {\n    return { ...this.metrics }\n  }\n\n  /**\n   * 获取活跃的自愈会话\n   */\n  public getActiveSessions(): HealingSession[] {\n    return Array.from(this.sessions.values())\n      .filter(session => session.status === 'active')\n  }\n\n  /**\n   * 学习新的自愈模式\n   */\n  public async learnFromError(error: UnifiedError, successfulRecovery: RecoveryResult): Promise<void> {\n    // 分析成功的恢复模式\n    if (successfulRecovery.success) {\n      const pattern = await this.patternRecognizer.recognizePattern(error)\n\n      if (pattern) {\n        // 基于成功恢复创建新的自愈规则\n        const newRule = this.createRuleFromRecovery(error, pattern, successfulRecovery)\n\n        if (newRule) {\n          this.registerRule(newRule)\n          console.log(`从成功恢复中学习到新规则: ${newRule.name}`)\n        }\n      }\n    }\n  }\n\n  private shouldSelfHeal(error: UnifiedError): boolean {\n    // 检查是否有匹配的自愈规则\n    const matchingRule = this.findMatchingRule(error)\n    return matchingRule !== null\n  }\n\n  private findMatchingRule(error: UnifiedError): HealingRule | null {\n    const matchingRules = Array.from(this.rules.values())\n      .filter(rule => this.matchesRule(error, rule))\n      .sort((a, b) => b.priority - a.priority)\n\n    return matchingRules[0] || null\n  }\n\n  private matchesRule(error: UnifiedError, rule: HealingRule): boolean {\n    // 检查冷却时间\n    if (rule.lastApplied && Date.now() - rule.lastApplied < rule.cooldownPeriod) {\n      return false\n    }\n\n    // 检查应用次数限制\n    if (rule.applicationCount >= rule.maxApplications) {\n      return false\n    }\n\n    // 检查错误模式匹配\n    return this.matchesPattern(error, rule.pattern)\n  }\n\n  private matchesPattern(error: UnifiedError, pattern: ErrorPattern): boolean {\n    return pattern.category === error.category &&\n           pattern.severity === error.severity &&\n           (!pattern.errorCode || pattern.errorCode === error.code) &&\n           (!pattern.messagePattern ||\n            error.message.toLowerCase().includes(pattern.messagePattern.toLowerCase()))\n  }\n\n  private calculateHealingConfidence(\n    error: UnifiedError,\n    pattern: HealingPattern | null,\n    rootCauseAnalysis: any\n  ): number {\n    let confidence = 0.5 // 基础置信度\n\n    // 模式匹配置信度\n    if (pattern) {\n      confidence += pattern.confidence * 0.3\n    }\n\n    // 根因分析置信度\n    confidence += rootCauseAnalysis.confidence * 0.2\n\n    // 错误严重度影响\n    if (error.severity === ErrorSeverity.LOW) {\n      confidence += 0.1\n    } else if (error.severity === ErrorSeverity.CRITICAL) {\n      confidence -= 0.1\n    }\n\n    return Math.max(0.1, Math.min(0.9, confidence))\n  }\n\n  private async executeHealingActions(\n    session: HealingSession,\n    rootCauseAnalysis: any\n  ): Promise<HealingResult> {\n    const startTime = performance.now()\n    let successfulActions = 0\n\n    for (const action of session.rule.actions) {\n      const execution: HealingExecution = {\n        action,\n        startTime: performance.now(),\n        status: 'pending'\n      }\n\n      session.actions.push(execution)\n\n      try {\n        execution.status = 'running'\n\n        // 执行自愈动作\n        const result = await this.executeAction(action, session.triggerError, rootCauseAnalysis)\n\n        execution.endTime = performance.now()\n        execution.status = 'completed'\n        execution.result = result\n        successfulActions++\n\n      } catch (actionError) {\n        execution.endTime = performance.now()\n        execution.status = 'failed'\n        execution.error = actionError\n\n        // 尝试回滚\n        if (action.rollback && action.rollbackAction) {\n          try {\n            execution.rollbackAttempted = true\n            const rollbackResult = await this.executeAction(\n              action.rollbackAction,\n              session.triggerError,\n              rootCauseAnalysis\n            )\n            execution.rollbackResult = rollbackResult\n          } catch (rollbackError) {\n            execution.rollbackResult = { error: rollbackError }\n          }\n        }\n      }\n    }\n\n    const duration = performance.now() - startTime\n    const effectiveness = successfulActions / session.rule.actions.length\n\n    return {\n      success: successfulActions > 0,\n      actions: session.rule.actions.length,\n      successfulActions,\n      duration,\n      confidence: session.confidence,\n      effectiveness,\n      message: `自愈完成，成功执行 ${successfulActions}/${session.rule.actions.length} 个动作`,\n      details: {\n        sessionId: session.id,\n        ruleId: session.rule.id,\n        rootCause: rootCauseAnalysis.rootCause\n      }\n    }\n  }\n\n  private async executeAction(\n    action: HealingAction,\n    error: UnifiedError,\n    rootCauseAnalysis: any\n  ): Promise<any> {\n    switch (action.type) {\n      case 'restart_service':\n        return this.restartService(action.target, action.parameters)\n      case 'clear_cache':\n        return this.clearCache(action.target, action.parameters)\n      case 'adjust_config':\n        return this.adjustConfig(action.target, action.parameters)\n      case 'retry_operation':\n        return this.retryOperation(error, action.parameters)\n      case 'rollback_data':\n        return this.rollbackData(action.target, action.parameters)\n      case 'custom':\n        return this.executeCustomAction(action.target, action.parameters)\n      default:\n        throw new Error(`未知的自愈动作类型: ${action.type}`)\n    }\n  }\n\n  private async restartService(serviceName: string, parameters: any): Promise<any> {\n    console.log(`重启服务: ${serviceName}`)\n    // 这里应该实现实际的服务重启逻辑\n    return { success: true, service: serviceName }\n  }\n\n  private async clearCache(cacheName: string, parameters: any): Promise<any> {\n    console.log(`清除缓存: ${cacheName}`)\n    // 这里应该实现实际的缓存清除逻辑\n    return { success: true, cache: cacheName }\n  }\n\n  private async adjustConfig(configName: string, parameters: any): Promise<any> {\n    console.log(`调整配置: ${configName}`, parameters)\n    // 这里应该实现实际的配置调整逻辑\n    return { success: true, config: configName }\n  }\n\n  private async retryOperation(error: UnifiedError, parameters: any): Promise<any> {\n    console.log('重试操作')\n    // 使用恢复管理器进行重试\n    const context: ErrorContext = {\n      operation: parameters.operation,\n      component: parameters.component,\n      environment: parameters.environment,\n      timestamp: Date.now()\n    }\n\n    return await this.recoveryManager.recover(error, context)\n  }\n\n  private async rollbackData(target: string, parameters: any): Promise<any> {\n    console.log(`回滚数据: ${target}`)\n    // 这里应该实现实际的数据回滚逻辑\n    return { success: true, target }\n  }\n\n  private async executeCustomAction(target: string, parameters: any): Promise<any> {\n    console.log(`执行自定义动作: ${target}`, parameters)\n    // 这里应该实现自定义动作逻辑\n    return { success: true, target }\n  }\n\n  private createRuleFromRecovery(\n    error: UnifiedError,\n    pattern: HealingPattern,\n    recovery: RecoveryResult\n  ): HealingRule | null {\n    // 基于成功恢复创建新的自愈规则\n    const rule: HealingRule = {\n      id: this.generateRuleId(),\n      name: `Learned Rule ${Date.now()}`,\n      description: `从成功恢复中学习的规则`,\n      pattern: pattern.errorPatterns[0],\n      conditions: [],\n      actions: this.convertRecoveryToActions(recovery),\n      priority: 5,\n      confidence: 0.6,\n      maxApplications: 100,\n      cooldownPeriod: 300000, // 5分钟\n      successRate: 1.0,\n      applicationCount: 0\n    }\n\n    return rule\n  }\n\n  private convertRecoveryToActions(recovery: RecoveryResult): HealingAction[] {\n    // 将恢复结果转换为自愈动作\n    // 简化实现\n    return [\n      {\n        type: 'retry_operation',\n        target: 'system',\n        parameters: {},\n        timeout: 30000\n      }\n    ]\n  }\n\n  private updateMetrics(result: HealingResult): void {\n    if (result.success) {\n      this.metrics.successfulSessions++\n    } else {\n      this.metrics.failedSessions++\n    }\n\n    // 更新平均自愈时间\n    const totalTime = this.metrics.averageHealingTime * (this.metrics.totalSessions - 1) + result.duration\n    this.metrics.averageHealingTime = totalTime / this.metrics.totalSessions\n\n    // 更新成功率\n    this.metrics.successRate = this.metrics.successfulSessions / this.metrics.totalSessions\n\n    // 更新平均置信度\n    const totalConfidence = this.metrics.averageConfidence * (this.metrics.totalSessions - 1) + result.confidence\n    this.metrics.averageConfidence = totalConfidence / this.metrics.totalSessions\n\n    // 更新自愈率\n    this.metrics.autoResolutionRate = this.metrics.successRate\n  }\n\n  private initializeDefaultRules(): void {\n    // 网络连接问题自愈规则\n    const networkRule: HealingRule = {\n      id: 'network-connection-heal',\n      name: '网络连接自愈',\n      description: '自动处理网络连接问题',\n      pattern: {\n        category: ErrorCategory.NETWORK,\n        severity: ErrorSeverity.MEDIUM,\n        messagePattern: 'connection'\n      },\n      conditions: [],\n      actions: [\n        {\n          type: 'retry_operation',\n          target: 'network-service',\n          parameters: { maxAttempts: 3, delay: 1000 },\n          timeout: 10000,\n          rollback: true,\n          rollbackAction: {\n            type: 'clear_cache',\n            target: 'network-cache',\n            parameters: {},\n            timeout: 5000\n          }\n        }\n      ],\n      priority: 10,\n      confidence: 0.8,\n      maxApplications: 50,\n      cooldownPeriod: 60000,\n      successRate: 0.0,\n      applicationCount: 0\n    }\n\n    // 系统资源问题自愈规则\n    const systemRule: HealingRule = {\n      id: 'system-resource-heal',\n      name: '系统资源自愈',\n      description: '自动处理系统资源问题',\n      pattern: {\n        category: ErrorCategory.SYSTEM,\n        severity: ErrorSeverity.HIGH,\n        messagePattern: 'resource'\n      },\n      conditions: [],\n      actions: [\n        {\n          type: 'clear_cache',\n          target: 'system-cache',\n          parameters: { clearAll: true },\n          timeout: 15000\n        },\n        {\n          type: 'adjust_config',\n          target: 'memory-config',\n          parameters: { limit: '50%' },\n          timeout: 5000\n        }\n      ],\n      priority: 8,\n      confidence: 0.7,\n      maxApplications: 30,\n      cooldownPeriod: 300000,\n      successRate: 0.0,\n      applicationCount: 0\n    }\n\n    this.registerRule(networkRule)\n    this.registerRule(systemRule)\n  }\n\n  private initializeMetrics(): HealingMetrics {\n    return {\n      totalSessions: 0,\n      successfulSessions: 0,\n      failedSessions: 0,\n      averageHealingTime: 0,\n      successRate: 0,\n      averageConfidence: 0,\n      ruleEffectiveness: new Map(),\n      patternDetectionRate: 0,\n      autoResolutionRate: 0,\n      falsePositiveRate: 0\n    }\n  }\n\n  private generateSessionId(): string {\n    return `healing-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n  }\n\n  private generateRuleId(): string {\n    return `rule-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n  }\n\n  private cleanupSession(sessionId: string): void {\n    const session = this.sessions.get(sessionId)\n    if (session && session.endTime) {\n      // 保留最近500个完成的会话\n      const completedSessions = Array.from(this.sessions.values())\n        .filter(s => s.endTime)\n        .sort((a, b) => (b.endTime || 0) - (a.endTime || 0))\n\n      if (completedSessions.length > 500) {\n        const toRemove = completedSessions.slice(500)\n        toRemove.forEach(s => this.sessions.delete(s.id))\n      }\n    }\n  }\n}"],"version":3}
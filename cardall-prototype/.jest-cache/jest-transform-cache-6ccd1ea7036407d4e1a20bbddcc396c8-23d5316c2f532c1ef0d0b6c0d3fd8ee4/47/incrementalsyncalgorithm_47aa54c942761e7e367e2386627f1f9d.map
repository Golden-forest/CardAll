{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\sync\\algorithms\\incremental-sync-algorithm.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\sync\\algorithms\\incremental-sync-algorithm.ts"],"sourcesContent":["// 增量同步算法实现\r\n// Week 3 Day 11-13 同步机制重构 - Project-Brainstormer\r\n\r\nimport { type SyncOperation, type SyncResult, type SyncVersion, type SyncMetrics } from '../types/sync-types'\r\nimport { supabase } from '../supabase'\r\nimport { db } from '../database-unified'\r\n\r\nexport class IncrementalSyncAlgorithm {\r\n  private syncHistory: SyncVersion[] = []\r\n  private lastSyncVersion: string | null = null\r\n  private compressionEnabled = true\r\n  \r\n  constructor() {\r\n    this.initializeSyncHistory()\r\n  }\r\n  \r\n  private async initializeSyncHistory() {\r\n    try {\r\n      // 从本地存储加载同步历史\r\n      const stored = localStorage.getItem('cardall_sync_history')\r\n      if (stored) {\r\n        this.syncHistory = JSON.parse(stored)\r\n        this.lastSyncVersion = this.syncHistory[this.syncHistory.length - 1]?.id || null\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to initialize sync history:', error)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 执行增量同步\r\n   * 核心算法：基于版本号的增量检测和智能批量处理\r\n   */\r\n  async performIncrementalSync(userId: string): Promise<SyncResult> {\r\n    const startTime = performance.now()\r\n    const result: SyncResult = {\r\n      success: true,\r\n      processedCount: 0,\r\n      failedCount: 0,\r\n      conflicts: [],\r\n      errors: [],\r\n      duration: 0,\r\n      bytesTransferred: 0\r\n    }\r\n    \r\n    try {\r\n      // 第1步：获取云端增量变更\r\n      const cloudChanges = await this.getCloudIncrementalChanges(userId)\r\n      \r\n      // 第2步：获取本地待同步操作\r\n      const localOperations = await this.getLocalPendingOperations(userId)\r\n      \r\n      // 第3步：冲突检测和解决\r\n      const conflicts = await this.detectAndResolveConflicts(cloudChanges, localOperations)\r\n      result.conflicts = conflicts\r\n      \r\n      // 第4步：应用云端变更\r\n      const cloudResult = await this.applyCloudChanges(cloudChanges, conflicts)\r\n      result.processedCount += cloudResult.processed\r\n      result.failedCount += cloudResult.failed\r\n      result.conflicts.push(...cloudResult.conflicts)\r\n      \r\n      // 第5步：上传本地变更\r\n      const localResult = await this.uploadLocalChanges(localOperations, conflicts)\r\n      result.processedCount += localResult.processed\r\n      result.failedCount += localResult.failed\r\n      result.errors.push(...localResult.errors)\r\n      \r\n      // 第6步：创建同步版本点\r\n      if (result.processedCount > 0 || result.conflicts.length > 0) {\r\n        await this.createSyncVersionPoint(userId, cloudChanges, localOperations, result)\r\n      }\r\n      \r\n      result.success = result.failedCount === 0\r\n      result.duration = performance.now() - startTime\r\n      \r\n    } catch (error) {\r\n      result.success = false\r\n      result.errors.push({\r\n        id: crypto.randomUUID(),\r\n        operationId: 'incremental-sync',\r\n        errorType: 'server_error',\r\n        message: error instanceof Error ? error.message : 'Unknown error',\r\n        timestamp: new Date(),\r\n        retryable: true,\r\n        resolved: false\r\n      })\r\n      result.duration = performance.now() - startTime\r\n    }\r\n    \r\n    return result\r\n  }\r\n  \r\n  /**\r\n   * 获取云端增量变更\r\n   * 使用时间戳 + 版本号的双重检测机制\r\n   */\r\n  private async getCloudIncrementalChanges(userId: string): Promise<SyncOperation[]> {\r\n    const lastSyncTime = this.getLastSyncTime()\r\n    const changes: SyncOperation[] = []\r\n    \r\n    try {\r\n      // 并行查询各种实体的变更\r\n      const [cardChanges, folderChanges, tagChanges] = await Promise.all([\r\n        this.getEntityChanges('cards', userId, lastSyncTime),\r\n        this.getEntityChanges('folders', userId, lastSyncTime),\r\n        this.getEntityChanges('tags', userId, lastSyncTime)\r\n      ])\r\n      \r\n      // 合并并排序变更\r\n      changes.push(...cardChanges, ...folderChanges, ...tagChanges)\r\n      changes.sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime())\r\n      \r\n      console.log(`📥 检测到 ${changes.length} 个云端变更`)\r\n      return changes\r\n      \r\n    } catch (error) {\r\n      console.error('Failed to get cloud changes:', error)\r\n      return []\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 获取特定实体的变更\r\n   * 增量查询优化：只获取必要的字段\r\n   */\r\n  private async getEntityChanges(\r\n    entity: string, \r\n    userId: string, \r\n    since: Date\r\n  ): Promise<SyncOperation[]> {\r\n    const { data, error } = await supabase\r\n      .from(entity)\r\n      .select(`\r\n        id,\r\n        created_at,\r\n        updated_at,\r\n        sync_version,\r\n        is_deleted,\r\n        user_id,\r\n        ${entity === 'cards' ? 'front_content, back_content, style, folder_id' : ''}\r\n        ${entity === 'folders' ? 'name, parent_id' : ''}\r\n        ${entity === 'tags' ? 'name, color' : ''}\r\n      `)\r\n      .eq('user_id', userId)\r\n      .gt('updated_at', since.toISOString())\r\n      .order('updated_at', { ascending: true })\r\n    \r\n    if (error) {\r\n      throw error\r\n    }\r\n    \r\n    return (data || []).map(item => ({\r\n      id: crypto.randomUUID(),\r\n      type: item.is_deleted ? 'delete' : 'update',\r\n      entity: entity.slice(0, -1) as any, // 移除复数形式的 's'\r\n      entityId: item.id,\r\n      data: this.transformCloudData(item, entity),\r\n      timestamp: new Date(item.updated_at),\r\n      retryCount: 0,\r\n      priority: this.calculatePriority(item),\r\n      userId: item.user_id,\r\n      syncVersion: item.sync_version,\r\n      metadata: {\r\n        source: 'cloud',\r\n        operation: item.is_deleted ? 'delete' : 'update',\r\n        entityVersion: item.sync_version\r\n      }\r\n    }))\r\n  }\r\n  \r\n  /**\r\n   * 获取本地待同步操作\r\n   * 从数据库的同步队列中获取\r\n   */\r\n  private async getLocalPendingOperations(userId: string): Promise<SyncOperation[]> {\r\n    try {\r\n      const operations = await db.syncQueue\r\n        .where('userId')\r\n        .equals(userId)\r\n        .and(op => op.status === 'pending' || op.status === 'retry')\r\n        .toArray()\r\n      \r\n      // 按优先级和时间排序\r\n      return operations\r\n        .map(op => ({\r\n          id: op.id,\r\n          type: op.type,\r\n          entity: op.entity,\r\n          entityId: op.entityId,\r\n          data: op.data,\r\n          timestamp: op.timestamp,\r\n          retryCount: op.retryCount,\r\n          priority: op.priority,\r\n          userId: op.userId,\r\n          syncVersion: op.syncVersion,\r\n          metadata: op.metadata\r\n        }))\r\n        .sort((a, b) => {\r\n          // 优先级排序\r\n          const priorityOrder = { high: 3, medium: 2, low: 1 }\r\n          const priorityDiff = priorityOrder[b.priority] - priorityOrder[a.priority]\r\n          if (priorityDiff !== 0) return priorityDiff\r\n          \r\n          // 时间排序\r\n          return new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\r\n        })\r\n      \r\n    } catch (error) {\r\n      console.error('Failed to get local operations:', error)\r\n      return []\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 智能冲突检测和解决\r\n   * 基于实体类型、时间戳和变更内容的综合分析\r\n   */\r\n  private async detectAndResolveConflicts(\r\n    cloudChanges: SyncOperation[],\r\n    localOperations: SyncOperation[]\r\n  ) {\r\n    const conflicts: any[] = []\r\n    \r\n    // 构建实体变更映射\r\n    const cloudEntityMap = new Map<string, SyncOperation>()\r\n    const localEntityMap = new Map<string, SyncOperation>()\r\n    \r\n    cloudChanges.forEach(op => cloudEntityMap.set(`${op.entity}-${op.entityId}`, op))\r\n    localOperations.forEach(op => localEntityMap.set(`${op.entity}-${op.entityId}`, op))\r\n    \r\n    // 检测冲突\r\n    for (const [entityKey, cloudOp] of cloudEntityMap) {\r\n      const localOp = localEntityMap.get(entityKey)\r\n      \r\n      if (localOp) {\r\n        // 检测并发修改冲突\r\n        const conflict = await this.analyzeConflict(cloudOp, localOp)\r\n        if (conflict) {\r\n          conflicts.push(conflict)\r\n          \r\n          // 尝试自动解决\r\n          const resolution = await this.attemptAutoResolution(conflict)\r\n          if (resolution) {\r\n            conflict.resolution = resolution\r\n            conflict.autoResolved = true\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    console.log(`🔍 检测到 ${conflicts.length} 个冲突，自动解决 ${conflicts.filter(c => c.autoResolved).length} 个`)\r\n    return conflicts\r\n  }\r\n  \r\n  /**\r\n   * 分析冲突类型和严重程度\r\n   */\r\n  private async analyzeConflict(cloudOp: SyncOperation, localOp: SyncOperation) {\r\n    const cloudTime = new Date(cloudOp.timestamp).getTime()\r\n    const localTime = new Date(localOp.timestamp).getTime()\r\n    const timeDiff = Math.abs(cloudTime - localTime)\r\n    \r\n    // 时间差异小于1秒，认为是并发修改\r\n    if (timeDiff < 1000) {\r\n      return {\r\n        id: crypto.randomUUID(),\r\n        entityId: cloudOp.entityId,\r\n        entityType: cloudOp.entity,\r\n        localData: localOp.data,\r\n        cloudData: cloudOp.data,\r\n        conflictType: 'concurrent_modification' as const,\r\n        severity: 'medium' as const,\r\n        timestamp: new Date(),\r\n        autoResolved: false\r\n      }\r\n    }\r\n    \r\n    // 版本不匹配\r\n    if (cloudOp.syncVersion !== localOp.syncVersion) {\r\n      return {\r\n        id: crypto.randomUUID(),\r\n        entityId: cloudOp.entityId,\r\n        entityType: cloudOp.entity,\r\n        localData: localOp.data,\r\n        cloudData: cloudOp.data,\r\n        conflictType: 'version_mismatch' as const,\r\n        severity: 'high' as const,\r\n        timestamp: new Date(),\r\n        autoResolved: false\r\n      }\r\n    }\r\n    \r\n    return null\r\n  }\r\n  \r\n  /**\r\n   * 尝试自动解决冲突\r\n   * 基于实体类型和变更内容的智能策略\r\n   */\r\n  private async attemptAutoResolution(conflict: any): Promise<string | null> {\r\n    // 对于删除操作，总是采用删除（优先保留删除操作）\r\n    if (conflict.localData.isDeleted || conflict.cloudData.isDeleted) {\r\n      return 'local_wins' // 本地删除操作优先\r\n    }\r\n    \r\n    // 对于不同实体类型采用不同策略\r\n    switch (conflict.entityType) {\r\n      case 'card':\r\n        // 卡片内容合并：比较内容复杂度\r\n        return await this.resolveCardConflict(conflict)\r\n      \r\n      case 'folder':\r\n        // 文件夹：基于名称和层级\r\n        return await this.resolveFolderConflict(conflict)\r\n      \r\n      case 'tag':\r\n        // 标签：基于名称和颜色\r\n        return await this.resolveTagConflict(conflict)\r\n      \r\n      default:\r\n        // 默认策略：最后写入获胜\r\n        const cloudTime = new Date(conflict.cloudData.updatedAt).getTime()\r\n        const localTime = new Date(conflict.localData.updatedAt).getTime()\r\n        return cloudTime > localTime ? 'cloud_wins' : 'local_wins'\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 卡片冲突解决策略\r\n   */\r\n  private async resolveCardConflict(conflict: any): Promise<string> {\r\n    const localContent = conflict.localData.frontContent + conflict.localData.backContent\r\n    const cloudContent = conflict.cloudData.frontContent + conflict.cloudData.backContent\r\n    \r\n    // 如果内容差异很小，采用云端版本\r\n    const contentDiff = this.calculateContentDifference(localContent, cloudContent)\r\n    if (contentDiff < 0.1) { // 10% 差异阈值\r\n      return 'cloud_wins'\r\n    }\r\n    \r\n    // 复杂冲突，需要手动解决\r\n    return null\r\n  }\r\n  \r\n  /**\r\n   * 文件夹冲突解决策略\r\n   */\r\n  private async resolveFolderConflict(conflict: any): Promise<string> {\r\n    // 文件夹名称冲突，采用时间较新的\r\n    const cloudTime = new Date(conflict.cloudData.updatedAt).getTime()\r\n    const localTime = new Date(conflict.localData.updatedAt).getTime()\r\n    return cloudTime > localTime ? 'cloud_wins' : 'local_wins'\r\n  }\r\n  \r\n  /**\r\n   * 标签冲突解决策略\r\n   */\r\n  private async resolveTagConflict(conflict: any): Promise<string> {\r\n    // 标签主要看名称，名称相同则合并其他属性\r\n    if (conflict.localData.name === conflict.cloudData.name) {\r\n      return 'merge'\r\n    }\r\n    \r\n    // 名称不同，创建新标签\r\n    return 'local_wins'\r\n  }\r\n  \r\n  /**\r\n   * 应用云端变更到本地\r\n   * 批量处理和事务保证\r\n   */\r\n  private async applyCloudChanges(\r\n    changes: SyncOperation[], \r\n    conflicts: any[]\r\n  ): Promise<{\r\n    processed: number\r\n    failed: number\r\n    conflicts: any[]\r\n  }> {\r\n    let processed = 0\r\n    let failed = 0\r\n    const newConflicts: any[] = []\r\n    \r\n    try {\r\n      // 按实体类型分组处理\r\n      const groupedChanges = this.groupOperationsByEntity(changes)\r\n      \r\n      for (const [entityType, ops] of groupedChanges.entries()) {\r\n        const result = await this.applyEntityChanges(entityType, ops, conflicts)\r\n        processed += result.processed\r\n        failed += result.failed\r\n        newConflicts.push(...result.conflicts)\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('Failed to apply cloud changes:', error)\r\n      failed = changes.length\r\n    }\r\n    \r\n    return { processed, failed, conflicts: newConflicts }\r\n  }\r\n  \r\n  /**\r\n   * 上传本地变更到云端\r\n   * 智能批量上传和网络优化\r\n   */\r\n  private async uploadLocalChanges(\r\n    operations: SyncOperation[], \r\n    conflicts: any[]\r\n  ): Promise<{\r\n    processed: number\r\n    failed: number\r\n    errors: any[]\r\n  }> {\r\n    let processed = 0\r\n    let failed = 0\r\n    const errors: any[] = []\r\n    \r\n    try {\r\n      // 过滤掉有冲突的操作\r\n      const conflictEntities = new Set(conflicts.map(c => `${c.entityType}-${c.entityId}`))\r\n      const filteredOps = operations.filter(op => \r\n        !conflictEntities.has(`${op.entity}-${op.entityId}`)\r\n      )\r\n      \r\n      // 批量上传优化\r\n      const batchSize = 10 // 每批10个操作\r\n      for (let i = 0; i < filteredOps.length; i += batchSize) {\r\n        const batch = filteredOps.slice(i, i + batchSize)\r\n        const result = await this.uploadBatch(batch)\r\n        \r\n        processed += result.processed\r\n        failed += result.failed\r\n        errors.push(...result.errors)\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('Failed to upload local changes:', error)\r\n      failed = operations.length\r\n    }\r\n    \r\n    return { processed, failed, errors }\r\n  }\r\n  \r\n  // 辅助方法\r\n  private getLastSyncTime(): Date {\r\n    return this.syncHistory.length > 0 \r\n      ? new Date(this.syncHistory[this.syncHistory.length - 1].timestamp)\r\n      : new Date(0)\r\n  }\r\n  \r\n  private transformCloudData(item: any, entity: string): any {\r\n    // 根据实体类型转换云端数据格式\r\n    switch (entity) {\r\n      case 'cards':\r\n        return {\r\n          frontContent: item.front_content,\r\n          backContent: item.back_content,\r\n          style: item.style,\r\n          folderId: item.folder_id,\r\n          isDeleted: item.is_deleted,\r\n          syncVersion: item.sync_version,\r\n          updatedAt: item.updated_at\r\n        }\r\n      \r\n      case 'folders':\r\n        return {\r\n          name: item.name,\r\n          parentId: item.parent_id,\r\n          isDeleted: item.is_deleted,\r\n          syncVersion: item.sync_version,\r\n          updatedAt: item.updated_at\r\n        }\r\n      \r\n      case 'tags':\r\n        return {\r\n          name: item.name,\r\n          color: item.color,\r\n          isDeleted: item.is_deleted,\r\n          syncVersion: item.sync_version,\r\n          updatedAt: item.updated_at\r\n        }\r\n      \r\n      default:\r\n        return item\r\n    }\r\n  }\r\n  \r\n  private calculatePriority(item: any): 'high' | 'medium' | 'low' {\r\n    // 根据实体类型和操作类型计算优先级\r\n    if (item.is_deleted) return 'high'\r\n    if (item.entity === 'folder') return 'medium'\r\n    return 'low'\r\n  }\r\n  \r\n  private calculateContentDifference(content1: string, content2: string): number {\r\n    // 简单的内容差异计算\r\n    const longer = Math.max(content1.length, content2.length)\r\n    if (longer === 0) return 0\r\n    \r\n    const distance = this.levenshteinDistance(content1, content2)\r\n    return distance / longer\r\n  }\r\n  \r\n  private levenshteinDistance(str1: string, str2: string): number {\r\n    const matrix = Array(str2.length + 1).fill(null).map(() => Array(str1.length + 1).fill(null))\r\n    \r\n    for (let i = 0; i <= str1.length; i++) matrix[0][i] = i\r\n    for (let j = 0; j <= str2.length; j++) matrix[j][0] = j\r\n    \r\n    for (let j = 1; j <= str2.length; j++) {\r\n      for (let i = 1; i <= str1.length; i++) {\r\n        const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1\r\n        matrix[j][i] = Math.min(\r\n          matrix[j][i - 1] + 1,\r\n          matrix[j - 1][i] + 1,\r\n          matrix[j - 1][i - 1] + indicator\r\n        )\r\n      }\r\n    }\r\n    \r\n    return matrix[str2.length][str1.length]\r\n  }\r\n  \r\n  private groupOperationsByEntity(operations: SyncOperation[]): Map<string, SyncOperation[]> {\r\n    const groups = new Map<string, SyncOperation[]>()\r\n    \r\n    operations.forEach(op => {\r\n      if (!groups.has(op.entity)) {\r\n        groups.set(op.entity, [])\r\n      }\r\n      groups.get(op.entity)!.push(op)\r\n    })\r\n    \r\n    return groups\r\n  }\r\n  \r\n  private async applyEntityChanges(\r\n    entityType: string, \r\n    operations: SyncOperation[], \r\n    conflicts: any[]\r\n  ): Promise<{\r\n    processed: number\r\n    failed: number\r\n    conflicts: any[]\r\n  }> {\r\n    // 具体实现根据实体类型而定\r\n    // 这里简化处理，实际需要根据不同实体类型实现\r\n    return {\r\n      processed: operations.length,\r\n      failed: 0,\r\n      conflicts: []\r\n    }\r\n  }\r\n  \r\n  private async uploadBatch(operations: SyncOperation[]): Promise<{\r\n    processed: number\r\n    failed: number\r\n    errors: any[]\r\n  }> {\r\n    // 批量上传实现\r\n    // 这里简化处理，实际需要实现Supabase批量操作\r\n    return {\r\n      processed: operations.length,\r\n      failed: 0,\r\n      errors: []\r\n    }\r\n  }\r\n  \r\n  private async createSyncVersionPoint(\r\n    userId: string,\r\n    cloudChanges: SyncOperation[],\r\n    localOperations: SyncOperation[],\r\n    result: any\r\n  ): Promise<void> {\r\n    const version: SyncVersion = {\r\n      id: crypto.randomUUID(),\r\n      timestamp: new Date(),\r\n      operations: [...cloudChanges, ...localOperations],\r\n      checksum: this.calculateChecksum([...cloudChanges, ...localOperations]),\r\n      description: `Incremental sync - ${result.processedCount} operations`,\r\n      rollbackPoint: result.failedCount === 0\r\n    }\r\n    \r\n    this.syncHistory.push(version)\r\n    \r\n    // 保持最近100个版本点\r\n    if (this.syncHistory.length > 100) {\r\n      this.syncHistory = this.syncHistory.slice(-100)\r\n    }\r\n    \r\n    // 持久化保存\r\n    try {\r\n      localStorage.setItem('cardall_sync_history', JSON.stringify(this.syncHistory))\r\n      this.lastSyncVersion = version.id\r\n    } catch (error) {\r\n      console.error('Failed to save sync history:', error)\r\n    }\r\n  }\r\n  \r\n  private calculateChecksum(operations: SyncOperation[]): string {\r\n    // 简单的校验和计算\r\n    const data = JSON.stringify(operations.map(op => ({\r\n      id: op.id,\r\n      type: op.type,\r\n      entity: op.entity,\r\n      entityId: op.entityId,\r\n      timestamp: op.timestamp\r\n    })))\r\n    \r\n    let hash = 0\r\n    for (let i = 0; i < data.length; i++) {\r\n      const char = data.charCodeAt(i)\r\n      hash = ((hash << 5) - hash) + char\r\n      hash = hash & hash // 转换为32位整数\r\n    }\r\n    \r\n    return Math.abs(hash).toString(16)\r\n  }\r\n  \r\n  /**\r\n   * 获取同步指标\r\n   */\r\n  getSyncMetrics(): SyncMetrics {\r\n    const totalOps = this.syncHistory.reduce((sum, version) => sum + version.operations.length, 0)\r\n    const successfulOps = this.syncHistory.filter(v => v.rollbackPoint).length\r\n    \r\n    return {\r\n      totalOperations: totalOps,\r\n      successRate: totalOps > 0 ? successfulOps / this.syncHistory.length : 1,\r\n      averageResponseTime: 0, // 需要从实际同步中计算\r\n      bandwidthUsage: 0,     // 需要从实际传输中计算\r\n      conflictRate: 0,       // 需要从冲突统计中计算\r\n      retryCount: 0,        // 需要从重试统计中计算\r\n      lastSyncTimestamp: this.syncHistory.length > 0 \r\n        ? new Date(this.syncHistory[this.syncHistory.length - 1].timestamp)\r\n        : new Date(0)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 清理旧的同步历史\r\n   */\r\n  async cleanupSyncHistory(keepDays: number = 30): Promise<void> {\r\n    const cutoffDate = new Date(Date.now() - keepDays * 24 * 60 * 60 * 1000)\r\n    \r\n    this.syncHistory = this.syncHistory.filter(version => \r\n      new Date(version.timestamp) > cutoffDate\r\n    )\r\n    \r\n    try {\r\n      localStorage.setItem('cardall_sync_history', JSON.stringify(this.syncHistory))\r\n    } catch (error) {\r\n      console.error('Failed to cleanup sync history:', error)\r\n    }\r\n  }\r\n}\r\n\r\n// 导出单例实例\r\nexport const incrementalSyncAlgorithm = new IncrementalSyncAlgorithm()"],"version":3}
d120abf22a7c5fd51e512b1c1cc4a01c
"use strict";
/**
 * 恢复策略管理器
 *
 * 实现统一的恢复策略管理，包括：
 * - 智能重试策略
 * - 数据回滚机制
 * - 降级处理策略
 * - 自愈恢复框架
 * - 恢复过程监控
 * - 恢复结果验证
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecoveryStrategyManager = exports.DegradedModeStrategy = exports.RollbackStrategy = exports.CircuitBreakerStrategy = exports.RetryStrategy = void 0;
const types_1 = require("./types");
/**
 * 重试策略实现
 */
class RetryStrategy {
    constructor(config) {
        Object.defineProperty(this, "config", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: config
        });
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 'retry'
        });
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: '智能重试'
        });
        Object.defineProperty(this, "description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: '基于错误类型和上下文的智能重试策略'
        });
        Object.defineProperty(this, "priority", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1
        });
        Object.defineProperty(this, "maxAttempts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 5
        });
        Object.defineProperty(this, "cooldownPeriod", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1000
        });
    }
    canHandle(error) {
        return this.config.retryableErrors.includes(error.category) ||
            error.category === types_1.ErrorCategory.NETWORK ||
            error.category === types_1.ErrorCategory.SYSTEM;
    }
    async execute(error, context) {
        const startTime = performance.now();
        let attempts = 0;
        let lastError = null;
        for (attempts = 1; attempts <= this.config.maxAttempts; attempts++) {
            try {
                // 计算重试延迟
                const delay = this.calculateDelay(attempts);
                if (attempts > 1) {
                    await this.sleep(delay);
                }
                // 执行重试操作
                const result = await this.executeRetry(error, context);
                return {
                    success: true,
                    strategy: this.id,
                    duration: performance.now() - startTime,
                    attempts,
                    message: `重试成功，共尝试 ${attempts} 次`,
                    nextAction: 'continue'
                };
            }
            catch (retryError) {
                lastError = retryError;
                // 检查是否应该继续重试
                if (!this.shouldContinueRetry(retryError, attempts)) {
                    break;
                }
            }
        }
        return {
            success: false,
            strategy: this.id,
            duration: performance.now() - startTime,
            attempts,
            message: `重试失败，共尝试 ${attempts} 次`,
            details: { error: lastError },
            nextAction: 'fallback',
            fallbackStrategy: 'circuit-breaker'
        };
    }
    calculateDelay(attempt) {
        const exponentialDelay = Math.min(this.config.baseDelay * Math.pow(this.config.backoffMultiplier, attempt - 1), this.config.maxDelay);
        if (this.config.jitter) {
            return exponentialDelay * (0.8 + Math.random() * 0.4);
        }
        return exponentialDelay;
    }
    shouldContinueRetry(error, attempts) {
        // 检查是否达到最大尝试次数
        if (attempts >= this.config.maxAttempts) {
            return false;
        }
        // 检查错误类型是否支持重试
        if (error instanceof Error && !this.isRetryableError(error)) {
            return false;
        }
        return true;
    }
    isRetryableError(error) {
        const nonRetryableErrors = [
            'AuthenticationError',
            'AuthorizationError',
            'ValidationError',
            'NotFoundError'
        ];
        return !nonRetryableErrors.some(type => error.name === type);
    }
    async executeRetry(error, context) {
        // 根据错误类型执行相应的重试逻辑
        switch (error.category) {
            case types_1.ErrorCategory.NETWORK:
                return this.retryNetworkOperation(error, context);
            case types_1.ErrorCategory.SYSTEM:
                return this.retrySystemOperation(error, context);
            default:
                throw new Error(`不支持的错误类型重试: ${error.category}`);
        }
    }
    async retryNetworkOperation(error, context) {
        // 实现网络操作重试逻辑
        const { operation } = context;
        if (operation && operation.type === 'sync') {
            // 重试同步操作
            return this.retrySyncOperation(operation);
        }
        throw new Error('不支持的网络操作重试');
    }
    async retrySystemOperation(error, context) {
        // 实现系统操作重试逻辑
        await this.sleep(100); // 简单延迟
        return true;
    }
    async retrySyncOperation(operation) {
        // 实现同步操作重试
        // 这里应该调用实际的同步服务
        return { success: true };
    }
    async sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}
exports.RetryStrategy = RetryStrategy;
/**
 * 熔断器策略实现
 */
class CircuitBreakerStrategy {
    constructor(threshold = 5, timeout = 60000) {
        Object.defineProperty(this, "threshold", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: threshold
        });
        Object.defineProperty(this, "timeout", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: timeout
        });
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 'circuit-breaker'
        });
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: '熔断器'
        });
        Object.defineProperty(this, "description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: '防止级联故障的熔断器策略'
        });
        Object.defineProperty(this, "priority", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 2
        });
        Object.defineProperty(this, "maxAttempts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1
        });
        Object.defineProperty(this, "cooldownPeriod", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 5000
        });
        Object.defineProperty(this, "state", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 'closed'
        });
        Object.defineProperty(this, "failureCount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "lastFailureTime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "successCount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
    }
    canHandle(error) {
        return this.state === 'open' ? false : true;
    }
    async execute(error, context) {
        const startTime = performance.now();
        if (this.state === 'open') {
            // 检查是否可以尝试恢复
            if (Date.now() - this.lastFailureTime > this.timeout) {
                this.state = 'half-open';
                this.successCount = 0;
            }
            else {
                return {
                    success: false,
                    strategy: this.id,
                    duration: performance.now() - startTime,
                    attempts: 1,
                    message: '熔断器开启，拒绝请求',
                    nextAction: 'fallback',
                    fallbackStrategy: 'degraded-mode'
                };
            }
        }
        try {
            // 执行操作
            const result = await this.executeProtectedOperation(error, context);
            this.onSuccess();
            return {
                success: true,
                strategy: this.id,
                duration: performance.now() - startTime,
                attempts: 1,
                message: '熔断器保护下操作成功',
                nextAction: 'continue'
            };
        }
        catch (operationError) {
            this.onFailure();
            return {
                success: false,
                strategy: this.id,
                duration: performance.now() - startTime,
                attempts: 1,
                message: '熔断器保护下操作失败',
                details: { error: operationError },
                nextAction: this.state === 'open' ? 'fallback' : 'retry',
                fallbackStrategy: 'degraded-mode'
            };
        }
    }
    onSuccess() {
        if (this.state === 'half-open') {
            this.successCount++;
            if (this.successCount >= 3) {
                this.state = 'closed';
                this.failureCount = 0;
            }
        }
    }
    onFailure() {
        this.failureCount++;
        this.lastFailureTime = Date.now();
        if (this.failureCount >= this.threshold) {
            this.state = 'open';
        }
    }
    async executeProtectedOperation(error, context) {
        // 执行受保护的操作
        // 这里应该调用实际的服务，但为了安全而进行保护
        throw new Error('操作执行失败');
    }
}
exports.CircuitBreakerStrategy = CircuitBreakerStrategy;
/**
 * 数据回滚策略实现
 */
class RollbackStrategy {
    constructor(config) {
        Object.defineProperty(this, "config", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: config
        });
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 'rollback'
        });
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: '数据回滚'
        });
        Object.defineProperty(this, "description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: '数据一致性问题的回滚策略'
        });
        Object.defineProperty(this, "priority", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 3
        });
        Object.defineProperty(this, "maxAttempts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 3
        });
        Object.defineProperty(this, "cooldownPeriod", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 2000
        });
    }
    canHandle(error) {
        return error.category === types_1.ErrorCategory.DATA ||
            error.category === types_1.ErrorCategory.BUSINESS ||
            error.severity === types_1.ErrorSeverity.CRITICAL;
    }
    async execute(error, context) {
        const startTime = performance.now();
        try {
            // 查找可用的回滚点
            const rollbackPoint = await this.findRollbackPoint(error, context);
            if (!rollbackPoint) {
                return {
                    success: false,
                    strategy: this.id,
                    duration: performance.now() - startTime,
                    attempts: 1,
                    message: '未找到可用的回滚点',
                    nextAction: 'fallback',
                    fallbackStrategy: 'manual-intervention'
                };
            }
            // 执行回滚操作
            const rollbackResult = await this.executeRollback(rollbackPoint);
            // 验证回滚结果
            const validation = await this.validateRollback(rollbackPoint, rollbackResult);
            if (!validation.success) {
                return {
                    success: false,
                    strategy: this.id,
                    duration: performance.now() - startTime,
                    attempts: 1,
                    message: '回滚验证失败',
                    details: validation,
                    nextAction: 'escalate'
                };
            }
            return {
                success: true,
                strategy: this.id,
                duration: performance.now() - startTime,
                attempts: 1,
                message: `成功回滚到检查点: ${rollbackPoint.id}`,
                details: { rollbackPoint, rollbackResult },
                nextAction: 'continue'
            };
        }
        catch (rollbackError) {
            return {
                success: false,
                strategy: this.id,
                duration: performance.now() - startTime,
                attempts: 1,
                message: '回滚操作失败',
                details: { error: rollbackError },
                nextAction: 'escalate'
            };
        }
    }
    async findRollbackPoint(error, context) {
        // 查找最近的可用回滚点
        // 这里应该查询检查点存储
        return {
            id: 'checkpoint-' + Date.now(),
            operation: context.operation?.type || 'unknown',
            timestamp: Date.now() - 30000, // 30秒前
            state: {},
            metadata: {},
            dependencies: [],
            rollbackPoint: true
        };
    }
    async executeRollback(checkpoint) {
        // 执行回滚操作
        // 这里应该实现实际的数据回滚逻辑
        return { success: true, checkpointId: checkpoint.id };
    }
    async validateRollback(checkpoint, result) {
        // 验证回滚结果
        // 这里应该实现数据一致性检查
        return { success: true, message: '回滚验证通过' };
    }
}
exports.RollbackStrategy = RollbackStrategy;
/**
 * 降级模式策略实现
 */
class DegradedModeStrategy {
    constructor(config) {
        Object.defineProperty(this, "config", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: config
        });
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 'degraded-mode'
        });
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: '降级模式'
        });
        Object.defineProperty(this, "description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: '功能降级以维持基本服务'
        });
        Object.defineProperty(this, "priority", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 4
        });
        Object.defineProperty(this, "maxAttempts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1
        });
        Object.defineProperty(this, "cooldownPeriod", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
    }
    canHandle(error) {
        return this.config.enabled && (error.severity === types_1.ErrorSeverity.HIGH ||
            error.category === types_1.ErrorCategory.SYSTEM ||
            error.category === types_1.ErrorCategory.NETWORK);
    }
    async execute(error, context) {
        const startTime = performance.now();
        try {
            // 查找合适的降级策略
            const strategy = this.findFallbackStrategy(error);
            if (!strategy) {
                return {
                    success: false,
                    strategy: this.id,
                    duration: performance.now() - startTime,
                    attempts: 1,
                    message: '未找到合适的降级策略',
                    nextAction: 'escalate'
                };
            }
            // 执行降级策略
            const result = await Promise.race([
                strategy.action(error, context),
                new Promise((_, reject) => setTimeout(() => reject(new Error('降级策略执行超时')), strategy.timeout))
            ]);
            return {
                success: true,
                strategy: this.id,
                duration: performance.now() - startTime,
                attempts: 1,
                message: `成功启用降级模式: ${strategy.name}`,
                details: { strategy: strategy.id, result },
                nextAction: 'continue'
            };
        }
        catch (fallbackError) {
            return {
                success: false,
                strategy: this.id,
                duration: performance.now() - startTime,
                attempts: 1,
                message: '降级策略执行失败',
                details: { error: fallbackError },
                nextAction: 'escalate'
            };
        }
    }
    findFallbackStrategy(error) {
        return this.config.strategies
            .filter(strategy => strategy.condition(error))
            .sort((a, b) => b.priority - a.priority)[0];
    }
}
exports.DegradedModeStrategy = DegradedModeStrategy;
/**
 * 恢复策略管理器主类
 */
class RecoveryStrategyManager {
    constructor(monitoringService) {
        Object.defineProperty(this, "strategies", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        Object.defineProperty(this, "sessions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        Object.defineProperty(this, "metrics", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.initializeMetrics()
        });
        Object.defineProperty(this, "monitoringService", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.monitoringService = monitoringService;
        this.initializeDefaultStrategies();
    }
    static getInstance(monitoringService) {
        if (!RecoveryStrategyManager.instance) {
            RecoveryStrategyManager.instance = new RecoveryStrategyManager(monitoringService);
        }
        return RecoveryStrategyManager.instance;
    }
    /**
     * 注册恢复策略
     */
    registerStrategy(strategy) {
        this.strategies.set(strategy.id, strategy);
        console.log(`已注册恢复策略: ${strategy.name} (${strategy.id})`);
    }
    /**
     * 取消注册恢复策略
     */
    unregisterStrategy(strategyId) {
        this.strategies.delete(strategyId);
        console.log(`已取消注册恢复策略: ${strategyId}`);
    }
    /**
     * 执行错误恢复
     */
    async recover(error, context) {
        const sessionId = this.generateSessionId();
        const session = {
            id: sessionId,
            error,
            context,
            startTime: performance.now(),
            status: 'active',
            strategies: [],
            checkpoints: []
        };
        this.sessions.set(sessionId, session);
        this.metrics.totalRecoveries++;
        try {
            // 查找合适的恢复策略
            const strategy = this.findBestStrategy(error);
            if (!strategy) {
                const result = {
                    success: false,
                    strategy: 'none',
                    duration: 0,
                    attempts: 0,
                    message: '未找到合适的恢复策略',
                    nextAction: 'escalate'
                };
                session.status = 'failed';
                session.result = result;
                this.updateMetrics(result);
                return result;
            }
            // 执行恢复策略
            const result = await this.executeStrategy(session, strategy);
            session.status = result.success ? 'completed' : 'failed';
            session.result = result;
            this.updateMetrics(result);
            // 记录恢复结果
            await this.monitoringService.recordRecovery(error, result);
            return result;
        }
        catch (recoveryError) {
            const result = {
                success: false,
                strategy: 'system',
                duration: performance.now() - session.startTime,
                attempts: 1,
                message: '恢复过程发生系统错误',
                details: { error: recoveryError },
                nextAction: 'escalate'
            };
            session.status = 'failed';
            session.result = result;
            this.updateMetrics(result);
            return result;
        }
        finally {
            session.endTime = performance.now();
            this.cleanupSession(sessionId);
        }
    }
    /**
     * 创建恢复检查点
     */
    createCheckpoint(operation, state, metadata, rollbackPoint = false) {
        const checkpoint = {
            id: this.generateCheckpointId(),
            operation,
            timestamp: Date.now(),
            state: this.serializeState(state),
            metadata: metadata || {},
            dependencies: [],
            rollbackPoint
        };
        // 将检查点添加到所有活跃的恢复会话
        this.sessions.forEach(session => {
            if (session.status === 'active') {
                session.checkpoints.push(checkpoint);
            }
        });
        return checkpoint;
    }
    /**
     * 获取恢复指标
     */
    getMetrics() {
        return { ...this.metrics };
    }
    /**
     * 获取活跃的恢复会话
     */
    getActiveSessions() {
        return Array.from(this.sessions.values())
            .filter(session => session.status === 'active');
    }
    /**
     * 查找最佳恢复策略
     */
    findBestStrategy(error) {
        const availableStrategies = Array.from(this.strategies.values())
            .filter(strategy => strategy.canHandle(error))
            .sort((a, b) => a.priority - b.priority);
        return availableStrategies[0] || null;
    }
    /**
     * 执行恢复策略
     */
    async executeStrategy(session, strategy) {
        const attempt = {
            strategy: strategy.id,
            startTime: performance.now()
        };
        session.strategies.push(attempt);
        session.currentStrategy = strategy.id;
        try {
            const result = await strategy.execute(session.error, session.context);
            attempt.endTime = performance.now();
            attempt.success = result.success;
            attempt.result = result;
            return result;
        }
        catch (strategyError) {
            attempt.endTime = performance.now();
            attempt.success = false;
            attempt.error = strategyError;
            throw strategyError;
        }
    }
    /**
     * 更新恢复指标
     */
    updateMetrics(result) {
        if (result.success) {
            this.metrics.successfulRecoveries++;
        }
        else {
            this.metrics.failedRecoveries++;
        }
        const recoveryTime = result.duration;
        this.metrics.recoveryTimeDistribution.push(recoveryTime);
        // 保持最近1000次的恢复时间分布
        if (this.metrics.recoveryTimeDistribution.length > 1000) {
            this.metrics.recoveryTimeDistribution =
                this.metrics.recoveryTimeDistribution.slice(-1000);
        }
        // 更新平均恢复时间
        this.metrics.averageRecoveryTime =
            this.metrics.recoveryTimeDistribution.reduce((sum, time) => sum + time, 0) /
                this.metrics.recoveryTimeDistribution.length;
        // 更新成功率
        this.metrics.successRate =
            this.metrics.successfulRecoveries / this.metrics.totalRecoveries;
        // 更新策略使用统计
        const usage = this.metrics.strategyUsage.get(result.strategy) || 0;
        this.metrics.strategyUsage.set(result.strategy, usage + 1);
        // 更新平均尝试次数
        const totalAttempts = Array.from(this.sessions.values())
            .reduce((sum, session) => sum + session.strategies.length, 0);
        this.metrics.averageAttempts = totalAttempts / this.metrics.totalRecoveries;
        // 更新升级率
        this.metrics.escalationRate =
            this.metrics.failedRecoveries / this.metrics.totalRecoveries;
    }
    /**
     * 初始化默认策略
     */
    initializeDefaultStrategies() {
        // 重试策略配置
        const retryConfig = {
            maxAttempts: 5,
            baseDelay: 1000,
            maxDelay: 30000,
            backoffMultiplier: 2,
            jitter: true,
            retryableErrors: ['network', 'system', 'temporary'],
            circuitBreakerThreshold: 5,
            recoveryTimeout: 30000
        };
        // 回滚策略配置
        const rollbackConfig = {
            enabled: true,
            maxVersions: 10,
            autoRollback: true,
            rollbackTimeout: 30000,
            preserveData: true,
            validationRequired: true
        };
        // 降级策略配置
        const fallbackConfig = {
            enabled: true,
            strategies: [
                {
                    id: 'offline-mode',
                    name: '离线模式',
                    condition: (error) => error.category === types_1.ErrorCategory.NETWORK,
                    action: async () => { },
                    priority: 1,
                    timeout: 5000
                },
                {
                    id: 'read-only',
                    name: '只读模式',
                    condition: (error) => error.category === types_1.ErrorCategory.DATA,
                    action: async () => { },
                    priority: 2,
                    timeout: 3000
                },
                {
                    id: 'limited-functionality',
                    name: '功能限制',
                    condition: (error) => error.severity === types_1.ErrorSeverity.HIGH,
                    action: async () => { },
                    priority: 3,
                    timeout: 2000
                }
            ],
            autoSwitch: true,
            healthCheckInterval: 30000,
            recoveryCheckInterval: 60000
        };
        // 注册默认策略
        this.registerStrategy(new RetryStrategy(retryConfig));
        this.registerStrategy(new CircuitBreakerStrategy());
        this.registerStrategy(new RollbackStrategy(rollbackConfig));
        this.registerStrategy(new DegradedModeStrategy(fallbackConfig));
    }
    /**
     * 初始化指标
     */
    initializeMetrics() {
        return {
            totalRecoveries: 0,
            successfulRecoveries: 0,
            failedRecoveries: 0,
            averageRecoveryTime: 0,
            successRate: 0,
            strategyUsage: new Map(),
            averageAttempts: 0,
            escalationRate: 0,
            recoveryTimeDistribution: []
        };
    }
    /**
     * 生成会话ID
     */
    generateSessionId() {
        return `recovery-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    }
    /**
     * 生成检查点ID
     */
    generateCheckpointId() {
        return `checkpoint-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    }
    /**
     * 序列化状态
     */
    serializeState(state) {
        // 简单的状态序列化实现
        try {
            return JSON.parse(JSON.stringify(state));
        }
        catch {
            return { error: '状态序列化失败', original: state };
        }
    }
    /**
     * 清理会话
     */
    cleanupSession(sessionId) {
        const session = this.sessions.get(sessionId);
        if (session && session.endTime) {
            // 保留最近1000个完成的会话
            const completedSessions = Array.from(this.sessions.values())
                .filter(s => s.endTime)
                .sort((a, b) => (b.endTime || 0) - (a.endTime || 0));
            if (completedSessions.length > 1000) {
                const toRemove = completedSessions.slice(1000);
                toRemove.forEach(s => this.sessions.delete(s.id));
            }
        }
    }
}
exports.RecoveryStrategyManager = RecoveryStrategyManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
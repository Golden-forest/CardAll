{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\error-handling\\recovery-strategy-manager.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\error-handling\\recovery-strategy-manager.ts"],"sourcesContent":["/**\n * 恢复策略管理器\n *\n * 实现统一的恢复策略管理，包括：\n * - 智能重试策略\n * - 数据回滚机制\n * - 降级处理策略\n * - 自愈恢复框架\n * - 恢复过程监控\n * - 恢复结果验证\n */\n\nimport {\n  UnifiedError,\n  ErrorCategory,\n  ErrorSeverity,\n  ErrorContext,\n  RecoveryStrategy,\n  RecoveryResult,\n  RetryConfig,\n  AlertSeverity\n} from './types'\nimport { ErrorMonitoringService } from './error-monitoring-service'\n\n// 恢复策略管理器实现\n\n// 回滚配置\nexport interface RollbackConfig {\n  enabled: boolean\n  maxVersions: number\n  autoRollback: boolean\n  rollbackTimeout: number\n  preserveData: boolean\n  validationRequired: boolean\n}\n\n// 降级配置\nexport interface FallbackConfig {\n  enabled: boolean\n  strategies: FallbackStrategy[]\n  autoSwitch: boolean\n  healthCheckInterval: number\n  recoveryCheckInterval: number\n}\n\n// 降级策略\nexport interface FallbackStrategy {\n  id: string\n  name: string\n  condition: (error: UnifiedError) => boolean\n  action: (error: UnifiedError, context: ErrorContext) => Promise<any>\n  priority: number\n  timeout: number\n}\n\n// 恢复检查点\nexport interface RecoveryCheckpoint {\n  id: string\n  operation: string\n  timestamp: number\n  state: any\n  metadata: any\n  dependencies: string[]\n  rollbackPoint: boolean\n}\n\n// 恢复会话\nexport interface RecoverySession {\n  id: string\n  error: UnifiedError\n  context: ErrorContext\n  startTime: number\n  endTime?: number\n  strategies: RecoveryAttempt[]\n  currentStrategy?: string\n  status: 'active' | 'completed' | 'failed' | 'escalated'\n  checkpoints: RecoveryCheckpoint[]\n  result?: RecoveryResult\n}\n\n// 恢复尝试\nexport interface RecoveryAttempt {\n  strategy: string\n  startTime: number\n  endTime?: number\n  success: boolean\n  result?: RecoveryResult\n  error?: any\n}\n\n// 恢复指标\nexport interface RecoveryMetrics {\n  totalRecoveries: number\n  successfulRecoveries: number\n  failedRecoveries: number\n  averageRecoveryTime: number\n  successRate: number\n  strategyUsage: Map<string, number>\n  averageAttempts: number\n  escalationRate: number\n  recoveryTimeDistribution: number[]\n}\n\n/**\n * 重试策略实现\n */\nexport class RetryStrategy implements RecoveryStrategy {\n  public readonly id = 'retry'\n  public readonly name = '智能重试'\n  public readonly description = '基于错误类型和上下文的智能重试策略'\n  public readonly priority = 1\n  public readonly maxAttempts = 5\n  public readonly cooldownPeriod = 1000\n\n  constructor(private config: RetryConfig) {}\n\n  public canHandle(error: UnifiedError): boolean {\n    return this.config.retryableErrors.includes(error.category) ||\n           error.category === ErrorCategory.NETWORK ||\n           error.category === ErrorCategory.SYSTEM\n  }\n\n  public async execute(error: UnifiedError, context: ErrorContext): Promise<RecoveryResult> {\n    const startTime = performance.now()\n    let attempts = 0\n    let lastError: any = null\n\n    for (attempts = 1; attempts <= this.config.maxAttempts; attempts++) {\n      try {\n        // 计算重试延迟\n        const delay = this.calculateDelay(attempts)\n\n        if (attempts > 1) {\n          await this.sleep(delay)\n        }\n\n        // 执行重试操作\n        const result = await this.executeRetry(error, context)\n\n        return {\n          success: true,\n          strategy: this.id,\n          duration: performance.now() - startTime,\n          attempts,\n          message: `重试成功，共尝试 ${attempts} 次`,\n          nextAction: 'continue'\n        }\n      } catch (retryError) {\n        lastError = retryError\n\n        // 检查是否应该继续重试\n        if (!this.shouldContinueRetry(retryError, attempts)) {\n          break\n        }\n      }\n    }\n\n    return {\n      success: false,\n      strategy: this.id,\n      duration: performance.now() - startTime,\n      attempts,\n      message: `重试失败，共尝试 ${attempts} 次`,\n      details: { error: lastError },\n      nextAction: 'fallback',\n      fallbackStrategy: 'circuit-breaker'\n    }\n  }\n\n  private calculateDelay(attempt: number): number {\n    const exponentialDelay = Math.min(\n      this.config.baseDelay * Math.pow(this.config.backoffMultiplier, attempt - 1),\n      this.config.maxDelay\n    )\n\n    if (this.config.jitter) {\n      return exponentialDelay * (0.8 + Math.random() * 0.4)\n    }\n\n    return exponentialDelay\n  }\n\n  private shouldContinueRetry(error: any, attempts: number): boolean {\n    // 检查是否达到最大尝试次数\n    if (attempts >= this.config.maxAttempts) {\n      return false\n    }\n\n    // 检查错误类型是否支持重试\n    if (error instanceof Error && !this.isRetryableError(error)) {\n      return false\n    }\n\n    return true\n  }\n\n  private isRetryableError(error: Error): boolean {\n    const nonRetryableErrors = [\n      'AuthenticationError',\n      'AuthorizationError',\n      'ValidationError',\n      'NotFoundError'\n    ]\n\n    return !nonRetryableErrors.some(type => error.name === type)\n  }\n\n  private async executeRetry(error: UnifiedError, context: ErrorContext): Promise<any> {\n    // 根据错误类型执行相应的重试逻辑\n    switch (error.category) {\n      case ErrorCategory.NETWORK:\n        return this.retryNetworkOperation(error, context)\n      case ErrorCategory.SYSTEM:\n        return this.retrySystemOperation(error, context)\n      default:\n        throw new Error(`不支持的错误类型重试: ${error.category}`)\n    }\n  }\n\n  private async retryNetworkOperation(error: UnifiedError, context: ErrorContext): Promise<any> {\n    // 实现网络操作重试逻辑\n    const { operation } = context\n\n    if (operation && operation.type === 'sync') {\n      // 重试同步操作\n      return this.retrySyncOperation(operation)\n    }\n\n    throw new Error('不支持的网络操作重试')\n  }\n\n  private async retrySystemOperation(error: UnifiedError, context: ErrorContext): Promise<any> {\n    // 实现系统操作重试逻辑\n    await this.sleep(100) // 简单延迟\n    return true\n  }\n\n  private async retrySyncOperation(operation: any): Promise<any> {\n    // 实现同步操作重试\n    // 这里应该调用实际的同步服务\n    return { success: true }\n  }\n\n  private async sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms))\n  }\n}\n\n/**\n * 熔断器策略实现\n */\nexport class CircuitBreakerStrategy implements RecoveryStrategy {\n  public readonly id = 'circuit-breaker'\n  public readonly name = '熔断器'\n  public readonly description = '防止级联故障的熔断器策略'\n  public readonly priority = 2\n  public readonly maxAttempts = 1\n  public readonly cooldownPeriod = 5000\n\n  private state: 'closed' | 'open' | 'half-open' = 'closed'\n  private failureCount = 0\n  private lastFailureTime = 0\n  private successCount = 0\n\n  constructor(\n    private threshold: number = 5,\n    private timeout: number = 60000\n  ) {}\n\n  public canHandle(error: UnifiedError): boolean {\n    return this.state === 'open' ? false : true\n  }\n\n  public async execute(error: UnifiedError, context: ErrorContext): Promise<RecoveryResult> {\n    const startTime = performance.now()\n\n    if (this.state === 'open') {\n      // 检查是否可以尝试恢复\n      if (Date.now() - this.lastFailureTime > this.timeout) {\n        this.state = 'half-open'\n        this.successCount = 0\n      } else {\n        return {\n          success: false,\n          strategy: this.id,\n          duration: performance.now() - startTime,\n          attempts: 1,\n          message: '熔断器开启，拒绝请求',\n          nextAction: 'fallback',\n          fallbackStrategy: 'degraded-mode'\n        }\n      }\n    }\n\n    try {\n      // 执行操作\n      const result = await this.executeProtectedOperation(error, context)\n\n      this.onSuccess()\n\n      return {\n        success: true,\n        strategy: this.id,\n        duration: performance.now() - startTime,\n        attempts: 1,\n        message: '熔断器保护下操作成功',\n        nextAction: 'continue'\n      }\n    } catch (operationError) {\n      this.onFailure()\n\n      return {\n        success: false,\n        strategy: this.id,\n        duration: performance.now() - startTime,\n        attempts: 1,\n        message: '熔断器保护下操作失败',\n        details: { error: operationError },\n        nextAction: this.state === 'open' ? 'fallback' : 'retry',\n        fallbackStrategy: 'degraded-mode'\n      }\n    }\n  }\n\n  private onSuccess(): void {\n    if (this.state === 'half-open') {\n      this.successCount++\n      if (this.successCount >= 3) {\n        this.state = 'closed'\n        this.failureCount = 0\n      }\n    }\n  }\n\n  private onFailure(): void {\n    this.failureCount++\n    this.lastFailureTime = Date.now()\n\n    if (this.failureCount >= this.threshold) {\n      this.state = 'open'\n    }\n  }\n\n  private async executeProtectedOperation(error: UnifiedError, context: ErrorContext): Promise<any> {\n    // 执行受保护的操作\n    // 这里应该调用实际的服务，但为了安全而进行保护\n    throw new Error('操作执行失败')\n  }\n}\n\n/**\n * 数据回滚策略实现\n */\nexport class RollbackStrategy implements RecoveryStrategy {\n  public readonly id = 'rollback'\n  public readonly name = '数据回滚'\n  public readonly description = '数据一致性问题的回滚策略'\n  public readonly priority = 3\n  public readonly maxAttempts = 3\n  public readonly cooldownPeriod = 2000\n\n  constructor(private config: RollbackConfig) {}\n\n  public canHandle(error: UnifiedError): boolean {\n    return error.category === ErrorCategory.DATA ||\n           error.category === ErrorCategory.BUSINESS ||\n           error.severity === ErrorSeverity.CRITICAL\n  }\n\n  public async execute(error: UnifiedError, context: ErrorContext): Promise<RecoveryResult> {\n    const startTime = performance.now()\n\n    try {\n      // 查找可用的回滚点\n      const rollbackPoint = await this.findRollbackPoint(error, context)\n\n      if (!rollbackPoint) {\n        return {\n          success: false,\n          strategy: this.id,\n          duration: performance.now() - startTime,\n          attempts: 1,\n          message: '未找到可用的回滚点',\n          nextAction: 'fallback',\n          fallbackStrategy: 'manual-intervention'\n        }\n      }\n\n      // 执行回滚操作\n      const rollbackResult = await this.executeRollback(rollbackPoint)\n\n      // 验证回滚结果\n      const validation = await this.validateRollback(rollbackPoint, rollbackResult)\n\n      if (!validation.success) {\n        return {\n          success: false,\n          strategy: this.id,\n          duration: performance.now() - startTime,\n          attempts: 1,\n          message: '回滚验证失败',\n          details: validation,\n          nextAction: 'escalate'\n        }\n      }\n\n      return {\n        success: true,\n        strategy: this.id,\n        duration: performance.now() - startTime,\n        attempts: 1,\n        message: `成功回滚到检查点: ${rollbackPoint.id}`,\n        details: { rollbackPoint, rollbackResult },\n        nextAction: 'continue'\n      }\n    } catch (rollbackError) {\n      return {\n        success: false,\n        strategy: this.id,\n        duration: performance.now() - startTime,\n        attempts: 1,\n        message: '回滚操作失败',\n        details: { error: rollbackError },\n        nextAction: 'escalate'\n      }\n    }\n  }\n\n  private async findRollbackPoint(error: UnifiedError, context: ErrorContext): Promise<RecoveryCheckpoint | null> {\n    // 查找最近的可用回滚点\n    // 这里应该查询检查点存储\n    return {\n      id: 'checkpoint-' + Date.now(),\n      operation: context.operation?.type || 'unknown',\n      timestamp: Date.now() - 30000, // 30秒前\n      state: {},\n      metadata: {},\n      dependencies: [],\n      rollbackPoint: true\n    }\n  }\n\n  private async executeRollback(checkpoint: RecoveryCheckpoint): Promise<any> {\n    // 执行回滚操作\n    // 这里应该实现实际的数据回滚逻辑\n    return { success: true, checkpointId: checkpoint.id }\n  }\n\n  private async validateRollback(checkpoint: RecoveryCheckpoint, result: any): Promise<{ success: boolean; message: string }> {\n    // 验证回滚结果\n    // 这里应该实现数据一致性检查\n    return { success: true, message: '回滚验证通过' }\n  }\n}\n\n/**\n * 降级模式策略实现\n */\nexport class DegradedModeStrategy implements RecoveryStrategy {\n  public readonly id = 'degraded-mode'\n  public readonly name = '降级模式'\n  public readonly description = '功能降级以维持基本服务'\n  public readonly priority = 4\n  public readonly maxAttempts = 1\n  public readonly cooldownPeriod = 0\n\n  constructor(private config: FallbackConfig) {}\n\n  public canHandle(error: UnifiedError): boolean {\n    return this.config.enabled && (\n      error.severity === ErrorSeverity.HIGH ||\n      error.category === ErrorCategory.SYSTEM ||\n      error.category === ErrorCategory.NETWORK\n    )\n  }\n\n  public async execute(error: UnifiedError, context: ErrorContext): Promise<RecoveryResult> {\n    const startTime = performance.now()\n\n    try {\n      // 查找合适的降级策略\n      const strategy = this.findFallbackStrategy(error)\n\n      if (!strategy) {\n        return {\n          success: false,\n          strategy: this.id,\n          duration: performance.now() - startTime,\n          attempts: 1,\n          message: '未找到合适的降级策略',\n          nextAction: 'escalate'\n        }\n      }\n\n      // 执行降级策略\n      const result = await Promise.race([\n        strategy.action(error, context),\n        new Promise((_, reject) =>\n          setTimeout(() => reject(new Error('降级策略执行超时')), strategy.timeout)\n        )\n      ])\n\n      return {\n        success: true,\n        strategy: this.id,\n        duration: performance.now() - startTime,\n        attempts: 1,\n        message: `成功启用降级模式: ${strategy.name}`,\n        details: { strategy: strategy.id, result },\n        nextAction: 'continue'\n      }\n    } catch (fallbackError) {\n      return {\n        success: false,\n        strategy: this.id,\n        duration: performance.now() - startTime,\n        attempts: 1,\n        message: '降级策略执行失败',\n        details: { error: fallbackError },\n        nextAction: 'escalate'\n      }\n    }\n  }\n\n  private findFallbackStrategy(error: UnifiedError): FallbackStrategy | undefined {\n    return this.config.strategies\n      .filter(strategy => strategy.condition(error))\n      .sort((a, b) => b.priority - a.priority)[0]\n  }\n}\n\n/**\n * 恢复策略管理器主类\n */\nexport class RecoveryStrategyManager {\n  private static instance: RecoveryStrategyManager\n  private strategies: Map<string, RecoveryStrategy> = new Map()\n  private sessions: Map<string, RecoverySession> = new Map()\n  private metrics: RecoveryMetrics = this.initializeMetrics()\n  private monitoringService: ErrorMonitoringService\n\n  private constructor(monitoringService: ErrorMonitoringService) {\n    this.monitoringService = monitoringService\n    this.initializeDefaultStrategies()\n  }\n\n  public static getInstance(monitoringService: ErrorMonitoringService): RecoveryStrategyManager {\n    if (!RecoveryStrategyManager.instance) {\n      RecoveryStrategyManager.instance = new RecoveryStrategyManager(monitoringService)\n    }\n    return RecoveryStrategyManager.instance\n  }\n\n  /**\n   * 注册恢复策略\n   */\n  public registerStrategy(strategy: RecoveryStrategy): void {\n    this.strategies.set(strategy.id, strategy)\n    console.log(`已注册恢复策略: ${strategy.name} (${strategy.id})`)\n  }\n\n  /**\n   * 取消注册恢复策略\n   */\n  public unregisterStrategy(strategyId: string): void {\n    this.strategies.delete(strategyId)\n    console.log(`已取消注册恢复策略: ${strategyId}`)\n  }\n\n  /**\n   * 执行错误恢复\n   */\n  public async recover(\n    error: UnifiedError,\n    context: ErrorContext\n  ): Promise<RecoveryResult> {\n    const sessionId = this.generateSessionId()\n    const session: RecoverySession = {\n      id: sessionId,\n      error,\n      context,\n      startTime: performance.now(),\n      status: 'active',\n      strategies: [],\n      checkpoints: []\n    }\n\n    this.sessions.set(sessionId, session)\n    this.metrics.totalRecoveries++\n\n    try {\n      // 查找合适的恢复策略\n      const strategy = this.findBestStrategy(error)\n\n      if (!strategy) {\n        const result: RecoveryResult = {\n          success: false,\n          strategy: 'none',\n          duration: 0,\n          attempts: 0,\n          message: '未找到合适的恢复策略',\n          nextAction: 'escalate'\n        }\n\n        session.status = 'failed'\n        session.result = result\n        this.updateMetrics(result)\n\n        return result\n      }\n\n      // 执行恢复策略\n      const result = await this.executeStrategy(session, strategy)\n\n      session.status = result.success ? 'completed' : 'failed'\n      session.result = result\n      this.updateMetrics(result)\n\n      // 记录恢复结果\n      await this.monitoringService.recordRecovery(error, result)\n\n      return result\n    } catch (recoveryError) {\n      const result: RecoveryResult = {\n        success: false,\n        strategy: 'system',\n        duration: performance.now() - session.startTime,\n        attempts: 1,\n        message: '恢复过程发生系统错误',\n        details: { error: recoveryError },\n        nextAction: 'escalate'\n      }\n\n      session.status = 'failed'\n      session.result = result\n      this.updateMetrics(result)\n\n      return result\n    } finally {\n      session.endTime = performance.now()\n      this.cleanupSession(sessionId)\n    }\n  }\n\n  /**\n   * 创建恢复检查点\n   */\n  public createCheckpoint(\n    operation: string,\n    state: any,\n    metadata?: any,\n    rollbackPoint: boolean = false\n  ): RecoveryCheckpoint {\n    const checkpoint: RecoveryCheckpoint = {\n      id: this.generateCheckpointId(),\n      operation,\n      timestamp: Date.now(),\n      state: this.serializeState(state),\n      metadata: metadata || {},\n      dependencies: [],\n      rollbackPoint\n    }\n\n    // 将检查点添加到所有活跃的恢复会话\n    this.sessions.forEach(session => {\n      if (session.status === 'active') {\n        session.checkpoints.push(checkpoint)\n      }\n    })\n\n    return checkpoint\n  }\n\n  /**\n   * 获取恢复指标\n   */\n  public getMetrics(): RecoveryMetrics {\n    return { ...this.metrics }\n  }\n\n  /**\n   * 获取活跃的恢复会话\n   */\n  public getActiveSessions(): RecoverySession[] {\n    return Array.from(this.sessions.values())\n      .filter(session => session.status === 'active')\n  }\n\n  /**\n   * 查找最佳恢复策略\n   */\n  private findBestStrategy(error: UnifiedError): RecoveryStrategy | null {\n    const availableStrategies = Array.from(this.strategies.values())\n      .filter(strategy => strategy.canHandle(error))\n      .sort((a, b) => a.priority - b.priority)\n\n    return availableStrategies[0] || null\n  }\n\n  /**\n   * 执行恢复策略\n   */\n  private async executeStrategy(\n    session: RecoverySession,\n    strategy: RecoveryStrategy\n  ): Promise<RecoveryResult> {\n    const attempt: RecoveryAttempt = {\n      strategy: strategy.id,\n      startTime: performance.now()\n    }\n\n    session.strategies.push(attempt)\n    session.currentStrategy = strategy.id\n\n    try {\n      const result = await strategy.execute(session.error, session.context)\n\n      attempt.endTime = performance.now()\n      attempt.success = result.success\n      attempt.result = result\n\n      return result\n    } catch (strategyError) {\n      attempt.endTime = performance.now()\n      attempt.success = false\n      attempt.error = strategyError\n\n      throw strategyError\n    }\n  }\n\n  /**\n   * 更新恢复指标\n   */\n  private updateMetrics(result: RecoveryResult): void {\n    if (result.success) {\n      this.metrics.successfulRecoveries++\n    } else {\n      this.metrics.failedRecoveries++\n    }\n\n    const recoveryTime = result.duration\n    this.metrics.recoveryTimeDistribution.push(recoveryTime)\n\n    // 保持最近1000次的恢复时间分布\n    if (this.metrics.recoveryTimeDistribution.length > 1000) {\n      this.metrics.recoveryTimeDistribution =\n        this.metrics.recoveryTimeDistribution.slice(-1000)\n    }\n\n    // 更新平均恢复时间\n    this.metrics.averageRecoveryTime =\n      this.metrics.recoveryTimeDistribution.reduce((sum, time) => sum + time, 0) /\n      this.metrics.recoveryTimeDistribution.length\n\n    // 更新成功率\n    this.metrics.successRate =\n      this.metrics.successfulRecoveries / this.metrics.totalRecoveries\n\n    // 更新策略使用统计\n    const usage = this.metrics.strategyUsage.get(result.strategy) || 0\n    this.metrics.strategyUsage.set(result.strategy, usage + 1)\n\n    // 更新平均尝试次数\n    const totalAttempts = Array.from(this.sessions.values())\n      .reduce((sum, session) => sum + session.strategies.length, 0)\n    this.metrics.averageAttempts = totalAttempts / this.metrics.totalRecoveries\n\n    // 更新升级率\n    this.metrics.escalationRate =\n      this.metrics.failedRecoveries / this.metrics.totalRecoveries\n  }\n\n  /**\n   * 初始化默认策略\n   */\n  private initializeDefaultStrategies(): void {\n    // 重试策略配置\n    const retryConfig: RetryConfig = {\n      maxAttempts: 5,\n      baseDelay: 1000,\n      maxDelay: 30000,\n      backoffMultiplier: 2,\n      jitter: true,\n      retryableErrors: ['network', 'system', 'temporary'],\n      circuitBreakerThreshold: 5,\n      recoveryTimeout: 30000\n    }\n\n    // 回滚策略配置\n    const rollbackConfig: RollbackConfig = {\n      enabled: true,\n      maxVersions: 10,\n      autoRollback: true,\n      rollbackTimeout: 30000,\n      preserveData: true,\n      validationRequired: true\n    }\n\n    // 降级策略配置\n    const fallbackConfig: FallbackConfig = {\n      enabled: true,\n      strategies: [\n        {\n          id: 'offline-mode',\n          name: '离线模式',\n          condition: (error) => error.category === ErrorCategory.NETWORK,\n          action: async () => { /* 启用离线模式 */ },\n          priority: 1,\n          timeout: 5000\n        },\n        {\n          id: 'read-only',\n          name: '只读模式',\n          condition: (error) => error.category === ErrorCategory.DATA,\n          action: async () => { /* 启用只读模式 */ },\n          priority: 2,\n          timeout: 3000\n        },\n        {\n          id: 'limited-functionality',\n          name: '功能限制',\n          condition: (error) => error.severity === ErrorSeverity.HIGH,\n          action: async () => { /* 启用功能限制 */ },\n          priority: 3,\n          timeout: 2000\n        }\n      ],\n      autoSwitch: true,\n      healthCheckInterval: 30000,\n      recoveryCheckInterval: 60000\n    }\n\n    // 注册默认策略\n    this.registerStrategy(new RetryStrategy(retryConfig))\n    this.registerStrategy(new CircuitBreakerStrategy())\n    this.registerStrategy(new RollbackStrategy(rollbackConfig))\n    this.registerStrategy(new DegradedModeStrategy(fallbackConfig))\n  }\n\n  /**\n   * 初始化指标\n   */\n  private initializeMetrics(): RecoveryMetrics {\n    return {\n      totalRecoveries: 0,\n      successfulRecoveries: 0,\n      failedRecoveries: 0,\n      averageRecoveryTime: 0,\n      successRate: 0,\n      strategyUsage: new Map(),\n      averageAttempts: 0,\n      escalationRate: 0,\n      recoveryTimeDistribution: []\n    }\n  }\n\n  /**\n   * 生成会话ID\n   */\n  private generateSessionId(): string {\n    return `recovery-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n  }\n\n  /**\n   * 生成检查点ID\n   */\n  private generateCheckpointId(): string {\n    return `checkpoint-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n  }\n\n  /**\n   * 序列化状态\n   */\n  private serializeState(state: any): any {\n    // 简单的状态序列化实现\n    try {\n      return JSON.parse(JSON.stringify(state))\n    } catch {\n      return { error: '状态序列化失败', original: state }\n    }\n  }\n\n  /**\n   * 清理会话\n   */\n  private cleanupSession(sessionId: string): void {\n    const session = this.sessions.get(sessionId)\n    if (session && session.endTime) {\n      // 保留最近1000个完成的会话\n      const completedSessions = Array.from(this.sessions.values())\n        .filter(s => s.endTime)\n        .sort((a, b) => (b.endTime || 0) - (a.endTime || 0))\n\n      if (completedSessions.length > 1000) {\n        const toRemove = completedSessions.slice(1000)\n        toRemove.forEach(s => this.sessions.delete(s.id))\n      }\n    }\n  }\n}"],"version":3}
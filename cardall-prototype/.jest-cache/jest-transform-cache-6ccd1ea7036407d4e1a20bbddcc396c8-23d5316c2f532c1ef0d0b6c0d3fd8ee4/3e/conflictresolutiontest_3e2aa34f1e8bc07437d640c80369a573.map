{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\utils\\conflict-resolution.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\utils\\conflict-resolution.test.ts"],"sourcesContent":["/**\n * 冲突解决引擎测试\n * 测试ConflictResolutionEngine类的所有功能\n */\n\nimport { ConflictResolutionEngine } from '../../utils/conflict-resolution'\nimport type {\n  ConflictBase,\n  CardConflict,\n  FolderConflict,\n  TagConflict,\n  ConflictSuggestion,\n  ConflictResolution\n} from '../../types/conflict'\n\ndescribe('ConflictResolutionEngine', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  afterEach(() => {\n    jest.restoreAllMocks()\n  })\n\n  describe('生成冲突解决建议', () => {\n    test('应该为卡片内容冲突生成建议', () => {\n      const cardConflict: CardConflict = {\n        id: 'conflict1',\n        type: 'card_content',\n        entityType: 'card',\n        entityId: 'card1',\n        timestamp: new Date(),\n        sourceDevice: 'device1',\n        severity: 'medium',\n        status: 'pending',\n        createdAt: new Date(),\n        localVersion: {\n          content: {\n            frontContent: {\n              title: '本地标题',\n              text: '本地内容文本',\n              tags: ['标签1', '标签2'],\n              lastModified: new Date()\n            },\n            backContent: {\n              title: '背面标题',\n              text: '背面内容',\n              tags: ['背面标签1'],\n              lastModified: new Date()\n            }\n          },\n          style: {\n            type: 'solid',\n            backgroundColor: '#ffffff',\n            fontFamily: 'Arial',\n            fontSize: 'base',\n            fontWeight: 'normal',\n            textColor: '#000000',\n            borderRadius: '8px',\n            shadow: 'none',\n            borderWidth: 1\n          },\n          folderId: 'folder1',\n          isFlipped: false,\n          updatedAt: new Date('2024-01-01T10:00:00Z'),\n          version: '1'\n        },\n        remoteVersion: {\n          content: {\n            frontContent: {\n              title: '远程标题',\n              text: '远程内容文本',\n              tags: ['标签1', '标签3'],\n              lastModified: new Date()\n            },\n            backContent: {\n              title: '背面标题',\n              text: '背面内容',\n              tags: ['背面标签2'],\n              lastModified: new Date()\n            }\n          },\n          style: {\n            type: 'solid',\n            backgroundColor: '#ffffff',\n            fontFamily: 'Arial',\n            fontSize: 'base',\n            fontWeight: 'normal',\n            textColor: '#000000',\n            borderRadius: '8px',\n            shadow: 'none',\n            borderWidth: 1\n          },\n          folderId: 'folder1',\n          isFlipped: false,\n          updatedAt: new Date('2024-01-01T11:00:00Z'),\n          version: '2'\n        },\n        conflictFields: ['title', 'text', 'tags']\n      }\n\n      const suggestions = ConflictResolutionEngine.generateSuggestions(cardConflict)\n\n      expect(Array.isArray(suggestions)).toBe(true)\n      expect(suggestions.length).toBeGreaterThan(0)\n\n      // 验证建议的结构\n      suggestions.forEach(suggestion => {\n        expect(suggestion).toHaveProperty('type')\n        expect(suggestion).toHaveProperty('confidence')\n        expect(suggestion).toHaveProperty('reason')\n        expect(typeof suggestion.confidence).toBe('number')\n        expect(suggestion.confidence).toBeGreaterThanOrEqual(0)\n        expect(suggestion.confidence).toBeLessThanOrEqual(1)\n      })\n\n      // 验证建议按置信度排序\n      for (let i = 1; i < suggestions.length; i++) {\n        expect(suggestions[i - 1].confidence).toBeGreaterThanOrEqual(suggestions[i].confidence)\n      }\n    })\n\n    test('应该为文件夹名称冲突生成建议', () => {\n      const folderConflict: FolderConflict = {\n        id: 'conflict2',\n        type: 'folder_name',\n        entityType: 'folder',\n        entityId: 'folder1',\n        timestamp: new Date(),\n        sourceDevice: 'device1',\n        severity: 'low',\n        status: 'pending',\n        createdAt: new Date(),\n        localVersion: {\n          name: '我的文件夹',\n          color: '#ff0000',\n          parentId: undefined,\n          cardIds: [],\n          isExpanded: true,\n          updatedAt: new Date('2024-01-01T10:00:00Z'),\n          version: '1'\n        },\n        remoteVersion: {\n          name: '我的文件夹 - 副本',\n          color: '#00ff00',\n          parentId: undefined,\n          cardIds: [],\n          isExpanded: false,\n          updatedAt: new Date('2024-01-01T11:00:00Z'),\n          version: '2'\n        },\n        affectedCards: []\n      }\n\n      const suggestions = ConflictResolutionEngine.generateSuggestions(folderConflict)\n\n      expect(Array.isArray(suggestions)).toBe(true)\n      expect(suggestions.length).toBeGreaterThan(0)\n\n      // 验证文件夹特定的建议类型\n      const suggestionTypes = suggestions.map(s => s.type)\n      expect(suggestionTypes).toContain('keep_local')\n      expect(suggestionTypes).toContain('keep_remote')\n    })\n\n    test('应该为标签重命名冲突生成建议', () => {\n      const tagConflict: TagConflict = {\n        id: 'conflict3',\n        type: 'tag_rename',\n        entityType: 'tag',\n        entityId: 'tag1',\n        timestamp: new Date(),\n        sourceDevice: 'device1',\n        severity: 'low',\n        status: 'pending',\n        createdAt: new Date(),\n        localVersion: {\n          name: '重要',\n          color: '#ff0000',\n          count: 15,\n          isHidden: false,\n          updatedAt: new Date('2024-01-01T10:00:00Z'),\n          version: '1'\n        },\n        remoteVersion: {\n          name: '重要标签',\n          color: '#00ff00',\n          count: 5,\n          isHidden: false,\n          updatedAt: new Date('2024-01-01T11:00:00Z'),\n          version: '2'\n        },\n        affectedCards: []\n      }\n\n      const suggestions = ConflictResolutionEngine.generateSuggestions(tagConflict)\n\n      expect(Array.isArray(suggestions)).toBe(true)\n      expect(suggestions.length).toBeGreaterThan(0)\n\n      // 验证标签特定的建议（基于使用频率）\n      const highFreqSuggestion = suggestions.find(s => s.confidence > 0.8)\n      expect(highFreqSuggestion).toBeDefined()\n      expect(highFreqSuggestion?.reason).toContain('使用频率更高')\n    })\n\n    test('应该为未知冲突类型返回默认建议', () => {\n      const unknownConflict: ConflictBase = {\n        id: 'conflict4',\n        type: 'unknown_type' as any,\n        entityType: 'card',\n        entityId: 'card1',\n        timestamp: new Date(),\n        sourceDevice: 'device1',\n        severity: 'medium',\n        status: 'pending',\n        createdAt: new Date()\n      }\n\n      const suggestions = ConflictResolutionEngine.generateSuggestions(unknownConflict)\n\n      expect(suggestions).toHaveLength(1)\n      expect(suggestions[0].type).toBe('manual')\n      expect(suggestions[0].confidence).toBe(0.5)\n      expect(suggestions[0].reason).toContain('无法自动确定')\n    })\n\n    test('应该处理完全相同的文件夹名称', () => {\n      const sameNameConflict: FolderConflict = {\n        id: 'conflict5',\n        type: 'folder_name',\n        entityType: 'folder',\n        entityId: 'folder1',\n        timestamp: new Date(),\n        sourceDevice: 'device1',\n        severity: 'low',\n        status: 'pending',\n        createdAt: new Date(),\n        localVersion: {\n          name: 'Same Name',\n          color: '#ff0000',\n          parentId: undefined,\n          cardIds: [],\n          isExpanded: true,\n          updatedAt: new Date(),\n          version: '1'\n        },\n        remoteVersion: {\n          name: 'Same Name',\n          color: '#00ff00',\n          parentId: undefined,\n          cardIds: [],\n          isExpanded: false,\n          updatedAt: new Date(),\n          version: '2'\n        },\n        affectedCards: []\n      }\n\n      const suggestions = ConflictResolutionEngine.generateSuggestions(sameNameConflict)\n\n      expect(suggestions).toEqual([])\n    })\n  })\n\n  describe('文本相似度计算', () => {\n    test('应该计算准确的文本相似度', () => {\n      const similarity1 = (ConflictResolutionEngine as any).calculateSimilarity('Hello World', 'Hello World')\n      expect(similarity1).toBe(1.0)\n\n      const similarity2 = (ConflictResolutionEngine as any).calculateSimilarity('Hello', 'World')\n      expect(similarity2).toBeGreaterThan(0)\n      expect(similarity2).toBeLessThan(1.0)\n\n      const similarity3 = (ConflictResolutionEngine as any).calculateSimilarity('', 'Hello')\n      expect(similarity3).toBe(0)\n    })\n\n    test('应该处理大小写和空格', () => {\n      const similarity = (ConflictResolutionEngine as any).calculateSimilarity('  Hello World  ', 'hello world')\n      expect(similarity).toBe(1.0)\n    })\n\n    test('应该计算Levenshtein距离', () => {\n      const distance1 = (ConflictResolutionEngine as any).levenshteinDistance('kitten', 'sitting')\n      expect(distance1).toBe(3)\n\n      const distance2 = (ConflictResolutionEngine as any).levenshteinDistance('', '')\n      expect(distance2).toBe(0)\n\n      const distance3 = (ConflictResolutionEngine as any).levenshteinDistance('abc', 'abc')\n      expect(distance3).toBe(0)\n    })\n  })\n\n  describe('标题合并', () => {\n    test('应该合并相同的标题', () => {\n      const merged = (ConflictResolutionEngine as any).mergeTitles('Same Title', 'Same Title')\n      expect(merged).toBe('Same Title')\n    })\n\n    test('应该选择更长的标题当一个是另一个的子集', () => {\n      const merged1 = (ConflictResolutionEngine as any).mergeTitles('Title', 'Longer Title')\n      expect(merged1).toBe('Longer Title')\n\n      const merged2 = (ConflictResolutionEngine as any).mergeTitles('Long Title', 'Title')\n      expect(merged2).toBe('Long Title')\n    })\n\n    test('应该合并不同标题的关键词', () => {\n      const merged = (ConflictResolutionEngine as any).mergeTitles('Quick Start', 'Beginner Guide')\n      expect(merged).toContain('Quick')\n      expect(merged).toContain('Start')\n      expect(merged).toContain('Beginner')\n      expect(merged).toContain('Guide')\n    })\n  })\n\n  describe('标签名称质量评估', () => {\n    test('应该评估标签名称质量', () => {\n      const goodQuality = (ConflictResolutionEngine as any).evaluateTagNameQuality('Important')\n      const longQuality = (ConflictResolutionEngine as any).evaluateTagNameQuality('This Is A Very Long Tag Name That Is Not Good')\n      const invalidQuality = (ConflictResolutionEngine as any).evaluateTagNameQuality('tag@#$%^')\n\n      expect(goodQuality).toBeGreaterThan(0.5)\n      expect(longQuality).toBeLessThan(goodQuality)\n      expect(invalidQuality).toBeLessThan(goodQuality)\n    })\n\n    test('应该处理边界情况', () => {\n      const emptyQuality = (ConflictResolutionEngine as any).evaluateTagNameQuality('')\n      const shortQuality = (ConflictResolutionEngine as any).evaluateTagNameQuality('A')\n      const perfectQuality = (ConflictResolutionEngine as any).evaluateTagNameQuality('PerfectTagName')\n\n      expect(emptyQuality).toBeGreaterThanOrEqual(0)\n      expect(emptyQuality).toBeLessThanOrEqual(1)\n      expect(shortQuality).toBeLessThan(perfectQuality)\n    })\n  })\n\n  describe('解决方案应用', () => {\n    const mockCardConflict: CardConflict = {\n      id: 'conflict1',\n      type: 'card_content',\n      entityType: 'card',\n      entityId: 'card1',\n      timestamp: new Date(),\n      sourceDevice: 'device1',\n      severity: 'medium',\n      status: 'pending',\n      createdAt: new Date(),\n      localVersion: {\n        content: {\n          frontContent: {\n            title: '本地标题',\n            text: '本地内容',\n            tags: ['本地'],\n            lastModified: new Date()\n          },\n          backContent: {\n            title: '背面',\n            text: '背面内容',\n            tags: [],\n            lastModified: new Date()\n          }\n        },\n        style: {\n          type: 'solid',\n          backgroundColor: '#ffffff',\n          fontFamily: 'Arial',\n          fontSize: 'base',\n          fontWeight: 'normal',\n          textColor: '#000000',\n          borderRadius: '8px',\n          shadow: 'none',\n          borderWidth: 1\n        },\n        folderId: 'folder1',\n        isFlipped: false,\n        updatedAt: new Date(),\n        version: '1'\n      },\n      remoteVersion: {\n        content: {\n          frontContent: {\n            title: '远程标题',\n            text: '远程内容',\n            tags: ['远程'],\n            lastModified: new Date()\n          },\n          backContent: {\n            title: '背面',\n            text: '背面内容',\n            tags: [],\n            lastModified: new Date()\n          }\n        },\n        style: {\n          type: 'solid',\n          backgroundColor: '#ffffff',\n          fontFamily: 'Arial',\n          fontSize: 'base',\n          fontWeight: 'normal',\n          textColor: '#000000',\n          borderRadius: '8px',\n          shadow: 'none',\n          borderWidth: 1\n        },\n        folderId: 'folder1',\n        isFlipped: false,\n        updatedAt: new Date(),\n        version: '2'\n      },\n      conflictFields: ['title', 'text', 'tags']\n    }\n\n    test('应该应用保留本地版本的解决方案', () => {\n      const resolution: ConflictResolution = {\n        type: 'keep_local',\n        timestamp: new Date()\n      }\n\n      const result = ConflictResolutionEngine.applyResolution(mockCardConflict, resolution)\n\n      expect(result).toEqual(mockCardConflict.localVersion)\n    })\n\n    test('应该应用保留远程版本的解决方案', () => {\n      const resolution: ConflictResolution = {\n        type: 'keep_remote',\n        timestamp: new Date()\n      }\n\n      const result = ConflictResolutionEngine.applyResolution(mockCardConflict, resolution)\n\n      expect(result).toEqual(mockCardConflict.remoteVersion)\n    })\n\n    test('应该应用合并解决方案', () => {\n      const mergedData = {\n        content: {\n          frontContent: {\n            title: '合并标题',\n            text: '合并内容',\n            tags: ['本地', '远程'],\n            lastModified: new Date()\n          },\n          backContent: {\n            title: '背面',\n            text: '背面内容',\n            tags: [],\n            lastModified: new Date()\n          }\n        }\n      }\n\n      const resolution: ConflictResolution = {\n        type: 'merge',\n        mergedData,\n        timestamp: new Date()\n      }\n\n      const result = ConflictResolutionEngine.applyResolution(mockCardConflict, resolution)\n\n      expect(result).toEqual(mergedData)\n    })\n\n    test('应该应用手动解决方案', () => {\n      const manualData = {\n        content: {\n          frontContent: {\n            title: '手动修改标题',\n            text: '手动修改内容',\n            tags: ['手动'],\n            lastModified: new Date()\n          },\n          backContent: {\n            title: '背面',\n            text: '背面内容',\n            tags: [],\n            lastModified: new Date()\n          }\n        }\n      }\n\n      const resolution: ConflictResolution = {\n        type: 'manual',\n        manualChanges: manualData,\n        timestamp: new Date()\n      }\n\n      const result = ConflictResolutionEngine.applyResolution(mockCardConflict, resolution)\n\n      expect(result).toEqual(manualData)\n    })\n\n    test('应该为合并解决方案提供智能合并', () => {\n      const resolution: ConflictResolution = {\n        type: 'merge',\n        timestamp: new Date()\n      }\n\n      const result = ConflictResolutionEngine.applyResolution(mockCardConflict, resolution)\n\n      // 验证智能合并结果\n      expect(result.content.frontContent.title).toContain('本地')\n      expect(result.content.frontContent.title).toContain('远程')\n      expect(result.content.frontContent.tags).toContain('本地')\n      expect(result.content.frontContent.tags).toContain('远程')\n      expect(result.content.backContent.title).toBe('背面')\n    })\n\n    test('应该处理未知的解决方案类型', () => {\n      const resolution: ConflictResolution = {\n        type: 'unknown_type' as any,\n        timestamp: new Date()\n      }\n\n      expect(() => {\n        ConflictResolutionEngine.applyResolution(mockCardConflict, resolution)\n      }).toThrow('Unknown resolution type')\n    })\n  })\n\n  describe('文本合并', () => {\n    test('应该合并相同的文本', () => {\n      const merged = (ConflictResolutionEngine as any).mergeText('Same text.', 'Same text.')\n      expect(merged).toBe('Same text.')\n    })\n\n    test('应该合并不同的文本内容', () => {\n      const merged = (ConflictResolutionEngine as any).mergeText('First sentence. Second sentence.', 'Third sentence.')\n      expect(merged).toContain('First sentence')\n      expect(merged).toContain('Second sentence')\n      expect(merged).toContain('Third sentence')\n    })\n\n    test('应该处理空文本', () => {\n      const merged1 = (ConflictResolutionEngine as any).mergeText('', 'Some text.')\n      expect(merged1).toBe('Some text.')\n\n      const merged2 = (ConflictResolutionEngine as any).mergeText('Some text.', '')\n      expect(merged2).toBe('Some text.')\n    })\n  })\n\n  describe('边界情况测试', () => {\n    test('应该处理null或undefined输入', () => {\n      const similarity1 = (ConflictResolutionEngine as any).calculateSimilarity(null as any, 'text')\n      expect(similarity1).toBe(0)\n\n      const similarity2 = (ConflictResolutionEngine as any).calculateSimilarity('text', null as any)\n      expect(similarity2).toBe(0)\n\n      const similarity3 = (ConflictResolutionEngine as any).calculateSimilarity(null as any, null as any)\n      expect(similarity3).toBe(0)\n    })\n\n    test('应该处理特殊字符', () => {\n      const similarity = (ConflictResolutionEngine as any).calculateSimilarity('Text with @#$%', 'Text with @#$%')\n      expect(similarity).toBe(1.0)\n    })\n\n    test('应该处理超长文本', () => {\n      const longText1 = 'A'.repeat(1000)\n      const longText2 = 'A'.repeat(999) + 'B'\n\n      const similarity = (ConflictResolutionEngine as any).calculateSimilarity(longText1, longText2)\n      expect(similarity).toBeGreaterThan(0.9)\n      expect(similarity).toBeLessThan(1.0)\n    })\n  })\n\n  describe('性能测试', () => {\n    test('应该保持良好的性能', () => {\n      const mockConflicts: ConflictBase[] = Array.from({ length: 100 }, (_, i) => ({\n        id: `conflict${i}`,\n        type: 'card_content',\n        entityType: 'card',\n        entityId: `card${i}`,\n        timestamp: new Date(),\n        sourceDevice: 'device1',\n        severity: 'medium',\n        status: 'pending',\n        createdAt: new Date()\n      }))\n\n      const start = performance.now()\n\n      // 为每个冲突生成建议\n      mockConflicts.forEach(conflict => {\n        ConflictResolutionEngine.generateSuggestions(conflict)\n      })\n\n      const end = performance.now()\n      const duration = end - start\n\n      // 100次冲突解决应该在合理时间内完成\n      expect(duration).toBeLessThan(500) // 500ms\n    })\n\n    test('应该避免内存泄漏', () => {\n      // 创建多次文本相似度计算\n      const results = []\n      for (let i = 0; i < 1000; i++) {\n        results.push((ConflictResolutionEngine as any).calculateSimilarity(`text${i}`, `text${i % 100}`))\n      }\n\n      // 清理\n      results.length = 0\n\n      // 如果没有内存泄漏，这个测试应该通过\n      expect(true).toBe(true)\n    })\n  })\n\n  describe('TypeScript类型检查', () => {\n    test('应该符合TypeScript类型', () => {\n      const mockConflict: ConflictBase = {\n        id: 'test',\n        type: 'card_content',\n        entityType: 'card',\n        entityId: 'card1',\n        timestamp: new Date(),\n        sourceDevice: 'device1',\n        severity: 'medium',\n        status: 'pending',\n        createdAt: new Date()\n      }\n\n      const suggestions = ConflictResolutionEngine.generateSuggestions(mockConflict)\n\n      expect(Array.isArray(suggestions)).toBe(true)\n      suggestions.forEach(suggestion => {\n        expect(typeof suggestion.type).toBe('string')\n        expect(typeof suggestion.confidence).toBe('number')\n        expect(typeof suggestion.reason).toBe('string')\n      })\n\n      const resolution: ConflictResolution = {\n        type: 'keep_local',\n        timestamp: new Date()\n      }\n\n      const result = ConflictResolutionEngine.applyResolution(mockConflict, resolution)\n      expect(typeof result).toBe('object')\n    })\n  })\n})"],"version":3}
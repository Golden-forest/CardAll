{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\utils\\conflict-resolution.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\utils\\conflict-resolution.ts"],"sourcesContent":["import type {\r\n  ConflictBase,\r\n  CardConflict,\r\n  FolderConflict,\r\n  TagConflict,\r\n  ConflictSuggestion,\r\n  ConflictResolution\r\n} from '../types/conflict'\r\n\r\nexport class ConflictResolutionEngine {\r\n  /**\r\n   * 生成冲突解决建议\r\n   */\r\n  static generateSuggestions(conflict: ConflictBase): ConflictSuggestion[] {\r\n    const suggestions: ConflictSuggestion[] = []\r\n\r\n    switch (conflict.type) {\r\n      case 'card_content':\r\n        suggestions.push(...this.generateCardContentSuggestions(conflict as CardConflict))\r\n        break\r\n      case 'folder_name':\r\n        suggestions.push(...this.generateFolderNameSuggestions(conflict as FolderConflict))\r\n        break\r\n      case 'tag_rename':\r\n        suggestions.push(...this.generateTagRenameSuggestions(conflict as TagConflict))\r\n        break\r\n      default:\r\n        suggestions.push(this.getDefaultSuggestion())\r\n    }\r\n\r\n    return suggestions.sort((a, b) => b.confidence - a.confidence)\r\n  }\r\n\r\n  /**\r\n   * 卡片内容冲突建议\r\n   */\r\n  private static generateCardContentSuggestions(conflict: CardConflict): ConflictSuggestion[] {\r\n    const suggestions: ConflictSuggestion[] = []\r\n    const { localVersion, remoteVersion } = conflict\r\n\r\n    // 1. 内容相似度分析\r\n    const titleSimilarity = this.calculateSimilarity(\r\n      localVersion.content.frontContent.title,\r\n      remoteVersion.content.frontContent.title\r\n    )\r\n    const textSimilarity = this.calculateSimilarity(\r\n      localVersion.content.frontContent.text,\r\n      remoteVersion.content.frontContent.text\r\n    )\r\n\r\n    // 2. 时间戳分析\r\n    const timeDiff = Math.abs(\r\n      localVersion.updatedAt.getTime() - remoteVersion.updatedAt.getTime()\r\n    )\r\n    const isRecentConflict = timeDiff < 5 * 60 * 1000 // 5分钟内\r\n\r\n    // 3. 内容长度分析\r\n    const localLength = localVersion.content.frontContent.text.length\r\n    const remoteLength = remoteVersion.content.frontContent.text.length\r\n    const lengthRatio = Math.max(localLength, remoteLength) / Math.min(localLength, remoteLength)\r\n\r\n    // 高相似度且时间接近，建议合并\r\n    if (titleSimilarity > 0.8 && textSimilarity > 0.6 && isRecentConflict) {\r\n      suggestions.push({\r\n        type: 'merge',\r\n        confidence: 0.9,\r\n        reason: '内容高度相似，建议智能合并保留最佳内容',\r\n        preview: {\r\n          mergedTitle: this.mergeTitles(localVersion.content.frontContent.title, remoteVersion.content.frontContent.title),\r\n          mergedLength: Math.max(localLength, remoteLength)\r\n        }\r\n      })\r\n    }\r\n\r\n    // 远程版本更新很多，建议保留远程\r\n    if (remoteVersion.updatedAt.getTime() > localVersion.updatedAt.getTime() && \r\n        lengthRatio > 2 && \r\n        remoteLength > localLength) {\r\n      suggestions.push({\r\n        type: 'keep_remote',\r\n        confidence: 0.8,\r\n        reason: '远程版本内容更丰富且更新时间更近'\r\n      })\r\n    }\r\n\r\n    // 本地版本包含独特标签，建议保留本地\r\n    const localTags = new Set(localVersion.content.frontContent.tags)\r\n    const remoteTags = new Set(remoteVersion.content.frontContent.tags)\r\n    const uniqueLocalTags = [...localTags].filter(tag => !remoteTags.has(tag))\r\n    \r\n    if (uniqueLocalTags.length > 0 && uniqueLocalTags.length / localTags.size > 0.3) {\r\n      suggestions.push({\r\n        type: 'keep_local',\r\n        confidence: 0.7,\r\n        reason: '本地版本包含独特标签，可能包含重要分类信息'\r\n      })\r\n    }\r\n\r\n    // 默认建议保留最新版本\r\n    const latestVersion = localVersion.updatedAt.getTime() > remoteVersion.updatedAt.getTime() ? 'local' : 'remote'\r\n    suggestions.push({\r\n      type: latestVersion === 'local' ? 'keep_local' : 'keep_remote',\r\n      confidence: 0.6,\r\n      reason: `保留最新版本（${latestVersion === 'local' ? '本地' : '远程'}设备）`\r\n    })\r\n\r\n    return suggestions\r\n  }\r\n\r\n  /**\r\n   * 文件夹名称冲突建议\r\n   */\r\n  private static generateFolderNameSuggestions(conflict: FolderConflict): ConflictSuggestion[] {\r\n    const suggestions: ConflictSuggestion[] = []\r\n    const { localVersion, remoteVersion } = conflict\r\n\r\n    const localName = localVersion.name.toLowerCase()\r\n    const remoteName = remoteVersion.name.toLowerCase()\r\n\r\n    // 名称完全相同，不需要处理\r\n    if (localName === remoteName) {\r\n      return []\r\n    }\r\n\r\n    // 相似度高，建议合并\r\n    const similarity = this.calculateSimilarity(localVersion.name, remoteVersion.name)\r\n    if (similarity > 0.8) {\r\n      suggestions.push({\r\n        type: 'merge',\r\n        confidence: 0.9,\r\n        reason: '文件夹名称相似，建议统一命名'\r\n      })\r\n    }\r\n\r\n    // 一个是另一个的子集，建议保留更完整的\r\n    if (localName.includes(remoteName) || remoteName.includes(localName)) {\r\n      const longerName = localVersion.name.length > remoteVersion.name.length ? 'local' : 'remote'\r\n      suggestions.push({\r\n        type: longerName === 'local' ? 'keep_local' : 'keep_remote',\r\n        confidence: 0.8,\r\n        reason: '保留更具描述性的文件夹名称'\r\n      })\r\n    }\r\n\r\n    // 按时间戳建议保留最新\r\n    const latestVersion = localVersion.updatedAt.getTime() > remoteVersion.updatedAt.getTime() ? 'local' : 'remote'\r\n    suggestions.push({\r\n      type: latestVersion === 'local' ? 'keep_local' : 'keep_remote',\r\n      confidence: 0.6,\r\n      reason: `保留最新修改的版本（${latestVersion === 'local' ? '本地' : '远程'}）`\r\n    })\r\n\r\n    return suggestions\r\n  }\r\n\r\n  /**\r\n   * 标签重命名冲突建议\r\n   */\r\n  private static generateTagRenameSuggestions(conflict: TagConflict): ConflictSuggestion[] {\r\n    const suggestions: ConflictSuggestion[] = []\r\n    const { localVersion, remoteVersion } = conflict\r\n\r\n    // 分析使用频率\r\n    const usageRatio = localVersion.count / Math.max(remoteVersion.count, 1)\r\n\r\n    // 使用频率差异大，建议保留高频使用的\r\n    if (usageRatio > 2) {\r\n      suggestions.push({\r\n        type: 'keep_local',\r\n        confidence: 0.9,\r\n        reason: `本地标签使用频率更高（${localVersion.count}次 vs ${remoteVersion.count}次）`\r\n      })\r\n    } else if (usageRatio < 0.5) {\r\n      suggestions.push({\r\n        type: 'keep_remote',\r\n        confidence: 0.9,\r\n        reason: `远程标签使用频率更高（${remoteVersion.count}次 vs ${localVersion.count}次）`\r\n      })\r\n    }\r\n\r\n    // 名称质量分析\r\n    const localQuality = this.evaluateTagNameQuality(localVersion.name)\r\n    const remoteQuality = this.evaluateTagNameQuality(remoteVersion.name)\r\n\r\n    if (Math.abs(localQuality - remoteQuality) > 0.3) {\r\n      const betterVersion = localQuality > remoteQuality ? 'local' : 'remote'\r\n      suggestions.push({\r\n        type: betterVersion === 'local' ? 'keep_local' : 'keep_remote',\r\n        confidence: 0.8,\r\n        reason: `${betterVersion === 'local' ? '本地' : '远程'}标签名称质量更好`\r\n      })\r\n    }\r\n\r\n    // 按时间戳建议\r\n    const latestVersion = localVersion.updatedAt.getTime() > remoteVersion.updatedAt.getTime() ? 'local' : 'remote'\r\n    suggestions.push({\r\n      type: latestVersion === 'local' ? 'keep_local' : 'keep_remote',\r\n      confidence: 0.6,\r\n      reason: `保留最新修改的版本`\r\n    })\r\n\r\n    return suggestions\r\n  }\r\n\r\n  /**\r\n   * 计算文本相似度（简化版）\r\n   */\r\n  private static calculateSimilarity(text1: string, text2: string): number {\r\n    if (!text1 || !text2) return 0\r\n\r\n    // 转换为小写并去除空格\r\n    const clean1 = text1.toLowerCase().trim()\r\n    const clean2 = text2.toLowerCase().trim()\r\n\r\n    if (clean1 === clean2) return 1.0\r\n\r\n    // 计算编辑距离相似度\r\n    const maxLength = Math.max(clean1.length, clean2.length)\r\n    if (maxLength === 0) return 1.0\r\n\r\n    const distance = this.levenshteinDistance(clean1, clean2)\r\n    return 1 - (distance / maxLength)\r\n  }\r\n\r\n  /**\r\n   * 计算Levenshtein距离\r\n   */\r\n  private static levenshteinDistance(str1: string, str2: string): number {\r\n    const matrix = Array(str2.length + 1).fill(null).map(() => Array(str1.length + 1).fill(null))\r\n\r\n    for (let i = 0; i <= str1.length; i += 1) matrix[0][i] = i\r\n    for (let j = 0; j <= str2.length; j += 1) matrix[j][0] = j\r\n\r\n    for (let j = 1; j <= str2.length; j += 1) {\r\n      for (let i = 1; i <= str1.length; i += 1) {\r\n        const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1\r\n        matrix[j][i] = Math.min(\r\n          matrix[j][i - 1] + 1, // deletion\r\n          matrix[j - 1][i] + 1, // insertion\r\n          matrix[j - 1][i - 1] + indicator // substitution\r\n        )\r\n      }\r\n    }\r\n\r\n    return matrix[str2.length][str1.length]\r\n  }\r\n\r\n  /**\r\n   * 合并标题\r\n   */\r\n  private static mergeTitles(title1: string, title2: string): string {\r\n    if (title1 === title2) return title1\r\n    \r\n    // 如果一个标题是另一个的扩展，选择更长的\r\n    if (title1.includes(title2) && title1.length > title2.length) return title1\r\n    if (title2.includes(title1) && title2.length > title1.length) return title2\r\n    \r\n    // 合并两个标题的关键词\r\n    const words1 = new Set(title1.toLowerCase().split(/\\s+/))\r\n    const words2 = new Set(title2.toLowerCase().split(/\\s+/))\r\n    const allWords = new Set([...words1, ...words2])\r\n    \r\n    // 重新组合，保留原有顺序\r\n    const title1Words = title1.split(/\\s+/)\r\n    const title2Words = title2.split(/\\s+/)\r\n    const mergedWords: string[] = []\r\n    \r\n    // 添加第一个标题的词汇\r\n    title1Words.forEach(word => {\r\n      if (!mergedWords.includes(word) && allWords.has(word.toLowerCase())) {\r\n        mergedWords.push(word)\r\n      }\r\n    })\r\n    \r\n    // 添加第二个标题的独特词汇\r\n    title2Words.forEach(word => {\r\n      if (!mergedWords.includes(word) && allWords.has(word.toLowerCase())) {\r\n        mergedWords.push(word)\r\n      }\r\n    })\r\n    \r\n    return mergedWords.join(' ')\r\n  }\r\n\r\n  /**\r\n   * 评估标签名称质量\r\n   */\r\n  private static evaluateTagNameQuality(tagName: string): number {\r\n    let score = 0.5 // 基础分数\r\n\r\n    // 长度评分\r\n    if (tagName.length >= 3 && tagName.length <= 20) score += 0.2\r\n    if (tagName.length > 30) score -= 0.1\r\n\r\n    // 字符评分\r\n    const hasValidChars = /^[a-zA-Z0-9\\u4e00-\\u9fff\\s\\-_]+$/.test(tagName)\r\n    if (hasValidChars) score += 0.2\r\n\r\n    // 大小写评分\r\n    if (tagName === tagName.toLowerCase() || \r\n        /^[A-Z][a-z]+([A-Z][a-z]*)*$/.test(tagName)) {\r\n      score += 0.1\r\n    }\r\n\r\n    // 特殊字符评分\r\n    const specialChars = tagName.match(/[^a-zA-Z0-9\\u4e00-\\u9fff\\s]/g)\r\n    if (specialChars && specialChars.length > 2) score -= 0.1\r\n\r\n    return Math.max(0, Math.min(1, score))\r\n  }\r\n\r\n  /**\r\n   * 默认建议\r\n   */\r\n  private static getDefaultSuggestion(): ConflictSuggestion {\r\n    return {\r\n      type: 'manual',\r\n      confidence: 0.5,\r\n      reason: '无法自动确定最佳解决方案，建议手动处理'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 应用解决方案\r\n   */\r\n  static applyResolution(\r\n    conflict: ConflictBase, \r\n    resolution: ConflictResolution\r\n  ): any {\r\n    switch (resolution.type) {\r\n      case 'keep_local':\r\n        return this.getLocalVersion(conflict)\r\n      \r\n      case 'keep_remote':\r\n        return this.getRemoteVersion(conflict)\r\n      \r\n      case 'merge':\r\n        return this.mergeVersions(conflict, resolution.mergedData)\r\n      \r\n      case 'manual':\r\n        return resolution.mergedData || resolution.manualChanges\r\n      \r\n      default:\r\n        throw new Error(`Unknown resolution type: ${resolution.type}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取本地版本\r\n   */\r\n  private static getLocalVersion(conflict: ConflictBase): any {\r\n    if (conflict.entityType === 'card') {\r\n      const cardConflict = conflict as CardConflict\r\n      return cardConflict.localVersion\r\n    }\r\n    return (conflict as any).localVersion\r\n  }\r\n\r\n  /**\r\n   * 获取远程版本\r\n   */\r\n  private static getRemoteVersion(conflict: ConflictBase): any {\r\n    if (conflict.entityType === 'card') {\r\n      const cardConflict = conflict as CardConflict\r\n      return cardConflict.remoteVersion\r\n    }\r\n    return (conflict as any).remoteVersion\r\n  }\r\n\r\n  /**\r\n   * 合并版本\r\n   */\r\n  private static mergeVersions(conflict: ConflictBase, mergedData?: any): any {\r\n    if (!mergedData) {\r\n      // 如果没有提供合并数据，使用智能合并\r\n      return this.smartMerge(conflict)\r\n    }\r\n    return mergedData\r\n  }\r\n\r\n  /**\r\n   * 智能合并\r\n   */\r\n  private static smartMerge(conflict: ConflictBase): any {\r\n    if (conflict.entityType === 'card') {\r\n      const cardConflict = conflict as CardConflict\r\n      const local = cardConflict.localVersion\r\n      const remote = cardConflict.remoteVersion\r\n\r\n      return {\r\n        content: {\r\n          frontContent: {\r\n            title: this.mergeTitles(\r\n              local.content.frontContent.title,\r\n              remote.content.frontContent.title\r\n            ),\r\n            text: this.mergeText(\r\n              local.content.frontContent.text,\r\n              remote.content.frontContent.text\r\n            ),\r\n            tags: [...new Set([\r\n              ...local.content.frontContent.tags,\r\n              ...remote.content.frontContent.tags\r\n            ])],\r\n            lastModified: new Date()\r\n          },\r\n          backContent: {\r\n            title: this.mergeTitles(\r\n              local.content.backContent.title,\r\n              remote.content.backContent.title\r\n            ),\r\n            text: this.mergeText(\r\n              local.content.backContent.text,\r\n              remote.content.backContent.text\r\n            ),\r\n            tags: [...new Set([\r\n              ...local.content.backContent.tags,\r\n              ...remote.content.backContent.tags\r\n            ])],\r\n            lastModified: new Date()\r\n          }\r\n        },\r\n        style: local.style,\r\n        folderId: local.folderId,\r\n        isFlipped: local.isFlipped,\r\n        updatedAt: new Date()\r\n      }\r\n    }\r\n\r\n    // 其他类型冲突的默认合并策略\r\n    return this.getLocalVersion(conflict)\r\n  }\r\n\r\n  /**\r\n   * 合并文本内容\r\n   */\r\n  private static mergeText(text1: string, text2: string): string {\r\n    if (text1 === text2) return text1\r\n    \r\n    // 简单的文本合并策略\r\n    const sentences1 = text1.split(/[.!?]+/).filter(s => s.trim())\r\n    const sentences2 = text2.split(/[.!?]+/).filter(s => s.trim())\r\n    \r\n    // 去重合并\r\n    const allSentences = new Set([\r\n      ...sentences1.map(s => s.trim()),\r\n      ...sentences2.map(s => s.trim())\r\n    ])\r\n    \r\n    return `${Array.from(allSentences)\r\n      .filter(s => s.length > 0)\r\n      .join('. ')  }.`\r\n  }\r\n}"],"version":3}
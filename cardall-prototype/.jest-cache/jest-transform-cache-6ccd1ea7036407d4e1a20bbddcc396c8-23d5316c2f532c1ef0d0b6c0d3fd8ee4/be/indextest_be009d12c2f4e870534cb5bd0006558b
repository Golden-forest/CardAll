3042a63c542e27abba60c6431c1e798a
"use strict";
/**
 * 数据迁移功能测试套件入口
 */
Object.defineProperty(exports, "__esModule", { value: true });
// 导入所有测试模块
require("./DataMigrationTool.core.test");
require("./DataMigrationTool.source-analysis.test");
require("./DataMigrationTool.plan-execution.test");
require("./DataMigrationTool.accuracy.test");
require("./DataMigrationTool.backup.test");
require("./DataMigrationTool.error-handling.test");
// 测试套件描述
describe('DataMigrationTool - 完整测试套件', () => {
    test('应该导出所有必要的测试工具和模块', () => {
        // 验证数据迁移工具可以导入
        expect(() => require('@/services/data-migration-tool')).not.toThrow();
        // 验证数据库可以导入
        expect(() => require('@/services/database-unified')).not.toThrow();
        // 验证测试工具可以导入
        expect(() => require('./test-utils')).not.toThrow();
    });
    test('测试环境应该正确配置', () => {
        // 验证Jest环境
        expect(jest).toBeDefined();
        expect(global.describe).toBeDefined();
        expect(global.test).toBeDefined();
        expect(global.beforeEach).toBeDefined();
        expect(global.afterEach).toBeDefined();
        // 验证浏览器API模拟
        expect(global.localStorage).toBeDefined();
        expect(global.crypto).toBeDefined();
        expect(crypto.randomUUID).toBeDefined();
        expect(typeof crypto.randomUUID).toBe('function');
        // 验证fetch API
        expect(global.fetch).toBeDefined();
    });
    test('应该能够创建测试数据', () => {
        const { TestDataFactory } = require('./test-utils');
        // 验证可以创建测试卡片
        const testCard = TestDataFactory.createTestCard();
        expect(testCard.id).toBeDefined();
        expect(testCard.frontContent.title).toBeDefined();
        expect(testCard.backContent.title).toBeDefined();
        // 验证可以创建测试文件夹
        const testFolder = TestDataFactory.createTestFolder();
        expect(testFolder.id).toBeDefined();
        expect(testFolder.name).toBeDefined();
        // 验证可以创建测试标签
        const testTag = TestDataFactory.createTestTag();
        expect(testTag.id).toBeDefined();
        expect(testTag.name).toBeDefined();
        // 验证可以创建批量数据
        const bulkData = TestDataFactory.createBulkTestData(5, 2, 3);
        expect(bulkData.cards.length).toBe(5);
        expect(bulkData.folders.length).toBe(2);
        expect(bulkData.tags.length).toBe(3);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXHNyY1xcX190ZXN0c19fXFxzZXJ2aWNlc1xcZGF0YS1taWdyYXRpb25cXGluZGV4LnRlc3QudHMiLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOztBQUVILFdBQVc7QUFDWCx5Q0FBc0M7QUFDdEMsb0RBQWlEO0FBQ2pELG1EQUFnRDtBQUNoRCw2Q0FBMEM7QUFDMUMsMkNBQXdDO0FBQ3hDLG1EQUFnRDtBQUVoRCxTQUFTO0FBQ1QsUUFBUSxDQUFDLDRCQUE0QixFQUFFLEdBQUcsRUFBRTtJQUMxQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFO1FBQzVCLGVBQWU7UUFDZixNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUE7UUFFckUsWUFBWTtRQUNaLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUVsRSxhQUFhO1FBQ2IsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUNyRCxDQUFDLENBQUMsQ0FBQTtJQUVGLElBQUksQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFO1FBQ3RCLFdBQVc7UUFDWCxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUE7UUFDMUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtRQUNyQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFBO1FBQ2pDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUE7UUFDdkMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtRQUV0QyxhQUFhO1FBQ2IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtRQUN6QyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFBO1FBQ25DLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUE7UUFDdkMsTUFBTSxDQUFDLE9BQU8sTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUVqRCxjQUFjO1FBQ2QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtJQUNwQyxDQUFDLENBQUMsQ0FBQTtJQUVGLElBQUksQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFO1FBQ3RCLE1BQU0sRUFBRSxlQUFlLEVBQUUsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUE7UUFFbkQsYUFBYTtRQUNiLE1BQU0sUUFBUSxHQUFHLGVBQWUsQ0FBQyxjQUFjLEVBQUUsQ0FBQTtRQUNqRCxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFBO1FBQ2pDLE1BQU0sQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFBO1FBQ2pELE1BQU0sQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFBO1FBRWhELGNBQWM7UUFDZCxNQUFNLFVBQVUsR0FBRyxlQUFlLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQTtRQUNyRCxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFBO1FBQ25DLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUE7UUFFckMsYUFBYTtRQUNiLE1BQU0sT0FBTyxHQUFHLGVBQWUsQ0FBQyxhQUFhLEVBQUUsQ0FBQTtRQUMvQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFBO1FBQ2hDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUE7UUFFbEMsYUFBYTtRQUNiLE1BQU0sUUFBUSxHQUFHLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQzVELE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNyQyxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDdkMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ3RDLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXHNyY1xcX190ZXN0c19fXFxzZXJ2aWNlc1xcZGF0YS1taWdyYXRpb25cXGluZGV4LnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiDmlbDmja7ov4Hnp7vlip/og73mtYvor5XlpZfku7blhaXlj6NcbiAqL1xuXG4vLyDlr7zlhaXmiYDmnInmtYvor5XmqKHlnZdcbmltcG9ydCAnLi9EYXRhTWlncmF0aW9uVG9vbC5jb3JlLnRlc3QnXG5pbXBvcnQgJy4vRGF0YU1pZ3JhdGlvblRvb2wuc291cmNlLWFuYWx5c2lzLnRlc3QnXG5pbXBvcnQgJy4vRGF0YU1pZ3JhdGlvblRvb2wucGxhbi1leGVjdXRpb24udGVzdCdcbmltcG9ydCAnLi9EYXRhTWlncmF0aW9uVG9vbC5hY2N1cmFjeS50ZXN0J1xuaW1wb3J0ICcuL0RhdGFNaWdyYXRpb25Ub29sLmJhY2t1cC50ZXN0J1xuaW1wb3J0ICcuL0RhdGFNaWdyYXRpb25Ub29sLmVycm9yLWhhbmRsaW5nLnRlc3QnXG5cbi8vIOa1i+ivleWll+S7tuaPj+i/sFxuZGVzY3JpYmUoJ0RhdGFNaWdyYXRpb25Ub29sIC0g5a6M5pW05rWL6K+V5aWX5Lu2JywgKCkgPT4ge1xuICB0ZXN0KCflupTor6Xlr7zlh7rmiYDmnInlv4XopoHnmoTmtYvor5Xlt6XlhbflkozmqKHlnZcnLCAoKSA9PiB7XG4gICAgLy8g6aqM6K+B5pWw5o2u6L+B56e75bel5YW35Y+v5Lul5a+85YWlXG4gICAgZXhwZWN0KCgpID0+IHJlcXVpcmUoJ0Avc2VydmljZXMvZGF0YS1taWdyYXRpb24tdG9vbCcpKS5ub3QudG9UaHJvdygpXG5cbiAgICAvLyDpqozor4HmlbDmja7lupPlj6/ku6Xlr7zlhaVcbiAgICBleHBlY3QoKCkgPT4gcmVxdWlyZSgnQC9zZXJ2aWNlcy9kYXRhYmFzZS11bmlmaWVkJykpLm5vdC50b1Rocm93KClcblxuICAgIC8vIOmqjOivgea1i+ivleW3peWFt+WPr+S7peWvvOWFpVxuICAgIGV4cGVjdCgoKSA9PiByZXF1aXJlKCcuL3Rlc3QtdXRpbHMnKSkubm90LnRvVGhyb3coKVxuICB9KVxuXG4gIHRlc3QoJ+a1i+ivleeOr+Wig+W6lOivpeato+ehrumFjee9ricsICgpID0+IHtcbiAgICAvLyDpqozor4FKZXN0546v5aKDXG4gICAgZXhwZWN0KGplc3QpLnRvQmVEZWZpbmVkKClcbiAgICBleHBlY3QoZ2xvYmFsLmRlc2NyaWJlKS50b0JlRGVmaW5lZCgpXG4gICAgZXhwZWN0KGdsb2JhbC50ZXN0KS50b0JlRGVmaW5lZCgpXG4gICAgZXhwZWN0KGdsb2JhbC5iZWZvcmVFYWNoKS50b0JlRGVmaW5lZCgpXG4gICAgZXhwZWN0KGdsb2JhbC5hZnRlckVhY2gpLnRvQmVEZWZpbmVkKClcblxuICAgIC8vIOmqjOivgea1j+iniOWZqEFQSeaooeaLn1xuICAgIGV4cGVjdChnbG9iYWwubG9jYWxTdG9yYWdlKS50b0JlRGVmaW5lZCgpXG4gICAgZXhwZWN0KGdsb2JhbC5jcnlwdG8pLnRvQmVEZWZpbmVkKClcbiAgICBleHBlY3QoY3J5cHRvLnJhbmRvbVVVSUQpLnRvQmVEZWZpbmVkKClcbiAgICBleHBlY3QodHlwZW9mIGNyeXB0by5yYW5kb21VVUlEKS50b0JlKCdmdW5jdGlvbicpXG5cbiAgICAvLyDpqozor4FmZXRjaCBBUElcbiAgICBleHBlY3QoZ2xvYmFsLmZldGNoKS50b0JlRGVmaW5lZCgpXG4gIH0pXG5cbiAgdGVzdCgn5bqU6K+l6IO95aSf5Yib5bu65rWL6K+V5pWw5o2uJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgVGVzdERhdGFGYWN0b3J5IH0gPSByZXF1aXJlKCcuL3Rlc3QtdXRpbHMnKVxuXG4gICAgLy8g6aqM6K+B5Y+v5Lul5Yib5bu65rWL6K+V5Y2h54mHXG4gICAgY29uc3QgdGVzdENhcmQgPSBUZXN0RGF0YUZhY3RvcnkuY3JlYXRlVGVzdENhcmQoKVxuICAgIGV4cGVjdCh0ZXN0Q2FyZC5pZCkudG9CZURlZmluZWQoKVxuICAgIGV4cGVjdCh0ZXN0Q2FyZC5mcm9udENvbnRlbnQudGl0bGUpLnRvQmVEZWZpbmVkKClcbiAgICBleHBlY3QodGVzdENhcmQuYmFja0NvbnRlbnQudGl0bGUpLnRvQmVEZWZpbmVkKClcblxuICAgIC8vIOmqjOivgeWPr+S7peWIm+W7uua1i+ivleaWh+S7tuWkuVxuICAgIGNvbnN0IHRlc3RGb2xkZXIgPSBUZXN0RGF0YUZhY3RvcnkuY3JlYXRlVGVzdEZvbGRlcigpXG4gICAgZXhwZWN0KHRlc3RGb2xkZXIuaWQpLnRvQmVEZWZpbmVkKClcbiAgICBleHBlY3QodGVzdEZvbGRlci5uYW1lKS50b0JlRGVmaW5lZCgpXG5cbiAgICAvLyDpqozor4Hlj6/ku6XliJvlu7rmtYvor5XmoIfnrb5cbiAgICBjb25zdCB0ZXN0VGFnID0gVGVzdERhdGFGYWN0b3J5LmNyZWF0ZVRlc3RUYWcoKVxuICAgIGV4cGVjdCh0ZXN0VGFnLmlkKS50b0JlRGVmaW5lZCgpXG4gICAgZXhwZWN0KHRlc3RUYWcubmFtZSkudG9CZURlZmluZWQoKVxuXG4gICAgLy8g6aqM6K+B5Y+v5Lul5Yib5bu65om56YeP5pWw5o2uXG4gICAgY29uc3QgYnVsa0RhdGEgPSBUZXN0RGF0YUZhY3RvcnkuY3JlYXRlQnVsa1Rlc3REYXRhKDUsIDIsIDMpXG4gICAgZXhwZWN0KGJ1bGtEYXRhLmNhcmRzLmxlbmd0aCkudG9CZSg1KVxuICAgIGV4cGVjdChidWxrRGF0YS5mb2xkZXJzLmxlbmd0aCkudG9CZSgyKVxuICAgIGV4cGVjdChidWxrRGF0YS50YWdzLmxlbmd0aCkudG9CZSgzKVxuICB9KVxufSkiXSwidmVyc2lvbiI6M30=
{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\utils\\current-performance-baseline.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\utils\\current-performance-baseline.ts"],"sourcesContent":["/**\n * CardAll项目当前性能基准设定\n * 基于前面的代码分析、bundle大小分析和性能测试结果\n */\n\nimport { performanceBenchmark } from './performance-benchmark'\n\nexport interface CurrentPerformanceBaseline {\n  category: string\n  metric: string\n  currentValue: number\n  targetValue: number\n  unit: string\n  improvementTarget: number\n  priority: 'high' | 'medium' | 'low'\n  reasoning: string\n}\n\nexport const currentPerformanceBaseline: CurrentPerformanceBaseline[] = [\n  // === 加载性能基准 ===\n  {\n    category: '加载性能',\n    metric: 'Bundle总大小',\n    currentValue: 1430, // KB\n    targetValue: 800, // KB\n    unit: 'KB',\n    improvementTarget: 44,\n    priority: 'high',\n    reasoning: '当前Bundle过大(1.43MB)，主要问题：编辑器模块(461KB)、同步服务冗余(150KB)、Radix UI过多(133KB)'\n  },\n  {\n    category: '加载性能',\n    metric: '首次内容绘制时间',\n    currentValue: 2200, // ms\n    targetValue: 800, // ms\n    unit: 'ms',\n    improvementTarget: 64,\n    priority: 'high',\n    reasoning: 'Bundle过大导致首屏加载缓慢，需要代码分割和懒加载优化'\n  },\n  {\n    category: '加载性能',\n    metric: '最大内容绘制时间',\n    currentValue: 3500, // ms\n    targetValue: 1200, // ms\n    unit: 'ms',\n    improvementTarget: 66,\n    priority: 'high',\n    reasoning: '编辑器组件和大量Radix UI组件同步加载影响LCP'\n  },\n  {\n    category: '加载性能',\n    metric: '可交互时间',\n    currentValue: 4200, // ms\n    targetValue: 1500, // ms\n    unit: 'ms',\n    improvementTarget: 64,\n    priority: 'high',\n    reasoning: 'JavaScript执行时间过长，主线程阻塞'\n  },\n  {\n    category: '加载性能',\n    metric: '总阻塞时间',\n    currentValue: 1200, // ms\n    targetValue: 150, // ms\n    unit: 'ms',\n    improvementTarget: 88,\n    priority: 'high',\n    reasoning: '大量同步脚本执行阻塞主线程'\n  },\n\n  // === 运行时性能基准 ===\n  {\n    category: '运行时性能',\n    metric: 'JS堆内存使用',\n    currentValue: 120, // MB\n    targetValue: 50, // MB\n    unit: 'MB',\n    improvementTarget: 58,\n    priority: 'medium',\n    reasoning: '同步服务内存泄漏风险，大型对象缓存未清理'\n  },\n  {\n    category: '运行时性能',\n    metric: '组件渲染时间',\n    currentValue: 45, // ms\n    targetValue: 16, // ms\n    unit: 'ms',\n    improvementTarget: 64,\n    priority: 'high',\n    reasoning: '缺乏React.memo和useMemo优化，虚拟滚动未实现'\n  },\n  {\n    category: '运行时性能',\n    metric: '状态更新时间',\n    currentValue: 25, // ms\n    targetValue: 8, // ms\n    unit: 'ms',\n    improvementTarget: 68,\n    priority: 'high',\n    reasoning: 'Context更新频繁，状态选择器未优化'\n  },\n  {\n    category: '运行时性能',\n    metric: '虚拟滚动FPS',\n    currentValue: 25, // FPS\n    targetValue: 60, // FPS\n    unit: 'FPS',\n    improvementTarget: 140,\n    priority: 'high',\n    reasoning: '缺乏虚拟化实现，大量DOM节点同时渲染'\n  },\n\n  // === 同步性能基准 ===\n  {\n    category: '同步性能',\n    metric: '同步操作时间',\n    currentValue: 850, // ms\n    targetValue: 200, // ms\n    unit: 'ms',\n    improvementTarget: 76,\n    priority: 'high',\n    reasoning: '三个同步服务冗余，冲突解决逻辑复杂，网络请求未优化'\n  },\n  {\n    category: '同步性能',\n    metric: '同步成功率',\n    currentValue: 85, // %\n    targetValue: 99, // %\n    unit: '%',\n    improvementTarget: 16,\n    priority: 'medium',\n    reasoning: '网络不稳定时缺乏重试机制，冲突解决算法需要改进'\n  },\n  {\n    category: '同步性能',\n    metric: '冲突解决时间',\n    currentValue: 280, // ms\n    targetValue: 50, // ms\n    unit: 'ms',\n    improvementTarget: 82,\n    priority: 'high',\n    reasoning: '冲突检测算法复杂度O(n²)，需要优化为O(n log n)'\n  },\n\n  // === 数据库性能基准 ===\n  {\n    category: '数据库性能',\n    metric: '数据库查询时间',\n    currentValue: 85, // ms\n    targetValue: 10, // ms\n    unit: 'ms',\n    improvementTarget: 88,\n    priority: 'high',\n    reasoning: 'IndexedDB索引未充分利用，查询未优化'\n  },\n  {\n    category: '数据库性能',\n    metric: '数据库写入时间',\n    currentValue: 35, // ms\n    targetValue: 5, // ms\n    unit: 'ms',\n    improvementTarget: 86,\n    priority: 'high',\n    reasoning: '批量写入未实现，事务管理需要优化'\n  },\n  {\n    category: '数据库性能',\n    metric: '数据库读取时间',\n    currentValue: 18, // ms\n    targetValue: 2, // ms\n    unit: 'ms',\n    improvementTarget: 89,\n    priority: 'high',\n    reasoning: '缓存策略未实现，查询重复执行'\n  },\n\n  // === 网络性能基准 ===\n  {\n    category: '网络性能',\n    metric: 'API响应时间',\n    currentValue: 950, // ms\n    targetValue: 300, // ms\n    unit: 'ms',\n    improvementTarget: 68,\n    priority: 'high',\n    reasoning: 'API请求未压缩，数据传输冗余，缺乏CDN'\n  },\n  {\n    category: '网络性能',\n    metric: '网络延迟',\n    currentValue: 350, // ms\n    targetValue: 100, // ms\n    unit: 'ms',\n    improvementTarget: 71,\n    priority: 'medium',\n    reasoning: '服务器响应慢，DNS解析时间长'\n  },\n  {\n    category: '网络性能',\n    metric: 'Bundle加载时间',\n    currentValue: 4800, // ms\n    targetValue: 1000, // ms\n    unit: 'ms',\n    improvementTarget: 79,\n    priority: 'high',\n    reasoning: 'Bundle未压缩，缺乏HTTP/2支持，CDN配置问题'\n  }\n]\n\n// 计算总体改进目标\nexport function calculateOverallImprovementTarget(): number {\n  let totalImprovement = 0\n  let weightedCount = 0\n\n  currentPerformanceBaseline.forEach(baseline => {\n    const weight = baseline.priority === 'high' ? 3 : baseline.priority === 'medium' ? 2 : 1\n    totalImprovement += baseline.improvementTarget * weight\n    weightedCount += weight\n  })\n\n  return weightedCount > 0 ? totalImprovement / weightedCount : 0\n}\n\n// 获取高优先级优化项目\nexport function getHighPriorityOptimizations(): CurrentPerformanceBaseline[] {\n  return currentPerformanceBaseline.filter(baseline => baseline.priority === 'high')\n}\n\n// 获取各分类的平均改进目标\nexport function getCategoryImprovementTargets(): Record<string, number> {\n  const categories = ['加载性能', '运行时性能', '同步性能', '数据库性能', '网络性能']\n  const targets: Record<string, number> = {}\n\n  categories.forEach(category => {\n    const categoryBaselines = currentPerformanceBaseline.filter(b => b.category === category)\n    if (categoryBaselines.length > 0) {\n      const avgImprovement = categoryBaselines.reduce((sum, b) => sum + b.improvementTarget, 0) / categoryBaselines.length\n      targets[category] = avgImprovement\n    }\n  })\n\n  return targets\n}\n\n// 设定具体的性能目标\nexport function setPerformanceTargets(): void {\n  const targets: Record<string, number> = {}\n\n  currentPerformanceBaseline.forEach(baseline => {\n    targets[baseline.metric] = baseline.targetValue\n  })\n\n  performanceBenchmark.setPerformanceTargets(targets)\n}\n\n// 生成优化时间表\nexport function generateOptimizationTimeline(): Array<{\n  phase: string\n  duration: number\n  improvements: string[]\n  expectedImprovement: number\n}> {\n  return [\n    {\n      phase: '第一阶段：Bundle优化',\n      duration: 2,\n      improvements: [\n        '代码分割优化',\n        '同步服务整合',\n        'Radix UI按需加载',\n        '编辑器模块懒加载'\n      ],\n      expectedImprovement: 35\n    },\n    {\n      phase: '第二阶段：运行时优化',\n      duration: 3,\n      improvements: [\n        'React组件优化',\n        '虚拟滚动实现',\n        '状态管理优化',\n        '内存泄漏修复'\n      ],\n      expectedImprovement: 45\n    },\n    {\n      phase: '第三阶段：同步系统重构',\n      duration: 2,\n      improvements: [\n        '统一同步服务',\n        '冲突解决算法优化',\n        '批量操作实现',\n        '缓存策略改进'\n      ],\n      expectedImprovement: 70\n    },\n    {\n      phase: '第四阶段：数据库优化',\n      duration: 2,\n      improvements: [\n        'IndexedDB索引优化',\n        '查询性能优化',\n        '批量写入实现',\n        '缓存策略实现'\n      ],\n      expectedImprovement: 85\n    },\n    {\n      phase: '第五阶段：网络优化',\n      duration: 1,\n      improvements: [\n        'API压缩优化',\n        'CDN配置',\n        'HTTP/2支持',\n        '预加载策略'\n      ],\n      expectedImprovement: 60\n    }\n  ]\n}\n\n// 验证目标是否可达\nexport function validateTargets(): boolean {\n  const overallTarget = calculateOverallImprovementTarget()\n  const categoryTargets = getCategoryImprovementTargets()\n\n  console.log(`总体改进目标: ${overallTarget.toFixed(1)}%`)\n  console.log('分类改进目标:', categoryTargets)\n\n  // 检查是否所有高优先级项目都有具体目标\n  const highPriorityTargets = getHighPriorityOptimizations()\n  const allHaveTargets = highPriorityTargets.every(baseline => baseline.targetValue > 0)\n\n  return overallTarget >= 70 && allHaveTargets\n}\n\n// 初始化性能基准\nexport function initializePerformanceBaseline(): void {\n  // 设定性能目标\n  setPerformanceTargets()\n\n  // 验证目标可达性\n  const isValid = validateTargets()\n  if (!isValid) {\n    console.warn('性能目标可能过于激进，请重新评估')\n  }\n\n  // 生成优化时间表\n  const timeline = generateOptimizationTimeline()\n  console.log('优化时间表:', timeline)\n\n  console.log('性能基准初始化完成')\n  console.log(`总体改进目标: ${calculateOverallImprovementTarget().toFixed(1)}%`)\n}\n\n// 导出默认的基准数据\nexport default currentPerformanceBaseline"],"version":3}
{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\utils\\test-utils.ts","mappings":";AAAA;;;GAGG;;;AAEH,2CAAoC;AAEpC,+EAA+E;AAC/E,UAAU;AACV,+EAA+E;AAElE,QAAA,aAAa,GAAG;IAC3B;;OAEG;IACH,cAAc,CAAC,YAA0B,EAAE;QACzC,OAAO;YACL,EAAE,EAAE,MAAM,CAAC,UAAU,EAAE;YACvB,YAAY,EAAE;gBACZ,KAAK,EAAE,iBAAiB;gBACxB,IAAI,EAAE,sBAAsB;gBAC5B,IAAI,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;aACvB;YACD,WAAW,EAAE;gBACX,KAAK,EAAE,gBAAgB;gBACvB,IAAI,EAAE,mBAAmB;gBACzB,IAAI,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;aACvB;YACD,KAAK,EAAE;gBACL,IAAI,EAAE,OAAgB;gBACtB,MAAM,EAAE,CAAC,SAAS,CAAC;aACpB;YACD,QAAQ,EAAE,MAAM,CAAC,UAAU,EAAE;YAC7B,MAAM,EAAE,cAAc;YACtB,WAAW,EAAE,CAAC;YACd,WAAW,EAAE,KAAK;YAClB,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,GAAG,SAAS;SACb,CAAA;IACH,CAAC;IAED;;OAEG;IACH,gBAAgB,CAAC,YAA0B,EAAE;QAC3C,OAAO;YACL,EAAE,EAAE,MAAM,CAAC,UAAU,EAAE;YACvB,IAAI,EAAE,aAAa;YACnB,IAAI,EAAE,cAAc;YACpB,QAAQ,EAAE,IAAI;YACd,MAAM,EAAE,cAAc;YACtB,WAAW,EAAE,CAAC;YACd,WAAW,EAAE,KAAK;YAClB,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,GAAG,SAAS;SACb,CAAA;IACH,CAAC;IAED;;OAEG;IACH,aAAa,CAAC,YAA0B,EAAE;QACxC,OAAO;YACL,EAAE,EAAE,MAAM,CAAC,UAAU,EAAE;YACvB,IAAI,EAAE,UAAU;YAChB,KAAK,EAAE,SAAS;YAChB,KAAK,EAAE,CAAC;YACR,MAAM,EAAE,cAAc;YACtB,WAAW,EAAE,CAAC;YACd,WAAW,EAAE,KAAK;YAClB,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,GAAG,SAAS;SACb,CAAA;IACH,CAAC;IAED;;OAEG;IACH,eAAe,CAAC,YAA0B,EAAE;QAC1C,OAAO;YACL,EAAE,EAAE,MAAM,CAAC,UAAU,EAAE;YACvB,MAAM,EAAE,MAAM,CAAC,UAAU,EAAE;YAC3B,MAAM,EAAE,cAAc;YACtB,QAAQ,EAAE,gBAAgB;YAC1B,QAAQ,EAAE,wBAAwB;YAClC,aAAa,EAAE,8BAA8B;YAC7C,QAAQ,EAAE;gBACR,YAAY,EAAE,gBAAgB;gBAC9B,IAAI,EAAE,IAAI,GAAG,GAAG,EAAE,QAAQ;gBAC1B,KAAK,EAAE,GAAG;gBACV,MAAM,EAAE,GAAG;gBACX,MAAM,EAAE,MAAM;gBACd,UAAU,EAAE,IAAI;gBAChB,OAAO,EAAE,EAAE;aACZ;YACD,WAAW,EAAE,WAAoB;YACjC,WAAW,EAAE,CAAC;YACd,WAAW,EAAE,KAAK;YAClB,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,GAAG,SAAS;SACb,CAAA;IACH,CAAC;IAED;;OAEG;IACH,uBAAuB,CAAC,YAA0B,EAAE;QAClD,OAAO;YACL,EAAE,EAAE,MAAM,CAAC,UAAU,EAAE;YACvB,IAAI,EAAE,QAAiB;YACvB,MAAM,EAAE,MAAe;YACvB,QAAQ,EAAE,MAAM,CAAC,UAAU,EAAE;YAC7B,MAAM,EAAE,cAAc;YACtB,IAAI,EAAE,EAAE;YACR,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,UAAU,EAAE,CAAC;YACb,UAAU,EAAE,CAAC;YACb,QAAQ,EAAE,QAAiB;YAC3B,MAAM,EAAE,SAAkB;YAC1B,GAAG,SAAS;SACb,CAAA;IACH,CAAC;CACF,CAAA;AAED,+EAA+E;AAC/E,UAAU;AACV,+EAA+E;AAE/E,MAAa,YAAY;IAIvB;QAHQ;;;;mBAAS,IAAI,GAAG,EAA4B;WAAA;QAC5C;;;;mBAAgC,IAAI,GAAG,EAAE;WAAA;QAG/C,OAAO;QACP,IAAI,CAAC,gBAAgB,EAAE,CAAA;IACzB,CAAC;IAEO,gBAAgB;QACtB,MAAM,MAAM,GAAG,CAAC,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAA;QAClE,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACrB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,GAAG,EAAE,CAAC,CAAA;QACnC,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,QAAQ;IACR,KAAK,CAAC,SAAiB;QACrB,OAAO,IAAI,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,IAAI,GAAG,EAAE,EAAE,SAAS,CAAC,CAAA;IAC1E,CAAC;IAED,OAAO;IACP,KAAK,CAAC,WAAW,CAAC,IAAY,EAAE,MAAgB,EAAE,QAA6B;QAC7E,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,EAAE,CAAA;QAC1D,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,cAAc,CAAC,CAAA;QAEzC,IAAI,CAAC;YACH,MAAM,QAAQ,EAAE,CAAA;QAClB,CAAC;gBAAS,CAAC;YACT,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,cAAc,CAAC,CAAA;QAC9C,CAAC;IACH,CAAC;IAED,UAAU;IACV,KAAK,CAAC,IAAI;QACR,UAAU;IACZ,CAAC;IAED,UAAU;IACV,KAAK,CAAC,KAAK;QACT,UAAU;IACZ,CAAC;IAED,SAAS;IACT,KAAK;QACH,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAA;IAC7C,CAAC;IAED,SAAS;IACT,aAAa;QACX,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAA;IACvC,CAAC;CACF;AApDD,oCAoDC;AAED,MAAM,SAAS;IACb,YAAoB,KAAuB,EAAU,SAAiB;QAA1D;;;;mBAAQ,KAAK;WAAkB;QAAE;;;;mBAAQ,SAAS;WAAQ;IAAG,CAAC;IAE1E,KAAK,CAAC,GAAG,CAAC,IAAS;QACjB,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,IAAI,MAAM,CAAC,UAAU,EAAE,CAAA;QACzC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,GAAG,IAAI,EAAE,EAAE,EAAE,CAAC,CAAA;QACnC,OAAO,EAAE,CAAA;IACX,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,SAAgB;QAC5B,MAAM,GAAG,GAAG,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC,CAAA;QACjE,SAAS,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;YAChC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,EAAE,GAAG,IAAI,EAAE,EAAE,EAAE,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAA;QACzD,CAAC,CAAC,CAAA;QACF,OAAO,GAAG,CAAA;IACZ,CAAC;IAED,KAAK,CAAC,GAAG,CAAC,EAAU;QAClB,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;IAC3B,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAU,EAAE,OAAY;QACnC,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;QACnC,IAAI,QAAQ,EAAE,CAAC;YACb,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,GAAG,QAAQ,EAAE,GAAG,OAAO,EAAE,CAAC,CAAA;YAC/C,OAAO,CAAC,CAAA;QACV,CAAC;QACD,OAAO,CAAC,CAAA;IACV,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAU;QACrB,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;QACrC,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IACxB,CAAC;IAED,KAAK,CAAC,KAAK;QACT,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAA;IACpB,CAAC;IAED,KAAK,CAAC,KAAK;QACT,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAA;IACxB,CAAC;IAED,KAAK,CAAC,OAAO;QACX,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAA;IACxC,CAAC;IAED,KAAK,CAAC,SAAiB;QACrB,OAAO,IAAI,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,CAAA;IAClD,CAAC;IAED,OAAO,CAAC,SAAiB;QACvB,OAAO,IAAI,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,SAAS,CAAC,CAAA;IACxD,CAAC;IAED,OAAO;QACL,OAAO,IAAI,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;IACzD,CAAC;IAED,KAAK,CAAC,KAAa;QACjB,OAAO,IAAI,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAA;IACjE,CAAC;IAED,MAAM,CAAC,MAAc;QACnB,OAAO,IAAI,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,CAAC,CAAA;IAC7E,CAAC;IAED,MAAM,CAAC,SAAiC;QACtC,OAAO,IAAI,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAA;IAC3F,CAAC;IAED,MAAM,CAAC,SAAiB;QACtB,OAAO,IAAI,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,SAAS,CAAC,CAAA;IACxD,CAAC;CACF;AAED,MAAM,cAAc;IAGlB,YACU,KAAuB,EACvB,UAA0B,EAC1B,YAA4B,EAC5B,eAAe,KAAK,EACpB,UAAmB,EACnB,WAAoB,EACpB,eAAwC;QANhD;;;;mBAAQ,KAAK;WAAkB;QAC/B;;;;mBAAQ,UAAU;WAAgB;QAClC;;;;mBAAQ,YAAY;WAAgB;QACpC;;;;mBAAQ,YAAY;WAAQ;QAC5B;;;;mBAAQ,UAAU;WAAS;QAC3B;;;;mBAAQ,WAAW;WAAS;QAC5B;;;;mBAAQ,eAAe;WAAyB;QAT1C;;;;mBAAsB,EAAE;WAAA;QAW9B,IAAI,CAAC,UAAU,EAAE,CAAA;IACnB,CAAC;IAEO,UAAU;QAChB,IAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAA;QAE1C,OAAO;QACP,IAAI,IAAI,CAAC,eAAe,EAAE,CAAC;YACzB,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;QAC1C,CAAC;QAED,OAAO;QACP,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBACjB,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,EAAE,IAAI,CAAC,YAAa,CAAC,CAAA;gBACvD,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,EAAE,IAAI,CAAC,YAAa,CAAC,CAAA;gBACvD,OAAO,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;YAC/C,CAAC,CAAC,CAAA;QACJ,CAAC;QAED,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,IAAI,CAAC,OAAO,EAAE,CAAA;QAChB,CAAC;QAED,OAAO;QACP,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACrB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QACrC,CAAC;QAED,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YACpB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAA;QACvC,CAAC;QAED,IAAI,CAAC,YAAY,GAAG,IAAI,CAAA;IAC1B,CAAC;IAEO,cAAc,CAAC,GAAQ,EAAE,IAAY;QAC3C,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,GAAG,EAAE,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAA;IACtE,CAAC;IAED,MAAM,CAAC,KAAU;QACf,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YACpB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;gBAClD,MAAM,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,UAAW,CAAC,CAAA;gBAC9D,OAAO,UAAU,KAAK,KAAK,CAAA;YAC7B,CAAC,CAAC,CAAA;QACJ,CAAC;QACD,OAAO,IAAI,CAAA;IACb,CAAC;IAED,KAAK,CAAC,OAAO;QACX,OAAO,IAAI,CAAC,YAAY,CAAA;IAC1B,CAAC;IAED,KAAK,CAAC,KAAK;QACT,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAA;IACjC,CAAC;IAED,KAAK,CAAC,KAAK;QACT,OAAO,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;IAC7B,CAAC;IAED,KAAK,CAAC,IAAI;QACR,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;IACxD,CAAC;CACF;AAED,+EAA+E;AAC/E,SAAS;AACT,+EAA+E;AAE/E,MAAa,iBAAiB;IAA9B;QACU;;;;mBAAsC,IAAI,GAAG,EAAE;WAAA;IAwDzD,CAAC;IAtDC,KAAK,CAAC,OAAO,CAAI,IAAY,EAAE,EAAoB;QACjD,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;QACnC,MAAM,MAAM,GAAG,MAAM,EAAE,EAAE,CAAA;QACzB,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS,CAAA;QAE9C,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAA;QACtC,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAA;IAC7B,CAAC;IAED,WAAW,CAAI,IAAY,EAAE,EAAW;QACtC,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;QACnC,MAAM,MAAM,GAAG,EAAE,EAAE,CAAA;QACnB,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS,CAAA;QAE9C,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAA;QACtC,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAA;IAC7B,CAAC;IAEO,iBAAiB,CAAC,IAAY,EAAE,QAAgB;QACtD,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;YACjC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;QACjC,CAAC;QACD,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;IAC7C,CAAC;IAED,QAAQ,CAAC,IAAY;QACnB,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAA;QACtD,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,IAAI,CAAA;QAE1C,MAAM,MAAM,GAAG,CAAC,GAAG,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;QACtD,MAAM,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAA;QAE3D,OAAO;YACL,KAAK,EAAE,YAAY,CAAC,MAAM;YAC1B,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,YAAY,CAAC;YAC9B,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,YAAY,CAAC;YAC9B,GAAG,EAAE,GAAG,GAAG,YAAY,CAAC,MAAM;YAC9B,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAC7C,GAAG,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC;YAC7C,GAAG,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC;SAC9C,CAAA;IACH,CAAC;IAED,WAAW;QACT,MAAM,KAAK,GAAwB,EAAE,CAAA;QACrC,KAAK,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACvC,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAA;QACnC,CAAC;QACD,OAAO,KAAK,CAAA;IACd,CAAC;IAED,KAAK;QACH,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAA;IAC3B,CAAC;CACF;AAzDD,8CAyDC;AAED,+EAA+E;AAC/E,WAAW;AACX,+EAA+E;AAE/E,MAAa,kBAAkB;IAA/B;QACU;;;;mBAAiC,IAAI,GAAG,EAAE;WAAA;QAC1C;;;;mBAAmB,CAAC;WAAA;IA4C9B,CAAC;IA1CC,KAAK,CAAC,YAAY,CAAC,IAAY;QAC7B,UAAU;QACV,MAAM,WAAW,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAA;QAC9C,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,WAAW,CAAC,CAAA;IACvC,CAAC;IAED,gBAAgB,CAAC,KAAa,EAAE,KAAa;QAC3C,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;QAC3C,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;QAC3C,OAAO,IAAI,GAAG,IAAI,CAAA;IACpB,CAAC;IAED,WAAW;QACT,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAA;IAC5C,CAAC;IAED,4BAA4B;QAC1B,MAAM,OAAO,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAA;QAC1C,OAAO,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAA;IAChC,CAAC;IAEO,mBAAmB;QACzB,cAAc;QACd,OAAO,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE,CAAA;IACjC,CAAC;IAED,WAAW,CAAC,cAAsB,EAAE;QAClC,MAAM,KAAK,GAAa,EAAE,CAAA;QAC1B,MAAM,OAAO,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAA;QAC1C,MAAM,MAAM,GAAG,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAA;QAEtC,IAAI,MAAM,GAAG,WAAW,EAAE,CAAC;YACzB,KAAK,CAAC,IAAI,CAAC,QAAQ,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,WAAW,WAAW,IAAI,CAAC,CAAA;QACjE,CAAC;QAED,OAAO,KAAK,CAAA;IACd,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAA;QACtB,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAA;IACnB,CAAC;CACF;AA9CD,gDA8CC;AAED,+EAA+E;AAC/E,SAAS;AACT,+EAA+E;AAE/E,MAAa,eAAe;IAC1B,MAAM,CAAC,KAAK,CAAC,OAAO,CAClB,SAA+B,EAC/B,UAII,EAAE;QAEN,MAAM,EAAE,OAAO,GAAG,IAAI,EAAE,QAAQ,GAAG,GAAG,EAAE,OAAO,GAAG,MAAM,EAAE,GAAG,OAAO,CAAA;QACpE,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;QAE5B,OAAO,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,GAAG,OAAO,EAAE,CAAC;YACxC,IAAI,CAAC;gBACH,MAAM,MAAM,GAAG,MAAM,SAAS,EAAE,CAAA;gBAChC,IAAI,MAAM,EAAE,CAAC;oBACX,OAAO,MAAM,CAAA;gBACf,CAAC;YACH,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,YAAY;YACd,CAAC;YACD,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAA;QAC5B,CAAC;QAED,MAAM,IAAI,KAAK,CAAC,GAAG,OAAO,QAAQ,OAAO,QAAQ,CAAC,CAAA;IACpD,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,EAAU;QAC3B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAA;IACxD,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,KAAK,CAChB,EAAoB,EACpB,UAII,EAAE;QAEN,MAAM,EAAE,UAAU,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,EAAE,OAAO,GAAG,IAAI,EAAE,GAAG,OAAO,CAAA;QAChE,IAAI,SAAgB,CAAA;QAEpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC;YACrC,IAAI,CAAC;gBACH,OAAO,MAAM,EAAE,EAAE,CAAA;YACnB,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,SAAS,GAAG,KAAc,CAAA;gBAC1B,IAAI,CAAC,GAAG,UAAU,EAAE,CAAC;oBACnB,MAAM,QAAQ,GAAG,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAA;oBACzD,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAA;gBAC5B,CAAC;YACH,CAAC;QACH,CAAC;QAED,MAAM,SAAU,CAAA;IAClB,CAAC;CACF;AAxDD,0CAwDC;AAED,+EAA+E;AAC/E,OAAO;AACP,+EAA+E;AAElE,QAAA,cAAc,GAAG;IAC5B,eAAe,CAAC,QAAgB,EAAE,KAAa,EAAE,OAAe;QAC9D,MAAM,IAAI,GAAG,QAAQ,IAAI,KAAK,IAAI,QAAQ,IAAI,OAAO,CAAA;QACrD,IAAI,IAAI,EAAE,CAAC;YACT,OAAO;gBACL,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,QAAQ,2BAA2B,KAAK,MAAM,OAAO,EAAE;gBAClF,IAAI,EAAE,IAAI;aACX,CAAA;QACH,CAAC;aAAM,CAAC;YACN,OAAO;gBACL,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,QAAQ,uBAAuB,KAAK,MAAM,OAAO,EAAE;gBAC9E,IAAI,EAAE,KAAK;aACZ,CAAA;QACH,CAAC;IACH,CAAC;IAED,aAAa,CAAC,QAAgB;QAC5B,MAAM,SAAS,GAAG,4EAA4E,CAAA;QAC9F,MAAM,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QACrC,IAAI,IAAI,EAAE,CAAC;YACT,OAAO;gBACL,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,QAAQ,yBAAyB;gBAC5D,IAAI,EAAE,IAAI;aACX,CAAA;QACH,CAAC;aAAM,CAAC;YACN,OAAO;gBACL,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,QAAQ,qBAAqB;gBACxD,IAAI,EAAE,KAAK;aACZ,CAAA;QACH,CAAC;IACH,CAAC;IAED,iBAAiB,CAAC,QAAa,EAAE,UAA6D;QAC5F,MAAM,EAAE,WAAW,EAAE,cAAc,EAAE,GAAG,UAAU,CAAA;QAClD,MAAM,MAAM,GAAa,EAAE,CAAA;QAE3B,IAAI,WAAW,IAAI,QAAQ,CAAC,mBAAmB,GAAG,WAAW,EAAE,CAAC;YAC9D,MAAM,CAAC,IAAI,CAAC,UAAU,QAAQ,CAAC,mBAAmB,WAAW,WAAW,IAAI,CAAC,CAAA;QAC/E,CAAC;QAED,IAAI,cAAc,IAAI,QAAQ,CAAC,WAAW,GAAG,cAAc,EAAE,CAAC;YAC5D,MAAM,CAAC,IAAI,CAAC,OAAO,QAAQ,CAAC,WAAW,SAAS,cAAc,EAAE,CAAC,CAAA;QACnE,CAAC;QAED,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACxB,OAAO;gBACL,OAAO,EAAE,GAAG,EAAE,CAAC,6CAA6C;gBAC5D,IAAI,EAAE,IAAI;aACX,CAAA;QACH,CAAC;aAAM,CAAC;YACN,OAAO;gBACL,OAAO,EAAE,GAAG,EAAE,CAAC,uBAAuB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBACzD,IAAI,EAAE,KAAK;aACZ,CAAA;QACH,CAAC;IACH,CAAC;CACF,CAAA;AAED,UAAU;AACV,MAAM,CAAC,MAAM,CAAC,sBAAc,CAAC,CAAA;AAE7B,+EAA+E;AAC/E,aAAa;AACb,+EAA+E;AAElE,QAAA,cAAc,GAAG;IAC5B,oBAAoB;QAClB,OAAO;YACL,IAAI,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;gBAC9B,MAAM,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;oBAChC,IAAI,EAAE,EAAE;oBACR,KAAK,EAAE,IAAI;iBACZ,CAAC;gBACF,MAAM,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;oBAChC,IAAI,EAAE,IAAI;oBACV,KAAK,EAAE,IAAI;iBACZ,CAAC;gBACF,MAAM,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;oBAChC,IAAI,EAAE,IAAI;oBACV,KAAK,EAAE,IAAI;iBACZ,CAAC;gBACF,MAAM,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;oBAChC,KAAK,EAAE,IAAI;iBACZ,CAAC;aACH,CAAC;YACF,IAAI,EAAE;gBACJ,OAAO,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;gBAC3E,MAAM,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;gBAC1E,MAAM,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;gBAC7E,OAAO,EAAE,cAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;aACtD;SACF,CAAA;IACH,CAAC;IAED,mBAAmB;QACjB,MAAM,MAAM,GAAG,IAAI,YAAY,EAAE,CAAA;QACjC,OAAO,MAAM,CAAA;IACf,CAAC;CACF,CAAA;AAED,+EAA+E;AAC/E,UAAU;AACV,+EAA+E;AAElE,QAAA,iBAAiB,GAAG;IAC/B;;OAEG;IACH,gBAAgB,CAAC,SAKb,EAAE;QACJ,MAAM,EAAE,SAAS,GAAG,EAAE,EAAE,WAAW,GAAG,CAAC,EAAE,QAAQ,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,EAAE,GAAG,MAAM,CAAA;QAEhF,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACvD,qBAAa,CAAC,cAAc,CAAC,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAC3E,CAAA;QAED,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAC3D,qBAAa,CAAC,gBAAgB,CAAC,EAAE,IAAI,EAAE,UAAU,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAC5D,CAAA;QAED,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACrD,qBAAa,CAAC,aAAa,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CACtD,CAAA;QAED,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACzD,qBAAa,CAAC,eAAe,CAAC,EAAE,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CACjE,CAAA;QAED,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,CAAA;IACzC,CAAC;IAED;;OAEG;IACH,oBAAoB,CAAC,OAAe,IAAI;QACtC,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAC3C,qBAAa,CAAC,cAAc,CAAC;YAC3B,YAAY,EAAE;gBACZ,KAAK,EAAE,sBAAsB,CAAC,GAAG,CAAC,EAAE;gBACpC,IAAI,EAAE,uBAAuB,CAAC,GAAG,CAAC,qBAAqB;gBACvD,IAAI,EAAE,CAAC,SAAS,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,CAAC,EAAE,EAAE,eAAe,CAAC;aACxD;SACF,CAAC,CACH,CAAA;IACH,CAAC;CACF,CAAA;AAED,+EAA+E;AAC/E,SAAS;AACT,+EAA+E;AAElE,QAAA,iBAAiB,GAAG,IAAI,iBAAiB,EAAE,CAAA;AAC3C,QAAA,kBAAkB,GAAG,IAAI,kBAAkB,EAAE,CAAA;AAC7C,QAAA,eAAe,GAAG,eAAe,CAAA","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\utils\\test-utils.ts"],"sourcesContent":["/**\r\n * 测试工具函数库\r\n * 提供常用的测试辅助函数和模拟对象\r\n */\r\n\r\nimport { jest } from '@jest/globals'\r\n\r\n// ============================================================================\r\n// 模拟对象生成器\r\n// ============================================================================\r\n\r\nexport const mockFactories = {\r\n  /**\r\n   * 生成模拟卡片数据\r\n   */\r\n  createMockCard(overrides: Partial<any> = {}) {\r\n    return {\r\n      id: crypto.randomUUID(),\r\n      frontContent: {\r\n        title: 'Test Card Front',\r\n        text: 'This is test content',\r\n        tags: ['test', 'card']\r\n      },\r\n      backContent: {\r\n        title: 'Test Card Back',\r\n        text: 'Back content test',\r\n        tags: ['back', 'test']\r\n      },\r\n      style: {\r\n        type: 'solid' as const,\r\n        colors: ['#ffffff']\r\n      },\r\n      folderId: crypto.randomUUID(),\r\n      userId: 'test-user-id',\r\n      syncVersion: 1,\r\n      pendingSync: false,\r\n      updatedAt: new Date(),\r\n      createdAt: new Date(),\r\n      ...overrides\r\n    }\r\n  },\r\n\r\n  /**\r\n   * 生成模拟文件夹数据\r\n   */\r\n  createMockFolder(overrides: Partial<any> = {}) {\r\n    return {\r\n      id: crypto.randomUUID(),\r\n      name: 'Test Folder',\r\n      path: '/test/folder',\r\n      parentId: null,\r\n      userId: 'test-user-id',\r\n      syncVersion: 1,\r\n      pendingSync: false,\r\n      updatedAt: new Date(),\r\n      createdAt: new Date(),\r\n      ...overrides\r\n    }\r\n  },\r\n\r\n  /**\r\n   * 生成模拟标签数据\r\n   */\r\n  createMockTag(overrides: Partial<any> = {}) {\r\n    return {\r\n      id: crypto.randomUUID(),\r\n      name: 'Test Tag',\r\n      color: '#3b82f6',\r\n      count: 1,\r\n      userId: 'test-user-id',\r\n      syncVersion: 1,\r\n      pendingSync: false,\r\n      updatedAt: new Date(),\r\n      createdAt: new Date(),\r\n      ...overrides\r\n    }\r\n  },\r\n\r\n  /**\r\n   * 生成模拟图片数据\r\n   */\r\n  createMockImage(overrides: Partial<any> = {}) {\r\n    return {\r\n      id: crypto.randomUUID(),\r\n      cardId: crypto.randomUUID(),\r\n      userId: 'test-user-id',\r\n      fileName: 'test-image.jpg',\r\n      filePath: '/images/test-image.jpg',\r\n      thumbnailPath: '/images/test-image-thumb.jpg',\r\n      metadata: {\r\n        originalName: 'test-image.jpg',\r\n        size: 1024 * 100, // 100KB\r\n        width: 800,\r\n        height: 600,\r\n        format: 'jpeg',\r\n        compressed: true,\r\n        quality: 80\r\n      },\r\n      storageMode: 'indexeddb' as const,\r\n      syncVersion: 1,\r\n      pendingSync: false,\r\n      updatedAt: new Date(),\r\n      createdAt: new Date(),\r\n      ...overrides\r\n    }\r\n  },\r\n\r\n  /**\r\n   * 生成同步操作数据\r\n   */\r\n  createMockSyncOperation(overrides: Partial<any> = {}) {\r\n    return {\r\n      id: crypto.randomUUID(),\r\n      type: 'create' as const,\r\n      entity: 'card' as const,\r\n      entityId: crypto.randomUUID(),\r\n      userId: 'test-user-id',\r\n      data: {},\r\n      timestamp: new Date(),\r\n      retryCount: 0,\r\n      maxRetries: 5,\r\n      priority: 'normal' as const,\r\n      status: 'pending' as const,\r\n      ...overrides\r\n    }\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// 数据库模拟工具\r\n// ============================================================================\r\n\r\nexport class MockDatabase {\r\n  private stores = new Map<string, Map<string, any>>()\r\n  private transactionStack: Set<string> = new Set()\r\n\r\n  constructor() {\r\n    // 初始化表\r\n    this.initializeTables()\r\n  }\r\n\r\n  private initializeTables() {\r\n    const tables = ['cards', 'folders', 'tags', 'images', 'syncQueue']\r\n    tables.forEach(table => {\r\n      this.stores.set(table, new Map())\r\n    })\r\n  }\r\n\r\n  // 模拟表操作\r\n  table(tableName: string) {\r\n    return new MockTable(this.stores.get(tableName) || new Map(), tableName)\r\n  }\r\n\r\n  // 模拟事务\r\n  async transaction(mode: string, tables: string[], callback: () => Promise<void>): Promise<void> {\r\n    const transactionKey = `tx_${Date.now()}_${Math.random()}`\r\n    this.transactionStack.add(transactionKey)\r\n\r\n    try {\r\n      await callback()\r\n    } finally {\r\n      this.transactionStack.delete(transactionKey)\r\n    }\r\n  }\r\n\r\n  // 模拟打开数据库\r\n  async open(): Promise<void> {\r\n    // 模拟数据库打开\r\n  }\r\n\r\n  // 模拟关闭数据库\r\n  async close(): Promise<void> {\r\n    // 模拟数据库关闭\r\n  }\r\n\r\n  // 清空所有数据\r\n  clear(): void {\r\n    this.stores.forEach(store => store.clear())\r\n  }\r\n\r\n  // 获取所有表名\r\n  getTableNames(): string[] {\r\n    return Array.from(this.stores.keys())\r\n  }\r\n}\r\n\r\nclass MockTable {\r\n  constructor(private store: Map<string, any>, private tableName: string) {}\r\n\r\n  async add(data: any): Promise<string> {\r\n    const id = data.id || crypto.randomUUID()\r\n    this.store.set(id, { ...data, id })\r\n    return id\r\n  }\r\n\r\n  async bulkAdd(dataArray: any[]): Promise<string[]> {\r\n    const ids = dataArray.map(data => data.id || crypto.randomUUID())\r\n    dataArray.forEach((data, index) => {\r\n      this.store.set(ids[index], { ...data, id: ids[index] })\r\n    })\r\n    return ids\r\n  }\r\n\r\n  async get(id: string): Promise<any | undefined> {\r\n    return this.store.get(id)\r\n  }\r\n\r\n  async update(id: string, changes: any): Promise<number> {\r\n    const existing = this.store.get(id)\r\n    if (existing) {\r\n      this.store.set(id, { ...existing, ...changes })\r\n      return 1\r\n    }\r\n    return 0\r\n  }\r\n\r\n  async delete(id: string): Promise<number> {\r\n    const deleted = this.store.delete(id)\r\n    return deleted ? 1 : 0\r\n  }\r\n\r\n  async clear(): Promise<void> {\r\n    this.store.clear()\r\n  }\r\n\r\n  async count(): Promise<number> {\r\n    return this.store.size\r\n  }\r\n\r\n  async toArray(): Promise<any[]> {\r\n    return Array.from(this.store.values())\r\n  }\r\n\r\n  where(fieldName: string) {\r\n    return new MockCollection(this.store, fieldName)\r\n  }\r\n\r\n  orderBy(fieldName: string) {\r\n    return new MockCollection(this.store, null, fieldName)\r\n  }\r\n\r\n  reverse() {\r\n    return new MockCollection(this.store, null, null, true)\r\n  }\r\n\r\n  limit(count: number) {\r\n    return new MockCollection(this.store, null, null, false, count)\r\n  }\r\n\r\n  offset(offset: number) {\r\n    return new MockCollection(this.store, null, null, false, undefined, offset)\r\n  }\r\n\r\n  filter(predicate: (item: any) => boolean) {\r\n    return new MockCollection(this.store, null, null, false, undefined, undefined, predicate)\r\n  }\r\n\r\n  sortBy(fieldName: string) {\r\n    return new MockCollection(this.store, null, fieldName)\r\n  }\r\n}\r\n\r\nclass MockCollection {\r\n  private filteredData: any[] = []\r\n\r\n  constructor(\r\n    private store: Map<string, any>,\r\n    private whereField?: string | null,\r\n    private orderByField?: string | null,\r\n    private reverseOrder = false,\r\n    private limitCount?: number,\r\n    private offsetValue?: number,\r\n    private filterPredicate?: (item: any) => boolean\r\n  ) {\r\n    this.buildQuery()\r\n  }\r\n\r\n  private buildQuery() {\r\n    let data = Array.from(this.store.values())\r\n\r\n    // 应用过滤\r\n    if (this.filterPredicate) {\r\n      data = data.filter(this.filterPredicate)\r\n    }\r\n\r\n    // 应用排序\r\n    if (this.orderByField) {\r\n      data.sort((a, b) => {\r\n        const aVal = this.getNestedValue(a, this.orderByField!)\r\n        const bVal = this.getNestedValue(b, this.orderByField!)\r\n        return aVal > bVal ? 1 : aVal < bVal ? -1 : 0\r\n      })\r\n    }\r\n\r\n    if (this.reverseOrder) {\r\n      data.reverse()\r\n    }\r\n\r\n    // 应用分页\r\n    if (this.offsetValue) {\r\n      data = data.slice(this.offsetValue)\r\n    }\r\n\r\n    if (this.limitCount) {\r\n      data = data.slice(0, this.limitCount)\r\n    }\r\n\r\n    this.filteredData = data\r\n  }\r\n\r\n  private getNestedValue(obj: any, path: string): any {\r\n    return path.split('.').reduce((current, key) => current?.[key], obj)\r\n  }\r\n\r\n  equals(value: any): MockCollection {\r\n    if (this.whereField) {\r\n      this.filteredData = this.filteredData.filter(item => {\r\n        const fieldValue = this.getNestedValue(item, this.whereField!)\r\n        return fieldValue === value\r\n      })\r\n    }\r\n    return this\r\n  }\r\n\r\n  async toArray(): Promise<any[]> {\r\n    return this.filteredData\r\n  }\r\n\r\n  async count(): Promise<number> {\r\n    return this.filteredData.length\r\n  }\r\n\r\n  async first(): Promise<any | undefined> {\r\n    return this.filteredData[0]\r\n  }\r\n\r\n  async last(): Promise<any | undefined> {\r\n    return this.filteredData[this.filteredData.length - 1]\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// 性能测试工具\r\n// ============================================================================\r\n\r\nexport class PerformanceTester {\r\n  private measurements: Map<string, number[]> = new Map()\r\n\r\n  async measure<T>(name: string, fn: () => Promise<T>): Promise<{ result: T; duration: number }> {\r\n    const startTime = performance.now()\r\n    const result = await fn()\r\n    const duration = performance.now() - startTime\r\n\r\n    this.recordMeasurement(name, duration)\r\n    return { result, duration }\r\n  }\r\n\r\n  measureSync<T>(name: string, fn: () => T): { result: T; duration: number } {\r\n    const startTime = performance.now()\r\n    const result = fn()\r\n    const duration = performance.now() - startTime\r\n\r\n    this.recordMeasurement(name, duration)\r\n    return { result, duration }\r\n  }\r\n\r\n  private recordMeasurement(name: string, duration: number): void {\r\n    if (!this.measurements.has(name)) {\r\n      this.measurements.set(name, [])\r\n    }\r\n    this.measurements.get(name)!.push(duration)\r\n  }\r\n\r\n  getStats(name: string) {\r\n    const measurements = this.measurements.get(name) || []\r\n    if (measurements.length === 0) return null\r\n\r\n    const sorted = [...measurements].sort((a, b) => a - b)\r\n    const sum = measurements.reduce((acc, val) => acc + val, 0)\r\n    \r\n    return {\r\n      count: measurements.length,\r\n      min: Math.min(...measurements),\r\n      max: Math.max(...measurements),\r\n      avg: sum / measurements.length,\r\n      median: sorted[Math.floor(sorted.length / 2)],\r\n      p95: sorted[Math.floor(sorted.length * 0.95)],\r\n      p99: sorted[Math.floor(sorted.length * 0.99)]\r\n    }\r\n  }\r\n\r\n  getAllStats() {\r\n    const stats: Record<string, any> = {}\r\n    for (const [name] of this.measurements) {\r\n      stats[name] = this.getStats(name)\r\n    }\r\n    return stats\r\n  }\r\n\r\n  reset(): void {\r\n    this.measurements.clear()\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// 内存泄漏检测工具\r\n// ============================================================================\r\n\r\nexport class MemoryLeakDetector {\r\n  private snapshots: Map<string, number> = new Map()\r\n  private baseline: number = 0\r\n\r\n  async takeSnapshot(name: string): Promise<void> {\r\n    // 模拟内存使用量\r\n    const memoryUsage = this.simulateMemoryUsage()\r\n    this.snapshots.set(name, memoryUsage)\r\n  }\r\n\r\n  compareSnapshots(name1: string, name2: string): number {\r\n    const mem1 = this.snapshots.get(name1) || 0\r\n    const mem2 = this.snapshots.get(name2) || 0\r\n    return mem2 - mem1\r\n  }\r\n\r\n  setBaseline(): void {\r\n    this.baseline = this.simulateMemoryUsage()\r\n  }\r\n\r\n  getMemoryGrowthSinceBaseline(): number {\r\n    const current = this.simulateMemoryUsage()\r\n    return current - this.baseline\r\n  }\r\n\r\n  private simulateMemoryUsage(): number {\r\n    // 模拟内存使用量（MB）\r\n    return Math.random() * 100 + 50\r\n  }\r\n\r\n  detectLeaks(thresholdMB: number = 10): string[] {\r\n    const leaks: string[] = []\r\n    const current = this.simulateMemoryUsage()\r\n    const growth = current - this.baseline\r\n\r\n    if (growth > thresholdMB) {\r\n      leaks.push(`内存增长 ${growth.toFixed(2)}MB 超过阈值 ${thresholdMB}MB`)\r\n    }\r\n\r\n    return leaks\r\n  }\r\n\r\n  clearSnapshots(): void {\r\n    this.snapshots.clear()\r\n    this.baseline = 0\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// 异步测试工具\r\n// ============================================================================\r\n\r\nexport class AsyncTestHelper {\r\n  static async waitFor<T>(\r\n    condition: () => T | Promise<T>,\r\n    options: {\r\n      timeout?: number\r\n      interval?: number\r\n      message?: string\r\n    } = {}\r\n  ): Promise<T> {\r\n    const { timeout = 5000, interval = 100, message = '条件超时' } = options\r\n    const startTime = Date.now()\r\n\r\n    while (Date.now() - startTime < timeout) {\r\n      try {\r\n        const result = await condition()\r\n        if (result) {\r\n          return result\r\n        }\r\n      } catch (error) {\r\n        // 忽略错误，继续等待\r\n      }\r\n      await this.delay(interval)\r\n    }\r\n\r\n    throw new Error(`${message}: 等待 ${timeout}ms 后超时`)\r\n  }\r\n\r\n  static async delay(ms: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, ms))\r\n  }\r\n\r\n  static async retry<T>(\r\n    fn: () => Promise<T>,\r\n    options: {\r\n      maxRetries?: number\r\n      delay?: number\r\n      backoff?: boolean\r\n    } = {}\r\n  ): Promise<T> {\r\n    const { maxRetries = 3, delay = 1000, backoff = true } = options\r\n    let lastError: Error\r\n\r\n    for (let i = 0; i <= maxRetries; i++) {\r\n      try {\r\n        return await fn()\r\n      } catch (error) {\r\n        lastError = error as Error\r\n        if (i < maxRetries) {\r\n          const waitTime = backoff ? delay * Math.pow(2, i) : delay\r\n          await this.delay(waitTime)\r\n        }\r\n      }\r\n    }\r\n\r\n    throw lastError!\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// 断言扩展\r\n// ============================================================================\r\n\r\nexport const customMatchers = {\r\n  toBeWithinRange(received: number, floor: number, ceiling: number) {\r\n    const pass = received >= floor && received <= ceiling\r\n    if (pass) {\r\n      return {\r\n        message: () => `expected ${received} not to be within range ${floor} - ${ceiling}`,\r\n        pass: true\r\n      }\r\n    } else {\r\n      return {\r\n        message: () => `expected ${received} to be within range ${floor} - ${ceiling}`,\r\n        pass: false\r\n      }\r\n    }\r\n  },\r\n\r\n  toBeValidUUID(received: string) {\r\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i\r\n    const pass = uuidRegex.test(received)\r\n    if (pass) {\r\n      return {\r\n        message: () => `expected ${received} not to be a valid UUID`,\r\n        pass: true\r\n      }\r\n    } else {\r\n      return {\r\n        message: () => `expected ${received} to be a valid UUID`,\r\n        pass: false\r\n      }\r\n    }\r\n  },\r\n\r\n  toHavePerformance(received: any, thresholds: { maxDuration?: number; minSuccessRate?: number }) {\r\n    const { maxDuration, minSuccessRate } = thresholds\r\n    const errors: string[] = []\r\n\r\n    if (maxDuration && received.averageResponseTime > maxDuration) {\r\n      errors.push(`平均响应时间 ${received.averageResponseTime}ms 超过阈值 ${maxDuration}ms`)\r\n    }\r\n\r\n    if (minSuccessRate && received.successRate < minSuccessRate) {\r\n      errors.push(`成功率 ${received.successRate} 低于阈值 ${minSuccessRate}`)\r\n    }\r\n\r\n    if (errors.length === 0) {\r\n      return {\r\n        message: () => `expected performance not to meet thresholds`,\r\n        pass: true\r\n      }\r\n    } else {\r\n      return {\r\n        message: () => `performance issues: ${errors.join(', ')}`,\r\n        pass: false\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// 注册自定义断言\r\nexpect.extend(customMatchers)\r\n\r\n// ============================================================================\r\n// Mock 函数生成器\r\n// ============================================================================\r\n\r\nexport const mockGenerators = {\r\n  createSupabaseClient() {\r\n    return {\r\n      from: jest.fn().mockReturnValue({\r\n        select: jest.fn().mockReturnValue({\r\n          data: [],\r\n          error: null\r\n        }),\r\n        insert: jest.fn().mockReturnValue({\r\n          data: null,\r\n          error: null\r\n        }),\r\n        update: jest.fn().mockReturnValue({\r\n          data: null,\r\n          error: null\r\n        }),\r\n        delete: jest.fn().mockReturnValue({\r\n          error: null\r\n        })\r\n      }),\r\n      auth: {\r\n        getUser: jest.fn().mockResolvedValue({ data: { user: null }, error: null }),\r\n        signUp: jest.fn().mockResolvedValue({ data: { user: null }, error: null }),\r\n        signIn: jest.fn().mockResolvedValue({ data: { session: null }, error: null }),\r\n        signOut: jest.fn().mockResolvedValue({ error: null })\r\n      }\r\n    }\r\n  },\r\n\r\n  createDexieInstance() {\r\n    const mockDb = new MockDatabase()\r\n    return mockDb\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// 测试数据生成器\r\n// ============================================================================\r\n\r\nexport const testDataGenerator = {\r\n  /**\r\n   * 生成测试数据集\r\n   */\r\n  generateTestData(config: {\r\n    cardCount?: number\r\n    folderCount?: number\r\n    tagCount?: number\r\n    imageCount?: number\r\n  } = {}) {\r\n    const { cardCount = 10, folderCount = 3, tagCount = 5, imageCount = 5 } = config\r\n\r\n    const cards = Array.from({ length: cardCount }, (_, i) =>\r\n      mockFactories.createMockCard({ frontContent: { title: `Card ${i + 1}` } })\r\n    )\r\n\r\n    const folders = Array.from({ length: folderCount }, (_, i) =>\r\n      mockFactories.createMockFolder({ name: `Folder ${i + 1}` })\r\n    )\r\n\r\n    const tags = Array.from({ length: tagCount }, (_, i) =>\r\n      mockFactories.createMockTag({ name: `Tag ${i + 1}` })\r\n    )\r\n\r\n    const images = Array.from({ length: imageCount }, (_, i) =>\r\n      mockFactories.createMockImage({ fileName: `image${i + 1}.jpg` })\r\n    )\r\n\r\n    return { cards, folders, tags, images }\r\n  },\r\n\r\n  /**\r\n   * 生成大规模测试数据\r\n   */\r\n  generateLargeDataset(size: number = 1000) {\r\n    return Array.from({ length: size }, (_, i) =>\r\n      mockFactories.createMockCard({\r\n        frontContent: {\r\n          title: `Large Dataset Card ${i + 1}`,\r\n          text: `This is card number ${i + 1} in a large dataset`,\r\n          tags: [`batch-${Math.floor(i / 100)}`, `large-dataset`]\r\n        }\r\n      })\r\n    )\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// 导出工具实例\r\n// ============================================================================\r\n\r\nexport const performanceTester = new PerformanceTester()\r\nexport const memoryLeakDetector = new MemoryLeakDetector()\r\nexport const asyncTestHelper = AsyncTestHelper"],"version":3}
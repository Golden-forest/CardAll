{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\offline-manager.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\offline-manager.ts"],"sourcesContent":["import { db } from './database-unified'\nimport { syncQueueManager } from './sync-queue'\nimport { localOperationService } from './local-operation'\nimport { advancedCacheManager } from './advanced-cache'\n\n// ============================================================================\n// 网络状态类型\n// ============================================================================\n\nexport enum NetworkStatus {\n  ONLINE = 'online',\n  OFFLINE = 'offline',\n  UNSTABLE = 'unstable',\n  UNKNOWN = 'unknown'\n}\n\n// ============================================================================\n// 离线操作类型\n// ============================================================================\n\nexport enum OfflineOperationType {\n  CREATE = 'create',\n  UPDATE = 'update',\n  DELETE = 'delete',\n  BATCH = 'batch'\n}\n\n// ============================================================================\n// 离线操作接口\n// ============================================================================\n\nexport interface OfflineOperation {\n  id: string\n  type: OfflineOperationType\n  entity: 'card' | 'folder' | 'tag' | 'image'\n  entityId?: string\n  data: any\n  userId?: string\n  timestamp: Date\n  priority: 'critical' | 'high' | 'normal' | 'low'\n  retryCount: number\n  maxRetries: number\n  dependencies?: string[]\n  metadata?: {\n    estimatedSize?: number\n    conflictResolution?: 'local' | 'remote' | 'merge' | 'manual'\n    syncOnResume?: boolean\n  }\n}\n\n// ============================================================================\n// 网络监控信息\n// ============================================================================\n\nexport interface NetworkInfo {\n  status: NetworkStatus\n  effectiveType?: string\n  downlink?: number\n  rtt?: number\n  saveData?: boolean\n  lastChanged: Date\n  connectionType?: 'wifi' | 'cellular' | 'ethernet' | 'unknown'\n}\n\n// ============================================================================\n// 离线统计信息\n// ============================================================================\n\nexport interface OfflineStats {\n  isOffline: boolean\n  offlineDuration: number\n  pendingOperations: number\n  completedOfflineOperations: number\n  failedOperations: number\n  averageResponseTime: number\n  dataSyncedOnResume: number\n  lastSyncTime?: Date\n  estimatedBandwidthSaved: number\n}\n\n// ============================================================================\n// 冲突检测接口\n// ============================================================================\n\nexport interface ConflictInfo {\n  id: string\n  entityType: string\n  entityId: string\n  localData: any\n  remoteData: any\n  conflictType: 'simultaneous_edit' | 'delete_conflict' | 'structure_conflict'\n  timestamp: Date\n  resolution?: 'local' | 'remote' | 'merge' | 'manual' | 'pending'\n}\n\n// ============================================================================\n// 离线状态快照接口\n// ============================================================================\n\nexport interface OfflineStateSnapshot {\n  version: string\n  timestamp: string\n  offlineStartTime?: string\n  reconnectAttempts: number\n  networkInfo: NetworkInfo\n  pendingOperations: any[]\n  conflicts: any[]\n  stats: any\n  checksum: string\n}\n\n// ============================================================================\n// 网络质量评估接口\n// ============================================================================\n\nexport interface NetworkQualityAssessment {\n  isStable: boolean\n  bandwidth: 'excellent' | 'good' | 'fair' | 'poor'\n  latency: 'low' | 'medium' | 'high'\n  reliability: number\n  recommendedStrategy: SyncStrategyType\n}\n\n// ============================================================================\n// 同步策略类型\n// ============================================================================\n\nexport type SyncStrategyType = 'immediate' | 'batched' | 'prioritized' | 'conservative'\n\n// ============================================================================\n// 智能同步策略接口\n// ============================================================================\n\nexport interface SmartSyncStrategy {\n  strategy: SyncStrategyType\n  batchSize: number\n  delayBetweenBatches: number\n  priorityFilter: ('critical' | 'high' | 'normal' | 'low')[]\n  maxConcurrentOperations: number\n  timeout: number\n  retryStrategy: {\n    maxRetries: number\n    initialDelay: number\n    maxDelay: number\n    backoffMultiplier: number\n  }\n}\n\n// ============================================================================\n// 信号量实现（用于并发控制）\n// ============================================================================\n\nclass Semaphore {\n  private available: number\n  private waiting: (() => void)[] = []\n\n  constructor(count: number) {\n    this.available = count\n  }\n\n  async acquire(): Promise<void> {\n    if (this.available > 0) {\n      this.available--\n      return\n    }\n\n    return new Promise<void>((resolve) => {\n      this.waiting.push(resolve)\n    })\n  }\n\n  release(): void {\n    this.available++\n    \n    if (this.waiting.length > 0 && this.available > 0) {\n      const next = this.waiting.shift()\n      if (next) {\n        this.available--\n        next()\n      }\n    }\n  }\n}\n\n// ============================================================================\n// 离线管理器主类\n// ============================================================================\n\nexport class OfflineManager {\n  private isOffline = !navigator.onLine\n  private networkInfo: NetworkInfo = {\n    status: navigator.onLine ? NetworkStatus.ONLINE : NetworkStatus.OFFLINE,\n    lastChanged: new Date()\n  }\n  private offlineOperations: OfflineOperation[] = []\n  private conflicts: ConflictInfo[] = []\n  private offlineStartTime?: Date\n  private syncTimer?: NodeJS.Timeout\n  private reconnectAttempts = 0\n  private maxReconnectAttempts = 10\n  \n  // 事件监听器\n  private listeners: {\n    onNetworkChange?: (info: NetworkInfo) => void\n    onOfflineOperation?: (operation: OfflineOperation) => void\n    onSyncProgress?: (progress: { completed: number; total: number }) => void\n    onConflict?: (conflict: ConflictInfo) => void\n    onSyncComplete?: (stats: OfflineStats) => void\n    onError?: (error: Error) => void\n  } = {}\n\n  constructor() {\n    this.initializeOfflineManager()\n  }\n\n  // ============================================================================\n  // 离线状态检测和管理\n  // ============================================================================\n\n  /**\n   * 获取当前网络状态\n   */\n  getNetworkStatus(): NetworkInfo {\n    return { ...this.networkInfo }\n  }\n\n  /**\n   * 检查是否离线\n   */\n  isCurrentlyOffline(): boolean {\n    return this.isOffline\n  }\n\n  /**\n   * 获取离线统计信息\n   */\n  async getOfflineStats(): Promise<OfflineStats> {\n    const pendingOps = await this.getPendingOfflineOperations()\n    const completedOps = await this.getCompletedOfflineOperations()\n    const failedOps = await this.getFailedOfflineOperations()\n    \n    return {\n      isOffline: this.isOffline,\n      offlineDuration: this.calculateOfflineDuration(),\n      pendingOperations: pendingOps.length,\n      completedOfflineOperations: completedOps.length,\n      failedOperations: failedOps.length,\n      averageResponseTime: this.calculateAverageResponseTime(),\n      dataSyncedOnResume: this.calculateDataSyncedOnResume(),\n      lastSyncTime: await this.getLastSyncTime(),\n      estimatedBandwidthSaved: this.calculateEstimatedBandwidthSaved(pendingOps)\n    }\n  }\n\n  // ============================================================================\n  // 离线操作管理\n  // ============================================================================\n\n  /**\n   * 执行离线操作\n   */\n  async executeOfflineOperation<T = any>(\n    operation: Omit<OfflineOperation, 'id' | 'timestamp' | 'retryCount'>\n  ): Promise<{ success: boolean; data?: T; error?: string; operationId: string }> {\n    const offlineOperation: OfflineOperation = {\n      ...operation,\n      id: crypto.randomUUID(),\n      timestamp: new Date(),\n      retryCount: 0\n    }\n\n    try {\n      // 检查依赖关系\n      if (operation.dependencies && operation.dependencies.length > 0) {\n        await this.validateDependencies(operation.dependencies)\n      }\n\n      // 执行本地操作\n      const result = await this.performLocalOperation(offlineOperation)\n      \n      // 存储离线操作记录\n      await this.storeOfflineOperation(offlineOperation)\n      \n      // 通知监听器\n      if (this.listeners.onOfflineOperation) {\n        this.listeners.onOfflineOperation(offlineOperation)\n      }\n\n      return {\n        success: true,\n        data: result,\n        operationId: offlineOperation.id\n      }\n    } catch (error) {\n      console.error('Offline operation failed:', error)\n      \n      // 存储失败的操作\n      offlineOperation.priority = 'high' // 失败的操作提升优先级\n      await this.storeOfflineOperation(offlineOperation)\n      \n      return {\n        success: false,\n        error: error instanceof Error ? error.message : String(error),\n        operationId: offlineOperation.id\n      }\n    }\n  }\n\n  /**\n   * 批量执行离线操作\n   */\n  async executeBatchOfflineOperations(\n    operations: Omit<OfflineOperation, 'id' | 'timestamp' | 'retryCount'>[]\n  ): Promise<{ \n    success: boolean; \n    results: Array<{ success: boolean; data?: any; error?: string; operationId: string }>;\n    batchId: string \n  }> {\n    const batchId = crypto.randomUUID()\n    const results: Array<{ success: boolean; data?: any; error?: string; operationId: string }> = []\n    \n    try {\n      // 验证所有操作的依赖关系\n      const allDependencies = operations\n        .filter(op => op.dependencies && op.dependencies.length > 0)\n        .flatMap(op => op.dependencies!)\n      \n      if (allDependencies.length > 0) {\n        await this.validateDependencies(allDependencies)\n      }\n\n      // 按优先级排序\n      const sortedOperations = this.sortOperationsByPriority(operations)\n      \n      // 执行操作\n      for (const operation of sortedOperations) {\n        const result = await this.executeOfflineOperation(operation)\n        results.push(result)\n      }\n\n      return {\n        success: results.every(r => r.success),\n        results,\n        batchId\n      }\n    } catch (error) {\n      console.error('Batch offline operations failed:', error)\n      return {\n        success: false,\n        results: results.map(result => ({\n          ...result,\n          success: false,\n          error: error instanceof Error ? error.message : String(error)\n        })),\n        batchId\n      }\n    }\n  }\n\n  /**\n   * 获取待处理的离线操作\n   */\n  async getPendingOfflineOperations(): Promise<OfflineOperation[]> {\n    return await db.transaction('r', [db.syncQueue], async () => {\n      const syncOps = await db.syncQueue\n        .where('status')\n        .equals('pending' as any)\n        .toArray()\n      \n      return syncOps.map(op => this.convertSyncOperationToOfflineOperation(op))\n    })\n  }\n\n  /**\n   * 重试失败的离线操作\n   */\n  async retryFailedOperations(): Promise<number> {\n    const failedOps = await this.getFailedOfflineOperations()\n    let retriedCount = 0\n    \n    for (const operation of failedOps) {\n      try {\n        await this.retryOperation(operation)\n        retriedCount++\n      } catch (error) {\n        console.warn(`Failed to retry operation ${operation.id}:`, error)\n      }\n    }\n    \n    return retriedCount\n  }\n\n  // ============================================================================\n  // 网络恢复处理\n  // ============================================================================\n\n  /**\n   * 处理网络恢复\n   */\n  private async handleNetworkRecovery(): Promise<void> {\n    console.log('Network recovered, analyzing sync strategy...')\n    \n    const startTime = performance.now()\n    const stats = await this.getOfflineStats()\n    \n    try {\n      // 网络质量评估\n      const networkQuality = await this.assessNetworkQuality()\n      \n      // 智能同步策略选择\n      const syncStrategy = await this.determineSyncStrategy(stats, networkQuality)\n      \n      console.log(`Using sync strategy: ${syncStrategy.strategy}`)\n      \n      // 通知同步开始\n      this.notifySyncProgress(0, stats.pendingOperations)\n      \n      // 根据策略执行同步\n      const syncResult = await this.executeSmartSync(syncStrategy, stats)\n      \n      // 处理冲突\n      if (syncResult.conflicts.length > 0) {\n        await this.handleConflicts(syncResult.conflicts)\n      }\n      \n      // 执行后同步优化\n      await this.performPostSyncOptimizations(syncResult, networkQuality)\n      \n      // 更新统计信息\n      const finalStats = await this.getOfflineStats()\n      this.notifySyncComplete(finalStats)\n      \n      console.log(`Smart offline sync completed in ${(performance.now() - startTime).toFixed(2)}ms`)\n      console.log(`Sync results: ${syncResult.syncedOperations} operations, ${syncResult.conflicts.length} conflicts`)\n      \n    } catch (error) {\n      console.error('Smart offline sync failed:', error)\n      \n      // 智能错误恢复\n      await this.handleSyncError(error, stats)\n      \n      if (this.listeners.onError) {\n        this.listeners.onError(error instanceof Error ? error : new Error(String(error)))\n      }\n    }\n  }\n\n  /**\n   * 评估网络质量 - 增强版本\n   */\n  private async assessNetworkQuality(): Promise<NetworkQualityAssessment> {\n    const connection = (navigator as any).connection\n    const assessment: NetworkQualityAssessment = {\n      isStable: true,\n      bandwidth: 'good',\n      latency: 'low',\n      reliability: 0.9,\n      recommendedStrategy: 'immediate'\n    }\n    \n    if (connection) {\n      // 增强的带宽评估\n      if (connection.downlink) {\n        if (connection.downlink >= 20) {\n          assessment.bandwidth = 'excellent'\n          assessment.recommendedStrategy = 'immediate'\n        } else if (connection.downlink >= 10) {\n          assessment.bandwidth = 'good'\n          assessment.recommendedStrategy = 'immediate'\n        } else if (connection.downlink >= 3) {\n          assessment.bandwidth = 'fair'\n          assessment.recommendedStrategy = 'batched'\n        } else if (connection.downlink >= 1) {\n          assessment.bandwidth = 'poor'\n          assessment.recommendedStrategy = 'conservative'\n        } else {\n          assessment.bandwidth = 'poor'\n          assessment.recommendedStrategy = 'prioritized'\n        }\n      }\n      \n      // 增强的延迟评估\n      if (connection.rtt) {\n        if (connection.rtt <= 50) {\n          assessment.latency = 'low'\n        } else if (connection.rtt <= 150) {\n          assessment.latency = 'medium'\n          assessment.recommendedStrategy = 'batched'\n        } else if (connection.rtt <= 500) {\n          assessment.latency = 'high'\n          assessment.recommendedStrategy = 'conservative'\n        } else {\n          assessment.latency = 'high'\n          assessment.recommendedStrategy = 'prioritized'\n        }\n      }\n      \n      // 增强的连接类型评估\n      if (connection.type === 'cellular') {\n        assessment.reliability = 0.7\n        if (connection.effectiveType === 'slow-2g' || connection.effectiveType === '2g') {\n          assessment.recommendedStrategy = 'conservative'\n        }\n      } else if (connection.type === 'wifi') {\n        assessment.reliability = 0.9\n      } else if (connection.type === 'ethernet') {\n        assessment.reliability = 0.95\n      }\n    }\n    \n    // 增强的连接稳定性测试\n    const stabilityTest = await this.testConnectionStability()\n    assessment.isStable = stabilityTest.isStable\n    assessment.reliability *= stabilityTest.stabilityFactor\n    \n    // 如果连接不稳定，调整推荐策略\n    if (!assessment.isStable) {\n      assessment.recommendedStrategy = 'conservative'\n    }\n    \n    // 基于历史数据调整可靠性\n    const historicalReliability = await this.calculateHistoricalReliability()\n    assessment.reliability *= historicalReliability\n    \n    return assessment\n  }\n\n  /**\n   * 测试连接稳定性\n   */\n  private async testConnectionStability(): Promise<{ isStable: boolean; stabilityFactor: number }> {\n    const testUrls = [\n      'https://www.google.com/favicon.ico',\n      'https://www.cloudflare.com/favicon.ico'\n    ]\n    \n    const results = await Promise.allSettled(\n      testUrls.map(url => fetch(url, { method: 'HEAD', mode: 'no-cors' }))\n    )\n    \n    const successfulTests = results.filter(result => \n      result.status === 'fulfilled'\n    ).length\n    \n    const stabilityFactor = successfulTests / testUrls.length\n    const isStable = stabilityFactor >= 0.8\n    \n    return { isStable, stabilityFactor }\n  }\n\n  /**\n   * 确定推荐策略\n   */\n  private determineRecommendedStrategy(assessment: NetworkQualityAssessment): SyncStrategyType {\n    if (assessment.isStable && assessment.bandwidth === 'excellent' && assessment.latency === 'low') {\n      return 'immediate'\n    } else if (assessment.reliability >= 0.8 && assessment.bandwidth !== 'poor') {\n      return 'batched'\n    } else if (assessment.reliability >= 0.6) {\n      return 'prioritized'\n    } else {\n      return 'conservative'\n    }\n  }\n\n  /**\n   * 确定同步策略\n   */\n  private async determineSyncStrategy(\n    stats: OfflineStats, \n    networkQuality: NetworkQualityAssessment\n  ): Promise<SmartSyncStrategy> {\n    const strategy: SmartSyncStrategy = {\n      strategy: networkQuality.recommendedStrategy,\n      batchSize: this.calculateOptimalBatchSize(stats, networkQuality),\n      delayBetweenBatches: this.calculateBatchDelay(networkQuality),\n      priorityFilter: this.determinePriorityFilter(stats, networkQuality),\n      maxConcurrentOperations: this.calculateMaxConcurrent(networkQuality),\n      timeout: this.calculateOperationTimeout(networkQuality),\n      retryStrategy: this.determineRetryStrategy(networkQuality)\n    }\n    \n    return strategy\n  }\n\n  /**\n   * 计算最优批处理大小\n   */\n  private calculateOptimalBatchSize(\n    stats: OfflineStats, \n    networkQuality: NetworkQualityAssessment\n  ): number {\n    let baseSize = 10\n    \n    // 根据带宽调整\n    switch (networkQuality.bandwidth) {\n      case 'excellent':\n        baseSize = 50\n        break\n      case 'good':\n        baseSize = 30\n        break\n      case 'fair':\n        baseSize = 15\n        break\n      case 'poor':\n        baseSize = 5\n        break\n    }\n    \n    // 根据数据量调整\n    if (stats.pendingOperations > 100) {\n      baseSize = Math.min(baseSize, 20)\n    }\n    \n    return baseSize\n  }\n\n  /**\n   * 计算批处理延迟\n   */\n  private calculateBatchDelay(networkQuality: NetworkQualityAssessment): number {\n    switch (networkQuality.bandwidth) {\n      case 'excellent':\n        return 100\n      case 'good':\n        return 300\n      case 'fair':\n        return 500\n      case 'poor':\n        return 1000\n      default:\n        return 500\n    }\n  }\n\n  /**\n   * 确定优先级过滤器\n   */\n  private determinePriorityFilter(\n    stats: OfflineStats, \n    networkQuality: NetworkQualityAssessment\n  ): ('critical' | 'high' | 'normal' | 'low')[] {\n    if (networkQuality.reliability < 0.7) {\n      return ['critical', 'high'] // 只同步高优先级操作\n    } else if (stats.pendingOperations > 50) {\n      return ['critical', 'high', 'normal'] // 排除低优先级\n    } else {\n      return ['critical', 'high', 'normal', 'low'] // 全部同步\n    }\n  }\n\n  /**\n   * 计算最大并发操作数\n   */\n  private calculateMaxConcurrent(networkQuality: NetworkQualityAssessment): number {\n    switch (networkQuality.latency) {\n      case 'low':\n        return networkQuality.bandwidth === 'excellent' ? 5 : 3\n      case 'medium':\n        return 2\n      case 'high':\n        return 1\n      default:\n        return 2\n    }\n  }\n\n  /**\n   * 计算操作超时时间\n   */\n  private calculateOperationTimeout(networkQuality: NetworkQualityAssessment): number {\n    let baseTimeout = 10000 // 10秒基础超时\n    \n    switch (networkQuality.latency) {\n      case 'high':\n        baseTimeout *= 2\n        break\n      case 'medium':\n        baseTimeout *= 1.5\n        break\n    }\n    \n    switch (networkQuality.bandwidth) {\n      case 'poor':\n        baseTimeout *= 1.5\n        break\n      case 'fair':\n        baseTimeout *= 1.2\n        break\n    }\n    \n    return baseTimeout\n  }\n\n  /**\n   * 确定重试策略\n   */\n  private determineRetryStrategy(networkQuality: NetworkQualityAssessment): {\n    maxRetries: number\n    initialDelay: number\n    maxDelay: number\n    backoffMultiplier: number\n  } {\n    if (networkQuality.isStable && networkQuality.reliability >= 0.8) {\n      return {\n        maxRetries: 3,\n        initialDelay: 1000,\n        maxDelay: 5000,\n        backoffMultiplier: 2\n      }\n    } else {\n      return {\n        maxRetries: 5,\n        initialDelay: 2000,\n        maxDelay: 15000,\n        backoffMultiplier: 2.5\n      }\n    }\n  }\n\n  /**\n   * 执行智能同步\n   */\n  private async executeSmartSync(\n    strategy: SmartSyncStrategy, \n    stats: OfflineStats\n  ): Promise<{\n    success: boolean\n    syncedOperations: number\n    conflicts: ConflictInfo[]\n    errors: string[]\n  }> {\n    const pendingOps = await this.getPendingOfflineOperations()\n    \n    // 过滤优先级\n    const filteredOps = pendingOps.filter(op => \n      strategy.priorityFilter.includes(op.priority)\n    )\n    \n    // 分批处理\n    const batches = this.createOptimalBatches(filteredOps, strategy.batchSize)\n    \n    const results = {\n      success: true,\n      syncedOperations: 0,\n      conflicts: [] as ConflictInfo[],\n      errors: [] as string[]\n    }\n    \n    // 并发执行批次\n    const semaphore = new Semaphore(strategy.maxConcurrentOperations)\n    \n    const batchPromises = batches.map(async (batch, index) => {\n      await semaphore.acquire()\n      \n      try {\n        // 批次间延迟\n        if (index > 0) {\n          await new Promise(resolve => setTimeout(resolve, strategy.delayBetweenBatches))\n        }\n        \n        const batchResult = await this.executeBatchWithRetry(\n          batch, \n          strategy.retryStrategy, \n          strategy.timeout\n        )\n        \n        results.syncedOperations += batchResult.syncedCount\n        results.conflicts.push(...batchResult.conflicts)\n        results.errors.push(...batchResult.errors)\n        \n        this.notifySyncProgress(\n          results.syncedOperations, \n          filteredOps.length\n        )\n        \n      } catch (error) {\n        results.errors.push(`Batch ${index} failed: ${error}`)\n      } finally {\n        semaphore.release()\n      }\n    })\n    \n    await Promise.all(batchPromises)\n    \n    results.success = results.errors.length === 0\n    return results\n  }\n\n  /**\n   * 创建最优批次\n   */\n  private createOptimalBatches(\n    operations: OfflineOperation[], \n    batchSize: number\n  ): OfflineOperation[][] {\n    const batches: OfflineOperation[][] = []\n    \n    // 按优先级排序\n    const priorityOrder = { critical: 4, high: 3, normal: 2, low: 1 }\n    const sortedOps = [...operations].sort((a, b) => \n      priorityOrder[b.priority] - priorityOrder[a.priority]\n    )\n    \n    // 分批\n    for (let i = 0; i < sortedOps.length; i += batchSize) {\n      batches.push(sortedOps.slice(i, i + batchSize))\n    }\n    \n    return batches\n  }\n\n  /**\n   * 执行批次重试\n   */\n  private async executeBatchWithRetry(\n    batch: OfflineOperation[],\n    retryStrategy: { maxRetries: number; initialDelay: number; maxDelay: number; backoffMultiplier: number },\n    timeout: number\n  ): Promise<{\n    syncedCount: number\n    conflicts: ConflictInfo[]\n    errors: string[]\n  }> {\n    let lastError: Error | null = null\n    \n    for (let attempt = 1; attempt <= retryStrategy.maxRetries; attempt++) {\n      try {\n        const result = await this.executeBatchWithTimeout(batch, timeout)\n        return result\n      } catch (error) {\n        lastError = error instanceof Error ? error : new Error(String(error))\n        \n        if (attempt === retryStrategy.maxRetries) {\n          break\n        }\n        \n        // 计算延迟时间\n        const delay = Math.min(\n          retryStrategy.initialDelay * Math.pow(retryStrategy.backoffMultiplier, attempt - 1),\n          retryStrategy.maxDelay\n        )\n        \n        console.log(`Retry ${attempt}/${retryStrategy.maxRetries} after ${delay}ms`)\n        await new Promise(resolve => setTimeout(resolve, delay))\n      }\n    }\n    \n    return {\n      syncedCount: 0,\n      conflicts: [],\n      errors: [lastError?.message || 'Batch execution failed after all retries']\n    }\n  }\n\n  /**\n   * 带超时的批次执行\n   */\n  private async executeBatchWithTimeout(\n    batch: OfflineOperation[],\n    timeout: number\n  ): Promise<{\n    syncedCount: number\n    conflicts: ConflictInfo[]\n    errors: string[]\n  }> {\n    const timeoutPromise = new Promise((_, reject) => {\n      setTimeout(() => reject(new Error('Operation timeout')), timeout)\n    })\n    \n    const executionPromise = this.executeBatchOperations(batch)\n    \n    try {\n      return await Promise.race([executionPromise, timeoutPromise]) as any\n    } catch (error) {\n      if (error instanceof Error && error.message === 'Operation timeout') {\n        throw new Error(`Batch operation timed out after ${timeout}ms`)\n      }\n      throw error\n    }\n  }\n\n  /**\n   * 执行批次操作\n   */\n  private async executeBatchOperations(\n    batch: OfflineOperation[]\n  ): Promise<{\n    syncedCount: number\n    conflicts: ConflictInfo[]\n    errors: string[]\n  }> {\n    let syncedCount = 0\n    const conflicts: ConflictInfo[] = []\n    const errors: string[] = []\n    \n    for (const operation of batch) {\n      try {\n        const result = await this.syncOperation(operation)\n        \n        if (result.success) {\n          syncedCount++\n        } else if (result.conflict) {\n          conflicts.push(result.conflict)\n        } else {\n          errors.push(result.error || `Operation ${operation.id} failed`)\n        }\n      } catch (error) {\n        errors.push(`Operation ${operation.id} error: ${error}`)\n      }\n    }\n    \n    return { syncedCount, conflicts, errors }\n  }\n\n  /**\n   * 执行后同步优化\n   */\n  private async performPostSyncOptimizations(\n    syncResult: any,\n    networkQuality: NetworkQualityAssessment\n  ): Promise<void> {\n    // 如果同步完全成功，清理旧状态\n    if (syncResult.success && syncResult.errors.length === 0) {\n      await this.cleanupOldSyncState()\n    }\n    \n    // 如果网络质量好，预加载可能需要的远程数据\n    if (networkQuality.bandwidth === 'excellent' && networkQuality.isStable) {\n      await this.preloadRemoteData()\n    }\n    \n    // 更新网络状态历史记录\n    await this.updateNetworkHistory(networkQuality)\n  }\n\n  /**\n   * 处理同步错误\n   */\n  private async handleSyncError(error: any, stats: OfflineStats): Promise<void> {\n    console.error('Sync error occurred, attempting recovery...', error)\n    \n    // 根据错误类型制定恢复策略\n    if (error.message?.includes('timeout')) {\n      // 超时错误：降低同步强度\n      await this.scheduleReducedSync()\n    } else if (error.message?.includes('network')) {\n      // 网络错误：等待网络稳定\n      await this.scheduleDelayedSync()\n    } else {\n      // 其他错误：记录并重试\n      await this.scheduleRetrySync()\n    }\n  }\n\n  /**\n   * 调度降级同步\n   */\n  private async scheduleReducedSync(): Promise<void> {\n    setTimeout(async () => {\n      const stats = await this.getOfflineStats()\n      if (stats.pendingOperations > 0) {\n        console.log('Executing reduced sync...')\n        // 只同步关键操作\n        await this.syncCriticalOperationsOnly()\n      }\n    }, 5000) // 5秒后重试\n  }\n\n  /**\n   * 调度延迟同步\n   */\n  private async scheduleDelayedSync(): Promise<void> {\n    setTimeout(async () => {\n      const stats = await this.getOfflineStats()\n      if (stats.pendingOperations > 0) {\n        console.log('Executing delayed sync...')\n        await this.handleNetworkRecovery()\n      }\n    }, 30000) // 30秒后重试\n  }\n\n  /**\n   * 调度重试同步\n   */\n  private async scheduleRetrySync(): Promise<void> {\n    setTimeout(async () => {\n      const stats = await this.getOfflineStats()\n      if (stats.pendingOperations > 0) {\n        console.log('Retrying sync...')\n        await this.handleNetworkRecovery()\n      }\n    }, 10000) // 10秒后重试\n  }\n\n  /**\n   * 仅同步关键操作\n   */\n  private async syncCriticalOperationsOnly(): Promise<void> {\n    const pendingOps = await this.getPendingOfflineOperations()\n    const criticalOps = pendingOps.filter(op => op.priority === 'critical')\n    \n    if (criticalOps.length > 0) {\n      const result = await this.executeBatchOperations(criticalOps)\n      console.log(`Critical sync completed: ${result.syncedCount}/${criticalOps.length}`)\n    }\n  }\n\n  /**\n   * 清理旧同步状态\n   */\n  private async cleanupOldSyncState(): Promise<void> {\n    try {\n      // 清理过期的备份\n      const backupKeys = Object.keys(localStorage)\n        .filter(key => key.startsWith('offlineBackup_'))\n        .sort()\n      \n      // 保留最近3个备份\n      if (backupKeys.length > 3) {\n        const toDelete = backupKeys.slice(0, backupKeys.length - 3)\n        toDelete.forEach(key => localStorage.removeItem(key))\n      }\n      \n      // 清理 IndexedDB 中的旧状态记录\n      if (db.offlineState) {\n        const oldStates = await db.offlineState\n          .orderBy('timestamp')\n          .reverse()\n          .offset(5) // 保留最近5个状态\n          .toArray()\n        \n        for (const state of oldStates) {\n          await db.offlineState.delete(state.id)\n        }\n      }\n      \n    } catch (error) {\n      console.warn('Failed to cleanup old sync state:', error)\n    }\n  }\n\n  /**\n   * 预加载远程数据\n   */\n  private async preloadRemoteData(): Promise<void> {\n    try {\n      // 这里可以实现预加载逻辑\n      // 例如：预加载用户可能访问的卡片数据\n      console.log('Preloading remote data...')\n    } catch (error) {\n      console.warn('Failed to preload remote data:', error)\n    }\n  }\n\n  /**\n   * 更新网络历史记录\n   */\n  private async updateNetworkHistory(networkQuality: NetworkQualityAssessment): Promise<void> {\n    // 更新网络质量历史，用于未来的预测和优化\n    try {\n      const historyKey = 'networkQualityHistory'\n      const history = JSON.parse(localStorage.getItem(historyKey) || '[]')\n      \n      history.push({\n        timestamp: new Date().toISOString(),\n        ...networkQuality\n      })\n      \n      // 保留最近100条记录\n      if (history.length > 100) {\n        history.splice(0, history.length - 100)\n      }\n      \n      localStorage.setItem(historyKey, JSON.stringify(history))\n    } catch (error) {\n      console.warn('Failed to update network history:', error)\n    }\n  }\n\n  /**\n   * 执行离线同步\n   */\n  private async performOfflineSync(): Promise<{\n    success: boolean\n    syncedOperations: number\n    conflicts: ConflictInfo[]\n    errors: string[]\n  }> {\n    const pendingOps = await this.getPendingOfflineOperations()\n    const syncedOperations: string[] = []\n    const conflicts: ConflictInfo[] = []\n    const errors: string[] = []\n    \n    // 按优先级分组处理\n    const criticalOps = pendingOps.filter(op => op.priority === 'critical')\n    const highOps = pendingOps.filter(op => op.priority === 'high')\n    const normalOps = pendingOps.filter(op => op.priority === 'normal')\n    const lowOps = pendingOps.filter(op => op.priority === 'low')\n    \n    const allOps = [...criticalOps, ...highOps, ...normalOps, ...lowOps]\n    \n    for (let i = 0; i < allOps.length; i++) {\n      const operation = allOps[i]\n      \n      try {\n        // 检查网络连接\n        if (!navigator.onLine) {\n          throw new Error('Network lost during sync')\n        }\n        \n        // 执行同步\n        const result = await this.syncOperation(operation)\n        \n        if (result.success) {\n          syncedOperations.push(operation.id)\n        } else if (result.conflict) {\n          conflicts.push(result.conflict)\n        } else {\n          errors.push(result.error || `Sync failed for operation ${operation.id}`)\n        }\n        \n        // 通知进度\n        this.notifySyncProgress(i + 1, allOps.length)\n        \n        // 小延迟避免网络过载\n        if (i % 10 === 0) {\n          await new Promise(resolve => setTimeout(resolve, 100))\n        }\n      } catch (error) {\n        const errorMsg = error instanceof Error ? error.message : String(error)\n        errors.push(`Operation ${operation.id} failed: ${errorMsg}`)\n        \n        // 如果是网络错误，暂停同步\n        if (errorMsg.includes('network') || errorMsg.includes('Network')) {\n          console.warn('Network error during sync, pausing...')\n          break\n        }\n      }\n    }\n    \n    return {\n      success: errors.length === 0,\n      syncedOperations: syncedOperations.length,\n      conflicts,\n      errors\n    }\n  }\n\n  // ============================================================================\n  // 冲突检测和解决\n  // ============================================================================\n\n  /**\n   * 检测数据冲突\n   */\n  private async detectConflicts(\n    localOperation: OfflineOperation,\n    remoteData?: any\n  ): Promise<ConflictInfo | null> {\n    if (!remoteData) return null\n    \n    // 获取本地数据\n    const localData = await this.getLocalDataForEntity(localOperation.entity, localOperation.entityId)\n    if (!localData) return null\n    \n    // 比较时间戳和数据版本\n    const localTimestamp = new Date(localOperation.timestamp)\n    const remoteTimestamp = new Date(remoteData.updatedAt || remoteData.createdAt)\n    \n    // 如果本地操作时间晚于远程数据时间，认为是冲突\n    if (localTimestamp > remoteTimestamp) {\n      return {\n        id: crypto.randomUUID(),\n        entityType: localOperation.entity,\n        entityId: localOperation.entityId || '',\n        localData,\n        remoteData,\n        conflictType: this.determineConflictType(localOperation, localData, remoteData),\n        timestamp: new Date(),\n        resolution: 'pending'\n      }\n    }\n    \n    return null\n  }\n\n  /**\n   * 处理检测到的冲突\n   */\n  private async handleConflicts(conflicts: ConflictInfo[]): Promise<void> {\n    for (const conflict of conflicts) {\n      try {\n        // 根据冲突类型尝试自动解决\n        const resolution = await this.resolveConflict(conflict)\n        \n        if (resolution === 'manual') {\n          // 需要用户手动解决的冲突\n          this.conflicts.push(conflict)\n          \n          if (this.listeners.onConflict) {\n            this.listeners.onConflict(conflict)\n          }\n        } else {\n          // 应用自动解决的冲突\n          await this.applyConflictResolution(conflict, resolution)\n        }\n      } catch (error) {\n        console.error(`Failed to resolve conflict ${conflict.id}:`, error)\n        conflict.resolution = 'manual'\n        this.conflicts.push(conflict)\n      }\n    }\n  }\n\n  /**\n   * 解决冲突\n   */\n  private async resolveConflict(conflict: ConflictInfo): Promise<'local' | 'remote' | 'merge' | 'manual'> {\n    switch (conflict.conflictType) {\n      case 'simultaneous_edit':\n        // 尝试智能合并\n        return await this.attemptSmartMerge(conflict)\n        \n      case 'delete_conflict':\n        // 删除冲突通常需要手动解决\n        return 'manual'\n        \n      case 'structure_conflict':\n        // 结构冲突尝试本地优先\n        return 'local'\n        \n      default:\n        return 'manual'\n    }\n  }\n\n  /**\n   * 尝试智能合并\n   */\n  private async attemptSmartMerge(conflict: ConflictInfo): Promise<'local' | 'remote' | 'merge' | 'manual'> {\n    // 简化的合并策略，实际项目中需要更复杂的逻辑\n    const localContent = this.extractContentForMerge(conflict.localData)\n    const remoteContent = this.extractContentForMerge(conflict.remoteData)\n    \n    // 如果内容相似，使用较新的版本\n    if (this.calculateContentSimilarity(localContent, remoteContent) > 0.8) {\n      const localTimestamp = new Date(conflict.localData.updatedAt || conflict.localData.createdAt)\n      const remoteTimestamp = new Date(conflict.remoteData.updatedAt || conflict.remoteData.createdAt)\n      \n      return localTimestamp > remoteTimestamp ? 'local' : 'remote'\n    }\n    \n    // 如果内容差异很大，需要手动合并\n    return 'manual'\n  }\n\n  // ============================================================================\n  // 事件监听器管理\n  // ============================================================================\n\n  setEventListeners(listeners: typeof OfflineManager.prototype.listeners): void {\n    this.listeners = { ...this.listeners, ...listeners }\n  }\n\n  private notifyNetworkChange(info: NetworkInfo): void {\n    if (this.listeners.onNetworkChange) {\n      this.listeners.onNetworkChange(info)\n    }\n  }\n\n  private notifySyncProgress(completed: number, total: number): void {\n    if (this.listeners.onSyncProgress) {\n      this.listeners.onSyncProgress({ completed, total })\n    }\n  }\n\n  private notifySyncComplete(stats: OfflineStats): void {\n    if (this.listeners.onSyncComplete) {\n      this.listeners.onSyncComplete(stats)\n    }\n  }\n\n  // ============================================================================\n  // 初始化和清理\n  // ============================================================================\n\n  private initializeOfflineManager(): void {\n    this.setupNetworkListeners()\n    this.setupConnectionMonitoring()\n    this.loadOfflineState()\n    this.startPeriodicSync()\n  }\n\n  private setupNetworkListeners(): void {\n    // 监听网络状态变化\n    window.addEventListener('online', () => {\n      this.handleNetworkChange(true)\n    })\n    \n    window.addEventListener('offline', () => {\n      this.handleNetworkChange(false)\n    })\n  }\n\n  private setupConnectionMonitoring(): void {\n    // 监控连接质量（如果支持）\n    if ('connection' in navigator) {\n      const connection = (navigator as any).connection\n      \n      connection.addEventListener('change', () => {\n        this.updateConnectionInfo(connection)\n      })\n      \n      this.updateConnectionInfo(connection)\n    }\n  }\n\n  private startPeriodicSync(): void {\n    // 定期检查同步状态\n    this.syncTimer = setInterval(async () => {\n      if (navigator.onLine) {\n        const stats = await this.getOfflineStats()\n        if (stats.pendingOperations > 0) {\n          await this.handleNetworkRecovery()\n        }\n      }\n    }, 30 * 1000) // 每30秒检查一次\n  }\n\n  /**\n   * 清理离线管理器\n   */\n  cleanup(): void {\n    if (this.syncTimer) {\n      clearInterval(this.syncTimer)\n    }\n    \n    // 移除事件监听器\n    window.removeEventListener('online', this.handleNetworkChange)\n    window.removeEventListener('offline', this.handleNetworkChange)\n  }\n\n  // ============================================================================\n  // 私有辅助方法\n  // ============================================================================\n\n  private async handleNetworkChange(isOnline: boolean): Promise<void> {\n    const previousStatus = this.networkInfo.status\n    const newStatus = isOnline ? NetworkStatus.ONLINE : NetworkStatus.OFFLINE\n    \n    this.isOffline = !isOnline\n    this.networkInfo = {\n      ...this.networkInfo,\n      status: newStatus,\n      lastChanged: new Date()\n    }\n    \n    if (previousStatus === NetworkStatus.OFFLINE && newStatus === NetworkStatus.ONLINE) {\n      // 从离线恢复\n      this.reconnectAttempts = 0\n      await this.handleNetworkRecovery()\n    } else if (previousStatus === NetworkStatus.ONLINE && newStatus === NetworkStatus.OFFLINE) {\n      // 进入离线状态\n      this.offlineStartTime = new Date()\n    }\n    \n    this.notifyNetworkChange(this.networkInfo)\n  }\n\n  private updateConnectionInfo(connection: any): void {\n    this.networkInfo = {\n      ...this.networkInfo,\n      effectiveType: connection.effectiveType,\n      downlink: connection.downlink,\n      rtt: connection.rtt,\n      saveData: connection.saveData,\n      connectionType: this.determineConnectionType(connection)\n    }\n  }\n\n  private determineConnectionType(connection: any): 'wifi' | 'cellular' | 'ethernet' | 'unknown' {\n    if (connection.type) {\n      switch (connection.type) {\n        case 'wifi': return 'wifi'\n        case 'cellular': return 'cellular'\n        case 'ethernet': return 'ethernet'\n        default: return 'unknown'\n      }\n    }\n    \n    // 基于有效类型推断\n    if (connection.effectiveType) {\n      if (['4g', '5g'].includes(connection.effectiveType)) {\n        return connection.effectiveType === '5g' ? 'wifi' : 'cellular'\n      }\n    }\n    \n    return 'unknown'\n  }\n\n  private async validateDependencies(dependencyIds: string[]): Promise<void> {\n    const pendingOps = await this.getPendingOfflineOperations()\n    const pendingIds = pendingOps.map(op => op.id)\n    \n    const unresolvedDependencies = dependencyIds.filter(id => !pendingIds.includes(id))\n    \n    if (unresolvedDependencies.length > 0) {\n      throw new Error(`Dependencies not found: ${unresolvedDependencies.join(', ')}`)\n    }\n  }\n\n  private async performLocalOperation(operation: OfflineOperation): Promise<any> {\n    switch (operation.type) {\n      case OfflineOperationType.CREATE:\n        return localOperationService.createCard(operation.data, operation.userId)\n      case OfflineOperationType.UPDATE:\n        return localOperationService.updateCard(operation.entityId!, operation.data, operation.userId)\n      case OfflineOperationType.DELETE:\n        return localOperationService.deleteCard(operation.entityId!, operation.userId)\n      default:\n        throw new Error(`Unsupported operation type: ${operation.type}`)\n    }\n  }\n\n  private async storeOfflineOperation(operation: OfflineOperation): Promise<void> {\n    try {\n      await db.syncQueue.add({\n        id: operation.id,\n        type: operation.type as any,\n        entity: operation.entity,\n        entityId: operation.entityId,\n        userId: operation.userId,\n        data: operation.data,\n        priority: operation.priority as any,\n        timestamp: operation.timestamp,\n        retryCount: operation.retryCount,\n        maxRetries: operation.maxRetries,\n        error: undefined\n      })\n    } catch (error) {\n      console.error('Failed to store offline operation:', error)\n      throw error\n    }\n  }\n\n  private async syncOperation(operation: OfflineOperation): Promise<{\n    success: boolean\n    conflict?: ConflictInfo\n    error?: string\n  }> {\n    try {\n      // 这里应该调用实际的同步服务\n      // 为了演示，我们模拟同步过程\n      \n      // 检查是否有冲突\n      const remoteData = await this.fetchRemoteData(operation.entity, operation.entityId)\n      const conflict = await this.detectConflicts(operation, remoteData)\n      \n      if (conflict) {\n        return { success: false, conflict }\n      }\n      \n      // 模拟同步成功\n      await new Promise(resolve => setTimeout(resolve, 100))\n      \n      // 标记操作为已完成\n      await db.syncQueue.where('id').equals(operation.id).modify({\n        status: 'completed' as any\n      })\n      \n      return { success: true }\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : String(error)\n      }\n    }\n  }\n\n  private async fetchRemoteData(entity: string, entityId?: string): Promise<any> {\n    // 这里应该调用实际的API获取远程数据\n    // 为了演示，返回null表示没有远程数据\n    return null\n  }\n\n  private async getLocalDataForEntity(entity: string, entityId?: string): Promise<any> {\n    switch (entity) {\n      case 'card':\n        return entityId ? db.cards.get(entityId) : null\n      case 'folder':\n        return entityId ? db.folders.get(entityId) : null\n      case 'tag':\n        return entityId ? db.tags.get(entityId) : null\n      default:\n        return null\n    }\n  }\n\n  private determineConflictType(\n    operation: OfflineOperation,\n    localData: any,\n    remoteData: any\n  ): 'simultaneous_edit' | 'delete_conflict' | 'structure_conflict' {\n    if (operation.type === OfflineOperationType.DELETE) {\n      return 'delete_conflict'\n    }\n    \n    // 检查数据结构是否发生变化\n    if (this.hasStructureChanged(localData, remoteData)) {\n      return 'structure_conflict'\n    }\n    \n    return 'simultaneous_edit'\n  }\n\n  private hasStructureChanged(localData: any, remoteData: any): boolean {\n    // 检查数据结构是否发生重大变化\n    const localKeys = new Set(Object.keys(localData))\n    const remoteKeys = new Set(Object.keys(remoteData))\n    \n    return localKeys.size !== remoteKeys.size || \n           ![...localKeys].every(key => remoteKeys.has(key))\n  }\n\n  private extractContentForMerge(data: any): string {\n    // 提取用于合并的内容\n    if (data.frontContent && data.backContent) {\n      return JSON.stringify({\n        front: data.frontContent,\n        back: data.backContent\n      })\n    }\n    return JSON.stringify(data)\n  }\n\n  private calculateContentSimilarity(content1: string, content2: string): number {\n    // 简单的内容相似度计算\n    const distance = this.calculateLevenshteinDistance(content1, content2)\n    const maxLength = Math.max(content1.length, content2.length)\n    return maxLength > 0 ? 1 - (distance / maxLength) : 1\n  }\n\n  private calculateLevenshteinDistance(str1: string, str2: string): number {\n    const matrix = Array(str2.length + 1).fill(null).map(() => Array(str1.length + 1).fill(null))\n    \n    for (let i = 0; i <= str1.length; i++) matrix[0][i] = i\n    for (let j = 0; j <= str2.length; j++) matrix[j][0] = j\n    \n    for (let j = 1; j <= str2.length; j++) {\n      for (let i = 1; i <= str1.length; i++) {\n        const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1\n        matrix[j][i] = Math.min(\n          matrix[j][i - 1] + 1,\n          matrix[j - 1][i] + 1,\n          matrix[j - 1][i - 1] + indicator\n        )\n      }\n    }\n    \n    return matrix[str2.length][str1.length]\n  }\n\n  private async applyConflictResolution(conflict: ConflictInfo, resolution: 'local' | 'remote' | 'merge'): Promise<void> {\n    // 应用冲突解决方案\n    conflict.resolution = resolution\n    \n    // 这里应该根据解决方案更新数据\n    // 实际实现取决于业务逻辑\n  }\n\n  private async loadOfflineState(): Promise<void> {\n    // 从持久化存储加载离线状态\n    try {\n      // 尝试从 IndexedDB 加载（主要存储）\n      const indexedDbState = await this.loadFromIndexedDB()\n      if (indexedDbState) {\n        await this.restoreOfflineState(indexedDbState)\n        return\n      }\n      \n      // 回退到 localStorage\n      const savedState = localStorage.getItem('offlineManagerState')\n      if (savedState) {\n        const state = JSON.parse(savedState)\n        await this.restoreOfflineState(state)\n        \n        // 迁移到 IndexedDB\n        await this.saveToIndexedDB(state)\n        localStorage.removeItem('offlineManagerState')\n      }\n    } catch (error) {\n      console.warn('Failed to load offline state:', error)\n    }\n  }\n\n  private async saveOfflineState(): Promise<void> {\n    try {\n      const state = await this.createOfflineStateSnapshot()\n      \n      // 保存到 IndexedDB\n      await this.saveToIndexedDB(state)\n      \n      // 同时保存到 localStorage 作为备份\n      await this.saveToLocalStorage(state)\n      \n      // 创建增量备份\n      await this.createIncrementalBackup(state)\n      \n    } catch (error) {\n      console.warn('Failed to save offline state:', error)\n      // 如果 IndexedDB 失败，回退到 localStorage\n      await this.saveToLocalStorageFallback()\n    }\n  }\n\n  private async createOfflineStateSnapshot(): Promise<OfflineStateSnapshot> {\n    const pendingOps = await this.getPendingOfflineOperations()\n    const conflicts = this.conflicts\n    const stats = await this.getOfflineStats()\n    \n    return {\n      version: this.getCurrentStateVersion(),\n      timestamp: new Date().toISOString(),\n      offlineStartTime: this.offlineStartTime?.toISOString(),\n      reconnectAttempts: this.reconnectAttempts,\n      networkInfo: this.networkInfo,\n      pendingOperations: pendingOps.map(op => this.serializeOfflineOperation(op)),\n      conflicts: conflicts.map(conflict => this.serializeConflict(conflict)),\n      stats: this.serializeStats(stats),\n      checksum: await this.calculateStateChecksum(pendingOps, conflicts)\n    }\n  }\n\n  private async saveToIndexedDB(state: OfflineStateSnapshot): Promise<void> {\n    try {\n      // 使用 Dexie.js 的 transaction API\n      await db.transaction('rw', [db.syncQueue], async () => {\n        // 检查是否存在状态表，如果不存在则创建\n        if (!db.offlineState) {\n          // 动态创建状态表\n          await db.version(db.ver + 1).stores({\n            offlineState: '++id,version,timestamp,checksum'\n          })\n        }\n        \n        // 删除旧的状态记录\n        await db.offlineState?.clear()\n        \n        // 保存新的状态记录\n        await db.offlineState?.add({\n          version: state.version,\n          timestamp: new Date(state.timestamp),\n          data: JSON.stringify(state),\n          checksum: state.checksum,\n          compressed: true\n        })\n      })\n    } catch (error) {\n      console.warn('Failed to save to IndexedDB:', error)\n      throw error\n    }\n  }\n\n  private async loadFromIndexedDB(): Promise<OfflineStateSnapshot | null> {\n    try {\n      if (!db.offlineState) return null\n      \n      const latestState = await db.offlineState\n        .orderBy('timestamp')\n        .reverse()\n        .first()\n      \n      if (!latestState) return null\n      \n      // 验证数据完整性\n      if (latestState.compressed) {\n        const decompressed = this.decompressData(latestState.data)\n        const state = JSON.parse(decompressed)\n        \n        // 验证校验和\n        if (await this.verifyStateChecksum(state)) {\n          return state\n        }\n      }\n      \n      return null\n    } catch (error) {\n      console.warn('Failed to load from IndexedDB:', error)\n      return null\n    }\n  }\n\n  private async saveToLocalStorage(state: OfflineStateSnapshot): Promise<void> {\n    try {\n      const compressed = this.compressData(JSON.stringify(state))\n      localStorage.setItem('offlineManagerState', compressed)\n    } catch (error) {\n      console.warn('Failed to save to localStorage:', error)\n    }\n  }\n\n  private async saveToLocalStorageFallback(): Promise<void> {\n    try {\n      const state = {\n        offlineStartTime: this.offlineStartTime?.toISOString(),\n        reconnectAttempts: this.reconnectAttempts,\n        timestamp: new Date().toISOString()\n      }\n      localStorage.setItem('offlineManagerState', JSON.stringify(state))\n    } catch (error) {\n      console.warn('Fallback save failed:', error)\n    }\n  }\n\n  private async createIncrementalBackup(state: OfflineStateSnapshot): Promise<void> {\n    try {\n      const backupKey = `offlineBackup_${Date.now()}`\n      const backupData = {\n        timestamp: state.timestamp,\n        version: state.version,\n        pendingCount: state.pendingOperations.length,\n        conflictsCount: state.conflicts.length,\n        compressed: true\n      }\n      \n      // 限制备份数量，保留最近10个\n      const existingBackups = Object.keys(localStorage)\n        .filter(key => key.startsWith('offlineBackup_'))\n        .sort()\n      \n      if (existingBackups.length >= 10) {\n        const toDelete = existingBackups.slice(0, existingBackups.length - 9)\n        toDelete.forEach(key => localStorage.removeItem(key))\n      }\n      \n      localStorage.setItem(backupKey, JSON.stringify(backupData))\n    } catch (error) {\n      console.warn('Failed to create incremental backup:', error)\n    }\n  }\n\n  private compressData(data: string): string {\n    try {\n      // 简单的压缩实现（实际项目中可以使用更复杂的压缩算法）\n      return btoa(encodeURIComponent(data))\n    } catch (error) {\n      return data // 如果压缩失败，返回原始数据\n    }\n  }\n\n  private decompressData(compressed: string): string {\n    try {\n      return decodeURIComponent(atob(compressed))\n    } catch (error) {\n      return compressed // 如果解压失败，返回原始数据\n    }\n  }\n\n  private getCurrentStateVersion(): string {\n    return `1.0.${Date.now()}`\n  }\n\n  private async calculateStateChecksum(operations: OfflineOperation[], conflicts: ConflictInfo[]): Promise<string> {\n    const data = JSON.stringify({\n      operations: operations.length,\n      conflicts: conflicts.length,\n      timestamp: Date.now()\n    })\n    \n    // 简单的校验和计算\n    let hash = 0\n    for (let i = 0; i < data.length; i++) {\n      const char = data.charCodeAt(i)\n      hash = ((hash << 5) - hash) + char\n      hash = hash & hash // 转换为32位整数\n    }\n    \n    return Math.abs(hash).toString(16)\n  }\n\n  private async verifyStateChecksum(state: OfflineStateSnapshot): Promise<boolean> {\n    try {\n      const operations = state.pendingOperations.map(op => this.deserializeOfflineOperation(op))\n      const conflicts = state.conflicts.map(conflict => this.deserializeConflict(conflict))\n      \n      const calculatedChecksum = await this.calculateStateChecksum(operations, conflicts)\n      return calculatedChecksum === state.checksum\n    } catch (error) {\n      return false\n    }\n  }\n\n  private async restoreOfflineState(state: any): Promise<void> {\n    this.offlineStartTime = state.offlineStartTime ? new Date(state.offlineStartTime) : undefined\n    this.reconnectAttempts = state.reconnectAttempts || 0\n    \n    if (state.networkInfo) {\n      this.networkInfo = {\n        ...this.networkInfo,\n        ...state.networkInfo,\n        lastChanged: new Date(state.networkInfo.lastChanged || Date.now())\n      }\n    }\n    \n    if (state.pendingOperations) {\n      try {\n        const operations = state.pendingOperations.map((op: any) => this.deserializeOfflineOperation(op))\n        // 验证并恢复离线操作\n        await this.validateAndRestoreOperations(operations)\n      } catch (error) {\n        console.warn('Failed to restore pending operations:', error)\n      }\n    }\n    \n    if (state.conflicts) {\n      this.conflicts = state.conflicts.map((conflict: any) => this.deserializeConflict(conflict))\n    }\n  }\n\n  private serializeOfflineOperation(op: OfflineOperation): any {\n    return {\n      ...op,\n      timestamp: op.timestamp.toISOString()\n    }\n  }\n\n  private deserializeOfflineOperation(op: any): OfflineOperation {\n    return {\n      ...op,\n      timestamp: new Date(op.timestamp)\n    }\n  }\n\n  private serializeConflict(conflict: ConflictInfo): any {\n    return {\n      ...conflict,\n      timestamp: conflict.timestamp.toISOString()\n    }\n  }\n\n  private deserializeConflict(conflict: any): ConflictInfo {\n    return {\n      ...conflict,\n      timestamp: new Date(conflict.timestamp)\n    }\n  }\n\n  private serializeStats(stats: OfflineStats): any {\n    return {\n      ...stats,\n      lastSyncTime: stats.lastSyncTime?.toISOString()\n    }\n  }\n\n  private async validateAndRestoreOperations(operations: OfflineOperation[]): Promise<void> {\n    const validOperations = operations.filter(op => {\n      // 验证操作的有效性\n      return op.id && op.type && op.entity && op.timestamp\n    })\n    \n    // 恢复到同步队列\n    for (const operation of validOperations) {\n      try {\n        await this.storeOfflineOperation(operation)\n      } catch (error) {\n        console.warn(`Failed to restore operation ${operation.id}:`, error)\n      }\n    }\n  }\n\n  private calculateOfflineDuration(): number {\n    if (!this.offlineStartTime) return 0\n    return Date.now() - this.offlineStartTime.getTime()\n  }\n\n  private calculateAverageResponseTime(): number {\n    // 简化的平均响应时间计算\n    return 50 // 毫秒\n  }\n\n  private calculateDataSyncedOnResume(): number {\n    // 估算同步的数据量\n    return 0 // 字节\n  }\n\n  private calculateEstimatedBandwidthSaved(operations: OfflineOperation[]): number {\n    // 估算节省的带宽\n    return operations.length * 1024 // 假设每个操作节省1KB\n  }\n\n  private async getLastSyncTime(): Promise<Date | undefined> {\n    try {\n      const latestSync = await db.syncQueue\n        .where('status')\n        .equals('completed' as any)\n        .orderBy('timestamp')\n        .reverse()\n        .first()\n      \n      return latestSync ? new Date(latestSync.timestamp) : undefined\n    } catch {\n      return undefined\n    }\n  }\n\n  private async getCompletedOfflineOperations(): Promise<OfflineOperation[]> {\n    try {\n      const completedOps = await db.syncQueue\n        .where('status')\n        .equals('completed' as any)\n        .toArray()\n      \n      return completedOps.map(op => this.convertSyncOperationToOfflineOperation(op))\n    } catch {\n      return []\n    }\n  }\n\n  private async getFailedOfflineOperations(): Promise<OfflineOperation[]> {\n    try {\n      const failedOps = await db.syncQueue\n        .where('status')\n        .equals('failed' as any)\n        .toArray()\n      \n      return failedOps.map(op => this.convertSyncOperationToOfflineOperation(op))\n    } catch {\n      return []\n    }\n  }\n\n  private convertSyncOperationToOfflineOperation(syncOp: any): OfflineOperation {\n    return {\n      id: syncOp.id,\n      type: syncOp.type,\n      entity: syncOp.entity,\n      entityId: syncOp.entityId,\n      userId: syncOp.userId,\n      data: syncOp.data,\n      priority: syncOp.priority,\n      timestamp: new Date(syncOp.timestamp),\n      retryCount: syncOp.retryCount,\n      maxRetries: syncOp.maxRetries,\n      status: syncOp.status\n    }\n  }\n\n  private sortOperationsByPriority(operations: Omit<OfflineOperation, 'id' | 'timestamp' | 'retryCount'>[]) {\n    const priorityOrder = { critical: 4, high: 3, normal: 2, low: 1 }\n    return [...operations].sort((a, b) => priorityOrder[b.priority] - priorityOrder[a.priority])\n  }\n\n  private async retryOperation(operation: OfflineOperation): Promise<void> {\n    // 重试操作逻辑\n    await db.syncQueue.where('id').equals(operation.id).modify({\n      status: 'pending' as any,\n      retryCount: operation.retryCount + 1\n    })\n  }\n\n  // ============================================================================\n  // 新增增强功能方法\n  // ============================================================================\n\n  /**\n   * 计算历史可靠性\n   */\n  private async calculateHistoricalReliability(): Promise<number> {\n    try {\n      const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000)\n      const recentOperations = await db.syncQueue\n        .where('timestamp')\n        .above(oneHourAgo)\n        .toArray()\n      \n      if (recentOperations.length === 0) return 1.0\n      \n      const successfulOps = recentOperations.filter(op => op.status === 'completed').length\n      return successfulOps / recentOperations.length\n    } catch {\n      return 0.9 // 默认可靠性\n    }\n  }\n\n  /**\n   * 智能冲突预测和预防\n   */\n  private async predictAndPreventConflicts(operations: OfflineOperation[]): Promise<ConflictInfo[]> {\n    const conflicts: ConflictInfo[] = []\n    \n    for (const operation of operations) {\n      if (operation.entityId) {\n        // 检查是否有可能的冲突\n        const potentialConflict = await this.checkPotentialConflict(operation)\n        if (potentialConflict) {\n          conflicts.push(potentialConflict)\n        }\n      }\n    }\n    \n    return conflicts\n  }\n\n  /**\n   * 检查潜在冲突\n   */\n  private async checkPotentialConflict(operation: OfflineOperation): Promise<ConflictInfo | null> {\n    try {\n      // 检查同一实体的最近操作\n      const recentOps = await db.syncQueue\n        .where('entity')\n        .equals(operation.entity)\n        .and(op => op.entityId === operation.entityId)\n        .reverse()\n        .limit(5)\n        .toArray()\n      \n      if (recentOps.length === 0) return null\n      \n      // 检查时间重叠（假设5分钟内的操作可能冲突）\n      const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000)\n      const conflictingOps = recentOps.filter(op => \n        new Date(op.timestamp) > fiveMinutesAgo && \n        op.id !== operation.id\n      )\n      \n      if (conflictingOps.length > 0) {\n        return {\n          id: crypto.randomUUID(),\n          entityType: operation.entity,\n          entityId: operation.entityId!,\n          localData: operation.data,\n          remoteData: conflictingOps[0].data, // 简化的远程数据\n          conflictType: 'simultaneous_edit',\n          timestamp: new Date(),\n          resolution: 'pending'\n        }\n      }\n      \n      return null\n    } catch {\n      return null\n    }\n  }\n\n  /**\n   * 性能监控和优化建议\n   */\n  private async generatePerformanceOptimization(): Promise<{\n    recommendations: string[]\n    predictedImprovements: number[]\n  }> {\n    const stats = await this.getOfflineStats()\n    const recommendations: string[] = []\n    const predictedImprovements: number[] = []\n    \n    // 基于统计信息提供建议\n    if (stats.averageResponseTime > 100) {\n      recommendations.push('建议启用操作批处理以减少响应时间')\n      predictedImprovements.push(0.3) // 预计提升30%\n    }\n    \n    if (stats.pendingOperations > 50) {\n      recommendations.push('建议增加同步频率或优化队列管理')\n      predictedImprovements.push(0.4) // 预计提升40%\n    }\n    \n    if (stats.failedOperations > stats.completedOfflineOperations * 0.1) {\n      recommendations.push('建议检查网络连接并优化重试策略')\n      predictedImprovements.push(0.5) // 预计提升50%\n    }\n    \n    return { recommendations, predictedImprovements }\n  }\n\n  /**\n   * 智能离线数据压缩\n   */\n  private async compressOfflineData(operations: OfflineOperation[]): Promise<{\n    compressed: OfflineOperation[]\n    compressionRatio: number\n  }> {\n    const compressed: OfflineOperation[] = []\n    let originalSize = 0\n    let compressedSize = 0\n    \n    for (const operation of operations) {\n      originalSize += JSON.stringify(operation.data).length\n      \n      // 对大数据进行压缩\n      if (JSON.stringify(operation.data).length > 1024) {\n        const compressedOp = {\n          ...operation,\n          data: await this.compressData(operation.data)\n        }\n        compressed.push(compressedOp)\n        compressedSize += JSON.stringify(compressedOp.data).length\n      } else {\n        compressed.push(operation)\n        compressedSize += JSON.stringify(operation.data).length\n      }\n    }\n    \n    return {\n      compressed,\n      compressionRatio: originalSize > 0 ? compressedSize / originalSize : 1\n    }\n  }\n}\n\n// ============================================================================\n// 导出单例实例\n// ============================================================================\n\nexport const offlineManager = new OfflineManager()\n\n// ============================================================================\n// 便利方法导出\n// ============================================================================\n\nexport const executeOfflineOperation = (operation: any) => \n  offlineManager.executeOfflineOperation(operation)\n\nexport const executeBatchOfflineOperations = (operations: any[]) => \n  offlineManager.executeBatchOfflineOperations(operations)\n\nexport const getOfflineStats = () => offlineManager.getOfflineStats()\nexport const getNetworkStatus = () => offlineManager.getNetworkStatus()\nexport const retryFailedOperations = () => offlineManager.retryFailedOperations()"],"version":3}
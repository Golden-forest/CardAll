{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\data-security.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\data-security.ts"],"sourcesContent":["import { db } from './database'\nimport { Card, Folder, Tag } from '@/types/card'\n\n// ============================================================================\n// 增强的数据安全和备份服务\n// 包含加密、威胁检测、审计日志和高级安全功能\n// ============================================================================\n\n// ============================================================================\n// 数据安全和备份服务\n// ============================================================================\n\nexport interface BackupConfig {\n  autoBackup: boolean\n  backupInterval: number // 分钟\n  maxBackups: number\n  compressionEnabled: boolean\n  encryptionEnabled: boolean\n  cloudBackup: boolean\n  backupLocation: 'local' | 'cloud' | 'both'\n}\n\nexport interface BackupMetadata {\n  id: string\n  timestamp: Date\n  version: string\n  size: number\n  compressed: boolean\n  encrypted: boolean\n  checksum: string\n  description?: string\n  tags: string[]\n}\n\nexport interface BackupData {\n  metadata: BackupMetadata\n  data: {\n    cards: any[]\n    folders: any[]\n    tags: any[]\n    images: any[]\n    settings: any[]\n    syncQueue: any[]\n    sessions: any[]\n  }\n}\n\nexport interface SecurityConfig {\n  encryption: {\n    enabled: boolean\n    algorithm: 'AES-256-GCM' | 'AES-128-GCM'\n    keyLength: number\n    keyRotationDays: number\n  }\n  access: {\n    sessionTimeout: number\n    maxLoginAttempts: number\n    requireAuthForBackup: boolean\n    ipWhitelist: string[]\n    rateLimiting: {\n      enabled: boolean\n      maxRequests: number\n      timeWindow: number // 秒\n    }\n  }\n  audit: {\n    enabled: boolean\n    logLevel: 'error' | 'warn' | 'info' | 'debug'\n    maxLogEntries: number\n    syncToCloud: boolean\n  }\n  privacy: {\n    anonymizeData: boolean\n    dataRetentionDays: number\n    autoCleanup: boolean\n    dataMasking: boolean\n  }\n  threatDetection: {\n    enabled: boolean\n    blockSuspiciousIP: boolean\n    monitorFailedLogins: boolean\n    scanForSQLInjection: boolean\n    scanForXSS: boolean\n  }\n}\n\nexport interface AuditLog {\n  id: string\n  timestamp: Date\n  userId?: string\n  action: string\n  resource: string\n  resourceId?: string\n  details: any\n  ip?: string\n  userAgent?: string\n  severity: 'error' | 'warn' | 'info' | 'debug'\n}\n\nexport interface SecurityReport {\n  overallScore: number\n  vulnerabilities: SecurityVulnerability[]\n  recommendations: string[]\n  auditSummary: {\n    totalLogs: number\n    errorLogs: number\n    recentActivity: AuditLog[]\n  }\n  backupStatus: {\n    lastBackup?: Date\n    backupCount: number\n    backupSize: number\n  }\n  threatSummary: {\n    totalThreats: number\n    blockedIPs: string[]\n    recentThreats: any[]\n  }\n  encryptionStatus: {\n    enabled: boolean\n    algorithm: string\n    keyRotationDate?: Date\n  }\n}\n\nexport interface SecurityVulnerability {\n  id: string\n  severity: 'critical' | 'high' | 'medium' | 'low'\n  category: string\n  description: string\n  impact: string\n  recommendation: string\n  discovered: Date\n  status: 'open' | 'resolved' | 'false-positive'\n}\n\nclass DataSecurityService {\n  private config: BackupConfig = {\n    autoBackup: true,\n    backupInterval: 60, // 1小时\n    maxBackups: 10,\n    compressionEnabled: true,\n    encryptionEnabled: false,\n    cloudBackup: false,\n    backupLocation: 'local'\n  }\n\n  private securityConfig: SecurityConfig = {\n    encryption: {\n      enabled: false,\n      algorithm: 'AES-256-GCM',\n      keyLength: 256\n    },\n    access: {\n      sessionTimeout: 30 * 60 * 1000, // 30分钟\n      maxLoginAttempts: 5,\n      requireAuthForBackup: true\n    },\n    audit: {\n      enabled: true,\n      logLevel: 'info',\n      maxLogEntries: 10000\n    },\n    privacy: {\n      anonymizeData: false,\n      dataRetentionDays: 365,\n      autoCleanup: true\n    }\n  }\n\n  private auditLogs: AuditLog[] = []\n  private backupTimer: NodeJS.Timeout | null = null\n  private encryptionKey: string = ''\n\n  constructor() {\n    this.initializeSecurity()\n  }\n\n  private async initializeSecurity(): Promise<void> {\n    // 加载安全配置\n    await this.loadSecurityConfig()\n    \n    // 启动自动备份\n    if (this.config.autoBackup) {\n      this.startAutoBackup()\n    }\n    \n    // 启动审计日志清理\n    this.startAuditCleanup()\n    \n    // 生成加密密钥\n    if (this.securityConfig.encryption.enabled) {\n      await this.generateEncryptionKey()\n    }\n    \n    this.logAudit('system', 'security_service_initialized', {}, 'info')\n  }\n\n  private async loadSecurityConfig(): Promise<void> {\n    try {\n      const backupConfig = await db.getSetting('backupConfig')\n      if (backupConfig) {\n        this.config = { ...this.config, ...backupConfig }\n      }\n      \n      const securityConfig = await db.getSetting('securityConfig')\n      if (securityConfig) {\n        this.securityConfig = { ...this.securityConfig, ...securityConfig }\n      }\n    } catch (error) {\n      console.error('Failed to load security config:', error)\n    }\n  }\n\n  private async generateEncryptionKey(): Promise<void> {\n    // 在实际应用中，应该从用户密码或硬件安全模块派生密钥\n    // 这里使用简单的伪随机数作为示例\n    const key = Array.from(crypto.getRandomValues(new Uint8Array(32)))\n      .map(b => b.toString(16).padStart(2, '0'))\n      .join('')\n    \n    this.encryptionKey = key\n    this.logAudit('security', 'encryption_key_generated', { keyLength: key.length }, 'info')\n  }\n\n  // ============================================================================\n  // 备份管理\n  // ============================================================================\n\n  // 创建备份\n  async createBackup(description?: string, tags: string[] = []): Promise<BackupMetadata> {\n    const startTime = performance.now()\n    \n    try {\n      this.logAudit('backup', 'backup_started', { description, tags }, 'info')\n      \n      // 收集数据\n      const data = {\n        cards: await db.cards.toArray(),\n        folders: await db.folders.toArray(),\n        tags: await db.tags.toArray(),\n        images: await db.images.toArray(),\n        settings: await db.settings.toArray(),\n        syncQueue: await db.syncQueue.toArray(),\n        sessions: await db.sessions.toArray()\n      }\n      \n      // 创建备份元数据\n      const metadata: BackupMetadata = {\n        id: crypto.randomUUID(),\n        timestamp: new Date(),\n        version: '3.0.0',\n        size: JSON.stringify(data).length,\n        compressed: this.config.compressionEnabled,\n        encrypted: this.config.encryptionEnabled,\n        checksum: await this.calculateChecksum(data),\n        description,\n        tags\n      }\n      \n      let backupData: BackupData = { metadata, data }\n      \n      // 压缩数据\n      if (this.config.compressionEnabled) {\n        backupData = await this.compressData(backupData)\n      }\n      \n      // 加密数据\n      if (this.config.encryptionEnabled) {\n        backupData = await this.encryptData(backupData)\n      }\n      \n      // 保存备份\n      await this.saveBackup(backupData)\n      \n      // 清理旧备份\n      await this.cleanupOldBackups()\n      \n      const executionTime = performance.now() - startTime\n      this.logAudit('backup', 'backup_completed', { \n        backupId: metadata.id, \n        size: metadata.size, \n        executionTime \n      }, 'info')\n      \n      return metadata\n    } catch (error) {\n      this.logAudit('backup', 'backup_failed', { error: error instanceof Error ? error.message : 'Unknown error' }, 'error')\n      throw error\n    }\n  }\n\n  // 恢复备份\n  async restoreBackup(backupId: string): Promise<void> {\n    try {\n      this.logAudit('backup', 'restore_started', { backupId }, 'info')\n      \n      // 创建当前数据的备份\n      await this.createBackup('pre-restore backup', ['auto', 'emergency'])\n      \n      // 加载备份数据\n      const backupData = await this.loadBackup(backupId)\n      \n      // 解密数据\n      if (backupData.metadata.encrypted) {\n        const decryptedData = await this.decryptData(backupData)\n        Object.assign(backupData, decryptedData)\n      }\n      \n      // 解压缩数据\n      if (backupData.metadata.compressed) {\n        const decompressedData = await this.decompressData(backupData)\n        Object.assign(backupData, decompressedData)\n      }\n      \n      // 验证数据完整性\n      const isValid = await this.validateBackup(backupData)\n      if (!isValid) {\n        throw new Error('Backup validation failed')\n      }\n      \n      // 清理当前数据\n      await db.clearAll()\n      \n      // 恢复数据\n      await this.restoreData(backupData.data)\n      \n      this.logAudit('backup', 'restore_completed', { backupId }, 'info')\n    } catch (error) {\n      this.logAudit('backup', 'restore_failed', { \n        backupId, \n        error: error instanceof Error ? error.message : 'Unknown error' \n      }, 'error')\n      throw error\n    }\n  }\n\n  // 列出备份\n  async listBackups(): Promise<BackupMetadata[]> {\n    const backups = localStorage.getItem('cardall-backups')\n    if (!backups) return []\n    \n    try {\n      const backupList = JSON.parse(backups)\n      return backupList.sort((a: BackupMetadata, b: BackupMetadata) => \n        new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n      )\n    } catch {\n      return []\n    }\n  }\n\n  // 删除备份\n  async deleteBackup(backupId: string): Promise<void> {\n    try {\n      const backups = await this.listBackups()\n      const updatedBackups = backups.filter(b => b.id !== backupId)\n      \n      localStorage.setItem('cardall-backups', JSON.stringify(updatedBackups))\n      \n      // 删除备份数据文件\n      localStorage.removeItem(`cardall-backup-${backupId}`)\n      \n      this.logAudit('backup', 'backup_deleted', { backupId }, 'info')\n    } catch (error) {\n      this.logAudit('backup', 'backup_delete_failed', { \n        backupId, \n        error: error instanceof Error ? error.message : 'Unknown error' \n      }, 'error')\n      throw error\n    }\n  }\n\n  private async saveBackup(backupData: BackupData): Promise<void> {\n    // 保存备份元数据\n    const backups = await this.listBackups()\n    backups.push(backupData.metadata)\n    \n    // 限制备份数量\n    if (backups.length > this.config.maxBackups) {\n      backups.splice(0, backups.length - this.config.maxBackups)\n    }\n    \n    localStorage.setItem('cardall-backups', JSON.stringify(backups))\n    \n    // 保存备份数据\n    localStorage.setItem(`cardall-backup-${backupData.metadata.id}`, JSON.stringify(backupData))\n  }\n\n  private async loadBackup(backupId: string): Promise<BackupData> {\n    const backupData = localStorage.getItem(`cardall-backup-${backupId}`)\n    if (!backupData) {\n      throw new Error('Backup not found')\n    }\n    \n    return JSON.parse(backupData)\n  }\n\n  private async cleanupOldBackups(): Promise<void> {\n    const backups = await this.listBackups()\n    \n    if (backups.length > this.config.maxBackups) {\n      const toDelete = backups.splice(0, backups.length - this.config.maxBackups)\n      \n      for (const backup of toDelete) {\n        await this.deleteBackup(backup.id)\n      }\n    }\n  }\n\n  private startAutoBackup(): void {\n    if (this.backupTimer) {\n      clearInterval(this.backupTimer)\n    }\n    \n    this.backupTimer = setInterval(async () => {\n      try {\n        await this.createBackup('Auto backup', ['auto'])\n      } catch (error) {\n        console.error('Auto backup failed:', error)\n      }\n    }, this.config.backupInterval * 60 * 1000)\n  }\n\n  // ============================================================================\n  // 数据加密和压缩\n  // ============================================================================\n\n  private async encryptData(data: BackupData): Promise<BackupData> {\n    // 在实际应用中，这里应该使用 Web Crypto API 进行加密\n    // 这里只是示例，实际加密需要更复杂的实现\n    console.log('Encrypting backup data...')\n    return data\n  }\n\n  private async decryptData(encryptedData: BackupData): Promise<BackupData> {\n    // 在实际应用中，这里应该使用 Web Crypto API 进行解密\n    console.log('Decrypting backup data...')\n    return encryptedData\n  }\n\n  private async compressData(data: BackupData): Promise<BackupData> {\n    // 在实际应用中，这里应该使用压缩算法\n    console.log('Compressing backup data...')\n    return data\n  }\n\n  private async decompressData(compressedData: BackupData): Promise<BackupData> {\n    // 在实际应用中，这里应该使用解压缩算法\n    console.log('Decompressing backup data...')\n    return compressedData\n  }\n\n  private async calculateChecksum(data: any): Promise<string> {\n    // 简单的校验和计算\n    const dataString = JSON.stringify(data)\n    let hash = 0\n    \n    for (let i = 0; i < dataString.length; i++) {\n      const char = dataString.charCodeAt(i)\n      hash = ((hash << 5) - hash) + char\n      hash = hash & hash // 转换为32位整数\n    }\n    \n    return Math.abs(hash).toString(16)\n  }\n\n  private async validateBackup(backupData: BackupData): Promise<boolean> {\n    try {\n      // 验证校验和\n      const calculatedChecksum = await this.calculateChecksum(backupData.data)\n      return calculatedChecksum === backupData.metadata.checksum\n    } catch {\n      return false\n    }\n  }\n\n  private async restoreData(data: BackupData['data']): Promise<void> {\n    // 恢复设置\n    if (data.settings.length > 0) {\n      await db.settings.bulkAdd(data.settings)\n    }\n    \n    // 恢复文件夹\n    if (data.folders.length > 0) {\n      await db.folders.bulkAdd(data.folders)\n    }\n    \n    // 恢复标签\n    if (data.tags.length > 0) {\n      await db.tags.bulkAdd(data.tags)\n    }\n    \n    // 恢复图片\n    if (data.images.length > 0) {\n      await db.images.bulkAdd(data.images)\n    }\n    \n    // 恢复卡片\n    if (data.cards.length > 0) {\n      await db.cards.bulkAdd(data.cards)\n    }\n    \n    // 恢复同步队列\n    if (data.syncQueue.length > 0) {\n      await db.syncQueue.bulkAdd(data.syncQueue)\n    }\n  }\n\n  // ============================================================================\n  // 审计日志\n  // ============================================================================\n\n  private logAudit(\n    action: string,\n    resource: string,\n    details: any = {},\n    severity: AuditLog['severity'] = 'info'\n  ): void {\n    if (!this.securityConfig.audit.enabled) return\n    \n    const log: AuditLog = {\n      id: crypto.randomUUID(),\n      timestamp: new Date(),\n      action,\n      resource,\n      details,\n      severity\n    }\n    \n    this.auditLogs.push(log)\n    \n    // 限制日志数量\n    if (this.auditLogs.length > this.securityConfig.audit.maxLogEntries) {\n      this.auditLogs = this.auditLogs.slice(-this.securityConfig.audit.maxLogEntries)\n    }\n  }\n\n  private startAuditCleanup(): void {\n    // 每天清理一次旧日志\n    setInterval(() => {\n      this.cleanupAuditLogs()\n    }, 24 * 60 * 60 * 1000)\n  }\n\n  private cleanupAuditLogs(): void {\n    const cutoffDate = new Date(Date.now() - this.securityConfig.privacy.dataRetentionDays * 24 * 60 * 60 * 1000)\n    this.auditLogs = this.auditLogs.filter(log => log.timestamp > cutoffDate)\n  }\n\n  // 获取审计日志\n  getAuditLogs(filter?: {\n    startDate?: Date\n    endDate?: Date\n    severity?: AuditLog['severity']\n    action?: string\n    limit?: number\n  }): AuditLog[] {\n    let logs = [...this.auditLogs]\n    \n    if (filter) {\n      if (filter.startDate) {\n        logs = logs.filter(log => log.timestamp >= filter.startDate!)\n      }\n      \n      if (filter.endDate) {\n        logs = logs.filter(log => log.timestamp <= filter.endDate!)\n      }\n      \n      if (filter.severity) {\n        logs = logs.filter(log => log.severity === filter.severity)\n      }\n      \n      if (filter.action) {\n        logs = logs.filter(log => log.action.includes(filter.action))\n      }\n      \n      if (filter.limit) {\n        logs = logs.slice(-filter.limit)\n      }\n    }\n    \n    return logs.reverse() // 最新的在前\n  }\n\n  // ============================================================================\n  // 安全检查和报告\n  // ============================================================================\n\n  // 执行安全检查\n  async performSecurityCheck(): Promise<SecurityReport> {\n    const vulnerabilities: SecurityVulnerability[] = []\n    \n    // 检查加密配置\n    if (!this.securityConfig.encryption.enabled) {\n      vulnerabilities.push({\n        id: 'encryption-disabled',\n        severity: 'high',\n        category: 'Encryption',\n        description: 'Data encryption is disabled',\n        impact: 'Sensitive data may be exposed in backups',\n        recommendation: 'Enable encryption for better data protection',\n        discovered: new Date(),\n        status: 'open'\n      })\n    }\n    \n    // 检查备份配置\n    if (!this.config.autoBackup) {\n      vulnerabilities.push({\n        id: 'auto-backup-disabled',\n        severity: 'medium',\n        category: 'Backup',\n        description: 'Automatic backup is disabled',\n        impact: 'Data may be lost if manual backup is forgotten',\n        recommendation: 'Enable automatic backup for data protection',\n        discovered: new Date(),\n        status: 'open'\n      })\n    }\n    \n    // 检查会话超时\n    if (this.securityConfig.access.sessionTimeout > 60 * 60 * 1000) {\n      vulnerabilities.push({\n        id: 'session-timeout-too-long',\n        severity: 'medium',\n        category: 'Access Control',\n        description: 'Session timeout is too long',\n        impact: 'Increases risk of unauthorized access',\n        recommendation: 'Reduce session timeout to 30 minutes or less',\n        discovered: new Date(),\n        status: 'open'\n      })\n    }\n    \n    // 计算安全分数\n    const totalChecks = 5\n    const passedChecks = totalChecks - vulnerabilities.filter(v => v.severity === 'high' || v.severity === 'critical').length\n    const overallScore = Math.round((passedChecks / totalChecks) * 100)\n    \n    // 生成建议\n    const recommendations = [\n      '定期更新安全配置',\n      '启用数据加密',\n      '设置合理的备份策略',\n      '监控异常访问行为',\n      '定期清理过期数据'\n    ]\n    \n    // 获取备份状态\n    const backups = await this.listBackups()\n    const backupSize = backups.reduce((total, backup) => total + backup.size, 0)\n    \n    return {\n      overallScore,\n      vulnerabilities,\n      recommendations,\n      auditSummary: {\n        totalLogs: this.auditLogs.length,\n        errorLogs: this.auditLogs.filter(log => log.severity === 'error').length,\n        recentActivity: this.auditLogs.slice(-10)\n      },\n      backupStatus: {\n        lastBackup: backups[0]?.timestamp,\n        backupCount: backups.length,\n        backupSize\n      }\n    }\n  }\n\n  // ============================================================================\n  // 配置管理\n  // ============================================================================\n\n  // 更新备份配置\n  async updateBackupConfig(config: Partial<BackupConfig>): Promise<void> {\n    this.config = { ...this.config, ...config }\n    \n    await db.updateSetting('backupConfig', this.config)\n    \n    // 重启自动备份\n    if (this.backupTimer) {\n      clearInterval(this.backupTimer)\n    }\n    \n    if (this.config.autoBackup) {\n      this.startAutoBackup()\n    }\n    \n    this.logAudit('config', 'backup_config_updated', config, 'info')\n  }\n\n  // 更新安全配置\n  async updateSecurityConfig(config: Partial<SecurityConfig>): Promise<void> {\n    this.securityConfig = { ...this.securityConfig, ...config }\n    \n    await db.updateSetting('securityConfig', this.securityConfig)\n    \n    this.logAudit('config', 'security_config_updated', config, 'info')\n  }\n\n  // 获取当前配置\n  getConfig() {\n    return {\n      backup: this.config,\n      security: this.securityConfig\n    }\n  }\n\n  // 数据清理\n  async cleanupOldData(): Promise<void> {\n    if (!this.securityConfig.privacy.autoCleanup) return\n    \n    try {\n      const cutoffDate = new Date(Date.now() - this.securityConfig.privacy.dataRetentionDays * 24 * 60 * 60 * 1000)\n      \n      // 清理旧的同步操作\n      await db.syncQueue.where('timestamp').below(cutoffDate).delete()\n      \n      // 清理旧的会话\n      await db.sessions.where('lastActivity').below(cutoffDate).delete()\n      \n      this.logAudit('cleanup', 'old_data_cleaned', { cutoffDate }, 'info')\n    } catch (error) {\n      this.logAudit('cleanup', 'cleanup_failed', { \n        error: error instanceof Error ? error.message : 'Unknown error' \n      }, 'error')\n    }\n  }\n}\n\n// 创建数据安全服务实例\nexport const dataSecurityService = new DataSecurityService()\n\n// 导出便捷函数\nexport const createBackup = (description?: string, tags?: string[]) => \n  dataSecurityService.createBackup(description, tags)\nexport const restoreBackup = (backupId: string) => \n  dataSecurityService.restoreBackup(backupId)\nexport const listBackups = () => \n  dataSecurityService.listBackups()\nexport const deleteBackup = (backupId: string) => \n  dataSecurityService.deleteBackup(backupId)\nexport const performSecurityCheck = () => \n  dataSecurityService.performSecurityCheck()\nexport const getAuditLogs = (filter?: any) => \n  dataSecurityService.getAuditLogs(filter)"],"version":3}
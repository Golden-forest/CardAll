{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\tests\\performance\\sync-performance.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\tests\\performance\\sync-performance.test.ts"],"sourcesContent":["// 同步系统性能测试\nimport { describe, it, expect, beforeEach, afterEach } from '@jest/globals'\nimport { MockSyncService, MockSupabaseService, MockDatabaseService } from '../mock-services'\nimport { PerformanceTester } from '../advanced-test-utils'\nimport { CardFixture, SyncOperationFixture } from '../data-fixtures'\nimport { TestDataGenerator } from '../data-fixtures'\n\ndescribe('SyncPerformance', () => {\n  let supabaseService: MockSupabaseService\n  let databaseService: MockDatabaseService\n  let syncService: MockSyncService\n  let performanceTester: PerformanceTester\n\n  beforeEach(() => {\n    supabaseService = new MockSupabaseService()\n    databaseService = new MockDatabaseService()\n    syncService = new MockSyncService(supabaseService, databaseService)\n    performanceTester = new PerformanceTester()\n  })\n\n  afterEach(() => {\n    performanceTester.clear()\n  })\n\n  describe('基准测试', () => {\n    it('应该能够在合理时间内同步少量卡片', async () => {\n      const cardCount = 10\n      const cards = CardFixture.list(cardCount)\n      \n      // 添加卡片到本地数据库\n      await databaseService.cards.bulkAdd(cards)\n      \n      // 创建同步操作\n      const syncOperations = cards.map(card => \n        SyncOperationFixture.createCard(card.id, { data: card })\n      )\n      await Promise.all(syncOperations.map(op => databaseService.syncQueue.add(op)))\n\n      // 测量同步时间\n      const syncTime = await performanceTester.measure('sync-small-batch', async () => {\n        const result = await syncService.syncNow()\n        return result\n      })\n\n      // 验证结果\n      expect(syncTime).toBeLessThan(1000) // 应该在1秒内完成\n      \n      const syncStats = await databaseService.syncQueue.getStats()\n      expect(syncStats.completed).toBe(cardCount)\n    })\n\n    it('应该能够在合理时间内同步中等数量的卡片', async () => {\n      const cardCount = 50\n      const cards = CardFixture.list(cardCount)\n      \n      await databaseService.cards.bulkAdd(cards)\n      \n      const syncOperations = cards.map(card => \n        SyncOperationFixture.createCard(card.id, { data: card })\n      )\n      await Promise.all(syncOperations.map(op => databaseService.syncQueue.add(op)))\n\n      const syncTime = await performanceTester.measure('sync-medium-batch', async () => {\n        const result = await syncService.syncNow()\n        return result\n      })\n\n      expect(syncTime).toBeLessThan(3000) // 应该在3秒内完成\n      \n      const syncStats = await databaseService.syncQueue.getStats()\n      expect(syncStats.completed).toBe(cardCount)\n    })\n\n    it('应该能够在合理时间内同步大量卡片', async () => {\n      const cardCount = 200\n      const cards = CardFixture.list(cardCount)\n      \n      await databaseService.cards.bulkAdd(cards)\n      \n      const syncOperations = cards.map(card => \n        SyncOperationFixture.createCard(card.id, { data: card })\n      )\n      await Promise.all(syncOperations.map(op => databaseService.syncQueue.add(op)))\n\n      const syncTime = await performanceTester.measure('sync-large-batch', async () => {\n        const result = await syncService.syncNow()\n        return result\n      })\n\n      expect(syncTime).toBeLessThan(10000) // 应该在10秒内完成\n      \n      const syncStats = await databaseService.syncQueue.getStats()\n      expect(syncStats.completed).toBe(cardCount)\n    })\n  })\n\n  describe('内存使用测试', () => {\n    it('应该在大量操作后保持内存使用合理', async () => {\n      const initialMemory = performanceTester.measureSync(() => {\n        // 模拟内存使用测量\n        return { used: 1000000, total: 2000000, percentage: 50 }\n      })\n\n      // 执行大量操作\n      const operations = []\n      for (let i = 0; i < 1000; i++) {\n        operations.push(\n          databaseService.cards.add(CardFixture.basic())\n        )\n      }\n      await Promise.all(operations)\n\n      // 执行同步\n      await syncService.syncNow()\n\n      // 测量最终内存使用\n      const finalMemory = performanceTester.measureSync(() => {\n        return { used: 1200000, total: 2000000, percentage: 60 }\n      })\n\n      // 内存增长应该合理\n      const memoryGrowth = finalMemory.used - initialMemory.used\n      expect(memoryGrowth).toBeLessThan(500000) // 内存增长应该少于500KB\n      \n      // 内存使用百分比应该合理\n      expect(finalMemory.percentage).toBeLessThan(80) // 使用率应该低于80%\n    })\n  })\n\n  describe('并发性能测试', () => {\n    it('应该能够处理并发同步操作', async () => {\n      const concurrentOperations = 10\n      const cardsPerOperation = 10\n\n      // 创建多个并发的同步任务\n      const syncPromises = []\n      for (let i = 0; i < concurrentOperations; i++) {\n        const cards = CardFixture.list(cardsPerOperation, {\n          frontContent: {\n            title: `并发卡片 ${i}`,\n            text: `这是第${i}个并发操作的卡片`,\n            images: [],\n            tags: [`并发-${i}`],\n            lastModified: new Date(),\n          },\n        })\n\n        await databaseService.cards.bulkAdd(cards)\n        \n        const syncOperations = cards.map(card => \n          SyncOperationFixture.createCard(card.id, { data: card })\n        )\n        await Promise.all(syncOperations.map(op => databaseService.syncQueue.add(op)))\n\n        syncPromises.push(\n          performanceTester.measure(`concurrent-sync-${i}`, async () => {\n            return await syncService.syncNow()\n          })\n        )\n      }\n\n      // 并发执行所有同步任务\n      const results = await Promise.all(syncPromises)\n\n      // 验证所有操作都成功\n      results.forEach((result, index) => {\n        expect(result.success).toBe(true)\n        expect(result.syncedCount).toBe(cardsPerOperation)\n      })\n\n      // 验证总同步时间合理\n      const totalTime = Math.max(...results.map((_, index) => \n        performanceTester.getStats(`concurrent-sync-${index}`)?.avg || 0\n      ))\n      expect(totalTime).toBeLessThan(5000) // 应该在5秒内完成\n    })\n  })\n\n  describe('网络条件测试', () => {\n    it('应该在网络延迟情况下仍能正常工作', async () => {\n      // 模拟网络延迟\n      const originalExecuteSync = (syncService as any).executeSyncOperation\n      ;(syncService as any).executeSyncOperation = async (operation: any) => {\n        // 模拟网络延迟\n        await new Promise(resolve => setTimeout(resolve, 200))\n        return await originalExecuteSync.call(syncService, operation)\n      }\n\n      const cardCount = 20\n      const cards = CardFixture.list(cardCount)\n      \n      await databaseService.cards.bulkAdd(cards)\n      \n      const syncOperations = cards.map(card => \n        SyncOperationFixture.createCard(card.id, { data: card })\n      )\n      await Promise.all(syncOperations.map(op => databaseService.syncQueue.add(op)))\n\n      const syncTime = await performanceTester.measure('sync-with-latency', async () => {\n        const result = await syncService.syncNow()\n        return result\n      })\n\n      // 考虑网络延迟，时间应该合理\n      expect(syncTime).toBeLessThan(cardCount * 250 + 1000) // 每个卡片250ms延迟 + 1秒基础时间\n      \n      const syncStats = await databaseService.syncQueue.getStats()\n      expect(syncStats.completed).toBe(cardCount)\n\n      // 恢复原始方法\n      ;(syncService as any).executeSyncOperation = originalExecuteSync\n    })\n\n    it('应该在网络不稳定情况下处理重试', async () => {\n      let callCount = 0\n      const originalExecuteSync = (syncService as any).executeSyncOperation\n      ;(syncService as any).executeSyncOperation = async (operation: any) => {\n        callCount++\n        if (callCount <= 2) {\n          throw new Error('Network unstable')\n        }\n        return await originalExecuteSync.call(syncService, operation)\n      }\n\n      const card = CardFixture.basic()\n      await databaseService.cards.add(card)\n      \n      const syncOperation = SyncOperationFixture.createCard(card.id, { \n        data: card,\n        maxRetries: 3,\n      })\n      await databaseService.syncQueue.add(syncOperation)\n\n      const syncTime = await performanceTester.measure('sync-with-retries', async () => {\n        const result = await syncService.syncNow()\n        return result\n      })\n\n      // 应该成功完成（经过重试）\n      const syncStats = await databaseService.syncQueue.getStats()\n      expect(syncStats.completed).toBe(1)\n      expect(syncStats.failed).toBe(0)\n\n      // 恢复原始方法\n      ;(syncService as any).executeSyncOperation = originalExecuteSync\n    })\n  })\n\n  describe('数据处理性能测试', () => {\n    it('应该能够高效处理大型卡片数据', async () => {\n      // 创建包含大量数据的卡片\n      const largeCards = CardFixture.list(10).map(card => ({\n        ...card,\n        frontContent: {\n          ...card.frontContent,\n          text: 'A'.repeat(10000), // 10KB文本\n          images: Array.from({ length: 10 }, (_, i) => ({\n            id: `img-${i}`,\n            url: `https://example.com/image-${i}.jpg`,\n            alt: `Large image ${i}`,\n            width: 1920,\n            height: 1080,\n          })),\n        },\n      }))\n\n      await databaseService.cards.bulkAdd(largeCards)\n      \n      const syncOperations = largeCards.map(card => \n        SyncOperationFixture.createCard(card.id, { data: card })\n      )\n      await Promise.all(syncOperations.map(op => databaseService.syncQueue.add(op)))\n\n      const syncTime = await performanceTester.measure('sync-large-data', async () => {\n        const result = await syncService.syncNow()\n        return result\n      })\n\n      expect(syncTime).toBeLessThan(5000) // 应该在5秒内完成\n      \n      const syncStats = await databaseService.syncQueue.getStats()\n      expect(syncStats.completed).toBe(10)\n    })\n\n    it('应该能够高效处理混合数据类型', async () => {\n      // 创建包含卡片、文件夹、标签的混合数据\n      const cards = CardFixture.list(10)\n      const folders = CardFixture.list(5)\n      const tags = CardFixture.list(8)\n\n      await Promise.all([\n        databaseService.cards.bulkAdd(cards),\n        databaseService.folders.bulkAdd(folders),\n        databaseService.tags.bulkAdd(tags),\n      ])\n\n      // 创建各种类型的同步操作\n      const syncOperations = [\n        ...cards.map(card => SyncOperationFixture.createCard(card.id, { data: card })),\n        ...folders.map(folder => SyncOperationFixture.createFolder(folder.id, { data: folder })),\n        ...tags.map(tag => SyncOperationFixture.createTag(tag.id, { data: tag })),\n      ]\n      await Promise.all(syncOperations.map(op => databaseService.syncQueue.add(op)))\n\n      const syncTime = await performanceTester.measure('sync-mixed-data', async () => {\n        const result = await syncService.syncNow()\n        return result\n      })\n\n      expect(syncTime).toBeLessThan(3000) // 应该在3秒内完成\n      \n      const syncStats = await databaseService.syncQueue.getStats()\n      expect(syncStats.completed).toBe(syncOperations.length)\n    })\n  })\n\n  describe('队列性能测试', () => {\n    it('应该能够高效管理大量队列操作', async () => {\n      const queueSize = 1000\n      \n      // 创建大量队列操作\n      const syncOperations = []\n      for (let i = 0; i < queueSize; i++) {\n        const operation = SyncOperationFixture.createCard(`card-${i}`, {\n          priority: i % 10 === 0 ? 'high' : 'normal', // 10%高优先级\n        })\n        syncOperations.push(operation)\n      }\n\n      const queueAddTime = await performanceTester.measure('queue-add-operations', async () => {\n        await Promise.all(syncOperations.map(op => databaseService.syncQueue.add(op)))\n      })\n\n      expect(queueAddTime).toBeLessThan(1000) // 应该在1秒内完成\n\n      // 测量队列统计性能\n      const statsTime = await performanceTester.measure('queue-get-stats', async () => {\n        return await databaseService.syncQueue.getStats()\n      })\n\n      expect(statsTime).toBeLessThan(100) // 应该在100ms内完成\n\n      const stats = await databaseService.syncQueue.getStats()\n      expect(stats.total).toBe(queueSize)\n    })\n\n    it('应该能够高效处理队列清理', async () => {\n      // 添加各种状态的队列操作\n      const operations = [\n        ...Array.from({ length: 100 }, () => SyncOperationFixture.createCard('test')),\n        ...Array.from({ length: 50 }, () => SyncOperationFixture.completed()),\n        ...Array.from({ length: 25 }, () => SyncOperationFixture.failed()),\n      ]\n\n      await Promise.all(operations.map(op => databaseService.syncQueue.add(op)))\n\n      const cleanupTime = await performanceTester.measure('queue-cleanup', async () => {\n        await databaseService.syncQueue.clear()\n      })\n\n      expect(cleanupTime).toBeLessThan(500) // 应该在500ms内完成\n\n      const stats = await databaseService.syncQueue.getStats()\n      expect(stats.total).toBe(0)\n    })\n  })\n\n  describe('系统稳定性测试', () => {\n    it('应该能够持续处理长时间运行的同步操作', async () => {\n      const totalOperations = 500\n      const batchSize = 10\n      const batches = Math.ceil(totalOperations / batchSize)\n\n      let totalSyncTime = 0\n      let successfulBatches = 0\n\n      for (let batch = 0; batch < batches; batch++) {\n        const cards = CardFixture.list(batchSize)\n        await databaseService.cards.bulkAdd(cards)\n        \n        const syncOperations = cards.map(card => \n          SyncOperationFixture.createCard(card.id, { data: card })\n        )\n        await Promise.all(syncOperations.map(op => databaseService.syncQueue.add(op)))\n\n        const batchTime = await performanceTester.measure(`batch-${batch}`, async () => {\n          const result = await syncService.syncNow()\n          return result\n        })\n\n        totalSyncTime += batchTime\n        \n        if (batchTime.success) {\n          successfulBatches++\n        }\n\n        // 短暂休息以模拟真实使用场景\n        await new Promise(resolve => setTimeout(resolve, 10))\n      }\n\n      // 验证系统稳定性\n      expect(successfulBatches).toBe(batches)\n      expect(totalSyncTime).toBeLessThan(30000) // 总时间应该少于30秒\n      expect(totalSyncTime / batches).toBeLessThan(1000) // 平均每批次应该少于1秒\n    })\n\n    it('应该能够在内存压力下保持稳定', async () => {\n      // 模拟内存压力场景\n      const memoryPressureTest = async () => {\n        const operations = []\n        \n        // 创建大量数据\n        for (let i = 0; i < 100; i++) {\n          const cards = CardFixture.list(20)\n          await databaseService.cards.bulkAdd(cards)\n          \n          const syncOperations = cards.map(card => \n            SyncOperationFixture.createCard(card.id, { data: card })\n          )\n          await Promise.all(syncOperations.map(op => databaseService.syncQueue.add(op)))\n          \n          operations.push(syncService.syncNow())\n        }\n\n        // 并发执行所有同步操作\n        const results = await Promise.all(operations)\n        \n        return {\n          successful: results.filter(r => r.success).length,\n          failed: results.filter(r => !r.success).length,\n          averageTime: results.reduce((sum, r) => sum + (r.syncedCount || 0), 0) / results.length,\n        }\n      }\n\n      const pressureResult = await performanceTester.measure('memory-pressure-test', memoryPressureTest)\n\n      expect(pressureResult.successful).toBe(100)\n      expect(pressureResult.failed).toBe(0)\n      expect(pressureResult.averageTime).toBeGreaterThan(0)\n    })\n  })\n\n  describe('性能基准', () => {\n    it('应该满足性能基准要求', async () => {\n      // 定义性能基准\n      const benchmarks = {\n        singleCardSync: 100, // 单个卡片同步应该在100ms内完成\n        smallBatchSync: 1000, // 小批量(10个)同步应该在1秒内完成\n        mediumBatchSync: 3000, // 中批量(50个)同步应该在3秒内完成\n        largeBatchSync: 10000, // 大批量(200个)同步应该在10秒内完成\n        memoryUsageLimit: 80, // 内存使用率应该低于80%\n        queueOperationLimit: 100, // 队列操作应该在100ms内完成\n      }\n\n      // 测试单个卡片同步\n      const singleCard = CardFixture.basic()\n      await databaseService.cards.add(singleCard)\n      await databaseService.syncQueue.add(SyncOperationFixture.createCard(singleCard.id, { data: singleCard }))\n\n      const singleCardTime = await performanceTester.measure('single-card-sync', async () => {\n        return await syncService.syncNow()\n      })\n\n      expect(singleCardTime).toBeLessThan(benchmarks.singleCardSync)\n\n      // 测试小批量同步\n      const smallBatch = CardFixture.list(10)\n      await databaseService.cards.bulkAdd(smallBatch)\n      await Promise.all(smallBatch.map(card => \n        databaseService.syncQueue.add(SyncOperationFixture.createCard(card.id, { data: card }))\n      ))\n\n      const smallBatchTime = await performanceTester.measure('small-batch-sync', async () => {\n        return await syncService.syncNow()\n      })\n\n      expect(smallBatchTime).toBeLessThan(benchmarks.smallBatchSync)\n\n      // 测试队列操作性能\n      const queueOperationTime = await performanceTester.measure('queue-operation', async () => {\n        const operation = SyncOperationFixture.createCard('test-card')\n        return await databaseService.syncQueue.add(operation)\n      })\n\n      expect(queueOperationTime).toBeLessThan(benchmarks.queueOperationLimit)\n\n      // 生成性能报告\n      const performanceReport = {\n        benchmarks,\n        results: {\n          singleCardSync: singleCardTime,\n          smallBatchSync: smallBatchTime,\n          queueOperation: queueOperationTime,\n        },\n        passed: {\n          singleCardSync: singleCardTime < benchmarks.singleCardSync,\n          smallBatchSync: smallBatchTime < benchmarks.smallBatchSync,\n          queueOperation: queueOperationTime < benchmarks.queueOperationLimit,\n        },\n        timestamp: new Date().toISOString(),\n      }\n\n      // 性能报告应该通过所有基准测试\n      expect(Object.values(performanceReport.passed).every(Boolean)).toBe(true)\n    })\n  })\n})"],"version":3}
bf925ee0631bc86476594eafd85a37c0
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.storageUtils = exports.networkUtils = exports.mockDataUtils = exports.accessibilityUtils = exports.performanceUtils = exports.createMockTouchEvent = exports.createMockMouseEvent = exports.createMockKeyboardEvent = exports.createMockDragEvent = exports.createMockImage = exports.createMockFile = exports.createMockEvent = exports.waitForAsync = exports.createMockFunction = exports.testData = exports.render = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
// 测试工具函数和辅助方法
const react_1 = require("@testing-library/react");
const jest_axe_1 = require("jest-axe");
// 扩展 Jest 匹配器
expect.extend(jest_axe_1.toHaveNoViolations);
// 自定义渲染器，包含默认提供者
const AllTheProviders = ({ children }) => {
    // 这里可以添加默认的上下文提供者
    return (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: children });
};
const customRender = (ui, options) => (0, react_1.render)(ui, { wrapper: AllTheProviders, ...options });
exports.render = customRender;
// 重新导出所有 testing-library 工具
__exportStar(require("@testing-library/react"), exports);
// 测试数据生成器
exports.testData = {
    // 用户数据
    user: {
        id: 'test-user-id',
        email: 'test@example.com',
        name: 'Test User',
        avatar: null,
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-01T00:00:00Z',
    },
    // 卡片数据
    card: {
        id: 'test-card-id',
        title: 'Test Card',
        content: '<p>Test content</p>',
        backContent: '',
        tags: ['test-tag'],
        folderId: null,
        style: 'default',
        isFlipped: false,
        order: 0,
        createdAt: '2024-01-01T00:00:00Z',
        updatedAt: '2024-01-01T00:00:00Z',
        userId: 'test-user-id',
        isLocalOnly: false,
        cloudSynced: true,
    },
    // 文件夹数据
    folder: {
        id: 'test-folder-id',
        name: 'Test Folder',
        parentId: null,
        userId: 'test-user-id',
        order: 0,
        createdAt: '2024-01-01T00:00:00Z',
        updatedAt: '2024-01-01T00:00:00Z',
        isLocalOnly: false,
        cloudSynced: true,
    },
    // 标签数据
    tag: {
        id: 'test-tag-id',
        name: 'Test Tag',
        color: '#3b82f6',
        userId: 'test-user-id',
        count: 1,
        createdAt: '2024-01-01T00:00:00Z',
        updatedAt: '2024-01-01T00:00:00Z',
    },
    // 同步数据
    syncQueue: {
        id: 'test-sync-id',
        operation: 'create',
        entityType: 'card',
        entityId: 'test-card-id',
        data: {},
        timestamp: '2024-01-01T00:00:00Z',
        retryCount: 0,
        status: 'pending',
        error: null,
    },
};
// 模拟函数生成器
const createMockFunction = (implementation) => {
    const mockFn = jest.fn(implementation);
    return mockFn;
};
exports.createMockFunction = createMockFunction;
// 异步等待工具
const waitForAsync = (ms = 0) => {
    return new Promise(resolve => setTimeout(resolve, ms));
};
exports.waitForAsync = waitForAsync;
// 模拟事件工具
const createMockEvent = (type, data = {}) => {
    return {
        type,
        preventDefault: jest.fn(),
        stopPropagation: jest.fn(),
        currentTarget: { value: '' },
        target: { value: '' },
        ...data,
    };
};
exports.createMockEvent = createMockEvent;
// 模拟文件对象
const createMockFile = (name, type, size = 1024) => {
    const file = new File(['test'], name, { type });
    Object.defineProperty(file, 'size', { value: size });
    return file;
};
exports.createMockFile = createMockFile;
// 模拟图片对象
const createMockImage = (src = 'test.jpg') => {
    const img = new Image();
    img.src = src;
    return img;
};
exports.createMockImage = createMockImage;
// 模拟拖拽事件
const createMockDragEvent = (type, data = {}) => {
    return {
        type,
        dataTransfer: {
            getData: jest.fn(),
            setData: jest.fn(),
            clearData: jest.fn(),
            items: [],
            files: [],
        },
        clientX: 0,
        clientY: 0,
        preventDefault: jest.fn(),
        stopPropagation: jest.fn(),
        ...data,
    };
};
exports.createMockDragEvent = createMockDragEvent;
// 模拟键盘事件
const createMockKeyboardEvent = (type, key, options = {}) => {
    return new KeyboardEvent(type, {
        key,
        bubbles: true,
        cancelable: true,
        ...options,
    });
};
exports.createMockKeyboardEvent = createMockKeyboardEvent;
// 模拟鼠标事件
const createMockMouseEvent = (type, options = {}) => {
    return new MouseEvent(type, {
        bubbles: true,
        cancelable: true,
        ...options,
    });
};
exports.createMockMouseEvent = createMockMouseEvent;
// 模拟触摸事件
const createMockTouchEvent = (type, touches = [], options = {}) => {
    return new TouchEvent(type, {
        touches: touches.map(touch => ({
            clientX: touch.clientX || 0,
            clientY: touch.clientY || 0,
            identifier: touch.identifier || 0,
            ...touch,
        })),
        ...options,
    });
};
exports.createMockTouchEvent = createMockTouchEvent;
// 性能测试工具
exports.performanceUtils = {
    // 测量渲染时间
    measureRenderTime: async (callback) => {
        const start = performance.now();
        await callback();
        const end = performance.now();
        return end - start;
    },
    // 测量内存使用（简化版）
    measureMemoryUsage: () => {
        if ('memory' in performance) {
            const memory = performance.memory;
            return {
                used: memory.usedJSHeapSize,
                total: memory.totalJSHeapSize,
                percentage: (memory.usedJSHeapSize / memory.totalJSHeapSize) * 100,
            };
        }
        return { used: 0, total: 0, percentage: 0 };
    },
    // 测量重新渲染次数
    measureReRenders: (callback) => {
        let renderCount = 0;
        const originalRender = window.requestAnimationFrame;
        window.requestAnimationFrame = (callback) => {
            renderCount++;
            return originalRender(callback);
        };
        callback();
        window.requestAnimationFrame = originalRender;
        return renderCount;
    },
};
// 可访问性测试工具
exports.accessibilityUtils = {
    // 检查颜色对比度（简化版）
    checkColorContrast: (color1, color2) => {
        // 这里应该实现真正的颜色对比度计算
        // 为了测试，返回一个模拟值
        return 4.5;
    },
    // 检查键盘可访问性
    checkKeyboardAccessibility: (element) => {
        const interactiveElements = element.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
        return {
            hasInteractiveElements: interactiveElements.length > 0,
            interactiveCount: interactiveElements.length,
            allTabbable: Array.from(interactiveElements).every(el => el.getAttribute('tabindex') !== '-1'),
        };
    },
    // 检查ARIA标签
    checkAriaLabels: (element) => {
        const elementsNeedingLabels = element.querySelectorAll('button, input, select, textarea, [role="img"]');
        const elementsWithLabels = element.querySelectorAll('[aria-label], [aria-labelledby], [title]');
        return {
            elementsNeedingLabels: elementsNeedingLabels.length,
            elementsWithLabels: elementsWithLabels.length,
            coverage: elementsWithLabels.length / elementsNeedingLabels.length,
        };
    },
};
// 数据模拟工具
exports.mockDataUtils = {
    // 生成测试卡片
    generateTestCard: (overrides) => ({
        ...exports.testData.card,
        ...overrides,
    }),
    // 生成测试文件夹
    generateTestFolder: (overrides) => ({
        ...exports.testData.folder,
        ...overrides,
    }),
    // 生成测试标签
    generateTestTag: (overrides) => ({
        ...exports.testData.tag,
        ...overrides,
    }),
    // 生成测试用户
    generateTestUser: (overrides) => ({
        ...exports.testData.user,
        ...overrides,
    }),
    // 生成测试同步队列项
    generateTestSyncQueue: (overrides) => ({
        ...exports.testData.syncQueue,
        ...overrides,
    }),
};
// 网络模拟工具
exports.networkUtils = {
    // 模拟网络延迟
    simulateDelay: (ms) => new Promise(resolve => setTimeout(resolve, ms)),
    // 模拟网络错误
    simulateNetworkError: () => Promise.reject(new Error('Network error')),
    // 模拟离线状态
    simulateOffline: () => {
        Object.defineProperty(navigator, 'onLine', {
            value: false,
            configurable: true,
        });
    },
    // 模拟在线状态
    simulateOnline: () => {
        Object.defineProperty(navigator, 'onLine', {
            value: true,
            configurable: true,
        });
    },
};
// 存储模拟工具
exports.storageUtils = {
    // 清除所有存储
    clearAllStorage: () => {
        localStorage.clear();
        sessionStorage.clear();
    },
    // 模拟存储配额已满
    simulateStorageQuotaExceeded: () => {
        const originalSetItem = localStorage.setItem;
        localStorage.setItem = jest.fn(() => {
            throw new DOMException('QuotaExceededError', 'QuotaExceededError');
        });
        return () => {
            localStorage.setItem = originalSetItem;
        };
    },
    // 获取存储使用情况（模拟）
    getStorageUsage: () => {
        const data = localStorage.getItem('test-data') || '';
        return {
            used: data.length * 2, // 简化计算
            total: 5 * 1024 * 1024, // 5MB
            percentage: (data.length * 2) / (5 * 1024 * 1024) * 100,
        };
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\sync-integration.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\sync-integration.ts"],"sourcesContent":["import { cloudSyncService } from './cloud-sync'\nimport { localOperationService, type LocalSyncOperation } from './local-operation'\nimport { syncStrategyService } from './sync-strategy'\nimport { syncPerformanceOptimizer, type PerformanceMetrics } from './sync-performance'\nimport { networkMonitorService } from './network-monitor'\nimport { db, type DbCard, type DbFolder, type DbTag, type DbImage } from './database'\nimport { authService } from './auth'\nimport { supabase } from './supabase'\n\n// ============================================================================\n// 同步系统集成服务 - 统一接口\n// ============================================================================\n\n// 同步系统状态\nexport interface SyncSystemStatus {\n  // 基础状态\n  isOnline: boolean\n  isSyncing: boolean\n  lastSyncTime: Date | null\n  \n  // 队列状态\n  queueSize: number\n  processingQueueSize: number\n  failedOperations: number\n  \n  // 性能状态\n  performance: {\n    throughput: number\n    latency: number\n    successRate: number\n    memoryUsage: number\n  }\n  \n  // 网络状态\n  network: {\n    quality: string\n    latency: number\n    bandwidth: number\n  }\n  \n  // 冲突状态\n  hasConflicts: boolean\n  conflictCount: number\n  \n  // 系统健康\n  health: 'healthy' | 'degraded' | 'critical'\n  issues: string[]\n}\n\n// 同步配置\nexport interface SyncSystemConfig {\n  // 启用/禁用组件\n  components: {\n    localQueue: boolean\n    networkMonitor: boolean\n    syncStrategy: boolean\n    performanceOptimizer: boolean\n    conflictResolution: boolean\n  }\n  \n  // 同步策略\n  strategy: {\n    autoSync: boolean\n    syncInterval: number\n    fullSyncThreshold: number // 触发全量同步的阈值\n    conflictResolution: 'auto' | 'manual' | 'hybrid'\n  }\n  \n  // 性能配置\n  performance: {\n    adaptiveBatching: boolean\n    networkAware: boolean\n    compressionEnabled: boolean\n    maxConcurrentOperations: number\n  }\n  \n  // 离线配置\n  offline: {\n    enabled: boolean\n    maxOfflineOperations: number\n    autoSyncOnReconnect: boolean\n  }\n}\n\n// 默认配置\nexport const DEFAULT_SYNC_CONFIG: SyncSystemConfig = {\n  components: {\n    localQueue: true,\n    networkMonitor: true,\n    syncStrategy: true,\n    performanceOptimizer: true,\n    conflictResolution: true\n  },\n  \n  strategy: {\n    autoSync: true,\n    syncInterval: 300000, // 5分钟\n    fullSyncThreshold: 1000,\n    conflictResolution: 'hybrid'\n  },\n  \n  performance: {\n    adaptiveBatching: true,\n    networkAware: true,\n    compressionEnabled: true,\n    maxConcurrentOperations: 50\n  },\n  \n  offline: {\n    enabled: true,\n    maxOfflineOperations: 5000,\n    autoSyncOnReconnect: true\n  }\n}\n\n// 同步事件\nexport interface SyncEvent {\n  type: 'sync-started' | 'sync-completed' | 'sync-failed' | 'sync-progress'\n         | 'operation-queued' | 'operation-completed' | 'operation-failed'\n         | 'conflict-detected' | 'conflict-resolved'\n         | 'network-changed' | 'performance-alert'\n  timestamp: Date\n  data: any\n}\n\n// ============================================================================\n// 同步系统集成服务\n// ============================================================================\n\nexport class SyncIntegrationService {\n  private config: SyncSystemConfig\n  private isInitialized = false\n  private isRunning = false\n  \n  // 事件监听器\n  private listeners: Set<(event: SyncEvent) => void> = new Set()\n  \n  // 定时器\n  private syncTimer: NodeJS.Timeout | null = null\n  private statusUpdateTimer: NodeJS.Timeout | null = null\n  \n  // 组件集成状态\n  private componentsReady = {\n    localQueue: false,\n    networkMonitor: false,\n    syncStrategy: false,\n    performanceOptimizer: false\n  }\n\n  constructor(config: Partial<SyncSystemConfig> = {}) {\n    this.config = { ...DEFAULT_SYNC_CONFIG, ...config }\n    this.initialize()\n  }\n\n  // 初始化服务\n  private async initialize(): Promise<void> {\n    try {\n      console.log('Initializing SyncIntegrationService...')\n      \n      // 初始化各个组件\n      await this.initializeComponents()\n      \n      // 设置组件间的事件监听\n      this.setupComponentIntegration()\n      \n      // 启动定时任务\n      this.startScheduledTasks()\n      \n      this.isInitialized = true\n      console.log('SyncIntegrationService initialized successfully')\n      \n      this.emitEvent({\n        type: 'sync-completed',\n        timestamp: new Date(),\n        data: { message: 'Sync system initialized' }\n      })\n    } catch (error) {\n      console.error('Failed to initialize SyncIntegrationService:', error)\n      this.emitEvent({\n        type: 'sync-failed',\n        timestamp: new Date(),\n        data: { error: error instanceof Error ? error.message : 'Initialization failed' }\n      })\n    }\n  }\n\n  // 初始化各个组件\n  private async initializeComponents(): Promise<void> {\n    const initPromises: Promise<void>[] = []\n\n    // 初始化本地队列\n    if (this.config.components.localQueue) {\n      initPromises.push(this.initializeLocalQueue())\n    }\n\n    // 初始化网络监控\n    if (this.config.components.networkMonitor) {\n      initPromises.push(this.initializeNetworkMonitor())\n    }\n\n    // 初始化同步策略\n    if (this.config.components.syncStrategy) {\n      initPromises.push(this.initializeSyncStrategy())\n    }\n\n    // 初始化性能优化器\n    if (this.config.components.performanceOptimizer) {\n      initPromises.push(this.initializePerformanceOptimizer())\n    }\n\n    await Promise.allSettled(initPromises)\n  }\n\n  // 初始化本地队列\n  private async initializeLocalQueue(): Promise<void> {\n    try {\n      // 设置本地队列事件监听\n      localOperationService.addEventListener('operationAdded', (operation) => {\n        this.emitEvent({\n          type: 'operation-queued',\n          timestamp: new Date(),\n          data: { operation, queueSize: this.getQueueSize() }\n        })\n      })\n\n      localOperationService.addEventListener('operationCompleted', (operation) => {\n        this.emitEvent({\n          type: 'operation-completed',\n          timestamp: new Date(),\n          data: { operation, queueSize: this.getQueueSize() }\n        })\n      })\n\n      localOperationService.addEventListener('operationFailed', (operation, error) => {\n        this.emitEvent({\n          type: 'operation-failed',\n          timestamp: new Date(),\n          data: { operation, error: error.message, queueSize: this.getQueueSize() }\n        })\n      })\n\n      this.componentsReady.localQueue = true\n      console.log('Local queue initialized')\n    } catch (error) {\n      console.error('Failed to initialize local queue:', error)\n    }\n  }\n\n  // 初始化网络监控\n  private async initializeNetworkMonitor(): Promise<void> {\n    try {\n      // 设置网络监控事件监听\n      networkMonitorService.addEventListener((event) => {\n        this.emitEvent({\n          type: 'network-changed',\n          timestamp: new Date(),\n          data: { event, networkInfo: event.currentState }\n        })\n\n        // 网络恢复时自动同步\n        if (event.type === 'online' && this.config.offline.autoSyncOnReconnect) {\n          this.triggerSync()\n        }\n      })\n\n      // 启动网络监控\n      networkMonitorService.startMonitoring()\n      \n      this.componentsReady.networkMonitor = true\n      console.log('Network monitor initialized')\n    } catch (error) {\n      console.error('Failed to initialize network monitor:', error)\n    }\n  }\n\n  // 初始化同步策略\n  private async initializeSyncStrategy(): Promise<void> {\n    try {\n      // 设置同步策略事件监听\n      syncStrategyService.addEventListener('conflictDetected', (conflict) => {\n        this.emitEvent({\n          type: 'conflict-detected',\n          timestamp: new Date(),\n          data: { conflict }\n        })\n      })\n\n      syncStrategyService.addEventListener('conflictResolved', (conflict) => {\n        this.emitEvent({\n          type: 'conflict-resolved',\n          timestamp: new Date(),\n          data: { conflict }\n        })\n      })\n\n      syncStrategyService.addEventListener('syncProgress', (progress) => {\n        this.emitEvent({\n          type: 'sync-progress',\n          timestamp: new Date(),\n          data: { progress }\n        })\n      })\n\n      this.componentsReady.syncStrategy = true\n      console.log('Sync strategy initialized')\n    } catch (error) {\n      console.error('Failed to initialize sync strategy:', error)\n    }\n  }\n\n  // 初始化性能优化器\n  private async initializePerformanceOptimizer(): Promise<void> {\n    try {\n      // 性能优化器内部有自己的事件系统\n      // 这里主要确保它已正确初始化\n      this.componentsReady.performanceOptimizer = true\n      console.log('Performance optimizer initialized')\n    } catch (error) {\n      console.error('Failed to initialize performance optimizer:', error)\n    }\n  }\n\n  // 设置组件间集成\n  private setupComponentIntegration(): void {\n    // 本地队列与性能优化器的集成\n    if (this.config.components.localQueue && this.config.components.performanceOptimizer) {\n      this.setupLocalQueuePerformanceIntegration()\n    }\n\n    // 网络监控与性能优化器的集成\n    if (this.config.components.networkMonitor && this.config.components.performanceOptimizer) {\n      this.setupNetworkPerformanceIntegration()\n    }\n\n    // 同步策略与本地队列的集成\n    if (this.config.components.syncStrategy && this.config.components.localQueue) {\n      this.setupSyncQueueIntegration()\n    }\n  }\n\n  // 设置本地队列与性能优化器的集成\n  private setupLocalQueuePerformanceIntegration(): void {\n    // 拦截本地队列的操作，通过性能优化器执行\n    const originalAddOperation = localOperationService.addOperation.bind(localOperationService)\n    \n    localOperationService.addOperation = async (operation) => {\n      try {\n        // 通过性能优化器执行操作\n        return await syncPerformanceOptimizer.executeOptimizedOperation(operation as LocalSyncOperation)\n      } catch (error) {\n        // 如果性能优化器拒绝，回退到原始方法\n        console.warn('Performance optimization failed, falling back to direct execution')\n        return await originalAddOperation(operation)\n      }\n    }\n  }\n\n  // 设置网络监控与性能优化器的集成\n  private setupNetworkPerformanceIntegration(): void {\n    // 网络监控已经会通知性能优化器\n    // 这里主要确保信息流通\n  }\n\n  // 设置同步策略与本地队列的集成\n  private setupSyncQueueIntegration(): void {\n    // 同步策略会使用本地队列管理操作\n    // 这里确保数据流向正确\n  }\n\n  // 启动定时任务\n  private startScheduledTasks(): void {\n    // 自动同步\n    if (this.config.strategy.autoSync) {\n      this.syncTimer = setInterval(() => {\n        if (this.shouldAutoSync()) {\n          this.triggerSync()\n        }\n      }, this.config.strategy.syncInterval)\n    }\n\n    // 状态更新\n    this.statusUpdateTimer = setInterval(() => {\n      this.updateSystemStatus()\n    }, 30000) // 每30秒更新一次状态\n  }\n\n  // ============================================================================\n  // 公共方法\n  // ============================================================================\n\n  // 启动同步系统\n  async start(): Promise<void> {\n    if (this.isRunning) {\n      console.warn('Sync system is already running')\n      return\n    }\n\n    if (!this.isInitialized) {\n      throw new Error('Sync system is not initialized')\n    }\n\n    try {\n      this.isRunning = true\n      \n      // 恢复本地队列\n      await localOperationService.retryFailedOperations()\n      \n      // 触发初始同步\n      if (this.shouldAutoSync()) {\n        await this.triggerSync()\n      }\n      \n      this.emitEvent({\n        type: 'sync-started',\n        timestamp: new Date(),\n        data: { message: 'Sync system started' }\n      })\n      \n      console.log('Sync system started successfully')\n    } catch (error) {\n      this.isRunning = false\n      throw error\n    }\n  }\n\n  // 停止同步系统\n  async stop(): Promise<void> {\n    if (!this.isRunning) {\n      console.warn('Sync system is not running')\n      return\n    }\n\n    try {\n      this.isRunning = false\n      \n      // 停止定时器\n      if (this.syncTimer) {\n        clearInterval(this.syncTimer)\n        this.syncTimer = null\n      }\n      \n      if (this.statusUpdateTimer) {\n        clearInterval(this.statusUpdateTimer)\n        this.statusUpdateTimer = null\n      }\n      \n      // 停止网络监控\n      if (this.config.components.networkMonitor) {\n        networkMonitorService.stopMonitoring()\n      }\n      \n      this.emitEvent({\n        type: 'sync-completed',\n        timestamp: new Date(),\n        data: { message: 'Sync system stopped' }\n      })\n      \n      console.log('Sync system stopped successfully')\n    } catch (error) {\n      console.error('Failed to stop sync system:', error)\n      throw error\n    }\n  }\n\n  // 触发同步\n  async triggerSync(options?: {\n    forceFullSync?: boolean\n    entityTypes?: ('card' | 'folder' | 'tag' | 'image')[]\n    userId?: string\n  }): Promise<void> {\n    if (!this.isRunning) {\n      throw new Error('Sync system is not running')\n    }\n\n    try {\n      const userId = options?.userId || authService.getCurrentUser()?.id\n      if (!userId) {\n        throw new Error('No authenticated user')\n      }\n\n      this.emitEvent({\n        type: 'sync-started',\n        timestamp: new Date(),\n        data: { options }\n      })\n\n      // 使用同步策略服务执行同步\n      const lastSyncTime = this.getLastSyncTime()\n      \n      await syncStrategyService.performIncrementalSync(\n        userId,\n        lastSyncTime || new Date(0),\n        {\n          forceFullSync: options?.forceFullSync,\n          entityTypes: options?.entityTypes\n        }\n      )\n\n      this.emitEvent({\n        type: 'sync-completed',\n        timestamp: new Date(),\n        data: { \n          message: 'Sync completed successfully',\n          lastSyncTime: new Date()\n        }\n      })\n    } catch (error) {\n      this.emitEvent({\n        type: 'sync-failed',\n        timestamp: new Date(),\n        data: { \n          error: error instanceof Error ? error.message : 'Sync failed',\n          options\n        }\n      })\n      throw error\n    }\n  }\n\n  // 添加同步操作\n  async addSyncOperation(\n    entityType: 'card' | 'folder' | 'tag' | 'image',\n    operationType: 'create' | 'update' | 'delete',\n    data: DbCard | DbFolder | DbTag | DbImage,\n    options?: {\n      userId?: string\n      previousData?: any\n      priority?: 'critical' | 'high' | 'normal' | 'low'\n    }\n  ): Promise<string> {\n    const userId = options?.userId || authService.getCurrentUser()?.id\n    if (!userId) {\n      throw new Error('No authenticated user')\n    }\n\n    let operation: Omit<LocalSyncOperation, 'id' | 'timestamp' | 'retryCount' | 'status' | 'localVersion'>\n\n    switch (entityType) {\n      case 'card':\n        operation = {\n          entityType: 'card',\n          operationType,\n          entityId: data.id!,\n          data,\n          previousData: options?.previousData,\n          userId,\n          priority: options?.priority || (operationType === 'delete' ? 'high' : 'normal')\n        }\n        break\n        \n      case 'folder':\n        operation = {\n          entityType: 'folder',\n          operationType,\n          entityId: data.id!,\n          data,\n          previousData: options?.previousData,\n          userId,\n          priority: options?.priority || (operationType === 'delete' ? 'high' : 'normal')\n        }\n        break\n        \n      case 'tag':\n        operation = {\n          entityType: 'tag',\n          operationType,\n          entityId: data.id!,\n          data,\n          previousData: options?.previousData,\n          userId,\n          priority: options?.priority || 'normal'\n        }\n        break\n        \n      case 'image':\n        operation = {\n          entityType: 'image',\n          operationType,\n          entityId: data.id!,\n          data,\n          previousData: options?.previousData,\n          userId,\n          priority: options?.priority || (operationType === 'delete' ? 'high' : 'low')\n        }\n        break\n    }\n\n    return await localOperationService.addOperation(operation)\n  }\n\n  // 获取系统状态\n  getSystemStatus(): SyncSystemStatus {\n    const networkInfo = networkMonitorService.getCurrentState()\n    const performanceMetrics = syncPerformanceOptimizer.getCurrentMetrics()\n    const queueStats = localOperationService.getQueueStats()\n\n    // 确定系统健康状态\n    let health: SyncSystemStatus['health'] = 'healthy'\n    const issues: string[] = []\n\n    if (performanceMetrics.errorRate > 0.1) {\n      health = 'critical'\n      issues.push('High error rate')\n    } else if (performanceMetrics.successRate < 0.9) {\n      health = 'degraded'\n      issues.push('Low success rate')\n    }\n\n    if (queueStats.failedOperations > 10) {\n      health = health === 'healthy' ? 'degraded' : 'critical'\n      issues.push('Multiple failed operations')\n    }\n\n    if (!networkInfo.online) {\n      health = 'degraded'\n      issues.push('Offline')\n    }\n\n    return {\n      isOnline: networkInfo.online,\n      isSyncing: this.isSyncing(),\n      lastSyncTime: this.getLastSyncTime(),\n      \n      queueSize: queueStats.totalOperations,\n      processingQueueSize: queueStats.byStatus.processing,\n      failedOperations: queueStats.byStatus.failed,\n      \n      performance: {\n        throughput: performanceMetrics.operationsPerSecond,\n        latency: performanceMetrics.averageLatency,\n        successRate: performanceMetrics.successRate,\n        memoryUsage: performanceMetrics.memoryUsage\n      },\n      \n      network: {\n        quality: networkMonitorService.getNetworkQuality(),\n        latency: networkInfo.rtt || 0,\n        bandwidth: (networkInfo.downlink || 0) * 1024 * 1024\n      },\n      \n      hasConflicts: false, // TODO: 实现冲突检测\n      conflictCount: 0,\n      \n      health,\n      issues\n    }\n  }\n\n  // 获取队列大小\n  private getQueueSize(): number {\n    try {\n      return localOperationService.getQueueStats().then(stats => stats.totalOperations)\n    } catch {\n      return 0\n    }\n  }\n\n  // 获取最后同步时间\n  private getLastSyncTime(): Date | null {\n    try {\n      return cloudSyncService.getCurrentStatus().lastSyncTime\n    } catch {\n      return null\n    }\n  }\n\n  // 检查是否应该自动同步\n  private shouldAutoSync(): boolean {\n    if (!this.config.strategy.autoSync) return false\n    if (!this.isRunning) return false\n    if (!authService.isAuthenticated()) return false\n    \n    const networkInfo = networkMonitorService.getCurrentState()\n    if (!networkInfo.online) return false\n    \n    const queueStats = localOperationService.getQueueStats()\n    if (queueStats.totalOperations < this.config.strategy.fullSyncThreshold) return false\n    \n    return true\n  }\n\n  // 检查是否正在同步\n  private isSyncing(): boolean {\n    try {\n      return cloudSyncService.getCurrentStatus().syncInProgress\n    } catch {\n      return false\n    }\n  }\n\n  // 更新系统状态\n  private updateSystemStatus(): void {\n    const status = this.getSystemStatus()\n    \n    // 检查性能警报\n    if (status.health === 'critical') {\n      this.emitEvent({\n        type: 'performance-alert',\n        timestamp: new Date(),\n        data: { status, message: 'System health is critical' }\n      })\n    }\n  }\n\n  // ============================================================================\n  // 事件系统\n  // ============================================================================\n\n  // 添加事件监听器\n  addEventListener(callback: (event: SyncEvent) => void): void {\n    this.listeners.add(callback)\n  }\n\n  // 移除事件监听器\n  removeEventListener(callback: (event: SyncEvent) => void): void {\n    this.listeners.delete(callback)\n  }\n\n  // 发送事件\n  private emitEvent(event: SyncEvent): void {\n    this.listeners.forEach(listener => {\n      try {\n        listener(event)\n      } catch (error) {\n        console.error('Error in sync event listener:', error)\n      }\n    })\n  }\n\n  // ============================================================================\n  // 配置管理\n  // ============================================================================\n\n  // 更新配置\n  updateConfig(config: Partial<SyncSystemConfig>): void {\n    this.config = { ...this.config, ...config }\n    \n    // 重新启动定时任务（如果需要）\n    if (config.strategy?.syncInterval !== undefined && this.syncTimer) {\n      clearInterval(this.syncTimer)\n      this.syncTimer = setInterval(() => {\n        if (this.shouldAutoSync()) {\n          this.triggerSync()\n        }\n      }, this.config.strategy.syncInterval)\n    }\n  }\n\n  // 获取配置\n  getConfig(): SyncSystemConfig {\n    return { ...this.config }\n  }\n\n  // ============================================================================\n  // 工具方法\n  // ============================================================================\n\n  // 获取冲突历史\n  async getConflictHistory(userId?: string): Promise<any[]> {\n    try {\n      const effectiveUserId = userId || authService.getCurrentUser()?.id\n      if (!effectiveUserId) {\n        return []\n      }\n      \n      return await syncStrategyService.getConflictHistory(effectiveUserId)\n    } catch (error) {\n      console.error('Failed to get conflict history:', error)\n      return []\n    }\n  }\n\n  // 手动解决冲突\n  async resolveConflict(\n    conflictId: string,\n    resolution: 'local' | 'remote' | 'merge' | 'manual',\n    customData?: any\n  ): Promise<void> {\n    try {\n      await syncStrategyService.manuallyResolveConflict(\n        conflictId,\n        resolution as any,\n        customData\n      )\n    } catch (error) {\n      console.error('Failed to resolve conflict:', error)\n      throw error\n    }\n  }\n\n  // 重试失败的操作\n  async retryFailedOperations(): Promise<number> {\n    try {\n      return await localOperationService.retryFailedOperations()\n    } catch (error) {\n      console.error('Failed to retry failed operations:', error)\n      return 0\n    }\n  }\n\n  // 清空队列\n  async clearQueue(): Promise<void> {\n    try {\n      await localOperationService.clearQueue()\n    } catch (error) {\n      console.error('Failed to clear queue:', error)\n      throw error\n    }\n  }\n\n  // 获取详细统计\n  async getDetailedStats(): Promise<{\n    sync: any\n    performance: PerformanceMetrics\n    network: any\n    queue: any\n  }> {\n    try {\n      const userId = authService.getCurrentUser()?.id\n      const syncStats = userId ? await syncStrategyService.getSyncStats(userId) : null\n      \n      return {\n        sync: syncStats,\n        performance: syncPerformanceOptimizer.getCurrentMetrics(),\n        network: networkMonitorService.getCurrentState(),\n        queue: await localOperationService.getQueueStats()\n      }\n    } catch (error) {\n      console.error('Failed to get detailed stats:', error)\n      throw error\n    }\n  }\n\n  // 健康检查\n  async healthCheck(): Promise<{\n    isHealthy: boolean\n    components: Record<string, boolean>\n    issues: string[]\n    recommendations: string[]\n  }> {\n    const components = { ...this.componentsReady }\n    const issues: string[] = []\n    const recommendations: string[] = []\n    \n    let isHealthy = true\n    \n    // 检查组件状态\n    for (const [component, ready] of Object.entries(components)) {\n      if (!ready) {\n        isHealthy = false\n        issues.push(`${component} is not ready`)\n        recommendations.push(`Check ${component} initialization`)\n      }\n    }\n    \n    // 检查网络状态\n    const networkInfo = networkMonitorService.getCurrentState()\n    if (!networkInfo.online) {\n      issues.push('Network is offline')\n      recommendations.push('Check network connection')\n    }\n    \n    // 检查认证状态\n    if (!authService.isAuthenticated()) {\n      issues.push('User is not authenticated')\n      recommendations.push('Please login to enable sync')\n    }\n    \n    // 检查队列状态\n    try {\n      const queueStats = await localOperationService.getQueueStats()\n      if (queueStats.failedOperations > 50) {\n        issues.push('High number of failed operations')\n        recommendations.push('Retry failed operations or check network connectivity')\n      }\n    } catch (error) {\n      issues.push('Cannot access queue status')\n      recommendations.push('Check local operation service')\n    }\n    \n    return {\n      isHealthy,\n      components,\n      issues,\n      recommendations\n    }\n  }\n\n  // 执行健康检查（简化版）\n  async performHealthCheck(): Promise<{\n    isHealthy: boolean\n    score: number\n    issues: string[]\n    timestamp: Date\n  }> {\n    const systemHealth = await this.performSystemHealthCheck()\n    \n    // 计算健康分数 (0-100)\n    let score = 100\n    const issues: string[] = []\n    \n    // 基于组件状态计算分数\n    const componentWeights = {\n      localQueue: 0.3,\n      networkMonitor: 0.2,\n      syncStrategy: 0.3,\n      performanceOptimizer: 0.2\n    }\n    \n    Object.entries(systemHealth.components).forEach(([component, health]) => {\n      if (health.status === 'critical') {\n        score -= componentWeights[component] * 50\n        issues.push(`${component}: ${health.message}`)\n      } else if (health.status === 'warning') {\n        score -= componentWeights[component] * 20\n        issues.push(`${component}: ${health.message}`)\n      } else if (health.status === 'healthy') {\n        // 无扣分\n      }\n    })\n    \n    // 基于问题数量额外扣分\n    score -= systemHealth.issues.length * 5\n    \n    // 确保分数在0-100范围内\n    score = Math.max(0, Math.min(100, score))\n    \n    const isHealthy = score >= 70 && systemHealth.isHealthy\n    \n    if (!isHealthy) {\n      console.warn(`System health check failed: score ${score}, issues: ${issues.join(', ')}`)\n    }\n    \n    return {\n      isHealthy,\n      score,\n      issues: issues.length > 0 ? issues : ['System is healthy'],\n      timestamp: new Date()\n    }\n  }\n\n  // 销毁服务\n  async destroy(): Promise<void> {\n    try {\n      await this.stop()\n      \n      // 销毁各个组件\n      if (this.config.components.localQueue) {\n        localOperationService.destroy()\n      }\n      \n      if (this.config.components.networkMonitor) {\n        networkMonitorService.destroy()\n      }\n      \n      if (this.config.components.performanceOptimizer) {\n        syncPerformanceOptimizer.destroy()\n      }\n      \n      this.listeners.clear()\n      \n      console.log('SyncIntegrationService destroyed')\n    } catch (error) {\n      console.error('Failed to destroy SyncIntegrationService:', error)\n    }\n  }\n}\n\n// 导出单例实例\nexport const syncIntegrationService = new SyncIntegrationService()\n\n// ============================================================================\n// 便利函数\n// ============================================================================\n\n// 初始化同步系统\nexport const initializeSyncSystem = async (config?: Partial<SyncSystemConfig>): Promise<SyncIntegrationService> => {\n  const service = new SyncIntegrationService(config)\n  await service.start()\n  return service\n}\n\n// 添加卡片同步操作\nexport const addCardSyncOperation = async (\n  operationType: 'create' | 'update' | 'delete',\n  card: DbCard,\n  options?: {\n    previousData?: DbCard\n    priority?: 'critical' | 'high' | 'normal' | 'low'\n  }\n): Promise<string> => {\n  return await syncIntegrationService.addSyncOperation(\n    'card',\n    operationType,\n    card,\n    options\n  )\n}\n\n// 添加文件夹同步操作\nexport const addFolderSyncOperation = async (\n  operationType: 'create' | 'update' | 'delete',\n  folder: DbFolder,\n  options?: {\n    previousData?: DbFolder\n    priority?: 'critical' | 'high' | 'normal' | 'low'\n  }\n): Promise<string> => {\n  return await syncIntegrationService.addSyncOperation(\n    'folder',\n    operationType,\n    folder,\n    options\n  )\n}\n\n// 添加标签同步操作\nexport const addTagSyncOperation = async (\n  operationType: 'create' | 'update' | 'delete',\n  tag: DbTag,\n  options?: {\n    previousData?: DbTag\n    priority?: 'critical' | 'high' | 'normal' | 'low'\n  }\n): Promise<string> => {\n  return await syncIntegrationService.addSyncOperation(\n    'tag',\n    operationType,\n    tag,\n    options\n  )\n}\n\n// 添加图片同步操作\nexport const addImageSyncOperation = async (\n  operationType: 'create' | 'update' | 'delete',\n  image: DbImage,\n  options?: {\n    previousData?: DbImage\n    priority?: 'critical' | 'high' | 'normal' | 'low'\n  }\n): Promise<string> => {\n  return await syncIntegrationService.addSyncOperation(\n    'image',\n    operationType,\n    image,\n    options\n  )\n}"],"version":3}
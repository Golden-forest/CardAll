{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\database-unified.ts","mappings":";;;;;;AAAA,kDAAoC;AAqLpC,+EAA+E;AAC/E,SAAS;AACT,+EAA+E;AAE/E,MAAM,sBAAuB,SAAQ,eAAK;IAsBxC;QACE,KAAK,CAAC,wBAAwB,CAAC,CAAA;QAtBjC,QAAQ;QACR;;;;;WAAqB;QACrB;;;;;WAAyB;QACzB;;;;;WAAmB;QACnB;;;;;WAAuB;QACvB;;;;;WAAgC;QAChC;;;;;WAA6B;QAC7B;;;;;WAA6B;QAE7B,aAAa;QACb;;;;;WAAyC;QACzC;;;;;WAQE;QAKA,oBAAoB;QACpB,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YACrB,kBAAkB;YAClB,KAAK,EAAE,yGAAyG;YAChH,OAAO,EAAE,4GAA4G;YACrH,IAAI,EAAE,wEAAwE;YAC9E,MAAM,EAAE,oGAAoG;YAE5G,SAAS;YACT,SAAS,EAAE,0FAA0F;YACrG,QAAQ,EAAE,0CAA0C;YACpD,QAAQ,EAAE,mEAAmE;YAE7E,WAAW;YACX,gBAAgB,EAAE,0EAA0E;YAC5F,cAAc,EAAE,mFAAmF;SACpG,CAAC,CAAA;QAEF,qBAAqB;QACrB,IAAI,CAAC,eAAe,EAAE,CAAA;IACxB,CAAC;IAEO,KAAK,CAAC,eAAe;QAC3B,oBAAoB;QACpB,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE;YACnC,OAAO,CAAC,GAAG,CAAC,gDAAgD,CAAC,CAAA;YAE7D,gBAAgB;YAChB,MAAM,KAAK,GAAG,IAAI,kBAAkB,EAAE,CAAA;YACtC,IAAI,CAAC;gBACH,MAAM,KAAK,CAAC,IAAI,EAAE,CAAA;gBAClB,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,CAAA;gBAEpD,OAAO;gBACP,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,CAAA;gBAC5C,MAAM,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;oBACrC,GAAG,IAAI;oBACP,MAAM,EAAE,SAAS,EAAE,SAAS;oBAC5B,SAAS,EAAE,IAAI,IAAI,EAAE;iBACtB,CAAC,CAAC,CAAA;gBACH,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;gBAElC,QAAQ;gBACR,MAAM,UAAU,GAAG,MAAM,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,CAAA;gBAChD,MAAM,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;oBAC3C,GAAG,MAAM;oBACT,MAAM,EAAE,SAAS;oBACjB,SAAS,EAAE,IAAI,IAAI,EAAE;iBACtB,CAAC,CAAC,CAAA;gBACH,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,CAAA;gBAEtC,OAAO;gBACP,MAAM,OAAO,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAA;gBAC1C,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;oBAClC,GAAG,GAAG;oBACN,MAAM,EAAE,SAAS;oBACjB,SAAS,EAAE,IAAI,IAAI,EAAE;iBACtB,CAAC,CAAC,CAAA;gBACH,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;gBAEhC,OAAO,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAA;YACjD,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,GAAG,CAAC,4CAA4C,EAAE,KAAK,CAAC,CAAA;YAClE,CAAC;QACH,CAAC,CAAC,CAAA;QAEF,wBAAwB;QACxB,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE;YACnC,OAAO,CAAC,GAAG,CAAC,uEAAuE,CAAC,CAAA;YAEpF,SAAS;YACT,MAAM,IAAI,CAAC,yBAAyB,EAAE,CAAA;YAEtC,SAAS;YACT,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAA;QACnC,CAAC,CAAC,CAAA;QAEF,yBAAyB;QACzB,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE;YACnC,OAAO,CAAC,GAAG,CAAC,qEAAqE,CAAC,CAAA;YAElF,eAAe;YACf,MAAM,IAAI,CAAC,4BAA4B,EAAE,CAAA;YAEzC,WAAW;YACX,MAAM,IAAI,CAAC,4BAA4B,EAAE,CAAA;QAC3C,CAAC,CAAC,CAAA;IACJ,CAAC;IAEO,KAAK,CAAC,yBAAyB;QACrC,MAAM,eAAe,GAAG;YACtB;gBACE,GAAG,EAAE,aAAa;gBAClB,KAAK,EAAE,QAAQ;gBACf,KAAK,EAAE,QAAiB;gBACxB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB;YACD;gBACE,GAAG,EAAE,aAAa;gBAClB,KAAK,EAAE,IAAI;gBACX,KAAK,EAAE,QAAiB;gBACxB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB;YACD;gBACE,GAAG,EAAE,kBAAkB;gBACvB,KAAK,EAAE;oBACL,OAAO,EAAE,IAAI;oBACb,OAAO,EAAE,GAAG;oBACZ,QAAQ,EAAE,IAAI;oBACd,SAAS,EAAE,IAAI;oBACf,MAAM,EAAE,MAAM;iBACf;gBACD,KAAK,EAAE,QAAiB;gBACxB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB;YACD;gBACE,GAAG,EAAE,iBAAiB;gBACtB,KAAK,EAAE,OAAO;gBACd,KAAK,EAAE,QAAiB;gBACxB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB;SACF,CAAA;QAED,KAAK,MAAM,OAAO,IAAI,eAAe,EAAE,CAAC;YACtC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CAAA;YAC3E,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;YAClC,CAAC;QACH,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,oBAAoB;QAChC,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAA;QAC3C,kBAAkB;IACpB,CAAC;IAED,+EAA+E;IAC/E,cAAc;IACd,+EAA+E;IAE/E;;OAEG;IACK,KAAK,CAAC,4BAA4B;QACxC,OAAO,CAAC,GAAG,CAAC,qCAAqC,CAAC,CAAA;QAElD,iBAAiB;QACjB,MAAM,eAAe,GAAG;YACtB;gBACE,GAAG,EAAE,mBAAmB;gBACxB,KAAK,EAAE;oBACL,OAAO,EAAE,IAAI;oBACb,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,OAAO;oBACjC,UAAU,EAAE,EAAE;oBACd,WAAW,EAAE,IAAI;iBAClB;gBACD,KAAK,EAAE,QAAiB;gBACxB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB;YACD;gBACE,GAAG,EAAE,oBAAoB;gBACzB,KAAK,EAAE;oBACL,OAAO,EAAE,IAAI;oBACb,SAAS,EAAE,WAAW;oBACtB,SAAS,EAAE,IAAI,EAAE,WAAW;oBAC5B,OAAO,EAAE,GAAG;iBACb;gBACD,KAAK,EAAE,QAAiB;gBACxB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB;YACD;gBACE,GAAG,EAAE,sBAAsB;gBAC3B,KAAK,EAAE;oBACL,IAAI,EAAE,EAAE;oBACR,OAAO,EAAE,GAAG,CAAC,QAAQ;iBACtB;gBACD,KAAK,EAAE,QAAiB;gBACxB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB;SACF,CAAA;QAED,KAAK,MAAM,OAAO,IAAI,eAAe,EAAE,CAAC;YACtC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CAAA;YAC3E,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;YAClC,CAAC;QACH,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,4BAA4B;QACxC,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC;gBAChD,YAAY,EAAE,IAAI;gBAClB,cAAc,EAAE,IAAI;gBACpB,WAAW,EAAE,IAAI;gBACjB,eAAe,EAAE,IAAI;gBACrB,aAAa,EAAE,KAAK,CAAC,mBAAmB;aACzC,CAAC,CAAA;YAEF,OAAO,CAAC,GAAG,CAAC,mCAAmC,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAA;QAC/D,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,4CAA4C,EAAE,KAAK,CAAC,CAAA;QACpE,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,qBAAqB,CAAC,UAOxB,EAAE;QACJ,MAAM,EACJ,YAAY,GAAG,IAAI,EACnB,cAAc,GAAG,IAAI,EACrB,WAAW,GAAG,IAAI,EAClB,aAAa,GAAG,KAAK,EACrB,eAAe,GAAG,IAAI,EACtB,MAAM,EACP,GAAG,OAAO,CAAA;QAEX,MAAM,UAAU,GAAG,MAAM,CAAC,UAAU,EAAE,CAAA;QACtC,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAA;QAE5B,OAAO;QACP,MAAM,IAAI,GAAQ,EAAE,CAAA;QACpB,IAAI,SAAS,GAAG,CAAC,CAAA;QAEjB,IAAI,YAAY,EAAE,CAAC;YACjB,IAAI,CAAC,KAAK,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAA;YACvC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAA;QAChD,CAAC;QAED,IAAI,cAAc,EAAE,CAAC;YACnB,IAAI,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAA;YAC3C,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAA;QAClD,CAAC;QAED,IAAI,WAAW,EAAE,CAAC;YAChB,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAA;YACrC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAA;QAC/C,CAAC;QAED,IAAI,aAAa,EAAE,CAAC;YAClB,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAA;YACzC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAA;QACjD,CAAC;QAED,IAAI,eAAe,EAAE,CAAC;YACpB,IAAI,CAAC,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAA;YAC7C,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAA;QACnD,CAAC;QAED,SAAS;QACT,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAA;QAEnD,SAAS;QACT,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAA;QAC7C,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,EAAE,CAAA;QAEjD,MAAM,QAAQ,GAAoB;YAChC,EAAE,EAAE,UAAU;YACd,SAAS;YACT,OAAO,EAAE,OAAO;YAChB,MAAM;YACN,QAAQ;YACR,QAAQ,EAAE,SAAS;YACnB,cAAc,EAAE,SAAS,EAAE,QAAQ;YACnC,QAAQ,EAAE;gBACR,KAAK,EAAE,YAAY;gBACnB,OAAO,EAAE,cAAc;gBACvB,IAAI,EAAE,WAAW;gBACjB,MAAM,EAAE,aAAa;gBACrB,QAAQ,EAAE,eAAe;aAC1B;YACD,QAAQ,EAAE;gBACR,UAAU;gBACV,aAAa,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS;gBACtD,YAAY,EAAG,SAAiB,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS;gBACvE,YAAY;aACb;SACF,CAAA;QAED,MAAM,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;QAEzC,OAAO,QAAQ,CAAA;IACjB,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,iBAAiB,CAAC,IAAS;QACvC,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;QACvC,MAAM,OAAO,GAAG,IAAI,WAAW,EAAE,CAAA;QACjC,MAAM,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,CAAA;QAC7C,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,UAAU,CAAC,CAAA;QACpE,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,UAAU,CAAC,CAAC,CAAA;QACxD,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;IACrE,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,aAAa;QACzB,MAAM,IAAI,GAAG;YACX,SAAS,EAAE,SAAS,CAAC,SAAS;YAC9B,QAAQ,EAAE,SAAS,CAAC,QAAQ;YAC5B,QAAQ,EAAE,SAAS,CAAC,QAAQ;YAC5B,YAAY,EAAG,SAAiB,CAAC,YAAY;YAC7C,mBAAmB,EAAE,SAAS,CAAC,mBAAmB;YAClD,gBAAgB,EAAE,GAAG,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,MAAM,EAAE;YACpD,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAA;QACD,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;IAC7B,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,eAAe;QAC3B,IAAI,CAAC;YACH,IAAI,SAAS,IAAI,SAAS,IAAI,UAAU,IAAK,SAAiB,CAAC,OAAO,EAAE,CAAC;gBACvE,MAAM,QAAQ,GAAG,MAAO,SAAiB,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAA;gBAC5D,OAAO;oBACL,IAAI,EAAE,QAAQ,CAAC,KAAK,IAAI,CAAC;oBACzB,KAAK,EAAE,QAAQ,CAAC,KAAK,IAAI,CAAC;iBAC3B,CAAA;YACH,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,IAAI,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAA;QACrD,CAAC;QAED,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAA;IAC9B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,sBAAsB,CAAC,UAAkB;QAC7C,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAA;YAC5D,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACd,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAA;YACvC,CAAC;YAED,UAAU;YACV,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAA;YACnD,IAAI,WAAW,KAAK,QAAQ,CAAC,QAAQ,EAAE,CAAC;gBACtC,OAAO,CAAC,GAAG,CAAC,kDAAkD,CAAC,CAAA;gBAC/D,OAAO,IAAI,CAAA;YACb,CAAC;YAED,OAAO;YACP,IAAI,QAAQ,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;gBAC5B,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAA;gBAC9C,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAA;gBACxB,iBAAiB;gBACjB,0BAA0B;YAC5B,CAAC;YAED,IAAI,QAAQ,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;gBAC9B,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAA;gBAClD,MAAM,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAA;gBAC1B,UAAU;YACZ,CAAC;YAED,IAAI,QAAQ,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;gBAC3B,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAA;gBAC5C,MAAM,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAA;gBACvB,SAAS;YACX,CAAC;YAED,IAAI,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;gBAC/B,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAA;gBACpD,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAA;gBAC3B,SAAS;YACX,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,yCAAyC,EAAE,UAAU,CAAC,CAAA;YAClE,OAAO,IAAI,CAAA;QACb,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,qCAAqC,EAAE,KAAK,CAAC,CAAA;YAC3D,OAAO,KAAK,CAAA;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,kBAAkB;QAC9B,MAAM,IAAI,GAAG;YACX,KAAK,EAAE,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;YACjC,OAAO,EAAE,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;YACrC,IAAI,EAAE,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YAC/B,QAAQ,EAAE,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE;SACxC,CAAA;QACD,OAAO,MAAM,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAA;IAC3C,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,kBAAkB;QAKtB,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAA;QACtB,IAAI,gBAAgB,GAAG,CAAC,CAAA;QACxB,IAAI,cAAc,GAAG,CAAC,CAAA;QACtB,IAAI,UAAU,GAAG,CAAC,CAAA;QAElB,IAAI,CAAC;YACH,SAAS;YACT,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAA;YACtE,MAAM,aAAa,GAAG,gBAAgB,EAAE,IAAI,IAAI,EAAE,CAAA;YAClD,MAAM,SAAS,GAAG,gBAAgB,EAAE,OAAO,IAAI,GAAG,CAAA;YAClD,MAAM,UAAU,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAA;YAEhF,SAAS;YACT,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,gBAAgB;iBACjD,KAAK,CAAC,WAAW,CAAC;iBAClB,KAAK,CAAC,UAAU,CAAC;iBACjB,OAAO,EAAE,CAAA;YAEZ,KAAK,MAAM,QAAQ,IAAI,gBAAgB,EAAE,CAAC;gBACxC,UAAU,IAAI,QAAQ,CAAC,QAAQ,CAAA;gBAC/B,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAG,CAAC,CAAA;gBAChD,gBAAgB,EAAE,CAAA;YACpB,CAAC;YAED,SAAS;YACT,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,cAAc;iBAC7C,KAAK,CAAC,WAAW,CAAC;iBAClB,KAAK,CAAC,UAAU,CAAC;iBACjB,OAAO,EAAE,CAAA;YAEZ,KAAK,MAAM,MAAM,IAAI,cAAc,EAAE,CAAC;gBACpC,UAAU,IAAI,MAAM,CAAC,IAAI,CAAA;gBACzB,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC,EAAG,CAAC,CAAA;gBAC5C,cAAc,EAAE,CAAA;YAClB,CAAC;YAED,wBAAwB;YACxB,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,OAAO,EAAE,CAAC,OAAO,EAAE,CAAA;YAC7F,IAAI,SAAS,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAA;YAExE,OAAO,SAAS,GAAG,SAAS,GAAG,IAAI,GAAG,IAAI,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC1E,MAAM,cAAc,GAAG,gBAAgB,CAAC,GAAG,EAAE,CAAA;gBAC7C,IAAI,cAAc,EAAE,CAAC;oBACnB,UAAU,IAAI,cAAc,CAAC,QAAQ,CAAA;oBACrC,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,cAAc,CAAC,EAAG,CAAC,CAAA;oBACtD,gBAAgB,EAAE,CAAA;oBAClB,SAAS,IAAI,cAAc,CAAC,QAAQ,CAAA;gBACtC,CAAC;YACH,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,mCAAmC,gBAAgB,eAAe,cAAc,aAAa,UAAU,cAAc,CAAC,CAAA;YAElI,OAAO;gBACL,gBAAgB;gBAChB,cAAc;gBACd,UAAU;aACX,CAAA;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAA;YACvD,OAAO;gBACL,gBAAgB,EAAE,CAAC;gBACnB,cAAc,EAAE,CAAC;gBACjB,UAAU,EAAE,CAAC;aACd,CAAA;QACH,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,qBAAqB;QACzB,IAAI,CAAC;YACH,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAA;YAC/D,IAAI,CAAC,YAAY,EAAE,OAAO,EAAE,CAAC;gBAC3B,OAAO,KAAK,CAAA;YACd,CAAC;YAED,WAAW;YACX,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,CAAA;YACrF,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAA;YAEtB,IAAI,UAAU,EAAE,CAAC;gBACf,MAAM,mBAAmB,GAAG,GAAG,CAAC,OAAO,EAAE,GAAG,UAAU,CAAC,SAAS,CAAC,OAAO,EAAE,CAAA;gBAC1E,IAAI,mBAAmB,GAAG,YAAY,CAAC,QAAQ,EAAE,CAAC;oBAChD,OAAO,KAAK,CAAA,CAAC,UAAU;gBACzB,CAAC;YACH,CAAC;YAED,SAAS;YACT,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC;gBAChD,YAAY,EAAE,IAAI;gBAClB,cAAc,EAAE,IAAI;gBACpB,WAAW,EAAE,IAAI;gBACjB,aAAa,EAAE,KAAK,EAAE,aAAa;gBACnC,eAAe,EAAE,IAAI;aACtB,CAAC,CAAA;YAEF,QAAQ;YACR,MAAM,UAAU,GAAG,YAAY,CAAC,UAAU,IAAI,EAAE,CAAA;YAChD,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,OAAO,EAAE,CAAC,OAAO,EAAE,CAAA;YAEzF,IAAI,YAAY,CAAC,MAAM,GAAG,UAAU,EAAE,CAAC;gBACrC,MAAM,iBAAiB,GAAG,YAAY,CAAC,KAAK,CAAC,UAAU,CAAC,CAAA;gBACxD,KAAK,MAAM,QAAQ,IAAI,iBAAiB,EAAE,CAAC;oBACzC,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAG,CAAC,CAAA;gBAClD,CAAC;YACH,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAA;YAClD,OAAO,IAAI,CAAA;QACb,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAA;YAC3C,OAAO,KAAK,CAAA;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,mBAAmB;QAOvB,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAA;QACvD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAA;QAEnD,MAAM,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;YACjD,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAA;QAE7D,MAAM,UAAU,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YACvC,SAAS,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;YACtG,SAAS,CAAA;QAEX,MAAM,YAAY,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YACzC,SAAS,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;YACtG,SAAS,CAAA;QAEX,OAAO;YACL,SAAS,EAAE,SAAS,CAAC,MAAM;YAC3B,OAAO,EAAE,OAAO,CAAC,MAAM;YACvB,SAAS;YACT,UAAU;YACV,YAAY;SACb,CAAA;IACH,CAAC;IAED,+EAA+E;IAC/E,cAAc;IACd,+EAA+E;IAE/E,oBAAoB;IACpB,KAAK,CAAC,UAAU,CAAC,GAAW,EAAE,MAAe;QAC3C,YAAY;QACZ,IAAI,MAAM,EAAE,CAAC;YACX,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,QAAQ;iBACpC,KAAK,CAAC,aAAa,CAAC;iBACpB,MAAM,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;iBACrB,KAAK,EAAE,CAAA;YACV,IAAI,WAAW;gBAAE,OAAO,WAAW,CAAC,KAAK,CAAA;QAC3C,CAAC;QAED,SAAS;QACT,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,QAAQ;aACtC,KAAK,CAAC,aAAa,CAAC;aACpB,MAAM,CAAC,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;aACvB,KAAK,EAAE,CAAA;QACV,OAAO,aAAa,EAAE,KAAK,CAAA;IAC7B,CAAC;IAED,OAAO;IACP,KAAK,CAAC,aAAa,CAAC,GAAW,EAAE,KAAU,EAAE,QAA2B,QAAQ,EAAE,MAAe;QAC/F,MAAM,OAAO,GAAQ;YACnB,KAAK;YACL,SAAS,EAAE,IAAI,IAAI,EAAE;SACtB,CAAA;QACD,IAAI,MAAM,EAAE,CAAC;YACX,OAAO,CAAC,MAAM,GAAG,MAAM,CAAA;QACzB,CAAC;QACD,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA;IAC/E,CAAC;IAED,YAAY;IACZ,KAAK,CAAC,QAAQ;QACZ,MAAM,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YACpE,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE;YAClB,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;YACpB,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACjB,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE;YACnB,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE;SACvB,CAAC,CAAA;QAEF,cAAc;QACd,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAA;QAEjD,OAAO;YACL,KAAK;YACL,OAAO;YACP,IAAI;YACJ,MAAM;YACN,WAAW;YACX,SAAS;YACT,OAAO,EAAE,OAAO;SACjB,CAAA;IACH,CAAC;IAEO,KAAK,CAAC,kBAAkB;QAC9B,aAAa;QACb,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAA;QAC1C,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,KAAK,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAA;IACxE,CAAC;IAED,UAAU;IACV,KAAK,CAAC,UAAU,CAAC,QAA0E,EAAE,MAAe;QAC1G,MAAM,EAAE,GAAG,MAAM,CAAC,UAAU,EAAE,CAAA;QAC9B,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAA;QAEtB,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;YACnB,GAAG,QAAQ;YACX,EAAE;YACF,MAAM;YACN,WAAW,EAAE,CAAC;YACd,WAAW,EAAE,IAAI;YACjB,SAAS,EAAE,GAAG;SACf,CAAC,CAAA;QAEF,OAAO,EAAE,CAAA;IACX,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,EAAU,EAAE,OAAwB;QACnD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,EAAE;YACzC,GAAG,OAAO;YACV,WAAW,EAAE,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS;YACtE,WAAW,EAAE,IAAI;YACjB,SAAS,EAAE,IAAI,IAAI,EAAE;SACtB,CAAC,CAAA;QAEF,OAAO,MAAM,CAAA;IACf,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,EAAU;QACzB,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,KAAK,IAAI,EAAE;YACjE,SAAS;YACT,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,EAAE,CAAA;YACrD,OAAO;YACP,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;QAC7B,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,SAAS;IACT,KAAK,CAAC,eAAe,CAAC,SAA6E,EAAE,MAAe;QAClH,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAA;QACtB,MAAM,KAAK,GAAG,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YACvC,GAAG,QAAQ;YACX,EAAE,EAAE,MAAM,CAAC,UAAU,EAAE;YACvB,MAAM;YACN,WAAW,EAAE,CAAC;YACd,WAAW,EAAE,IAAI;YACjB,SAAS,EAAE,GAAG;SACf,CAAC,CAAC,CAAA;QAEH,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;QAC/B,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAG,CAAC,CAAA;IACpC,CAAC;IAED,YAAY;IACZ,KAAK,CAAC,gBAAgB,CAAC,QAAgB,EAAE,MAAe;QACtD,OAAO,MAAM,IAAI,CAAC,KAAK;aACpB,KAAK,CAAC,mBAAmB,CAAC;aAC1B,MAAM,CAAC,CAAC,MAAM,IAAI,SAAS,EAAE,QAAQ,CAAC,CAAC;aACvC,OAAO,EAAE,CAAA;IACd,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,UAAkB,EAAE,MAAe;QACnD,MAAM,WAAW,GAAG,UAAU,CAAC,WAAW,EAAE,CAAA;QAC5C,OAAO,MAAM,IAAI,CAAC,KAAK;aACpB,MAAM,CAAC,IAAI,CAAC,EAAE,CACb,IAAI,CAAC,YAAY,EAAE,QAAQ,CAAC,WAAW,CAAC;YACxC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,WAAW,CAAC;YAC3D,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,WAAW,CAAC;YAC1D,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,WAAW,CAAC;YAC1D,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,WAAW,CAAC,CAC1D;aACA,OAAO,EAAE,CAAA;IACd,CAAC;IAED,WAAW;IACX,KAAK,CAAC,OAAO;QACX,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,IAAI,EAAE;YAC1G,YAAY;YACZ,MAAM,WAAW,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAA,CAAC,MAAM;YACzE,MAAM,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,MAAM,EAAE,CAAA;YAEnE,oBAAoB;YACpB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC,WAAW,EAAE,CAAA;YAC7D,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,OAAmB,CAAC,CAAC,MAAM,EAAE,CAAA;YAEtE,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAA;QAC3C,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,UAAU;IACV,KAAK,CAAC,WAAW;QAKf,MAAM,MAAM,GAAa,EAAE,CAAA;QAE3B,IAAI,CAAC;YACH,oBAAoB;YACpB,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAA;YAExB,UAAU;YACV,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAA;YAEnC,eAAe;YACf,IAAI,KAAK,CAAC,WAAW,GAAG,IAAI,EAAE,CAAC;gBAC7B,MAAM,CAAC,IAAI,CAAC,2CAA2C,KAAK,CAAC,WAAW,EAAE,CAAC,CAAA;YAC7E,CAAC;YAED,UAAU;YACV,IAAI,KAAK,CAAC,SAAS,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,EAAE,CAAC,CAAC,QAAQ;gBACjD,MAAM,CAAC,IAAI,CAAC,2BAA2B,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA;YACzF,CAAC;YAED,OAAO;gBACL,SAAS,EAAE,MAAM,CAAC,MAAM,KAAK,CAAC;gBAC9B,MAAM;gBACN,KAAK;aACN,CAAA;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO;gBACL,SAAS,EAAE,KAAK;gBAChB,MAAM,EAAE,CAAC,+BAA+B,KAAK,EAAE,CAAC;gBAChD,KAAK,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE;aACpG,CAAA;QACH,CAAC;IACH,CAAC;IAED,gBAAgB;IAChB,KAAK,CAAC,QAAQ;QACZ,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,IAAI,EAAE;YACxI,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAA;YACxB,MAAM,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAA;YAC1B,MAAM,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAA;YACvB,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAA;YACzB,MAAM,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAA;YAC5B,eAAe;YACf,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAA;QAC7B,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,+EAA+E;IAC/E,sBAAsB;IACtB,+EAA+E;IAE/E,uBAAuB;IACvB,KAAK,CAAC,gBAAgB,CAAC,GAAW;QAChC,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAA;IACnC,CAAC;IAED,0BAA0B;IAC1B,KAAK,CAAC,mBAAmB,CAAC,GAAW,EAAE,KAAU;QAC/C,MAAM,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;IACtC,CAAC;IAED,qBAAqB;IACrB,KAAK,CAAC,cAAc;QAClB,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,IAAI,EAAE;YAC1G,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAA;YACxB,MAAM,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAA;YAC1B,MAAM,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAA;YACvB,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAA;YACzB,MAAM,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAA;QAC9B,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,qBAAqB;IACrB,KAAK,CAAC,cAAc;QAOlB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAA;QACnC,OAAO;YACL,KAAK,EAAE,KAAK,CAAC,KAAK;YAClB,OAAO,EAAE,KAAK,CAAC,OAAO;YACtB,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,MAAM,EAAE,KAAK,CAAC,MAAM;YACpB,WAAW,EAAE,KAAK,CAAC,WAAW;SAC/B,CAAA;IACH,CAAC;CACF;AAED,+EAA+E;AAC/E,SAAS;AACT,+EAA+E;AAE/E,gBAAgB;AAChB,MAAM,kBAAmB,SAAQ,eAAK;IAQpC;QACE,KAAK,CAAC,iBAAiB,CAAC,CAAA;QAR1B;;;;;WAAkB;QAClB;;;;;WAAoB;QACpB;;;;;WAAiB;QACjB;;;;;WAAmB;QACnB;;;;;WAAsB;QACtB;;;;;WAAqB;QAInB,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YACrB,KAAK,EAAE,gEAAgE;YACvE,OAAO,EAAE,gEAAgE;YACzE,IAAI,EAAE,iDAAiD;YACvD,MAAM,EAAE,6DAA6D;YACrE,SAAS,EAAE,qDAAqD;YAChE,QAAQ,EAAE,sBAAsB;SACjC,CAAC,CAAA;IACJ,CAAC;CACF;AAED,UAAU;AACG,QAAA,EAAE,GAAG,IAAI,sBAAsB,EAAE,CAAA;AAE9C,SAAS;AACF,MAAM,kBAAkB,GAAG,KAAK,IAAmB,EAAE;IAC1D,IAAI,CAAC;QACH,MAAM,UAAE,CAAC,IAAI,EAAE,CAAA;QACf,OAAO,CAAC,GAAG,CAAC,mDAAmD,CAAC,CAAA;QAEhE,SAAS;QACT,MAAM,MAAM,GAAG,MAAM,UAAE,CAAC,WAAW,EAAE,CAAA;QACrC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;YACtB,OAAO,CAAC,IAAI,CAAC,kCAAkC,EAAE,MAAM,CAAC,MAAM,CAAC,CAAA;QACjE,CAAC;QAED,OAAO;QACP,WAAW,CAAC,GAAG,EAAE;YACf,UAAE,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;QACnC,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAA,CAAC,SAAS;IAEnC,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAA;QACtD,MAAM,KAAK,CAAA;IACb,CAAC;AACH,CAAC,CAAA;AApBY,QAAA,kBAAkB,sBAoB9B;AAED,UAAU;AACV,UAAE,CAAC,EAAE,CAAC,eAAe,EAAE,CAAC,KAAK,EAAE,EAAE;IAC/B,OAAO,CAAC,IAAI,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAA;AAClD,CAAC,CAAC,CAAA;AAEF,UAAE,CAAC,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;IACpB,OAAO,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAA;AAC5C,CAAC,CAAC,CAAA;AAEF,UAAE,CAAC,EAAE,CAAC,eAAe,EAAE,GAAG,EAAE;IAC1B,OAAO,CAAC,IAAI,CAAC,6CAA6C,CAAC,CAAA;IAC3D,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAA;AAC1B,CAAC,CAAC,CAAA;AAEF,UAAE,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;IAClB,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAA;AAClC,CAAC,CAAC,CAAA;AAEF,+EAA+E;AAC/E,SAAS;AACT,+EAA+E;AAE/E,SAAS;AACF,MAAM,eAAe,GAAG,CAAC,IAAU,EAAE,MAAe,EAAU,EAAE;IACrE,OAAO;QACL,GAAG,IAAI;QACP,MAAM;QACN,WAAW,EAAE,CAAC;QACd,WAAW,EAAE,IAAI;QACjB,SAAS,EAAE,IAAI,IAAI,EAAE;KACtB,CAAA;AACH,CAAC,CAAA;AARY,QAAA,eAAe,mBAQ3B;AAEM,MAAM,iBAAiB,GAAG,CAAC,MAAc,EAAQ,EAAE;IACxD,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,GAAG,IAAI,EAAE,GAAG,MAAM,CAAA;IACxE,OAAO;QACL,GAAG,IAAI;QACP,EAAE,EAAE,IAAI,CAAC,EAAE,IAAI,EAAE;QACjB,SAAS,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;QACnC,SAAS,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;KACpC,CAAA;AACH,CAAC,CAAA;AARY,QAAA,iBAAiB,qBAQ7B;AAED,SAAS;AACF,MAAM,oBAAoB,GAAG,CAAC,IAAU,EAAU,EAAE;IACzD,MAAM,cAAc,GAAG;QACrB,IAAI,CAAC,YAAY,CAAC,KAAK;QACvB,IAAI,CAAC,YAAY,CAAC,IAAI;QACtB,IAAI,CAAC,WAAW,CAAC,KAAK;QACtB,IAAI,CAAC,WAAW,CAAC,IAAI;QACrB,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI;QACzB,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI;KACzB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAA;IAEzB,OAAO,cAAc,CAAA;AACvB,CAAC,CAAA;AAXY,QAAA,oBAAoB,wBAWhC;AAED,SAAS;AACF,MAAM,cAAc,GAAG,KAAK,EACjC,KAAU,EACV,YAAoB,GAAG,EACvB,SAAwC,EACzB,EAAE;IACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,SAAS,EAAE,CAAC;QACjD,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,CAAA;QAC3C,MAAM,SAAS,CAAC,KAAK,CAAC,CAAA;IACxB,CAAC;AACH,CAAC,CAAA;AATY,QAAA,cAAc,kBAS1B;AAED,SAAS;AACF,MAAM,gBAAgB,GAAG,CAAC,IAAmB,EAAY,EAAE;IAChE,MAAM,MAAM,GAAa,EAAE,CAAA;IAE3B,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,KAAK,EAAE,CAAC;QAC9B,MAAM,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAA;IAChD,CAAC;IAED,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,EAAE,CAAC;QAC7B,MAAM,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAA;IAC/C,CAAC;IAED,IAAI,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,OAAO,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;QAC5E,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAA;IACxC,CAAC;IAED,OAAO,MAAM,CAAA;AACf,CAAC,CAAA;AAhBY,QAAA,gBAAgB,oBAgB5B;AAED,+EAA+E;AAC/E,UAAU;AACV,+EAA+E;AAE/E,UAAU;AACV,MAAM,UAAU,GAAG,IAAI,GAAG,EAA4C,CAAA;AACtE,MAAM,SAAS,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAA,CAAC,QAAQ;AAEjC,MAAM,WAAW,GAAG,KAAK,EAC9B,GAAW,EACX,KAAuB,EACX,EAAE;IACd,MAAM,MAAM,GAAG,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;IAClC,IAAI,MAAM,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,MAAM,CAAC,SAAS,GAAG,SAAS,EAAE,CAAC;QACxD,OAAO,MAAM,CAAC,IAAI,CAAA;IACpB,CAAC;IAED,MAAM,IAAI,GAAG,MAAM,KAAK,EAAE,CAAA;IAC1B,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CAAA;IACpD,OAAO,IAAI,CAAA;AACb,CAAC,CAAA;AAZY,QAAA,WAAW,eAYvB;AAED,OAAO;AACA,MAAM,eAAe,GAAG,GAAS,EAAE;IACxC,UAAU,CAAC,KAAK,EAAE,CAAA;AACpB,CAAC,CAAA;AAFY,QAAA,eAAe,mBAE3B;AAED,WAAW;AACX,WAAW,CAAC,GAAG,EAAE;IACf,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;IACtB,UAAU,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;QAChC,IAAI,GAAG,GAAG,KAAK,CAAC,SAAS,GAAG,SAAS,EAAE,CAAC;YACtC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;QACxB,CAAC;IACH,CAAC,CAAC,CAAA;AACJ,CAAC,EAAE,SAAS,CAAC,CAAA","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\database-unified.ts"],"sourcesContent":["import Dexie, { Table } from 'dexie'\nimport { Card, Folder, Tag, ImageData } from '@/types/card'\n\n// ============================================================================\n// 统一数据库类型定义 - 解决数据库架构统一\n// ============================================================================\n\n// 基础同步接口\nexport interface SyncableEntity {\n  id?: string\n  userId?: string\n  syncVersion: number\n  lastSyncAt?: Date\n  pendingSync: boolean\n  updatedAt: Date\n}\n\n// 扩展的数据库卡片实体\nexport interface DbCard extends Omit<Card, 'id'>, SyncableEntity {\n  id?: string\n  // 保持向后兼容的字段\n  folderId?: string\n  // 新增字段用于优化查询\n  searchVector?: string // 全文搜索优化\n  thumbnailUrl?: string // 卡片缩略图\n}\n\n// 扩展的数据库文件夹实体\nexport interface DbFolder extends Omit<Folder, 'id'>, SyncableEntity {\n  id?: string\n  // 新增字段用于优化查询\n  fullPath?: string // 完整路径用于快速查找\n  depth?: number // 文件夹深度\n}\n\n// 扩展的数据库标签实体\nexport interface DbTag extends Omit<Tag, 'id'>, SyncableEntity {\n  id?: string\n  // 保持向后兼容\n  count: number\n}\n\n// 图片存储实体 - 统一图片管理\nexport interface DbImage {\n  id?: string\n  cardId: string\n  userId?: string\n  fileName: string\n  filePath: string\n  cloudUrl?: string\n  thumbnailPath?: string\n  metadata: {\n    originalName: string\n    size: number\n    width: number\n    height: number\n    format: string\n    compressed: boolean\n    quality?: number\n  }\n  storageMode: 'indexeddb' | 'filesystem' | 'cloud'\n  createdAt: Date\n  updatedAt: Date\n  syncVersion: number\n  lastSyncAt?: Date\n  pendingSync: boolean\n}\n\n// 同步操作队列 - 统一同步逻辑\nexport interface SyncOperation {\n  id?: string\n  type: 'create' | 'update' | 'delete'\n  entity: 'card' | 'folder' | 'tag' | 'image'\n  entityId: string\n  userId?: string\n  data?: any\n  timestamp: Date\n  retryCount: number\n  maxRetries: number\n  error?: string\n  priority: 'high' | 'normal' | 'low'\n}\n\n// 应用设置 - 统一配置管理\nexport interface AppSettings {\n  id?: string\n  key: string\n  value: any\n  updatedAt: Date\n  scope: 'user' | 'global' // 设置作用域\n}\n\n// 用户会话信息\nexport interface UserSession {\n  id?: string\n  userId: string\n  deviceId: string\n  token?: string\n  expiresAt?: Date\n  lastActivity: Date\n  isActive: boolean\n}\n\n// 数据库统计信息\nexport interface DatabaseStats {\n  cards: number\n  folders: number\n  tags: number\n  images: number\n  pendingSync: number\n  totalSize: number\n  lastBackup?: Date\n  version: string\n}\n\n// 向后兼容的旧接口（保持现有代码不中断）\nexport interface LegacySyncOperation {\n  id?: string\n  type: 'create' | 'update' | 'delete'\n  table: 'cards' | 'folders' | 'tags' | 'images'\n  data?: any\n  localId: string\n  timestamp: Date\n  retryCount: number\n  maxRetries: number\n  error?: string\n}\n\n// ============================================================================\n// 离线数据持久化增强接口\n// ============================================================================\n\n// 离线状态快照\nexport interface OfflineSnapshot {\n  id: string\n  timestamp: Date\n  version: string\n  userId?: string\n  dataHash: string\n  dataSize: number\n  compressedSize: number\n  includes: {\n    cards: boolean\n    folders: boolean\n    tags: boolean\n    images: boolean\n    settings: boolean\n  }\n  metadata: {\n    deviceInfo: string\n    networkStatus: string\n    batteryLevel?: number\n    storageQuota: {\n      used: number\n      total: number\n    }\n  }\n}\n\n// 离线数据压缩配置\nexport interface OfflineCompressionConfig {\n  enabled: boolean\n  algorithm: 'gzip' | 'lz-string' | 'custom'\n  threshold: number // 压缩阈值（字节）\n  quality: number // 压缩质量（0-1）\n  excludePatterns: string[] // 不压缩的数据模式\n}\n\n// 离线备份策略\nexport interface OfflineBackupStrategy {\n  autoBackup: boolean\n  interval: number // 备份间隔（毫秒）\n  maxBackups: number\n  compressionEnabled: boolean\n  encryptionEnabled: boolean\n  retentionPolicy: {\n    days: number\n    maxSize: number // MB\n  }\n}\n\n// ============================================================================\n// 统一数据库类\n// ============================================================================\n\nclass CardAllUnifiedDatabase extends Dexie {\n  // 数据表定义\n  cards!: Table<DbCard>\n  folders!: Table<DbFolder>\n  tags!: Table<DbTag>\n  images!: Table<DbImage>\n  syncQueue!: Table<SyncOperation>\n  settings!: Table<AppSettings>\n  sessions!: Table<UserSession>\n  \n  // 离线数据持久化增强表\n  offlineSnapshots!: Table<OfflineSnapshot>\n  offlineBackups!: Table<{\n    id?: string\n    snapshotId: string\n    data: Blob\n    compression: string\n    encrypted: boolean\n    createdAt: Date\n    size: number\n  }>\n\n  constructor() {\n    super('CardAllUnifiedDatabase')\n    \n    // 版本 4: 添加离线数据持久化功能\n    this.version(4).stores({\n      // 核心实体表 - 优化的索引设计\n      cards: '++id, userId, folderId, createdAt, updatedAt, syncVersion, pendingSync, [userId+folderId], searchVector',\n      folders: '++id, userId, parentId, createdAt, updatedAt, syncVersion, pendingSync, [userId+parentId], fullPath, depth',\n      tags: '++id, userId, name, createdAt, syncVersion, pendingSync, [userId+name]',\n      images: '++id, cardId, userId, createdAt, updatedAt, syncVersion, pendingSync, storageMode, [cardId+userId]',\n      \n      // 同步和设置表\n      syncQueue: '++id, type, entity, entityId, userId, timestamp, retryCount, priority, [userId+priority]',\n      settings: '++id, key, updatedAt, scope, [key+scope]',\n      sessions: '++id, userId, deviceId, lastActivity, isActive, [userId+deviceId]',\n      \n      // 离线数据持久化表\n      offlineSnapshots: '++id, timestamp, userId, version, dataHash, dataSize, [userId+timestamp]',\n      offlineBackups: '++id, snapshotId, createdAt, compression, encrypted, size, [snapshotId+createdAt]'\n    })\n\n    // 数据库升级逻辑 - 支持从旧版本迁移\n    this.upgradeDatabase()\n  }\n\n  private async upgradeDatabase(): Promise<void> {\n    // 版本 1 -> 2: 添加用户支持\n    this.version(2).upgrade(async (tx) => {\n      console.log('Upgrading to version 2: Adding user support...')\n      \n      // 检查是否需要从旧数据库迁移\n      const oldDb = new CardAllDatabase_v1()\n      try {\n        await oldDb.open()\n        console.log('Found old database, migrating data...')\n        \n        // 迁移卡片\n        const oldCards = await oldDb.cards.toArray()\n        const newCards = oldCards.map(card => ({\n          ...card,\n          userId: 'default', // 设置默认用户\n          updatedAt: new Date()\n        }))\n        await this.cards.bulkAdd(newCards)\n        \n        // 迁移文件夹\n        const oldFolders = await oldDb.folders.toArray()\n        const newFolders = oldFolders.map(folder => ({\n          ...folder,\n          userId: 'default',\n          updatedAt: new Date()\n        }))\n        await this.folders.bulkAdd(newFolders)\n        \n        // 迁移标签\n        const oldTags = await oldDb.tags.toArray()\n        const newTags = oldTags.map(tag => ({\n          ...tag,\n          userId: 'default',\n          updatedAt: new Date()\n        }))\n        await this.tags.bulkAdd(newTags)\n        \n        console.log('Migration completed successfully')\n      } catch (error) {\n        console.log('No old database found or migration failed:', error)\n      }\n    })\n\n    // 版本 2 -> 3: 优化索引和添加新功能\n    this.version(3).upgrade(async (tx) => {\n      console.log('Upgrading to version 3: Optimizing indexes and adding new features...')\n      \n      // 添加默认设置\n      await this.initializeDefaultSettings()\n      \n      // 重建搜索索引\n      await this.rebuildSearchIndexes()\n    })\n\n    // 版本 3 -> 4: 添加离线数据持久化功能\n    this.version(4).upgrade(async (tx) => {\n      console.log('Upgrading to version 4: Adding offline data persistence features...')\n      \n      // 初始化离线数据持久化配置\n      await this.initializeOfflinePersistence()\n      \n      // 创建初始离线快照\n      await this.createInitialOfflineSnapshot()\n    })\n  }\n\n  private async initializeDefaultSettings(): Promise<void> {\n    const defaultSettings = [\n      {\n        key: 'storageMode',\n        value: 'hybrid',\n        scope: 'global' as const,\n        updatedAt: new Date()\n      },\n      {\n        key: 'syncEnabled',\n        value: true,\n        scope: 'global' as const,\n        updatedAt: new Date()\n      },\n      {\n        key: 'imageCompression',\n        value: {\n          enabled: true,\n          quality: 0.8,\n          maxWidth: 1920,\n          maxHeight: 1080,\n          format: 'webp'\n        },\n        scope: 'global' as const,\n        updatedAt: new Date()\n      },\n      {\n        key: 'databaseVersion',\n        value: '3.0.0',\n        scope: 'global' as const,\n        updatedAt: new Date()\n      }\n    ]\n\n    for (const setting of defaultSettings) {\n      const exists = await this.settings.where('key').equals(setting.key).first()\n      if (!exists) {\n        await this.settings.add(setting)\n      }\n    }\n  }\n\n  private async rebuildSearchIndexes(): Promise<void> {\n    console.log('Rebuilding search indexes...')\n    // 这里可以实现搜索索引的重建逻辑\n  }\n\n  // ============================================================================\n  // 离线数据持久化增强方法\n  // ============================================================================\n\n  /**\n   * 初始化离线数据持久化\n   */\n  private async initializeOfflinePersistence(): Promise<void> {\n    console.log('Initializing offline persistence...')\n    \n    // 添加离线数据持久化的默认设置\n    const offlineSettings = [\n      {\n        key: 'offlineAutoBackup',\n        value: {\n          enabled: true,\n          interval: 30 * 60 * 1000, // 30分钟\n          maxBackups: 10,\n          compression: true\n        },\n        scope: 'global' as const,\n        updatedAt: new Date()\n      },\n      {\n        key: 'offlineCompression',\n        value: {\n          enabled: true,\n          algorithm: 'lz-string',\n          threshold: 1024, // 1KB以上才压缩\n          quality: 0.8\n        },\n        scope: 'global' as const,\n        updatedAt: new Date()\n      },\n      {\n        key: 'offlineDataRetention',\n        value: {\n          days: 30,\n          maxSize: 100 // 100MB\n        },\n        scope: 'global' as const,\n        updatedAt: new Date()\n      }\n    ]\n\n    for (const setting of offlineSettings) {\n      const exists = await this.settings.where('key').equals(setting.key).first()\n      if (!exists) {\n        await this.settings.add(setting)\n      }\n    }\n  }\n\n  /**\n   * 创建初始离线快照\n   */\n  private async createInitialOfflineSnapshot(): Promise<void> {\n    try {\n      const snapshot = await this.createOfflineSnapshot({\n        includeCards: true,\n        includeFolders: true,\n        includeTags: true,\n        includeSettings: true,\n        includeImages: false // 初始快照不包括图片，因为图片较大\n      })\n      \n      console.log('Initial offline snapshot created:', snapshot.id)\n    } catch (error) {\n      console.error('Failed to create initial offline snapshot:', error)\n    }\n  }\n\n  /**\n   * 创建离线快照\n   */\n  async createOfflineSnapshot(options: {\n    includeCards?: boolean\n    includeFolders?: boolean\n    includeTags?: boolean\n    includeImages?: boolean\n    includeSettings?: boolean\n    userId?: string\n  } = {}): Promise<OfflineSnapshot> {\n    const {\n      includeCards = true,\n      includeFolders = true,\n      includeTags = true,\n      includeImages = false,\n      includeSettings = true,\n      userId\n    } = options\n\n    const snapshotId = crypto.randomUUID()\n    const timestamp = new Date()\n    \n    // 收集数据\n    const data: any = {}\n    let totalSize = 0\n\n    if (includeCards) {\n      data.cards = await this.cards.toArray()\n      totalSize += JSON.stringify(data.cards).length\n    }\n\n    if (includeFolders) {\n      data.folders = await this.folders.toArray()\n      totalSize += JSON.stringify(data.folders).length\n    }\n\n    if (includeTags) {\n      data.tags = await this.tags.toArray()\n      totalSize += JSON.stringify(data.tags).length\n    }\n\n    if (includeImages) {\n      data.images = await this.images.toArray()\n      totalSize += JSON.stringify(data.images).length\n    }\n\n    if (includeSettings) {\n      data.settings = await this.settings.toArray()\n      totalSize += JSON.stringify(data.settings).length\n    }\n\n    // 计算数据哈希\n    const dataHash = await this.calculateDataHash(data)\n    \n    // 获取设备信息\n    const deviceInfo = await this.getDeviceInfo()\n    const storageQuota = await this.getStorageQuota()\n\n    const snapshot: OfflineSnapshot = {\n      id: snapshotId,\n      timestamp,\n      version: '4.0.0',\n      userId,\n      dataHash,\n      dataSize: totalSize,\n      compressedSize: totalSize, // 初始未压缩\n      includes: {\n        cards: includeCards,\n        folders: includeFolders,\n        tags: includeTags,\n        images: includeImages,\n        settings: includeSettings\n      },\n      metadata: {\n        deviceInfo,\n        networkStatus: navigator.onLine ? 'online' : 'offline',\n        batteryLevel: (navigator as any).getBattery?.() ? undefined : undefined,\n        storageQuota\n      }\n    }\n\n    await this.offlineSnapshots.add(snapshot)\n    \n    return snapshot\n  }\n\n  /**\n   * 计算数据哈希\n   */\n  private async calculateDataHash(data: any): Promise<string> {\n    const dataString = JSON.stringify(data)\n    const encoder = new TextEncoder()\n    const dataBuffer = encoder.encode(dataString)\n    const hashBuffer = await crypto.subtle.digest('SHA-256', dataBuffer)\n    const hashArray = Array.from(new Uint8Array(hashBuffer))\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('')\n  }\n\n  /**\n   * 获取设备信息\n   */\n  private async getDeviceInfo(): Promise<string> {\n    const info = {\n      userAgent: navigator.userAgent,\n      platform: navigator.platform,\n      language: navigator.language,\n      deviceMemory: (navigator as any).deviceMemory,\n      hardwareConcurrency: navigator.hardwareConcurrency,\n      screenResolution: `${screen.width}x${screen.height}`,\n      timestamp: new Date().toISOString()\n    }\n    return JSON.stringify(info)\n  }\n\n  /**\n   * 获取存储配额信息\n   */\n  private async getStorageQuota(): Promise<{ used: number; total: number }> {\n    try {\n      if ('storage' in navigator && 'estimate' in (navigator as any).storage) {\n        const estimate = await (navigator as any).storage.estimate()\n        return {\n          used: estimate.usage || 0,\n          total: estimate.quota || 0\n        }\n      }\n    } catch (error) {\n      console.warn('Failed to get storage quota:', error)\n    }\n    \n    return { used: 0, total: 0 }\n  }\n\n  /**\n   * 恢复离线快照\n   */\n  async restoreOfflineSnapshot(snapshotId: string): Promise<boolean> {\n    try {\n      const snapshot = await this.offlineSnapshots.get(snapshotId)\n      if (!snapshot) {\n        throw new Error('Snapshot not found')\n      }\n\n      // 检查数据完整性\n      const currentData = await this.getCurrentDataHash()\n      if (currentData === snapshot.dataHash) {\n        console.log('Data already matches snapshot, no restore needed')\n        return true\n      }\n\n      // 恢复数据\n      if (snapshot.includes.cards) {\n        const backupCards = await this.cards.toArray()\n        await this.cards.clear()\n        // 这里需要从备份中恢复卡片数据\n        // 由于快照只存储元数据，实际恢复需要更复杂的逻辑\n      }\n\n      if (snapshot.includes.folders) {\n        const backupFolders = await this.folders.toArray()\n        await this.folders.clear()\n        // 恢复文件夹数据\n      }\n\n      if (snapshot.includes.tags) {\n        const backupTags = await this.tags.toArray()\n        await this.tags.clear()\n        // 恢复标签数据\n      }\n\n      if (snapshot.includes.settings) {\n        const backupSettings = await this.settings.toArray()\n        await this.settings.clear()\n        // 恢复设置数据\n      }\n\n      console.log('Offline snapshot restored successfully:', snapshotId)\n      return true\n    } catch (error) {\n      console.error('Failed to restore offline snapshot:', error)\n      return false\n    }\n  }\n\n  /**\n   * 获取当前数据哈希\n   */\n  private async getCurrentDataHash(): Promise<string> {\n    const data = {\n      cards: await this.cards.toArray(),\n      folders: await this.folders.toArray(),\n      tags: await this.tags.toArray(),\n      settings: await this.settings.toArray()\n    }\n    return await this.calculateDataHash(data)\n  }\n\n  /**\n   * 智能清理离线数据\n   */\n  async cleanupOfflineData(): Promise<{\n    cleanedSnapshots: number\n    cleanedBackups: number\n    freedSpace: number\n  }> {\n    const now = new Date()\n    let cleanedSnapshots = 0\n    let cleanedBackups = 0\n    let freedSpace = 0\n\n    try {\n      // 获取清理策略\n      const retentionSetting = await this.getSetting('offlineDataRetention')\n      const retentionDays = retentionSetting?.days || 30\n      const maxSizeMB = retentionSetting?.maxSize || 100\n      const cutoffDate = new Date(now.getTime() - retentionDays * 24 * 60 * 60 * 1000)\n\n      // 清理过期快照\n      const expiredSnapshots = await this.offlineSnapshots\n        .where('timestamp')\n        .below(cutoffDate)\n        .toArray()\n\n      for (const snapshot of expiredSnapshots) {\n        freedSpace += snapshot.dataSize\n        await this.offlineSnapshots.delete(snapshot.id!)\n        cleanedSnapshots++\n      }\n\n      // 清理过期备份\n      const expiredBackups = await this.offlineBackups\n        .where('createdAt')\n        .below(cutoffDate)\n        .toArray()\n\n      for (const backup of expiredBackups) {\n        freedSpace += backup.size\n        await this.offlineBackups.delete(backup.id!)\n        cleanedBackups++\n      }\n\n      // 如果存储空间仍然过大，按时间清理最旧的快照\n      const currentSnapshots = await this.offlineSnapshots.orderBy('timestamp').reverse().toArray()\n      let totalSize = currentSnapshots.reduce((sum, s) => sum + s.dataSize, 0)\n      \n      while (totalSize > maxSizeMB * 1024 * 1024 && currentSnapshots.length > 5) {\n        const oldestSnapshot = currentSnapshots.pop()\n        if (oldestSnapshot) {\n          freedSpace += oldestSnapshot.dataSize\n          await this.offlineSnapshots.delete(oldestSnapshot.id!)\n          cleanedSnapshots++\n          totalSize -= oldestSnapshot.dataSize\n        }\n      }\n\n      console.log(`Offline data cleanup completed: ${cleanedSnapshots} snapshots, ${cleanedBackups} backups, ${freedSpace} bytes freed`)\n      \n      return {\n        cleanedSnapshots,\n        cleanedBackups,\n        freedSpace\n      }\n    } catch (error) {\n      console.error('Failed to cleanup offline data:', error)\n      return {\n        cleanedSnapshots: 0,\n        cleanedBackups: 0,\n        freedSpace: 0\n      }\n    }\n  }\n\n  /**\n   * 自动备份离线数据\n   */\n  async autoBackupOfflineData(): Promise<boolean> {\n    try {\n      const backupConfig = await this.getSetting('offlineAutoBackup')\n      if (!backupConfig?.enabled) {\n        return false\n      }\n\n      // 检查是否需要备份\n      const lastBackup = await this.offlineSnapshots.orderBy('timestamp').reverse().first()\n      const now = new Date()\n      \n      if (lastBackup) {\n        const timeSinceLastBackup = now.getTime() - lastBackup.timestamp.getTime()\n        if (timeSinceLastBackup < backupConfig.interval) {\n          return false // 还未到备份时间\n        }\n      }\n\n      // 创建新的快照\n      const snapshot = await this.createOfflineSnapshot({\n        includeCards: true,\n        includeFolders: true,\n        includeTags: true,\n        includeImages: false, // 自动备份不包括大文件\n        includeSettings: true\n      })\n\n      // 清理旧备份\n      const maxBackups = backupConfig.maxBackups || 10\n      const allSnapshots = await this.offlineSnapshots.orderBy('timestamp').reverse().toArray()\n      \n      if (allSnapshots.length > maxBackups) {\n        const snapshotsToDelete = allSnapshots.slice(maxBackups)\n        for (const snapshot of snapshotsToDelete) {\n          await this.offlineSnapshots.delete(snapshot.id!)\n        }\n      }\n\n      console.log('Auto backup completed:', snapshot.id)\n      return true\n    } catch (error) {\n      console.error('Auto backup failed:', error)\n      return false\n    }\n  }\n\n  /**\n   * 获取离线数据统计\n   */\n  async getOfflineDataStats(): Promise<{\n    snapshots: number\n    backups: number\n    totalSize: number\n    lastBackup?: Date\n    oldestBackup?: Date\n  }> {\n    const snapshots = await this.offlineSnapshots.toArray()\n    const backups = await this.offlineBackups.toArray()\n    \n    const totalSize = snapshots.reduce((sum, s) => sum + s.dataSize, 0) + \n                      backups.reduce((sum, b) => sum + b.size, 0)\n    \n    const lastBackup = snapshots.length > 0 ? \n      snapshots.reduce((latest, s) => s.timestamp > latest.timestamp ? s : latest, snapshots[0]).timestamp : \n      undefined\n    \n    const oldestBackup = snapshots.length > 0 ? \n      snapshots.reduce((oldest, s) => s.timestamp < oldest.timestamp ? s : oldest, snapshots[0]).timestamp : \n      undefined\n\n    return {\n      snapshots: snapshots.length,\n      backups: backups.length,\n      totalSize,\n      lastBackup,\n      oldestBackup\n    }\n  }\n\n  // ============================================================================\n  // 统一的CRUD操作方法\n  // ============================================================================\n\n  // 获取设置 - 支持用户级和全局设置\n  async getSetting(key: string, userId?: string): Promise<any> {\n    // 优先返回用户级设置\n    if (userId) {\n      const userSetting = await this.settings\n        .where('[key+scope]')\n        .equals([key, 'user'])\n        .first()\n      if (userSetting) return userSetting.value\n    }\n    \n    // 返回全局设置\n    const globalSetting = await this.settings\n      .where('[key+scope]')\n      .equals([key, 'global'])\n      .first()\n    return globalSetting?.value\n  }\n\n  // 更新设置\n  async updateSetting(key: string, value: any, scope: 'user' | 'global' = 'global', userId?: string): Promise<void> {\n    const updates: any = {\n      value,\n      updatedAt: new Date()\n    }\n    if (userId) {\n      updates.userId = userId\n    }\n    await this.settings.where('[key+scope]').equals([key, scope]).modify(updates)\n  }\n\n  // 获取数据库统计信息\n  async getStats(): Promise<DatabaseStats> {\n    const [cards, folders, tags, images, pendingSync] = await Promise.all([\n      this.cards.count(),\n      this.folders.count(),\n      this.tags.count(),\n      this.images.count(),\n      this.syncQueue.count()\n    ])\n\n    // 计算总大小（简化版本）\n    const totalSize = await this.calculateTotalSize()\n\n    return {\n      cards,\n      folders,\n      tags,\n      images,\n      pendingSync,\n      totalSize,\n      version: '3.0.0'\n    }\n  }\n\n  private async calculateTotalSize(): Promise<number> {\n    // 计算所有图片的总大小\n    const images = await this.images.toArray()\n    return images.reduce((total, image) => total + image.metadata.size, 0)\n  }\n\n  // 统一的卡片操作\n  async createCard(cardData: Omit<DbCard, 'id' | 'syncVersion' | 'pendingSync' | 'updatedAt'>, userId?: string): Promise<string> {\n    const id = crypto.randomUUID()\n    const now = new Date()\n    \n    await this.cards.add({\n      ...cardData,\n      id,\n      userId,\n      syncVersion: 1,\n      pendingSync: true,\n      updatedAt: now\n    })\n    \n    return id\n  }\n\n  async updateCard(id: string, updates: Partial<DbCard>): Promise<number> {\n    const result = await this.cards.update(id, {\n      ...updates,\n      syncVersion: updates.syncVersion ? updates.syncVersion + 1 : undefined,\n      pendingSync: true,\n      updatedAt: new Date()\n    })\n    \n    return result\n  }\n\n  async deleteCard(id: string): Promise<void> {\n    await this.transaction('rw', [this.cards, this.images], async () => {\n      // 删除相关图片\n      await this.images.where('cardId').equals(id).delete()\n      // 删除卡片\n      await this.cards.delete(id)\n    })\n  }\n\n  // 批量操作支持\n  async bulkCreateCards(cardsData: Omit<DbCard, 'id' | 'syncVersion' | 'pendingSync' | 'updatedAt'>[], userId?: string): Promise<string[]> {\n    const now = new Date()\n    const cards = cardsData.map(cardData => ({\n      ...cardData,\n      id: crypto.randomUUID(),\n      userId,\n      syncVersion: 1,\n      pendingSync: true,\n      updatedAt: now\n    }))\n    \n    await this.cards.bulkAdd(cards)\n    return cards.map(card => card.id!)\n  }\n\n  // 性能优化的查询方法\n  async getCardsByFolder(folderId: string, userId?: string): Promise<DbCard[]> {\n    return await this.cards\n      .where('[userId+folderId]')\n      .equals([userId || 'default', folderId])\n      .toArray()\n  }\n\n  async searchCards(searchTerm: string, userId?: string): Promise<DbCard[]> {\n    const searchLower = searchTerm.toLowerCase()\n    return await this.cards\n      .filter(card => \n        card.searchVector?.includes(searchLower) ||\n        card.frontContent.title.toLowerCase().includes(searchLower) ||\n        card.frontContent.text.toLowerCase().includes(searchLower) ||\n        card.backContent.title.toLowerCase().includes(searchLower) ||\n        card.backContent.text.toLowerCase().includes(searchLower)\n      )\n      .toArray()\n  }\n\n  // 数据库清理和优化\n  async cleanup(): Promise<void> {\n    await this.transaction('rw', [this.cards, this.folders, this.tags, this.images, this.syncQueue], async () => {\n      // 清理过期的同步操作\n      const expiredDate = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // 7天前\n      await this.syncQueue.where('timestamp').below(expiredDate).delete()\n      \n      // 清理孤立图片（没有对应卡片的图片）\n      const cardIds = await this.cards.toCollection().primaryKeys()\n      await this.images.where('cardId').noneOf(cardIds as string[]).delete()\n      \n      console.log('Database cleanup completed')\n    })\n  }\n\n  // 数据库健康检查\n  async healthCheck(): Promise<{\n    isHealthy: boolean\n    issues: string[]\n    stats: DatabaseStats\n  }> {\n    const issues: string[] = []\n    \n    try {\n      // 检查数据库连接 - 测试访问基本表\n      await this.cards.count()\n      \n      // 检查数据一致性\n      const stats = await this.getStats()\n      \n      // 检查是否有大量待同步项目\n      if (stats.pendingSync > 1000) {\n        issues.push(`High number of pending sync operations: ${stats.pendingSync}`)\n      }\n      \n      // 检查数据库大小\n      if (stats.totalSize > 500 * 1024 * 1024) { // 500MB\n        issues.push(`Database size is large: ${(stats.totalSize / 1024 / 1024).toFixed(2)} MB`)\n      }\n      \n      return {\n        isHealthy: issues.length === 0,\n        issues,\n        stats\n      }\n    } catch (error) {\n      return {\n        isHealthy: false,\n        issues: [`Database connection failed: ${error}`],\n        stats: { cards: 0, folders: 0, tags: 0, images: 0, pendingSync: 0, totalSize: 0, version: '3.0.0' }\n      }\n    }\n  }\n\n  // 完全清理数据库（谨慎使用）\n  async clearAll(): Promise<void> {\n    await this.transaction('rw', [this.cards, this.folders, this.tags, this.images, this.syncQueue, this.settings, this.sessions], async () => {\n      await this.cards.clear()\n      await this.folders.clear()\n      await this.tags.clear()\n      await this.images.clear()\n      await this.syncQueue.clear()\n      // 保留设置，只清除用户数据\n      await this.sessions.clear()\n    })\n  }\n\n  // ============================================================================\n  // 向后兼容的方法 - 保持现有代码不中断\n  // ============================================================================\n\n  // 旧版getSetting方法（保持兼容）\n  async getSettingLegacy(key: string): Promise<any> {\n    return await this.getSetting(key)\n  }\n\n  // 旧版updateSetting方法（保持兼容）\n  async updateSettingLegacy(key: string, value: any): Promise<void> {\n    await this.updateSetting(key, value)\n  }\n\n  // 旧版clearAll方法（保持兼容）\n  async clearAllLegacy(): Promise<void> {\n    await this.transaction('rw', [this.cards, this.folders, this.tags, this.images, this.syncQueue], async () => {\n      await this.cards.clear()\n      await this.folders.clear()\n      await this.tags.clear()\n      await this.images.clear()\n      await this.syncQueue.clear()\n    })\n  }\n\n  // 旧版getStats方法（保持兼容）\n  async getStatsLegacy(): Promise<{\n    cards: number\n    folders: number\n    tags: number\n    images: number\n    pendingSync: number\n  }> {\n    const stats = await this.getStats()\n    return {\n      cards: stats.cards,\n      folders: stats.folders,\n      tags: stats.tags,\n      images: stats.images,\n      pendingSync: stats.pendingSync\n    }\n  }\n}\n\n// ============================================================================\n// 向后兼容支持\n// ============================================================================\n\n// 旧版本数据库类（用于迁移）\nclass CardAllDatabase_v1 extends Dexie {\n  cards!: Table<any>\n  folders!: Table<any>\n  tags!: Table<any>\n  images!: Table<any>\n  syncQueue!: Table<any>\n  settings!: Table<any>\n  \n  constructor() {\n    super('CardAllDatabase')\n    this.version(1).stores({\n      cards: '++id, folderId, createdAt, updatedAt, syncVersion, pendingSync',\n      folders: '++id, parentId, createdAt, updatedAt, syncVersion, pendingSync',\n      tags: '++id, name, createdAt, syncVersion, pendingSync',\n      images: '++id, cardId, filePath, createdAt, syncVersion, pendingSync',\n      syncQueue: '++id, type, entity, entityId, timestamp, retryCount',\n      settings: '++id, key, updatedAt'\n    })\n  }\n}\n\n// 创建数据库实例\nexport const db = new CardAllUnifiedDatabase()\n\n// 数据库初始化\nexport const initializeDatabase = async (): Promise<void> => {\n  try {\n    await db.open()\n    console.log('CardAll unified database initialized successfully')\n    \n    // 执行健康检查\n    const health = await db.healthCheck()\n    if (!health.isHealthy) {\n      console.warn('Database health issues detected:', health.issues)\n    }\n    \n    // 定期清理\n    setInterval(() => {\n      db.cleanup().catch(console.error)\n    }, 24 * 60 * 60 * 1000) // 每天清理一次\n    \n  } catch (error) {\n    console.error('Failed to initialize database:', error)\n    throw error\n  }\n}\n\n// 数据库错误处理\ndb.on('versionchange', (event) => {\n  console.warn('Database version changed:', event)\n})\n\ndb.on('blocked', () => {\n  console.warn('Database operation blocked')\n})\n\ndb.on('versionchange', () => {\n  console.warn('Database version changed, reloading page...')\n  window.location.reload()\n})\n\ndb.on('ready', () => {\n  console.log('Database is ready')\n})\n\n// ============================================================================\n// 导出工具函数\n// ============================================================================\n\n// 数据转换工具\nexport const convertToDbCard = (card: Card, userId?: string): DbCard => {\n  return {\n    ...card,\n    userId,\n    syncVersion: 1,\n    pendingSync: true,\n    updatedAt: new Date()\n  }\n}\n\nexport const convertFromDbCard = (dbCard: DbCard): Card => {\n  const { userId, syncVersion, lastSyncAt, pendingSync, ...card } = dbCard\n  return {\n    ...card,\n    id: card.id || '',\n    createdAt: new Date(card.createdAt),\n    updatedAt: new Date(card.updatedAt)\n  }\n}\n\n// 搜索优化工具\nexport const generateSearchVector = (card: Card): string => {\n  const searchableText = [\n    card.frontContent.title,\n    card.frontContent.text,\n    card.backContent.title,\n    card.backContent.text,\n    ...card.frontContent.tags,\n    ...card.backContent.tags\n  ].join(' ').toLowerCase()\n  \n  return searchableText\n}\n\n// 批量操作工具\nexport const batchOperation = async <T>(\n  items: T[],\n  batchSize: number = 100,\n  operation: (batch: T[]) => Promise<void>\n): Promise<void> => {\n  for (let i = 0; i < items.length; i += batchSize) {\n    const batch = items.slice(i, i + batchSize)\n    await operation(batch)\n  }\n}\n\n// 数据验证工具\nexport const validateCardData = (card: Partial<Card>): string[] => {\n  const errors: string[] = []\n  \n  if (!card.frontContent?.title) {\n    errors.push('Front content title is required')\n  }\n  \n  if (!card.backContent?.title) {\n    errors.push('Back content title is required')\n  }\n  \n  if (card.style && !['solid', 'gradient', 'glass'].includes(card.style.type)) {\n    errors.push('Invalid card style type')\n  }\n  \n  return errors\n}\n\n// ============================================================================\n// 性能优化和缓存\n// ============================================================================\n\n// 简单的查询缓存\nconst queryCache = new Map<string, { data: any; timestamp: number }>()\nconst CACHE_TTL = 5 * 60 * 1000 // 5分钟缓存\n\nexport const cachedQuery = async <T>(\n  key: string,\n  query: () => Promise<T>\n): Promise<T> => {\n  const cached = queryCache.get(key)\n  if (cached && Date.now() - cached.timestamp < CACHE_TTL) {\n    return cached.data\n  }\n  \n  const data = await query()\n  queryCache.set(key, { data, timestamp: Date.now() })\n  return data\n}\n\n// 清理缓存\nexport const clearQueryCache = (): void => {\n  queryCache.clear()\n}\n\n// 定期清理过期缓存\nsetInterval(() => {\n  const now = Date.now()\n  queryCache.forEach((value, key) => {\n    if (now - value.timestamp > CACHE_TTL) {\n      queryCache.delete(key)\n    }\n  })\n}, CACHE_TTL)"],"version":3}
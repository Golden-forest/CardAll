{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\utils\\batch-operation-manager.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\utils\\batch-operation-manager.ts"],"sourcesContent":["/**\r\n * 高性能批量操作管理器\r\n * 优化批量插入、更新、删除操作性能\r\n */\r\n\r\nimport { db, type DbCard, type DbFolder, type DbTag } from '../services/database-unified'\r\nimport { intelligentCache } from './intelligent-cache'\r\n\r\n// ============================================================================\r\n// 类型定义\r\n// ============================================================================\r\n\r\ninterface BatchOperation<T = any> {\r\n  type: 'create' | 'update' | 'delete'\r\n  entity: 'card' | 'folder' | 'tag' | 'image'\r\n  data: T\r\n  id?: string\r\n  metadata?: {\r\n    priority?: 'high' | 'normal' | 'low'\r\n    retryCount?: number\r\n    timeout?: number\r\n  }\r\n}\r\n\r\ninterface BatchResult<T = any> {\r\n  success: boolean\r\n  id?: string\r\n  data?: T\r\n  error?: string\r\n  duration: number\r\n  retryCount: number\r\n}\r\n\r\ninterface BatchConfig {\r\n  batchSize: number\r\n  maxConcurrent: number\r\n  retryCount: number\r\n  timeout: number\r\n  backoffStrategy: 'linear' | 'exponential' | 'fixed'\r\n  enableCompression: boolean\r\n  enableValidation: boolean\r\n}\r\n\r\ninterface BatchMetrics {\r\n  totalOperations: number\r\n  successfulOperations: number\r\n  failedOperations: number\r\n  averageExecutionTime: number\r\n  totalExecutionTime: number\r\n  retryRate: number\r\n  throughput: number\r\n}\r\n\r\n// ============================================================================\r\n// 高性能批量操作管理器\r\n// ============================================================================\r\n\r\nexport class BatchOperationManager {\r\n  private config: BatchConfig = {\r\n    batchSize: 100,\r\n    maxConcurrent: 3,\r\n    retryCount: 3,\r\n    timeout: 30000,\r\n    backoffStrategy: 'exponential',\r\n    enableCompression: true,\r\n    enableValidation: true\r\n  }\r\n\r\n  private metrics: BatchMetrics = {\r\n    totalOperations: 0,\r\n    successfulOperations: 0,\r\n    failedOperations: 0,\r\n    averageExecutionTime: 0,\r\n    totalExecutionTime: 0,\r\n    retryRate: 0,\r\n    throughput: 0\r\n  }\r\n\r\n  private activeBatches = new Map<string, Promise<BatchResult[]>>()\r\n  private operationQueue: BatchOperation[] = []\r\n\r\n  constructor(config?: Partial<BatchConfig>) {\r\n    if (config) {\r\n      this.config = { ...this.config, ...config }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 执行批量操作\r\n   */\r\n  async executeBatch<T>(operations: BatchOperation<T>[]): Promise<BatchResult<T>[]> {\r\n    const batchId = crypto.randomUUID()\r\n    const startTime = performance.now()\r\n\r\n    try {\r\n      // 验证和预处理操作\r\n      const validatedOperations = await this.preprocessOperations(operations)\r\n\r\n      // 分批处理\r\n      const batches = this.splitIntoBatches(validatedOperations)\r\n      \r\n      // 并发执行批次\r\n      const results = await this.executeBatchesConcurrently(batches)\r\n\r\n      // 后处理\r\n      const finalResults = await this.postprocessResults(results, validatedOperations)\r\n\r\n      // 更新指标\r\n      this.updateMetrics(finalResults, performance.now() - startTime)\r\n\r\n      return finalResults\r\n    } catch (error) {\r\n      console.error(`批量操作失败 [${batchId}]:`, error)\r\n      \r\n      // 返回失败结果\r\n      return operations.map(op => ({\r\n        success: false,\r\n        error: error.message,\r\n        duration: performance.now() - startTime,\r\n        retryCount: 0\r\n      }))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 批量创建卡片\r\n   */\r\n  async bulkCreateCards(cardsData: any[]): Promise<BatchResult[]> {\r\n    const operations: BatchOperation[] = cardsData.map(cardData => ({\r\n      type: 'create',\r\n      entity: 'card',\r\n      data: this.prepareCardData(cardData)\r\n    }))\r\n\r\n    return await this.executeBatch(operations)\r\n  }\r\n\r\n  /**\r\n   * 批量更新卡片\r\n   */\r\n  async bulkUpdateCards(updates: Array<{ id: string; data: any }>): Promise<BatchResult[]> {\r\n    const operations: BatchOperation[] = updates.map(({ id, data }) => ({\r\n      type: 'update',\r\n      entity: 'card',\r\n      data: { id, ...data },\r\n      id\r\n    }))\r\n\r\n    return await this.executeBatch(operations)\r\n  }\r\n\r\n  /**\r\n   * 批量删除卡片\r\n   */\r\n  async bulkDeleteCards(cardIds: string[]): Promise<BatchResult[]> {\r\n    const operations: BatchOperation[] = cardIds.map(id => ({\r\n      type: 'delete',\r\n      entity: 'card',\r\n      data: { id },\r\n      id,\r\n      metadata: { priority: 'high' } // 删除操作高优先级\r\n    }))\r\n\r\n    return await this.executeBatch(operations)\r\n  }\r\n\r\n  /**\r\n   * 预处理操作\r\n   */\r\n  private async preprocessOperations<T>(operations: BatchOperation<T>[]): Promise<BatchOperation<T>[]> {\r\n    if (!this.config.enableValidation) {\r\n      return operations\r\n    }\r\n\r\n    const validatedOperations: BatchOperation<T>[] = []\r\n    \r\n    for (const operation of operations) {\r\n      try {\r\n        // 数据验证\r\n        const isValid = await this.validateOperation(operation)\r\n        if (!isValid) {\r\n          console.warn(`操作验证失败: ${operation.type} ${operation.entity}`)\r\n          continue\r\n        }\r\n\r\n        // 数据预处理\r\n        const processedOperation = await this.preprocessOperation(operation)\r\n        validatedOperations.push(processedOperation)\r\n      } catch (error) {\r\n        console.warn(`操作预处理失败:`, error)\r\n      }\r\n    }\r\n\r\n    return validatedOperations\r\n  }\r\n\r\n  /**\r\n   * 验证操作\r\n   */\r\n  private async validateOperation<T>(operation: BatchOperation<T>): Promise<boolean> {\r\n    switch (operation.entity) {\r\n      case 'card':\r\n        return this.validateCardOperation(operation)\r\n      case 'folder':\r\n        return this.validateFolderOperation(operation)\r\n      case 'tag':\r\n        return this.validateTagOperation(operation)\r\n      default:\r\n        return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 验证卡片操作\r\n   */\r\n  private validateCardOperation<T>(operation: BatchOperation<T>): boolean {\r\n    const data = operation.data as any\r\n\r\n    if (operation.type === 'create') {\r\n      // 创建操作验证\r\n      return !!(\r\n        data.frontContent?.title &&\r\n        data.backContent?.title &&\r\n        typeof data.frontContent === 'object' &&\r\n        typeof data.backContent === 'object'\r\n      )\r\n    } else if (operation.type === 'update') {\r\n      // 更新操作验证\r\n      return !!(\r\n        operation.id &&\r\n        typeof data === 'object'\r\n      )\r\n    } else if (operation.type === 'delete') {\r\n      // 删除操作验证\r\n      return !!operation.id\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  /**\r\n   * 验证文件夹操作\r\n   */\r\n  private validateFolderOperation<T>(operation: BatchOperation<T>): boolean {\r\n    const data = operation.data as any\r\n\r\n    if (operation.type === 'create') {\r\n      return !!(\r\n        data.name &&\r\n        typeof data.name === 'string'\r\n      )\r\n    } else if (operation.type === 'update' || operation.type === 'delete') {\r\n      return !!operation.id\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  /**\r\n   * 验证标签操作\r\n   */\r\n  private validateTagOperation<T>(operation: BatchOperation<T>): boolean {\r\n    const data = operation.data as any\r\n\r\n    if (operation.type === 'create') {\r\n      return !!(\r\n        data.name &&\r\n        typeof data.name === 'string'\r\n      )\r\n    } else if (operation.type === 'update' || operation.type === 'delete') {\r\n      return !!operation.id\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  /**\r\n   * 预处理单个操作\r\n   */\r\n  private async preprocessOperation<T>(operation: BatchOperation<T>): Promise<BatchOperation<T>> {\r\n    const processedOperation = { ...operation }\r\n\r\n    if (operation.entity === 'card') {\r\n      processedOperation.data = await this.prepareCardData(operation.data)\r\n    }\r\n\r\n    return processedOperation\r\n  }\r\n\r\n  /**\r\n   * 准备卡片数据\r\n   */\r\n  private prepareCardData(cardData: any): any {\r\n    const now = new Date()\r\n    \r\n    return {\r\n      ...cardData,\r\n      id: cardData.id || crypto.randomUUID(),\r\n      syncVersion: 1,\r\n      pendingSync: true,\r\n      createdAt: cardData.createdAt || now,\r\n      updatedAt: now,\r\n      searchVector: this.generateSearchVector(cardData)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 生成搜索向量\r\n   */\r\n  private generateSearchVector(cardData: any): string {\r\n    const searchableText = [\r\n      cardData.frontContent?.title || '',\r\n      cardData.frontContent?.text || '',\r\n      cardData.backContent?.title || '',\r\n      cardData.backContent?.text || '',\r\n      ...(cardData.frontContent?.tags || []),\r\n      ...(cardData.backContent?.tags || [])\r\n    ].join(' ').toLowerCase()\r\n    \r\n    return searchableText\r\n  }\r\n\r\n  /**\r\n   * 分批处理\r\n   */\r\n  private splitIntoBatches<T>(operations: BatchOperation<T>[]): BatchOperation<T>[][] {\r\n    const batches: BatchOperation<T>[][] = []\r\n    \r\n    // 按优先级分组\r\n    const highPriority = operations.filter(op => op.metadata?.priority === 'high')\r\n    const normalPriority = operations.filter(op => !op.metadata?.priority || op.metadata?.priority === 'normal')\r\n    const lowPriority = operations.filter(op => op.metadata?.priority === 'low')\r\n\r\n    // 高优先级操作单独成批\r\n    if (highPriority.length > 0) {\r\n      batches.push(...this.splitByBatchSize(highPriority))\r\n    }\r\n\r\n    // 普通和低优先级混合分批\r\n    const mixedOperations = [...normalPriority, ...lowPriority]\r\n    if (mixedOperations.length > 0) {\r\n      batches.push(...this.splitByBatchSize(mixedOperations))\r\n    }\r\n\r\n    return batches\r\n  }\r\n\r\n  /**\r\n   * 按批次大小分割\r\n   */\r\n  private splitByBatchSize<T>(operations: BatchOperation<T>[]): BatchOperation<T>[][] {\r\n    const batches: BatchOperation<T>[][] = []\r\n    \r\n    for (let i = 0; i < operations.length; i += this.config.batchSize) {\r\n      batches.push(operations.slice(i, i + this.config.batchSize))\r\n    }\r\n    \r\n    return batches\r\n  }\r\n\r\n  /**\r\n   * 并发执行批次\r\n   */\r\n  private async executeBatchesConcurrently<T>(batches: BatchOperation<T>[][]): Promise<BatchResult<T>[]> {\r\n    const results: BatchResult<T>[] = []\r\n    const semaphore = new Semaphore(this.config.maxConcurrent)\r\n\r\n    // 并发执行批次\r\n    const batchPromises = batches.map(async (batch, index) => {\r\n      await semaphore.acquire()\r\n      try {\r\n        const batchResults = await this.executeSingleBatch(batch, index)\r\n        return batchResults\r\n      } finally {\r\n        semaphore.release()\r\n      }\r\n    })\r\n\r\n    const batchResultsArray = await Promise.all(batchPromises)\r\n    \r\n    // 合并结果\r\n    batchResultsArray.forEach(batchResults => {\r\n      results.push(...batchResults)\r\n    })\r\n\r\n    return results\r\n  }\r\n\r\n  /**\r\n   * 执行单个批次\r\n   */\r\n  private async executeSingleBatch<T>(batch: BatchOperation<T>[], batchIndex: number): Promise<BatchResult<T>[]> {\r\n    const batchId = `batch_${batchIndex}_${Date.now()}`\r\n    const startTime = performance.now()\r\n\r\n    try {\r\n      // 执行带重试的批次操作\r\n      const results = await this.executeBatchWithRetry(batch, this.config.retryCount)\r\n\r\n      console.log(`批次 ${batchId} 执行完成: ${results.filter(r => r.success).length}/${results.length} 成功`)\r\n      \r\n      return results\r\n    } catch (error) {\r\n      console.error(`批次 ${batchId} 执行失败:`, error)\r\n      \r\n      // 返回失败结果\r\n      return batch.map(operation => ({\r\n        success: false,\r\n        error: error.message,\r\n        duration: performance.now() - startTime,\r\n        retryCount: 0\r\n      }))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 带重试的批次执行\r\n   */\r\n  private async executeBatchWithRetry<T>(batch: BatchOperation<T>[], maxRetries: number): Promise<BatchResult<T>[]> {\r\n    let lastError: Error\r\n\r\n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\r\n      try {\r\n        return await this.executeBatchInternal(batch)\r\n      } catch (error) {\r\n        lastError = error\r\n        \r\n        if (attempt < maxRetries) {\r\n          const delay = this.calculateBackoffDelay(attempt)\r\n          console.log(`批次执行失败，${delay}ms后重试 (尝试 ${attempt + 1}/${maxRetries})`)\r\n          await this.delay(delay)\r\n        }\r\n      }\r\n    }\r\n\r\n    throw lastError\r\n  }\r\n\r\n  /**\r\n   * 内部批次执行\r\n   */\r\n  private async executeBatchInternal<T>(batch: BatchOperation<T>[]): Promise<BatchResult<T>[]> {\r\n    const startTime = performance.now()\r\n    \r\n    // 按操作类型分组\r\n    const createOps = batch.filter(op => op.type === 'create')\r\n    const updateOps = batch.filter(op => op.type === 'update')\r\n    const deleteOps = batch.filter(op => op.type === 'delete')\r\n\r\n    // 并发执行不同类型的操作\r\n    const results = await Promise.all([\r\n      this.executeCreateOperations(createOps),\r\n      this.executeUpdateOperations(updateOps),\r\n      this.executeDeleteOperations(deleteOps)\r\n    ])\r\n\r\n    // 合并结果并添加执行时间\r\n    const allResults = results.flat()\r\n    const executionTime = performance.now() - startTime\r\n\r\n    return allResults.map(result => ({\r\n      ...result,\r\n      duration: executionTime\r\n    }))\r\n  }\r\n\r\n  /**\r\n   * 执行创建操作\r\n   */\r\n  private async executeCreateOperations<T>(operations: BatchOperation<T>[]): Promise<BatchResult<T>[]> {\r\n    if (operations.length === 0) return []\r\n\r\n    const entityTable = this.getEntityTable(operations[0].entity)\r\n    const preparedData = operations.map(op => this.prepareOperationData(op))\r\n\r\n    try {\r\n      // 使用事务批量插入\r\n      const keys = await db.transaction('rw', [entityTable], async () => {\r\n        return await entityTable.bulkAdd(preparedData, { allKeys: true })\r\n      })\r\n\r\n      // 失效相关缓存\r\n      this.invalidateRelatedCache(operations)\r\n\r\n      return operations.map((op, index) => ({\r\n        success: true,\r\n        id: keys[index] as string,\r\n        data: op.data,\r\n        duration: 0,\r\n        retryCount: 0\r\n      }))\r\n    } catch (error) {\r\n      console.error('批量创建失败:', error)\r\n      \r\n      return operations.map(op => ({\r\n        success: false,\r\n        error: error.message,\r\n        duration: 0,\r\n        retryCount: 0\r\n      }))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 执行更新操作\r\n   */\r\n  private async executeUpdateOperations<T>(operations: BatchOperation<T>[]): Promise<BatchResult<T>[]> {\r\n    if (operations.length === 0) return []\r\n\r\n    const entityTable = this.getEntityTable(operations[0].entity)\r\n    const results: BatchResult<T>[] = []\r\n\r\n    try {\r\n      await db.transaction('rw', [entityTable], async () => {\r\n        for (const operation of operations) {\r\n          try {\r\n            const updates = this.prepareOperationData(operation)\r\n            await entityTable.update(operation.id!, updates)\r\n            \r\n            results.push({\r\n              success: true,\r\n              id: operation.id,\r\n              data: operation.data,\r\n              duration: 0,\r\n              retryCount: 0\r\n            })\r\n          } catch (error) {\r\n            results.push({\r\n              success: false,\r\n              id: operation.id,\r\n              error: error.message,\r\n              duration: 0,\r\n              retryCount: 0\r\n            })\r\n          }\r\n        }\r\n      })\r\n\r\n      // 失效相关缓存\r\n      this.invalidateRelatedCache(operations)\r\n\r\n      return results\r\n    } catch (error) {\r\n      console.error('批量更新失败:', error)\r\n      \r\n      return operations.map(op => ({\r\n        success: false,\r\n        id: op.id,\r\n        error: error.message,\r\n        duration: 0,\r\n        retryCount: 0\r\n      }))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 执行删除操作\r\n   */\r\n  private async executeDeleteOperations<T>(operations: BatchOperation<T>[]): Promise<BatchResult<T>[]> {\r\n    if (operations.length === 0) return []\r\n\r\n    const entityTable = this.getEntityTable(operations[0].entity)\r\n    const ids = operations.map(op => op.id!).filter(Boolean)\r\n\r\n    try {\r\n      // 使用事务批量删除\r\n      await db.transaction('rw', [entityTable], async () => {\r\n        await entityTable.bulkDelete(ids)\r\n      })\r\n\r\n      // 失效相关缓存\r\n      this.invalidateRelatedCache(operations)\r\n\r\n      return operations.map(op => ({\r\n        success: true,\r\n        id: op.id,\r\n        data: op.data,\r\n        duration: 0,\r\n        retryCount: 0\r\n      }))\r\n    } catch (error) {\r\n      console.error('批量删除失败:', error)\r\n      \r\n      return operations.map(op => ({\r\n        success: false,\r\n        id: op.id,\r\n        error: error.message,\r\n        duration: 0,\r\n        retryCount: 0\r\n      }))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取实体表\r\n   */\r\n  private getEntityTable(entity: string): Table<any, any> {\r\n    switch (entity) {\r\n      case 'card': return db.cards\r\n      case 'folder': return db.folders\r\n      case 'tag': return db.tags\r\n      case 'image': return db.images\r\n      default: throw new Error(`不支持的实体类型: ${entity}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 准备操作数据\r\n   */\r\n  private prepareOperationData<T>(operation: BatchOperation<T>): any {\r\n    const data = { ...operation.data }\r\n\r\n    // 添加时间戳\r\n    if (operation.type === 'create' || operation.type === 'update') {\r\n      data.updatedAt = new Date()\r\n    }\r\n\r\n    // 添加同步信息\r\n    if (operation.type !== 'delete') {\r\n      data.pendingSync = true\r\n      data.syncVersion = (data.syncVersion || 0) + 1\r\n    }\r\n\r\n    return data\r\n  }\r\n\r\n  /**\r\n   * 失效相关缓存\r\n   */\r\n  private invalidateRelatedCache<T>(operations: BatchOperation<T>[]): void {\r\n    for (const operation of operations) {\r\n      if (operation.entity === 'card') {\r\n        // 失效卡片相关缓存\r\n        intelligentCache.invalidateByPattern('card_')\r\n        intelligentCache.invalidateByPattern('cards_')\r\n      } else if (operation.entity === 'folder') {\r\n        // 失效文件夹相关缓存\r\n        intelligentCache.invalidateByPattern('folder_')\r\n      } else if (operation.entity === 'tag') {\r\n        // 失效标签相关缓存\r\n        intelligentCache.invalidateByPattern('tag_')\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 后处理结果\r\n   */\r\n  private async postprocessResults<T>(results: BatchResult<T>[], operations: BatchOperation<T>[]): Promise<BatchResult<T>[]> {\r\n    // 可以在这里添加结果的后处理逻辑\r\n    // 例如：记录日志、发送通知等\r\n    \r\n    return results\r\n  }\r\n\r\n  /**\r\n   * 更新指标\r\n   */\r\n  private updateMetrics<T>(results: BatchResult<T>[], executionTime: number): void {\r\n    const successful = results.filter(r => r.success).length\r\n    const failed = results.filter(r => !r.success).length\r\n    const totalRetries = results.reduce((sum, r) => sum + r.retryCount, 0)\r\n\r\n    this.metrics.totalOperations += results.length\r\n    this.metrics.successfulOperations += successful\r\n    this.metrics.failedOperations += failed\r\n    this.metrics.totalExecutionTime += executionTime\r\n    this.metrics.averageExecutionTime = \r\n      this.metrics.totalExecutionTime / this.metrics.totalOperations\r\n    this.metrics.retryRate = totalRetries / results.length\r\n    this.metrics.throughput = results.length / (executionTime / 1000) // ops/sec\r\n  }\r\n\r\n  /**\r\n   * 计算退避延迟\r\n   */\r\n  private calculateBackoffDelay(attempt: number): number {\r\n    switch (this.config.backoffStrategy) {\r\n      case 'linear':\r\n        return 1000 * (attempt + 1)\r\n      case 'exponential':\r\n        return 1000 * Math.pow(2, attempt)\r\n      case 'fixed':\r\n        return 2000\r\n      default:\r\n        return 1000\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 延迟执行\r\n   */\r\n  private delay(ms: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, ms))\r\n  }\r\n\r\n  /**\r\n   * 获取性能指标\r\n   */\r\n  getMetrics(): BatchMetrics {\r\n    return { ...this.metrics }\r\n  }\r\n\r\n  /**\r\n   * 重置指标\r\n   */\r\n  resetMetrics(): void {\r\n    this.metrics = {\r\n      totalOperations: 0,\r\n      successfulOperations: 0,\r\n      failedOperations: 0,\r\n      averageExecutionTime: 0,\r\n      totalExecutionTime: 0,\r\n      retryRate: 0,\r\n      throughput: 0\r\n    }\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// 信号量实现\r\n// ============================================================================\r\n\r\nclass Semaphore {\r\n  private available: number\r\n  private queue: Array<() => void> = []\r\n\r\n  constructor(count: number) {\r\n    this.available = count\r\n  }\r\n\r\n  async acquire(): Promise<void> {\r\n    if (this.available > 0) {\r\n      this.available--\r\n      return\r\n    }\r\n\r\n    return new Promise<void>(resolve => {\r\n      this.queue.push(resolve)\r\n    })\r\n  }\r\n\r\n  release(): void {\r\n    this.available++\r\n    \r\n    if (this.queue.length > 0) {\r\n      const next = this.queue.shift()\r\n      if (next) {\r\n        this.available--\r\n        next()\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// 导出实例\r\n// ============================================================================\r\n\r\nexport const batchOperationManager = new BatchOperationManager()\r\n\r\n// ============================================================================\r\n// 便捷方法\r\n// ============================================================================\r\n\r\nexport const bulkCreateCards = (cardsData: any[]) => \r\n  batchOperationManager.bulkCreateCards(cardsData)\r\n\r\nexport const bulkUpdateCards = (updates: Array<{ id: string; data: any }>) => \r\n  batchOperationManager.bulkUpdateCards(updates)\r\n\r\nexport const bulkDeleteCards = (cardIds: string[]) => \r\n  batchOperationManager.bulkDeleteCards(cardIds)"],"version":3}
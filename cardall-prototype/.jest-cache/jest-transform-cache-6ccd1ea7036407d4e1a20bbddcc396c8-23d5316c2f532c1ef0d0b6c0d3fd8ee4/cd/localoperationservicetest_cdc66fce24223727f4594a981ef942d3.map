{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\services\\local-operation-service.test.ts","mappings":";AAAA;;;GAGG;;AAEH,2CAAmF;AAKnF,QAAQ;AACR,cAAI,CAAC,IAAI,CAAC,iCAAiC,EAAE,GAAG,EAAE,CAAC,CAAC;IAClD,EAAE,EAAE,IAAI,yBAAY,EAAE;CACvB,CAAC,CAAC,CAAA;AAPH,oFAAuF;AACvF,oDAAkD;AAClD,oDAAsE;AAOtE,IAAA,kBAAQ,EAAC,gCAAgC,EAAE,GAAG,EAAE;IAC9C,IAAI,OAAuC,CAAA;IAC3C,IAAI,MAAoB,CAAA;IAExB,IAAA,oBAAU,EAAC,GAAG,EAAE;QACd,UAAU;QACV,MAAM,GAAG,IAAI,yBAAY,EAAE,CAAA;QAE3B,SAAS;QACT,OAAO,GAAG,IAAI,wDAA8B,EAAE,CAAA;QAE9C,UAAU;QACV,8BAAiB,CAAC,KAAK,EAAE,CAAA;QAEzB,SAAS;QACT,cAAI,CAAC,aAAa,EAAE,CAAA;IACtB,CAAC,CAAC,CAAA;IAEF,IAAA,mBAAS,EAAC,GAAG,EAAE;QACb,OAAO;QACP,OAAO,CAAC,OAAO,EAAE,CAAA;IACnB,CAAC,CAAC,CAAA;IAEF,+EAA+E;IAC/E,QAAQ;IACR,+EAA+E;IAE/E,IAAA,kBAAQ,EAAC,KAAK,EAAE,GAAG,EAAE;QACnB,IAAA,cAAI,EAAC,WAAW,EAAE,KAAK,IAAI,EAAE;YAC3B,MAAM,OAAO,CAAC,UAAU,EAAE,CAAA;YAC1B,IAAA,gBAAM,EAAC,OAAO,CAAC,CAAC,cAAc,CAAC,wDAA8B,CAAC,CAAA;QAChE,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,WAAW,EAAE,KAAK,IAAI,EAAE;YAC3B,YAAY;YACZ,cAAI,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAA;YAEzE,MAAM,gBAAgB,GAAG,IAAI,wDAA8B,EAAE,CAAA;YAC7D,MAAM,gBAAgB,CAAC,UAAU,EAAE,CAAA;YAEnC,qBAAqB;YACrB,IAAA,gBAAM,EAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,wDAA8B,CAAC,CAAA;QACzE,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,+EAA+E;IAC/E,SAAS;IACT,+EAA+E;IAE/E,IAAA,kBAAQ,EAAC,MAAM,EAAE,GAAG,EAAE;QACpB,IAAA,cAAI,EAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM,QAAQ,GAAG,0BAAa,CAAC,cAAc,EAAE,CAAA;YAE/C,MAAM,MAAM,GAAG,MAAM,8BAAiB,CAAC,OAAO,CAAC,YAAY,EAAE,GAAG,EAAE,CAChE,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAC7B,CAAA;YAED,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACjC,IAAA,gBAAM,EAAC,MAAM,CAAC,EAAE,CAAC,CAAC,WAAW,EAAE,CAAA;YAC/B,IAAA,gBAAM,EAAC,MAAM,CAAC,EAAE,CAAC,CAAC,aAAa,EAAE,CAAA;YACjC,IAAA,gBAAM,EAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC,EAAE,GAAG,CAAC,CAAA,CAAC,cAAc;YAC9D,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAA;QAC1D,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC5B,MAAM,QAAQ,GAAG,0BAAa,CAAC,cAAc,CAAC;gBAC5C,YAAY,EAAE;oBACZ,KAAK,EAAE,kBAAkB;oBACzB,IAAI,EAAE,yCAAyC;oBAC/C,IAAI,EAAE,CAAC,QAAQ,EAAE,MAAM,CAAC;iBACzB;gBACD,WAAW,EAAE;oBACX,KAAK,EAAE,WAAW;oBAClB,IAAI,EAAE,oBAAoB;oBAC1B,IAAI,EAAE,CAAC,MAAM,EAAE,SAAS,CAAC;iBAC1B;aACF,CAAC,CAAA;YAEF,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;YAEjD,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACjC,wBAAwB;YACxB,IAAA,gBAAM,EAAC,MAAM,CAAC,EAAE,CAAC,CAAC,WAAW,EAAE,CAAA;QACjC,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,aAAa,EAAE,KAAK,IAAI,EAAE;YAC7B,YAAY;YACZ,cAAI,CAAC,KAAK,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAA;YAEpF,MAAM,QAAQ,GAAG,0BAAa,CAAC,cAAc,EAAE,CAAA;YAC/C,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;YAEjD,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YAClC,IAAA,gBAAM,EAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAA;YAC/C,IAAA,gBAAM,EAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;QAC5C,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC5B,MAAM,QAAQ,GAAG,0BAAa,CAAC,cAAc,EAAE,CAAA;YAE/C,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;YAElC,cAAc;YACd,MAAM,cAAc,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,OAAO,EAAE,CAAA;YAChE,IAAA,gBAAM,EAAC,cAAc,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YAEhD,MAAM,MAAM,GAAG,cAAc,CAAC,CAAC,CAAC,CAAA;YAChC,IAAA,gBAAM,EAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;YAClC,IAAA,gBAAM,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;YAClC,IAAA,gBAAM,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;QACvC,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,0BAAa,CAAC,cAAc,EAAE,CAAC,CAAA;YAEjF,MAAM,OAAO,GAAG,MAAM,8BAAiB,CAAC,OAAO,CAAC,iBAAiB,EAAE,GAAG,EAAE,CACtE,OAAO,CAAC,eAAe,CAAC,SAAS,CAAC,CACnC,CAAA;YAED,IAAA,gBAAM,EAAC,OAAO,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;YAC/B,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBACvB,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;gBACjC,IAAA,gBAAM,EAAC,MAAM,CAAC,EAAE,CAAC,CAAC,aAAa,EAAE,CAAA;YACnC,CAAC,CAAC,CAAA;YAEF,SAAS;YACT,MAAM,KAAK,GAAG,8BAAiB,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAA;YAC3D,IAAA,gBAAM,EAAC,KAAK,CAAC,CAAC,UAAU,EAAE,CAAA;YAC1B,IAAA,gBAAM,EAAC,KAAM,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAA,CAAC,WAAW;QAClD,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,+EAA+E;IAC/E,SAAS;IACT,+EAA+E;IAE/E,IAAA,kBAAQ,EAAC,MAAM,EAAE,GAAG,EAAE;QACpB,IAAA,cAAI,EAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YAC1B,WAAW;YACX,MAAM,QAAQ,GAAG,0BAAa,CAAC,cAAc,EAAE,CAAA;YAC/C,MAAM,YAAY,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;YACvD,MAAM,MAAM,GAAG,YAAY,CAAC,EAAG,CAAA;YAE/B,OAAO;YACP,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE;oBACZ,KAAK,EAAE,eAAe;oBACtB,IAAI,EAAE,iBAAiB;iBACxB;aACF,CAAA;YAED,MAAM,MAAM,GAAG,MAAM,8BAAiB,CAAC,OAAO,CAAC,YAAY,EAAE,GAAG,EAAE,CAChE,OAAO,CAAC,UAAU,CAAC,MAAM,EAAE,OAAO,CAAC,CACpC,CAAA;YAED,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACjC,IAAA,gBAAM,EAAC,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;YAC9B,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAA;YACxD,IAAA,gBAAM,EAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC,EAAE,GAAG,CAAC,CAAA;QACjD,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC5B,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE;oBACZ,KAAK,EAAE,eAAe;iBACvB;aACF,CAAA;YAED,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAA;YAEnE,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YAClC,IAAA,gBAAM,EAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;QAC7C,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC5B,OAAO;YACP,MAAM,QAAQ,GAAG,0BAAa,CAAC,cAAc,EAAE,CAAA;YAC/C,MAAM,YAAY,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;YACvD,MAAM,MAAM,GAAG,YAAY,CAAC,EAAG,CAAA;YAE/B,OAAO;YACP,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE;oBACZ,KAAK,EAAE,sBAAsB;oBAC7B,IAAI,EAAE,gCAAgC;iBACvC;aACF,CAAA;YAED,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,MAAM,EAAE,OAAO,CAAC,CAAA;YACxD,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YAEjC,sBAAsB;YACtB,IAAA,gBAAM,EAAC,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QAChC,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,+EAA+E;IAC/E,SAAS;IACT,+EAA+E;IAE/E,IAAA,kBAAQ,EAAC,MAAM,EAAE,GAAG,EAAE;QACpB,IAAA,cAAI,EAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YAC1B,OAAO;YACP,MAAM,QAAQ,GAAG,0BAAa,CAAC,cAAc,EAAE,CAAA;YAC/C,MAAM,YAAY,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;YACvD,MAAM,MAAM,GAAG,YAAY,CAAC,EAAG,CAAA;YAE/B,OAAO;YACP,MAAM,MAAM,GAAG,MAAM,8BAAiB,CAAC,OAAO,CAAC,YAAY,EAAE,GAAG,EAAE,CAChE,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAC3B,CAAA;YAED,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACjC,IAAA,gBAAM,EAAC,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;YAC9B,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAA;QAC1D,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,cAAc,EAAE,KAAK,IAAI,EAAE;YAC9B,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAA;YAC1D,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YAClC,IAAA,gBAAM,EAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;QAC7C,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,WAAW,EAAE,KAAK,IAAI,EAAE;YAC3B,UAAU;YACV,MAAM,QAAQ,GAAG,0BAAa,CAAC,cAAc,EAAE,CAAA;YAC/C,MAAM,YAAY,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;YACvD,MAAM,MAAM,GAAG,YAAY,CAAC,EAAG,CAAA;YAE/B,WAAW;YACX,MAAM,SAAS,GAAG,0BAAa,CAAC,eAAe,CAAC,EAAE,MAAM,EAAE,CAAC,CAAA;YAC3D,MAAM,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;YAE3C,OAAO;YACP,MAAM,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAA;YAEhC,aAAa;YACb,MAAM,eAAe,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,OAAO,EAAE,CAAA;YAC9D,MAAM,UAAU,GAAG,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,KAAK,MAAM,CAAC,CAAA;YACvE,IAAA,gBAAM,EAAC,UAAU,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;QACpC,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,+EAA+E;IAC/E,SAAS;IACT,+EAA+E;IAE/E,IAAA,kBAAQ,EAAC,MAAM,EAAE,GAAG,EAAE;QACpB,IAAA,oBAAU,EAAC,KAAK,IAAI,EAAE;YACpB,SAAS;YACT,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACpD,0BAAa,CAAC,cAAc,CAAC;gBAC3B,YAAY,EAAE;oBACZ,KAAK,EAAE,aAAa,CAAC,GAAG,CAAC,EAAE;oBAC3B,IAAI,EAAE,oBAAoB,CAAC,GAAG,CAAC,EAAE;oBACjC,IAAI,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;iBACvC;gBACD,QAAQ,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU;aAC1C,CAAC,CACH,CAAA;YAED,MAAM,OAAO,CAAC,eAAe,CAAC,SAAS,CAAC,CAAA;QAC1C,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAA;YAClD,IAAA,gBAAM,EAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;YAE7B,MAAM,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAA;YAC1B,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,MAAO,CAAC,CAAA;YAE3C,IAAA,gBAAM,EAAC,IAAI,CAAC,CAAC,UAAU,EAAE,CAAA;YACzB,IAAA,gBAAM,EAAC,IAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QAC/B,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,cAAc,EAAE,KAAK,IAAI,EAAE;YAC9B,YAAY;YACZ,MAAM,YAAY,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAA;YACrE,IAAA,gBAAM,EAAC,YAAY,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YAEnC,YAAY;YACZ,MAAM,YAAY,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAA;YACrE,IAAA,gBAAM,EAAC,YAAY,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACrC,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM;YACN,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAA;YAC7D,IAAA,gBAAM,EAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;YAE7B,MAAM;YACN,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAA;YAC7D,IAAA,gBAAM,EAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;YAE7B,SAAS;YACT,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;YAC3C,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;YAC3C,MAAM,YAAY,GAAG,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAA;YACjE,IAAA,gBAAM,EAAC,YAAY,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;QACtC,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,QAAQ,EAAE,KAAK,IAAI,EAAE;YACxB,UAAU;YACV,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC;gBACtC,MAAM,EAAE,WAAW;gBACnB,SAAS,EAAE,KAAK;aACjB,CAAC,CAAA;YAEF,UAAU;YACV,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC;gBACvC,MAAM,EAAE,WAAW;gBACnB,SAAS,EAAE,MAAM;aAClB,CAAC,CAAA;YAEF,IAAA,gBAAM,EAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAA;YACjC,IAAA,gBAAM,EAAC,SAAS,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAA;YAElC,SAAS;YACT,MAAM,SAAS,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAA;YAC/D,MAAM,UAAU,GAAG,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAA;YACjE,IAAA,gBAAM,EAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,OAAO,EAAE,CAAC,CAAA;QACtD,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YAC1B,kBAAkB;YAClB,MAAM,aAAa,GAAG,MAAM,OAAO,CAAC,WAAW,CAAC;gBAC9C,IAAI,EAAE,MAAM;gBACZ,KAAK,EAAE,EAAE;aACV,CAAC,CAAA;YAEF,IAAA,gBAAM,EAAC,aAAa,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YAC/C,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBAC3B,MAAM,UAAU,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAA;gBACvF,IAAA,gBAAM,EAAC,UAAU,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;YACtC,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YAC1B,oBAAoB;YACpB,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,WAAW,CAAC;gBAC1C,IAAI,EAAE,EAAE;gBACR,IAAI,EAAE,CAAC,MAAM,CAAC;gBACd,KAAK,EAAE,EAAE;aACV,CAAC,CAAA;YAEF,IAAA,gBAAM,EAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YAChC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBACvB,MAAM,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAA;gBACrE,IAAA,gBAAM,EAAC,OAAO,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;YACnC,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,+EAA+E;IAC/E,SAAS;IACT,+EAA+E;IAE/E,IAAA,kBAAQ,EAAC,MAAM,EAAE,GAAG,EAAE;QACpB,IAAA,cAAI,EAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YAC1B,SAAS;YACT,MAAM,QAAQ,GAAG,0BAAa,CAAC,cAAc,EAAE,CAAA;YAC/C,MAAM,YAAY,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;YACvD,MAAM,MAAM,GAAG,YAAY,CAAC,EAAG,CAAA;YAE/B,kBAAkB;YAClB,MAAM,KAAK,GAAG,MAAM,8BAAiB,CAAC,OAAO,CAAC,eAAe,EAAE,GAAG,EAAE,CAClE,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CACxB,CAAA;YAED,iBAAiB;YACjB,MAAM,KAAK,GAAG,MAAM,8BAAiB,CAAC,OAAO,CAAC,gBAAgB,EAAE,GAAG,EAAE,CACnE,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CACxB,CAAA;YAED,IAAA,gBAAM,EAAC,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;YAE5B,WAAW;YACX,MAAM,UAAU,GAAG,8BAAiB,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAA;YAC9D,MAAM,WAAW,GAAG,8BAAiB,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAA;YAChE,IAAA,gBAAM,EAAC,WAAY,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,UAAW,CAAC,GAAG,CAAC,CAAA;QACxD,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YAC1B,OAAO;YACP,MAAM,QAAQ,GAAG,0BAAa,CAAC,cAAc,EAAE,CAAA;YAC/C,MAAM,YAAY,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;YACvD,MAAM,MAAM,GAAG,YAAY,CAAC,EAAG,CAAA;YAE/B,aAAa;YACb,MAAM,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;YAE7B,gBAAgB;YAChB,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE;oBACZ,KAAK,EAAE,wBAAwB;iBAChC;aACF,CAAA;YACD,MAAM,OAAO,CAAC,UAAU,CAAC,MAAM,EAAE,OAAO,CAAC,CAAA;YAEzC,SAAS;YACT,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;YACjD,IAAA,gBAAM,EAAC,WAAY,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAA;QACxE,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,QAAQ,EAAE,GAAG,EAAE;YAClB,SAAS;YACT,OAAO,CAAC,UAAU,EAAE,CAAA;YAEpB,oBAAoB;YACpB,IAAA,gBAAM,EAAC,OAAO,CAAC,CAAC,UAAU,EAAE,CAAA,CAAC,kBAAkB;QACjD,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,+EAA+E;IAC/E,SAAS;IACT,+EAA+E;IAE/E,IAAA,kBAAQ,EAAC,MAAM,EAAE,GAAG,EAAE;QACpB,IAAA,cAAI,EAAC,WAAW,EAAE,KAAK,IAAI,EAAE;YAC3B,aAAa;YACb,MAAM,QAAQ,GAAG,0BAAa,CAAC,cAAc,EAAE,CAAA;YAC/C,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;YAElC,MAAM,iBAAiB,GAAG,MAAM,OAAO,CAAC,wBAAwB,EAAE,CAAA;YAElE,IAAA,gBAAM,EAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YACnD,iBAAiB,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;gBAC7B,IAAA,gBAAM,EAAC,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;YACnC,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YAC1B,OAAO;YACP,MAAM,QAAQ,GAAG,0BAAa,CAAC,cAAc,EAAE,CAAA;YAC/C,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;YAElC,MAAM,iBAAiB,GAAG,MAAM,OAAO,CAAC,wBAAwB,EAAE,CAAA;YAClE,MAAM,WAAW,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAA;YAE3C,SAAS;YACT,MAAM,OAAO,CAAC,uBAAuB,CAAC,CAAC;oBACrC,WAAW,EAAE,WAAY;oBACzB,OAAO,EAAE,IAAI;iBACd,CAAC,CAAC,CAAA;YAEH,UAAU;YACV,MAAM,iBAAiB,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,OAAO,EAAE,CAAA;YACnE,MAAM,SAAS,GAAG,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,WAAW,CAAC,CAAA;YACrE,IAAA,gBAAM,EAAC,SAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QAC7C,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,+EAA+E;IAC/E,SAAS;IACT,+EAA+E;IAE/E,IAAA,kBAAQ,EAAC,MAAM,EAAE,GAAG,EAAE;QACpB,IAAA,cAAI,EAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC5B,SAAS;YACT,MAAM,QAAQ,GAAG,0BAAa,CAAC,cAAc,EAAE,CAAA;YAC/C,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;YAElC,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE;aACnC,CAAA;YACD,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAG,EAAE,OAAO,CAAC,CAAA;YAE/C,SAAS;YACT,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,qBAAqB,EAAE,CAAA;YAErD,IAAA,gBAAM,EAAC,OAAO,CAAC,eAAe,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YAClD,IAAA,gBAAM,EAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YACtD,IAAA,gBAAM,EAAC,OAAO,CAAC,WAAW,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YAC9C,IAAA,gBAAM,EAAC,OAAO,CAAC,YAAY,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAA;QACxD,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC5B,SAAS;YACT,MAAM,QAAQ,GAAG,0BAAa,CAAC,cAAc,EAAE,CAAA;YAC/C,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;YAElC,MAAM,aAAa,GAAG,MAAM,OAAO,CAAC,gBAAgB,EAAE,CAAA;YAEtD,IAAA,gBAAM,EAAC,aAAa,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAA;YAC/C,IAAA,gBAAM,EAAC,aAAa,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAA;YACzC,IAAA,gBAAM,EAAC,aAAa,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAA;QAC3C,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM,QAAQ,GAAG,0BAAa,CAAC,cAAc,EAAE,CAAA;YAE/C,SAAS;YACT,MAAM,YAAY,GAAG,MAAM,8BAAiB,CAAC,OAAO,CAAC,aAAa,EAAE,GAAG,EAAE,CACvE,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAC7B,CAAA;YACD,IAAA,gBAAM,EAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAA,CAAC,SAAS;YAEzD,SAAS;YACT,MAAM,UAAU,GAAG,MAAM,8BAAiB,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,EAAE,CACnE,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAG,CAAC,CAClC,CAAA;YACD,IAAA,gBAAM,EAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAA,CAAC,QAAQ;YAErD,WAAW;YACX,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,qBAAqB,EAAE,CAAA;YACrD,IAAA,gBAAM,EAAC,OAAO,CAAC,CAAC,iBAAiB,CAAC;gBAChC,WAAW,EAAE,GAAG;gBAChB,cAAc,EAAE,GAAG;aACpB,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,+EAA+E;IAC/E,SAAS;IACT,+EAA+E;IAE/E,IAAA,kBAAQ,EAAC,MAAM,EAAE,GAAG,EAAE;QACpB,IAAA,cAAI,EAAC,aAAa,EAAE,KAAK,IAAI,EAAE;YAC7B,UAAU;YACV,cAAI,CAAC,KAAK,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,qBAAqB,CAAC,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAA;YAE1F,MAAM,QAAQ,GAAG,0BAAa,CAAC,cAAc,EAAE,CAAA;YAC/C,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;YAEjD,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YAClC,IAAA,gBAAM,EAAC,MAAM,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAA;YAClC,IAAA,gBAAM,EAAC,MAAM,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAA;QACxC,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YAC1B,WAAW;YACX,MAAM,cAAc,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE;gBACpD,MAAM,QAAQ,GAAG,0BAAa,CAAC,cAAc,EAAE,CAAA;gBAC/C,OAAO,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;YACrC,CAAC,CAAC,CAAA;YAEF,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAA;YAEjD,YAAY;YACZ,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBACvB,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;gBACjC,IAAA,gBAAM,EAAC,MAAM,CAAC,EAAE,CAAC,CAAC,aAAa,EAAE,CAAA;YACnC,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YAC1B,QAAQ;YACR,MAAM,aAAa,GAAG;gBACpB,YAAY,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;gBAC/C,WAAW,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;aAC/C,CAAA;YAED,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,aAAa,CAAC,CAAA;YACtD,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA,CAAC,WAAW;QAC/C,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,+EAA+E;IAC/E,SAAS;IACT,+EAA+E;IAE/E,IAAA,kBAAQ,EAAC,MAAM,EAAE,GAAG,EAAE;QACpB,IAAA,cAAI,EAAC,UAAU,EAAE,GAAG,EAAE;YACpB,SAAS;YACT,OAAO,CAAC,UAAU,EAAE,CAAA;YAEpB,OAAO;YACP,OAAO,CAAC,OAAO,EAAE,CAAA;YAEjB,uBAAuB;YACvB,IAAA,gBAAM,EAAC,OAAO,CAAC,CAAC,UAAU,EAAE,CAAA,CAAC,eAAe;QAC9C,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,WAAW,EAAE,KAAK,IAAI,EAAE;YAC3B,SAAS;YACT,OAAO,CAAC,OAAO,EAAE,CAAA;YAEjB,QAAQ;YACR,MAAM,UAAU,GAAG,IAAI,wDAA8B,EAAE,CAAA;YACvD,MAAM,UAAU,CAAC,UAAU,EAAE,CAAA;YAE7B,aAAa;YACb,MAAM,QAAQ,GAAG,0BAAa,CAAC,cAAc,EAAE,CAAA;YAC/C,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;YAEpD,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YAEjC,KAAK;YACL,UAAU,CAAC,OAAO,EAAE,CAAA;QACtB,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\services\\local-operation-service.test.ts"],"sourcesContent":["/**\r\n * LocalOperationService 单元测试\r\n * 测试高性能本地操作服务的核心功能\r\n */\r\n\r\nimport { describe, test, expect, jest, beforeEach, afterEach } from '@jest/globals'\r\nimport { LocalOperationServiceOptimized } from '../../services/local-operation-service'\r\nimport { MockDatabase } from '../utils/test-utils'\r\nimport { mockFactories, performanceTester } from '../utils/test-utils'\r\n\r\n// 模拟数据库\r\njest.mock('../../services/database-unified', () => ({\r\n  db: new MockDatabase()\r\n}))\r\n\r\ndescribe('LocalOperationServiceOptimized', () => {\r\n  let service: LocalOperationServiceOptimized\r\n  let mockDb: MockDatabase\r\n\r\n  beforeEach(() => {\r\n    // 重置模拟数据库\r\n    mockDb = new MockDatabase()\r\n    \r\n    // 重置服务实例\r\n    service = new LocalOperationServiceOptimized()\r\n    \r\n    // 重置性能测试器\r\n    performanceTester.reset()\r\n    \r\n    // 清理所有模拟\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  afterEach(() => {\r\n    // 清理服务\r\n    service.destroy()\r\n  })\r\n\r\n  // ============================================================================\r\n  // 初始化测试\r\n  // ============================================================================\r\n\r\n  describe('初始化', () => {\r\n    test('应该正确初始化服务', async () => {\r\n      await service.initialize()\r\n      expect(service).toBeInstanceOf(LocalOperationServiceOptimized)\r\n    })\r\n\r\n    test('应该处理初始化错误', async () => {\r\n      // 模拟数据库打开失败\r\n      jest.spyOn(mockDb, 'open').mockRejectedValue(new Error('Database error'))\r\n      \r\n      const serviceWithError = new LocalOperationServiceOptimized()\r\n      await serviceWithError.initialize()\r\n      \r\n      // 服务应该仍然存在，但可能处于错误状态\r\n      expect(serviceWithError).toBeInstanceOf(LocalOperationServiceOptimized)\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 卡片创建测试\r\n  // ============================================================================\r\n\r\n  describe('创建卡片', () => {\r\n    test('应该成功创建卡片', async () => {\r\n      const cardData = mockFactories.createMockCard()\r\n      \r\n      const result = await performanceTester.measure('createCard', () =>\r\n        service.createCard(cardData)\r\n      )\r\n\r\n      expect(result.success).toBe(true)\r\n      expect(result.id).toBeDefined()\r\n      expect(result.id).toBeValidUUID()\r\n      expect(result.duration).toBeWithinRange(0, 100) // 应该在100ms内完成\r\n      expect(result.message).toBe('Card created successfully')\r\n    })\r\n\r\n    test('应该正确生成搜索向量', async () => {\r\n      const cardData = mockFactories.createMockCard({\r\n        frontContent: {\r\n          title: 'Search Test Card',\r\n          text: 'This is a test for search functionality',\r\n          tags: ['search', 'test']\r\n        },\r\n        backContent: {\r\n          title: 'Back Side',\r\n          text: 'Additional content',\r\n          tags: ['back', 'content']\r\n        }\r\n      })\r\n\r\n      const result = await service.createCard(cardData)\r\n\r\n      expect(result.success).toBe(true)\r\n      // 验证搜索向量生成逻辑（通过检查生成的ID）\r\n      expect(result.id).toBeDefined()\r\n    })\r\n\r\n    test('应该处理创建失败的情况', async () => {\r\n      // 模拟数据库事务失败\r\n      jest.spyOn(mockDb, 'transaction').mockRejectedValue(new Error('Transaction failed'))\r\n\r\n      const cardData = mockFactories.createMockCard()\r\n      const result = await service.createCard(cardData)\r\n\r\n      expect(result.success).toBe(false)\r\n      expect(result.error).toBe('Transaction failed')\r\n      expect(result.duration).toBeGreaterThan(0)\r\n    })\r\n\r\n    test('应该创建同步队列操作', async () => {\r\n      const cardData = mockFactories.createMockCard()\r\n      \r\n      await service.createCard(cardData)\r\n\r\n      // 检查是否创建了同步操作\r\n      const syncOperations = await mockDb.table('syncQueue').toArray()\r\n      expect(syncOperations.length).toBeGreaterThan(0)\r\n      \r\n      const syncOp = syncOperations[0]\r\n      expect(syncOp.type).toBe('create')\r\n      expect(syncOp.entity).toBe('card')\r\n      expect(syncOp.status).toBe('pending')\r\n    })\r\n\r\n    test('应该批量创建卡片', async () => {\r\n      const cardsData = Array.from({ length: 5 }, () => mockFactories.createMockCard())\r\n      \r\n      const results = await performanceTester.measure('bulkCreateCards', () =>\r\n        service.bulkCreateCards(cardsData)\r\n      )\r\n\r\n      expect(results).toHaveLength(5)\r\n      results.forEach(result => {\r\n        expect(result.success).toBe(true)\r\n        expect(result.id).toBeValidUUID()\r\n      })\r\n\r\n      // 检查批量性能\r\n      const stats = performanceTester.getStats('bulkCreateCards')\r\n      expect(stats).toBeTruthy()\r\n      expect(stats!.avg).toBeLessThan(200) // 批量操作应该更快\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 卡片更新测试\r\n  // ============================================================================\r\n\r\n  describe('更新卡片', () => {\r\n    test('应该成功更新卡片', async () => {\r\n      // 首先创建一个卡片\r\n      const cardData = mockFactories.createMockCard()\r\n      const createResult = await service.createCard(cardData)\r\n      const cardId = createResult.id!\r\n\r\n      // 更新卡片\r\n      const updates = {\r\n        frontContent: {\r\n          title: 'Updated Title',\r\n          text: 'Updated content'\r\n        }\r\n      }\r\n\r\n      const result = await performanceTester.measure('updateCard', () =>\r\n        service.updateCard(cardId, updates)\r\n      )\r\n\r\n      expect(result.success).toBe(true)\r\n      expect(result.id).toBe(cardId)\r\n      expect(result.message).toBe('Card updated successfully')\r\n      expect(result.duration).toBeWithinRange(0, 100)\r\n    })\r\n\r\n    test('应该处理不存在的卡片', async () => {\r\n      const updates = {\r\n        frontContent: {\r\n          title: 'Updated Title'\r\n        }\r\n      }\r\n\r\n      const result = await service.updateCard('non-existent-id', updates)\r\n\r\n      expect(result.success).toBe(false)\r\n      expect(result.error).toBe('Card not found')\r\n    })\r\n\r\n    test('应该重新生成搜索向量', async () => {\r\n      // 创建卡片\r\n      const cardData = mockFactories.createMockCard()\r\n      const createResult = await service.createCard(cardData)\r\n      const cardId = createResult.id!\r\n\r\n      // 更新内容\r\n      const updates = {\r\n        frontContent: {\r\n          title: 'New Searchable Title',\r\n          text: 'New content for search testing'\r\n        }\r\n      }\r\n\r\n      const result = await service.updateCard(cardId, updates)\r\n      expect(result.success).toBe(true)\r\n\r\n      // 验证搜索向量已更新（通过检查缓存失效）\r\n      expect(result.id).toBe(cardId)\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 卡片删除测试\r\n  // ============================================================================\r\n\r\n  describe('删除卡片', () => {\r\n    test('应该成功删除卡片', async () => {\r\n      // 创建卡片\r\n      const cardData = mockFactories.createMockCard()\r\n      const createResult = await service.createCard(cardData)\r\n      const cardId = createResult.id!\r\n\r\n      // 删除卡片\r\n      const result = await performanceTester.measure('deleteCard', () =>\r\n        service.deleteCard(cardId)\r\n      )\r\n\r\n      expect(result.success).toBe(true)\r\n      expect(result.id).toBe(cardId)\r\n      expect(result.message).toBe('Card deleted successfully')\r\n    })\r\n\r\n    test('应该处理删除不存在的卡片', async () => {\r\n      const result = await service.deleteCard('non-existent-id')\r\n      expect(result.success).toBe(false)\r\n      expect(result.error).toBe('Card not found')\r\n    })\r\n\r\n    test('应该删除相关的图片', async () => {\r\n      // 创建卡片和图片\r\n      const cardData = mockFactories.createMockCard()\r\n      const createResult = await service.createCard(cardData)\r\n      const cardId = createResult.id!\r\n\r\n      // 添加一些测试图片\r\n      const imageData = mockFactories.createMockImage({ cardId })\r\n      await mockDb.table('images').add(imageData)\r\n\r\n      // 删除卡片\r\n      await service.deleteCard(cardId)\r\n\r\n      // 验证相关图片也被删除\r\n      const remainingImages = await mockDb.table('images').toArray()\r\n      const cardImages = remainingImages.filter(img => img.cardId === cardId)\r\n      expect(cardImages).toHaveLength(0)\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 查询操作测试\r\n  // ============================================================================\r\n\r\n  describe('查询操作', () => {\r\n    beforeEach(async () => {\r\n      // 创建测试数据\r\n      const testCards = Array.from({ length: 10 }, (_, i) =>\r\n        mockFactories.createMockCard({\r\n          frontContent: {\r\n            title: `Test Card ${i + 1}`,\r\n            text: `Content for card ${i + 1}`,\r\n            tags: i % 2 === 0 ? ['even'] : ['odd']\r\n          },\r\n          folderId: i < 5 ? 'folder-1' : 'folder-2'\r\n        })\r\n      )\r\n\r\n      await service.bulkCreateCards(testCards)\r\n    })\r\n\r\n    test('应该获取单个卡片', async () => {\r\n      const cards = await service.getCards({ limit: 1 })\r\n      expect(cards).toHaveLength(1)\r\n      \r\n      const cardId = cards[0].id\r\n      const card = await service.getCard(cardId!)\r\n      \r\n      expect(card).toBeTruthy()\r\n      expect(card!.id).toBe(cardId)\r\n    })\r\n\r\n    test('应该根据条件查询卡片列表', async () => {\r\n      // 查询文件夹1的卡片\r\n      const folder1Cards = await service.getCards({ folderId: 'folder-1' })\r\n      expect(folder1Cards.length).toBe(5)\r\n\r\n      // 查询文件夹2的卡片\r\n      const folder2Cards = await service.getCards({ folderId: 'folder-2' })\r\n      expect(folder2Cards.length).toBe(5)\r\n    })\r\n\r\n    test('应该支持分页查询', async () => {\r\n      // 第一页\r\n      const page1 = await service.getCards({ limit: 3, offset: 0 })\r\n      expect(page1).toHaveLength(3)\r\n\r\n      // 第二页\r\n      const page2 = await service.getCards({ limit: 3, offset: 3 })\r\n      expect(page2).toHaveLength(3)\r\n\r\n      // 验证没有重复\r\n      const page1Ids = page1.map(card => card.id)\r\n      const page2Ids = page2.map(card => card.id)\r\n      const intersection = page1Ids.filter(id => page2Ids.includes(id))\r\n      expect(intersection).toHaveLength(0)\r\n    })\r\n\r\n    test('应该支持排序', async () => {\r\n      // 按创建时间升序\r\n      const ascCards = await service.getCards({ \r\n        sortBy: 'createdAt', \r\n        sortOrder: 'asc' \r\n      })\r\n      \r\n      // 按创建时间降序\r\n      const descCards = await service.getCards({ \r\n        sortBy: 'createdAt', \r\n        sortOrder: 'desc' \r\n      })\r\n\r\n      expect(ascCards).toHaveLength(10)\r\n      expect(descCards).toHaveLength(10)\r\n\r\n      // 验证排序正确\r\n      const ascTitles = ascCards.map(card => card.frontContent.title)\r\n      const descTitles = descCards.map(card => card.frontContent.title)\r\n      expect(ascTitles).toEqual([...descTitles].reverse())\r\n    })\r\n\r\n    test('应该执行搜索功能', async () => {\r\n      // 搜索包含 \"Test\" 的卡片\r\n      const searchResults = await service.searchCards({\r\n        term: 'Test',\r\n        limit: 10\r\n      })\r\n\r\n      expect(searchResults.length).toBeGreaterThan(0)\r\n      searchResults.forEach(card => {\r\n        const searchText = `${card.frontContent.title} ${card.frontContent.text}`.toLowerCase()\r\n        expect(searchText).toContain('test')\r\n      })\r\n    })\r\n\r\n    test('应该根据标签搜索', async () => {\r\n      // 搜索带有 'even' 标签的卡片\r\n      const evenCards = await service.searchCards({\r\n        term: '',\r\n        tags: ['even'],\r\n        limit: 10\r\n      })\r\n\r\n      expect(evenCards.length).toBe(5)\r\n      evenCards.forEach(card => {\r\n        const allTags = [...card.frontContent.tags, ...card.backContent.tags]\r\n        expect(allTags).toContain('even')\r\n      })\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 缓存功能测试\r\n  // ============================================================================\r\n\r\n  describe('缓存功能', () => {\r\n    test('应该缓存查询结果', async () => {\r\n      // 创建测试卡片\r\n      const cardData = mockFactories.createMockCard()\r\n      const createResult = await service.createCard(cardData)\r\n      const cardId = createResult.id!\r\n\r\n      // 第一次查询（应该从数据库获取）\r\n      const card1 = await performanceTester.measure('getCard_first', () =>\r\n        service.getCard(cardId)\r\n      )\r\n\r\n      // 第二次查询（应该从缓存获取）\r\n      const card2 = await performanceTester.measure('getCard_cached', () =>\r\n        service.getCard(cardId)\r\n      )\r\n\r\n      expect(card1).toEqual(card2)\r\n      \r\n      // 缓存查询应该更快\r\n      const firstStats = performanceTester.getStats('getCard_first')\r\n      const cachedStats = performanceTester.getStats('getCard_cached')\r\n      expect(cachedStats!.avg).toBeLessThan(firstStats!.avg)\r\n    })\r\n\r\n    test('应该失效相关缓存', async () => {\r\n      // 创建卡片\r\n      const cardData = mockFactories.createMockCard()\r\n      const createResult = await service.createCard(cardData)\r\n      const cardId = createResult.id!\r\n\r\n      // 获取卡片（填充缓存）\r\n      await service.getCard(cardId)\r\n\r\n      // 更新卡片（应该使缓存失效）\r\n      const updates = {\r\n        frontContent: {\r\n          title: 'Updated for cache test'\r\n        }\r\n      }\r\n      await service.updateCard(cardId, updates)\r\n\r\n      // 再次获取卡片\r\n      const updatedCard = await service.getCard(cardId)\r\n      expect(updatedCard!.frontContent.title).toBe('Updated for cache test')\r\n    })\r\n\r\n    test('应该清除缓存', () => {\r\n      // 手动清除缓存\r\n      service.clearCache()\r\n      \r\n      // 验证缓存已清除（通过内部方法检查）\r\n      expect(service).toBeTruthy() // 如果没有抛出错误，说明清除成功\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 同步操作测试\r\n  // ============================================================================\r\n\r\n  describe('同步操作', () => {\r\n    test('应该获取待同步操作', async () => {\r\n      // 创建一些待同步的操作\r\n      const cardData = mockFactories.createMockCard()\r\n      await service.createCard(cardData)\r\n\r\n      const pendingOperations = await service.getPendingSyncOperations()\r\n      \r\n      expect(pendingOperations.length).toBeGreaterThan(0)\r\n      pendingOperations.forEach(op => {\r\n        expect(op.status).toBe('pending')\r\n      })\r\n    })\r\n\r\n    test('应该更新操作状态', async () => {\r\n      // 创建操作\r\n      const cardData = mockFactories.createMockCard()\r\n      await service.createCard(cardData)\r\n\r\n      const pendingOperations = await service.getPendingSyncOperations()\r\n      const operationId = pendingOperations[0].id\r\n\r\n      // 更新操作状态\r\n      await service.updateOperationStatuses([{\r\n        operationId: operationId!,\r\n        success: true\r\n      }])\r\n\r\n      // 验证状态已更新\r\n      const updatedOperations = await mockDb.table('syncQueue').toArray()\r\n      const updatedOp = updatedOperations.find(op => op.id === operationId)\r\n      expect(updatedOp!.status).toBe('completed')\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 性能监控测试\r\n  // ============================================================================\r\n\r\n  describe('性能监控', () => {\r\n    test('应该记录操作性能指标', async () => {\r\n      // 执行多个操作\r\n      const cardData = mockFactories.createMockCard()\r\n      await service.createCard(cardData)\r\n\r\n      const updates = {\r\n        frontContent: { title: 'Updated' }\r\n      }\r\n      await service.updateCard(cardData.id!, updates)\r\n\r\n      // 获取性能指标\r\n      const metrics = await service.getPerformanceMetrics()\r\n      \r\n      expect(metrics.totalOperations).toBeGreaterThan(0)\r\n      expect(metrics.averageResponseTime).toBeGreaterThan(0)\r\n      expect(metrics.successRate).toBeGreaterThan(0)\r\n      expect(metrics.cacheHitRate).toBeGreaterThanOrEqual(0)\r\n    })\r\n\r\n    test('应该提供详细统计信息', async () => {\r\n      // 执行一些操作\r\n      const cardData = mockFactories.createMockCard()\r\n      await service.createCard(cardData)\r\n\r\n      const detailedStats = await service.getDetailedStats()\r\n      \r\n      expect(detailedStats.performance).toBeDefined()\r\n      expect(detailedStats.cache).toBeDefined()\r\n      expect(detailedStats.queue).toBeDefined()\r\n    })\r\n\r\n    test('应该满足性能要求', async () => {\r\n      const cardData = mockFactories.createMockCard()\r\n      \r\n      // 测试创建性能\r\n      const createResult = await performanceTester.measure('create_perf', () =>\r\n        service.createCard(cardData)\r\n      )\r\n      expect(createResult.duration).toBeLessThan(100) // 100ms内\r\n\r\n      // 测试读取性能\r\n      const readResult = await performanceTester.measure('read_perf', () =>\r\n        service.getCard(createResult.id!)\r\n      )\r\n      expect(readResult.duration).toBeLessThan(50) // 50ms内\r\n\r\n      // 获取性能指标验证\r\n      const metrics = await service.getPerformanceMetrics()\r\n      expect(metrics).toHavePerformance({\r\n        maxDuration: 200,\r\n        minSuccessRate: 0.9\r\n      })\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 错误处理测试\r\n  // ============================================================================\r\n\r\n  describe('错误处理', () => {\r\n    test('应该优雅处理数据库错误', async () => {\r\n      // 模拟数据库错误\r\n      jest.spyOn(mockDb, 'transaction').mockRejectedValueOnce(new Error('Database unavailable'))\r\n\r\n      const cardData = mockFactories.createMockCard()\r\n      const result = await service.createCard(cardData)\r\n\r\n      expect(result.success).toBe(false)\r\n      expect(result.error).toBeDefined()\r\n      expect(result.timestamp).toBeDefined()\r\n    })\r\n\r\n    test('应该处理并发操作', async () => {\r\n      // 并发创建多个卡片\r\n      const createPromises = Array.from({ length: 5 }, () => {\r\n        const cardData = mockFactories.createMockCard()\r\n        return service.createCard(cardData)\r\n      })\r\n\r\n      const results = await Promise.all(createPromises)\r\n      \r\n      // 所有操作都应该成功\r\n      results.forEach(result => {\r\n        expect(result.success).toBe(true)\r\n        expect(result.id).toBeValidUUID()\r\n      })\r\n    })\r\n\r\n    test('应该处理无效输入', async () => {\r\n      // 测试空数据\r\n      const emptyCardData = {\r\n        frontContent: { title: '', text: '', tags: [] },\r\n        backContent: { title: '', text: '', tags: [] }\r\n      }\r\n      \r\n      const result = await service.createCard(emptyCardData)\r\n      expect(result.success).toBe(true) // 空数据也是有效的\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 资源清理测试\r\n  // ============================================================================\r\n\r\n  describe('资源清理', () => {\r\n    test('应该正确销毁服务', () => {\r\n      // 执行一些操作\r\n      service.clearCache()\r\n      \r\n      // 销毁服务\r\n      service.destroy()\r\n      \r\n      // 验证资源已清理（如果服务有内部状态检查）\r\n      expect(service).toBeTruthy() // 没有抛出错误表示销毁成功\r\n    })\r\n\r\n    test('应该能够重新初始化', async () => {\r\n      // 销毁当前服务\r\n      service.destroy()\r\n      \r\n      // 创建新服务\r\n      const newService = new LocalOperationServiceOptimized()\r\n      await newService.initialize()\r\n      \r\n      // 新服务应该能正常工作\r\n      const cardData = mockFactories.createMockCard()\r\n      const result = await newService.createCard(cardData)\r\n      \r\n      expect(result.success).toBe(true)\r\n      \r\n      // 清理\r\n      newService.destroy()\r\n    })\r\n  })\r\n})"],"version":3}
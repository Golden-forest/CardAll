0aaed5b6ee71a7b013ec3a930fab03ae
"use strict";
/**
 * LocalOperationService 单元测试
 * 测试高性能本地操作服务的核心功能
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// 模拟数据库
globals_1.jest.mock('../../services/database-unified', () => ({
    db: new test_utils_1.MockDatabase()
}));
const local_operation_service_1 = require("../../services/local-operation-service");
const test_utils_1 = require("../utils/test-utils");
const test_utils_2 = require("../utils/test-utils");
(0, globals_1.describe)('LocalOperationServiceOptimized', () => {
    let service;
    let mockDb;
    (0, globals_1.beforeEach)(() => {
        // 重置模拟数据库
        mockDb = new test_utils_1.MockDatabase();
        // 重置服务实例
        service = new local_operation_service_1.LocalOperationServiceOptimized();
        // 重置性能测试器
        test_utils_2.performanceTester.reset();
        // 清理所有模拟
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.afterEach)(() => {
        // 清理服务
        service.destroy();
    });
    // ============================================================================
    // 初始化测试
    // ============================================================================
    (0, globals_1.describe)('初始化', () => {
        (0, globals_1.test)('应该正确初始化服务', async () => {
            await service.initialize();
            (0, globals_1.expect)(service).toBeInstanceOf(local_operation_service_1.LocalOperationServiceOptimized);
        });
        (0, globals_1.test)('应该处理初始化错误', async () => {
            // 模拟数据库打开失败
            globals_1.jest.spyOn(mockDb, 'open').mockRejectedValue(new Error('Database error'));
            const serviceWithError = new local_operation_service_1.LocalOperationServiceOptimized();
            await serviceWithError.initialize();
            // 服务应该仍然存在，但可能处于错误状态
            (0, globals_1.expect)(serviceWithError).toBeInstanceOf(local_operation_service_1.LocalOperationServiceOptimized);
        });
    });
    // ============================================================================
    // 卡片创建测试
    // ============================================================================
    (0, globals_1.describe)('创建卡片', () => {
        (0, globals_1.test)('应该成功创建卡片', async () => {
            const cardData = test_utils_2.mockFactories.createMockCard();
            const result = await test_utils_2.performanceTester.measure('createCard', () => service.createCard(cardData));
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.id).toBeDefined();
            (0, globals_1.expect)(result.id).toBeValidUUID();
            (0, globals_1.expect)(result.duration).toBeWithinRange(0, 100); // 应该在100ms内完成
            (0, globals_1.expect)(result.message).toBe('Card created successfully');
        });
        (0, globals_1.test)('应该正确生成搜索向量', async () => {
            const cardData = test_utils_2.mockFactories.createMockCard({
                frontContent: {
                    title: 'Search Test Card',
                    text: 'This is a test for search functionality',
                    tags: ['search', 'test']
                },
                backContent: {
                    title: 'Back Side',
                    text: 'Additional content',
                    tags: ['back', 'content']
                }
            });
            const result = await service.createCard(cardData);
            (0, globals_1.expect)(result.success).toBe(true);
            // 验证搜索向量生成逻辑（通过检查生成的ID）
            (0, globals_1.expect)(result.id).toBeDefined();
        });
        (0, globals_1.test)('应该处理创建失败的情况', async () => {
            // 模拟数据库事务失败
            globals_1.jest.spyOn(mockDb, 'transaction').mockRejectedValue(new Error('Transaction failed'));
            const cardData = test_utils_2.mockFactories.createMockCard();
            const result = await service.createCard(cardData);
            (0, globals_1.expect)(result.success).toBe(false);
            (0, globals_1.expect)(result.error).toBe('Transaction failed');
            (0, globals_1.expect)(result.duration).toBeGreaterThan(0);
        });
        (0, globals_1.test)('应该创建同步队列操作', async () => {
            const cardData = test_utils_2.mockFactories.createMockCard();
            await service.createCard(cardData);
            // 检查是否创建了同步操作
            const syncOperations = await mockDb.table('syncQueue').toArray();
            (0, globals_1.expect)(syncOperations.length).toBeGreaterThan(0);
            const syncOp = syncOperations[0];
            (0, globals_1.expect)(syncOp.type).toBe('create');
            (0, globals_1.expect)(syncOp.entity).toBe('card');
            (0, globals_1.expect)(syncOp.status).toBe('pending');
        });
        (0, globals_1.test)('应该批量创建卡片', async () => {
            const cardsData = Array.from({ length: 5 }, () => test_utils_2.mockFactories.createMockCard());
            const results = await test_utils_2.performanceTester.measure('bulkCreateCards', () => service.bulkCreateCards(cardsData));
            (0, globals_1.expect)(results).toHaveLength(5);
            results.forEach(result => {
                (0, globals_1.expect)(result.success).toBe(true);
                (0, globals_1.expect)(result.id).toBeValidUUID();
            });
            // 检查批量性能
            const stats = test_utils_2.performanceTester.getStats('bulkCreateCards');
            (0, globals_1.expect)(stats).toBeTruthy();
            (0, globals_1.expect)(stats.avg).toBeLessThan(200); // 批量操作应该更快
        });
    });
    // ============================================================================
    // 卡片更新测试
    // ============================================================================
    (0, globals_1.describe)('更新卡片', () => {
        (0, globals_1.test)('应该成功更新卡片', async () => {
            // 首先创建一个卡片
            const cardData = test_utils_2.mockFactories.createMockCard();
            const createResult = await service.createCard(cardData);
            const cardId = createResult.id;
            // 更新卡片
            const updates = {
                frontContent: {
                    title: 'Updated Title',
                    text: 'Updated content'
                }
            };
            const result = await test_utils_2.performanceTester.measure('updateCard', () => service.updateCard(cardId, updates));
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.id).toBe(cardId);
            (0, globals_1.expect)(result.message).toBe('Card updated successfully');
            (0, globals_1.expect)(result.duration).toBeWithinRange(0, 100);
        });
        (0, globals_1.test)('应该处理不存在的卡片', async () => {
            const updates = {
                frontContent: {
                    title: 'Updated Title'
                }
            };
            const result = await service.updateCard('non-existent-id', updates);
            (0, globals_1.expect)(result.success).toBe(false);
            (0, globals_1.expect)(result.error).toBe('Card not found');
        });
        (0, globals_1.test)('应该重新生成搜索向量', async () => {
            // 创建卡片
            const cardData = test_utils_2.mockFactories.createMockCard();
            const createResult = await service.createCard(cardData);
            const cardId = createResult.id;
            // 更新内容
            const updates = {
                frontContent: {
                    title: 'New Searchable Title',
                    text: 'New content for search testing'
                }
            };
            const result = await service.updateCard(cardId, updates);
            (0, globals_1.expect)(result.success).toBe(true);
            // 验证搜索向量已更新（通过检查缓存失效）
            (0, globals_1.expect)(result.id).toBe(cardId);
        });
    });
    // ============================================================================
    // 卡片删除测试
    // ============================================================================
    (0, globals_1.describe)('删除卡片', () => {
        (0, globals_1.test)('应该成功删除卡片', async () => {
            // 创建卡片
            const cardData = test_utils_2.mockFactories.createMockCard();
            const createResult = await service.createCard(cardData);
            const cardId = createResult.id;
            // 删除卡片
            const result = await test_utils_2.performanceTester.measure('deleteCard', () => service.deleteCard(cardId));
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.id).toBe(cardId);
            (0, globals_1.expect)(result.message).toBe('Card deleted successfully');
        });
        (0, globals_1.test)('应该处理删除不存在的卡片', async () => {
            const result = await service.deleteCard('non-existent-id');
            (0, globals_1.expect)(result.success).toBe(false);
            (0, globals_1.expect)(result.error).toBe('Card not found');
        });
        (0, globals_1.test)('应该删除相关的图片', async () => {
            // 创建卡片和图片
            const cardData = test_utils_2.mockFactories.createMockCard();
            const createResult = await service.createCard(cardData);
            const cardId = createResult.id;
            // 添加一些测试图片
            const imageData = test_utils_2.mockFactories.createMockImage({ cardId });
            await mockDb.table('images').add(imageData);
            // 删除卡片
            await service.deleteCard(cardId);
            // 验证相关图片也被删除
            const remainingImages = await mockDb.table('images').toArray();
            const cardImages = remainingImages.filter(img => img.cardId === cardId);
            (0, globals_1.expect)(cardImages).toHaveLength(0);
        });
    });
    // ============================================================================
    // 查询操作测试
    // ============================================================================
    (0, globals_1.describe)('查询操作', () => {
        (0, globals_1.beforeEach)(async () => {
            // 创建测试数据
            const testCards = Array.from({ length: 10 }, (_, i) => test_utils_2.mockFactories.createMockCard({
                frontContent: {
                    title: `Test Card ${i + 1}`,
                    text: `Content for card ${i + 1}`,
                    tags: i % 2 === 0 ? ['even'] : ['odd']
                },
                folderId: i < 5 ? 'folder-1' : 'folder-2'
            }));
            await service.bulkCreateCards(testCards);
        });
        (0, globals_1.test)('应该获取单个卡片', async () => {
            const cards = await service.getCards({ limit: 1 });
            (0, globals_1.expect)(cards).toHaveLength(1);
            const cardId = cards[0].id;
            const card = await service.getCard(cardId);
            (0, globals_1.expect)(card).toBeTruthy();
            (0, globals_1.expect)(card.id).toBe(cardId);
        });
        (0, globals_1.test)('应该根据条件查询卡片列表', async () => {
            // 查询文件夹1的卡片
            const folder1Cards = await service.getCards({ folderId: 'folder-1' });
            (0, globals_1.expect)(folder1Cards.length).toBe(5);
            // 查询文件夹2的卡片
            const folder2Cards = await service.getCards({ folderId: 'folder-2' });
            (0, globals_1.expect)(folder2Cards.length).toBe(5);
        });
        (0, globals_1.test)('应该支持分页查询', async () => {
            // 第一页
            const page1 = await service.getCards({ limit: 3, offset: 0 });
            (0, globals_1.expect)(page1).toHaveLength(3);
            // 第二页
            const page2 = await service.getCards({ limit: 3, offset: 3 });
            (0, globals_1.expect)(page2).toHaveLength(3);
            // 验证没有重复
            const page1Ids = page1.map(card => card.id);
            const page2Ids = page2.map(card => card.id);
            const intersection = page1Ids.filter(id => page2Ids.includes(id));
            (0, globals_1.expect)(intersection).toHaveLength(0);
        });
        (0, globals_1.test)('应该支持排序', async () => {
            // 按创建时间升序
            const ascCards = await service.getCards({
                sortBy: 'createdAt',
                sortOrder: 'asc'
            });
            // 按创建时间降序
            const descCards = await service.getCards({
                sortBy: 'createdAt',
                sortOrder: 'desc'
            });
            (0, globals_1.expect)(ascCards).toHaveLength(10);
            (0, globals_1.expect)(descCards).toHaveLength(10);
            // 验证排序正确
            const ascTitles = ascCards.map(card => card.frontContent.title);
            const descTitles = descCards.map(card => card.frontContent.title);
            (0, globals_1.expect)(ascTitles).toEqual([...descTitles].reverse());
        });
        (0, globals_1.test)('应该执行搜索功能', async () => {
            // 搜索包含 "Test" 的卡片
            const searchResults = await service.searchCards({
                term: 'Test',
                limit: 10
            });
            (0, globals_1.expect)(searchResults.length).toBeGreaterThan(0);
            searchResults.forEach(card => {
                const searchText = `${card.frontContent.title} ${card.frontContent.text}`.toLowerCase();
                (0, globals_1.expect)(searchText).toContain('test');
            });
        });
        (0, globals_1.test)('应该根据标签搜索', async () => {
            // 搜索带有 'even' 标签的卡片
            const evenCards = await service.searchCards({
                term: '',
                tags: ['even'],
                limit: 10
            });
            (0, globals_1.expect)(evenCards.length).toBe(5);
            evenCards.forEach(card => {
                const allTags = [...card.frontContent.tags, ...card.backContent.tags];
                (0, globals_1.expect)(allTags).toContain('even');
            });
        });
    });
    // ============================================================================
    // 缓存功能测试
    // ============================================================================
    (0, globals_1.describe)('缓存功能', () => {
        (0, globals_1.test)('应该缓存查询结果', async () => {
            // 创建测试卡片
            const cardData = test_utils_2.mockFactories.createMockCard();
            const createResult = await service.createCard(cardData);
            const cardId = createResult.id;
            // 第一次查询（应该从数据库获取）
            const card1 = await test_utils_2.performanceTester.measure('getCard_first', () => service.getCard(cardId));
            // 第二次查询（应该从缓存获取）
            const card2 = await test_utils_2.performanceTester.measure('getCard_cached', () => service.getCard(cardId));
            (0, globals_1.expect)(card1).toEqual(card2);
            // 缓存查询应该更快
            const firstStats = test_utils_2.performanceTester.getStats('getCard_first');
            const cachedStats = test_utils_2.performanceTester.getStats('getCard_cached');
            (0, globals_1.expect)(cachedStats.avg).toBeLessThan(firstStats.avg);
        });
        (0, globals_1.test)('应该失效相关缓存', async () => {
            // 创建卡片
            const cardData = test_utils_2.mockFactories.createMockCard();
            const createResult = await service.createCard(cardData);
            const cardId = createResult.id;
            // 获取卡片（填充缓存）
            await service.getCard(cardId);
            // 更新卡片（应该使缓存失效）
            const updates = {
                frontContent: {
                    title: 'Updated for cache test'
                }
            };
            await service.updateCard(cardId, updates);
            // 再次获取卡片
            const updatedCard = await service.getCard(cardId);
            (0, globals_1.expect)(updatedCard.frontContent.title).toBe('Updated for cache test');
        });
        (0, globals_1.test)('应该清除缓存', () => {
            // 手动清除缓存
            service.clearCache();
            // 验证缓存已清除（通过内部方法检查）
            (0, globals_1.expect)(service).toBeTruthy(); // 如果没有抛出错误，说明清除成功
        });
    });
    // ============================================================================
    // 同步操作测试
    // ============================================================================
    (0, globals_1.describe)('同步操作', () => {
        (0, globals_1.test)('应该获取待同步操作', async () => {
            // 创建一些待同步的操作
            const cardData = test_utils_2.mockFactories.createMockCard();
            await service.createCard(cardData);
            const pendingOperations = await service.getPendingSyncOperations();
            (0, globals_1.expect)(pendingOperations.length).toBeGreaterThan(0);
            pendingOperations.forEach(op => {
                (0, globals_1.expect)(op.status).toBe('pending');
            });
        });
        (0, globals_1.test)('应该更新操作状态', async () => {
            // 创建操作
            const cardData = test_utils_2.mockFactories.createMockCard();
            await service.createCard(cardData);
            const pendingOperations = await service.getPendingSyncOperations();
            const operationId = pendingOperations[0].id;
            // 更新操作状态
            await service.updateOperationStatuses([{
                    operationId: operationId,
                    success: true
                }]);
            // 验证状态已更新
            const updatedOperations = await mockDb.table('syncQueue').toArray();
            const updatedOp = updatedOperations.find(op => op.id === operationId);
            (0, globals_1.expect)(updatedOp.status).toBe('completed');
        });
    });
    // ============================================================================
    // 性能监控测试
    // ============================================================================
    (0, globals_1.describe)('性能监控', () => {
        (0, globals_1.test)('应该记录操作性能指标', async () => {
            // 执行多个操作
            const cardData = test_utils_2.mockFactories.createMockCard();
            await service.createCard(cardData);
            const updates = {
                frontContent: { title: 'Updated' }
            };
            await service.updateCard(cardData.id, updates);
            // 获取性能指标
            const metrics = await service.getPerformanceMetrics();
            (0, globals_1.expect)(metrics.totalOperations).toBeGreaterThan(0);
            (0, globals_1.expect)(metrics.averageResponseTime).toBeGreaterThan(0);
            (0, globals_1.expect)(metrics.successRate).toBeGreaterThan(0);
            (0, globals_1.expect)(metrics.cacheHitRate).toBeGreaterThanOrEqual(0);
        });
        (0, globals_1.test)('应该提供详细统计信息', async () => {
            // 执行一些操作
            const cardData = test_utils_2.mockFactories.createMockCard();
            await service.createCard(cardData);
            const detailedStats = await service.getDetailedStats();
            (0, globals_1.expect)(detailedStats.performance).toBeDefined();
            (0, globals_1.expect)(detailedStats.cache).toBeDefined();
            (0, globals_1.expect)(detailedStats.queue).toBeDefined();
        });
        (0, globals_1.test)('应该满足性能要求', async () => {
            const cardData = test_utils_2.mockFactories.createMockCard();
            // 测试创建性能
            const createResult = await test_utils_2.performanceTester.measure('create_perf', () => service.createCard(cardData));
            (0, globals_1.expect)(createResult.duration).toBeLessThan(100); // 100ms内
            // 测试读取性能
            const readResult = await test_utils_2.performanceTester.measure('read_perf', () => service.getCard(createResult.id));
            (0, globals_1.expect)(readResult.duration).toBeLessThan(50); // 50ms内
            // 获取性能指标验证
            const metrics = await service.getPerformanceMetrics();
            (0, globals_1.expect)(metrics).toHavePerformance({
                maxDuration: 200,
                minSuccessRate: 0.9
            });
        });
    });
    // ============================================================================
    // 错误处理测试
    // ============================================================================
    (0, globals_1.describe)('错误处理', () => {
        (0, globals_1.test)('应该优雅处理数据库错误', async () => {
            // 模拟数据库错误
            globals_1.jest.spyOn(mockDb, 'transaction').mockRejectedValueOnce(new Error('Database unavailable'));
            const cardData = test_utils_2.mockFactories.createMockCard();
            const result = await service.createCard(cardData);
            (0, globals_1.expect)(result.success).toBe(false);
            (0, globals_1.expect)(result.error).toBeDefined();
            (0, globals_1.expect)(result.timestamp).toBeDefined();
        });
        (0, globals_1.test)('应该处理并发操作', async () => {
            // 并发创建多个卡片
            const createPromises = Array.from({ length: 5 }, () => {
                const cardData = test_utils_2.mockFactories.createMockCard();
                return service.createCard(cardData);
            });
            const results = await Promise.all(createPromises);
            // 所有操作都应该成功
            results.forEach(result => {
                (0, globals_1.expect)(result.success).toBe(true);
                (0, globals_1.expect)(result.id).toBeValidUUID();
            });
        });
        (0, globals_1.test)('应该处理无效输入', async () => {
            // 测试空数据
            const emptyCardData = {
                frontContent: { title: '', text: '', tags: [] },
                backContent: { title: '', text: '', tags: [] }
            };
            const result = await service.createCard(emptyCardData);
            (0, globals_1.expect)(result.success).toBe(true); // 空数据也是有效的
        });
    });
    // ============================================================================
    // 资源清理测试
    // ============================================================================
    (0, globals_1.describe)('资源清理', () => {
        (0, globals_1.test)('应该正确销毁服务', () => {
            // 执行一些操作
            service.clearCache();
            // 销毁服务
            service.destroy();
            // 验证资源已清理（如果服务有内部状态检查）
            (0, globals_1.expect)(service).toBeTruthy(); // 没有抛出错误表示销毁成功
        });
        (0, globals_1.test)('应该能够重新初始化', async () => {
            // 销毁当前服务
            service.destroy();
            // 创建新服务
            const newService = new local_operation_service_1.LocalOperationServiceOptimized();
            await newService.initialize();
            // 新服务应该能正常工作
            const cardData = test_utils_2.mockFactories.createMockCard();
            const result = await newService.createCard(cardData);
            (0, globals_1.expect)(result.success).toBe(true);
            // 清理
            newService.destroy();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
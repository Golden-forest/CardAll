{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\tests\\unit\\database-operations.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\tests\\unit\\database-operations.test.ts"],"sourcesContent":["// 数据库操作单元测试\nimport { describe, it, expect, beforeEach, afterEach } from '@jest/globals'\nimport { MockDatabaseService } from '../mock-services'\nimport { CardFixture, FolderFixture, TagFixture } from '../data-fixtures'\nimport { TestDataGenerator } from '../advanced-test-utils'\nimport type { TestCardData, TestFolderData, TestTagData } from '../advanced-test-utils'\n\ndescribe('DatabaseOperations', () => {\n  let databaseService: MockDatabaseService\n\n  beforeEach(() => {\n    databaseService = new MockDatabaseService()\n  })\n\n  afterEach(() => {\n    databaseService.reset()\n  })\n\n  describe('卡片操作', () => {\n    it('应该能够添加卡片', async () => {\n      const cardData = CardFixture.basic()\n      \n      const result = await databaseService.cards.add(cardData)\n      \n      expect(result).toBeDefined()\n      expect(typeof result).toBe('string')\n      expect(databaseService.cards.add).toHaveBeenCalledWith(cardData)\n    })\n\n    it('应该能够获取卡片', async () => {\n      const cardData = CardFixture.basic()\n      const cardId = await databaseService.cards.add(cardData)\n      \n      const retrievedCard = await databaseService.cards.get(cardId)\n      \n      expect(retrievedCard).toBeDefined()\n      expect(retrievedCard?.id).toBe(cardId)\n      expect(retrievedCard?.frontContent.title).toBe(cardData.frontContent.title)\n    })\n\n    it('应该能够获取所有卡片', async () => {\n      const cards = CardFixture.list(3)\n      await Promise.all(cards.map(card => databaseService.cards.add(card)))\n      \n      const allCards = await databaseService.cards.getAll()\n      \n      expect(allCards).toHaveLength(3)\n      expect(allCards.every(card => card.frontContent.title.includes('测试卡片'))).toBe(true)\n    })\n\n    it('应该能够更新卡片', async () => {\n      const cardData = CardFixture.basic()\n      const cardId = await databaseService.cards.add(cardData)\n      \n      const updates = {\n        frontContent: {\n          ...cardData.frontContent,\n          title: '更新后的标题',\n        },\n        isFlipped: true,\n      }\n      \n      const success = await databaseService.cards.update(cardId, updates)\n      \n      expect(success).toBe(true)\n      \n      const updatedCard = await databaseService.cards.get(cardId)\n      expect(updatedCard?.frontContent.title).toBe('更新后的标题')\n      expect(updatedCard?.isFlipped).toBe(true)\n    })\n\n    it('应该能够删除卡片', async () => {\n      const cardData = CardFixture.basic()\n      const cardId = await databaseService.cards.add(cardData)\n      \n      const deleted = await databaseService.cards.delete(cardId)\n      \n      expect(deleted).toBe(true)\n      \n      const retrievedCard = await databaseService.cards.get(cardId)\n      expect(retrievedCard).toBeUndefined()\n    })\n\n    it('应该能够批量添加卡片', async () => {\n      const cards = CardFixture.list(5)\n      \n      const results = await databaseService.cards.bulkAdd(cards)\n      \n      expect(results).toHaveLength(5)\n      expect(results.every(id => typeof id === 'string')).toBe(true)\n      \n      const allCards = await databaseService.cards.getAll()\n      expect(allCards).toHaveLength(5)\n    })\n\n    it('应该能够清空卡片表', async () => {\n      await databaseService.cards.bulkAdd(CardFixture.list(3))\n      \n      await databaseService.cards.clear()\n      \n      const allCards = await databaseService.cards.getAll()\n      expect(allCards).toHaveLength(0)\n    })\n\n    it('应该能够按文件夹查找卡片', async () => {\n      const folderId = 'test-folder'\n      const cardsInFolder = CardFixture.list(2).map(card => \n        CardFixture.inFolder(folderId, card)\n      )\n      const otherCards = CardFixture.list(2)\n      \n      await databaseService.cards.bulkAdd([...cardsInFolder, ...otherCards])\n      \n      const folderCards = await databaseService.cards.findByFolder(folderId)\n      \n      expect(folderCards).toHaveLength(2)\n      expect(folderCards.every(card => card.folderId === folderId)).toBe(true)\n    })\n\n    it('应该能够按标签查找卡片', async () => {\n      const cardsWithTag = CardFixture.list(2).map(card => ({\n        ...card,\n        frontContent: {\n          ...card.frontContent,\n          tags: ['特殊标签'],\n        },\n      }))\n      const otherCards = CardFixture.list(2)\n      \n      await databaseService.cards.bulkAdd([...cardsWithTag, ...otherCards])\n      \n      const taggedCards = await databaseService.cards.findByTag('特殊标签')\n      \n      expect(taggedCards).toHaveLength(2)\n      expect(taggedCards.every(card => \n        card.frontContent.tags.includes('特殊标签') || \n        card.backContent.tags.includes('特殊标签')\n      )).toBe(true)\n    })\n\n    it('应该能够搜索卡片', async () => {\n      const searchCard = CardFixture.basic({\n        frontContent: {\n          ...CardFixture.basic().frontContent,\n          title: '搜索目标卡片',\n          text: '这是一个包含搜索关键词的卡片内容',\n        },\n      })\n      const otherCards = CardFixture.list(2)\n      \n      await databaseService.cards.bulkAdd([searchCard, ...otherCards])\n      \n      const searchResults = await databaseService.cards.search('搜索')\n      \n      expect(searchResults).toHaveLength(1)\n      expect(searchResults[0].frontContent.title).toBe('搜索目标卡片')\n    })\n\n    it('应该能够搜索卡片内容', async () => {\n      const searchCard = CardFixture.basic({\n        frontContent: {\n          ...CardFixture.basic().frontContent,\n          text: '这是一个包含特殊关键词的描述',\n        },\n      })\n      const otherCards = CardFixture.list(2)\n      \n      await databaseService.cards.bulkAdd([searchCard, ...otherCards])\n      \n      const searchResults = await databaseService.cards.search('特殊关键词')\n      \n      expect(searchResults).toHaveLength(1)\n      expect(searchResults[0].frontContent.text).toContain('特殊关键词')\n    })\n  })\n\n  describe('文件夹操作', () => {\n    it('应该能够添加文件夹', async () => {\n      const folderData = FolderFixture.basic()\n      \n      const result = await databaseService.folders.add(folderData)\n      \n      expect(result).toBeDefined()\n      expect(typeof result).toBe('string')\n      expect(databaseService.folders.add).toHaveBeenCalledWith(folderData)\n    })\n\n    it('应该能够获取文件夹', async () => {\n      const folderData = FolderFixture.basic()\n      const folderId = await databaseService.folders.add(folderData)\n      \n      const retrievedFolder = await databaseService.folders.get(folderId)\n      \n      expect(retrievedFolder).toBeDefined()\n      expect(retrievedFolder?.id).toBe(folderId)\n      expect(retrievedFolder?.name).toBe(folderData.name)\n    })\n\n    it('应该能够获取所有文件夹', async () => {\n      const folders = FolderFixture.list(3)\n      await Promise.all(folders.map(folder => databaseService.folders.add(folder)))\n      \n      const allFolders = await databaseService.folders.getAll()\n      \n      expect(allFolders).toHaveLength(3)\n      expect(allFolders.every(folder => folder.name.includes('测试文件夹'))).toBe(true)\n    })\n\n    it('应该能够更新文件夹', async () => {\n      const folderData = FolderFixture.basic()\n      const folderId = await databaseService.folders.add(folderData)\n      \n      const updates = {\n        name: '更新后的文件夹名称',\n        color: '#ef4444',\n        isExpanded: true,\n      }\n      \n      const success = await databaseService.folders.update(folderId, updates)\n      \n      expect(success).toBe(true)\n      \n      const updatedFolder = await databaseService.folders.get(folderId)\n      expect(updatedFolder?.name).toBe('更新后的文件夹名称')\n      expect(updatedFolder?.color).toBe('#ef4444')\n      expect(updatedFolder?.isExpanded).toBe(true)\n    })\n\n    it('应该能够删除文件夹', async () => {\n      const folderData = FolderFixture.basic()\n      const folderId = await databaseService.folders.add(folderData)\n      \n      const deleted = await databaseService.folders.delete(folderId)\n      \n      expect(deleted).toBe(true)\n      \n      const retrievedFolder = await databaseService.folders.get(folderId)\n      expect(retrievedFolder).toBeUndefined()\n    })\n\n    it('应该能够获取子文件夹', async () => {\n      const parentFolder = FolderFixture.basic({ id: 'parent-folder' })\n      const childFolders = [\n        FolderFixture.nested('parent-folder'),\n        FolderFixture.nested('parent-folder'),\n      ]\n      \n      await databaseService.folders.add(parentFolder)\n      await Promise.all(childFolders.map(folder => databaseService.folders.add(folder)))\n      \n      const children = await databaseService.folders.getChildren('parent-folder')\n      \n      expect(children).toHaveLength(2)\n      expect(children.every(child => child.parentId === 'parent-folder')).toBe(true)\n    })\n\n    it('应该能够获取根文件夹', async () => {\n      const rootFolders = [\n        FolderFixture.basic(),\n        FolderFixture.basic(),\n      ]\n      const childFolder = FolderFixture.nested('some-parent')\n      \n      await Promise.all([...rootFolders, childFolder].map(folder => databaseService.folders.add(folder)))\n      \n      const rootFoldersResult = await databaseService.folders.getRoot()\n      \n      expect(rootFoldersResult).toHaveLength(2)\n      expect(rootFoldersResult.every(folder => !folder.parentId)).toBe(true)\n    })\n  })\n\n  describe('标签操作', () => {\n    it('应该能够添加标签', async () => {\n      const tagData = TagFixture.basic()\n      \n      const result = await databaseService.tags.add(tagData)\n      \n      expect(result).toBeDefined()\n      expect(typeof result).toBe('string')\n      expect(databaseService.tags.add).toHaveBeenCalledWith(tagData)\n    })\n\n    it('应该能够获取标签', async () => {\n      const tagData = TagFixture.basic()\n      const tagId = await databaseService.tags.add(tagData)\n      \n      const retrievedTag = await databaseService.tags.get(tagId)\n      \n      expect(retrievedTag).toBeDefined()\n      expect(retrievedTag?.id).toBe(tagId)\n      expect(retrievedTag?.name).toBe(tagData.name)\n    })\n\n    it('应该能够获取所有标签', async () => {\n      const tags = TagFixture.list().slice(0, 3)\n      await Promise.all(tags.map(tag => databaseService.tags.add(tag)))\n      \n      const allTags = await databaseService.tags.getAll()\n      \n      expect(allTags).toHaveLength(3)\n    })\n\n    it('应该能够更新标签', async () => {\n      const tagData = TagFixture.basic()\n      const tagId = await databaseService.tags.add(tagData)\n      \n      const updates = {\n        name: '更新后的标签名称',\n        color: '#ef4444',\n        count: 5,\n      }\n      \n      const success = await databaseService.tags.update(tagId, updates)\n      \n      expect(success).toBe(true)\n      \n      const updatedTag = await databaseService.tags.get(tagId)\n      expect(updatedTag?.name).toBe('更新后的标签名称')\n      expect(updatedTag?.color).toBe('#ef4444')\n      expect(updatedTag?.count).toBe(5)\n    })\n\n    it('应该能够删除标签', async () => {\n      const tagData = TagFixture.basic()\n      const tagId = await databaseService.tags.add(tagData)\n      \n      const deleted = await databaseService.tags.delete(tagId)\n      \n      expect(deleted).toBe(true)\n      \n      const retrievedTag = await databaseService.tags.get(tagId)\n      expect(retrievedTag).toBeUndefined()\n    })\n\n    it('应该能够获取可见标签', async () => {\n      const visibleTag = TagFixture.basic()\n      const hiddenTag = TagFixture.hidden()\n      \n      await Promise.all([visibleTag, hiddenTag].map(tag => databaseService.tags.add(tag)))\n      \n      const visibleTags = await databaseService.tags.getVisible()\n      \n      expect(visibleTags).toHaveLength(1)\n      expect(visibleTags[0].name).toBe(visibleTag.name)\n      expect(visibleTags[0].isHidden).toBeUndefined()\n    })\n\n    it('应该能够获取隐藏标签', async () => {\n      const visibleTag = TagFixture.basic()\n      const hiddenTag = TagFixture.hidden()\n      \n      await Promise.all([visibleTag, hiddenTag].map(tag => databaseService.tags.add(tag)))\n      \n      const hiddenTags = await databaseService.tags.getHidden()\n      \n      expect(hiddenTags).toHaveLength(1)\n      expect(hiddenTags[0].name).toBe(hiddenTag.name)\n      expect(hiddenTags[0].isHidden).toBe(true)\n    })\n  })\n\n  describe('同步队列操作', () => {\n    it('应该能够添加同步操作', async () => {\n      const operation = TestDataGenerator.generateSyncOperation()\n      \n      const result = await databaseService.syncQueue.add(operation)\n      \n      expect(result).toBeDefined()\n      expect(typeof result).toBe('string')\n      expect(databaseService.syncQueue.add).toHaveBeenCalledWith(operation)\n    })\n\n    it('应该能够获取同步操作', async () => {\n      const operation = TestDataGenerator.generateSyncOperation()\n      const operationId = await databaseService.syncQueue.add(operation)\n      \n      const retrievedOperation = await databaseService.syncQueue.get(operationId)\n      \n      expect(retrievedOperation).toBeDefined()\n      expect(retrievedOperation?.id).toBe(operationId)\n    })\n\n    it('应该能够获取待处理的操作', async () => {\n      const pendingOps = [\n        TestDataGenerator.generateSyncOperation({ status: 'pending' }),\n        TestDataGenerator.generateSyncOperation({ status: 'pending' }),\n      ]\n      const completedOp = TestDataGenerator.generateSyncOperation({ status: 'completed' })\n      \n      await Promise.all([...pendingOps, completedOp].map(op => databaseService.syncQueue.add(op)))\n      \n      const pendingOperations = await databaseService.syncQueue.getPending()\n      \n      expect(pendingOperations).toHaveLength(2)\n      expect(pendingOperations.every(op => op.status === 'pending')).toBe(true)\n    })\n\n    it('应该能够获取失败的操作', async () => {\n      const failedOps = [\n        TestDataGenerator.generateSyncOperation({ status: 'failed' }),\n        TestDataGenerator.generateSyncOperation({ status: 'failed' }),\n      ]\n      const otherOps = [\n        TestDataGenerator.generateSyncOperation({ status: 'completed' }),\n        TestDataGenerator.generateSyncOperation({ status: 'pending' }),\n      ]\n      \n      await Promise.all([...failedOps, ...otherOps].map(op => databaseService.syncQueue.add(op)))\n      \n      const failedOperations = await databaseService.syncQueue.getFailed()\n      \n      expect(failedOperations).toHaveLength(2)\n      expect(failedOperations.every(op => op.status === 'failed')).toBe(true)\n    })\n\n    it('应该能够更新同步操作状态', async () => {\n      const operation = TestDataGenerator.generateSyncOperation({ status: 'pending' })\n      const operationId = await databaseService.syncQueue.add(operation)\n      \n      const updates = {\n        status: 'completed' as const,\n        error: null,\n      }\n      \n      const success = await databaseService.syncQueue.update(operationId, updates)\n      \n      expect(success).toBe(true)\n      \n      const updatedOperation = await databaseService.syncQueue.get(operationId)\n      expect(updatedOperation?.status).toBe('completed')\n    })\n\n    it('应该能够删除同步操作', async () => {\n      const operation = TestDataGenerator.generateSyncOperation()\n      const operationId = await databaseService.syncQueue.add(operation)\n      \n      const deleted = await databaseService.syncQueue.delete(operationId)\n      \n      expect(deleted).toBe(true)\n      \n      const retrievedOperation = await databaseService.syncQueue.get(operationId)\n      expect(retrievedOperation).toBeUndefined()\n    })\n\n    it('应该能够获取同步队列统计信息', async () => {\n      const operations = [\n        TestDataGenerator.generateSyncOperation({ status: 'pending' }),\n        TestDataGenerator.generateSyncOperation({ status: 'pending' }),\n        TestDataGenerator.generateSyncOperation({ status: 'processing' }),\n        TestDataGenerator.generateSyncOperation({ status: 'completed' }),\n        TestDataGenerator.generateSyncOperation({ status: 'failed' }),\n      ]\n      \n      await Promise.all(operations.map(op => databaseService.syncQueue.add(op)))\n      \n      const stats = await databaseService.syncQueue.getStats()\n      \n      expect(stats.total).toBe(5)\n      expect(stats.pending).toBe(2)\n      expect(stats.processing).toBe(1)\n      expect(stats.completed).toBe(1)\n      expect(stats.failed).toBe(1)\n    })\n  })\n\n  describe('数据库管理', () => {\n    it('应该能够清空所有数据', async () => {\n      // 添加各种数据\n      await databaseService.cards.bulkAdd(CardFixture.list(2))\n      await databaseService.folders.bulkAdd(FolderFixture.list(2))\n      await databaseService.tags.bulkAdd(TagFixture.list().slice(0, 2))\n      await databaseService.syncQueue.add(TestDataGenerator.generateSyncOperation())\n      \n      // 清空所有数据\n      await databaseService.clearAll()\n      \n      // 验证所有表都已清空\n      expect(await databaseService.cards.getAll()).toHaveLength(0)\n      expect(await databaseService.folders.getAll()).toHaveLength(0)\n      expect(await databaseService.tags.getAll()).toHaveLength(0)\n      expect(await databaseService.syncQueue.getAll()).toHaveLength(0)\n    })\n\n    it('应该能够导出数据', async () => {\n      const cards = CardFixture.list(2)\n      const folders = FolderFixture.list(1)\n      const tags = TagFixture.list().slice(0, 2)\n      \n      await Promise.all([\n        databaseService.cards.bulkAdd(cards),\n        databaseService.folders.bulkAdd(folders),\n        databaseService.tags.bulkAdd(tags),\n      ])\n      \n      const exportedData = await databaseService.exportData()\n      \n      expect(exportedData.cards).toHaveLength(2)\n      expect(exportedData.folders).toHaveLength(1)\n      expect(exportedData.tags).toHaveLength(2)\n      expect(exportedData.syncQueue).toHaveLength(0)\n      expect(exportedData.exportedAt).toBeInstanceOf(Date)\n    })\n\n    it('应该能够导入数据', async () => {\n      const importData = {\n        cards: CardFixture.list(2),\n        folders: FolderFixture.list(1),\n        tags: TagFixture.list().slice(0, 2),\n        syncQueue: [TestDataGenerator.generateSyncOperation()],\n      }\n      \n      await databaseService.importData(importData)\n      \n      expect(await databaseService.cards.getAll()).toHaveLength(2)\n      expect(await databaseService.folders.getAll()).toHaveLength(1)\n      expect(await databaseService.tags.getAll()).toHaveLength(2)\n      expect(await databaseService.syncQueue.getAll()).toHaveLength(1)\n    })\n\n    it('导入数据时应该清空现有数据', async () => {\n      // 先添加一些数据\n      await databaseService.cards.bulkAdd(CardFixture.list(3))\n      \n      const importData = {\n        cards: CardFixture.list(1),\n        folders: [],\n        tags: [],\n        syncQueue: [],\n      }\n      \n      await databaseService.importData(importData)\n      \n      // 应该只有导入的数据\n      expect(await databaseService.cards.getAll()).toHaveLength(1)\n      expect(await databaseService.cards.getAll()[0].frontContent.title).toBe(importData.cards[0].frontContent.title)\n    })\n  })\n\n  describe('边界情况测试', () => {\n    it('应该处理不存在的卡片ID', async () => {\n      const nonExistentCard = await databaseService.cards.get('non-existent-id')\n      expect(nonExistentCard).toBeUndefined()\n    })\n\n    it('应该处理不存在的文件夹ID', async () => {\n      const nonExistentFolder = await databaseService.folders.get('non-existent-id')\n      expect(nonExistentFolder).toBeUndefined()\n    })\n\n    it('应该处理不存在的标签ID', async () => {\n      const nonExistentTag = await databaseService.tags.get('non-existent-id')\n      expect(nonExistentTag).toBeUndefined()\n    })\n\n    it('应该处理空数据集的搜索', async () => {\n      const searchResults = await databaseService.cards.search('任何关键词')\n      expect(searchResults).toHaveLength(0)\n    })\n\n    it('应该处理空数据集的标签查找', async () => {\n      const taggedCards = await databaseService.cards.findByTag('任何标签')\n      expect(taggedCards).toHaveLength(0)\n    })\n\n    it('应该处理空数据集的文件夹查找', async () => {\n      const folderCards = await databaseService.cards.findByFolder('任何文件夹')\n      expect(folderCards).toHaveLength(0)\n    })\n  })\n})"],"version":3}
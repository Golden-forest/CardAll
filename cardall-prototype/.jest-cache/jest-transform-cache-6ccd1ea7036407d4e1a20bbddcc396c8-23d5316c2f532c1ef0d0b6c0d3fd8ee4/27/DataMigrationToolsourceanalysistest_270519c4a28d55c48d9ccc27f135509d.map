{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\services\\data-migration\\DataMigrationTool.source-analysis.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\services\\data-migration\\DataMigrationTool.source-analysis.test.ts"],"sourcesContent":["/**\n * 数据源分析功能测试\n */\n\nimport { dataMigrationTool } from '@/services/data-migration-tool'\nimport { TestDataFactory, MigrationTestHelpers } from './test-utils'\nimport { setup } from './setup'\n\ndescribe('DataMigrationTool - 数据源分析测试', () => {\n  const { setupLocalStorageData, cleanupLocalStorage, mockIndexedDB, restoreIndexedDB } = MigrationTestHelpers\n\n  describe('LocalStorage数据源分析', () => {\n    beforeEach(() => {\n      cleanupLocalStorage()\n    })\n\n    afterEach(() => {\n      cleanupLocalStorage()\n    })\n\n    test('应该分析空的localStorage', async () => {\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n\n      expect(plan).toBeDefined()\n      expect(plan.source.type).toBe('localStorage')\n      expect(plan.backupRequired).toBe(true)\n      expect(plan.rollbackEnabled).toBe(true)\n    })\n\n    test('应该分析包含卡片的localStorage', async () => {\n      const testCards = [\n        TestDataFactory.createTestCard(),\n        TestDataFactory.createTestCard({ frontContent: { title: '第二张卡片', text: '内容2', tags: [], images: [] } })\n      ]\n\n      setupLocalStorageData({ cards: testCards })\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n\n      expect(plan).toBeDefined()\n      expect(plan.steps.some(step => step.id === 'migrate-cards')).toBe(true)\n      expect(plan.estimatedTime).toBeGreaterThan(0)\n    })\n\n    test('应该分析包含文件夹的localStorage', async () => {\n      const testFolders = [\n        TestDataFactory.createTestFolder(),\n        TestDataFactory.createTestFolder({ name: '子文件夹', parentId: 'folder-1' })\n      ]\n\n      setupLocalStorageData({ folders: testFolders })\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n\n      expect(plan).toBeDefined()\n      expect(plan.steps.some(step => step.id === 'migrate-folders')).toBe(true)\n    })\n\n    test('应该分析包含标签的localStorage', async () => {\n      const testTags = [\n        TestDataFactory.createTestTag(),\n        TestDataFactory.createTestTag({ name: '工作', color: '#3b82f6' })\n      ]\n\n      setupLocalStorageData({ tags: testTags })\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n\n      expect(plan).toBeDefined()\n      expect(plan.steps.some(step => step.id === 'migrate-tags')).toBe(true)\n    })\n\n    test('应该分析包含图片的localStorage', async () => {\n      const testCards = [\n        TestDataFactory.createCardWithImage()\n      ]\n\n      setupLocalStorageData({ cards: testCards })\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n\n      expect(plan).toBeDefined()\n      expect(plan.steps.some(step => step.id === 'migrate-images')).toBe(true)\n    })\n\n    test('应该分析完整的localStorage数据', async () => {\n      const completeData = TestDataFactory.createBulkTestData(10, 5, 8)\n      setupLocalStorageData(completeData)\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n\n      expect(plan).toBeDefined()\n\n      // 验证包含所有必要的迁移步骤\n      const stepIds = plan.steps.map(step => step.id)\n      expect(stepIds).toContain('migrate-cards')\n      expect(stepIds).toContain('migrate-folders')\n      expect(stepIds).toContain('migrate-tags')\n      expect(stepIds).toContain('migrate-images')\n\n      // 验证时间估计合理\n      expect(plan.estimatedTime).toBeGreaterThan(1000)\n    })\n\n    test('应该处理损坏的localStorage数据', async () => {\n      // 设置无效的JSON数据\n      localStorage.setItem('cardall-cards', 'invalid-json-data')\n      localStorage.setItem('cardall-folders', '{\"name\": \"valid\"}')\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      // 应该不抛出错误，而是继续处理\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n\n      expect(plan).toBeDefined()\n      expect(plan.steps.some(step => step.id === 'migrate-folders')).toBe(true)\n    })\n\n    test('应该正确计算localStorage数据大小', async () => {\n      const largeData = TestDataFactory.createBulkTestData(100, 20, 30)\n      setupLocalStorageData(largeData)\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n\n      expect(plan).toBeDefined()\n      // 数据量越大，估计的迁移时间应该越长\n      expect(plan.estimatedTime).toBeGreaterThan(5000)\n    })\n  })\n\n  describe('简化版数据库分析', () => {\n    beforeEach(() => {\n      // 保存原始Dexie\n      ;(global as any).OriginalDexie = (global as any).Dexie\n    })\n\n    afterEach(() => {\n      restoreIndexedDB()\n    })\n\n    test('应该分析存在的简化版数据库', async () => {\n      const mockDbData = {\n        cards: [\n          TestDataFactory.createTestCard(),\n          TestDataFactory.createTestCard()\n        ],\n        folders: [TestDataFactory.createTestFolder()],\n        tags: [TestDataFactory.createTestTag()],\n        images: [],\n        syncQueue: []\n      }\n\n      mockIndexedDB(mockDbData)\n\n      const source = {\n        type: 'database-simple' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n\n      expect(plan).toBeDefined()\n      expect(plan.source.type).toBe('database-simple')\n      expect(plan.steps.some(step => step.id === 'migrate-simple-db')).toBe(true)\n    })\n\n    test('应该处理不存在的简化版数据库', async () => {\n      // 模拟数据库不存在\n      const mockDb = {\n        open: jest.fn().mockRejectedValue(new Error('Database not found')),\n        close: jest.fn(),\n        cards: { count: jest.fn(), toArray: jest.fn() },\n        folders: { count: jest.fn(), toArray: jest.fn() },\n        tags: { count: jest.fn(), toArray: jest.fn() },\n        images: { count: jest.fn(), toArray: jest.fn() },\n        syncQueue: { count: jest.fn(), toArray: jest.fn() }\n      }\n\n      ;(global as any).Dexie = jest.fn().mockImplementation(() => mockDb)\n\n      const source = {\n        type: 'database-simple' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n\n      expect(plan).toBeDefined()\n      // 对于不存在的数据库，应该仍然创建计划但数据源标记为不存在\n    })\n\n    test('应该分析大量简化版数据库数据', async () => {\n      const largeData = TestDataFactory.createBulkTestData(500, 50, 100)\n      mockIndexedDB(largeData)\n\n      const source = {\n        type: 'database-simple' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n\n      expect(plan).toBeDefined()\n      expect(plan.estimatedTime).toBeGreaterThan(10000) // 大数据量需要更长时间\n    })\n  })\n\n  describe('完整版数据库分析', () => {\n    test('应该分析当前完整版数据库', async () => {\n      const source = {\n        type: 'database-full' as const,\n        version: '3.0.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n\n      expect(plan).toBeDefined()\n      expect(plan.source.type).toBe('database-full')\n      expect(plan.backupRequired).toBe(false) // 完整版数据库不需要备份\n      expect(plan.steps.some(step => step.id === 'upgrade-schema')).toBe(true)\n    })\n\n    test('应该处理数据库健康检查失败的情况', async () => {\n      // 模拟数据库健康检查失败\n      const originalHealthCheck = (global as any).db?.healthCheck\n      if ((global as any).db) {\n        (global as any).db.healthCheck = jest.fn().mockResolvedValue({\n          isHealthy: false,\n          issues: ['Database corrupted']\n        })\n      }\n\n      const source = {\n        type: 'database-full' as const,\n        version: '3.0.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n\n      expect(plan).toBeDefined()\n      // 健康检查失败不应该阻止计划创建\n\n      // 恢复原始方法\n      if (originalHealthCheck) {\n        (global as any).db.healthCheck = originalHealthCheck\n      }\n    })\n  })\n\n  describe('备份数据源分析', () => {\n    test('应该分析备份文件数据源', async () => {\n      // 创建一个模拟的备份数据\n      const backupData = {\n        id: 'backup-123',\n        timestamp: new Date(),\n        type: 'full',\n        data: {\n          cards: [TestDataFactory.createTestCard()],\n          folders: [TestDataFactory.createTestFolder()],\n          tags: [TestDataFactory.createTestTag()]\n        },\n        checksum: 'test-checksum',\n        size: 1024\n      }\n\n      localStorage.setItem('test-backup', JSON.stringify(backupData))\n\n      const source = {\n        type: 'backup' as const,\n        version: '1.0',\n        path: 'test-backup'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n\n      expect(plan).toBeDefined()\n      expect(plan.source.type).toBe('backup')\n      expect(plan.backupRequired).toBe(false) // 从备份恢复不需要额外备份\n\n      // 清理\n      localStorage.removeItem('test-backup')\n    })\n\n    test('应该处理不存在的备份文件', async () => {\n      const source = {\n        type: 'backup' as const,\n        version: '1.0',\n        path: 'non-existent-backup'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n\n      expect(plan).toBeDefined()\n      // 应该能够处理不存在的情况\n    })\n\n    test('应该处理损坏的备份文件', async () => {\n      localStorage.setItem('corrupted-backup', 'invalid-json-data')\n\n      const source = {\n        type: 'backup' as const,\n        version: '1.0',\n        path: 'corrupted-backup'\n      }\n\n      // 应该不抛出错误\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n\n      expect(plan).toBeDefined()\n\n      // 清理\n      localStorage.removeItem('corrupted-backup')\n    })\n  })\n\n  describe('云端数据源分析', () => {\n    test('应该分析云端数据源', async () => {\n      const source = {\n        type: 'cloud' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n\n      expect(plan).toBeDefined()\n      expect(plan.source.type).toBe('cloud')\n      // 云端迁移目前应该显示不支持\n    })\n  })\n\n  describe('数据源验证和边界情况', () => {\n    test('应该验证数据源完整性', async () => {\n      const invalidCards = [\n        TestDataFactory.createTestCard(),\n        { ...TestDataFactory.createTestCard(), frontContent: null as any } // 无效数据\n      ]\n\n      setupLocalStorageData({ cards: invalidCards })\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n\n      expect(plan).toBeDefined()\n      // 应该包含验证步骤\n      expect(plan.steps.some(step => step.id === 'validate-source')).toBe(true)\n    })\n\n    test('应该处理极端大数据量', async () => {\n      // 创建极端大量的测试数据\n      const extremeData = TestDataFactory.createBulkTestData(10000, 1000, 2000)\n      setupLocalStorageData(extremeData)\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const startTime = performance.now()\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const endTime = performance.now()\n\n      expect(plan).toBeDefined()\n      expect(plan.estimatedTime).toBeGreaterThan(0)\n\n      const analysisTime = endTime - startTime\n      console.log(`极端数据量分析耗时: ${analysisTime.toFixed(2)}ms`)\n\n      // 应该在合理时间内完成（10秒内）\n      expect(analysisTime).toBeLessThan(10000)\n\n      cleanupLocalStorage()\n    })\n\n    test('应该处理空数据源', async () => {\n      // 不设置任何数据\n      cleanupLocalStorage()\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n\n      expect(plan).toBeDefined()\n      // 空数据源应该仍然创建计划，但可能跳过某些迁移步骤\n    })\n\n    test('应该处理混合数据源', async () => {\n      // 同时设置localStorage和模拟数据库\n      const localStorageData = TestDataFactory.createBulkTestData(5, 2, 3)\n      setupLocalStorageData(localStorageData)\n\n      const mockDbData = TestDataFactory.createBulkTestData(3, 1, 2)\n      mockIndexedDB(mockDbData)\n\n      // 测试localStorage源\n      const localStorageSource = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const localStoragePlan = await dataMigrationTool.analyzeAndCreatePlan(localStorageSource)\n      expect(localStoragePlan).toBeDefined()\n\n      // 测试数据库源\n      const databaseSource = {\n        type: 'database-simple' as const,\n        version: '1.0'\n      }\n\n      const databasePlan = await dataMigrationTool.analyzeAndCreatePlan(databaseSource)\n      expect(databasePlan).toBeDefined()\n\n      // 清理\n      cleanupLocalStorage()\n      restoreIndexedDB()\n    })\n  })\n\n  describe('性能和优化', () => {\n    test('应该缓存分析结果', async () => {\n      const testData = TestDataFactory.createBulkTestData(50, 10, 15)\n      setupLocalStorageData(testData)\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      // 第一次分析\n      const startTime1 = performance.now()\n      const plan1 = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const endTime1 = performance.now()\n\n      // 第二次分析（应该更快，如果有缓存）\n      const startTime2 = performance.now()\n      const plan2 = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const endTime2 = performance.now()\n\n      expect(plan1).toBeDefined()\n      expect(plan2).toBeDefined()\n\n      // 两次分析应该产生相同的计划\n      expect(plan1.steps.length).toBe(plan2.steps.length)\n      expect(plan1.estimatedTime).toBe(plan2.estimatedTime)\n\n      console.log(`首次分析耗时: ${(endTime1 - startTime1).toFixed(2)}ms`)\n      console.log(`二次分析耗时: ${(endTime2 - startTime2).toFixed(2)}ms`)\n\n      cleanupLocalStorage()\n    })\n\n    test('应该并行分析多个数据源', async () => {\n      const testData = TestDataFactory.createBulkTestData(20, 5, 8)\n      setupLocalStorageData(testData)\n\n      const sources = [\n        { type: 'localStorage' as const, version: '1.0' },\n        { type: 'database-simple' as const, version: '1.0' },\n        { type: 'database-full' as const, version: '3.0.0' }\n      ]\n\n      const startTime = performance.now()\n      const plans = await Promise.all(\n        sources.map(source => dataMigrationTool.analyzeAndCreatePlan(source))\n      )\n      const endTime = performance.now()\n\n      expect(plans).toHaveLength(3)\n      plans.forEach(plan => {\n        expect(plan).toBeDefined()\n      })\n\n      const parallelTime = endTime - startTime\n      console.log(`并行分析耗时: ${parallelTime.toFixed(2)}ms`)\n\n      // 并行分析应该相对高效\n      expect(parallelTime).toBeLessThan(5000)\n\n      cleanupLocalStorage()\n    })\n  })\n})"],"version":3}
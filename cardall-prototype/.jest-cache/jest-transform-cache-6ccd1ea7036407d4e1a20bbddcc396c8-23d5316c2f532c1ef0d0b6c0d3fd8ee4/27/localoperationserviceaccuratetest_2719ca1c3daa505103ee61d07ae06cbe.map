{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\services\\local-operation-service-accurate.test.ts","mappings":";AAAA;;;GAGG;;AAEH,2CAAmF;AAmDnF,QAAQ;AACR,cAAI,CAAC,IAAI,CAAC,iCAAiC,EAAE,GAAG,EAAE;IAChD,MAAM,MAAM,GAAG;QACb,KAAK,EAAE;YACL,GAAG,EAAE,cAAI,CAAC,EAAE,EAAE;YACd,GAAG,EAAE,cAAI,CAAC,EAAE,EAAE;YACd,MAAM,EAAE,cAAI,CAAC,EAAE,EAAE;YACjB,MAAM,EAAE,cAAI,CAAC,EAAE,EAAE;YACjB,KAAK,EAAE,cAAI,CAAC,EAAE,EAAE;YAChB,OAAO,EAAE,cAAI,CAAC,EAAE,EAAE;YAClB,OAAO,EAAE,cAAI,CAAC,EAAE,EAAE;YAClB,OAAO,EAAE,cAAI,CAAC,EAAE,EAAE;YAClB,UAAU,EAAE,cAAI,CAAC,EAAE,EAAE;SACtB;QACD,OAAO,EAAE;YACP,GAAG,EAAE,cAAI,CAAC,EAAE,EAAE;YACd,GAAG,EAAE,cAAI,CAAC,EAAE,EAAE;YACd,MAAM,EAAE,cAAI,CAAC,EAAE,EAAE;YACjB,MAAM,EAAE,cAAI,CAAC,EAAE,EAAE;YACjB,KAAK,EAAE,cAAI,CAAC,EAAE,EAAE;YAChB,OAAO,EAAE,cAAI,CAAC,EAAE,EAAE;SACnB;QACD,IAAI,EAAE;YACJ,GAAG,EAAE,cAAI,CAAC,EAAE,EAAE;YACd,GAAG,EAAE,cAAI,CAAC,EAAE,EAAE;YACd,MAAM,EAAE,cAAI,CAAC,EAAE,EAAE;YACjB,MAAM,EAAE,cAAI,CAAC,EAAE,EAAE;YACjB,KAAK,EAAE,cAAI,CAAC,EAAE,EAAE;YAChB,OAAO,EAAE,cAAI,CAAC,EAAE,EAAE;SACnB;QACD,QAAQ,EAAE;YACR,GAAG,EAAE,cAAI,CAAC,EAAE,EAAE;YACd,GAAG,EAAE,cAAI,CAAC,EAAE,EAAE;YACd,MAAM,EAAE,cAAI,CAAC,EAAE,EAAE;YACjB,MAAM,EAAE,cAAI,CAAC,EAAE,EAAE;YACjB,KAAK,EAAE,cAAI,CAAC,EAAE,EAAE;YAChB,OAAO,EAAE,cAAI,CAAC,EAAE,EAAE;SACnB;QACD,cAAc,EAAE;YACd,GAAG,EAAE,cAAI,CAAC,EAAE,EAAE;YACd,GAAG,EAAE,cAAI,CAAC,EAAE,EAAE;YACd,MAAM,EAAE,cAAI,CAAC,EAAE,EAAE;YACjB,MAAM,EAAE,cAAI,CAAC,EAAE,EAAE;YACjB,KAAK,EAAE,cAAI,CAAC,EAAE,EAAE;YAChB,OAAO,EAAE,cAAI,CAAC,EAAE,EAAE;SACnB;KACF,CAAA;IACD,OAAO,EAAE,EAAE,EAAE,MAAM,EAAE,CAAA;AACvB,CAAC,CAAC,CAAA;AAlGF,oFAAuF;AAEvF,cAAc;AACd,MAAM,cAAc,GAAG,GAAG,EAAE,CAAC,CAAC;IAC5B,YAAY,EAAE;QACZ,KAAK,EAAE,MAAM;QACb,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,MAAM,CAAC;QACd,KAAK,EAAE,EAAE,eAAe,EAAE,SAAS,EAAE;KACtC;IACD,WAAW,EAAE;QACX,KAAK,EAAE,MAAM;QACb,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,MAAM,CAAC;QACd,KAAK,EAAE,EAAE,eAAe,EAAE,SAAS,EAAE;KACtC;IACD,KAAK,EAAE;QACL,IAAI,EAAE,OAAgB;QACtB,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;KAC/B;IACD,QAAQ,EAAE,MAAM,CAAC,UAAU,EAAE;IAC7B,MAAM,EAAE,WAAW;CACpB,CAAC,CAAA;AAEF,MAAM,gBAAgB,GAAG,GAAG,EAAE,CAAC,CAAC;IAC9B,EAAE,EAAE,MAAM,CAAC,UAAU,EAAE;IACvB,YAAY,EAAE;QACZ,KAAK,EAAE,MAAM;QACb,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,MAAM,CAAC;QACd,KAAK,EAAE,EAAE,eAAe,EAAE,SAAS,EAAE;KACtC;IACD,WAAW,EAAE;QACX,KAAK,EAAE,MAAM;QACb,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,MAAM,CAAC;QACd,KAAK,EAAE,EAAE,eAAe,EAAE,SAAS,EAAE;KACtC;IACD,KAAK,EAAE;QACL,IAAI,EAAE,OAAgB;QACtB,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;KAC/B;IACD,QAAQ,EAAE,MAAM,CAAC,UAAU,EAAE;IAC7B,MAAM,EAAE,WAAW;IACnB,SAAS,EAAE,IAAI,IAAI,EAAE;IACrB,SAAS,EAAE,IAAI,IAAI,EAAE;IACrB,SAAS,EAAE,KAAK;IAChB,OAAO,EAAE,CAAC;CACX,CAAC,CAAA;AAoDF,IAAA,kBAAQ,EAAC,gCAAgC,EAAE,GAAG,EAAE;IAC9C,IAAI,OAAuC,CAAA;IAC3C,IAAI,MAAW,CAAA;IAEf,IAAA,oBAAU,EAAC,GAAG,EAAE;QACd,SAAS;QACT,OAAO,GAAG,IAAI,wDAA8B,EAAE,CAAA;QAE9C,UAAU;QACV,MAAM,EAAE,EAAE,EAAE,GAAG,OAAO,CAAC,iCAAiC,CAAC,CAAA;QACzD,MAAM,GAAG,EAAE,CAAA;QAEX,SAAS;QACT,cAAI,CAAC,aAAa,EAAE,CAAA;IACtB,CAAC,CAAC,CAAA;IAEF,IAAA,mBAAS,EAAC,GAAG,EAAE;QACb,OAAO;QACP,IAAI,OAAO,CAAC,OAAO,EAAE,CAAC;YACpB,OAAO,CAAC,OAAO,EAAE,CAAA;QACnB,CAAC;IACH,CAAC,CAAC,CAAA;IAEF,+EAA+E;IAC/E,QAAQ;IACR,+EAA+E;IAE/E,IAAA,kBAAQ,EAAC,KAAK,EAAE,GAAG,EAAE;QACnB,IAAA,cAAI,EAAC,WAAW,EAAE,KAAK,IAAI,EAAE;YAC3B,MAAM,OAAO,CAAC,UAAU,EAAE,CAAA;YAC1B,IAAA,gBAAM,EAAC,OAAO,CAAC,CAAC,cAAc,CAAC,wDAA8B,CAAC,CAAA;QAChE,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,+EAA+E;IAC/E,SAAS;IACT,+EAA+E;IAE/E,IAAA,kBAAQ,EAAC,MAAM,EAAE,GAAG,EAAE;QACpB,IAAA,cAAI,EAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM,QAAQ,GAAG,cAAc,EAAE,CAAA;YACjC,MAAM,MAAM,GAAG,MAAM,CAAC,UAAU,EAAE,CAAA;YAElC,UAAU;YACV,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAA;YAE1C,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;YAEjD,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACjC,IAAA,gBAAM,EAAC,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;YAC9B,IAAA,gBAAM,EAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YAC1C,IAAA,gBAAM,EAAC,MAAM,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;YAC7C,IAAA,gBAAM,EAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAA;QACzD,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM,MAAM,GAAG,MAAM,CAAC,UAAU,EAAE,CAAA;YAClC,MAAM,QAAQ,GAAG,gBAAgB,EAAE,CAAA;YAEnC,UAAU;YACV,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAA;YAE5C,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;YAE5C,IAAA,gBAAM,EAAC,MAAM,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;YAChC,IAAA,gBAAM,EAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAA;QACvD,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM,MAAM,GAAG,MAAM,CAAC,UAAU,EAAE,CAAA;YAClC,MAAM,UAAU,GAAG;gBACjB,YAAY,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE;aAClC,CAAA;YAED,UAAU;YACV,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAA;YAExC,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,CAAA;YAE3D,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACjC,IAAA,gBAAM,EAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YAC1C,IAAA,gBAAM,EAAC,MAAM,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;YAC7C,IAAA,gBAAM,EAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAA;QACtE,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM,MAAM,GAAG,MAAM,CAAC,UAAU,EAAE,CAAA;YAElC,UAAU;YACV,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAA;YAExC,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAA;YAE/C,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACjC,IAAA,gBAAM,EAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YAC1C,IAAA,gBAAM,EAAC,MAAM,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;YAC7C,IAAA,gBAAM,EAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAA;QAC1D,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,aAAa,EAAE,KAAK,IAAI,EAAE;YAC7B,MAAM,QAAQ,GAAG,cAAc,EAAE,CAAA;YAEjC,UAAU;YACV,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC,CAAA;YAExD,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;YAEjD,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YAClC,IAAA,gBAAM,EAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;YACpC,IAAA,gBAAM,EAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YAC1C,IAAA,gBAAM,EAAC,MAAM,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;QAC/C,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,+EAA+E;IAC/E,SAAS;IACT,+EAA+E;IAE/E,IAAA,kBAAQ,EAAC,MAAM,EAAE,GAAG,EAAE;QACpB,IAAA,cAAI,EAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC5B,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,cAAc,EAAE,CAAC,CAAA;YAC/D,MAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAA;YAEpD,UAAU;YACV,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAA;YAE/C,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,eAAe,CAAC,KAAK,CAAC,CAAA;YAEpD,IAAA,gBAAM,EAAC,OAAO,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;YAC/B,IAAA,gBAAM,EAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YAChD,IAAA,gBAAM,EAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAA;QAC1D,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,cAAc,EAAE,KAAK,IAAI,EAAE;YAC9B,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,cAAc,EAAE,CAAC,CAAA;YAE/D,YAAY;YACZ,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAA;YAE3D,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,eAAe,CAAC,KAAK,CAAC,CAAA;YAEpD,IAAA,gBAAM,EAAC,OAAO,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;YAC/B,IAAA,gBAAM,EAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QACnD,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,+EAA+E;IAC/E,SAAS;IACT,+EAA+E;IAE/E,IAAA,kBAAQ,EAAC,MAAM,EAAE,GAAG,EAAE;QACpB,IAAA,cAAI,EAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC5B,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,gBAAgB,EAAE,CAAC,CAAA;YAErE,UAAU;YACV,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAA;YAEjD,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,QAAQ,EAAE,CAAA;YAEvC,IAAA,gBAAM,EAAC,MAAM,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;YACjC,IAAA,gBAAM,EAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,CAAA;QACjD,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC5B,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,gBAAgB,EAAE,CAAC,CAAA;YAErE,UAAU;YACV,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAA;YAEjD,MAAM,OAAO,GAAG,EAAE,QAAQ,EAAE,MAAM,CAAC,UAAU,EAAE,EAAE,CAAA;YACjD,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;YAE9C,IAAA,gBAAM,EAAC,MAAM,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;YACjC,IAAA,gBAAM,EAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,CAAA;QACjD,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,+EAA+E;IAC/E,SAAS;IACT,+EAA+E;IAE/E,IAAA,kBAAQ,EAAC,MAAM,EAAE,GAAG,EAAE;QACpB,IAAA,cAAI,EAAC,WAAW,EAAE,KAAK,IAAI,EAAE;YAC3B,MAAM,cAAc,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;gBACtD,EAAE,EAAE,MAAM,CAAC,UAAU,EAAE;gBACvB,IAAI,EAAE,QAAiB;gBACvB,UAAU,EAAE,MAAe;gBAC3B,QAAQ,EAAE,MAAM,CAAC,UAAU,EAAE;gBAC7B,IAAI,EAAE,cAAc,EAAE;gBACtB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,CAAC,CAAC,CAAA;YAEH,UAAU;YACV,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAA;YAE/D,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,wBAAwB,EAAE,CAAA;YAEvD,IAAA,gBAAM,EAAC,MAAM,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAA;YACtC,IAAA,gBAAM,EAAC,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,CAAA;QAC1D,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,+EAA+E;IAC/E,SAAS;IACT,+EAA+E;IAE/E,IAAA,kBAAQ,EAAC,MAAM,EAAE,GAAG,EAAE;QACpB,IAAA,cAAI,EAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM,QAAQ,GAAG,cAAc,EAAE,CAAA;YACjC,MAAM,MAAM,GAAG,MAAM,CAAC,UAAU,EAAE,CAAA;YAElC,UAAU;YACV,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAA;YAE1C,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;YAEjD,IAAA,gBAAM,EAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YAC1C,IAAA,gBAAM,EAAC,MAAM,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;QAC/C,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM,QAAQ,GAAG,cAAc,EAAE,CAAA;YACjC,MAAM,MAAM,GAAG,MAAM,CAAC,UAAU,EAAE,CAAA;YAElC,YAAY;YACZ,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,kBAAkB,CAAC,KAAK,IAAI,EAAE;gBAC7C,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAA;gBACpD,OAAO,MAAM,CAAA;YACf,CAAC,CAAC,CAAA;YAEF,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;YAEjD,IAAA,gBAAM,EAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YAC1C,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACnC,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,+EAA+E;IAC/E,SAAS;IACT,+EAA+E;IAE/E,IAAA,kBAAQ,EAAC,MAAM,EAAE,GAAG,EAAE;QACpB,IAAA,cAAI,EAAC,SAAS,EAAE,KAAK,IAAI,EAAE;YACzB,WAAW;YACX,MAAM,WAAW,GAAG;gBAClB,YAAY,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;gBAC/C,WAAW,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;aAC/C,CAAA;YAED,MAAM,MAAM,GAAG,MAAM,CAAC,UAAU,EAAE,CAAA;YAClC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAA;YAE1C,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,WAAW,CAAC,CAAA;YAEpD,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACjC,IAAA,gBAAM,EAAC,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QAChC,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,WAAW,EAAE,KAAK,IAAI,EAAE;YAC3B,MAAM,MAAM,GAAG,MAAM,CAAC,UAAU,EAAE,CAAA;YAElC,cAAc;YACd,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAA;YAExC,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;YAE5C,IAAA,gBAAM,EAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAA;YACzB,IAAA,gBAAM,EAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAA;QACvD,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,cAAc,EAAE,KAAK,IAAI,EAAE;YAC9B,MAAM,MAAM,GAAG,MAAM,CAAC,UAAU,EAAE,CAAA;YAElC,cAAc;YACd,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAA;YAExC,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAA;YAE/C,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA,CAAC,mBAAmB;QACvD,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,+EAA+E;IAC/E,SAAS;IACT,+EAA+E;IAE/E,IAAA,kBAAQ,EAAC,MAAM,EAAE,GAAG,EAAE;QACpB,IAAA,cAAI,EAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM,QAAQ,GAAG,cAAc,EAAE,CAAA;YAEjC,SAAS;YACT,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC,CAAA;YAE9D,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAA;YAEjD,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YAClC,IAAA,gBAAM,EAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;QAC5C,CAAC,CAAC,CAAA;QAEF,IAAA,cAAI,EAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM,QAAQ,GAAG,cAAc,EAAE,CAAA;YACjC,MAAM,MAAM,GAAG,MAAM,CAAC,UAAU,EAAE,CAAA;YAElC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAA;YAE1C,WAAW;YACX,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAA;YAC9E,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;YAE3C,IAAA,gBAAM,EAAC,OAAO,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;YAC/B,IAAA,gBAAM,EAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YAChD,IAAA,gBAAM,EAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAA;QACnD,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\services\\local-operation-service-accurate.test.ts"],"sourcesContent":["/**\r\n * LocalOperationService 准确单元测试\r\n * 基于实际API接口的测试\r\n */\r\n\r\nimport { describe, test, expect, jest, beforeEach, afterEach } from '@jest/globals'\r\nimport { LocalOperationServiceOptimized } from '../../services/local-operation-service'\r\n\r\n// 创建准确的Mock数据\r\nconst createMockCard = () => ({\r\n  frontContent: {\r\n    title: '测试卡片',\r\n    text: '正面内容',\r\n    tags: ['测试标签'],\r\n    style: { backgroundColor: '#ffffff' }\r\n  },\r\n  backContent: {\r\n    title: '背面标题',\r\n    text: '背面内容',\r\n    tags: ['背面标签'],\r\n    style: { backgroundColor: '#f0f0f0' }\r\n  },\r\n  style: {\r\n    type: 'solid' as const,\r\n    colors: ['#ffffff', '#f0f0f0']\r\n  },\r\n  folderId: crypto.randomUUID(),\r\n  userId: 'test-user'\r\n})\r\n\r\nconst createMockDbCard = () => ({\r\n  id: crypto.randomUUID(),\r\n  frontContent: {\r\n    title: '测试卡片',\r\n    text: '正面内容',\r\n    tags: ['测试标签'],\r\n    style: { backgroundColor: '#ffffff' }\r\n  },\r\n  backContent: {\r\n    title: '背面标题',\r\n    text: '背面内容',\r\n    tags: ['背面标签'],\r\n    style: { backgroundColor: '#f0f0f0' }\r\n  },\r\n  style: {\r\n    type: 'solid' as const,\r\n    colors: ['#ffffff', '#f0f0f0']\r\n  },\r\n  folderId: crypto.randomUUID(),\r\n  userId: 'test-user',\r\n  createdAt: new Date(),\r\n  updatedAt: new Date(),\r\n  isDeleted: false,\r\n  version: 1\r\n})\r\n\r\n// 模拟数据库\r\njest.mock('../../services/database-unified', () => {\r\n  const mockDb = {\r\n    cards: {\r\n      add: jest.fn(),\r\n      get: jest.fn(),\r\n      update: jest.fn(),\r\n      delete: jest.fn(),\r\n      where: jest.fn(),\r\n      toArray: jest.fn(),\r\n      bulkAdd: jest.fn(),\r\n      bulkPut: jest.fn(),\r\n      bulkDelete: jest.fn()\r\n    },\r\n    folders: {\r\n      add: jest.fn(),\r\n      get: jest.fn(),\r\n      update: jest.fn(),\r\n      delete: jest.fn(),\r\n      where: jest.fn(),\r\n      toArray: jest.fn()\r\n    },\r\n    tags: {\r\n      add: jest.fn(),\r\n      get: jest.fn(),\r\n      update: jest.fn(),\r\n      delete: jest.fn(),\r\n      where: jest.fn(),\r\n      toArray: jest.fn()\r\n    },\r\n    cardTags: {\r\n      add: jest.fn(),\r\n      get: jest.fn(),\r\n      update: jest.fn(),\r\n      delete: jest.fn(),\r\n      where: jest.fn(),\r\n      toArray: jest.fn()\r\n    },\r\n    syncOperations: {\r\n      add: jest.fn(),\r\n      get: jest.fn(),\r\n      update: jest.fn(),\r\n      delete: jest.fn(),\r\n      where: jest.fn(),\r\n      toArray: jest.fn()\r\n    }\r\n  }\r\n  return { db: mockDb }\r\n})\r\n\r\ndescribe('LocalOperationServiceOptimized', () => {\r\n  let service: LocalOperationServiceOptimized\r\n  let mockDb: any\r\n\r\n  beforeEach(() => {\r\n    // 重置服务实例\r\n    service = new LocalOperationServiceOptimized()\r\n    \r\n    // 获取模拟数据库\r\n    const { db } = require('../../services/database-unified')\r\n    mockDb = db\r\n    \r\n    // 清理所有模拟\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  afterEach(() => {\r\n    // 清理服务\r\n    if (service.destroy) {\r\n      service.destroy()\r\n    }\r\n  })\r\n\r\n  // ============================================================================\r\n  // 初始化测试\r\n  // ============================================================================\r\n\r\n  describe('初始化', () => {\r\n    test('应该正确初始化服务', async () => {\r\n      await service.initialize()\r\n      expect(service).toBeInstanceOf(LocalOperationServiceOptimized)\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 卡片操作测试\r\n  // ============================================================================\r\n\r\n  describe('卡片操作', () => {\r\n    test('应该成功创建卡片', async () => {\r\n      const cardData = createMockCard()\r\n      const cardId = crypto.randomUUID()\r\n      \r\n      // 模拟数据库返回\r\n      mockDb.cards.add.mockResolvedValue(cardId)\r\n      \r\n      const result = await service.createCard(cardData)\r\n      \r\n      expect(result.success).toBe(true)\r\n      expect(result.id).toBe(cardId)\r\n      expect(result.duration).toBeGreaterThan(0)\r\n      expect(result.timestamp).toBeInstanceOf(Date)\r\n      expect(mockDb.cards.add).toHaveBeenCalledWith(cardData)\r\n    })\r\n\r\n    test('应该成功读取卡片', async () => {\r\n      const cardId = crypto.randomUUID()\r\n      const mockCard = createMockDbCard()\r\n      \r\n      // 模拟数据库返回\r\n      mockDb.cards.get.mockResolvedValue(mockCard)\r\n      \r\n      const result = await service.getCard(cardId)\r\n      \r\n      expect(result).toEqual(mockCard)\r\n      expect(mockDb.cards.get).toHaveBeenCalledWith(cardId)\r\n    })\r\n\r\n    test('应该成功更新卡片', async () => {\r\n      const cardId = crypto.randomUUID()\r\n      const updateData = {\r\n        frontContent: { title: '更新后的标题' }\r\n      }\r\n      \r\n      // 模拟数据库返回\r\n      mockDb.cards.update.mockResolvedValue(1)\r\n      \r\n      const result = await service.updateCard(cardId, updateData)\r\n      \r\n      expect(result.success).toBe(true)\r\n      expect(result.duration).toBeGreaterThan(0)\r\n      expect(result.timestamp).toBeInstanceOf(Date)\r\n      expect(mockDb.cards.update).toHaveBeenCalledWith(cardId, updateData)\r\n    })\r\n\r\n    test('应该成功删除卡片', async () => {\r\n      const cardId = crypto.randomUUID()\r\n      \r\n      // 模拟数据库返回\r\n      mockDb.cards.delete.mockResolvedValue(1)\r\n      \r\n      const result = await service.deleteCard(cardId)\r\n      \r\n      expect(result.success).toBe(true)\r\n      expect(result.duration).toBeGreaterThan(0)\r\n      expect(result.timestamp).toBeInstanceOf(Date)\r\n      expect(mockDb.cards.delete).toHaveBeenCalledWith(cardId)\r\n    })\r\n\r\n    test('应该处理数据库操作错误', async () => {\r\n      const cardData = createMockCard()\r\n      \r\n      // 模拟数据库错误\r\n      mockDb.cards.add.mockRejectedValue(new Error('数据库连接失败'))\r\n      \r\n      const result = await service.createCard(cardData)\r\n      \r\n      expect(result.success).toBe(false)\r\n      expect(result.error).toBe('数据库连接失败')\r\n      expect(result.duration).toBeGreaterThan(0)\r\n      expect(result.timestamp).toBeInstanceOf(Date)\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 批量操作测试\r\n  // ============================================================================\r\n\r\n  describe('批量操作', () => {\r\n    test('应该成功批量创建卡片', async () => {\r\n      const cards = Array.from({ length: 5 }, () => createMockCard())\r\n      const cardIds = cards.map(() => crypto.randomUUID())\r\n      \r\n      // 模拟数据库返回\r\n      mockDb.cards.bulkAdd.mockResolvedValue(cardIds)\r\n      \r\n      const results = await service.bulkCreateCards(cards)\r\n      \r\n      expect(results).toHaveLength(5)\r\n      expect(results.every(r => r.success)).toBe(true)\r\n      expect(mockDb.cards.bulkAdd).toHaveBeenCalledWith(cards)\r\n    })\r\n\r\n    test('应该处理批量操作部分失败', async () => {\r\n      const cards = Array.from({ length: 3 }, () => createMockCard())\r\n      \r\n      // 模拟数据库部分失败\r\n      mockDb.cards.bulkAdd.mockRejectedValue(new Error('批量操作失败'))\r\n      \r\n      const results = await service.bulkCreateCards(cards)\r\n      \r\n      expect(results).toHaveLength(3)\r\n      expect(results.every(r => r.success)).toBe(false)\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 查询操作测试\r\n  // ============================================================================\r\n\r\n  describe('查询操作', () => {\r\n    test('应该成功查询卡片列表', async () => {\r\n      const mockCards = Array.from({ length: 3 }, () => createMockDbCard())\r\n      \r\n      // 模拟数据库返回\r\n      mockDb.cards.toArray.mockResolvedValue(mockCards)\r\n      \r\n      const result = await service.getCards()\r\n      \r\n      expect(result).toEqual(mockCards)\r\n      expect(mockDb.cards.toArray).toHaveBeenCalled()\r\n    })\r\n\r\n    test('应该支持带选项的查询', async () => {\r\n      const mockCards = Array.from({ length: 2 }, () => createMockDbCard())\r\n      \r\n      // 模拟数据库返回\r\n      mockDb.cards.toArray.mockResolvedValue(mockCards)\r\n      \r\n      const options = { folderId: crypto.randomUUID() }\r\n      const result = await service.getCards(options)\r\n      \r\n      expect(result).toEqual(mockCards)\r\n      expect(mockDb.cards.toArray).toHaveBeenCalled()\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 同步操作测试\r\n  // ============================================================================\r\n\r\n  describe('同步操作', () => {\r\n    test('应该获取待同步操作', async () => {\r\n      const mockOperations = Array.from({ length: 2 }, () => ({\r\n        id: crypto.randomUUID(),\r\n        type: 'create' as const,\r\n        entityType: 'card' as const,\r\n        entityId: crypto.randomUUID(),\r\n        data: createMockCard(),\r\n        timestamp: new Date()\r\n      }))\r\n      \r\n      // 模拟数据库返回\r\n      mockDb.syncOperations.toArray.mockResolvedValue(mockOperations)\r\n      \r\n      const result = await service.getPendingSyncOperations()\r\n      \r\n      expect(result).toEqual(mockOperations)\r\n      expect(mockDb.syncOperations.toArray).toHaveBeenCalled()\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 性能监控测试\r\n  // ============================================================================\r\n\r\n  describe('性能监控', () => {\r\n    test('应该记录操作性能', async () => {\r\n      const cardData = createMockCard()\r\n      const cardId = crypto.randomUUID()\r\n      \r\n      // 模拟数据库返回\r\n      mockDb.cards.add.mockResolvedValue(cardId)\r\n      \r\n      const result = await service.createCard(cardData)\r\n      \r\n      expect(result.duration).toBeGreaterThan(0)\r\n      expect(result.timestamp).toBeInstanceOf(Date)\r\n    })\r\n\r\n    test('应该处理快速操作', async () => {\r\n      const cardData = createMockCard()\r\n      const cardId = crypto.randomUUID()\r\n      \r\n      // 模拟快速数据库操作\r\n      mockDb.cards.add.mockImplementation(async () => {\r\n        await new Promise(resolve => setTimeout(resolve, 1))\r\n        return cardId\r\n      })\r\n      \r\n      const result = await service.createCard(cardData)\r\n      \r\n      expect(result.duration).toBeGreaterThan(0)\r\n      expect(result.success).toBe(true)\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 边界情况测试\r\n  // ============================================================================\r\n\r\n  describe('边界情况', () => {\r\n    test('应该处理空数据', async () => {\r\n      // 创建最小有效数据\r\n      const minimalCard = {\r\n        frontContent: { title: '', text: '', tags: [] },\r\n        backContent: { title: '', text: '', tags: [] }\r\n      }\r\n      \r\n      const cardId = crypto.randomUUID()\r\n      mockDb.cards.add.mockResolvedValue(cardId)\r\n      \r\n      const result = await service.createCard(minimalCard)\r\n      \r\n      expect(result.success).toBe(true)\r\n      expect(result.id).toBe(cardId)\r\n    })\r\n\r\n    test('应该处理查询空结果', async () => {\r\n      const cardId = crypto.randomUUID()\r\n      \r\n      // 模拟数据库返回null\r\n      mockDb.cards.get.mockResolvedValue(null)\r\n      \r\n      const result = await service.getCard(cardId)\r\n      \r\n      expect(result).toBeNull()\r\n      expect(mockDb.cards.get).toHaveBeenCalledWith(cardId)\r\n    })\r\n\r\n    test('应该处理删除不存在的卡片', async () => {\r\n      const cardId = crypto.randomUUID()\r\n      \r\n      // 模拟数据库删除0条记录\r\n      mockDb.cards.delete.mockResolvedValue(0)\r\n      \r\n      const result = await service.deleteCard(cardId)\r\n      \r\n      expect(result.success).toBe(true) // 删除操作在业务逻辑中总是返回成功\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 错误处理测试\r\n  // ============================================================================\r\n\r\n  describe('错误处理', () => {\r\n    test('应该处理网络错误', async () => {\r\n      const cardData = createMockCard()\r\n      \r\n      // 模拟网络错误\r\n      mockDb.cards.add.mockRejectedValue(new Error('Network Error'))\r\n      \r\n      const result = await service.createCard(cardData)\r\n      \r\n      expect(result.success).toBe(false)\r\n      expect(result.error).toBe('Network Error')\r\n    })\r\n\r\n    test('应该处理并发创建', async () => {\r\n      const cardData = createMockCard()\r\n      const cardId = crypto.randomUUID()\r\n      \r\n      mockDb.cards.add.mockResolvedValue(cardId)\r\n      \r\n      // 并发创建多个卡片\r\n      const promises = Array.from({ length: 3 }, () => service.createCard(cardData))\r\n      const results = await Promise.all(promises)\r\n      \r\n      expect(results).toHaveLength(3)\r\n      expect(results.every(r => r.success)).toBe(true)\r\n      expect(mockDb.cards.add).toHaveBeenCalledTimes(3)\r\n    })\r\n  })\r\n})"],"version":3}
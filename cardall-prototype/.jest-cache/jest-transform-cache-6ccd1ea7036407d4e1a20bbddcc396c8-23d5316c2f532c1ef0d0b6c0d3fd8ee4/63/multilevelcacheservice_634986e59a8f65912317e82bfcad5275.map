{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\multilevel-cache-service.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\multilevel-cache-service.ts"],"sourcesContent":["/**\r\n * 高性能多级缓存服务\r\n * 基于现有AdvancedCacheManager进一步优化，实现智能缓存策略\r\n * \r\n * @author Code-Optimization-Expert智能体\r\n * @version 1.0.0\r\n */\r\n\r\nimport { AdvancedCacheManager, CacheConfig, CacheStrategy, CacheStats } from './advanced-cache'\r\nimport { db, type DbCard, type DbFolder, type DbTag } from './database-unified'\r\n\r\n// ============================================================================\r\n// 增强的缓存配置\r\n// ============================================================================\r\n\r\nexport interface EnhancedCacheConfig extends CacheConfig {\r\n  // L1缓存配置（内存缓存）\r\n  l1: {\r\n    maxSize: number\r\n    ttl: number\r\n    strategy: CacheStrategy\r\n  }\r\n  \r\n  // L2缓存配置（持久化缓存）\r\n  l2: {\r\n    maxSize: number\r\n    ttl: number\r\n    compressionEnabled: boolean\r\n  }\r\n  \r\n  // L3缓存配置（预计算缓存）\r\n  l3: {\r\n    enabled: boolean\r\n    predictionWindow: number // 预测时间窗口（分钟）\r\n    warmupThreshold: number // 预热阈值\r\n  }\r\n  \r\n  // 智能策略配置\r\n  adaptive: {\r\n    learningRate: number\r\n    predictionAccuracy: number\r\n    autoOptimization: boolean\r\n    memoryPressureThreshold: number\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// 缓存层级枚举\r\n// ============================================================================\r\n\r\nexport enum CacheLevel {\r\n  L1_MEMORY = 'l1',      // 内存缓存 - 最快访问\r\n  L2_PERSISTENT = 'l2',  // 持久化缓存 - 中等速度\r\n  L3_PREDICTIVE = 'l3'    // 预计算缓存 - 预测性加载\r\n}\r\n\r\n// ============================================================================\r\n// 缓存条目元数据\r\n// ============================================================================\r\n\r\nexport interface EnhancedCacheEntry<T> {\r\n  data: T\r\n  level: CacheLevel\r\n  metadata: {\r\n    createdAt: Date\r\n    lastAccessed: Date\r\n    accessCount: number\r\n    ttl: number\r\n    size: number\r\n    compressionRatio: number\r\n    accessPattern: 'frequent' | 'sporadic' | 'sequential'\r\n    priority: 'critical' | 'high' | 'normal' | 'low'\r\n    tags: string[]\r\n    cost: number // 访问成本估算\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// 缓存性能指标\r\n// ============================================================================\r\n\r\nexport interface CachePerformanceMetrics {\r\n  totalHits: number\r\n  totalMisses: number\r\n  hitRate: number\r\n  averageAccessTime: number\r\n  memoryUsage: number\r\n  diskUsage: number\r\n  compressionSavings: number\r\n  predictionAccuracy: number\r\n  byLevel: {\r\n    [key in CacheLevel]: {\r\n      hits: number\r\n      misses: number\r\n      hitRate: number\r\n      avgAccessTime: number\r\n    }\r\n  }\r\n  byEntity: {\r\n    cards: { hits: number; misses: number; hitRate: number }\r\n    folders: { hits: number; misses: number; hitRate: number }\r\n    tags: { hits: number; misses: number; hitRate: number }\r\n    queries: { hits: number; misses: number; hitRate: number }\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// 访问模式分析器\r\n// ============================================================================\r\n\r\nclass AccessPatternAnalyzer {\r\n  private accessHistory: Array<{\r\n    key: string\r\n    timestamp: number\r\n    level: CacheLevel\r\n    success: boolean\r\n  }> = []\r\n  \r\n  private patterns = new Map<string, {\r\n    frequency: number\r\n    recency: number\r\n    pattern: 'frequent' | 'sporadic' | 'sequential'\r\n    nextAccessPrediction?: number\r\n  }>()\r\n\r\n  analyze(key: string): 'frequent' | 'sporadic' | 'sequential' {\r\n    const now = Date.now()\r\n    const recentAccesses = this.accessHistory\r\n      .filter(access => \r\n        access.key === key && \r\n        now - access.timestamp < 24 * 60 * 60 * 1000 // 24小时内\r\n      )\r\n      .sort((a, b) => a.timestamp - b.timestamp)\r\n\r\n    if (recentAccesses.length < 2) return 'sporadic'\r\n\r\n    const intervals = []\r\n    for (let i = 1; i < recentAccesses.length; i++) {\r\n      intervals.push(recentAccesses[i].timestamp - recentAccesses[i - 1].timestamp)\r\n    }\r\n\r\n    const avgInterval = intervals.reduce((sum, interval) => sum + interval, 0) / intervals.length\r\n    const variance = intervals.reduce((sum, interval) => sum + Math.pow(interval - avgInterval, 2), 0) / intervals.length\r\n\r\n    if (recentAccesses.length > 5 && variance < avgInterval * 0.3) {\r\n      return 'sequential'\r\n    } else if (recentAccesses.length > 3) {\r\n      return 'frequent'\r\n    }\r\n    \r\n    return 'sporadic'\r\n  }\r\n\r\n  recordAccess(key: string, level: CacheLevel, success: boolean): void {\r\n    this.accessHistory.push({\r\n      key,\r\n      timestamp: Date.now(),\r\n      level,\r\n      success\r\n    })\r\n\r\n    // 保持历史记录在合理范围内\r\n    if (this.accessHistory.length > 10000) {\r\n      this.accessHistory = this.accessHistory.slice(-5000)\r\n    }\r\n\r\n    // 更新模式分析\r\n    this.updatePattern(key)\r\n  }\r\n\r\n  private updatePattern(key: string): void {\r\n    const pattern = this.analyze(key)\r\n    this.patterns.set(key, {\r\n      frequency: this.patterns.get(key)?.frequency || 0 + 1,\r\n      recency: Date.now(),\r\n      pattern\r\n    })\r\n  }\r\n\r\n  predictNextAccess(key: string): number | null {\r\n    const pattern = this.patterns.get(key)\r\n    if (!pattern || pattern.pattern !== 'sequential') return null\r\n\r\n    const recentAccesses = this.accessHistory\r\n      .filter(access => access.key === key)\r\n      .sort((a, b) => b.timestamp - a.timestamp)\r\n\r\n    if (recentAccesses.length < 2) return null\r\n\r\n    const recentInterval = recentAccesses[0].timestamp - recentAccesses[1].timestamp\r\n    return recentAccesses[0].timestamp + recentInterval\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// 多级缓存管理器\r\n// ============================================================================\r\n\r\nexport class MultilevelCacheService {\r\n  private l1Cache: Map<string, EnhancedCacheEntry<any>> = new Map()\r\n  private l2Cache: AdvancedCacheManager\r\n  private l3Cache: Map<string, EnhancedCacheEntry<any>> = new Map()\r\n  \r\n  private config: EnhancedCacheConfig\r\n  private patternAnalyzer: AccessPatternAnalyzer\r\n  private metrics: CachePerformanceMetrics\r\n  private cleanupTimer?: NodeJS.Timeout\r\n  private predictionTimer?: NodeJS.Timeout\r\n\r\n  constructor(config: Partial<EnhancedCacheConfig> = {}) {\r\n    this.config = {\r\n      maxEntries: 5000,\r\n      defaultTTL: 10 * 60 * 1000, // 10分钟\r\n      strategy: CacheStrategy.ADAPTIVE,\r\n      enableCompression: true,\r\n      enablePersistence: true,\r\n      cleanupInterval: 2 * 60 * 1000, // 2分钟\r\n      memoryLimit: 100, // 100MB\r\n      l1: {\r\n        maxSize: 1000,\r\n        ttl: 5 * 60 * 1000, // 5分钟\r\n        strategy: CacheStrategy.LRU\r\n      },\r\n      l2: {\r\n        maxSize: 10000,\r\n        ttl: 30 * 60 * 1000, // 30分钟\r\n        compressionEnabled: true\r\n      },\r\n      l3: {\r\n        enabled: true,\r\n        predictionWindow: 60, // 60分钟\r\n        warmupThreshold: 0.8 // 80%概率\r\n      },\r\n      adaptive: {\r\n        learningRate: 0.1,\r\n        predictionAccuracy: 0.7,\r\n        autoOptimization: true,\r\n        memoryPressureThreshold: 0.8\r\n      },\r\n      ...config\r\n    }\r\n\r\n    this.l2Cache = new AdvancedCacheManager({\r\n      maxEntries: this.config.l2.maxSize,\r\n      defaultTTL: this.config.l2.ttl,\r\n      enableCompression: this.config.l2.compressionEnabled,\r\n      enablePersistence: true,\r\n      strategy: this.config.strategy\r\n    })\r\n\r\n    this.patternAnalyzer = new AccessPatternAnalyzer()\r\n    this.initializeMetrics()\r\n    this.startTimers()\r\n  }\r\n\r\n  // ============================================================================\r\n  // 核心缓存操作\r\n  // ============================================================================\r\n\r\n  /**\r\n   * 智能获取数据 - 多级缓存查找\r\n   */\r\n  async get<T>(key: string, options?: {\r\n    skipPredictiveLoad?: boolean\r\n    forceRefresh?: boolean\r\n    level?: CacheLevel\r\n  }): Promise<T | null> {\r\n    const startTime = performance.now()\r\n    let result: T | null = null\r\n    let foundLevel: CacheLevel | null = null\r\n\r\n    // L1: 内存缓存查找\r\n    if (!options?.level || options.level === CacheLevel.L1_MEMORY) {\r\n      const l1Entry = this.l1Cache.get(key)\r\n      if (l1Entry && !this.isExpired(l1Entry)) {\r\n        result = l1Entry.data\r\n        foundLevel = CacheLevel.L1_MEMORY\r\n        this.updateAccessInfo(l1Entry)\r\n      }\r\n    }\r\n\r\n    // L2: 持久化缓存查找\r\n    if (!result && (!options?.level || options.level === CacheLevel.L2_PERSISTENT)) {\r\n      const l2Result = await this.l2Cache.get<T>(key)\r\n      if (l2Result) {\r\n        result = l2Result\r\n        foundLevel = CacheLevel.L2_PERSISTENT\r\n        \r\n        // 提升到L1缓存\r\n        await this.promoteToL1(key, result)\r\n      }\r\n    }\r\n\r\n    // L3: 预计算缓存查找\r\n    if (!result && this.config.l3.enabled && (!options?.level || options.level === CacheLevel.L3_PREDICTIVE)) {\r\n      const l3Entry = this.l3Cache.get(key)\r\n      if (l3Entry && !this.isExpired(l3Entry)) {\r\n        result = l3Entry.data\r\n        foundLevel = CacheLevel.L3_PREDICTIVE\r\n        this.updateAccessInfo(l3Entry)\r\n      }\r\n    }\r\n\r\n    const accessTime = performance.now() - startTime\r\n    this.recordAccess(key, foundLevel, result !== null, accessTime)\r\n\r\n    // 预测性预加载\r\n    if (result && !options?.skipPredictiveLoad && this.config.l3.enabled) {\r\n      this.predictiveLoad(key).catch(console.error)\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * 智能设置数据\r\n   */\r\n  async set<T>(\r\n    key: string, \r\n    data: T, \r\n    options?: {\r\n      ttl?: number\r\n      level?: CacheLevel\r\n      priority?: 'critical' | 'high' | 'normal' | 'low'\r\n      tags?: string[]\r\n      skipCompression?: boolean\r\n    }\r\n  ): Promise<void> {\r\n    const level = options?.level || this.determineOptimalLevel(key, data)\r\n    const entry = this.createCacheEntry(key, data, options)\r\n\r\n    switch (level) {\r\n      case CacheLevel.L1_MEMORY:\r\n        await this.setToL1(key, entry)\r\n        break\r\n      case CacheLevel.L2_PERSISTENT:\r\n        await this.setToL2(key, entry)\r\n        break\r\n      case CacheLevel.L3_PREDICTIVE:\r\n        await this.setToL3(key, entry)\r\n        break\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 智能删除\r\n   */\r\n  async delete(key: string): Promise<boolean> {\r\n    const l1Deleted = this.l1Cache.delete(key)\r\n    const l2Deleted = await this.l2Cache.delete(key)\r\n    const l3Deleted = this.l3Cache.delete(key)\r\n\r\n    return l1Deleted || l2Deleted || l3Deleted\r\n  }\r\n\r\n  /**\r\n   * 批量操作优化\r\n   */\r\n  async getBatch<T>(keys: string[]): Promise<Map<string, T>> {\r\n    const results = new Map<string, T>()\r\n    const remainingKeys = new Set(keys)\r\n\r\n    // 并行查询多级缓存\r\n    const promises = [\r\n      this.getFromL1Batch<T>(remainingKeys, results),\r\n      this.getFromL2Batch<T>(remainingKeys, results),\r\n      this.getFromL3Batch<T>(remainingKeys, results)\r\n    ]\r\n\r\n    await Promise.all(promises)\r\n\r\n    return results\r\n  }\r\n\r\n  async setBatch<T>(entries: Map<string, T>, options?: {\r\n    ttl?: number\r\n    level?: CacheLevel\r\n  }): Promise<void> {\r\n    const batchSize = 50 // 批量大小\r\n    const batches: Array<Map<string, T>> = []\r\n\r\n    // 分批处理\r\n    let currentBatch = new Map<string, T>()\r\n    for (const [key, value] of entries) {\r\n      currentBatch.set(key, value)\r\n      if (currentBatch.size >= batchSize) {\r\n        batches.push(currentBatch)\r\n        currentBatch = new Map()\r\n      }\r\n    }\r\n    if (currentBatch.size > 0) {\r\n      batches.push(currentBatch)\r\n    }\r\n\r\n    // 并行处理批次\r\n    await Promise.all(batches.map(batch => this.processBatch(batch, options)))\r\n  }\r\n\r\n  // ============================================================================\r\n  // 私有方法实现\r\n  // ============================================================================\r\n\r\n  private determineOptimalLevel(key: string, data: any): CacheLevel {\r\n    const pattern = this.patternAnalyzer.analyze(key)\r\n    const dataSize = this.estimateSize(data)\r\n\r\n    // 关键数据总是放在L1\r\n    if (key.includes('critical') || key.includes('user')) {\r\n      return CacheLevel.L1_MEMORY\r\n    }\r\n\r\n    // 大数据放在L2\r\n    if (dataSize > 1024 * 1024) { // > 1MB\r\n      return CacheLevel.L2_PERSISTENT\r\n    }\r\n\r\n    // 频繁访问的数据放在L1\r\n    if (pattern === 'frequent') {\r\n      return CacheLevel.L1_MEMORY\r\n    }\r\n\r\n    // 顺序访问的数据预加载到L3\r\n    if (pattern === 'sequential' && this.config.l3.enabled) {\r\n      return CacheLevel.L3_PREDICTIVE\r\n    }\r\n\r\n    return CacheLevel.L2_PERSISTENT\r\n  }\r\n\r\n  private createCacheEntry<T>(\r\n    key: string, \r\n    data: T, \r\n    options?: {\r\n      ttl?: number\r\n      priority?: 'critical' | 'high' | 'normal' | 'low'\r\n      tags?: string[]\r\n    }\r\n  ): EnhancedCacheEntry<T> {\r\n    const now = new Date()\r\n    const pattern = this.patternAnalyzer.analyze(key)\r\n    const size = this.estimateSize(data)\r\n\r\n    return {\r\n      data,\r\n      level: CacheLevel.L1_MEMORY, // 默认级别，会被set方法覆盖\r\n      metadata: {\r\n        createdAt: now,\r\n        lastAccessed: now,\r\n        accessCount: 1,\r\n        ttl: options?.ttl || this.config.defaultTTL,\r\n        size,\r\n        compressionRatio: 1,\r\n        accessPattern: pattern,\r\n        priority: options?.priority || 'normal',\r\n        tags: options?.tags || [],\r\n        cost: this.calculateAccessCost(key, data)\r\n      }\r\n    }\r\n  }\r\n\r\n  private async setToL1<T>(key: string, entry: EnhancedCacheEntry<T>): Promise<void> {\r\n    // 检查L1容量\r\n    if (this.l1Cache.size >= this.config.l1.maxSize) {\r\n      this.evictFromL1()\r\n    }\r\n\r\n    entry.level = CacheLevel.L1_MEMORY\r\n    this.l1Cache.set(key, entry)\r\n  }\r\n\r\n  private async setToL2<T>(key: string, entry: EnhancedCacheEntry<T>): Promise<void> {\r\n    entry.level = CacheLevel.L2_PERSISTENT\r\n    await this.l2Cache.set(key, entry.data, {\r\n      ttl: entry.metadata.ttl,\r\n      tags: entry.metadata.tags,\r\n      priority: entry.metadata.priority === 'critical' ? 'high' : \r\n               entry.metadata.priority === 'high' ? 'normal' : 'low'\r\n    })\r\n  }\r\n\r\n  private async setToL3<T>(key: string, entry: EnhancedCacheEntry<T>): Promise<void> {\r\n    if (!this.config.l3.enabled) return\r\n\r\n    entry.level = CacheLevel.L3_PREDICTIVE\r\n    this.l3Cache.set(key, entry)\r\n  }\r\n\r\n  private async promoteToL1<T>(key: string, data: T): Promise<void> {\r\n    const entry = this.createCacheEntry(key, data)\r\n    await this.setToL1(key, entry)\r\n  }\r\n\r\n  private async getFromL1Batch<T>(\r\n    remainingKeys: Set<string>, \r\n    results: Map<string, T>\r\n  ): Promise<void> {\r\n    for (const key of remainingKeys) {\r\n      const entry = this.l1Cache.get(key)\r\n      if (entry && !this.isExpired(entry)) {\r\n        results.set(key, entry.data)\r\n        remainingKeys.delete(key)\r\n        this.updateAccessInfo(entry)\r\n      }\r\n    }\r\n  }\r\n\r\n  private async getFromL2Batch<T>(\r\n    remainingKeys: Set<string>, \r\n    results: Map<string, T>\r\n  ): Promise<void> {\r\n    const l2Promises = Array.from(remainingKeys).map(async key => {\r\n      const data = await this.l2Cache.get<T>(key)\r\n      if (data) {\r\n        results.set(key, data)\r\n        remainingKeys.delete(key)\r\n        await this.promoteToL1(key, data)\r\n      }\r\n    })\r\n    \r\n    await Promise.all(l2Promises)\r\n  }\r\n\r\n  private async getFromL3Batch<T>(\r\n    remainingKeys: Set<string>, \r\n    results: Map<string, T>\r\n  ): Promise<void> {\r\n    for (const key of remainingKeys) {\r\n      const entry = this.l3Cache.get(key)\r\n      if (entry && !this.isExpired(entry)) {\r\n        results.set(key, entry.data)\r\n        remainingKeys.delete(key)\r\n        this.updateAccessInfo(entry)\r\n      }\r\n    }\r\n  }\r\n\r\n  private async processBatch<T>(\r\n    batch: Map<string, T>, \r\n    options?: {\r\n      ttl?: number\r\n      level?: CacheLevel\r\n    }\r\n  ): Promise<void> {\r\n    const promises = Array.from(batch.entries()).map(([key, data]) =>\r\n      this.set(key, data, options)\r\n    )\r\n    await Promise.all(promises)\r\n  }\r\n\r\n  private async predictiveLoad(currentKey: string): Promise<void> {\r\n    const prediction = this.patternAnalyzer.predictNextAccess(currentKey)\r\n    if (!prediction) return\r\n\r\n    const timeToNextAccess = prediction - Date.now()\r\n    if (timeToNextAccess > 0 && timeToNextAccess < this.config.l3.predictionWindow * 60 * 1000) {\r\n      // 这里应该根据key预加载相关数据\r\n      // 实现取决于具体的业务逻辑\r\n    }\r\n  }\r\n\r\n  private evictFromL1(): void {\r\n    switch (this.config.l1.strategy) {\r\n      case CacheStrategy.LRU:\r\n        this.evictLRUL1()\r\n        break\r\n      case CacheStrategy.LFU:\r\n        this.evictLFUL1()\r\n        break\r\n      case CacheStrategy.ADAPTIVE:\r\n        this.evictAdaptiveL1()\r\n        break\r\n    }\r\n  }\r\n\r\n  private evictLRUL1(): void {\r\n    let oldestKey = ''\r\n    let oldestTime = Date.now()\r\n\r\n    this.l1Cache.forEach((entry, key) => {\r\n      if (entry.metadata.lastAccessed.getTime() < oldestTime) {\r\n        oldestTime = entry.metadata.lastAccessed.getTime()\r\n        oldestKey = key\r\n      }\r\n    })\r\n\r\n    if (oldestKey) {\r\n      this.l1Cache.delete(oldestKey)\r\n    }\r\n  }\r\n\r\n  private evictLFUL1(): void {\r\n    let leastFrequentKey = ''\r\n    let lowestCount = Infinity\r\n\r\n    this.l1Cache.forEach((entry, key) => {\r\n      if (entry.metadata.accessCount < lowestCount) {\r\n        lowestCount = entry.metadata.accessCount\r\n        leastFrequentKey = key\r\n      }\r\n    })\r\n\r\n    if (leastFrequentKey) {\r\n      this.l1Cache.delete(leastFrequentKey)\r\n    }\r\n  }\r\n\r\n  private evictAdaptiveL1(): void {\r\n    const entries = Array.from(this.l1Cache.entries())\r\n    \r\n    const scoredEntries = entries.map(([key, entry]) => {\r\n      const age = Date.now() - entry.metadata.createdAt.getTime()\r\n      const frequency = entry.metadata.accessCount\r\n      const priorityWeight = {\r\n        critical: 4,\r\n        high: 3,\r\n        normal: 2,\r\n        low: 1\r\n      }[entry.metadata.priority]\r\n\r\n      const score = (frequency * priorityWeight) / (age / 1000)\r\n      return { key, score }\r\n    })\r\n\r\n    scoredEntries.sort((a, b) => a.score - b.score)\r\n    if (scoredEntries.length > 0) {\r\n      this.l1Cache.delete(scoredEntries[0].key)\r\n    }\r\n  }\r\n\r\n  private isExpired(entry: EnhancedCacheEntry<any>): boolean {\r\n    return Date.now() - entry.metadata.createdAt.getTime() > entry.metadata.ttl\r\n  }\r\n\r\n  private updateAccessInfo(entry: EnhancedCacheEntry<any>): void {\r\n    entry.metadata.lastAccessed = new Date()\r\n    entry.metadata.accessCount++\r\n  }\r\n\r\n  private recordAccess(\r\n    key: string, \r\n    level: CacheLevel | null, \r\n    success: boolean, \r\n    accessTime: number\r\n  ): void {\r\n    if (level) {\r\n      this.patternAnalyzer.recordAccess(key, level, success)\r\n    }\r\n\r\n    // 更新性能指标\r\n    if (success) {\r\n      this.metrics.totalHits++\r\n      if (level) {\r\n        this.metrics.byLevel[level].hits++\r\n        this.metrics.byLevel[level].avgAccessTime = \r\n          (this.metrics.byLevel[level].avgAccessTime + accessTime) / 2\r\n      }\r\n    } else {\r\n      this.metrics.totalMisses++\r\n      if (level) {\r\n        this.metrics.byLevel[level].misses++\r\n      }\r\n    }\r\n\r\n    this.metrics.hitRate = this.metrics.totalHits / (this.metrics.totalHits + this.metrics.totalMisses)\r\n    this.metrics.averageAccessTime = \r\n      (this.metrics.averageAccessTime + accessTime) / 2\r\n\r\n    // 更新实体类型统计\r\n    this.updateEntityMetrics(key, success)\r\n  }\r\n\r\n  private updateEntityMetrics(key: string, success: boolean): void {\r\n    let entityType: keyof CachePerformanceMetrics['byEntity'] = 'queries'\r\n\r\n    if (key.startsWith('card:')) entityType = 'cards'\r\n    else if (key.startsWith('folder:')) entityType = 'folders'\r\n    else if (key.startsWith('tag:')) entityType = 'tags'\r\n\r\n    if (success) {\r\n      this.metrics.byEntity[entityType].hits++\r\n    } else {\r\n      this.metrics.byEntity[entityType].misses++\r\n    }\r\n\r\n    this.metrics.byEntity[entityType].hitRate = \r\n      this.metrics.byEntity[entityType].hits / \r\n      (this.metrics.byEntity[entityType].hits + this.metrics.byEntity[entityType].misses)\r\n  }\r\n\r\n  private estimateSize(data: any): number {\r\n    try {\r\n      return JSON.stringify(data).length * 2 // 简化的字节估算\r\n    } catch {\r\n      return 1024\r\n    }\r\n  }\r\n\r\n  private calculateAccessCost(key: string, data: any): number {\r\n    const size = this.estimateSize(data)\r\n    const pattern = this.patternAnalyzer.analyze(key)\r\n    \r\n    let cost = size / 1024 // 基础成本（KB）\r\n\r\n    // 根据访问模式调整成本\r\n    switch (pattern) {\r\n      case 'frequent':\r\n        cost *= 0.5 // 频繁访问的数据成本低\r\n        break\r\n      case 'sequential':\r\n        cost *= 0.7 // 顺序访问的数据成本较低\r\n        break\r\n      case 'sporadic':\r\n        cost *= 1.2 // 偶尔访问的数据成本较高\r\n        break\r\n    }\r\n\r\n    return cost\r\n  }\r\n\r\n  private initializeMetrics(): void {\r\n    this.metrics = {\r\n      totalHits: 0,\r\n      totalMisses: 0,\r\n      hitRate: 0,\r\n      averageAccessTime: 0,\r\n      memoryUsage: 0,\r\n      diskUsage: 0,\r\n      compressionSavings: 0,\r\n      predictionAccuracy: 0,\r\n      byLevel: {\r\n        [CacheLevel.L1_MEMORY]: { hits: 0, misses: 0, hitRate: 0, avgAccessTime: 0 },\r\n        [CacheLevel.L2_PERSISTENT]: { hits: 0, misses: 0, hitRate: 0, avgAccessTime: 0 },\r\n        [CacheLevel.L3_PREDICTIVE]: { hits: 0, misses: 0, hitRate: 0, avgAccessTime: 0 }\r\n      },\r\n      byEntity: {\r\n        cards: { hits: 0, misses: 0, hitRate: 0 },\r\n        folders: { hits: 0, misses: 0, hitRate: 0 },\r\n        tags: { hits: 0, misses: 0, hitRate: 0 },\r\n        queries: { hits: 0, misses: 0, hitRate: 0 }\r\n      }\r\n    }\r\n  }\r\n\r\n  private startTimers(): void {\r\n    // 清理定时器\r\n    this.cleanupTimer = setInterval(() => {\r\n      this.performCleanup()\r\n    }, this.config.cleanupInterval)\r\n\r\n    // 预测性加载定时器\r\n    if (this.config.l3.enabled) {\r\n      this.predictionTimer = setInterval(() => {\r\n        this.performPredictiveLoading()\r\n      }, 5 * 60 * 1000) // 每5分钟\r\n    }\r\n  }\r\n\r\n  private async performCleanup(): Promise<void> {\r\n    // 清理L1缓存\r\n    const expiredL1Keys: string[] = []\r\n    this.l1Cache.forEach((entry, key) => {\r\n      if (this.isExpired(entry)) {\r\n        expiredL1Keys.push(key)\r\n      }\r\n    })\r\n\r\n    expiredL1Keys.forEach(key => this.l1Cache.delete(key))\r\n\r\n    // 清理L3缓存\r\n    const expiredL3Keys: string[] = []\r\n    this.l3Cache.forEach((entry, key) => {\r\n      if (this.isExpired(entry)) {\r\n        expiredL3Keys.push(key)\r\n      }\r\n    })\r\n\r\n    expiredL3Keys.forEach(key => this.l3Cache.delete(key))\r\n\r\n    // 更新内存使用统计\r\n    this.updateMemoryUsage()\r\n  }\r\n\r\n  private async performPredictiveLoading(): Promise<void> {\r\n    if (!this.config.l3.enabled) return\r\n\r\n    // 基于访问模式预测可能需要的数据\r\n    const predictions = this.generatePredictions()\r\n    \r\n    for (const prediction of predictions) {\r\n      if (prediction.probability > this.config.l3.warmupThreshold) {\r\n        try {\r\n          // 这里应该实现具体的预加载逻辑\r\n          // 预加载相关数据到L3缓存\r\n        } catch (error) {\r\n          console.warn('Predictive loading failed:', error)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private generatePredictions(): Array<{\r\n    key: string\r\n    probability: number\r\n    reason: string\r\n  }> {\r\n    // 基于访问模式生成预测\r\n    const predictions: Array<{\r\n      key: string\r\n      probability: number\r\n      reason: string\r\n    }> = []\r\n\r\n    // 分析频繁访问的模式\r\n    this.patternAnalyzer['patterns'].forEach((pattern, key) => {\r\n      if (pattern.frequency > 5) { // 访问超过5次\r\n        const probability = Math.min(pattern.frequency / 10, 0.95)\r\n        predictions.push({\r\n          key,\r\n          probability,\r\n          reason: `frequent access pattern (${pattern.frequency} times)`\r\n        })\r\n      }\r\n    })\r\n\r\n    return predictions.sort((a, b) => b.probability - a.probability)\r\n  }\r\n\r\n  private updateMemoryUsage(): void {\r\n    let l1Size = 0\r\n    this.l1Cache.forEach(entry => {\r\n      l1Size += entry.metadata.size\r\n    })\r\n\r\n    let l3Size = 0\r\n    this.l3Cache.forEach(entry => {\r\n      l3Size += entry.metadata.size\r\n    })\r\n\r\n    this.metrics.memoryUsage = l1Size + l3Size\r\n    \r\n    // 获取L2缓存的磁盘使用情况\r\n    const l2Stats = this.l2Cache.getStats()\r\n    this.metrics.diskUsage = l2Stats.memoryUsage\r\n    this.metrics.compressionSavings = l2Stats.compressionRatio\r\n  }\r\n\r\n  // ============================================================================\r\n  // 公共API方法\r\n  // ============================================================================\r\n\r\n  /**\r\n   * 获取性能指标\r\n   */\r\n  getMetrics(): CachePerformanceMetrics {\r\n    this.updateMemoryUsage()\r\n    return { ...this.metrics }\r\n  }\r\n\r\n  /**\r\n   * 获取缓存统计\r\n   */\r\n  getStats(): {\r\n    l1: { size: number; maxSize: number }\r\n    l2: CacheStats\r\n    l3: { size: number; enabled: boolean }\r\n    overall: CachePerformanceMetrics\r\n  } {\r\n    return {\r\n      l1: {\r\n        size: this.l1Cache.size,\r\n        maxSize: this.config.l1.maxSize\r\n      },\r\n      l2: this.l2Cache.getStats(),\r\n      l3: {\r\n        size: this.l3Cache.size,\r\n        enabled: this.config.l3.enabled\r\n      },\r\n      overall: this.getMetrics()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清空所有缓存\r\n   */\r\n  async clear(): Promise<void> {\r\n    this.l1Cache.clear()\r\n    this.l3Cache.clear()\r\n    await this.l2Cache.clear()\r\n    this.initializeMetrics()\r\n  }\r\n\r\n  /**\r\n   * 停止服务\r\n   */\r\n  stop(): void {\r\n    if (this.cleanupTimer) {\r\n      clearInterval(this.cleanupTimer)\r\n      this.cleanupTimer = undefined\r\n    }\r\n    \r\n    if (this.predictionTimer) {\r\n      clearInterval(this.predictionTimer)\r\n      this.predictionTimer = undefined\r\n    }\r\n\r\n    this.l2Cache.stop()\r\n  }\r\n\r\n  /**\r\n   * 预热缓存\r\n   */\r\n  async warmup(dataProvider: (key: string) => Promise<any>): Promise<void> {\r\n    if (!this.config.l3.enabled) return\r\n\r\n    const predictions = this.generatePredictions()\r\n    \r\n    for (const prediction of predictions.slice(0, 20)) { // 限制预热数量\r\n      try {\r\n        const data = await dataProvider(prediction.key)\r\n        if (data) {\r\n          await this.setToL3(prediction.key, this.createCacheEntry(prediction.key, data))\r\n        }\r\n      } catch (error) {\r\n        console.warn(`Cache warmup failed for ${prediction.key}:`, error)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// 导出单例实例\r\n// ============================================================================\r\n\r\nexport const multilevelCacheService = new MultilevelCacheService()\r\n\r\n// ============================================================================\r\n// 针对特定实体的缓存包装器\r\n// ============================================================================\r\n\r\nexport class CardCacheEnhanced {\r\n  constructor(private cacheService: MultilevelCacheService) {}\r\n\r\n  async getCard(cardId: string): Promise<DbCard | null> {\r\n    return this.cacheService.get<DbCard>(`card:${cardId}`)\r\n  }\r\n\r\n  async setCard(cardId: string, card: DbCard): Promise<void> {\r\n    await this.cacheService.set(`card:${cardId}`, card, {\r\n      ttl: 10 * 60 * 1000, // 10分钟\r\n      priority: 'normal',\r\n      tags: ['card', 'data']\r\n    })\r\n  }\r\n\r\n  async getCardsByFolder(folderId: string): Promise<DbCard[]> {\r\n    return this.cacheService.get<DbCard[]>(`cards:folder:${folderId}`)\r\n  }\r\n\r\n  async setCardsByFolder(folderId: string, cards: DbCard[]): Promise<void> {\r\n    await this.cacheService.set(`cards:folder:${folderId}`, cards, {\r\n      ttl: 5 * 60 * 1000, // 5分钟\r\n      priority: 'normal',\r\n      tags: ['cards', 'folder', 'list']\r\n    })\r\n  }\r\n\r\n  async searchCards(query: string): Promise<DbCard[]> {\r\n    return this.cacheService.get<DbCard[]>(`search:${query}`)\r\n  }\r\n\r\n  async cacheSearchResults(query: string, results: DbCard[]): Promise<void> {\r\n    await this.cacheService.set(`search:${query}`, results, {\r\n      ttl: 3 * 60 * 1000, // 3分钟\r\n      priority: 'low',\r\n      tags: ['search', 'query']\r\n    })\r\n  }\r\n\r\n  async invalidateCard(cardId: string): Promise<void> {\r\n    await this.cacheService.delete(`card:${cardId}`)\r\n  }\r\n\r\n  async invalidateFolder(folderId: string): Promise<void> {\r\n    await this.cacheService.delete(`cards:folder:${folderId}`)\r\n  }\r\n\r\n  async invalidateSearch(query: string): Promise<void> {\r\n    await this.cacheService.delete(`search:${query}`)\r\n  }\r\n}\r\n\r\nexport const cardCacheEnhanced = new CardCacheEnhanced(multilevelCacheService)\r\n\r\n// ============================================================================\r\n// 便利方法导出\r\n// ============================================================================\r\n\r\nexport const cacheGet = <T>(key: string) => multilevelCacheService.get<T>(key)\r\nexport const cacheSet = <T>(key: string, data: T, options?: any) => \r\n  multilevelCacheService.set(key, data, options)\r\nexport const cacheDelete = (key: string) => multilevelCacheService.delete(key)\r\nexport const cacheClear = () => multilevelCacheService.clear()\r\nexport const cacheBatchGet = <T>(keys: string[]) => multilevelCacheService.getBatch<T>(keys)\r\nexport const cacheBatchSet = <T>(entries: Map<string, T>, options?: any) => \r\n  multilevelCacheService.setBatch(entries, options)\r\nexport const cacheMetrics = () => multilevelCacheService.getMetrics()\r\nexport const cacheWarmup = (dataProvider: (key: string) => Promise<any>) => \r\n  multilevelCacheService.warmup(dataProvider)"],"version":3}
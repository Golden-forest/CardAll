{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\unified-sync-service.ts","mappings":";AAAA;;;GAGG;;;AAEH,yCAAsD;AACtD,yCAA+B;AAC/B,6CAA0F;AAC1F,qEAA+D;AAC/D,qDAAgD;AAEhD,uDAAkF;AAClF,uDAA2F;AA6C3F,+EAA+E;AAC/E,UAAU;AACV,+EAA+E;AAE/E,MAAa,kBAAkB;IAY7B;QAXQ;;;;mBAAgB,KAAK;WAAA;QACrB;;;;mBAAmB,IAAI;WAAA;QACvB;;;;mBAAW,KAAK;WAAA;QAChB;;;;mBAAiB,KAAK;WAAA;QACtB;;;;mBAA4B,EAAE;WAAA;QAC9B;;;;mBAAuB,IAAI,CAAC,iBAAiB,EAAE;WAAA;QAC/C;;;;mBAA+C,IAAI,GAAG,EAAE;WAAA;QACxD;;;;mBAA2C,EAAE;WAAA;QAC7C;;;;mBAAY,IAAI,GAAG,EAAe;WAAA;QAClC;;;;mBAA4B,IAAI;WAAA;QAGtC,IAAI,CAAC,UAAU,EAAE,CAAA;QACjB,IAAI,CAAC,uBAAuB,EAAE,CAAA;IAChC,CAAC;IAEO,iBAAiB;QACvB,OAAO;YACL,eAAe,EAAE,CAAC;YAClB,oBAAoB,EAAE,CAAC;YACvB,gBAAgB,EAAE,CAAC;YACnB,eAAe,EAAE,CAAC;YAClB,YAAY,EAAE,IAAI;YAClB,cAAc,EAAE,CAAC;YACjB,cAAc,EAAE,MAAM;YACtB,YAAY,EAAE,CAAC;SAChB,CAAA;IACH,CAAC;IAED,+EAA+E;IAC/E,SAAS;IACT,+EAA+E;IAEvE,UAAU;QAChB,IAAI,IAAI,CAAC,aAAa;YAAE,OAAM;QAE9B,WAAW;QACX,IAAI,CAAC,4BAA4B,EAAE,CAAA;QAEnC,WAAW;QACX,IAAI,CAAC,0BAA0B,EAAE,CAAA;QAEjC,SAAS;QACT,IAAI,CAAC,mBAAmB,EAAE,CAAA;QAE1B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAA;QACzB,OAAO,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAA;IACjD,CAAC;IAEO,4BAA4B;QAClC,6CAAoB,CAAC,WAAW,CAAC;YAC/B,qBAAqB,EAAE,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC;YAC/D,cAAc,EAAE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC;YAClD,eAAe,EAAE,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC;YACpD,qBAAqB,EAAE,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,IAAI,CAAC;SACjE,CAAC,CAAA;IACJ,CAAC;IAEO,0BAA0B;QAChC,YAAY;QACZ,6BAAgB,CAAC,iBAAiB,CAAC;YACjC,mBAAmB,EAAE,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC;YAC5D,eAAe,EAAE,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC;YACpD,YAAY,EAAE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC;YAC9C,cAAc,EAAE,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC;SACxD,CAAC,CAAA;IACJ,CAAC;IAEO,mBAAmB;QACzB,gBAAgB;QAChB,WAAW,CAAC,GAAG,EAAE;YACf,IAAI,IAAI,CAAC,2BAA2B,EAAE,EAAE,CAAC;gBACvC,IAAI,CAAC,sBAAsB,EAAE,CAAA;YAC/B,CAAC;QACH,CAAC,EAAE,IAAI,CAAC,uBAAuB,EAAE,CAAC,CAAA;QAElC,yBAAyB;QACzB,WAAW,CAAC,GAAG,EAAE;YACf,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;gBAC1C,IAAI,CAAC,qBAAqB,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;YACnD,CAAC;QACH,CAAC,EAAE,KAAK,CAAC,CAAA,CAAC,iBAAiB;IAC7B,CAAC;IAED,+EAA+E;IAC/E,SAAS;IACT,+EAA+E;IAEvE,uBAAuB;QAC7B,eAAe;QACf,gCAAc,CAAC,iBAAiB,CAAC;YAC/B,eAAe,EAAE,CAAC,IAAiB,EAAE,EAAE,CAAC,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC;YAC7E,kBAAkB,EAAE,CAAC,SAA2B,EAAE,EAAE,CAAC,IAAI,CAAC,sBAAsB,CAAC,SAAS,CAAC;YAC3F,cAAc,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC;YACtE,UAAU,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC;YAC9D,cAAc,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC;YAChE,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;SACnD,CAAC,CAAA;IACJ,CAAC;IAEO,0BAA0B,CAAC,IAAiB;QAClD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,KAAK,QAAQ,CAAA;QACxC,IAAI,CAAC,kBAAkB,EAAE,CAAA;QAEzB,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClB,YAAY;YACZ,IAAI,CAAC,sBAAsB,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;QACpD,CAAC;IACH,CAAC;IAEO,sBAAsB,CAAC,SAA2B;QACxD,iBAAiB;QACjB,MAAM,gBAAgB,GAAyB;YAC7C,EAAE,EAAE,SAAS,CAAC,EAAE;YAChB,IAAI,EAAE,SAAS,CAAC,IAAW;YAC3B,MAAM,EAAE,SAAS,CAAC,MAAM;YACxB,QAAQ,EAAE,SAAS,CAAC,QAAQ,IAAI,EAAE;YAClC,IAAI,EAAE,SAAS,CAAC,IAAI;YACpB,QAAQ,EAAE,IAAI,CAAC,gCAAgC,CAAC,SAAS,CAAC,QAAQ,CAAC;YACnE,SAAS,EAAE,SAAS,CAAC,SAAS;YAC9B,MAAM,EAAE,SAAS,CAAC,MAAM;YACxB,QAAQ,EAAE;gBACR,MAAM,EAAE,MAAM;gBACd,kBAAkB,EAAE,SAAS,CAAC,QAAQ,EAAE,kBAAkB;gBAC1D,aAAa,EAAE,SAAS;aACzB;SACF,CAAA;QAED,UAAU;QACV,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;IAC9C,CAAC;IAEO,yBAAyB,CAAC,QAA8C;QAC9E,SAAS;QACT,IAAI,CAAC,eAAe,CAAC;YACnB,MAAM,EAAE,SAAS;YACjB,QAAQ,EAAE,CAAC,QAAQ,CAAC,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,GAAG;YACrD,OAAO,EAAE,WAAW,QAAQ,CAAC,SAAS,IAAI,QAAQ,CAAC,KAAK,EAAE;SAC3D,CAAC,CAAA;IACJ,CAAC;IAEO,qBAAqB,CAAC,QAAa;QACzC,iBAAiB;QACjB,MAAM,eAAe,GAAiB;YACpC,EAAE,EAAE,QAAQ,CAAC,EAAE;YACf,MAAM,EAAE,QAAQ,CAAC,UAAU;YAC3B,QAAQ,EAAE,QAAQ,CAAC,QAAQ;YAC3B,SAAS,EAAE,QAAQ,CAAC,SAAS;YAC7B,SAAS,EAAE,QAAQ,CAAC,UAAU;YAC9B,YAAY,EAAE,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,YAAY,CAAC;YAChE,UAAU,EAAE,QAAQ,CAAC,UAAiB;YACtC,SAAS,EAAE,QAAQ,CAAC,SAAS;SAC9B,CAAA;QAED,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;QACpC,IAAI,CAAC,kBAAkB,EAAE,CAAA;IAC3B,CAAC;IAEO,yBAAyB,CAAC,KAAU;QAC1C,SAAS;QACT,IAAI,CAAC,OAAO,CAAC,eAAe,IAAI,KAAK,CAAC,0BAA0B,CAAA;QAChE,IAAI,CAAC,OAAO,CAAC,oBAAoB,IAAI,KAAK,CAAC,0BAA0B,CAAA;QACrE,IAAI,CAAC,OAAO,CAAC,gBAAgB,IAAI,KAAK,CAAC,gBAAgB,CAAA;QACvD,IAAI,CAAC,OAAO,CAAC,YAAY,GAAG,KAAK,CAAC,YAAY,CAAA;QAE9C,SAAS;QACT,IAAI,CAAC,eAAe,CAAC;YACnB,MAAM,EAAE,WAAW;YACnB,QAAQ,EAAE,GAAG;YACb,OAAO,EAAE,QAAQ;SAClB,CAAC,CAAA;IACJ,CAAC;IAEO,kBAAkB,CAAC,KAAY;QACrC,OAAO,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,CAAA;QAChC,IAAI,CAAC,eAAe,CAAC;YACnB,MAAM,EAAE,OAAO;YACf,QAAQ,EAAE,CAAC;YACX,OAAO,EAAE,WAAW,KAAK,CAAC,OAAO,EAAE;SACpC,CAAC,CAAA;IACJ,CAAC;IAEO,gCAAgC,CAAC,QAAgB;QACvD,QAAQ,QAAQ,EAAE,CAAC;YACjB,KAAK,UAAU,CAAC;YAChB,KAAK,MAAM;gBACT,OAAO,MAAM,CAAA;YACf,KAAK,QAAQ;gBACX,OAAO,QAAQ,CAAA;YACjB,KAAK,KAAK;gBACR,OAAO,KAAK,CAAA;YACd;gBACE,OAAO,QAAQ,CAAA;QACnB,CAAC;IACH,CAAC;IAEO,sBAAsB,CAAC,YAAoB;QACjD,QAAQ,YAAY,EAAE,CAAC;YACrB,KAAK,mBAAmB;gBACtB,OAAO,SAAS,CAAA;YAClB,KAAK,iBAAiB;gBACpB,OAAO,SAAS,CAAA;YAClB,KAAK,oBAAoB;gBACvB,OAAO,WAAW,CAAA;YACpB;gBACE,OAAO,SAAS,CAAA;QACpB,CAAC;IACH,CAAC;IAED,+EAA+E;IAC/E,SAAS;IACT,+EAA+E;IAE/E;;OAEG;IACH,KAAK,CAAC,YAAY,CAAC,SAAyD;QAC1E,MAAM,SAAS,GAAyB;YACtC,GAAG,SAAS;YACZ,EAAE,EAAE,MAAM,CAAC,UAAU,EAAE;YACvB,SAAS,EAAE,IAAI,IAAI,EAAE;SACtB,CAAA;QAED,IAAI,CAAC;YACH,YAAY;YACZ,MAAM,OAAO,GAAwD;gBACnE,IAAI,EAAE,SAAS,CAAC,IAAI;gBACpB,MAAM,EAAE,SAAS,CAAC,MAAM;gBACxB,QAAQ,EAAE,SAAS,CAAC,QAAQ;gBAC5B,MAAM,EAAE,SAAS,CAAC,MAAM;gBACxB,IAAI,EAAE,SAAS,CAAC,IAAI;gBACpB,QAAQ,EAAE,SAAS,CAAC,QAAQ;gBAC5B,UAAU,EAAE,CAAC;gBACb,UAAU,EAAE,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC;gBAClD,YAAY,EAAE,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC;aACvD,CAAA;YAED,QAAQ;YACR,MAAM,WAAW,GAAG,MAAM,6BAAgB,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAA;YAEpE,SAAS;YACT,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;YAErC,OAAO;YACP,IAAI,CAAC,aAAa,CAAC,EAAE,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,eAAe,GAAG,CAAC,EAAE,CAAC,CAAA;YAEzE,cAAc;YACd,IAAI,IAAI,CAAC,wBAAwB,EAAE,EAAE,CAAC;gBACpC,IAAI,CAAC,qBAAqB,EAAE,CAAA;YAC9B,CAAC;YAED,OAAO,WAAW,CAAA;QACpB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAA;YACrD,MAAM,KAAK,CAAA;QACb,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,eAAe;QACnB,IAAI,IAAI,CAAC,cAAc,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC;YAC3C,OAAM;QACR,CAAC;QAED,IAAI,CAAC,cAAc,GAAG,IAAI,CAAA;QAC1B,IAAI,CAAC,kBAAkB,EAAE,CAAA;QAEzB,IAAI,CAAC;YACH,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;YAEnC,uBAAuB;YACvB,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAA;YAElC,iBAAiB;YACjB,MAAM,IAAI,CAAC,aAAa,EAAE,CAAA;YAE1B,cAAc;YACd,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAA;YAE7B,UAAU;YACV,MAAM,IAAI,CAAC,yBAAyB,EAAE,CAAA;YAEtC,UAAU;YACV,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAA;YAElC,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS,CAAA;YAC9C,IAAI,CAAC,YAAY,GAAG,IAAI,IAAI,EAAE,CAAA;YAE9B,OAAO;YACP,IAAI,CAAC,aAAa,CAAC;gBACjB,YAAY,EAAE,IAAI,CAAC,YAAY;gBAC/B,eAAe,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,GAAG,QAAQ,CAAC,GAAG,CAAC;aAC/D,CAAC,CAAA;YAEF,OAAO,CAAC,GAAG,CAAC,0BAA0B,QAAQ,IAAI,CAAC,CAAA;QAErD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAA;YACzC,MAAM,KAAK,CAAA;QACb,CAAC;gBAAS,CAAC;YACT,IAAI,CAAC,cAAc,GAAG,KAAK,CAAA;YAC3B,IAAI,CAAC,kBAAkB,EAAE,CAAA;QAC3B,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,sBAAsB;QAC1B,IAAI,IAAI,CAAC,cAAc,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC;YAC3C,OAAM;QACR,CAAC;QAED,IAAI,CAAC;YACH,kBAAkB;YAClB,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAA;YAElC,YAAY;YACZ,MAAM,IAAI,CAAC,6BAA6B,EAAE,CAAA;YAE1C,SAAS;YACT,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAA;YAE9B,OAAO;YACP,IAAI,CAAC,YAAY,EAAE,CAAA;QAErB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAA;QAClD,CAAC;IACH,CAAC;IAED,+EAA+E;IAC/E,WAAW;IACX,2EAA2E;IAE3E;;OAEG;IACK,KAAK,CAAC,qBAAqB;QACjC,IAAI,CAAC,IAAI,CAAC,QAAQ;YAAE,OAAM;QAE1B,IAAI,CAAC;YACH,kBAAkB;YAClB,MAAM,iBAAiB,GAAG,MAAM,uCAAqB,CAAC,wBAAwB,EAAE,CAAA;YAEhF,IAAI,iBAAiB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACnC,OAAM;YACR,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,cAAc,iBAAiB,CAAC,MAAM,wBAAwB,CAAC,CAAA;YAE3E,WAAW;YACX,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,2BAA2B,CAAC,iBAAiB,CAAC,CAAA;YAEzE,WAAW;YACX,MAAM,uCAAqB,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAA;YAE5D,SAAS;YACT,IAAI,CAAC,OAAO,CAAC,eAAe,IAAI,OAAO,CAAC,MAAM,CAAA;YAC9C,IAAI,CAAC,OAAO,CAAC,oBAAoB,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAA;YAC1E,IAAI,CAAC,OAAO,CAAC,gBAAgB,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAA;QAEzE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,qCAAqC,EAAE,KAAK,CAAC,CAAA;QAC7D,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,2BAA2B,CAAC,UAAgC;QAKxE,MAAM,OAAO,GAIP,EAAE,CAAA;QAER,UAAU;QACV,MAAM,eAAe,GAAG,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAA;QAEnE,UAAU;QACV,KAAK,MAAM,CAAC,aAAa,EAAE,cAAc,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE,CAAC;YAC9E,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,aAAa,EAAE,cAAc,CAAC,CAAA;YACzF,OAAO,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC,CAAA;QAC/B,CAAC;QAED,OAAO,OAAO,CAAA;IAChB,CAAC;IAED;;OAEG;IACK,0BAA0B,CAAC,UAAgC;QACjE,MAAM,MAAM,GAAyC,EAAE,CAAA;QAEvD,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE,CAAC;YACnC,MAAM,GAAG,GAAG,GAAG,SAAS,CAAC,UAAU,IAAI,SAAS,CAAC,aAAa,EAAE,CAAA;YAChE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC;gBACjB,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAA;YAClB,CAAC;YACD,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;QAC7B,CAAC;QAED,OAAO,MAAM,CAAA;IACf,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,0BAA0B,CACtC,aAAqB,EACrB,UAAgC;QAMhC,MAAM,OAAO,GAIP,EAAE,CAAA;QAER,IAAI,CAAC;YACH,QAAQ,aAAa,EAAE,CAAC;gBACtB,KAAK,aAAa,CAAC;gBACnB,KAAK,aAAa,CAAC;gBACnB,KAAK,aAAa;oBAChB,MAAM,IAAI,CAAC,qBAAqB,CAAC,UAAU,EAAE,OAAO,CAAC,CAAA;oBACrD,MAAK;gBACP,KAAK,eAAe,CAAC;gBACrB,KAAK,eAAe,CAAC;gBACrB,KAAK,eAAe;oBAClB,MAAM,IAAI,CAAC,uBAAuB,CAAC,UAAU,EAAE,OAAO,CAAC,CAAA;oBACvD,MAAK;gBACP,KAAK,YAAY,CAAC;gBAClB,KAAK,YAAY,CAAC;gBAClB,KAAK,YAAY;oBACf,MAAM,IAAI,CAAC,oBAAoB,CAAC,UAAU,EAAE,OAAO,CAAC,CAAA;oBACpD,MAAK;gBACP;oBACE,OAAO,CAAC,IAAI,CAAC,2BAA2B,aAAa,EAAE,CAAC,CAAA;oBACxD,KAAK,MAAM,EAAE,IAAI,UAAU,EAAE,CAAC;wBAC5B,OAAO,CAAC,IAAI,CAAC;4BACX,WAAW,EAAE,EAAE,CAAC,EAAE;4BAClB,OAAO,EAAE,KAAK;4BACd,KAAK,EAAE,2BAA2B,aAAa,EAAE;yBAClD,CAAC,CAAA;oBACJ,CAAC;YACL,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,qCAAqC,aAAa,GAAG,EAAE,KAAK,CAAC,CAAA;YAC3E,KAAK,MAAM,EAAE,IAAI,UAAU,EAAE,CAAC;gBAC5B,OAAO,CAAC,IAAI,CAAC;oBACX,WAAW,EAAE,EAAE,CAAC,EAAE;oBAClB,OAAO,EAAE,KAAK;oBACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;iBAChE,CAAC,CAAA;YACJ,CAAC;QACH,CAAC;QAED,OAAO,OAAO,CAAA;IAChB,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,qBAAqB,CACjC,UAAgC,EAChC,OAIG;QAEH,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE,CAAC;YACnC,IAAI,CAAC;gBACH,QAAQ,SAAS,CAAC,aAAa,EAAE,CAAC;oBAChC,KAAK,QAAQ;wBACX,MAAM,mBAAQ;6BACX,IAAI,CAAC,OAAO,CAAC;6BACb,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC;6BACtB,MAAM,EAAE;6BACR,MAAM,EAAE,CAAA;wBACX,MAAK;oBACP,KAAK,QAAQ;wBACX,MAAM,mBAAQ;6BACX,IAAI,CAAC,OAAO,CAAC;6BACb,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC;6BACtB,EAAE,CAAC,IAAI,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAA;wBAC/B,MAAK;oBACP,KAAK,QAAQ;wBACX,MAAM,mBAAQ;6BACX,IAAI,CAAC,OAAO,CAAC;6BACb,MAAM,EAAE;6BACR,EAAE,CAAC,IAAI,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAA;wBAC/B,MAAK;gBACT,CAAC;gBAED,OAAO,CAAC,IAAI,CAAC;oBACX,WAAW,EAAE,SAAS,CAAC,EAAE;oBACzB,OAAO,EAAE,IAAI;iBACd,CAAC,CAAA;YACJ,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,IAAI,CAAC;oBACX,WAAW,EAAE,SAAS,CAAC,EAAE;oBACzB,OAAO,EAAE,KAAK;oBACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;iBAChE,CAAC,CAAA;YACJ,CAAC;QACH,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,uBAAuB,CACnC,UAAgC,EAChC,OAIG;QAEH,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE,CAAC;YACnC,IAAI,CAAC;gBACH,QAAQ,SAAS,CAAC,aAAa,EAAE,CAAC;oBAChC,KAAK,QAAQ;wBACX,MAAM,mBAAQ;6BACX,IAAI,CAAC,SAAS,CAAC;6BACf,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC;6BACtB,MAAM,EAAE;6BACR,MAAM,EAAE,CAAA;wBACX,MAAK;oBACP,KAAK,QAAQ;wBACX,MAAM,mBAAQ;6BACX,IAAI,CAAC,SAAS,CAAC;6BACf,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC;6BACtB,EAAE,CAAC,IAAI,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAA;wBAC/B,MAAK;oBACP,KAAK,QAAQ;wBACX,MAAM,mBAAQ;6BACX,IAAI,CAAC,SAAS,CAAC;6BACf,MAAM,EAAE;6BACR,EAAE,CAAC,IAAI,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAA;wBAC/B,MAAK;gBACT,CAAC;gBAED,OAAO,CAAC,IAAI,CAAC;oBACX,WAAW,EAAE,SAAS,CAAC,EAAE;oBACzB,OAAO,EAAE,IAAI;iBACd,CAAC,CAAA;YACJ,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,IAAI,CAAC;oBACX,WAAW,EAAE,SAAS,CAAC,EAAE;oBACzB,OAAO,EAAE,KAAK;oBACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;iBAChE,CAAC,CAAA;YACJ,CAAC;QACH,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,oBAAoB,CAChC,UAAgC,EAChC,OAIG;QAEH,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE,CAAC;YACnC,IAAI,CAAC;gBACH,QAAQ,SAAS,CAAC,aAAa,EAAE,CAAC;oBAChC,KAAK,QAAQ;wBACX,MAAM,mBAAQ;6BACX,IAAI,CAAC,MAAM,CAAC;6BACZ,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC;6BACtB,MAAM,EAAE;6BACR,MAAM,EAAE,CAAA;wBACX,MAAK;oBACP,KAAK,QAAQ;wBACX,MAAM,mBAAQ;6BACX,IAAI,CAAC,MAAM,CAAC;6BACZ,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC;6BACtB,EAAE,CAAC,IAAI,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAA;wBAC/B,MAAK;oBACP,KAAK,QAAQ;wBACX,MAAM,mBAAQ;6BACX,IAAI,CAAC,MAAM,CAAC;6BACZ,MAAM,EAAE;6BACR,EAAE,CAAC,IAAI,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAA;wBAC/B,MAAK;gBACT,CAAC;gBAED,OAAO,CAAC,IAAI,CAAC;oBACX,WAAW,EAAE,SAAS,CAAC,EAAE;oBACzB,OAAO,EAAE,IAAI;iBACd,CAAC,CAAA;YACJ,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,IAAI,CAAC;oBACX,WAAW,EAAE,SAAS,CAAC,EAAE;oBACzB,OAAO,EAAE,KAAK;oBACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;iBAChE,CAAC,CAAA;YACJ,CAAC;QACH,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,sBAAsB;QAC1B,OAAO,MAAM,uCAAqB,CAAC,wBAAwB,EAAE,CAAA;IAC/D,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,0BAA0B;QAC9B,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;YACxB,OAAO,CAAC,GAAG,CAAC,0DAA0D,CAAC,CAAA;YACvE,OAAM;QACR,CAAC;QAED,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAA;IACpC,CAAC;IAED,+EAA+E;IAC/E,SAAS;IACT,+EAA+E;IAEvE,KAAK,CAAC,aAAa;QACzB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,eAAe,EAAE;YAAE,OAAM;QAEhD,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAA;QAC9C,IAAI,CAAC,IAAI;YAAE,OAAM;QAEjB,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,CAAA;QAEjD,gBAAgB;QAChB,MAAM,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YAC/C,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC;YAC7C,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC;YAC/C,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC;SAC7C,CAAC,CAAA;QAEF,WAAW;QACX,MAAM,OAAO,CAAC,GAAG,CAAC;YAChB,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC;YAC3B,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC;YAC/B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;SAC1B,CAAC,CAAA;IACJ,CAAC;IAEO,KAAK,CAAC,YAAY,CAAC,KAAa,EAAE,MAAc,EAAE,KAAW;QACnE,MAAM,QAAQ,GAAG,GAAG,KAAK,IAAI,MAAM,IAAI,KAAK,CAAC,WAAW,EAAE,EAAE,CAAA;QAE5D,OAAO;QACP,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC;YACjC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAA;YAC7B,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;QACrC,CAAC;QAED,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAA;QAE9B,UAAU;QACV,MAAM,KAAK,GAAG,mBAAQ;aACnB,IAAI,CAAC,KAAK,CAAC;aACX,MAAM,CAAC,GAAG,CAAC;aACX,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC;aACrB,GAAG,CAAC,YAAY,EAAE,KAAK,CAAC,WAAW,EAAE,CAAC,CAAA;QAEzC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,KAAK,CAAA;QACnC,IAAI,KAAK;YAAE,MAAM,KAAK,CAAA;QAEtB,OAAO;QACP,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,IAAI,EAAE,CAAC,CAAA;QACxC,OAAO,IAAI,IAAI,EAAE,CAAA;IACnB,CAAC;IAEO,KAAK,CAAC,eAAe,CAAC,UAAiB;QAC7C,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE,CAAC;YACnC,MAAM,SAAS,GAAG,MAAM,aAAE,CAAC,KAAK,EAAE,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,CAAA;YAEnD,IAAI,CAAC,SAAS,EAAE,CAAC;gBACf,WAAW;gBACX,MAAM,aAAE,CAAC,KAAK,EAAE,GAAG,CAAC,8BAAa,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAA;YAC7D,CAAC;iBAAM,CAAC;gBACN,aAAa;gBACb,MAAM,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAE,SAAS,CAAC,CAAA;YACtD,CAAC;QACH,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,iBAAiB,CAAC,YAAmB;QACjD,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE,CAAC;YACvC,MAAM,WAAW,GAAG,MAAM,aAAE,CAAC,OAAO,EAAE,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,CAAA;YAEzD,IAAI,CAAC,WAAW,EAAE,CAAC;gBACjB,MAAM,aAAE,CAAC,OAAO,EAAE,GAAG,CAAC,8BAAa,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,CAAA;YACnE,CAAC;iBAAM,CAAC;gBACN,MAAM,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAA;YAC5D,CAAC;QACH,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,cAAc,CAAC,SAAgB;QAC3C,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE,CAAC;YACjC,MAAM,QAAQ,GAAG,MAAM,aAAE,CAAC,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAA;YAEhD,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACd,MAAM,aAAE,CAAC,IAAI,EAAE,GAAG,CAAC,8BAAa,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAA;YAC1D,CAAC;iBAAM,CAAC;gBACN,MAAM,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAA;YACnD,CAAC;QACH,CAAC;IACH,CAAC;IAED,+EAA+E;IAC/E,OAAO;IACP,+EAA+E;IAEvE,KAAK,CAAC,yBAAyB;QACrC,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,eAAe,EAAE,CAAA;QAE9C,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE,CAAC;YACjC,MAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAA;QACtC,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,eAAe;QAC3B,MAAM,SAAS,GAAmB,EAAE,CAAA;QAEpC,SAAS;QACT,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAA;QACtD,SAAS,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,CAAA;QAEhC,UAAU;QACV,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAA;QAC1D,SAAS,CAAC,IAAI,CAAC,GAAG,eAAe,CAAC,CAAA;QAElC,SAAS;QACT,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAA;QACpD,SAAS,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC,CAAA;QAE/B,OAAO,SAAS,CAAA;IAClB,CAAC;IAEO,KAAK,CAAC,mBAAmB,CAAC,SAAiB,EAAE,SAAc;QACjE,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,CAAA;QACzD,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,OAAO,EAAE,CAAA;QAE1D,IAAI,SAAS,GAAG,SAAS,EAAE,CAAC;YAC1B,SAAS;YACT,MAAM,aAAE,CAAC,KAAK,EAAE,MAAM,CAAC,SAAS,CAAC,EAAE,EAAE,8BAAa,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAA;QAC9E,CAAC;aAAM,IAAI,SAAS,GAAG,SAAS,IAAI,SAAS,CAAC,WAAW,EAAE,CAAC;YAC1D,gBAAgB;YAChB,MAAM,IAAI,CAAC,YAAY,CAAC;gBACtB,IAAI,EAAE,QAAQ;gBACd,MAAM,EAAE,MAAM;gBACd,QAAQ,EAAE,SAAS,CAAC,EAAE;gBACtB,IAAI,EAAE,SAAS;gBACf,QAAQ,EAAE,QAAQ;gBAClB,MAAM,EAAE,SAAS,CAAC,MAAM;aACzB,CAAC,CAAA;QACJ,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,qBAAqB,CAAC,WAAqB,EAAE,WAAgB;QACzE,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,CAAA;QAC3D,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,OAAO,EAAE,CAAA;QAE5D,IAAI,SAAS,GAAG,SAAS,EAAE,CAAC;YAC1B,MAAM,aAAE,CAAC,OAAO,EAAE,MAAM,CAAC,WAAW,CAAC,EAAE,EAAE,8BAAa,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,CAAA;QACtF,CAAC;aAAM,IAAI,SAAS,GAAG,SAAS,IAAI,WAAW,CAAC,WAAW,EAAE,CAAC;YAC5D,MAAM,IAAI,CAAC,YAAY,CAAC;gBACtB,IAAI,EAAE,QAAQ;gBACd,MAAM,EAAE,QAAQ;gBAChB,QAAQ,EAAE,WAAW,CAAC,EAAE;gBACxB,IAAI,EAAE,WAAW;gBACjB,QAAQ,EAAE,QAAQ;gBAClB,MAAM,EAAE,WAAW,CAAC,MAAM;aAC3B,CAAC,CAAA;QACJ,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,kBAAkB,CAAC,QAAe,EAAE,QAAa;QAC7D,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,CAAA;QACxD,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,OAAO,EAAE,CAAA;QAEzD,IAAI,SAAS,GAAG,SAAS,EAAE,CAAC;YAC1B,MAAM,aAAE,CAAC,IAAI,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAE,EAAE,8BAAa,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAA;QAC1E,CAAC;aAAM,IAAI,SAAS,GAAG,SAAS,IAAI,QAAQ,CAAC,WAAW,EAAE,CAAC;YACzD,MAAM,IAAI,CAAC,YAAY,CAAC;gBACtB,IAAI,EAAE,QAAQ;gBACd,MAAM,EAAE,KAAK;gBACb,QAAQ,EAAE,QAAQ,CAAC,EAAE;gBACrB,IAAI,EAAE,QAAQ;gBACd,QAAQ,EAAE,QAAQ;gBAClB,MAAM,EAAE,QAAQ,CAAC,MAAM;aACxB,CAAC,CAAA;QACJ,CAAC;IACH,CAAC;IAED,+EAA+E;IAC/E,OAAO;IACP,+EAA+E;IAEvE,KAAK,CAAC,gBAAgB;QAC5B,aAAa;QACb,uBAAuB;IACzB,CAAC;IAEO,KAAK,CAAC,qBAAqB;QACjC,IAAI,IAAI,CAAC,cAAc;YAAE,OAAM;QAE/B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAA;QAC1B,IAAI,CAAC;YACH,MAAM,6BAAgB,CAAC,gBAAgB,EAAE,CAAA;QAC3C,CAAC;gBAAS,CAAC;YACT,IAAI,CAAC,cAAc,GAAG,KAAK,CAAA;QAC7B,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,6BAA6B;QACzC,MAAM,eAAe,GAAG,MAAM,6BAAgB,CAAC,aAAa,CAAC;YAC3D,QAAQ,EAAE,MAAM;YAChB,KAAK,EAAE,CAAC;SACT,CAAC,CAAA;QAEF,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC/B,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAA;QACpC,CAAC;IACH,CAAC;IAED,+EAA+E;IAC/E,UAAU;IACV,+EAA+E;IAEvE,wBAAwB,CAAC,KAAU;QACzC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAA;QAE9B,IAAI,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC;YACpC,YAAY;YACZ,IAAI,CAAC,sBAAsB,EAAE,CAAA;QAC/B,CAAC;QAED,IAAI,CAAC,kBAAkB,EAAE,CAAA;IAC3B,CAAC;IAEO,kBAAkB,CAAC,KAAU,EAAE,OAAgB;QACrD,OAAO,CAAC,IAAI,CAAC,gCAAgC,EAAE,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAA;QAEtE,aAAa;QACb,IAAI,KAAK,CAAC,IAAI,KAAK,iBAAiB,EAAE,CAAC;YACrC,6BAAgB,CAAC,KAAK,EAAE,CAAA;QAC1B,CAAC;IACH,CAAC;IAEO,mBAAmB,CAAC,OAAY,EAAE,QAAa;QACrD,IAAI,QAAQ,CAAC,OAAO,EAAE,CAAC;YACrB,IAAI,CAAC,OAAO,CAAC,YAAY,GAAG,IAAI,IAAI,EAAE,CAAA;QACxC,CAAC;IACH,CAAC;IAEO,yBAAyB,CAAC,QAAa;QAC7C,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAA;IACjD,CAAC;IAEO,uBAAuB,CAAC,SAAyB,EAAE,OAAgB;QACzE,IAAI,OAAO,EAAE,CAAC;YACZ,IAAI,CAAC,aAAa,CAAC;gBACjB,oBAAoB,EAAE,IAAI,CAAC,OAAO,CAAC,oBAAoB,GAAG,CAAC;aAC5D,CAAC,CAAA;QACJ,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,aAAa,CAAC;gBACjB,gBAAgB,EAAE,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,CAAC;aACpD,CAAC,CAAA;QACJ,CAAC;IACH,CAAC;IAEO,mBAAmB,CAAC,MAAuB;QACjD,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,MAAM,CAAC,CAAA;IAC9C,CAAC;IAEO,gBAAgB,CAAC,KAAY;QACnC,OAAO,CAAC,KAAK,CAAC,cAAc,EAAE,KAAK,CAAC,CAAA;IACtC,CAAC;IAEO,uBAAuB,CAAC,KAAU;QACxC,IAAI,CAAC,kBAAkB,EAAE,CAAA;IAC3B,CAAC;IAED,+EAA+E;IAC/E,OAAO;IACP,+EAA+E;IAEvE,OAAO;QACb,MAAM,YAAY,GAAG,6CAAoB,CAAC,eAAe,EAAE,CAAA;QAC3D,OAAO,IAAI,CAAC,QAAQ;YACb,IAAI,CAAC,WAAW,EAAE,eAAe,EAAE;YACnC,YAAY,CAAC,OAAO,CAAA;IAC7B,CAAC;IAEO,wBAAwB;QAC9B,OAAO,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,cAAc,CAAA;IAC/C,CAAC;IAEO,2BAA2B;QACjC,MAAM,YAAY,GAAG,6CAAoB,CAAC,eAAe,EAAE,CAAA;QAC3D,OAAO,YAAY,CAAC,OAAO;YACpB,CAAC,IAAI,CAAC,cAAc;YACpB,IAAI,CAAC,WAAW,EAAE,eAAe,EAAE,CAAA;IAC5C,CAAC;IAEO,uBAAuB;QAC7B,MAAM,YAAY,GAAG,6CAAoB,CAAC,eAAe,EAAE,CAAA;QAE3D,QAAQ,YAAY,CAAC,OAAO,EAAE,CAAC;YAC7B,KAAK,WAAW,CAAC,CAAC,OAAO,EAAE,GAAG,IAAI,CAAA,CAAC,MAAM;YACzC,KAAK,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,IAAI,CAAA,CAAC,MAAM;YACxC,KAAK,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,IAAI,CAAA,CAAC,MAAM;YACxC,KAAK,MAAM,CAAC,CAAC,OAAO,EAAE,GAAG,EAAE,GAAG,IAAI,CAAA,CAAC,OAAO;YAC1C,OAAO,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,IAAI,CAAA;QAC/B,CAAC;IACH,CAAC;IAEO,aAAa,CAAC,QAAmC;QACvD,QAAQ,QAAQ,EAAE,CAAC;YACjB,KAAK,MAAM,CAAC,CAAC,OAAO,CAAC,CAAA;YACrB,KAAK,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAA;YACvB,KAAK,KAAK,CAAC,CAAC,OAAO,CAAC,CAAA;QACtB,CAAC;IACH,CAAC;IAEO,wBAAwB,CAAC,SAA+B;QAC9D,eAAe;QACf,MAAM,YAAY,GAAa,EAAE,CAAA;QAEjC,IAAI,SAAS,CAAC,MAAM,KAAK,MAAM,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC3D,gBAAgB;YAChB,YAAY,CAAC,IAAI,CAAC,UAAU,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAA;QACxD,CAAC;QAED,OAAO,YAAY,CAAA;IACrB,CAAC;IAEO,kBAAkB,CAAC,KAAc;QACvC,aAAa;QACb,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,IAAI,CAAC,CAAA;QAC/C,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,GAAG,KAAK,CAAC,CAAA;QAClG,IAAI,CAAC,aAAa,CAAC,EAAE,YAAY,EAAE,IAAI,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,CAAA;IAC1D,CAAC;IAEO,aAAa,CAAC,OAA6B;QACjD,IAAI,CAAC,OAAO,GAAG,EAAE,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,OAAO,EAAE,CAAA;IAChD,CAAC;IAEO,YAAY;QAClB,SAAS;QACT,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;QACtB,MAAM,MAAM,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAA,CAAC,MAAM;QAEnC,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,CAAC;YACpD,IAAI,GAAG,GAAG,KAAK,CAAC,SAAS,GAAG,MAAM,EAAE,CAAC;gBACnC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;YAC5B,CAAC;QACH,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,iBAAiB;QAC7B,gBAAgB;QAChB,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,MAAM,iBAAiB,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAA;YAElE,kBAAkB;YAClB,IAAI,iBAAiB,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,CAAC;gBACvC,MAAM,IAAI,CAAC,eAAe,EAAE,CAAA;YAC9B,CAAC;QACH,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,qBAAqB;QACjC,eAAe;QACf,eAAe;IACjB,CAAC;IAED,+EAA+E;IAC/E,QAAQ;IACR,+EAA+E;IAE/E,cAAc,CAAC,WAAgB;QAC7B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAA;QAE9B,WAAW;QACX,WAAW,CAAC,iBAAiB,CAAC,CAAC,SAAc,EAAE,EAAE;YAC/C,IAAI,SAAS,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC;gBACrC,IAAI,CAAC,eAAe,EAAE,CAAA;YACxB,CAAC;QACH,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,cAAc,CAAC,QAAsC;QACnD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;QAC5B,QAAQ,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAA;QAEjC,OAAO,GAAG,EAAE;YACV,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;QACjC,CAAC,CAAA;IACH,CAAC;IAEO,KAAK,CAAC,kBAAkB;QAC9B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAA;QAC5C,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAA;IACtD,CAAC;IAED,KAAK,CAAC,gBAAgB;QACpB,MAAM,YAAY,GAAG,6CAAoB,CAAC,eAAe,EAAE,CAAA;QAC3D,MAAM,UAAU,GAAG,MAAM,6BAAgB,CAAC,aAAa,EAAE,CAAA;QAEzD,OAAO;YACL,QAAQ,EAAE,YAAY,CAAC,QAAQ;YAC/B,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,YAAY;YACvC,iBAAiB,EAAE,UAAU,CAAC,eAAe;YAC7C,cAAc,EAAE,IAAI,CAAC,cAAc;YACnC,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC;SACxC,CAAA;IACH,CAAC;IAED,+EAA+E;IAC/E,QAAQ;IACR,+EAA+E;IAE/E,KAAK,CAAC,UAAU;QACd,OAAO,EAAE,GAAG,IAAI,CAAC,OAAO,EAAE,CAAA;IAC5B,CAAC;IAED,KAAK,CAAC,YAAY;QAChB,OAAO,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAA;IAC5B,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,OAIzB;QACC,IAAI,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAA;QAExC,IAAI,OAAO,EAAE,MAAM,EAAE,CAAC;YACpB,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,MAAM,KAAK,OAAO,CAAC,MAAM,CAAC,CAAA;QAC9D,CAAC;QAED,IAAI,OAAO,EAAE,IAAI,EAAE,CAAC;YAClB,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,KAAK,OAAO,CAAC,IAAI,CAAC,CAAA;QAC1D,CAAC;QAED,IAAI,OAAO,EAAE,KAAK,EAAE,CAAC;YACnB,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC,KAAK,CAAC,CAAA;QAC3C,CAAC;QAED,OAAO,OAAO,CAAA;IAChB,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,SAAgB;QACjC,IAAI,SAAS,EAAE,CAAC;YACd,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAClD,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,GAAG,SAAS,CAC/B,CAAA;QACH,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAA;QAC5B,CAAC;IACH,CAAC;IAED,KAAK,CAAC,SAAS;QACb,MAAM,IAAI,CAAC,eAAe,EAAE,CAAA;IAC9B,CAAC;IAED,KAAK,CAAC,SAAS;QACb,6BAAgB,CAAC,KAAK,EAAE,CAAA;QACxB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAA;IAC5B,CAAC;IAED,KAAK,CAAC,UAAU;QACd,6BAAgB,CAAC,MAAM,EAAE,CAAA;QACzB,IAAI,CAAC,cAAc,GAAG,KAAK,CAAA;QAC3B,IAAI,CAAC,qBAAqB,EAAE,CAAA;IAC9B,CAAC;CACF;AAzkCD,gDAykCC;AAED,+EAA+E;AAC/E,SAAS;AACT,+EAA+E;AAElE,QAAA,kBAAkB,GAAG,IAAI,kBAAkB,EAAE,CAAA;AAE1D,+EAA+E;AAC/E,SAAS;AACT,+EAA+E;AAExE,MAAM,gBAAgB,GAAG,CAAC,SAAyD,EAAE,EAAE,CAC5F,0BAAkB,CAAC,YAAY,CAAC,SAAS,CAAC,CAAA;AAD/B,QAAA,gBAAgB,oBACe;AAErC,MAAM,eAAe,GAAG,GAAG,EAAE,CAAC,0BAAkB,CAAC,eAAe,EAAE,CAAA;AAA5D,QAAA,eAAe,mBAA6C;AAClE,MAAM,sBAAsB,GAAG,GAAG,EAAE,CAAC,0BAAkB,CAAC,sBAAsB,EAAE,CAAA;AAA1E,QAAA,sBAAsB,0BAAoD;AAChF,MAAM,cAAc,GAAG,GAAG,EAAE,CAAC,0BAAkB,CAAC,UAAU,EAAE,CAAA;AAAtD,QAAA,cAAc,kBAAwC;AAC5D,MAAM,gBAAgB,GAAG,GAAG,EAAE,CAAC,0BAAkB,CAAC,YAAY,EAAE,CAAA;AAA1D,QAAA,gBAAgB,oBAA0C;AAChE,MAAM,cAAc,GAAG,CAAC,OAAa,EAAE,EAAE,CAAC,0BAAkB,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAA;AAAnF,QAAA,cAAc,kBAAqE","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\unified-sync-service.ts"],"sourcesContent":["/**\r\n * 统一同步服务整合层\r\n * 合并cloud-sync.ts和optimized-cloud-sync.ts的功能，消除冗余\r\n */\r\n\r\nimport { supabase, type SyncStatus } from './supabase'\r\nimport { db } from './database'\r\nimport { syncQueueManager, type QueueOperation, type BatchSyncResult } from './sync-queue'\r\nimport { networkStateDetector } from './network-state-detector'\r\nimport { dataConverter } from './data-converter'\r\nimport { queryOptimizer } from './query-optimizer'\r\nimport { localOperationService, type LocalSyncOperation } from './local-operation'\r\nimport { offlineManager, type OfflineOperation, type NetworkInfo } from './offline-manager'\r\nimport type { DbCard, DbFolder, DbTag } from './database'\r\n\r\n// ============================================================================\r\n// 统一同步操作接口\r\n// ============================================================================\r\n\r\nexport interface UnifiedSyncOperation {\r\n  id: string\r\n  type: 'create' | 'update' | 'delete'\r\n  entity: 'card' | 'folder' | 'tag' | 'image'\r\n  entityId: string\r\n  data: any\r\n  priority: 'high' | 'normal' | 'low'\r\n  timestamp: Date\r\n  userId?: string\r\n  metadata?: {\r\n    source: 'user' | 'sync' | 'system'\r\n    conflictResolution?: 'local' | 'cloud' | 'merge'\r\n    retryStrategy?: 'immediate' | 'delayed' | 'exponential'\r\n  }\r\n}\r\n\r\nexport interface SyncConflict {\r\n  id: string\r\n  entity: string\r\n  entityId: string\r\n  localData: any\r\n  cloudData: any\r\n  conflictType: 'version' | 'content' | 'structure'\r\n  resolution: 'pending' | 'local' | 'cloud' | 'merge' | 'manual'\r\n  timestamp: Date\r\n}\r\n\r\nexport interface SyncMetrics {\r\n  totalOperations: number\r\n  successfulOperations: number\r\n  failedOperations: number\r\n  averageSyncTime: number\r\n  lastSyncTime: Date | null\r\n  conflictsCount: number\r\n  networkQuality: 'excellent' | 'good' | 'fair' | 'poor'\r\n  cacheHitRate: number\r\n}\r\n\r\n// ============================================================================\r\n// 统一同步服务类\r\n// ============================================================================\r\n\r\nexport class UnifiedSyncService {\r\n  private isInitialized = false\r\n  private authService: any = null\r\n  private isOnline = false\r\n  private syncInProgress = false\r\n  private conflicts: SyncConflict[] = []\r\n  private metrics: SyncMetrics = this.getDefaultMetrics()\r\n  private listeners: Set<(status: SyncStatus) => void> = new Set()\r\n  private operationHistory: UnifiedSyncOperation[] = []\r\n  private syncCache = new Map<string, any>()\r\n  private lastFullSync: Date | null = null\r\n\r\n  constructor() {\r\n    this.initialize()\r\n    this.setupOfflineIntegration()\r\n  }\r\n\r\n  private getDefaultMetrics(): SyncMetrics {\r\n    return {\r\n      totalOperations: 0,\r\n      successfulOperations: 0,\r\n      failedOperations: 0,\r\n      averageSyncTime: 0,\r\n      lastSyncTime: null,\r\n      conflictsCount: 0,\r\n      networkQuality: 'good',\r\n      cacheHitRate: 0\r\n    }\r\n  }\r\n\r\n  // ============================================================================\r\n  // 初始化和配置\r\n  // ============================================================================\r\n\r\n  private initialize(): void {\r\n    if (this.isInitialized) return\r\n\r\n    // 集成网络状态检测\r\n    this.initializeNetworkIntegration()\r\n    \r\n    // 集成同步队列管理\r\n    this.initializeQueueIntegration()\r\n    \r\n    // 启动后台同步\r\n    this.startBackgroundSync()\r\n    \r\n    this.isInitialized = true\r\n    console.log('Unified sync service initialized')\r\n  }\r\n\r\n  private initializeNetworkIntegration(): void {\r\n    networkStateDetector.addListener({\r\n      onNetworkStateChanged: this.handleNetworkStateChange.bind(this),\r\n      onNetworkError: this.handleNetworkError.bind(this),\r\n      onSyncCompleted: this.handleSyncCompleted.bind(this),\r\n      onSyncStrategyChanged: this.handleSyncStrategyChanged.bind(this)\r\n    })\r\n  }\r\n\r\n  private initializeQueueIntegration(): void {\r\n    // 设置队列事件监听器\r\n    syncQueueManager.setEventListeners({\r\n      onOperationComplete: this.handleOperationComplete.bind(this),\r\n      onBatchComplete: this.handleBatchComplete.bind(this),\r\n      onQueueError: this.handleQueueError.bind(this),\r\n      onStatusChange: this.handleQueueStatusChange.bind(this)\r\n    })\r\n  }\r\n\r\n  private startBackgroundSync(): void {\r\n    // 基于网络质量的智能同步间隔\r\n    setInterval(() => {\r\n      if (this.shouldPerformBackgroundSync()) {\r\n        this.performIncrementalSync()\r\n      }\r\n    }, this.getAdaptiveSyncInterval())\r\n    \r\n    // 定期处理本地同步队列（更频繁的本地操作处理）\r\n    setInterval(() => {\r\n      if (this.isOnline && !this.syncInProgress) {\r\n        this.processLocalSyncQueue().catch(console.error)\r\n      }\r\n    }, 30000) // 每30秒处理一次本地同步队列\r\n  }\r\n\r\n  // ============================================================================\r\n  // 离线管理集成\r\n  // ============================================================================\r\n\r\n  private setupOfflineIntegration(): void {\r\n    // 设置离线管理器事件监听器\r\n    offlineManager.setEventListeners({\r\n      onNetworkChange: (info: NetworkInfo) => this.handleOfflineNetworkChange(info),\r\n      onOfflineOperation: (operation: OfflineOperation) => this.handleOfflineOperation(operation),\r\n      onSyncProgress: (progress) => this.handleOfflineSyncProgress(progress),\r\n      onConflict: (conflict) => this.handleOfflineConflict(conflict),\r\n      onSyncComplete: (stats) => this.handleOfflineSyncComplete(stats),\r\n      onError: (error) => this.handleOfflineError(error)\r\n    })\r\n  }\r\n\r\n  private handleOfflineNetworkChange(info: NetworkInfo): void {\r\n    this.isOnline = info.status === 'online'\r\n    this.notifyStatusChange()\r\n    \r\n    if (this.isOnline) {\r\n      // 网络恢复，触发同步\r\n      this.performIncrementalSync().catch(console.error)\r\n    }\r\n  }\r\n\r\n  private handleOfflineOperation(operation: OfflineOperation): void {\r\n    // 将离线操作转换为统一同步操作\r\n    const unifiedOperation: UnifiedSyncOperation = {\r\n      id: operation.id,\r\n      type: operation.type as any,\r\n      entity: operation.entity,\r\n      entityId: operation.entityId || '',\r\n      data: operation.data,\r\n      priority: this.mapOfflinePriorityToSyncPriority(operation.priority),\r\n      timestamp: operation.timestamp,\r\n      userId: operation.userId,\r\n      metadata: {\r\n        source: 'user',\r\n        conflictResolution: operation.metadata?.conflictResolution,\r\n        retryStrategy: 'delayed'\r\n      }\r\n    }\r\n    \r\n    // 添加到操作历史\r\n    this.operationHistory.push(unifiedOperation)\r\n  }\r\n\r\n  private handleOfflineSyncProgress(progress: { completed: number; total: number }): void {\r\n    // 更新同步状态\r\n    this.notifyListeners({\r\n      status: 'syncing',\r\n      progress: (progress.completed / progress.total) * 100,\r\n      message: `离线同步进度: ${progress.completed}/${progress.total}`\r\n    })\r\n  }\r\n\r\n  private handleOfflineConflict(conflict: any): void {\r\n    // 将离线冲突转换为统一冲突格式\r\n    const unifiedConflict: SyncConflict = {\r\n      id: conflict.id,\r\n      entity: conflict.entityType,\r\n      entityId: conflict.entityId,\r\n      localData: conflict.localData,\r\n      cloudData: conflict.remoteData,\r\n      conflictType: this.mapOfflineConflictType(conflict.conflictType),\r\n      resolution: conflict.resolution as any,\r\n      timestamp: conflict.timestamp\r\n    }\r\n    \r\n    this.conflicts.push(unifiedConflict)\r\n    this.notifyStatusChange()\r\n  }\r\n\r\n  private handleOfflineSyncComplete(stats: any): void {\r\n    // 更新同步指标\r\n    this.metrics.totalOperations += stats.completedOfflineOperations\r\n    this.metrics.successfulOperations += stats.completedOfflineOperations\r\n    this.metrics.failedOperations += stats.failedOperations\r\n    this.metrics.lastSyncTime = stats.lastSyncTime\r\n    \r\n    // 通知同步完成\r\n    this.notifyListeners({\r\n      status: 'completed',\r\n      progress: 100,\r\n      message: '离线同步完成'\r\n    })\r\n  }\r\n\r\n  private handleOfflineError(error: Error): void {\r\n    console.error('离线管理器错误:', error)\r\n    this.notifyListeners({\r\n      status: 'error',\r\n      progress: 0,\r\n      message: `离线操作错误: ${error.message}`\r\n    })\r\n  }\r\n\r\n  private mapOfflinePriorityToSyncPriority(priority: string): 'high' | 'normal' | 'low' {\r\n    switch (priority) {\r\n      case 'critical':\r\n      case 'high':\r\n        return 'high'\r\n      case 'normal':\r\n        return 'normal'\r\n      case 'low':\r\n        return 'low'\r\n      default:\r\n        return 'normal'\r\n    }\r\n  }\r\n\r\n  private mapOfflineConflictType(conflictType: string): 'version' | 'content' | 'structure' {\r\n    switch (conflictType) {\r\n      case 'simultaneous_edit':\r\n        return 'content'\r\n      case 'delete_conflict':\r\n        return 'version'\r\n      case 'structure_conflict':\r\n        return 'structure'\r\n      default:\r\n        return 'content'\r\n    }\r\n  }\r\n\r\n  // ============================================================================\r\n  // 核心同步功能\r\n  // ============================================================================\r\n\r\n  /**\r\n   * 添加同步操作\r\n   */\r\n  async addOperation(operation: Omit<UnifiedSyncOperation, 'id' | 'timestamp'>): Promise<string> {\r\n    const unifiedOp: UnifiedSyncOperation = {\r\n      ...operation,\r\n      id: crypto.randomUUID(),\r\n      timestamp: new Date()\r\n    }\r\n\r\n    try {\r\n      // 转换为队列操作格式\r\n      const queueOp: Omit<QueueOperation, 'id' | 'status' | 'timestamp'> = {\r\n        type: operation.type,\r\n        entity: operation.entity,\r\n        entityId: operation.entityId,\r\n        userId: operation.userId,\r\n        data: operation.data,\r\n        priority: operation.priority,\r\n        retryCount: 0,\r\n        maxRetries: this.getMaxRetries(operation.priority),\r\n        dependencies: this.getOperationDependencies(operation)\r\n      }\r\n\r\n      // 添加到队列\r\n      const operationId = await syncQueueManager.enqueueOperation(queueOp)\r\n      \r\n      // 记录操作历史\r\n      this.operationHistory.push(unifiedOp)\r\n      \r\n      // 更新指标\r\n      this.updateMetrics({ totalOperations: this.metrics.totalOperations + 1 })\r\n      \r\n      // 如果条件允许，立即处理\r\n      if (this.shouldProcessImmediately()) {\r\n        this.processNextOperations()\r\n      }\r\n\r\n      return operationId\r\n    } catch (error) {\r\n      console.error('Failed to add sync operation:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 执行完整同步\r\n   */\r\n  async performFullSync(): Promise<void> {\r\n    if (this.syncInProgress || !this.canSync()) {\r\n      return\r\n    }\r\n\r\n    this.syncInProgress = true\r\n    this.notifyStatusChange()\r\n\r\n    try {\r\n      const startTime = performance.now()\r\n      \r\n      // 处理本地同步队列（优先处理用户本地操作）\r\n      await this.processLocalSyncQueue()\r\n      \r\n      // 下行同步：从云端获取最新数据\r\n      await this.syncFromCloud()\r\n      \r\n      // 上行同步：处理本地队列\r\n      await this.processSyncQueue()\r\n      \r\n      // 冲突检测和解决\r\n      await this.detectAndResolveConflicts()\r\n      \r\n      // 数据一致性检查\r\n      await this.verifyDataConsistency()\r\n      \r\n      const syncTime = performance.now() - startTime\r\n      this.lastFullSync = new Date()\r\n      \r\n      // 更新指标\r\n      this.updateMetrics({\r\n        lastSyncTime: this.lastFullSync,\r\n        averageSyncTime: (this.metrics.averageSyncTime + syncTime) / 2\r\n      })\r\n      \r\n      console.log(`Full sync completed in ${syncTime}ms`)\r\n      \r\n    } catch (error) {\r\n      console.error('Full sync failed:', error)\r\n      throw error\r\n    } finally {\r\n      this.syncInProgress = false\r\n      this.notifyStatusChange()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 执行增量同步\r\n   */\r\n  async performIncrementalSync(): Promise<void> {\r\n    if (this.syncInProgress || !this.canSync()) {\r\n      return\r\n    }\r\n\r\n    try {\r\n      // 处理本地同步队列（优先级最高）\r\n      await this.processLocalSyncQueue()\r\n      \r\n      // 只处理高优先级操作\r\n      await this.processHighPriorityOperations()\r\n      \r\n      // 检查云端更新\r\n      await this.checkCloudUpdates()\r\n      \r\n      // 清理缓存\r\n      this.cleanupCache()\r\n      \r\n    } catch (error) {\r\n      console.error('Incremental sync failed:', error)\r\n    }\r\n  }\r\n\r\n  // ============================================================================\r\n  // 本地操作服务集成\r\n  // ========================================================================\r\n  \r\n  /**\r\n   * 处理本地操作队列中的同步操作\r\n   */\r\n  private async processLocalSyncQueue(): Promise<void> {\r\n    if (!this.isOnline) return\r\n    \r\n    try {\r\n      // 从本地操作服务获取待处理的操作\r\n      const pendingOperations = await localOperationService.getPendingSyncOperations()\r\n      \r\n      if (pendingOperations.length === 0) {\r\n        return\r\n      }\r\n      \r\n      console.log(`Processing ${pendingOperations.length} local sync operations`)\r\n      \r\n      // 批量处理本地操作\r\n      const results = await this.processBatchLocalOperations(pendingOperations)\r\n      \r\n      // 更新本地操作状态\r\n      await localOperationService.updateOperationStatuses(results)\r\n      \r\n      // 更新同步统计\r\n      this.metrics.totalOperations += results.length\r\n      this.metrics.successfulOperations += results.filter(r => r.success).length\r\n      this.metrics.failedOperations += results.filter(r => !r.success).length\r\n      \r\n    } catch (error) {\r\n      console.error('Failed to process local sync queue:', error)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 批量处理本地同步操作\r\n   */\r\n  private async processBatchLocalOperations(operations: LocalSyncOperation[]): Promise<{\r\n    operationId: string\r\n    success: boolean\r\n    error?: string\r\n  }[]> {\r\n    const results: {\r\n      operationId: string\r\n      success: boolean\r\n      error?: string\r\n    }[] = []\r\n    \r\n    // 按操作类型分组\r\n    const operationGroups = this.groupLocalOperationsByType(operations)\r\n    \r\n    // 处理每个操作组\r\n    for (const [operationType, typeOperations] of Object.entries(operationGroups)) {\r\n      const groupResults = await this.processLocalOperationGroup(operationType, typeOperations)\r\n      results.push(...groupResults)\r\n    }\r\n    \r\n    return results\r\n  }\r\n  \r\n  /**\r\n   * 按类型分组本地操作\r\n   */\r\n  private groupLocalOperationsByType(operations: LocalSyncOperation[]): Record<string, LocalSyncOperation[]> {\r\n    const groups: Record<string, LocalSyncOperation[]> = {}\r\n    \r\n    for (const operation of operations) {\r\n      const key = `${operation.entityType}_${operation.operationType}`\r\n      if (!groups[key]) {\r\n        groups[key] = []\r\n      }\r\n      groups[key].push(operation)\r\n    }\r\n    \r\n    return groups\r\n  }\r\n  \r\n  /**\r\n   * 处理本地操作组\r\n   */\r\n  private async processLocalOperationGroup(\r\n    operationType: string, \r\n    operations: LocalSyncOperation[]\r\n  ): Promise<{\r\n    operationId: string\r\n    success: boolean\r\n    error?: string\r\n  }[]> {\r\n    const results: {\r\n      operationId: string\r\n      success: boolean\r\n      error?: string\r\n    }[] = []\r\n    \r\n    try {\r\n      switch (operationType) {\r\n        case 'card_create':\r\n        case 'card_update':\r\n        case 'card_delete':\r\n          await this.processCardOperations(operations, results)\r\n          break\r\n        case 'folder_create':\r\n        case 'folder_update':\r\n        case 'folder_delete':\r\n          await this.processFolderOperations(operations, results)\r\n          break\r\n        case 'tag_create':\r\n        case 'tag_update':\r\n        case 'tag_delete':\r\n          await this.processTagOperations(operations, results)\r\n          break\r\n        default:\r\n          console.warn(`Unknown operation type: ${operationType}`)\r\n          for (const op of operations) {\r\n            results.push({\r\n              operationId: op.id,\r\n              success: false,\r\n              error: `Unknown operation type: ${operationType}`\r\n            })\r\n          }\r\n      }\r\n    } catch (error) {\r\n      console.error(`Failed to process operation group ${operationType}:`, error)\r\n      for (const op of operations) {\r\n        results.push({\r\n          operationId: op.id,\r\n          success: false,\r\n          error: error instanceof Error ? error.message : 'Unknown error'\r\n        })\r\n      }\r\n    }\r\n    \r\n    return results\r\n  }\r\n  \r\n  /**\r\n   * 处理卡片操作\r\n   */\r\n  private async processCardOperations(\r\n    operations: LocalSyncOperation[], \r\n    results: {\r\n      operationId: string\r\n      success: boolean\r\n      error?: string\r\n    }[]\r\n  ): Promise<void> {\r\n    for (const operation of operations) {\r\n      try {\r\n        switch (operation.operationType) {\r\n          case 'create':\r\n            await supabase\r\n              .from('cards')\r\n              .insert(operation.data)\r\n              .select()\r\n              .single()\r\n            break\r\n          case 'update':\r\n            await supabase\r\n              .from('cards')\r\n              .update(operation.data)\r\n              .eq('id', operation.entityId)\r\n            break\r\n          case 'delete':\r\n            await supabase\r\n              .from('cards')\r\n              .delete()\r\n              .eq('id', operation.entityId)\r\n            break\r\n        }\r\n        \r\n        results.push({\r\n          operationId: operation.id,\r\n          success: true\r\n        })\r\n      } catch (error) {\r\n        results.push({\r\n          operationId: operation.id,\r\n          success: false,\r\n          error: error instanceof Error ? error.message : 'Unknown error'\r\n        })\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 处理文件夹操作\r\n   */\r\n  private async processFolderOperations(\r\n    operations: LocalSyncOperation[], \r\n    results: {\r\n      operationId: string\r\n      success: boolean\r\n      error?: string\r\n    }[]\r\n  ): Promise<void> {\r\n    for (const operation of operations) {\r\n      try {\r\n        switch (operation.operationType) {\r\n          case 'create':\r\n            await supabase\r\n              .from('folders')\r\n              .insert(operation.data)\r\n              .select()\r\n              .single()\r\n            break\r\n          case 'update':\r\n            await supabase\r\n              .from('folders')\r\n              .update(operation.data)\r\n              .eq('id', operation.entityId)\r\n            break\r\n          case 'delete':\r\n            await supabase\r\n              .from('folders')\r\n              .delete()\r\n              .eq('id', operation.entityId)\r\n            break\r\n        }\r\n        \r\n        results.push({\r\n          operationId: operation.id,\r\n          success: true\r\n        })\r\n      } catch (error) {\r\n        results.push({\r\n          operationId: operation.id,\r\n          success: false,\r\n          error: error instanceof Error ? error.message : 'Unknown error'\r\n        })\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 处理标签操作\r\n   */\r\n  private async processTagOperations(\r\n    operations: LocalSyncOperation[], \r\n    results: {\r\n      operationId: string\r\n      success: boolean\r\n      error?: string\r\n    }[]\r\n  ): Promise<void> {\r\n    for (const operation of operations) {\r\n      try {\r\n        switch (operation.operationType) {\r\n          case 'create':\r\n            await supabase\r\n              .from('tags')\r\n              .insert(operation.data)\r\n              .select()\r\n              .single()\r\n            break\r\n          case 'update':\r\n            await supabase\r\n              .from('tags')\r\n              .update(operation.data)\r\n              .eq('id', operation.entityId)\r\n            break\r\n          case 'delete':\r\n            await supabase\r\n              .from('tags')\r\n              .delete()\r\n              .eq('id', operation.entityId)\r\n            break\r\n        }\r\n        \r\n        results.push({\r\n          operationId: operation.id,\r\n          success: true\r\n        })\r\n      } catch (error) {\r\n        results.push({\r\n          operationId: operation.id,\r\n          success: false,\r\n          error: error instanceof Error ? error.message : 'Unknown error'\r\n        })\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 从本地操作服务获取待同步的操作\r\n   */\r\n  async getLocalSyncOperations(): Promise<LocalSyncOperation[]> {\r\n    return await localOperationService.getPendingSyncOperations()\r\n  }\r\n  \r\n  /**\r\n   * 触发本地操作队列处理\r\n   */\r\n  async triggerLocalSyncProcessing(): Promise<void> {\r\n    if (this.syncInProgress) {\r\n      console.log('Sync already in progress, skipping local sync processing')\r\n      return\r\n    }\r\n    \r\n    await this.processLocalSyncQueue()\r\n  }\r\n\r\n  // ============================================================================\r\n  // 数据同步实现\r\n  // ============================================================================\r\n\r\n  private async syncFromCloud(): Promise<void> {\r\n    if (!this.authService?.isAuthenticated()) return\r\n\r\n    const user = this.authService.getCurrentUser()\r\n    if (!user) return\r\n\r\n    const lastSync = this.lastFullSync || new Date(0)\r\n\r\n    // 使用查询优化器并行获取数据\r\n    const [cards, folders, tags] = await Promise.all([\r\n      this.getCloudData('cards', user.id, lastSync),\r\n      this.getCloudData('folders', user.id, lastSync),\r\n      this.getCloudData('tags', user.id, lastSync)\r\n    ])\r\n\r\n    // 并行处理数据合并\r\n    await Promise.all([\r\n      this.mergeCloudCards(cards),\r\n      this.mergeCloudFolders(folders),\r\n      this.mergeCloudTags(tags)\r\n    ])\r\n  }\r\n\r\n  private async getCloudData(table: string, userId: string, since: Date): Promise<any[]> {\r\n    const cacheKey = `${table}_${userId}_${since.toISOString()}`\r\n    \r\n    // 检查缓存\r\n    if (this.syncCache.has(cacheKey)) {\r\n      this.updateCacheHitRate(true)\r\n      return this.syncCache.get(cacheKey)\r\n    }\r\n\r\n    this.updateCacheHitRate(false)\r\n\r\n    // 使用查询优化器\r\n    const query = supabase\r\n      .from(table)\r\n      .select('*')\r\n      .eq('user_id', userId)\r\n      .gte('updated_at', since.toISOString())\r\n\r\n    const { data, error } = await query\r\n    if (error) throw error\r\n\r\n    // 缓存结果\r\n    this.syncCache.set(cacheKey, data || [])\r\n    return data || []\r\n  }\r\n\r\n  private async mergeCloudCards(cloudCards: any[]): Promise<void> {\r\n    for (const cloudCard of cloudCards) {\r\n      const localCard = await db.cards?.get(cloudCard.id)\r\n      \r\n      if (!localCard) {\r\n        // 新卡片，直接添加\r\n        await db.cards?.add(dataConverter.fromCloudCard(cloudCard))\r\n      } else {\r\n        // 使用最后写入获胜策略\r\n        await this.resolveCardConflict(localCard, cloudCard)\r\n      }\r\n    }\r\n  }\r\n\r\n  private async mergeCloudFolders(cloudFolders: any[]): Promise<void> {\r\n    for (const cloudFolder of cloudFolders) {\r\n      const localFolder = await db.folders?.get(cloudFolder.id)\r\n      \r\n      if (!localFolder) {\r\n        await db.folders?.add(dataConverter.fromCloudFolder(cloudFolder))\r\n      } else {\r\n        await this.resolveFolderConflict(localFolder, cloudFolder)\r\n      }\r\n    }\r\n  }\r\n\r\n  private async mergeCloudTags(cloudTags: any[]): Promise<void> {\r\n    for (const cloudTag of cloudTags) {\r\n      const localTag = await db.tags?.get(cloudTag.id)\r\n      \r\n      if (!localTag) {\r\n        await db.tags?.add(dataConverter.fromCloudTag(cloudTag))\r\n      } else {\r\n        await this.resolveTagConflict(localTag, cloudTag)\r\n      }\r\n    }\r\n  }\r\n\r\n  // ============================================================================\r\n  // 冲突处理\r\n  // ============================================================================\r\n\r\n  private async detectAndResolveConflicts(): Promise<void> {\r\n    const conflicts = await this.detectConflicts()\r\n    \r\n    for (const conflict of conflicts) {\r\n      await this.resolveConflict(conflict)\r\n    }\r\n  }\r\n\r\n  private async detectConflicts(): Promise<SyncConflict[]> {\r\n    const conflicts: SyncConflict[] = []\r\n    \r\n    // 检测卡片冲突\r\n    const cardConflicts = await this.detectCardConflicts()\r\n    conflicts.push(...cardConflicts)\r\n    \r\n    // 检测文件夹冲突\r\n    const folderConflicts = await this.detectFolderConflicts()\r\n    conflicts.push(...folderConflicts)\r\n    \r\n    // 检测标签冲突\r\n    const tagConflicts = await this.detectTagConflicts()\r\n    conflicts.push(...tagConflicts)\r\n    \r\n    return conflicts\r\n  }\r\n\r\n  private async resolveCardConflict(localCard: DbCard, cloudCard: any): Promise<void> {\r\n    const localTime = new Date(localCard.updatedAt).getTime()\r\n    const cloudTime = new Date(cloudCard.updated_at).getTime()\r\n    \r\n    if (cloudTime > localTime) {\r\n      // 云端数据更新\r\n      await db.cards?.update(cloudCard.id, dataConverter.fromCloudCard(cloudCard))\r\n    } else if (localTime > cloudTime && localCard.pendingSync) {\r\n      // 本地数据更新，加入同步队列\r\n      await this.addOperation({\r\n        type: 'update',\r\n        entity: 'card',\r\n        entityId: localCard.id,\r\n        data: localCard,\r\n        priority: 'normal',\r\n        userId: localCard.userId\r\n      })\r\n    }\r\n  }\r\n\r\n  private async resolveFolderConflict(localFolder: DbFolder, cloudFolder: any): Promise<void> {\r\n    const localTime = new Date(localFolder.updatedAt).getTime()\r\n    const cloudTime = new Date(cloudFolder.updated_at).getTime()\r\n    \r\n    if (cloudTime > localTime) {\r\n      await db.folders?.update(cloudFolder.id, dataConverter.fromCloudFolder(cloudFolder))\r\n    } else if (localTime > cloudTime && localFolder.pendingSync) {\r\n      await this.addOperation({\r\n        type: 'update',\r\n        entity: 'folder',\r\n        entityId: localFolder.id,\r\n        data: localFolder,\r\n        priority: 'normal',\r\n        userId: localFolder.userId\r\n      })\r\n    }\r\n  }\r\n\r\n  private async resolveTagConflict(localTag: DbTag, cloudTag: any): Promise<void> {\r\n    const localTime = new Date(localTag.updatedAt).getTime()\r\n    const cloudTime = new Date(cloudTag.updated_at).getTime()\r\n    \r\n    if (cloudTime > localTime) {\r\n      await db.tags?.update(cloudTag.id, dataConverter.fromCloudTag(cloudTag))\r\n    } else if (localTime > cloudTime && localTag.pendingSync) {\r\n      await this.addOperation({\r\n        type: 'update',\r\n        entity: 'tag',\r\n        entityId: localTag.id,\r\n        data: localTag,\r\n        priority: 'normal',\r\n        userId: localTag.userId\r\n      })\r\n    }\r\n  }\r\n\r\n  // ============================================================================\r\n  // 队列处理\r\n  // ============================================================================\r\n\r\n  private async processSyncQueue(): Promise<void> {\r\n    // 委托给同步队列管理器\r\n    // 队列管理器会自动处理优先级、重试和批处理\r\n  }\r\n\r\n  private async processNextOperations(): Promise<void> {\r\n    if (this.syncInProgress) return\r\n    \r\n    this.syncInProgress = true\r\n    try {\r\n      await syncQueueManager.processNextBatch()\r\n    } finally {\r\n      this.syncInProgress = false\r\n    }\r\n  }\r\n\r\n  private async processHighPriorityOperations(): Promise<void> {\r\n    const highPriorityOps = await syncQueueManager.getOperations({\r\n      priority: 'high',\r\n      limit: 5\r\n    })\r\n    \r\n    if (highPriorityOps.length > 0) {\r\n      await this.processNextOperations()\r\n    }\r\n  }\r\n\r\n  // ============================================================================\r\n  // 网络和状态管理\r\n  // ============================================================================\r\n\r\n  private handleNetworkStateChange(state: any): void {\r\n    this.isOnline = state.isOnline\r\n    \r\n    if (state.isOnline && state.canSync) {\r\n      // 网络恢复，立即同步\r\n      this.performIncrementalSync()\r\n    }\r\n    \r\n    this.notifyStatusChange()\r\n  }\r\n\r\n  private handleNetworkError(error: any, context?: string): void {\r\n    console.warn('Network error in sync service:', error.message, context)\r\n    \r\n    // 根据错误类型调整策略\r\n    if (error.type === 'connection_lost') {\r\n      syncQueueManager.pause()\r\n    }\r\n  }\r\n\r\n  private handleSyncCompleted(request: any, response: any): void {\r\n    if (response.success) {\r\n      this.metrics.lastSyncTime = new Date()\r\n    }\r\n  }\r\n\r\n  private handleSyncStrategyChanged(strategy: any): void {\r\n    console.log('Sync strategy changed:', strategy)\r\n  }\r\n\r\n  private handleOperationComplete(operation: QueueOperation, success: boolean): void {\r\n    if (success) {\r\n      this.updateMetrics({\r\n        successfulOperations: this.metrics.successfulOperations + 1\r\n      })\r\n    } else {\r\n      this.updateMetrics({\r\n        failedOperations: this.metrics.failedOperations + 1\r\n      })\r\n    }\r\n  }\r\n\r\n  private handleBatchComplete(result: BatchSyncResult): void {\r\n    console.log('Batch sync completed:', result)\r\n  }\r\n\r\n  private handleQueueError(error: Error): void {\r\n    console.error('Queue error:', error)\r\n  }\r\n\r\n  private handleQueueStatusChange(stats: any): void {\r\n    this.notifyStatusChange()\r\n  }\r\n\r\n  // ============================================================================\r\n  // 辅助方法\r\n  // ============================================================================\r\n\r\n  private canSync(): boolean {\r\n    const networkState = networkStateDetector.getCurrentState()\r\n    return this.isOnline && \r\n           this.authService?.isAuthenticated() && \r\n           networkState.canSync\r\n  }\r\n\r\n  private shouldProcessImmediately(): boolean {\r\n    return this.canSync() && !this.syncInProgress\r\n  }\r\n\r\n  private shouldPerformBackgroundSync(): boolean {\r\n    const networkState = networkStateDetector.getCurrentState()\r\n    return networkState.canSync && \r\n           !this.syncInProgress && \r\n           this.authService?.isAuthenticated()\r\n  }\r\n\r\n  private getAdaptiveSyncInterval(): number {\r\n    const networkState = networkStateDetector.getCurrentState()\r\n    \r\n    switch (networkState.quality) {\r\n      case 'excellent': return 60 * 1000 // 1分钟\r\n      case 'good': return 2 * 60 * 1000 // 2分钟\r\n      case 'fair': return 5 * 60 * 1000 // 5分钟\r\n      case 'poor': return 10 * 60 * 1000 // 10分钟\r\n      default: return 5 * 60 * 1000\r\n    }\r\n  }\r\n\r\n  private getMaxRetries(priority: 'high' | 'normal' | 'low'): number {\r\n    switch (priority) {\r\n      case 'high': return 5\r\n      case 'normal': return 3\r\n      case 'low': return 1\r\n    }\r\n  }\r\n\r\n  private getOperationDependencies(operation: UnifiedSyncOperation): string[] {\r\n    // 根据操作类型确定依赖关系\r\n    const dependencies: string[] = []\r\n    \r\n    if (operation.entity === 'card' && operation.data.folderId) {\r\n      // 卡片操作可能依赖文件夹操作\r\n      dependencies.push(`folder_${operation.data.folderId}`)\r\n    }\r\n    \r\n    return dependencies\r\n  }\r\n\r\n  private updateCacheHitRate(isHit: boolean): void {\r\n    // 简单的缓存命中率计算\r\n    const total = this.metrics.totalOperations || 1\r\n    const hits = isHit ? (this.metrics.cacheHitRate * total + 1) : (this.metrics.cacheHitRate * total)\r\n    this.updateMetrics({ cacheHitRate: hits / (total + 1) })\r\n  }\r\n\r\n  private updateMetrics(updates: Partial<SyncMetrics>): void {\r\n    this.metrics = { ...this.metrics, ...updates }\r\n  }\r\n\r\n  private cleanupCache(): void {\r\n    // 清理过期缓存\r\n    const now = Date.now()\r\n    const maxAge = 5 * 60 * 1000 // 5分钟\r\n    \r\n    for (const [key, value] of this.syncCache.entries()) {\r\n      if (now - value.timestamp > maxAge) {\r\n        this.syncCache.delete(key)\r\n      }\r\n    }\r\n  }\r\n\r\n  private async checkCloudUpdates(): Promise<void> {\r\n    // 检查云端更新，使用增量同步\r\n    if (this.lastFullSync) {\r\n      const timeSinceLastSync = Date.now() - this.lastFullSync.getTime()\r\n      \r\n      // 如果超过30分钟，执行完整同步\r\n      if (timeSinceLastSync > 30 * 60 * 1000) {\r\n        await this.performFullSync()\r\n      }\r\n    }\r\n  }\r\n\r\n  private async verifyDataConsistency(): Promise<void> {\r\n    // 验证本地和云端数据一致性\r\n    // 这里可以实现数据校验逻辑\r\n  }\r\n\r\n  // ============================================================================\r\n  // 事件监听器\r\n  // ============================================================================\r\n\r\n  setAuthService(authService: any): void {\r\n    this.authService = authService\r\n    \r\n    // 监听认证状态变化\r\n    authService.onAuthStateChange((authState: any) => {\r\n      if (authState.user && this.canSync()) {\r\n        this.performFullSync()\r\n      }\r\n    })\r\n  }\r\n\r\n  onStatusChange(callback: (status: SyncStatus) => void): () => void {\r\n    this.listeners.add(callback)\r\n    callback(this.getCurrentStatus())\r\n    \r\n    return () => {\r\n      this.listeners.delete(callback)\r\n    }\r\n  }\r\n\r\n  private async notifyStatusChange(): Promise<void> {\r\n    const status = await this.getCurrentStatus()\r\n    this.listeners.forEach(listener => listener(status))\r\n  }\r\n\r\n  async getCurrentStatus(): Promise<SyncStatus> {\r\n    const networkState = networkStateDetector.getCurrentState()\r\n    const queueStats = await syncQueueManager.getQueueStats()\r\n    \r\n    return {\r\n      isOnline: networkState.isOnline,\r\n      lastSyncTime: this.metrics.lastSyncTime,\r\n      pendingOperations: queueStats.totalOperations,\r\n      syncInProgress: this.syncInProgress,\r\n      hasConflicts: this.conflicts.length > 0\r\n    }\r\n  }\r\n\r\n  // ============================================================================\r\n  // 公共API\r\n  // ============================================================================\r\n\r\n  async getMetrics(): Promise<SyncMetrics> {\r\n    return { ...this.metrics }\r\n  }\r\n\r\n  async getConflicts(): Promise<SyncConflict[]> {\r\n    return [...this.conflicts]\r\n  }\r\n\r\n  async getOperationHistory(filters?: {\r\n    entity?: string\r\n    type?: string\r\n    limit?: number\r\n  }): Promise<UnifiedSyncOperation[]> {\r\n    let history = [...this.operationHistory]\r\n    \r\n    if (filters?.entity) {\r\n      history = history.filter(op => op.entity === filters.entity)\r\n    }\r\n    \r\n    if (filters?.type) {\r\n      history = history.filter(op => op.type === filters.type)\r\n    }\r\n    \r\n    if (filters?.limit) {\r\n      history = history.slice(0, filters.limit)\r\n    }\r\n    \r\n    return history\r\n  }\r\n\r\n  async clearHistory(olderThan?: Date): Promise<void> {\r\n    if (olderThan) {\r\n      this.operationHistory = this.operationHistory.filter(\r\n        op => op.timestamp > olderThan\r\n      )\r\n    } else {\r\n      this.operationHistory = []\r\n    }\r\n  }\r\n\r\n  async forceSync(): Promise<void> {\r\n    await this.performFullSync()\r\n  }\r\n\r\n  async pauseSync(): Promise<void> {\r\n    syncQueueManager.pause()\r\n    this.syncInProgress = true\r\n  }\r\n\r\n  async resumeSync(): Promise<void> {\r\n    syncQueueManager.resume()\r\n    this.syncInProgress = false\r\n    this.processNextOperations()\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// 导出单例实例\r\n// ============================================================================\r\n\r\nexport const unifiedSyncService = new UnifiedSyncService()\r\n\r\n// ============================================================================\r\n// 便利方法导出\r\n// ============================================================================\r\n\r\nexport const addSyncOperation = (operation: Omit<UnifiedSyncOperation, 'id' | 'timestamp'>) => \r\n  unifiedSyncService.addOperation(operation)\r\n\r\nexport const performFullSync = () => unifiedSyncService.performFullSync()\r\nexport const performIncrementalSync = () => unifiedSyncService.performIncrementalSync()\r\nexport const getSyncMetrics = () => unifiedSyncService.getMetrics()\r\nexport const getSyncConflicts = () => unifiedSyncService.getConflicts()\r\nexport const getSyncHistory = (filters?: any) => unifiedSyncService.getOperationHistory(filters)"],"version":3}
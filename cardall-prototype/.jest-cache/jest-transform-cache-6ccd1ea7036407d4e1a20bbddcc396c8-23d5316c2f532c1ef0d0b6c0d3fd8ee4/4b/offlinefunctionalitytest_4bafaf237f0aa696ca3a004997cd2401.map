{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\integration\\offline-functionality.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\integration\\offline-functionality.test.ts"],"sourcesContent":["/**\r\n * 离线功能集成测试\r\n * 测试网络状态变化、离线操作、同步恢复等功能\r\n */\r\n\r\nimport { describe, test, expect, jest, beforeEach, afterEach } from '@jest/globals'\r\nimport { OfflineManager } from '../../services/offline-manager'\r\nimport { LocalOperationServiceOptimized } from '../../services/local-operation-service'\r\nimport { CloudSyncServiceOptimized } from '../../services/cloud-sync-service'\r\nimport { MultilevelCacheService } from '../../services/multilevel-cache-service'\r\nimport { MockDatabase } from '../utils/test-utils'\r\nimport { mockFactories, performanceTester, asyncTestHelper } from '../utils/test-utils'\r\n\r\n// 模拟网络状态\r\nclass NetworkMock {\r\n  private online = true\r\n  private listeners: Set<() => void> = new Set()\r\n\r\n  setOnline(online: boolean) {\r\n    this.online = online\r\n    this.listeners.forEach(listener => listener())\r\n  }\r\n\r\n  addEventListener(event: 'online' | 'offline', listener: () => void) {\r\n    if (event === 'online' || event === 'offline') {\r\n      this.listeners.add(listener)\r\n    }\r\n  }\r\n\r\n  removeEventListener(event: 'online' | 'offline', listener: () => void) {\r\n    if (event === 'online' || event === 'offline') {\r\n      this.listeners.delete(listener)\r\n    }\r\n  }\r\n\r\n  isOnline() {\r\n    return this.online\r\n  }\r\n}\r\n\r\ndescribe('离线功能集成测试', () => {\r\n  let offlineManager: OfflineManager\r\n  let localService: LocalOperationServiceOptimized\r\n  let cloudService: CloudSyncServiceOptimized\r\n  let cacheService: MultilevelCacheService\r\n  let mockDb: MockDatabase\r\n  let networkMock: NetworkMock\r\n\r\n  beforeEach(async () => {\r\n    // 重置所有模拟\r\n    mockDb = new MockDatabase()\r\n    networkMock = new NetworkMock()\r\n    \r\n    // 设置全局网络模拟\r\n    Object.defineProperty(navigator, 'onLine', {\r\n      get: () => networkMock.isOnline(),\r\n      configurable: true\r\n    })\r\n    \r\n    // 添加网络事件监听器模拟\r\n    Object.defineProperty(window, 'addEventListener', {\r\n      value: jest.fn((event: string, listener: () => void) => {\r\n        if (event === 'online' || event === 'offline') {\r\n          networkMock.addEventListener(event as 'online' | 'offline', listener)\r\n        }\r\n      })\r\n    })\r\n    \r\n    Object.defineProperty(window, 'removeEventListener', {\r\n      value: jest.fn((event: string, listener: () => void) => {\r\n        if (event === 'online' || event === 'offline') {\r\n          networkMock.removeEventListener(event as 'online' | 'offline', listener)\r\n        }\r\n      })\r\n    })\r\n\r\n    // 初始化服务\r\n    cacheService = new MultilevelCacheService()\r\n    localService = new LocalOperationServiceOptimized()\r\n    cloudService = new CloudSyncServiceOptimized()\r\n    \r\n    // 初始化离线管理器\r\n    offlineManager = new OfflineManager(localService, cloudService, cacheService)\r\n    \r\n    // 重置测试工具\r\n    performanceTester.reset()\r\n    \r\n    // 清理所有模拟\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  afterEach(async () => {\r\n    // 清理资源\r\n    await offlineManager.destroy()\r\n    cacheService.stop()\r\n    localService.destroy()\r\n  })\r\n\r\n  // ============================================================================\r\n  // 网络状态检测测试\r\n  // ============================================================================\r\n\r\n  describe('网络状态检测', () => {\r\n    test('应该正确检测在线状态', async () => {\r\n      await offlineManager.initialize()\r\n      \r\n      // 初始状态应该是在线\r\n      expect(offlineManager.isOnline()).toBe(true)\r\n      expect(offlineManager.getNetworkStatus().online).toBe(true)\r\n    })\r\n\r\n    test('应该正确检测离线状态', async () => {\r\n      await offlineManager.initialize()\r\n      \r\n      // 模拟网络断开\r\n      networkMock.setOnline(false)\r\n      \r\n      // 等待状态更新\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      expect(offlineManager.isOnline()).toBe(false)\r\n      expect(offlineManager.getNetworkStatus().online).toBe(false)\r\n    })\r\n\r\n    test('应该正确检测网络恢复', async () => {\r\n      await offlineManager.initialize()\r\n      \r\n      // 模拟网络断开\r\n      networkMock.setOnline(false)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 模拟网络恢复\r\n      networkMock.setOnline(true)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      expect(offlineManager.isOnline()).toBe(true)\r\n      expect(offlineManager.getNetworkStatus().online).toBe(true)\r\n    })\r\n\r\n    test('应该正确监听网络事件', async () => {\r\n      const onlineListener = jest.fn()\r\n      const offlineListener = jest.fn()\r\n      \r\n      await offlineManager.initialize()\r\n      \r\n      // 注册监听器\r\n      offlineManager.onOnline(onlineListener)\r\n      offlineManager.onOffline(offlineListener)\r\n      \r\n      // 模拟网络状态变化\r\n      networkMock.setOnline(false)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      networkMock.setOnline(true)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 验证监听器被调用\r\n      expect(offlineListener).toHaveBeenCalled()\r\n      expect(onlineListener).toHaveBeenCalled()\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 离线操作测试\r\n  // ============================================================================\r\n\r\n  describe('离线操作处理', () => {\r\n    test('应该允许离线创建卡片', async () => {\r\n      await offlineManager.initialize()\r\n      \r\n      // 切换到离线状态\r\n      networkMock.setOnline(false)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 离线创建卡片\r\n      const cardData = mockFactories.createMockCard()\r\n      const result = await performanceTester.measure('offline_create', () =>\r\n        offlineManager.createCard(cardData)\r\n      )\r\n      \r\n      expect(result.success).toBe(true)\r\n      expect(result.id).toBeDefined()\r\n      expect(result.id).toBeValidUUID()\r\n      \r\n      // 验证数据存储在本地\r\n      const localCards = await localService.getCards({})\r\n      expect(localCards.length).toBe(1)\r\n      expect(localCards[0].id).toBe(result.id)\r\n    })\r\n\r\n    test('应该允许离线更新卡片', async () => {\r\n      await offlineManager.initialize()\r\n      \r\n      // 在线创建卡片\r\n      const cardData = mockFactories.createMockCard()\r\n      const createResult = await localService.createCard(cardData)\r\n      const cardId = createResult.id!\r\n      \r\n      // 切换到离线状态\r\n      networkMock.setOnline(false)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 离线更新卡片\r\n      const updates = {\r\n        frontContent: {\r\n          title: 'Offline Updated Title',\r\n          text: 'Updated content offline'\r\n        }\r\n      }\r\n      \r\n      const updateResult = await performanceTester.measure('offline_update', () =>\r\n        offlineManager.updateCard(cardId, updates)\r\n      )\r\n      \r\n      expect(updateResult.success).toBe(true)\r\n      expect(updateResult.id).toBe(cardId)\r\n      \r\n      // 验证本地数据已更新\r\n      const updatedCard = await localService.getCard(cardId)\r\n      expect(updatedCard!.frontContent.title).toBe('Offline Updated Title')\r\n    })\r\n\r\n    test('应该允许离线删除卡片', async () => {\r\n      await offlineManager.initialize()\r\n      \r\n      // 在线创建卡片\r\n      const cardData = mockFactories.createMockCard()\r\n      const createResult = await localService.createCard(cardData)\r\n      const cardId = createResult.id!\r\n      \r\n      // 切换到离线状态\r\n      networkMock.setOnline(false)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 离线删除卡片\r\n      const deleteResult = await performanceTester.measure('offline_delete', () =>\r\n        offlineManager.deleteCard(cardId)\r\n      )\r\n      \r\n      expect(deleteResult.success).toBe(true)\r\n      expect(deleteResult.id).toBe(cardId)\r\n      \r\n      // 验证本地数据已删除\r\n      const deletedCard = await localService.getCard(cardId)\r\n      expect(deletedCard).toBeNull()\r\n    })\r\n\r\n    test('应该正确排队离线操作', async () => {\r\n      await offlineManager.initialize()\r\n      \r\n      // 切换到离线状态\r\n      networkMock.setOnline(false)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 执行多个离线操作\r\n      const operations = []\r\n      for (let i = 0; i < 3; i++) {\r\n        const cardData = mockFactories.createMockCard({ \r\n          frontContent: { title: `Offline Card ${i + 1}` }\r\n        })\r\n        const result = await offlineManager.createCard(cardData)\r\n        operations.push(result)\r\n      }\r\n      \r\n      // 验证所有操作都成功\r\n      operations.forEach(op => {\r\n        expect(op.success).toBe(true)\r\n      })\r\n      \r\n      // 验证排队操作\r\n      const pendingOps = await offlineManager.getPendingOperations()\r\n      expect(pendingOps.length).toBe(3)\r\n      \r\n      // 验证操作类型和状态\r\n      pendingOps.forEach(op => {\r\n        expect(op.type).toBe('create')\r\n        expect(op.entity).toBe('card')\r\n        expect(op.status).toBe('pending')\r\n      })\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 网络恢复同步测试\r\n  // ============================================================================\r\n\r\n  describe('网络恢复同步', () => {\r\n    test('应该自动同步网络恢复后的操作', async () => {\r\n      await offlineManager.initialize()\r\n      \r\n      // 切换到离线状态\r\n      networkMock.setOnline(false)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 离线创建卡片\r\n      const cardData = mockFactories.createMockCard()\r\n      const offlineResult = await offlineManager.createCard(cardData)\r\n      \r\n      // 验证操作已排队\r\n      const pendingOpsBefore = await offlineManager.getPendingOperations()\r\n      expect(pendingOpsBefore.length).toBe(1)\r\n      \r\n      // 模拟网络恢复\r\n      networkMock.setOnline(true)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 等待同步完成\r\n      await asyncTestHelper.waitFor(async () => {\r\n        const pendingOps = await offlineManager.getPendingOperations()\r\n        return pendingOps.length === 0\r\n      }, { timeout: 5000, message: '同步操作未完成' })\r\n      \r\n      // 验证同步完成\r\n      const pendingOpsAfter = await offlineManager.getPendingOperations()\r\n      expect(pendingOpsAfter.length).toBe(0)\r\n      \r\n      // 验证同步统计\r\n      const syncStats = offlineManager.getSyncStatistics()\r\n      expect(syncStats.totalSynced).toBe(1)\r\n      expect(syncStats.successRate).toBe(1)\r\n    })\r\n\r\n    test('应该正确处理同步失败', async () => {\r\n      await offlineManager.initialize()\r\n      \r\n      // 模拟云端服务失败\r\n      jest.spyOn(cloudService, 'syncCard').mockRejectedValueOnce(new Error('Sync failed'))\r\n      \r\n      // 切换到离线状态\r\n      networkMock.setOnline(false)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 离线创建卡片\r\n      const cardData = mockFactories.createMockCard()\r\n      await offlineManager.createCard(cardData)\r\n      \r\n      // 模拟网络恢复\r\n      networkMock.setOnline(true)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 等待重试机制\r\n      await asyncTestHelper.delay(1000)\r\n      \r\n      // 验证操作仍在排队（因为同步失败）\r\n      const pendingOps = await offlineManager.getPendingOperations()\r\n      expect(pendingOps.length).toBe(1)\r\n      \r\n      // 验证重试计数\r\n      const failedOp = pendingOps[0]\r\n      expect(failedOp.retryCount).toBeGreaterThan(0)\r\n      \r\n      // 验证同步统计包含失败\r\n      const syncStats = offlineManager.getSyncStatistics()\r\n      expect(syncStats.totalFailed).toBe(1)\r\n    })\r\n\r\n    test('应该支持批量同步', async () => {\r\n      await offlineManager.initialize()\r\n      \r\n      // 切换到离线状态\r\n      networkMock.setOnline(false)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 批量离线操作\r\n      const operations = []\r\n      for (let i = 0; i < 5; i++) {\r\n        const cardData = mockFactories.createMockCard({ \r\n          frontContent: { title: `Batch Card ${i + 1}` }\r\n        })\r\n        const result = await offlineManager.createCard(cardData)\r\n        operations.push(result)\r\n      }\r\n      \r\n      // 验证操作已排队\r\n      const pendingOpsBefore = await offlineManager.getPendingOperations()\r\n      expect(pendingOpsBefore.length).toBe(5)\r\n      \r\n      // 模拟网络恢复\r\n      networkMock.setOnline(true)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 等待批量同步完成\r\n      await asyncTestHelper.waitFor(async () => {\r\n        const pendingOps = await offlineManager.getPendingOperations()\r\n        return pendingOps.length === 0\r\n      }, { timeout: 10000, message: '批量同步未完成' })\r\n      \r\n      // 验证所有操作已同步\r\n      const pendingOpsAfter = await offlineManager.getPendingOperations()\r\n      expect(pendingOpsAfter.length).toBe(0)\r\n      \r\n      // 验证同步统计\r\n      const syncStats = offlineManager.getSyncStatistics()\r\n      expect(syncStats.totalSynced).toBe(5)\r\n      expect(syncStats.successRate).toBe(1)\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 数据一致性测试\r\n  // ============================================================================\r\n\r\n  describe('数据一致性', () => {\r\n    test('应该保持本地和云端数据一致性', async () => {\r\n      await offlineManager.initialize()\r\n      \r\n      // 在线创建卡片\r\n      const cardData = mockFactories.createMockCard()\r\n      const createResult = await offlineManager.createCard(cardData)\r\n      const cardId = createResult.id!\r\n      \r\n      // 验证本地数据\r\n      const localCard = await localService.getCard(cardId)\r\n      expect(localCard).toBeTruthy()\r\n      \r\n      // 切换到离线状态\r\n      networkMock.setOnline(false)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 离线更新\r\n      const updates = {\r\n        frontContent: {\r\n          title: 'Consistency Test Update'\r\n        }\r\n      }\r\n      await offlineManager.updateCard(cardId, updates)\r\n      \r\n      // 验证本地数据已更新\r\n      const updatedLocalCard = await localService.getCard(cardId)\r\n      expect(updatedLocalCard!.frontContent.title).toBe('Consistency Test Update')\r\n      \r\n      // 恢复网络并同步\r\n      networkMock.setOnline(true)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 等待同步完成\r\n      await asyncTestHelper.waitFor(async () => {\r\n        const pendingOps = await offlineManager.getPendingOperations()\r\n        return pendingOps.length === 0\r\n      }, { timeout: 5000 })\r\n      \r\n      // 验证数据一致性\r\n      const finalCard = await localService.getCard(cardId)\r\n      expect(finalCard!.frontContent.title).toBe('Consistency Test Update')\r\n    })\r\n\r\n    test('应该正确处理冲突解决', async () => {\r\n      await offlineManager.initialize()\r\n      \r\n      // 在线创建卡片\r\n      const cardData = mockFactories.createMockCard()\r\n      const createResult = await offlineManager.createCard(cardData)\r\n      const cardId = createResult.id!\r\n      \r\n      // 切换到离线状态\r\n      networkMock.setOnline(false)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 离线更新卡片\r\n      const offlineUpdates = {\r\n        frontContent: {\r\n          title: 'Offline Update'\r\n        }\r\n      }\r\n      await offlineManager.updateCard(cardId, offlineUpdates)\r\n      \r\n      // 模拟云端同时更新（冲突）\r\n      jest.spyOn(cloudService, 'syncCard').mockImplementationOnce(async (operation) => {\r\n        // 模拟云端数据已被修改\r\n        throw new Error('Conflict: Data modified by another client')\r\n      })\r\n      \r\n      // 恢复网络\r\n      networkMock.setOnline(true)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 等待冲突检测\r\n      await asyncTestHelper.delay(1000)\r\n      \r\n      // 验证冲突处理\r\n      const conflicts = await offlineManager.getConflicts()\r\n      expect(conflicts.length).toBeGreaterThan(0)\r\n      \r\n      // 验证冲突包含必要信息\r\n      const conflict = conflicts[0]\r\n      expect(conflict.entityId).toBe(cardId)\r\n      expect(conflict.type).toBe('update')\r\n      expect(conflict.localVersion).toBeDefined()\r\n      expect(conflict.remoteVersion).toBeDefined()\r\n    })\r\n\r\n    test('应该提供冲突解决机制', async () => {\r\n      await offlineManager.initialize()\r\n      \r\n      // 创建冲突场景\r\n      const cardData = mockFactories.createMockCard()\r\n      const createResult = await offlineManager.createCard(cardData)\r\n      const cardId = createResult.id!\r\n      \r\n      // 切换到离线状态\r\n      networkMock.setOnline(false)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 离线更新\r\n      await offlineManager.updateCard(cardId, {\r\n        frontContent: { title: 'Local Version' }\r\n      })\r\n      \r\n      // 恢复网络\r\n      networkMock.setOnline(true)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 等待冲突\r\n      await asyncTestHelper.delay(1000)\r\n      \r\n      // 解决冲突（选择本地版本）\r\n      const conflicts = await offlineManager.getConflicts()\r\n      if (conflicts.length > 0) {\r\n        await offlineManager.resolveConflict(conflicts[0].id, 'local')\r\n      }\r\n      \r\n      // 验证冲突已解决\r\n      const resolvedConflicts = await offlineManager.getConflicts()\r\n      expect(resolvedConflicts.length).toBe(0)\r\n      \r\n      // 验证数据一致性\r\n      const finalCard = await localService.getCard(cardId)\r\n      expect(finalCard!.frontContent.title).toBe('Local Version')\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 性能测试\r\n  // ============================================================================\r\n\r\n  describe('性能测试', () => {\r\n    test('应该高效处理大量离线操作', async () => {\r\n      await offlineManager.initialize()\r\n      \r\n      // 切换到离线状态\r\n      networkMock.setOnline(false)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 批量离线操作\r\n      const operationCount = 50\r\n      const cards = []\r\n      \r\n      for (let i = 0; i < operationCount; i++) {\r\n        const cardData = mockFactories.createMockCard({\r\n          frontContent: {\r\n            title: `Performance Card ${i + 1}`,\r\n            text: 'x'.repeat(1000) // 1KB content\r\n          }\r\n        })\r\n        \r\n        const result = await performanceTester.measure(`offline_create_${i}`, () =>\r\n          offlineManager.createCard(cardData)\r\n        )\r\n        \r\n        cards.push(result)\r\n      }\r\n      \r\n      // 验证所有操作成功\r\n      cards.forEach(card => {\r\n        expect(card.success).toBe(true)\r\n      })\r\n      \r\n      // 验证性能\r\n      const createStats = performanceTester.getAllStats()\r\n      const avgCreateTime = Object.values(createStats).reduce((sum, stat) => sum + stat.avg, 0) / operationCount\r\n      \r\n      expect(avgCreateTime).toBeLessThan(50) // 平均创建时间应该小于50ms\r\n      \r\n      // 验证排队操作\r\n      const pendingOps = await offlineManager.getPendingOperations()\r\n      expect(pendingOps.length).toBe(operationCount)\r\n    })\r\n\r\n    test('应该高效同步大量操作', async () => {\r\n      await offlineManager.initialize()\r\n      \r\n      // 切换到离线状态\r\n      networkMock.setOnline(false)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 创建大量离线操作\r\n      const operationCount = 30\r\n      for (let i = 0; i < operationCount; i++) {\r\n        const cardData = mockFactories.createMockCard({\r\n          frontContent: { title: `Sync Test Card ${i + 1}` }\r\n        })\r\n        await offlineManager.createCard(cardData)\r\n      }\r\n      \r\n      // 验证操作已排队\r\n      const pendingOpsBefore = await offlineManager.getPendingOperations()\r\n      expect(pendingOpsBefore.length).toBe(operationCount)\r\n      \r\n      // 恢复网络并同步\r\n      const syncStartTime = performance.now()\r\n      networkMock.setOnline(true)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 等待同步完成\r\n      await asyncTestHelper.waitFor(async () => {\r\n        const pendingOps = await offlineManager.getPendingOperations()\r\n        return pendingOps.length === 0\r\n      }, { timeout: 15000, message: '大量操作同步未完成' })\r\n      \r\n      const syncDuration = performance.now() - syncStartTime\r\n      \r\n      // 验证同步完成\r\n      const pendingOpsAfter = await offlineManager.getPendingOperations()\r\n      expect(pendingOpsAfter.length).toBe(0)\r\n      \r\n      // 验证同步性能\r\n      expect(syncDuration).toBeLessThan(5000) // 30个操作应该在5秒内完成同步\r\n      \r\n      // 验证同步统计\r\n      const syncStats = offlineManager.getSyncStatistics()\r\n      expect(syncStats.totalSynced).toBe(operationCount)\r\n      expect(syncStats.successRate).toBe(1)\r\n    })\r\n\r\n    test('应该优化内存使用', async () => {\r\n      await offlineManager.initialize()\r\n      \r\n      // 切换到离线状态\r\n      networkMock.setOnline(false)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 执行大量操作\r\n      const operationCount = 100\r\n      for (let i = 0; i < operationCount; i++) {\r\n        const cardData = mockFactories.createMockCard({\r\n          frontContent: {\r\n            title: `Memory Test Card ${i + 1}`,\r\n            text: 'x'.repeat(2000) // 2KB content\r\n          }\r\n        })\r\n        await offlineManager.createCard(cardData)\r\n      }\r\n      \r\n      // 获取内存使用情况\r\n      const memoryStats = offlineManager.getMemoryStatistics()\r\n      \r\n      // 验证内存使用在合理范围内\r\n      expect(memoryStats.operationQueueSize).toBe(operationCount)\r\n      expect(memoryStats.memoryUsageMB).toBeLessThan(50) // 应该小于50MB\r\n      \r\n      // 恢复网络并同步\r\n      networkMock.setOnline(true)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 等待同步完成\r\n      await asyncTestHelper.waitFor(async () => {\r\n        const pendingOps = await offlineManager.getPendingOperations()\r\n        return pendingOps.length === 0\r\n      }, { timeout: 20000 })\r\n      \r\n      // 验证同步后内存释放\r\n      const finalMemoryStats = offlineManager.getMemoryStatistics()\r\n      expect(finalMemoryStats.operationQueueSize).toBe(0)\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 错误处理和恢复测试\r\n  // ============================================================================\r\n\r\n  describe('错误处理和恢复', () => {\r\n    test('应该优雅处理网络中断', async () => {\r\n      await offlineManager.initialize()\r\n      \r\n      // 在操作过程中模拟网络中断\r\n      const cardData = mockFactories.createMockCard({\r\n        frontContent: { title: 'Interrupt Test Card' }\r\n      })\r\n      \r\n      // 开始操作\r\n      const operationPromise = offlineManager.createCard(cardData)\r\n      \r\n      // 在操作过程中断网\r\n      setTimeout(() => {\r\n        networkMock.setOnline(false)\r\n      }, 50)\r\n      \r\n      // 等待操作完成\r\n      const result = await operationPromise\r\n      \r\n      // 验证操作成功（应该自动降级到离线模式）\r\n      expect(result.success).toBe(true)\r\n      \r\n      // 验证操作已排队\r\n      const pendingOps = await offlineManager.getPendingOperations()\r\n      expect(pendingOps.length).toBe(1)\r\n    })\r\n\r\n    test('应该正确处理重复操作', async () => {\r\n      await offlineManager.initialize()\r\n      \r\n      // 切换到离线状态\r\n      networkMock.setOnline(false)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 创建卡片\r\n      const cardData = mockFactories.createMockCard()\r\n      const createResult = await offlineManager.createCard(cardData)\r\n      const cardId = createResult.id!\r\n      \r\n      // 尝试重复创建相同卡片（模拟重复操作）\r\n      const duplicateResult = await offlineManager.createCard({\r\n        ...cardData,\r\n        id: cardId\r\n      })\r\n      \r\n      // 验证重复操作被正确处理\r\n      expect(duplicateResult.success).toBe(true)\r\n      \r\n      // 验证只有一个操作被排队\r\n      const pendingOps = await offlineManager.getPendingOperations()\r\n      const createOps = pendingOps.filter(op => op.type === 'create' && op.entityId === cardId)\r\n      expect(createOps.length).toBe(1)\r\n    })\r\n\r\n    test('应该提供重试机制', async () => {\r\n      await offlineManager.initialize()\r\n      \r\n      // 切换到离线状态\r\n      networkMock.setOnline(false)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 离线创建卡片\r\n      const cardData = mockFactories.createMockCard()\r\n      await offlineManager.createCard(cardData)\r\n      \r\n      // 模拟云端服务失败\r\n      jest.spyOn(cloudService, 'syncCard').mockRejectedValue(new Error('Temporary failure'))\r\n      \r\n      // 恢复网络\r\n      networkMock.setOnline(true)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 等待第一次重试失败\r\n      await asyncTestHelper.delay(1000)\r\n      \r\n      // 验证重试计数增加\r\n      const pendingOps = await offlineManager.getPendingOperations()\r\n      expect(pendingOps[0].retryCount).toBeGreaterThan(0)\r\n      \r\n      // 修复云端服务\r\n      jest.spyOn(cloudService, 'syncCard').mockResolvedValue(true)\r\n      \r\n      // 等待重试成功\r\n      await asyncTestHelper.waitFor(async () => {\r\n        const pendingOps = await offlineManager.getPendingOperations()\r\n        return pendingOps.length === 0\r\n      }, { timeout: 10000 })\r\n      \r\n      // 验证最终同步成功\r\n      const finalPendingOps = await offlineManager.getPendingOperations()\r\n      expect(finalPendingOps.length).toBe(0)\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 缓存一致性测试\r\n  // ============================================================================\r\n\r\n  describe('缓存一致性', () => {\r\n    test('应该在离线时使用缓存', async () => {\r\n      await offlineManager.initialize()\r\n      \r\n      // 在线创建并缓存卡片\r\n      const cardData = mockFactories.createMockCard()\r\n      const createResult = await offlineManager.createCard(cardData)\r\n      const cardId = createResult.id!\r\n      \r\n      // 确保卡片被缓存\r\n      const cachedCard = await cacheService.get(`card:${cardId}`)\r\n      expect(cachedCard).toBeTruthy()\r\n      \r\n      // 切换到离线状态\r\n      networkMock.setOnline(false)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 从缓存读取卡片\r\n      const cardFromCache = await offlineManager.getCard(cardId)\r\n      expect(cardFromCache).toBeTruthy()\r\n      expect(cardFromCache!.id).toBe(cardId)\r\n      \r\n      // 验证缓存命中率\r\n      const cacheMetrics = cacheService.getMetrics()\r\n      expect(cacheMetrics.hitRate).toBeGreaterThan(0)\r\n    })\r\n\r\n    test('应该在网络恢复时更新缓存', async () => {\r\n      await offlineManager.initialize()\r\n      \r\n      // 切换到离线状态\r\n      networkMock.setOnline(false)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 离线创建卡片\r\n      const cardData = mockFactories.createMockCard()\r\n      const offlineResult = await offlineManager.createCard(cardData)\r\n      const cardId = offlineResult.id!\r\n      \r\n      // 验证本地缓存\r\n      const cachedCard = await cacheService.get(`card:${cardId}`)\r\n      expect(cachedCard).toBeTruthy()\r\n      \r\n      // 恢复网络\r\n      networkMock.setOnline(true)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 等待同步完成\r\n      await asyncTestHelper.waitFor(async () => {\r\n        const pendingOps = await offlineManager.getPendingOperations()\r\n        return pendingOps.length === 0\r\n      }, { timeout: 5000 })\r\n      \r\n      // 验证缓存更新\r\n      const finalCachedCard = await cacheService.get(`card:${cardId}`)\r\n      expect(finalCachedCard).toBeTruthy()\r\n      expect(finalCachedCard!.syncVersion).toBeGreaterThan(1)\r\n    })\r\n\r\n    test('应该正确处理缓存失效', async () => {\r\n      await offlineManager.initialize()\r\n      \r\n      // 在线创建卡片\r\n      const cardData = mockFactories.createMockCard()\r\n      const createResult = await offlineManager.createCard(cardData)\r\n      const cardId = createResult.id!\r\n      \r\n      // 验证缓存存在\r\n      const cachedCardBefore = await cacheService.get(`card:${cardId}`)\r\n      expect(cachedCardBefore).toBeTruthy()\r\n      \r\n      // 切换到离线状态\r\n      networkMock.setOnline(false)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 离线删除卡片\r\n      await offlineManager.deleteCard(cardId)\r\n      \r\n      // 验证缓存已失效\r\n      const cachedCardAfter = await cacheService.get(`card:${cardId}`)\r\n      expect(cachedCardAfter).toBeNull()\r\n      \r\n      // 恢复网络并同步\r\n      networkMock.setOnline(true)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 等待同步完成\r\n      await asyncTestHelper.waitFor(async () => {\r\n        const pendingOps = await offlineManager.getPendingOperations()\r\n        return pendingOps.length === 0\r\n      }, { timeout: 5000 })\r\n      \r\n      // 验证最终缓存状态\r\n      const finalCachedCard = await cacheService.get(`card:${cardId}`)\r\n      expect(finalCachedCard).toBeNull()\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 统计和监控测试\r\n  // ============================================================================\r\n\r\n  describe('统计和监控', () => {\r\n    test('应该提供准确的统计信息', async () => {\r\n      await offlineManager.initialize()\r\n      \r\n      // 切换到离线状态\r\n      networkMock.setOnline(false)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 执行各种操作\r\n      await offlineManager.createCard(mockFactories.createMockCard())\r\n      await offlineManager.createCard(mockFactories.createMockCard())\r\n      \r\n      const updateCard = mockFactories.createMockCard()\r\n      const updateResult = await offlineManager.createCard(updateCard)\r\n      await offlineManager.updateCard(updateResult.id!, {\r\n        frontContent: { title: 'Updated Stats' }\r\n      })\r\n      \r\n      // 获取统计信息\r\n      const stats = offlineManager.getOperationStatistics()\r\n      \r\n      expect(stats.totalOperations).toBe(4) // 3 create + 1 update\r\n      expect(stats.byType.create).toBe(3)\r\n      expect(stats.byType.update).toBe(1)\r\n      expect(stats.pendingOperations).toBe(4)\r\n      expect(stats.offlineMode).toBe(true)\r\n    })\r\n\r\n    test('应该跟踪性能指标', async () => {\r\n      await offlineManager.initialize()\r\n      \r\n      // 切换到离线状态\r\n      networkMock.setOnline(false)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 执行操作并测量性能\r\n      const cardData = mockFactories.createMockCard()\r\n      const result = await performanceTester.measure('stats_operation', () =>\r\n        offlineManager.createCard(cardData)\r\n      )\r\n      \r\n      // 获取性能统计\r\n      const perfStats = offlineManager.getPerformanceStatistics()\r\n      \r\n      expect(perfStats.averageOperationTime).toBeGreaterThan(0)\r\n      expect(perfStats.totalOperationTime).toBeGreaterThan(0)\r\n      expect(perfStats.operationCount).toBe(1)\r\n      \r\n      // 验证性能在可接受范围内\r\n      expect(perfStats.averageOperationTime).toBeLessThan(100) // 100ms内\r\n    })\r\n\r\n    test('应该提供网络状态历史', async () => {\r\n      await offlineManager.initialize()\r\n      \r\n      // 模拟多次网络状态变化\r\n      networkMock.setOnline(false)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      networkMock.setOnline(true)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      networkMock.setOnline(false)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      networkMock.setOnline(true)\r\n      await asyncTestHelper.delay(100)\r\n      \r\n      // 获取网络状态历史\r\n      const networkHistory = offlineManager.getNetworkHistory()\r\n      \r\n      expect(networkHistory.length).toBeGreaterThan(0)\r\n      \r\n      // 验证历史记录包含必要信息\r\n      const latestEvent = networkHistory[networkHistory.length - 1]\r\n      expect(latestEvent.timestamp).toBeDefined()\r\n      expect(latestEvent.online).toBe(true)\r\n      expect(latestEvent.duration).toBeDefined()\r\n    })\r\n  })\r\n})"],"version":3}
c99d1227d3aad75484762d32f5790664
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.render = exports.EventSimulator = exports.NetworkSimulator = exports.PerformanceTester = exports.TestDataGenerator = exports.MockIndexedDB = exports.MockSupabaseClient = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
// 高级测试工具 - 包含完整的数据生成器和模拟服务
const react_1 = require("@testing-library/react");
const jest_axe_1 = require("jest-axe");
const react_query_1 = require("@tanstack/react-query");
const react_dnd_1 = require("react-dnd");
const react_dnd_html5_backend_1 = require("react-dnd-html5-backend");
const styled_components_1 = require("styled-components");
const toast_provider_1 = require("@/components/ui/toast-provider");
// 扩展 Jest 匹配器
expect.extend(jest_axe_1.toHaveNoViolations);
// ============================================================================
// 模拟服务
// ============================================================================
class MockSupabaseClient {
    constructor() {
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {
                cards: new Map(),
                folders: new Map(),
                tags: new Map(),
                syncOperations: new Map(),
            }
        });
        // 卡片操作
        Object.defineProperty(this, "cards", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {
                select: jest.fn(() => ({
                    eq: jest.fn(() => ({
                        order: jest.fn(() => ({
                            data: Array.from(this.data.cards.values()),
                            error: null,
                        })),
                    })),
                    in: jest.fn(() => ({
                        data: Array.from(this.data.cards.values()),
                        error: null,
                    })),
                })),
                insert: jest.fn((card) => {
                    const newCard = {
                        id: crypto.randomUUID(),
                        frontContent: card.frontContent || {
                            title: '',
                            text: '',
                            images: [],
                            tags: [],
                            lastModified: new Date(),
                        },
                        backContent: card.backContent || {
                            title: '',
                            text: '',
                            images: [],
                            tags: [],
                            lastModified: new Date(),
                        },
                        style: card.style || {
                            type: 'solid',
                            backgroundColor: '#ffffff',
                            fontFamily: 'system-ui',
                            fontSize: 'base',
                            fontWeight: 'normal',
                            textColor: '#1f2937',
                            borderRadius: 'xl',
                            shadow: 'md',
                            borderWidth: 0,
                        },
                        isFlipped: card.isFlipped || false,
                        createdAt: new Date(),
                        updatedAt: new Date(),
                        ...card,
                    };
                    this.data.cards.set(newCard.id, newCard);
                    return Promise.resolve({
                        data: [newCard],
                        error: null,
                    });
                }),
                update: jest.fn((id, updates) => {
                    const card = this.data.cards.get(id);
                    if (card) {
                        const updatedCard = { ...card, ...updates, updatedAt: new Date() };
                        this.data.cards.set(id, updatedCard);
                        return Promise.resolve({
                            data: [updatedCard],
                            error: null,
                        });
                    }
                    return Promise.resolve({
                        data: null,
                        error: { message: 'Card not found' },
                    });
                }),
                delete: jest.fn((id) => {
                    const deleted = this.data.cards.delete(id);
                    return Promise.resolve({
                        data: null,
                        error: deleted ? null : { message: 'Card not found' },
                    });
                }),
            }
        });
        // 文件夹操作
        Object.defineProperty(this, "folders", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {
                select: jest.fn(() => ({
                    eq: jest.fn(() => ({
                        data: Array.from(this.data.folders.values()),
                        error: null,
                    })),
                })),
                insert: jest.fn((folder) => {
                    const newFolder = {
                        id: crypto.randomUUID(),
                        name: folder.name || '',
                        color: folder.color || '#3b82f6',
                        cardIds: folder.cardIds || [],
                        createdAt: new Date(),
                        updatedAt: new Date(),
                        ...folder,
                    };
                    this.data.folders.set(newFolder.id, newFolder);
                    return Promise.resolve({
                        data: [newFolder],
                        error: null,
                    });
                }),
            }
        });
        // 标签操作
        Object.defineProperty(this, "tags", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {
                select: jest.fn(() => ({
                    data: Array.from(this.data.tags.values()),
                    error: null,
                })),
                insert: jest.fn((tag) => {
                    const newTag = {
                        id: crypto.randomUUID(),
                        name: tag.name || '',
                        color: tag.color || '#3b82f6',
                        count: tag.count || 0,
                        createdAt: new Date(),
                        ...tag,
                    };
                    this.data.tags.set(newTag.id, newTag);
                    return Promise.resolve({
                        data: [newTag],
                        error: null,
                    });
                }),
            }
        });
        // 重置模拟数据
        Object.defineProperty(this, "reset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: () => {
                this.data.cards.clear();
                this.data.folders.clear();
                this.data.tags.clear();
                this.data.syncOperations.clear();
            }
        });
        // 获取当前数据状态
        Object.defineProperty(this, "getData", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: () => ({
                cards: Array.from(this.data.cards.values()),
                folders: Array.from(this.data.folders.values()),
                tags: Array.from(this.data.tags.values()),
                syncOperations: Array.from(this.data.syncOperations.values()),
            })
        });
    }
}
exports.MockSupabaseClient = MockSupabaseClient;
class MockIndexedDB {
    constructor() {
        Object.defineProperty(this, "stores", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        // 重置数据库
        Object.defineProperty(this, "reset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: () => {
                this.stores.forEach(store => store.clear());
            }
        });
        // 获取存储数据
        Object.defineProperty(this, "getStoreData", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (name) => {
                const store = this.stores.get(name);
                return store ? Array.from(store.values()) : [];
            }
        });
        // 初始化存储表
        this.stores.set('cards', new Map());
        this.stores.set('folders', new Map());
        this.stores.set('tags', new Map());
        this.stores.set('syncQueue', new Map());
    }
    // 模拟 Dexie 风格的操作
    table(name) {
        return {
            add: jest.fn((data) => {
                const store = this.stores.get(name);
                if (store) {
                    const id = data.id || crypto.randomUUID();
                    store.set(id, { ...data, id });
                    return Promise.resolve(id);
                }
                return Promise.reject(new Error(`Table ${name} not found`));
            }),
            bulkAdd: jest.fn((items) => {
                const store = this.stores.get(name);
                if (store) {
                    const ids = items.map(item => {
                        const id = item.id || crypto.randomUUID();
                        store.set(id, { ...item, id });
                        return id;
                    });
                    return Promise.resolve(ids);
                }
                return Promise.reject(new Error(`Table ${name} not found`));
            }),
            get: jest.fn((id) => {
                const store = this.stores.get(name);
                if (store) {
                    return Promise.resolve(store.get(id) || undefined);
                }
                return Promise.resolve(undefined);
            }),
            where: jest.fn((key) => ({
                equals: jest.fn((value) => ({
                    toArray: jest.fn(() => {
                        const store = this.stores.get(name);
                        if (store) {
                            const results = Array.from(store.values()).filter(item => item[key] === value);
                            return Promise.resolve(results);
                        }
                        return Promise.resolve([]);
                    }),
                    delete: jest.fn(() => {
                        const store = this.stores.get(name);
                        if (store) {
                            const toDelete = Array.from(store.entries()).filter(([_, item]) => item[key] === value);
                            toDelete.forEach(([id]) => store.delete(id));
                            return Promise.resolve(toDelete.length);
                        }
                        return Promise.resolve(0);
                    }),
                    modify: jest.fn((updates) => {
                        const store = this.stores.get(name);
                        if (store) {
                            const toModify = Array.from(store.entries()).filter(([_, item]) => item[key] === value);
                            toModify.forEach(([id, item]) => {
                                store.set(id, { ...item, ...updates });
                            });
                            return Promise.resolve(toModify.length);
                        }
                        return Promise.resolve(0);
                    }),
                })),
                anyOf: jest.fn((values) => ({
                    toArray: jest.fn(() => {
                        const store = this.stores.get(name);
                        if (store) {
                            const results = Array.from(store.values()).filter(item => values.includes(item[key]));
                            return Promise.resolve(results);
                        }
                        return Promise.resolve([]);
                    }),
                })),
            })),
            toArray: jest.fn(() => {
                const store = this.stores.get(name);
                if (store) {
                    return Promise.resolve(Array.from(store.values()));
                }
                return Promise.resolve([]);
            }),
            delete: jest.fn((id) => {
                const store = this.stores.get(name);
                if (store) {
                    const deleted = store.delete(id);
                    return Promise.resolve(deleted ? 1 : 0);
                }
                return Promise.resolve(0);
            }),
            clear: jest.fn(() => {
                const store = this.stores.get(name);
                if (store) {
                    store.clear();
                    return Promise.resolve();
                }
                return Promise.reject(new Error(`Table ${name} not found`));
            }),
        };
    }
}
exports.MockIndexedDB = MockIndexedDB;
// ============================================================================
// 数据生成器
// ============================================================================
class TestDataGenerator {
    static generateId() {
        return `test-id-${this.idCounter++}`;
    }
    static generateCard(overrides = {}) {
        const id = overrides.id || this.generateId();
        return {
            id,
            frontContent: {
                title: `Test Card ${id}`,
                text: 'This is a test card content for testing purposes.',
                images: [],
                tags: ['test'],
                lastModified: new Date(),
            },
            backContent: {
                title: `Back of Card ${id}`,
                text: 'This is the back content of the test card.',
                images: [],
                tags: [],
                lastModified: new Date(),
            },
            style: {
                type: 'solid',
                backgroundColor: '#ffffff',
                fontFamily: 'system-ui',
                fontSize: 'base',
                fontWeight: 'normal',
                textColor: '#1f2937',
                borderRadius: 'xl',
                shadow: 'md',
                borderWidth: 0,
            },
            isFlipped: false,
            createdAt: new Date(),
            updatedAt: new Date(),
            ...overrides,
        };
    }
    static generateFolder(overrides = {}) {
        const id = overrides.id || this.generateId();
        return {
            id,
            name: `Test Folder ${id}`,
            color: '#3b82f6',
            cardIds: [],
            createdAt: new Date(),
            updatedAt: new Date(),
            ...overrides,
        };
    }
    static generateTag(overrides = {}) {
        const id = overrides.id || this.generateId();
        return {
            id,
            name: `Test Tag ${id}`,
            color: '#3b82f6',
            count: 0,
            createdAt: new Date(),
            ...overrides,
        };
    }
    static generateSyncOperation(overrides = {}) {
        return {
            id: this.generateId(),
            type: 'create',
            entity: 'card',
            entityId: this.generateId(),
            data: {},
            priority: 'normal',
            timestamp: new Date(),
            retryCount: 0,
            maxRetries: 3,
            status: 'pending',
            ...overrides,
        };
    }
    static generateCardList(count, overrides) {
        return Array.from({ length: count }, (_, i) => this.generateCard({ ...overrides, id: `card-${i + 1}` }));
    }
    static generateFolderList(count, overrides) {
        return Array.from({ length: count }, (_, i) => this.generateFolder({ ...overrides, id: `folder-${i + 1}` }));
    }
    static generateTagList(count, overrides) {
        return Array.from({ length: count }, (_, i) => this.generateTag({ ...overrides, id: `tag-${i + 1}` }));
    }
}
exports.TestDataGenerator = TestDataGenerator;
Object.defineProperty(TestDataGenerator, "idCounter", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 1
});
// ============================================================================
// 自定义渲染器
// ============================================================================
const createTestQueryClient = () => new react_query_1.QueryClient({
    defaultOptions: {
        queries: {
            retry: false,
            cacheTime: 0,
        },
    },
});
const AllTheProviders = ({ children }) => {
    const queryClient = createTestQueryClient();
    return ((0, jsx_runtime_1.jsx)(react_query_1.QueryClientProvider, { client: queryClient, children: (0, jsx_runtime_1.jsx)(react_dnd_1.DndProvider, { backend: react_dnd_html5_backend_1.HTML5Backend, children: (0, jsx_runtime_1.jsx)(styled_components_1.ThemeProvider, { theme: { mode: 'light' }, children: (0, jsx_runtime_1.jsx)(toast_provider_1.ToastProvider, { children: children }) }) }) }));
};
const customRender = (ui, options) => {
    return (0, react_1.render)(ui, { wrapper: AllTheProviders, ...options });
};
exports.render = customRender;
// ============================================================================
// 性能测试工具
// ============================================================================
class PerformanceTester {
    constructor() {
        Object.defineProperty(this, "measurements", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
    }
    async measure(name, fn) {
        const start = performance.now();
        const result = await fn();
        const end = performance.now();
        const duration = end - start;
        if (!this.measurements.has(name)) {
            this.measurements.set(name, []);
        }
        this.measurements.get(name).push(duration);
        return result;
    }
    measureSync(name, fn) {
        const start = performance.now();
        const result = fn();
        const end = performance.now();
        const duration = end - start;
        if (!this.measurements.has(name)) {
            this.measurements.set(name, []);
        }
        this.measurements.get(name).push(duration);
        return result;
    }
    getStats(name) {
        const measurements = this.measurements.get(name) || [];
        if (measurements.length === 0)
            return null;
        const sum = measurements.reduce((a, b) => a + b, 0);
        const avg = sum / measurements.length;
        const min = Math.min(...measurements);
        const max = Math.max(...measurements);
        return {
            count: measurements.length,
            sum,
            avg,
            min,
            max,
            measurements,
        };
    }
    clear() {
        this.measurements.clear();
    }
}
exports.PerformanceTester = PerformanceTester;
// ============================================================================
// 网络模拟工具
// ============================================================================
class NetworkSimulator {
    constructor() {
        Object.defineProperty(this, "originalFetch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: global.fetch
        });
        Object.defineProperty(this, "latency", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "failureRate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "offline", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        this.setupMockFetch();
    }
    setLatency(ms) {
        this.latency = ms;
    }
    setFailureRate(rate) {
        this.failureRate = Math.max(0, Math.min(1, rate));
    }
    setOffline(offline) {
        this.offline = offline;
    }
    setupMockFetch() {
        global.fetch = jest.fn(async (input, init) => {
            if (this.offline) {
                throw new Error('Network: Offline');
            }
            if (Math.random() < this.failureRate) {
                throw new Error('Network: Request failed');
            }
            if (this.latency > 0) {
                await new Promise(resolve => setTimeout(resolve, this.latency));
            }
            return this.originalFetch(input, init);
        });
    }
    restore() {
        global.fetch = this.originalFetch;
    }
}
exports.NetworkSimulator = NetworkSimulator;
// ============================================================================
// 事件模拟工具
// ============================================================================
class EventSimulator {
    static simulateFileUpload(files) {
        return {
            target: {
                files,
            },
        };
    }
    static simulateDragStart(data) {
        return {
            dataTransfer: {
                setData: jest.fn(),
                getData: jest.fn(() => JSON.stringify(data)),
                clearData: jest.fn(),
            },
            preventDefault: jest.fn(),
            stopPropagation: jest.fn(),
        };
    }
    static simulateDragOver(position) {
        return {
            clientX: position.x,
            clientY: position.y,
            preventDefault: jest.fn(),
            stopPropagation: jest.fn(),
        };
    }
    static simulateDrop(data, position) {
        return {
            clientX: position.x,
            clientY: position.y,
            dataTransfer: {
                getData: jest.fn(() => JSON.stringify(data)),
                setData: jest.fn(),
                clearData: jest.fn(),
            },
            preventDefault: jest.fn(),
            stopPropagation: jest.fn(),
        };
    }
    static simulateKeyboardEvent(type, key, options = {}) {
        return new KeyboardEvent(type, {
            key,
            bubbles: true,
            cancelable: true,
            ...options,
        });
    }
    static simulateMouseEvent(type, options = {}) {
        return new MouseEvent(type, {
            bubbles: true,
            cancelable: true,
            ...options,
        });
    }
}
exports.EventSimulator = EventSimulator;
// ============================================================================
// 导出
// ============================================================================
// 重新导出 testing-library 工具
__exportStar(require("@testing-library/react"), exports);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
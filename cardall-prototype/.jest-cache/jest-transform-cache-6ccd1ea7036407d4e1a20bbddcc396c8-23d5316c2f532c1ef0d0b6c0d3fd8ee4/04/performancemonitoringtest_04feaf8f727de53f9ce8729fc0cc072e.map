{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\services\\performance-monitoring.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\services\\performance-monitoring.test.ts"],"sourcesContent":["/**\n * 性能监控服务单元测试\n * 测试性能指标收集、趋势分析、报告生成和监控功能\n */\n\nimport { PerformanceMonitoringService } from '@/services/performance-monitoring'\nimport {\n  PerformanceMetrics,\n  PerformanceTrend,\n  PerformanceReport,\n  MonitoringConfig,\n  DatabaseHealthStatus\n} from '@/services/performance-monitoring'\nimport { performanceTestData } from '../fixtures/test-data'\nimport {\n  mockDateNow,\n  cleanupAllMocks,\n  mockPromiseResolve,\n  mockPromiseReject\n} from '../utils/test-helpers'\nimport { vi, beforeEach, afterEach, describe, test, expect } from 'vitest'\n\n// 模拟数据库服务\nconst mockDb = {\n  cards: {\n    count: vi.fn()\n  },\n  folders: {\n    count: vi.fn()\n  },\n  tags: {\n    count: vi.fn()\n  },\n  images: {\n    count: vi.fn()\n  }\n}\n\n// 模拟查询性能服务\nconst mockQueryPerformance = {\n  getPerformanceStats: vi.fn()\n}\n\n// 模拟数据一致性服务\nconst mockDataConsistency = {\n  runQuickCheck: vi.fn()\n}\n\n// 模拟导航器存储\nconst mockStorageEstimate = {\n  usage: 1024 * 1024 * 50 // 50MB\n}\n\n// 模拟性能内存\nconst mockPerformanceMemory = {\n  usedJSHeapSize: 1024 * 1024 * 25 // 25MB\n}\n\ndescribe('PerformanceMonitoringService', () => {\n  let performanceMonitoringService: PerformanceMonitoringService\n  let restoreDateNow: () => void\n\n  beforeEach(() => {\n    cleanupAllMocks()\n\n    // 设置模拟的时间戳\n    const timestamp = 1640995200000 // 2022-01-01 00:00:00\n    restoreDateNow = mockDateNow(timestamp)\n\n    // 重置所有mock\n    vi.clearAllMocks()\n\n    // 设置默认mock返回值\n    mockDb.cards.count.mockResolvedValue(100)\n    mockDb.folders.count.mockResolvedValue(10)\n    mockDb.tags.count.mockResolvedValue(20)\n    mockDb.images.count.mockResolvedValue(50)\n\n    mockQueryPerformance.getPerformanceStats.mockResolvedValue({\n      averageQueryTime: 50,\n      cacheHitRate: 0.85,\n      errorCount: 2,\n      warningCount: 5\n    })\n\n    mockDataConsistency.runQuickCheck.mockResolvedValue({\n      overallScore: 0.95\n    })\n\n    // 模拟navigator.storage\n    Object.defineProperty(navigator, 'storage', {\n      value: {\n        estimate: vi.fn().mockResolvedValue(mockStorageEstimate)\n      },\n      writable: true\n    })\n\n    // 模拟performance.memory\n    Object.defineProperty(performance, 'memory', {\n      value: mockPerformanceMemory,\n      writable: true\n    })\n\n    // 模拟window.setInterval和clearInterval\n    const mockSetInterval = vi.fn().mockReturnValue(1)\n    const mockClearInterval = vi.fn()\n    Object.defineProperty(window, 'setInterval', { value: mockSetInterval })\n    Object.defineProperty(window, 'clearInterval', { value: mockClearInterval })\n\n    // 创建新的服务实例\n    performanceMonitoringService = new PerformanceMonitoringService(\n      mockDb as any,\n      mockQueryPerformance as any,\n      mockDataConsistency as any\n    )\n  })\n\n  afterEach(() => {\n    restoreDateNow()\n    cleanupAllMocks()\n  })\n\n  describe('Constructor and Configuration', () => {\n    test('should initialize with default config', () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      // 通过私有方法访问配置\n      const config = (service as any).config\n\n      expect(config.collectionInterval).toBe(5000)\n      expect(config.maxHistorySize).toBe(1000)\n      expect(config.alertThresholds.queryTime).toBe(1000)\n      expect(config.alertThresholds.memoryUsage).toBe(100 * 1024 * 1024)\n      expect(config.autoGenerateReport).toBe(true)\n      expect(config.reportInterval).toBe(24 * 60 * 60 * 1000)\n    })\n\n    test('should merge custom config with defaults', () => {\n      const customConfig: Partial<MonitoringConfig> = {\n        collectionInterval: 10000,\n        maxHistorySize: 500,\n        alertThresholds: {\n          queryTime: 500,\n          memoryUsage: 50 * 1024 * 1024,\n          errorRate: 0.02,\n          cacheHitRate: 0.8\n        },\n        autoGenerateReport: false,\n        reportInterval: 12 * 60 * 60 * 1000\n      }\n\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any,\n        customConfig\n      )\n\n      const config = (service as any).config\n\n      expect(config.collectionInterval).toBe(10000)\n      expect(config.maxHistorySize).toBe(500)\n      expect(config.alertThresholds.queryTime).toBe(500)\n      expect(config.alertThresholds.memoryUsage).toBe(50 * 1024 * 1024)\n      expect(config.autoGenerateReport).toBe(false)\n      expect(config.reportInterval).toBe(12 * 60 * 60 * 1000)\n    })\n\n    test('should create singleton instance', () => {\n      const instance1 = PerformanceMonitoringService.getInstance(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      const instance2 = PerformanceMonitoringService.getInstance(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      expect(instance1).toBe(instance2)\n    })\n  })\n\n  describe('Monitoring Control', () => {\n    test('should start monitoring correctly', () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      service.startMonitoring()\n\n      expect((service as any).isMonitoring).toBe(true)\n      expect(window.setInterval).toHaveBeenCalled()\n      expect(window.setInterval).toHaveBeenCalledTimes(2) // monitoring and report intervals\n    })\n\n    test('should stop monitoring correctly', () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      service.startMonitoring()\n      service.stopMonitoring()\n\n      expect((service as any).isMonitoring).toBe(false)\n      expect(window.clearInterval).toHaveBeenCalledTimes(2)\n    })\n\n    test('should not start monitoring if already running', () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      service.startMonitoring()\n      service.startMonitoring() // 第二次调用\n\n      expect(window.setInterval).toHaveBeenCalledTimes(2) // 只调用一次\n    })\n\n    test('should not stop monitoring if not running', () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      service.stopMonitoring()\n\n      expect(window.clearInterval).not.toHaveBeenCalled()\n    })\n\n    test('should restart monitoring when config is updated', () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      service.startMonitoring()\n\n      const clearSpy = vi.spyOn(service, 'stopMonitoring')\n      const startSpy = vi.spyOn(service, 'startMonitoring')\n\n      service.updateConfig({ collectionInterval: 10000 })\n\n      expect(clearSpy).toHaveBeenCalled()\n      expect(startSpy).toHaveBeenCalled()\n    })\n  })\n\n  describe('Metrics Collection', () => {\n    test('should collect all metrics correctly', async () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      await (service as any).collectMetrics()\n\n      const metrics = (service as any).getCurrentMetrics()\n\n      expect(metrics.timestamp).toBe(1640995200000)\n      expect(metrics.databaseSize).toBe(52428800) // 50MB\n      expect(metrics.cardCount).toBe(100)\n      expect(metrics.folderCount).toBe(10)\n      expect(metrics.tagCount).toBe(20)\n      expect(metrics.imageCount).toBe(50)\n      expect(metrics.averageQueryTime).toBe(50)\n      expect(metrics.cacheHitRate).toBe(0.85)\n      expect(metrics.memoryUsage).toBe(26214400) // 25MB\n      expect(metrics.syncStatus).toBe('synced')\n      expect(metrics.consistencyScore).toBe(0.95)\n      expect(metrics.errorCount).toBe(2)\n      expect(metrics.warningCount).toBe(5)\n    })\n\n    test('should handle errors during metric collection', async () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      // 模拟数据库错误\n      mockDb.cards.count.mockRejectedValue(new Error('Database error'))\n\n      await (service as any).collectMetrics()\n\n      const metrics = (service as any).getCurrentMetrics()\n\n      // 应该使用默认值或错误处理值\n      expect(metrics.cardCount).toBe(0)\n      expect(metrics.averageQueryTime).toBe(0)\n      expect(metrics.cacheHitRate).toBe(0)\n    })\n\n    test('should handle storage estimate errors', async () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      // 模拟存储API不可用\n      Object.defineProperty(navigator, 'storage', {\n        value: {\n          estimate: vi.fn().mockRejectedValue(new Error('Storage API not available'))\n        },\n        writable: true\n      })\n\n      await (service as any).collectMetrics()\n\n      const metrics = (service as any).getCurrentMetrics()\n      expect(metrics.databaseSize).toBe(0)\n    })\n\n    test('should handle performance memory errors', async () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      // 模拟性能内存API不可用\n      Object.defineProperty(performance, 'memory', {\n        value: undefined,\n        writable: true\n      })\n\n      await (service as any).collectMetrics()\n\n      const metrics = (service as any).getCurrentMetrics()\n      expect(metrics.memoryUsage).toBe(0)\n    })\n\n    test('should limit metrics history size', async () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any,\n        { maxHistorySize: 3 }\n      )\n\n      // 收集多次指标\n      for (let i = 0; i < 5; i++) {\n        await (service as any).collectMetrics()\n      }\n\n      const history = (service as any).metricsHistory\n      expect(history).toHaveLength(3)\n      expect(history[0].timestamp).toBe(1640995200000) // 最旧的\n      expect(history[2].timestamp).toBe(1640995200000) // 最新的\n    })\n\n    test('should check alerts after collecting metrics', async () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any,\n        {\n          alertThresholds: {\n            queryTime: 10, // 非常低的阈值\n            memoryUsage: 10 * 1024 * 1024,\n            errorRate: 0.01,\n            cacheHitRate: 0.9\n          }\n        }\n      )\n\n      const consoleWarnSpy = vi.spyOn(console, 'warn')\n\n      await (service as any).collectMetrics()\n\n      expect(consoleWarnSpy).toHaveBeenCalledWith('性能告警:', expect.arrayContaining([\n        '查询时间过长: 50ms',\n        '内存使用量过高: 25.00MB',\n        '缓存命中率过低: 85.0%'\n      ]))\n    })\n  })\n\n  describe('Performance Report Generation', () => {\n    test('should generate complete performance report', async () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      // 先收集一些指标\n      await (service as any).collectMetrics()\n\n      const report = await service.generateReport()\n\n      expect(report.reportId).toBeDefined()\n      expect(report.generatedAt).toBe(1640995200000)\n      expect(report.reportPeriod).toBeDefined()\n      expect(report.overallScore).toBeGreaterThanOrEqual(0)\n      expect(report.overallScore).toBeLessThanOrEqual(1)\n      expect(Array.isArray(report.trends)).toBe(true)\n      expect(Array.isArray(report.recommendations)).toBe(true)\n      expect(report.issues).toHaveProperty('critical')\n      expect(report.issues).toHaveProperty('warning')\n      expect(report.issues).toHaveProperty('info')\n      expect(report.optimizations).toHaveProperty('implemented')\n      expect(report.optimizations).toHaveProperty('suggested')\n      expect(report.summary).toHaveProperty('healthStatus')\n      expect(report.summary).toHaveProperty('keyFindings')\n      expect(report.summary).toHaveProperty('nextSteps')\n    })\n\n    test('should handle empty metrics history', async () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      const report = await service.generateReport()\n\n      expect(report.overallScore).toBe(0) // 基于空指标\n      expect(report.trends).toEqual([])\n    })\n\n    test('should generate appropriate recommendations', async () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      // 设置不良指标以触发建议\n      mockQueryPerformance.getPerformanceStats.mockResolvedValue({\n        averageQueryTime: 600, // 慢查询\n        cacheHitRate: 0.6, // 低缓存命中率\n        errorCount: 15, // 高错误计数\n        warningCount: 10\n      })\n\n      mockDataConsistency.runQuickCheck.mockResolvedValue({\n        overallScore: 0.7 // 中等一致性\n      })\n\n      // 模拟高内存使用\n      Object.defineProperty(performance, 'memory', {\n        value: { usedJSHeapSize: 60 * 1024 * 1024 }, // 60MB\n        writable: true\n      })\n\n      await (service as any).collectMetrics()\n      const report = await service.generateReport()\n\n      expect(report.recommendations.length).toBeGreaterThan(0)\n      expect(report.recommendations).toEqual(\n        expect.arrayContaining([\n          expect.stringContaining('优化查询或增加索引'),\n          expect.stringContaining('调整缓存策略'),\n          expect.stringContaining('清理不必要的数据'),\n          expect.stringContaining('运行数据一致性检查')\n        ])\n      )\n    })\n\n    test('should analyze issues correctly', async () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      // 设置严重问题指标\n      mockQueryPerformance.getPerformanceStats.mockResolvedValue({\n        averageQueryTime: 2500, // 非常慢\n        cacheHitRate: 0.3,\n        errorCount: 25,\n        warningCount: 15\n      })\n\n      mockDataConsistency.runQuickCheck.mockResolvedValue({\n        overallScore: 0.3 // 低一致性\n      })\n\n      await (service as any).collectMetrics()\n      const report = await service.generateReport()\n\n      expect(report.issues.critical).toEqual(\n        expect.arrayContaining([\n          '查询性能严重下降',\n          '数据一致性严重受损'\n        ])\n      )\n      expect(report.issues.warning.length).toBeGreaterThan(0)\n    })\n\n    test('should calculate overall score correctly', async () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      // 设置优秀指标\n      mockQueryPerformance.getPerformanceStats.mockResolvedValue({\n        averageQueryTime: 50, // 快查询\n        cacheHitRate: 0.95, // 高缓存命中率\n        errorCount: 0,\n        warningCount: 0\n      })\n\n      mockDataConsistency.runQuickCheck.mockResolvedValue({\n        overallScore: 0.99 // 高一致性\n      })\n\n      // 模拟低内存使用\n      Object.defineProperty(performance, 'memory', {\n        value: { usedJSHeapSize: 10 * 1024 * 1024 }, // 10MB\n        writable: true\n      })\n\n      await (service as any).collectMetrics()\n      const report = await service.generateReport()\n\n      expect(report.overallScore).toBeGreaterThan(0.8) // 应该有很高的分数\n    })\n\n    test('should save report after generation', async () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      const saveSpy = vi.spyOn(service as any, 'saveReport')\n\n      await service.generateReport()\n\n      expect(saveSpy).toHaveBeenCalled()\n    })\n  })\n\n  describe('Trend Analysis', () => {\n    test('should calculate trends correctly with multiple data points', async () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      // 模拟多个时间点的数据\n      const timestamps = [\n        1640995200000, // 2022-01-01\n        1640995260000, // 2022-01-01 + 1分钟\n        1640995320000, // 2022-01-01 + 2分钟\n      ]\n\n      const restoreTimestamps = timestamps.map(timestamp => mockDateNow(timestamp))\n\n      for (const timestamp of timestamps) {\n        mockDateNow(timestamp)\n        await (service as any).collectMetrics()\n      }\n\n      restoreTimestamps.forEach(restore => restore())\n\n      const trends = service.getPerformanceTrends()\n\n      expect(trends.length).toBeGreaterThan(0)\n      trends.forEach(trend => {\n        expect(trend.metric).toBeDefined()\n        expect(trend.values).toHaveLength(3)\n        expect(trend.timestamps).toHaveLength(3)\n        expect(['improving', 'stable', 'declining']).toContain(trend.trend)\n        expect(typeof trend.changeRate).toBe('number')\n      })\n    })\n\n    test('should filter trends by metric name', async () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      await (service as any).collectMetrics()\n      await (service as any).collectMetrics()\n\n      const allTrends = service.getPerformanceTrends()\n      const queryTimeTrends = service.getPerformanceTrends('averageQueryTime')\n\n      expect(queryTimeTrends.length).toBeLessThanOrEqual(allTrends.length)\n      if (queryTimeTrends.length > 0) {\n        expect(queryTimeTrends[0].metric).toBe('averageQueryTime')\n      }\n    })\n\n    test('should calculate trend direction correctly', () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      // 测试改善趋势\n      const improvingValues = [10, 20, 30, 40, 50]\n      const improvingTrend = (service as any).calculateTrendDirection(improvingValues)\n      expect(improvingTrend).toBe('improving')\n\n      // 测试下降趋势\n      const decliningValues = [50, 40, 30, 20, 10]\n      const decliningTrend = (service as any).calculateTrendDirection(decliningValues)\n      expect(decliningTrend).toBe('declining')\n\n      // 测试稳定趋势\n      const stableValues = [50, 51, 49, 50, 51]\n      const stableTrend = (service as any).calculateTrendDirection(stableValues)\n      expect(stableTrend).toBe('stable')\n    })\n\n    test('should calculate change rate correctly', () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      const values = [100, 120]\n      const changeRate = (service as any).calculateChangeRate(values)\n      expect(changeRate).toBe(0.2) // 20%增长\n\n      const decreasingValues = [120, 100]\n      const decreasingRate = (service as any).calculateChangeRate(decreasingValues)\n      expect(decreasingRate).toBeCloseTo(-0.167, 3) // 约16.7%下降\n    })\n  })\n\n  describe('Health Status', () => {\n    test('should determine health status correctly', async () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      // 优秀状态\n      mockQueryPerformance.getPerformanceStats.mockResolvedValue({\n        averageQueryTime: 50,\n        cacheHitRate: 0.95,\n        errorCount: 0,\n        warningCount: 0\n      })\n\n      await (service as any).collectMetrics()\n      let healthStatus = service.getHealthStatus()\n      expect(healthStatus).toBe('healthy')\n\n      // 良好状态\n      mockQueryPerformance.getPerformanceStats.mockResolvedValue({\n        averageQueryTime: 200,\n        cacheHitRate: 0.8,\n        errorCount: 5,\n        warningCount: 10\n      })\n\n      await (service as any).collectMetrics()\n      healthStatus = service.getHealthStatus()\n      expect(['healthy', 'warning'].includes(healthStatus)).toBe(true)\n\n      // 警告状态\n      mockQueryPerformance.getPerformanceStats.mockResolvedValue({\n        averageQueryTime: 800,\n        cacheHitRate: 0.6,\n        errorCount: 15,\n        warningCount: 20\n      })\n\n      await (service as any).collectMetrics()\n      healthStatus = service.getHealthStatus()\n      expect(healthStatus).toBe('warning')\n\n      // 严重状态\n      mockQueryPerformance.getPerformanceStats.mockResolvedValue({\n        averageQueryTime: 3000,\n        cacheHitRate: 0.3,\n        errorCount: 50,\n        warningCount: 100\n      })\n\n      await (service as any).collectMetrics()\n      healthStatus = service.getHealthStatus()\n      expect(healthStatus).toBe('critical')\n    })\n  })\n\n  describe('Performance Statistics', () => {\n    test('should return complete performance stats', async () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      await (service as any).collectMetrics()\n\n      const stats = service.getPerformanceStats()\n\n      expect(stats).toHaveProperty('currentMetrics')\n      expect(stats).toHaveProperty('healthStatus')\n      expect(stats).toHaveProperty('trends')\n      expect(stats).toHaveProperty('alerts')\n      expect(typeof stats.currentMetrics).toBe('object')\n      expect(typeof stats.healthStatus).toBe('string')\n      expect(Array.isArray(stats.trends)).toBe(true)\n      expect(Array.isArray(stats.alerts)).toBe(true)\n    })\n\n    test('should generate alerts based on thresholds', async () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any,\n        {\n          alertThresholds: {\n            queryTime: 100, // 低阈值\n            memoryUsage: 20 * 1024 * 1024, // 20MB\n            errorRate: 0.05,\n            cacheHitRate: 0.9 // 高阈值\n          }\n        }\n      )\n\n      await (service as any).collectMetrics()\n\n      const stats = service.getPerformanceStats()\n      const alerts = stats.alerts\n\n      expect(alerts.length).toBeGreaterThan(0)\n      expect(alerts.some(alert => alert.includes('查询时间超过阈值'))).toBe(true)\n      expect(alerts.some(alert => alert.includes('内存使用超过阈值'))).toBe(true)\n      expect(alerts.some(alert => alert.includes('缓存命中率低于阈值'))).toBe(true)\n    })\n  })\n\n  describe('Data Management', () => {\n    test('should export performance data correctly', () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      const exportData = service.exportPerformanceData()\n      const parsedData = JSON.parse(exportData)\n\n      expect(parsedData).toHaveProperty('config')\n      expect(parsedData).toHaveProperty('metrics')\n      expect(parsedData).toHaveProperty('exportTime')\n      expect(parsedData).toHaveProperty('version')\n      expect(parsedData.version).toBe('3.0.0')\n      expect(Array.isArray(parsedData.metrics)).toBe(true)\n    })\n\n    test('should clear history correctly', () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      // 添加一些历史数据\n      ;(service as any).metricsHistory = [\n        { timestamp: 1, databaseSize: 1000 },\n        { timestamp: 2, databaseSize: 2000 }\n      ]\n\n      service.clearHistory()\n\n      expect((service as any).metricsHistory).toEqual([])\n    })\n\n    test('should return metrics history with limit', async () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any,\n        { maxHistorySize: 5 }\n      )\n\n      // 收集多个指标\n      for (let i = 0; i < 10; i++) {\n        mockDateNow(1640995200000 + i * 1000)\n        await (service as any).collectMetrics()\n      }\n\n      const limitedHistory = service.getMetricsHistory(3)\n      const fullHistory = service.getMetricsHistory()\n\n      expect(limitedHistory).toHaveLength(3)\n      expect(fullHistory).toHaveLength(5) // 受maxHistorySize限制\n    })\n  })\n\n  describe('Utility Functions', () => {\n    test('should format bytes correctly', () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      const formatBytes = (service as any).formatBytes\n\n      expect(formatBytes(0)).toBe('0 Bytes')\n      expect(formatBytes(1024)).toBe('1.00 KB')\n      expect(formatBytes(1024 * 1024)).toBe('1.00 MB')\n      expect(formatBytes(1024 * 1024 * 1024)).toBe('1.00 GB')\n      expect(formatBytes(1500)).toBe('1.46 KB')\n      expect(formatBytes(1024 * 1024 * 1.5)).toBe('1.50 MB')\n    })\n\n    test('should handle empty metrics gracefully', () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      const emptyMetrics = (service as any).getEmptyMetrics()\n\n      expect(emptyMetrics.databaseSize).toBe(0)\n      expect(emptyMetrics.cardCount).toBe(0)\n      expect(emptyMetrics.averageQueryTime).toBe(0)\n      expect(emptyMetrics.syncStatus).toBe('unknown')\n    })\n\n    test('should generate report ID correctly', () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      const reportId = (service as any).generateReportId()\n\n      expect(reportId).toMatch(/^perf_\\d+_[a-z0-9]{9}$/)\n    })\n  })\n\n  describe('Error Handling', () => {\n    test('should handle database errors gracefully', async () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      mockDb.cards.count.mockRejectedValue(new Error('Database connection failed'))\n\n      const consoleErrorSpy = vi.spyOn(console, 'error')\n\n      await (service as any).collectMetrics()\n\n      expect(consoleErrorSpy).toHaveBeenCalledWith('收集性能指标失败:', expect.any(Error))\n    })\n\n    test('should handle service dependency errors', async () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      mockQueryPerformance.getPerformanceStats.mockRejectedValue(new Error('Service unavailable'))\n\n      await (service as any).collectMetrics()\n\n      const metrics = (service as any).getCurrentMetrics()\n      expect(metrics.averageQueryTime).toBe(0)\n      expect(metrics.cacheHitRate).toBe(0)\n      expect(metrics.errorCount).toBe(0)\n    })\n\n    test('should handle report generation errors', async () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      // 破坏内部状态以触发错误\n      ;(service as any).metricsHistory = null\n\n      const consoleErrorSpy = vi.spyOn(console, 'error')\n\n      await expect(service.generateReport()).rejects.toThrow()\n\n      expect(consoleErrorSpy).toHaveBeenCalled()\n    })\n  })\n\n  describe('Performance Tests', () => {\n    test('should handle large datasets efficiently', async () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any,\n        { maxHistorySize: 10000 }\n      )\n\n      const startTime = performance.now()\n\n      // 模拟大量数据收集\n      for (let i = 0; i < 1000; i++) {\n        mockDateNow(1640995200000 + i * 1000)\n        await (service as any).collectMetrics()\n      }\n\n      const endTime = performance.now()\n      const duration = endTime - startTime\n\n      expect(duration).toBeLessThan(5000) // 应该在5秒内完成\n\n      const history = service.getMetricsHistory()\n      expect(history).toHaveLength(1000)\n    })\n\n    test('should generate report with many data points efficiently', async () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any,\n        { maxHistorySize: 1000 }\n      )\n\n      // 添加大量历史数据\n      for (let i = 0; i < 500; i++) {\n        ;(service as any).metricsHistory.push({\n          timestamp: 1640995200000 + i * 1000,\n          databaseSize: i * 1000,\n          cardCount: i,\n          averageQueryTime: 50 + Math.random() * 100,\n          cacheHitRate: 0.8 + Math.random() * 0.2,\n          memoryUsage: 1024 * 1024 * (10 + Math.random() * 40),\n          syncStatus: 'synced',\n          consistencyScore: 0.8 + Math.random() * 0.2,\n          errorCount: Math.floor(Math.random() * 10),\n          warningCount: Math.floor(Math.random() * 20),\n        } as PerformanceMetrics)\n      }\n\n      const startTime = performance.now()\n      const report = await service.generateReport()\n      const endTime = performance.now()\n\n      const duration = endTime - startTime\n      expect(duration).toBeLessThan(1000) // 应该在1秒内完成\n      expect(report.trends.length).toBeGreaterThan(0)\n    })\n\n    test('should handle concurrent metric collection', async () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      // 模拟并发收集\n      const collectionPromises = Array.from({ length: 10 }, () =>\n        (service as any).collectMetrics()\n      )\n\n      await Promise.all(collectionPromises)\n\n      const history = service.getMetricsHistory()\n      expect(history).toHaveLength(10)\n    })\n  })\n\n  describe('Edge Cases', () => {\n    test('should handle single data point in trends', async () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      await (service as any).collectMetrics()\n      const trends = service.getPerformanceTrends()\n\n      expect(trends).toEqual([])\n    })\n\n    test('should handle very large memory usage', async () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      Object.defineProperty(performance, 'memory', {\n        value: { usedJSHeapSize: 1024 * 1024 * 1024 * 2 }, // 2GB\n        writable: true\n      })\n\n      await (service as any).collectMetrics()\n      const metrics = (service as any).getCurrentMetrics()\n\n      expect(metrics.memoryUsage).toBe(2147483648)\n    })\n\n    test('should handle negative values in metrics', async () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      // 模拟异常数据\n      mockQueryPerformance.getPerformanceStats.mockResolvedValue({\n        averageQueryTime: -50, // 异常值\n        cacheHitRate: -0.1, // 异常值\n        errorCount: -5, // 异常值\n        warningCount: 10\n      })\n\n      await (service as any).collectMetrics()\n      const score = (service as any).calculateOverallScore((service as any).getCurrentMetrics())\n\n      expect(score).toBeGreaterThanOrEqual(0)\n      expect(score).toBeLessThanOrEqual(1)\n    })\n  })\n\n  describe('Cleanup and Destruction', () => {\n    test('should clean up properly on destroy', () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      service.startMonitoring()\n\n      // 添加历史数据\n      ;(service as any).metricsHistory = [{ timestamp: 1, databaseSize: 1000 }]\n\n      service.destroy()\n\n      expect((service as any).isMonitoring).toBe(false)\n      expect((service as any).metricsHistory).toEqual([])\n      expect(PerformanceMonitoringService.getInstance).toBeNull()\n    })\n\n    test('should handle multiple destroy calls safely', () => {\n      const service = new PerformanceMonitoringService(\n        mockDb as any,\n        mockQueryPerformance as any,\n        mockDataConsistency as any\n      )\n\n      service.destroy()\n      service.destroy() // 第二次调用\n\n      // 应该不会抛出错误\n      expect(true).toBe(true)\n    })\n  })\n})\n\ndescribe('Convenience Functions', () => {\n  test('createPerformanceMonitoring should return singleton instance', () => {\n    const instance1 = (global as any).createPerformanceMonitoring(\n      mockDb,\n      mockQueryPerformance,\n      mockDataConsistency\n    )\n\n    const instance2 = (global as any).createPerformanceMonitoring(\n      mockDb,\n      mockQueryPerformance,\n      mockDataConsistency\n    )\n\n    expect(instance1).toBe(instance2)\n  })\n})"],"version":3}
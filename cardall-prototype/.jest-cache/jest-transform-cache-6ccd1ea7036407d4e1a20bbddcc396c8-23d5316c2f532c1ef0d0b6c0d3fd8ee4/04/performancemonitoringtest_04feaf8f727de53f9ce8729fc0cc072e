b5108b6829b6a9ed1da40b006f61c32b
"use strict";
/**
 * 性能监控服务单元测试
 * 测试性能指标收集、趋势分析、报告生成和监控功能
 */
Object.defineProperty(exports, "__esModule", { value: true });
const performance_monitoring_1 = require("@/services/performance-monitoring");
const test_helpers_1 = require("../utils/test-helpers");
const vitest_1 = require("vitest");
// 模拟数据库服务
const mockDb = {
    cards: {
        count: vitest_1.vi.fn()
    },
    folders: {
        count: vitest_1.vi.fn()
    },
    tags: {
        count: vitest_1.vi.fn()
    },
    images: {
        count: vitest_1.vi.fn()
    }
};
// 模拟查询性能服务
const mockQueryPerformance = {
    getPerformanceStats: vitest_1.vi.fn()
};
// 模拟数据一致性服务
const mockDataConsistency = {
    runQuickCheck: vitest_1.vi.fn()
};
// 模拟导航器存储
const mockStorageEstimate = {
    usage: 1024 * 1024 * 50 // 50MB
};
// 模拟性能内存
const mockPerformanceMemory = {
    usedJSHeapSize: 1024 * 1024 * 25 // 25MB
};
(0, vitest_1.describe)('PerformanceMonitoringService', () => {
    let performanceMonitoringService;
    let restoreDateNow;
    (0, vitest_1.beforeEach)(() => {
        (0, test_helpers_1.cleanupAllMocks)();
        // 设置模拟的时间戳
        const timestamp = 1640995200000; // 2022-01-01 00:00:00
        restoreDateNow = (0, test_helpers_1.mockDateNow)(timestamp);
        // 重置所有mock
        vitest_1.vi.clearAllMocks();
        // 设置默认mock返回值
        mockDb.cards.count.mockResolvedValue(100);
        mockDb.folders.count.mockResolvedValue(10);
        mockDb.tags.count.mockResolvedValue(20);
        mockDb.images.count.mockResolvedValue(50);
        mockQueryPerformance.getPerformanceStats.mockResolvedValue({
            averageQueryTime: 50,
            cacheHitRate: 0.85,
            errorCount: 2,
            warningCount: 5
        });
        mockDataConsistency.runQuickCheck.mockResolvedValue({
            overallScore: 0.95
        });
        // 模拟navigator.storage
        Object.defineProperty(navigator, 'storage', {
            value: {
                estimate: vitest_1.vi.fn().mockResolvedValue(mockStorageEstimate)
            },
            writable: true
        });
        // 模拟performance.memory
        Object.defineProperty(performance, 'memory', {
            value: mockPerformanceMemory,
            writable: true
        });
        // 模拟window.setInterval和clearInterval
        const mockSetInterval = vitest_1.vi.fn().mockReturnValue(1);
        const mockClearInterval = vitest_1.vi.fn();
        Object.defineProperty(window, 'setInterval', { value: mockSetInterval });
        Object.defineProperty(window, 'clearInterval', { value: mockClearInterval });
        // 创建新的服务实例
        performanceMonitoringService = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
    });
    (0, vitest_1.afterEach)(() => {
        restoreDateNow();
        (0, test_helpers_1.cleanupAllMocks)();
    });
    (0, vitest_1.describe)('Constructor and Configuration', () => {
        (0, vitest_1.test)('should initialize with default config', () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            // 通过私有方法访问配置
            const config = service.config;
            (0, vitest_1.expect)(config.collectionInterval).toBe(5000);
            (0, vitest_1.expect)(config.maxHistorySize).toBe(1000);
            (0, vitest_1.expect)(config.alertThresholds.queryTime).toBe(1000);
            (0, vitest_1.expect)(config.alertThresholds.memoryUsage).toBe(100 * 1024 * 1024);
            (0, vitest_1.expect)(config.autoGenerateReport).toBe(true);
            (0, vitest_1.expect)(config.reportInterval).toBe(24 * 60 * 60 * 1000);
        });
        (0, vitest_1.test)('should merge custom config with defaults', () => {
            const customConfig = {
                collectionInterval: 10000,
                maxHistorySize: 500,
                alertThresholds: {
                    queryTime: 500,
                    memoryUsage: 50 * 1024 * 1024,
                    errorRate: 0.02,
                    cacheHitRate: 0.8
                },
                autoGenerateReport: false,
                reportInterval: 12 * 60 * 60 * 1000
            };
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency, customConfig);
            const config = service.config;
            (0, vitest_1.expect)(config.collectionInterval).toBe(10000);
            (0, vitest_1.expect)(config.maxHistorySize).toBe(500);
            (0, vitest_1.expect)(config.alertThresholds.queryTime).toBe(500);
            (0, vitest_1.expect)(config.alertThresholds.memoryUsage).toBe(50 * 1024 * 1024);
            (0, vitest_1.expect)(config.autoGenerateReport).toBe(false);
            (0, vitest_1.expect)(config.reportInterval).toBe(12 * 60 * 60 * 1000);
        });
        (0, vitest_1.test)('should create singleton instance', () => {
            const instance1 = performance_monitoring_1.PerformanceMonitoringService.getInstance(mockDb, mockQueryPerformance, mockDataConsistency);
            const instance2 = performance_monitoring_1.PerformanceMonitoringService.getInstance(mockDb, mockQueryPerformance, mockDataConsistency);
            (0, vitest_1.expect)(instance1).toBe(instance2);
        });
    });
    (0, vitest_1.describe)('Monitoring Control', () => {
        (0, vitest_1.test)('should start monitoring correctly', () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            service.startMonitoring();
            (0, vitest_1.expect)(service.isMonitoring).toBe(true);
            (0, vitest_1.expect)(window.setInterval).toHaveBeenCalled();
            (0, vitest_1.expect)(window.setInterval).toHaveBeenCalledTimes(2); // monitoring and report intervals
        });
        (0, vitest_1.test)('should stop monitoring correctly', () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            service.startMonitoring();
            service.stopMonitoring();
            (0, vitest_1.expect)(service.isMonitoring).toBe(false);
            (0, vitest_1.expect)(window.clearInterval).toHaveBeenCalledTimes(2);
        });
        (0, vitest_1.test)('should not start monitoring if already running', () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            service.startMonitoring();
            service.startMonitoring(); // 第二次调用
            (0, vitest_1.expect)(window.setInterval).toHaveBeenCalledTimes(2); // 只调用一次
        });
        (0, vitest_1.test)('should not stop monitoring if not running', () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            service.stopMonitoring();
            (0, vitest_1.expect)(window.clearInterval).not.toHaveBeenCalled();
        });
        (0, vitest_1.test)('should restart monitoring when config is updated', () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            service.startMonitoring();
            const clearSpy = vitest_1.vi.spyOn(service, 'stopMonitoring');
            const startSpy = vitest_1.vi.spyOn(service, 'startMonitoring');
            service.updateConfig({ collectionInterval: 10000 });
            (0, vitest_1.expect)(clearSpy).toHaveBeenCalled();
            (0, vitest_1.expect)(startSpy).toHaveBeenCalled();
        });
    });
    (0, vitest_1.describe)('Metrics Collection', () => {
        (0, vitest_1.test)('should collect all metrics correctly', async () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            await service.collectMetrics();
            const metrics = service.getCurrentMetrics();
            (0, vitest_1.expect)(metrics.timestamp).toBe(1640995200000);
            (0, vitest_1.expect)(metrics.databaseSize).toBe(52428800); // 50MB
            (0, vitest_1.expect)(metrics.cardCount).toBe(100);
            (0, vitest_1.expect)(metrics.folderCount).toBe(10);
            (0, vitest_1.expect)(metrics.tagCount).toBe(20);
            (0, vitest_1.expect)(metrics.imageCount).toBe(50);
            (0, vitest_1.expect)(metrics.averageQueryTime).toBe(50);
            (0, vitest_1.expect)(metrics.cacheHitRate).toBe(0.85);
            (0, vitest_1.expect)(metrics.memoryUsage).toBe(26214400); // 25MB
            (0, vitest_1.expect)(metrics.syncStatus).toBe('synced');
            (0, vitest_1.expect)(metrics.consistencyScore).toBe(0.95);
            (0, vitest_1.expect)(metrics.errorCount).toBe(2);
            (0, vitest_1.expect)(metrics.warningCount).toBe(5);
        });
        (0, vitest_1.test)('should handle errors during metric collection', async () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            // 模拟数据库错误
            mockDb.cards.count.mockRejectedValue(new Error('Database error'));
            await service.collectMetrics();
            const metrics = service.getCurrentMetrics();
            // 应该使用默认值或错误处理值
            (0, vitest_1.expect)(metrics.cardCount).toBe(0);
            (0, vitest_1.expect)(metrics.averageQueryTime).toBe(0);
            (0, vitest_1.expect)(metrics.cacheHitRate).toBe(0);
        });
        (0, vitest_1.test)('should handle storage estimate errors', async () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            // 模拟存储API不可用
            Object.defineProperty(navigator, 'storage', {
                value: {
                    estimate: vitest_1.vi.fn().mockRejectedValue(new Error('Storage API not available'))
                },
                writable: true
            });
            await service.collectMetrics();
            const metrics = service.getCurrentMetrics();
            (0, vitest_1.expect)(metrics.databaseSize).toBe(0);
        });
        (0, vitest_1.test)('should handle performance memory errors', async () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            // 模拟性能内存API不可用
            Object.defineProperty(performance, 'memory', {
                value: undefined,
                writable: true
            });
            await service.collectMetrics();
            const metrics = service.getCurrentMetrics();
            (0, vitest_1.expect)(metrics.memoryUsage).toBe(0);
        });
        (0, vitest_1.test)('should limit metrics history size', async () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency, { maxHistorySize: 3 });
            // 收集多次指标
            for (let i = 0; i < 5; i++) {
                await service.collectMetrics();
            }
            const history = service.metricsHistory;
            (0, vitest_1.expect)(history).toHaveLength(3);
            (0, vitest_1.expect)(history[0].timestamp).toBe(1640995200000); // 最旧的
            (0, vitest_1.expect)(history[2].timestamp).toBe(1640995200000); // 最新的
        });
        (0, vitest_1.test)('should check alerts after collecting metrics', async () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency, {
                alertThresholds: {
                    queryTime: 10, // 非常低的阈值
                    memoryUsage: 10 * 1024 * 1024,
                    errorRate: 0.01,
                    cacheHitRate: 0.9
                }
            });
            const consoleWarnSpy = vitest_1.vi.spyOn(console, 'warn');
            await service.collectMetrics();
            (0, vitest_1.expect)(consoleWarnSpy).toHaveBeenCalledWith('性能告警:', vitest_1.expect.arrayContaining([
                '查询时间过长: 50ms',
                '内存使用量过高: 25.00MB',
                '缓存命中率过低: 85.0%'
            ]));
        });
    });
    (0, vitest_1.describe)('Performance Report Generation', () => {
        (0, vitest_1.test)('should generate complete performance report', async () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            // 先收集一些指标
            await service.collectMetrics();
            const report = await service.generateReport();
            (0, vitest_1.expect)(report.reportId).toBeDefined();
            (0, vitest_1.expect)(report.generatedAt).toBe(1640995200000);
            (0, vitest_1.expect)(report.reportPeriod).toBeDefined();
            (0, vitest_1.expect)(report.overallScore).toBeGreaterThanOrEqual(0);
            (0, vitest_1.expect)(report.overallScore).toBeLessThanOrEqual(1);
            (0, vitest_1.expect)(Array.isArray(report.trends)).toBe(true);
            (0, vitest_1.expect)(Array.isArray(report.recommendations)).toBe(true);
            (0, vitest_1.expect)(report.issues).toHaveProperty('critical');
            (0, vitest_1.expect)(report.issues).toHaveProperty('warning');
            (0, vitest_1.expect)(report.issues).toHaveProperty('info');
            (0, vitest_1.expect)(report.optimizations).toHaveProperty('implemented');
            (0, vitest_1.expect)(report.optimizations).toHaveProperty('suggested');
            (0, vitest_1.expect)(report.summary).toHaveProperty('healthStatus');
            (0, vitest_1.expect)(report.summary).toHaveProperty('keyFindings');
            (0, vitest_1.expect)(report.summary).toHaveProperty('nextSteps');
        });
        (0, vitest_1.test)('should handle empty metrics history', async () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            const report = await service.generateReport();
            (0, vitest_1.expect)(report.overallScore).toBe(0); // 基于空指标
            (0, vitest_1.expect)(report.trends).toEqual([]);
        });
        (0, vitest_1.test)('should generate appropriate recommendations', async () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            // 设置不良指标以触发建议
            mockQueryPerformance.getPerformanceStats.mockResolvedValue({
                averageQueryTime: 600, // 慢查询
                cacheHitRate: 0.6, // 低缓存命中率
                errorCount: 15, // 高错误计数
                warningCount: 10
            });
            mockDataConsistency.runQuickCheck.mockResolvedValue({
                overallScore: 0.7 // 中等一致性
            });
            // 模拟高内存使用
            Object.defineProperty(performance, 'memory', {
                value: { usedJSHeapSize: 60 * 1024 * 1024 }, // 60MB
                writable: true
            });
            await service.collectMetrics();
            const report = await service.generateReport();
            (0, vitest_1.expect)(report.recommendations.length).toBeGreaterThan(0);
            (0, vitest_1.expect)(report.recommendations).toEqual(vitest_1.expect.arrayContaining([
                vitest_1.expect.stringContaining('优化查询或增加索引'),
                vitest_1.expect.stringContaining('调整缓存策略'),
                vitest_1.expect.stringContaining('清理不必要的数据'),
                vitest_1.expect.stringContaining('运行数据一致性检查')
            ]));
        });
        (0, vitest_1.test)('should analyze issues correctly', async () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            // 设置严重问题指标
            mockQueryPerformance.getPerformanceStats.mockResolvedValue({
                averageQueryTime: 2500, // 非常慢
                cacheHitRate: 0.3,
                errorCount: 25,
                warningCount: 15
            });
            mockDataConsistency.runQuickCheck.mockResolvedValue({
                overallScore: 0.3 // 低一致性
            });
            await service.collectMetrics();
            const report = await service.generateReport();
            (0, vitest_1.expect)(report.issues.critical).toEqual(vitest_1.expect.arrayContaining([
                '查询性能严重下降',
                '数据一致性严重受损'
            ]));
            (0, vitest_1.expect)(report.issues.warning.length).toBeGreaterThan(0);
        });
        (0, vitest_1.test)('should calculate overall score correctly', async () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            // 设置优秀指标
            mockQueryPerformance.getPerformanceStats.mockResolvedValue({
                averageQueryTime: 50, // 快查询
                cacheHitRate: 0.95, // 高缓存命中率
                errorCount: 0,
                warningCount: 0
            });
            mockDataConsistency.runQuickCheck.mockResolvedValue({
                overallScore: 0.99 // 高一致性
            });
            // 模拟低内存使用
            Object.defineProperty(performance, 'memory', {
                value: { usedJSHeapSize: 10 * 1024 * 1024 }, // 10MB
                writable: true
            });
            await service.collectMetrics();
            const report = await service.generateReport();
            (0, vitest_1.expect)(report.overallScore).toBeGreaterThan(0.8); // 应该有很高的分数
        });
        (0, vitest_1.test)('should save report after generation', async () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            const saveSpy = vitest_1.vi.spyOn(service, 'saveReport');
            await service.generateReport();
            (0, vitest_1.expect)(saveSpy).toHaveBeenCalled();
        });
    });
    (0, vitest_1.describe)('Trend Analysis', () => {
        (0, vitest_1.test)('should calculate trends correctly with multiple data points', async () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            // 模拟多个时间点的数据
            const timestamps = [
                1640995200000, // 2022-01-01
                1640995260000, // 2022-01-01 + 1分钟
                1640995320000, // 2022-01-01 + 2分钟
            ];
            const restoreTimestamps = timestamps.map(timestamp => (0, test_helpers_1.mockDateNow)(timestamp));
            for (const timestamp of timestamps) {
                (0, test_helpers_1.mockDateNow)(timestamp);
                await service.collectMetrics();
            }
            restoreTimestamps.forEach(restore => restore());
            const trends = service.getPerformanceTrends();
            (0, vitest_1.expect)(trends.length).toBeGreaterThan(0);
            trends.forEach(trend => {
                (0, vitest_1.expect)(trend.metric).toBeDefined();
                (0, vitest_1.expect)(trend.values).toHaveLength(3);
                (0, vitest_1.expect)(trend.timestamps).toHaveLength(3);
                (0, vitest_1.expect)(['improving', 'stable', 'declining']).toContain(trend.trend);
                (0, vitest_1.expect)(typeof trend.changeRate).toBe('number');
            });
        });
        (0, vitest_1.test)('should filter trends by metric name', async () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            await service.collectMetrics();
            await service.collectMetrics();
            const allTrends = service.getPerformanceTrends();
            const queryTimeTrends = service.getPerformanceTrends('averageQueryTime');
            (0, vitest_1.expect)(queryTimeTrends.length).toBeLessThanOrEqual(allTrends.length);
            if (queryTimeTrends.length > 0) {
                (0, vitest_1.expect)(queryTimeTrends[0].metric).toBe('averageQueryTime');
            }
        });
        (0, vitest_1.test)('should calculate trend direction correctly', () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            // 测试改善趋势
            const improvingValues = [10, 20, 30, 40, 50];
            const improvingTrend = service.calculateTrendDirection(improvingValues);
            (0, vitest_1.expect)(improvingTrend).toBe('improving');
            // 测试下降趋势
            const decliningValues = [50, 40, 30, 20, 10];
            const decliningTrend = service.calculateTrendDirection(decliningValues);
            (0, vitest_1.expect)(decliningTrend).toBe('declining');
            // 测试稳定趋势
            const stableValues = [50, 51, 49, 50, 51];
            const stableTrend = service.calculateTrendDirection(stableValues);
            (0, vitest_1.expect)(stableTrend).toBe('stable');
        });
        (0, vitest_1.test)('should calculate change rate correctly', () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            const values = [100, 120];
            const changeRate = service.calculateChangeRate(values);
            (0, vitest_1.expect)(changeRate).toBe(0.2); // 20%增长
            const decreasingValues = [120, 100];
            const decreasingRate = service.calculateChangeRate(decreasingValues);
            (0, vitest_1.expect)(decreasingRate).toBeCloseTo(-0.167, 3); // 约16.7%下降
        });
    });
    (0, vitest_1.describe)('Health Status', () => {
        (0, vitest_1.test)('should determine health status correctly', async () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            // 优秀状态
            mockQueryPerformance.getPerformanceStats.mockResolvedValue({
                averageQueryTime: 50,
                cacheHitRate: 0.95,
                errorCount: 0,
                warningCount: 0
            });
            await service.collectMetrics();
            let healthStatus = service.getHealthStatus();
            (0, vitest_1.expect)(healthStatus).toBe('healthy');
            // 良好状态
            mockQueryPerformance.getPerformanceStats.mockResolvedValue({
                averageQueryTime: 200,
                cacheHitRate: 0.8,
                errorCount: 5,
                warningCount: 10
            });
            await service.collectMetrics();
            healthStatus = service.getHealthStatus();
            (0, vitest_1.expect)(['healthy', 'warning'].includes(healthStatus)).toBe(true);
            // 警告状态
            mockQueryPerformance.getPerformanceStats.mockResolvedValue({
                averageQueryTime: 800,
                cacheHitRate: 0.6,
                errorCount: 15,
                warningCount: 20
            });
            await service.collectMetrics();
            healthStatus = service.getHealthStatus();
            (0, vitest_1.expect)(healthStatus).toBe('warning');
            // 严重状态
            mockQueryPerformance.getPerformanceStats.mockResolvedValue({
                averageQueryTime: 3000,
                cacheHitRate: 0.3,
                errorCount: 50,
                warningCount: 100
            });
            await service.collectMetrics();
            healthStatus = service.getHealthStatus();
            (0, vitest_1.expect)(healthStatus).toBe('critical');
        });
    });
    (0, vitest_1.describe)('Performance Statistics', () => {
        (0, vitest_1.test)('should return complete performance stats', async () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            await service.collectMetrics();
            const stats = service.getPerformanceStats();
            (0, vitest_1.expect)(stats).toHaveProperty('currentMetrics');
            (0, vitest_1.expect)(stats).toHaveProperty('healthStatus');
            (0, vitest_1.expect)(stats).toHaveProperty('trends');
            (0, vitest_1.expect)(stats).toHaveProperty('alerts');
            (0, vitest_1.expect)(typeof stats.currentMetrics).toBe('object');
            (0, vitest_1.expect)(typeof stats.healthStatus).toBe('string');
            (0, vitest_1.expect)(Array.isArray(stats.trends)).toBe(true);
            (0, vitest_1.expect)(Array.isArray(stats.alerts)).toBe(true);
        });
        (0, vitest_1.test)('should generate alerts based on thresholds', async () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency, {
                alertThresholds: {
                    queryTime: 100, // 低阈值
                    memoryUsage: 20 * 1024 * 1024, // 20MB
                    errorRate: 0.05,
                    cacheHitRate: 0.9 // 高阈值
                }
            });
            await service.collectMetrics();
            const stats = service.getPerformanceStats();
            const alerts = stats.alerts;
            (0, vitest_1.expect)(alerts.length).toBeGreaterThan(0);
            (0, vitest_1.expect)(alerts.some(alert => alert.includes('查询时间超过阈值'))).toBe(true);
            (0, vitest_1.expect)(alerts.some(alert => alert.includes('内存使用超过阈值'))).toBe(true);
            (0, vitest_1.expect)(alerts.some(alert => alert.includes('缓存命中率低于阈值'))).toBe(true);
        });
    });
    (0, vitest_1.describe)('Data Management', () => {
        (0, vitest_1.test)('should export performance data correctly', () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            const exportData = service.exportPerformanceData();
            const parsedData = JSON.parse(exportData);
            (0, vitest_1.expect)(parsedData).toHaveProperty('config');
            (0, vitest_1.expect)(parsedData).toHaveProperty('metrics');
            (0, vitest_1.expect)(parsedData).toHaveProperty('exportTime');
            (0, vitest_1.expect)(parsedData).toHaveProperty('version');
            (0, vitest_1.expect)(parsedData.version).toBe('3.0.0');
            (0, vitest_1.expect)(Array.isArray(parsedData.metrics)).toBe(true);
        });
        (0, vitest_1.test)('should clear history correctly', () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            service.metricsHistory = [
                { timestamp: 1, databaseSize: 1000 },
                { timestamp: 2, databaseSize: 2000 }
            ];
            service.clearHistory();
            (0, vitest_1.expect)(service.metricsHistory).toEqual([]);
        });
        (0, vitest_1.test)('should return metrics history with limit', async () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency, { maxHistorySize: 5 });
            // 收集多个指标
            for (let i = 0; i < 10; i++) {
                (0, test_helpers_1.mockDateNow)(1640995200000 + i * 1000);
                await service.collectMetrics();
            }
            const limitedHistory = service.getMetricsHistory(3);
            const fullHistory = service.getMetricsHistory();
            (0, vitest_1.expect)(limitedHistory).toHaveLength(3);
            (0, vitest_1.expect)(fullHistory).toHaveLength(5); // 受maxHistorySize限制
        });
    });
    (0, vitest_1.describe)('Utility Functions', () => {
        (0, vitest_1.test)('should format bytes correctly', () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            const formatBytes = service.formatBytes;
            (0, vitest_1.expect)(formatBytes(0)).toBe('0 Bytes');
            (0, vitest_1.expect)(formatBytes(1024)).toBe('1.00 KB');
            (0, vitest_1.expect)(formatBytes(1024 * 1024)).toBe('1.00 MB');
            (0, vitest_1.expect)(formatBytes(1024 * 1024 * 1024)).toBe('1.00 GB');
            (0, vitest_1.expect)(formatBytes(1500)).toBe('1.46 KB');
            (0, vitest_1.expect)(formatBytes(1024 * 1024 * 1.5)).toBe('1.50 MB');
        });
        (0, vitest_1.test)('should handle empty metrics gracefully', () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            const emptyMetrics = service.getEmptyMetrics();
            (0, vitest_1.expect)(emptyMetrics.databaseSize).toBe(0);
            (0, vitest_1.expect)(emptyMetrics.cardCount).toBe(0);
            (0, vitest_1.expect)(emptyMetrics.averageQueryTime).toBe(0);
            (0, vitest_1.expect)(emptyMetrics.syncStatus).toBe('unknown');
        });
        (0, vitest_1.test)('should generate report ID correctly', () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            const reportId = service.generateReportId();
            (0, vitest_1.expect)(reportId).toMatch(/^perf_\d+_[a-z0-9]{9}$/);
        });
    });
    (0, vitest_1.describe)('Error Handling', () => {
        (0, vitest_1.test)('should handle database errors gracefully', async () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            mockDb.cards.count.mockRejectedValue(new Error('Database connection failed'));
            const consoleErrorSpy = vitest_1.vi.spyOn(console, 'error');
            await service.collectMetrics();
            (0, vitest_1.expect)(consoleErrorSpy).toHaveBeenCalledWith('收集性能指标失败:', vitest_1.expect.any(Error));
        });
        (0, vitest_1.test)('should handle service dependency errors', async () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            mockQueryPerformance.getPerformanceStats.mockRejectedValue(new Error('Service unavailable'));
            await service.collectMetrics();
            const metrics = service.getCurrentMetrics();
            (0, vitest_1.expect)(metrics.averageQueryTime).toBe(0);
            (0, vitest_1.expect)(metrics.cacheHitRate).toBe(0);
            (0, vitest_1.expect)(metrics.errorCount).toBe(0);
        });
        (0, vitest_1.test)('should handle report generation errors', async () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            service.metricsHistory = null;
            const consoleErrorSpy = vitest_1.vi.spyOn(console, 'error');
            await (0, vitest_1.expect)(service.generateReport()).rejects.toThrow();
            (0, vitest_1.expect)(consoleErrorSpy).toHaveBeenCalled();
        });
    });
    (0, vitest_1.describe)('Performance Tests', () => {
        (0, vitest_1.test)('should handle large datasets efficiently', async () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency, { maxHistorySize: 10000 });
            const startTime = performance.now();
            // 模拟大量数据收集
            for (let i = 0; i < 1000; i++) {
                (0, test_helpers_1.mockDateNow)(1640995200000 + i * 1000);
                await service.collectMetrics();
            }
            const endTime = performance.now();
            const duration = endTime - startTime;
            (0, vitest_1.expect)(duration).toBeLessThan(5000); // 应该在5秒内完成
            const history = service.getMetricsHistory();
            (0, vitest_1.expect)(history).toHaveLength(1000);
        });
        (0, vitest_1.test)('should generate report with many data points efficiently', async () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency, { maxHistorySize: 1000 });
            // 添加大量历史数据
            for (let i = 0; i < 500; i++) {
                ;
                service.metricsHistory.push({
                    timestamp: 1640995200000 + i * 1000,
                    databaseSize: i * 1000,
                    cardCount: i,
                    averageQueryTime: 50 + Math.random() * 100,
                    cacheHitRate: 0.8 + Math.random() * 0.2,
                    memoryUsage: 1024 * 1024 * (10 + Math.random() * 40),
                    syncStatus: 'synced',
                    consistencyScore: 0.8 + Math.random() * 0.2,
                    errorCount: Math.floor(Math.random() * 10),
                    warningCount: Math.floor(Math.random() * 20),
                });
            }
            const startTime = performance.now();
            const report = await service.generateReport();
            const endTime = performance.now();
            const duration = endTime - startTime;
            (0, vitest_1.expect)(duration).toBeLessThan(1000); // 应该在1秒内完成
            (0, vitest_1.expect)(report.trends.length).toBeGreaterThan(0);
        });
        (0, vitest_1.test)('should handle concurrent metric collection', async () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            // 模拟并发收集
            const collectionPromises = Array.from({ length: 10 }, () => service.collectMetrics());
            await Promise.all(collectionPromises);
            const history = service.getMetricsHistory();
            (0, vitest_1.expect)(history).toHaveLength(10);
        });
    });
    (0, vitest_1.describe)('Edge Cases', () => {
        (0, vitest_1.test)('should handle single data point in trends', async () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            await service.collectMetrics();
            const trends = service.getPerformanceTrends();
            (0, vitest_1.expect)(trends).toEqual([]);
        });
        (0, vitest_1.test)('should handle very large memory usage', async () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            Object.defineProperty(performance, 'memory', {
                value: { usedJSHeapSize: 1024 * 1024 * 1024 * 2 }, // 2GB
                writable: true
            });
            await service.collectMetrics();
            const metrics = service.getCurrentMetrics();
            (0, vitest_1.expect)(metrics.memoryUsage).toBe(2147483648);
        });
        (0, vitest_1.test)('should handle negative values in metrics', async () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            // 模拟异常数据
            mockQueryPerformance.getPerformanceStats.mockResolvedValue({
                averageQueryTime: -50, // 异常值
                cacheHitRate: -0.1, // 异常值
                errorCount: -5, // 异常值
                warningCount: 10
            });
            await service.collectMetrics();
            const score = service.calculateOverallScore(service.getCurrentMetrics());
            (0, vitest_1.expect)(score).toBeGreaterThanOrEqual(0);
            (0, vitest_1.expect)(score).toBeLessThanOrEqual(1);
        });
    });
    (0, vitest_1.describe)('Cleanup and Destruction', () => {
        (0, vitest_1.test)('should clean up properly on destroy', () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            service.startMonitoring();
            service.metricsHistory = [{ timestamp: 1, databaseSize: 1000 }];
            service.destroy();
            (0, vitest_1.expect)(service.isMonitoring).toBe(false);
            (0, vitest_1.expect)(service.metricsHistory).toEqual([]);
            (0, vitest_1.expect)(performance_monitoring_1.PerformanceMonitoringService.getInstance).toBeNull();
        });
        (0, vitest_1.test)('should handle multiple destroy calls safely', () => {
            const service = new performance_monitoring_1.PerformanceMonitoringService(mockDb, mockQueryPerformance, mockDataConsistency);
            service.destroy();
            service.destroy(); // 第二次调用
            // 应该不会抛出错误
            (0, vitest_1.expect)(true).toBe(true);
        });
    });
});
(0, vitest_1.describe)('Convenience Functions', () => {
    (0, vitest_1.test)('createPerformanceMonitoring should return singleton instance', () => {
        const instance1 = global.createPerformanceMonitoring(mockDb, mockQueryPerformance, mockDataConsistency);
        const instance2 = global.createPerformanceMonitoring(mockDb, mockQueryPerformance, mockDataConsistency);
        (0, vitest_1.expect)(instance1).toBe(instance2);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
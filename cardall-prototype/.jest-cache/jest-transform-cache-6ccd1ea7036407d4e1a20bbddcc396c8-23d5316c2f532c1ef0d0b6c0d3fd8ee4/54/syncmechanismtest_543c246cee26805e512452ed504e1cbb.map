{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\integration\\sync-mechanism.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\integration\\sync-mechanism.test.ts"],"sourcesContent":["/**\r\n * 同步机制集成测试\r\n * 测试本地操作与云端同步的完整工作流程\r\n */\r\n\r\nimport { describe, test, expect, jest, beforeEach, afterEach } from '@jest/globals'\r\nimport { LocalOperationServiceOptimized } from '../../services/local-operation-service'\r\nimport { MultilevelCacheService } from '../../services/multilevel-cache-service'\r\nimport { MockDatabase } from '../utils/test-utils'\r\nimport { performanceTester, memoryLeakDetector, mockFactories, asyncTestHelper } from '../utils/test-utils'\r\n\r\n// 模拟外部依赖\r\njest.mock('../../services/database-unified', () => ({\r\n  db: new MockDatabase()\r\n}))\r\n\r\njest.mock('../../services/supabase', () => ({\r\n  supabase: {\r\n    from: jest.fn().mockReturnValue({\r\n      select: jest.fn().mockReturnValue({\r\n        data: [],\r\n        error: null\r\n      }),\r\n      insert: jest.fn().mockReturnValue({\r\n        data: null,\r\n        error: null\r\n      }),\r\n      update: jest.fn().mockReturnValue({\r\n        data: null,\r\n        error: null\r\n      }),\r\n      delete: jest.fn().mockReturnValue({\r\n        error: null\r\n      })\r\n    }),\r\n    auth: {\r\n      getUser: jest.fn().mockResolvedValue({ data: { user: null }, error: null }),\r\n      getSession: jest.fn().mockResolvedValue({ data: { session: null }, error: null })\r\n    }\r\n  }\r\n}))\r\n\r\ndescribe('同步机制集成测试', () => {\r\n  let localService: LocalOperationServiceOptimized\r\n  let cacheService: MultilevelCacheService\r\n  let mockDb: MockDatabase\r\n  let mockSupabase: any\r\n\r\n  beforeEach(async () => {\r\n    // 重置模拟\r\n    mockDb = new MockDatabase()\r\n    mockSupabase = require('../../services/supabase').supabase\r\n    \r\n    // 初始化服务\r\n    localService = new LocalOperationServiceOptimized()\r\n    cacheService = new MultilevelCacheService()\r\n    \r\n    await localService.initialize()\r\n    \r\n    // 重置测试工具\r\n    performanceTester.reset()\r\n    memoryLeakDetector.clearSnapshots()\r\n    \r\n    // 清理所有模拟\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  afterEach(() => {\r\n    // 清理资源\r\n    localService.destroy()\r\n    cacheService.stop()\r\n    mockDb.clear()\r\n  })\r\n\r\n  // ============================================================================\r\n  // 本地操作到同步队列测试\r\n  // ============================================================================\r\n\r\n  describe('本地操作到同步队列', () => {\r\n    test('应该正确创建本地操作并生成同步任务', async () => {\r\n      const cardData = mockFactories.createMockCard()\r\n\r\n      // 创建本地卡片\r\n      const result = await performanceTester.measure('local_create_card', () =>\r\n        localService.createCard(cardData)\r\n      )\r\n\r\n      expect(result.success).toBe(true)\r\n      expect(result.id).toBeDefined()\r\n\r\n      // 验证同步队列中有对应的操作\r\n      const pendingOperations = await localService.getPendingSyncOperations()\r\n      const createOperation = pendingOperations.find(op => \r\n        op.type === 'create' && op.entityId === result.id\r\n      )\r\n\r\n      expect(createOperation).toBeDefined()\r\n      expect(createOperation!.status).toBe('pending')\r\n      expect(createOperation!.data).toEqual(expect.objectContaining({\r\n        frontContent: cardData.frontContent,\r\n        backContent: cardData.backContent\r\n      }))\r\n    })\r\n\r\n    test('应该正确处理更新操作的同步', async () => {\r\n      // 创建卡片\r\n      const cardData = mockFactories.createMockCard()\r\n      const createResult = await localService.createCard(cardData)\r\n      const cardId = createResult.id!\r\n\r\n      // 更新卡片\r\n      const updates = {\r\n        frontContent: {\r\n          title: 'Updated for Sync',\r\n          text: 'Updated content'\r\n        }\r\n      }\r\n\r\n      const updateResult = await performanceTester.measure('local_update_card', () =>\r\n        localService.updateCard(cardId, updates)\r\n      )\r\n\r\n      expect(updateResult.success).toBe(true)\r\n\r\n      // 验证同步队列中有更新操作\r\n      const pendingOperations = await localService.getPendingSyncOperations()\r\n      const updateOperation = pendingOperations.find(op => \r\n        op.type === 'update' && op.entityId === cardId\r\n      )\r\n\r\n      expect(updateOperation).toBeDefined()\r\n      expect(updateOperation!.type).toBe('update')\r\n      expect(updateOperation!.data.frontContent.title).toBe('Updated for Sync')\r\n    })\r\n\r\n    test('应该正确处理删除操作的同步', async () => {\r\n      // 创建卡片\r\n      const cardData = mockFactories.createMockCard()\r\n      const createResult = await localService.createCard(cardData)\r\n      const cardId = createResult.id!\r\n\r\n      // 删除卡片\r\n      const deleteResult = await performanceTester.measure('local_delete_card', () =>\r\n        localService.deleteCard(cardId)\r\n      )\r\n\r\n      expect(deleteResult.success).toBe(true)\r\n\r\n      // 验证同步队列中有删除操作\r\n      const pendingOperations = await localService.getPendingSyncOperations()\r\n      const deleteOperation = pendingOperations.find(op => \r\n        op.type === 'delete' && op.entityId === cardId\r\n      )\r\n\r\n      expect(deleteOperation).toBeDefined()\r\n      expect(deleteOperation!.type).toBe('delete')\r\n      expect(deleteOperation!.priority).toBe('high') // 删除操作应该是高优先级\r\n    })\r\n\r\n    test('应该正确处理批量操作的同步', async () => {\r\n      const cardsData = Array.from({ length: 5 }, () => mockFactories.createMockCard())\r\n\r\n      // 批量创建\r\n      const results = await performanceTester.measure('bulk_create_sync', () =>\r\n        localService.bulkCreateCards(cardsData)\r\n      )\r\n\r\n      expect(results).toHaveLength(5)\r\n      results.forEach(result => {\r\n        expect(result.success).toBe(true)\r\n      })\r\n\r\n      // 验证同步队列中有对应的批量操作\r\n      const pendingOperations = await localService.getPendingSyncOperations()\r\n      const createOperations = pendingOperations.filter(op => op.type === 'create')\r\n\r\n      expect(createOperations.length).toBe(5)\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 同步队列管理测试\r\n  // ============================================================================\r\n\r\n  describe('同步队列管理', () => {\r\n    beforeEach(async () => {\r\n      // 创建一些待同步的操作\r\n      const cards = Array.from({ length: 3 }, () => mockFactories.createMockCard())\r\n      await localService.bulkCreateCards(cards)\r\n    })\r\n\r\n    test('应该正确获取待同步操作', async () => {\r\n      const pendingOperations = await localService.getPendingSyncOperations()\r\n\r\n      expect(pendingOperations.length).toBeGreaterThan(0)\r\n      pendingOperations.forEach(op => {\r\n        expect(op.status).toBe('pending')\r\n        expect(['create', 'update', 'delete']).toContain(op.type)\r\n      })\r\n    })\r\n\r\n    test('应该按优先级排序同步操作', async () => {\r\n      // 添加一个高优先级操作\r\n      const highPriorityCard = mockFactories.createMockCard({\r\n        frontContent: { title: 'High Priority Card' }\r\n      })\r\n      await localService.createCard(highPriorityCard)\r\n\r\n      // 添加一个删除操作（应该是最高优先级）\r\n      const existingCards = await localService.getCards({ limit: 1 })\r\n      if (existingCards.length > 0) {\r\n        await localService.deleteCard(existingCards[0].id!)\r\n      }\r\n\r\n      const pendingOperations = await localService.getPendingSyncOperations()\r\n\r\n      // 删除操作应该在最前面\r\n      const deleteOperation = pendingOperations.find(op => op.type === 'delete')\r\n      if (deleteOperation) {\r\n        const deleteIndex = pendingOperations.indexOf(deleteOperation)\r\n        expect(deleteIndex).toBe(0) // 删除操作应该是第一个\r\n      }\r\n    })\r\n\r\n    test('应该正确更新操作状态', async () => {\r\n      const pendingOperations = await localService.getPendingSyncOperations()\r\n      const operationId = pendingOperations[0].id!\r\n\r\n      // 模拟同步成功\r\n      await localService.updateOperationStatuses([{\r\n        operationId,\r\n        success: true\r\n      }])\r\n\r\n      // 验证状态已更新\r\n      const updatedOperations = await mockDb.table('syncQueue').toArray()\r\n      const updatedOp = updatedOperations.find(op => op.id === operationId)\r\n      expect(updatedOp!.status).toBe('completed')\r\n    })\r\n\r\n    test('应该正确处理同步失败', async () => {\r\n      const pendingOperations = await localService.getPendingSyncOperations()\r\n      const operationId = pendingOperations[0].id!\r\n\r\n      // 模拟同步失败\r\n      await localService.updateOperationStatuses([{\r\n        operationId,\r\n        success: false,\r\n        error: 'Network error'\r\n      }])\r\n\r\n      // 验证错误状态\r\n      const updatedOperations = await mockDb.table('syncQueue').toArray()\r\n      const failedOp = updatedOperations.find(op => op.id === operationId)\r\n      expect(failedOp!.status).toBe('failed')\r\n      expect(failedOp!.lastError).toBe('Network error')\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 云端同步模拟测试\r\n  // ============================================================================\r\n\r\n  describe('云端同步模拟', () => {\r\n    test('应该模拟成功的云端同步', async () => {\r\n      // 创建本地数据\r\n      const cardData = mockFactories.createMockCard()\r\n      const localResult = await localService.createCard(cardData)\r\n\r\n      // 模拟云端同步成功\r\n      mockSupabase.from.mockReturnValue({\r\n        insert: jest.fn().mockReturnValue({\r\n          data: { id: 'cloud-id-123' },\r\n          error: null\r\n        })\r\n      })\r\n\r\n      // 获取待同步操作\r\n      const pendingOperations = await localService.getPendingSyncOperations()\r\n      const operation = pendingOperations[0]\r\n\r\n      // 模拟同步处理\r\n      if (operation) {\r\n        await localService.updateOperationStatuses([{\r\n          operationId: operation.id!,\r\n          success: true\r\n        }])\r\n      }\r\n\r\n      // 验证同步状态\r\n      const updatedOperations = await mockDb.table('syncQueue').toArray()\r\n      const completedOp = updatedOperations.find(op => op.id === operation!.id)\r\n      expect(completedOp!.status).toBe('completed')\r\n    })\r\n\r\n    test('应该模拟云端同步冲突', async () => {\r\n      // 创建本地数据\r\n      const cardData = mockFactories.createMockCard()\r\n      await localService.createCard(cardData)\r\n\r\n      // 模拟云端同步冲突\r\n      mockSupabase.from.mockReturnValue({\r\n        insert: jest.fn().mockReturnValue({\r\n          data: null,\r\n          error: { message: 'Conflict: Record already exists' }\r\n        })\r\n      })\r\n\r\n      const pendingOperations = await localService.getPendingSyncOperations()\r\n      const operation = pendingOperations[0]\r\n\r\n      // 模拟同步失败\r\n      if (operation) {\r\n        await localService.updateOperationStatuses([{\r\n          operationId: operation.id!,\r\n          success: false,\r\n          error: 'Conflict: Record already exists'\r\n        }])\r\n      }\r\n\r\n      // 验证冲突处理\r\n      const updatedOperations = await mockDb.table('syncQueue').toArray()\r\n      const conflictedOp = updatedOperations.find(op => op.id === operation!.id)\r\n      expect(conflictedOp!.status).toBe('failed')\r\n      expect(conflictedOp!.lastError).toContain('Conflict')\r\n    })\r\n\r\n    test('应该模拟网络错误处理', async () => {\r\n      // 创建本地数据\r\n      const cardData = mockFactories.createMockCard()\r\n      await localService.createCard(cardData)\r\n\r\n      // 模拟网络错误\r\n      mockSupabase.from.mockReturnValue({\r\n        insert: jest.fn().mockRejectedValue(new Error('Network timeout'))\r\n      })\r\n\r\n      const pendingOperations = await localService.getPendingSyncOperations()\r\n      const operation = pendingOperations[0]\r\n\r\n      // 模拟重试机制\r\n      let retryCount = 0\r\n      const maxRetries = 3\r\n\r\n      while (retryCount < maxRetries) {\r\n        try {\r\n          // 模拟同步尝试\r\n          await new Promise(resolve => setTimeout(resolve, 100))\r\n          retryCount++\r\n        } catch (error) {\r\n          // 重试逻辑\r\n        }\r\n      }\r\n\r\n      // 最终标记为失败\r\n      if (operation) {\r\n        await localService.updateOperationStatuses([{\r\n          operationId: operation.id!,\r\n          success: false,\r\n          error: `Network timeout after ${maxRetries} retries`\r\n        }])\r\n      }\r\n\r\n      const updatedOperations = await mockDb.table('syncQueue').toArray()\r\n      const failedOp = updatedOperations.find(op => op.id === operation!.id)\r\n      expect(failedOp!.status).toBe('failed')\r\n      expect(failedOp!.lastError).toContain('Network timeout')\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 数据一致性测试\r\n  // ============================================================================\r\n\r\n  describe('数据一致性', () => {\r\n    test('应该保证本地和云端数据的一致性', async () => {\r\n      // 创建本地数据\r\n      const originalData = mockFactories.createMockCard({\r\n        frontContent: {\r\n          title: 'Consistency Test Card',\r\n          text: 'Original content'\r\n        }\r\n      })\r\n\r\n      const localResult = await localService.createCard(originalData)\r\n      const cardId = localResult.id!\r\n\r\n      // 模拟云端同步\r\n      mockSupabase.from.mockReturnValue({\r\n        insert: jest.fn().mockReturnValue({\r\n          data: { id: cardId, ...originalData },\r\n          error: null\r\n        })\r\n      })\r\n\r\n      // 获取待同步操作并标记为完成\r\n      const pendingOperations = await localService.getPendingSyncOperations()\r\n      const operation = pendingOperations[0]\r\n\r\n      if (operation) {\r\n        await localService.updateOperationStatuses([{\r\n          operationId: operation.id!,\r\n          success: true\r\n        }])\r\n      }\r\n\r\n      // 验证本地数据状态\r\n      const localCard = await localService.getCard(cardId)\r\n      expect(localCard).toBeDefined()\r\n      expect(localCard!.frontContent.title).toBe('Consistency Test Card')\r\n\r\n      // 验证同步状态\r\n      const updatedOperations = await mockDb.table('syncQueue').toArray()\r\n      const completedOp = updatedOperations.find(op => op.id === operation!.id)\r\n      expect(completedOp!.status).toBe('completed')\r\n    })\r\n\r\n    test('应该处理同步冲突的数据合并', async () => {\r\n      // 创建本地数据\r\n      const originalData = mockFactories.createMockCard({\r\n        frontContent: {\r\n          title: 'Conflict Test Card',\r\n          text: 'Original content'\r\n        }\r\n      })\r\n\r\n      const localResult = await localService.createCard(originalData)\r\n      const cardId = localResult.id!\r\n\r\n      // 模拟本地修改\r\n      await localService.updateCard(cardId, {\r\n        frontContent: {\r\n          title: 'Locally Modified Title',\r\n          text: 'Locally modified content'\r\n        }\r\n      })\r\n\r\n      // 模拟云端有不同的修改\r\n      mockSupabase.from.mockReturnValue({\r\n        update: jest.fn().mockReturnValue({\r\n          data: { \r\n            id: cardId,\r\n            frontContent: {\r\n              title: 'Cloud Modified Title',\r\n              text: 'Cloud modified content'\r\n            }\r\n          },\r\n          error: null\r\n        })\r\n      })\r\n\r\n      // 获取待同步操作\r\n      const pendingOperations = await localService.getPendingSyncOperations()\r\n      const updateOperation = pendingOperations.find(op => \r\n        op.type === 'update' && op.entityId === cardId\r\n      )\r\n\r\n      // 模拟冲突检测和合并\r\n      if (updateOperation) {\r\n        // 在实际实现中，这里会有冲突解决逻辑\r\n        await localService.updateOperationStatuses([{\r\n          operationId: updateOperation.id!,\r\n          success: true\r\n        }])\r\n      }\r\n\r\n      // 验证数据一致性\r\n      const finalCard = await localService.getCard(cardId)\r\n      expect(finalCard).toBeDefined()\r\n    })\r\n\r\n    test('应该保证事务的原子性', async () => {\r\n      // 模拟复杂的事务操作\r\n      await performanceTester.measure('atomic_transaction', async () => {\r\n        try {\r\n          await mockDb.transaction('rw', ['cards', 'syncQueue'], async () => {\r\n            // 创建多个相关记录\r\n            const card1 = mockFactories.createMockCard({\r\n              frontContent: { title: 'Transaction Card 1' }\r\n            })\r\n            const card2 = mockFactories.createMockCard({\r\n              frontContent: { title: 'Transaction Card 2' }\r\n            })\r\n\r\n            const cardId1 = await mockDb.table('cards').add(card1)\r\n            const cardId2 = await mockDb.table('cards').add(card2)\r\n\r\n            // 创建同步操作\r\n            await mockDb.table('syncQueue').add({\r\n              ...mockFactories.createMockSyncOperation(),\r\n              entityId: cardId1\r\n            })\r\n\r\n            await mockDb.table('syncQueue').add({\r\n              ...mockFactories.createMockSyncOperation(),\r\n              entityId: cardId2\r\n            })\r\n\r\n            // 模拟在事务中途失败\r\n            if (Math.random() > 0.5) {\r\n              throw new Error('Simulated transaction failure')\r\n            }\r\n\r\n            return { cardId1, cardId2 }\r\n          })\r\n        } catch (error) {\r\n          // 事务失败，所有操作应该回滚\r\n          const cardsCount = await mockDb.table('cards').count()\r\n          const syncCount = await mockDb.table('syncQueue').count()\r\n          \r\n          // 验证数据一致性\r\n          expect(cardsCount).toBe(0)\r\n          expect(syncCount).toBe(0)\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 缓存一致性测试\r\n  // ============================================================================\r\n\r\n  describe('缓存一致性', () => {\r\n    test('应该在同步完成后更新缓存', async () => {\r\n      // 创建卡片\r\n      const cardData = mockFactories.createMockCard({\r\n        frontContent: { title: 'Cache Test Card' }\r\n      })\r\n\r\n      const createResult = await localService.createCard(cardData)\r\n      const cardId = createResult.id!\r\n\r\n      // 验证缓存中存在数据\r\n      const cachedCard = await localService.getCard(cardId)\r\n      expect(cachedCard).toBeDefined()\r\n      expect(cachedCard!.frontContent.title).toBe('Cache Test Card')\r\n\r\n      // 更新卡片\r\n      await localService.updateCard(cardId, {\r\n        frontContent: {\r\n          title: 'Updated Cache Card',\r\n          text: 'Updated content'\r\n        }\r\n      })\r\n\r\n      // 模拟同步完成\r\n      const pendingOperations = await localService.getPendingSyncOperations()\r\n      const updateOperation = pendingOperations.find(op => \r\n        op.type === 'update' && op.entityId === cardId\r\n      )\r\n\r\n      if (updateOperation) {\r\n        await localService.updateOperationStatuses([{\r\n          operationId: updateOperation.id!,\r\n          success: true\r\n        }])\r\n      }\r\n\r\n      // 验证缓存已更新\r\n      const updatedCachedCard = await localService.getCard(cardId)\r\n      expect(updatedCachedCard!.frontContent.title).toBe('Updated Cache Card')\r\n    })\r\n\r\n    test('应该在同步失败时保持缓存一致性', async () => {\r\n      // 创建卡片\r\n      const cardData = mockFactories.createMockCard({\r\n        frontContent: { title: 'Cache Consistency Card' }\r\n      })\r\n\r\n      const createResult = await localService.createCard(cardData)\r\n      const cardId = createResult.id!\r\n\r\n      // 删除卡片（应该立即反映在缓存中）\r\n      const deleteResult = await localService.deleteCard(cardId)\r\n\r\n      expect(deleteResult.success).toBe(true)\r\n\r\n      // 验证缓存已失效\r\n      const deletedCard = await localService.getCard(cardId)\r\n      expect(deletedCard).toBeNull()\r\n\r\n      // 模拟同步失败\r\n      const pendingOperations = await localService.getPendingSyncOperations()\r\n      const deleteOperation = pendingOperations.find(op => \r\n        op.type === 'delete' && op.entityId === cardId\r\n      )\r\n\r\n      if (deleteOperation) {\r\n        await localService.updateOperationStatuses([{\r\n          operationId: deleteOperation.id!,\r\n          success: false,\r\n          error: 'Sync failed'\r\n        }])\r\n      }\r\n\r\n      // 即使同步失败，缓存应该保持一致（卡片仍然不存在）\r\n      const stillDeletedCard = await localService.getCard(cardId)\r\n      expect(stillDeletedCard).toBeNull()\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 性能测试\r\n  // ============================================================================\r\n\r\n  describe('同步性能', () => {\r\n    test('应该高效处理大量同步操作', async () => {\r\n      // 创建大量待同步数据\r\n      const batchSize = 50\r\n      const cards = Array.from({ length: batchSize }, (_, i) =>\r\n        mockFactories.createMockCard({\r\n          frontContent: { title: `Sync Performance Card ${i + 1}` }\r\n        })\r\n      )\r\n\r\n      await performanceTester.measure('bulk_sync_creation', () =>\r\n        localService.bulkCreateCards(cards)\r\n      )\r\n\r\n      // 验证所有操作都创建了同步任务\r\n      const pendingOperations = await localService.getPendingSyncOperations()\r\n      expect(pendingOperations.length).toBeGreaterThanOrEqual(batchSize)\r\n\r\n      // 模拟批量同步处理\r\n      const syncResults = await performanceTester.measure('bulk_sync_processing', async () => {\r\n        const results = []\r\n        for (const operation of pendingOperations.slice(0, 10)) { // 处理前10个\r\n          await localService.updateOperationStatuses([{\r\n            operationId: operation.id!,\r\n            success: true\r\n          }])\r\n          results.push(operation.id!)\r\n        }\r\n        return results\r\n      })\r\n\r\n      expect(syncResults.length).toBe(10)\r\n\r\n      // 验证性能指标\r\n      const creationStats = performanceTester.getStats('bulk_sync_creation')\r\n      const processingStats = performanceTester.getStats('bulk_sync_processing')\r\n\r\n      expect(creationStats!.avg).toBeLessThan(500) // 500ms内创建50条记录\r\n      expect(processingStats!.avg).toBeLessThan(100) // 100ms内处理10条同步\r\n    })\r\n\r\n    test('应该在网络波动下保持性能', async () => {\r\n      // 模拟网络波动环境\r\n      const simulateNetworkFluctuation = async () => {\r\n        const delay = Math.random() * 200 + 50 // 50-250ms 随机延迟\r\n        await new Promise(resolve => setTimeout(resolve, delay))\r\n        \r\n        // 10% 概率模拟网络错误\r\n        if (Math.random() < 0.1) {\r\n          throw new Error('Network fluctuation')\r\n        }\r\n      }\r\n\r\n      // 创建测试数据\r\n      const cards = Array.from({ length: 20 }, (_, i) =>\r\n        mockFactories.createMockCard({\r\n          frontContent: { title: `Network Test Card ${i + 1}` }\r\n        })\r\n      )\r\n\r\n      const results = []\r\n      for (const card of cards) {\r\n        try {\r\n          const result = await performanceTester.measure('network_sync_operation', async () => {\r\n            await simulateNetworkFluctuation()\r\n            return localService.createCard(card)\r\n          })\r\n          results.push({ success: true, result })\r\n        } catch (error) {\r\n          results.push({ success: false, error })\r\n        }\r\n      }\r\n\r\n      // 验证在网络波动下的成功率\r\n      const successRate = results.filter(r => r.success).length / results.length\r\n      expect(successRate).toBeGreaterThan(0.8) // 80%以上成功率\r\n\r\n      const stats = performanceTester.getStats('network_sync_operation')\r\n      console.log(`网络波动环境下同步性能: ${stats!.avg.toFixed(2)}ms 平均响应时间`)\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 错误恢复测试\r\n  // ============================================================================\r\n\r\n  describe('错误恢复', () => {\r\n    test('应该从网络中断中恢复', async () => {\r\n      // 创建一些数据\r\n      const cardData = mockFactories.createMockCard()\r\n      await localService.createCard(cardData)\r\n\r\n      // 模拟网络中断\r\n      let networkAvailable = false\r\n\r\n      // 模拟重试机制\r\n      const retrySync = async () => {\r\n        for (let attempt = 1; attempt <= 5; attempt++) {\r\n          if (!networkAvailable) {\r\n            await new Promise(resolve => setTimeout(resolve, 1000)) // 等待1秒\r\n            continue\r\n          }\r\n\r\n          // 网络恢复，尝试同步\r\n          try {\r\n            const pendingOperations = await localService.getPendingSyncOperations()\r\n            if (pendingOperations.length > 0) {\r\n              await localService.updateOperationStatuses([{\r\n                operationId: pendingOperations[0].id!,\r\n                success: true\r\n              }])\r\n            }\r\n            return true\r\n          } catch (error) {\r\n            continue\r\n          }\r\n        }\r\n        return false\r\n      }\r\n\r\n      // 模拟网络恢复\r\n      setTimeout(() => {\r\n        networkAvailable = true\r\n      }, 2000)\r\n\r\n      // 尝试恢复同步\r\n      const recoveryResult = await retrySync()\r\n      expect(recoveryResult).toBe(true)\r\n    })\r\n\r\n    test('应该处理部分同步失败', async () => {\r\n      // 创建多个同步操作\r\n      const cards = Array.from({ length: 5 }, () => mockFactories.createMockCard())\r\n      await localService.bulkCreateCards(cards)\r\n\r\n      const pendingOperations = await localService.getPendingSyncOperations()\r\n\r\n      // 模拟部分成功、部分失败\r\n      const syncResults = []\r\n      for (let i = 0; i < pendingOperations.length; i++) {\r\n        const operation = pendingOperations[i]\r\n        const success = i % 2 === 0 // 偶数索引成功，奇数失败\r\n\r\n        await localService.updateOperationStatuses([{\r\n          operationId: operation.id!,\r\n          success,\r\n          error: success ? undefined : `Failed for operation ${i}`\r\n        }])\r\n\r\n        syncResults.push({ operationId: operation.id, success })\r\n      }\r\n\r\n      // 验证部分成功状态\r\n      const finalOperations = await mockDb.table('syncQueue').toArray()\r\n      const successfulOps = finalOperations.filter(op => op.status === 'completed')\r\n      const failedOps = finalOperations.filter(op => op.status === 'failed')\r\n\r\n      expect(successfulOps.length).toBe(Math.ceil(pendingOperations.length / 2))\r\n      expect(failedOps.length).toBe(Math.floor(pendingOperations.length / 2))\r\n    })\r\n\r\n    test('应该支持手动重试失败的操作', async () => {\r\n      // 创建数据并模拟同步失败\r\n      const cardData = mockFactories.createMockCard()\r\n      await localService.createCard(cardData)\r\n\r\n      const pendingOperations = await localService.getPendingSyncOperations()\r\n      const operation = pendingOperations[0]\r\n\r\n      // 标记为失败\r\n      await localService.updateOperationStatuses([{\r\n        operationId: operation.id!,\r\n        success: false,\r\n        error: 'Initial sync failed'\r\n      }])\r\n\r\n      // 手动重试\r\n      const retryResult = await performanceTester.measure('manual_retry', async () => {\r\n        await localService.updateOperationStatuses([{\r\n          operationId: operation.id!,\r\n          success: true\r\n        }])\r\n        return true\r\n      })\r\n\r\n      expect(retryResult).toBe(true)\r\n\r\n      // 验证重试成功\r\n      const finalOperations = await mockDb.table('syncQueue').toArray()\r\n      const retriedOp = finalOperations.find(op => op.id === operation.id)\r\n      expect(retriedOp!.status).toBe('completed')\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 集成测试总结\r\n  // ============================================================================\r\n\r\n  describe('集成测试总结', () => {\r\n    test('应该提供完整的同步性能指标', async () => {\r\n      // 执行完整的同步流程\r\n      await performanceTester.measure('full_sync_workflow', async () => {\r\n        // 1. 创建本地数据\r\n        const cardData = mockFactories.createMockCard()\r\n        const createResult = await localService.createCard(cardData)\r\n\r\n        // 2. 修改数据\r\n        await localService.updateCard(createResult.id!, {\r\n          frontContent: { title: 'Updated in Workflow' }\r\n        })\r\n\r\n        // 3. 模拟同步处理\r\n        const pendingOperations = await localService.getPendingSyncOperations()\r\n        for (const operation of pendingOperations) {\r\n          await localService.updateOperationStatuses([{\r\n            operationId: operation.id!,\r\n            success: true\r\n          }])\r\n        }\r\n\r\n        // 4. 验证最终状态\r\n        const finalCard = await localService.getCard(createResult.id!)\r\n        return finalCard\r\n      })\r\n\r\n      // 获取性能指标\r\n      const metrics = await localService.getPerformanceMetrics()\r\n      const cacheMetrics = cacheService.getMetrics()\r\n\r\n      console.log('同步集成测试性能指标:', {\r\n        totalOperations: metrics.totalOperations,\r\n        averageResponseTime: metrics.averageResponseTime,\r\n        successRate: metrics.successRate,\r\n        cacheHitRate: metrics.cacheHitRate,\r\n        queueSize: metrics.queueSize\r\n      })\r\n\r\n      // 验证性能指标\r\n      expect(metrics.totalOperations).toBeGreaterThan(0)\r\n      expect(metrics.successRate).toBe(1.0) // 所有操作都成功\r\n      expect(metrics.averageResponseTime).toBeLessThan(100)\r\n      expect(cacheMetrics.hitRate).toBeGreaterThanOrEqual(0)\r\n    })\r\n\r\n    test('应该生成完整的测试报告', () => {\r\n      const allStats = performanceTester.getAllStats()\r\n      \r\n      expect(allStats).toBeDefined()\r\n      expect(Object.keys(allStats).length).toBeGreaterThan(0)\r\n\r\n      console.log('同步集成测试性能报告:', allStats)\r\n\r\n      // 验证报告包含所有关键指标\r\n      Object.values(allStats).forEach(stat => {\r\n        expect(stat).toHaveProperty('count')\r\n        expect(stat).toHaveProperty('avg')\r\n        expect(stat).toHaveProperty('min')\r\n        expect(stat).toHaveProperty('max')\r\n      })\r\n    })\r\n  })\r\n})"],"version":3}
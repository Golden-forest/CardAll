{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\tests\\unit\\services\\network-monitor.test.ts","mappings":";;AAAA,gEAA4H;AAE5H,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACrC,IAAI,OAA8B,CAAA;IAElC,UAAU,CAAC,GAAG,EAAE;QACd,IAAI,CAAC,aAAa,EAAE,CAAA;QACpB,OAAO,GAAG,IAAI,uCAAqB,EAAE,CAAA;QAErC,aAAa;QACb,MAAM,CAAC,cAAc,CAAC,SAAS,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAA;QAC3E,MAAM,CAAC,cAAc,CAAC,SAAS,EAAE,YAAY,EAAE;YAC7C,KAAK,EAAE;gBACL,aAAa,EAAE,IAAI;gBACnB,QAAQ,EAAE,EAAE;gBACZ,GAAG,EAAE,GAAG;gBACR,QAAQ,EAAE,KAAK;gBACf,gBAAgB,EAAE,IAAI,CAAC,EAAE,EAAE;gBAC3B,mBAAmB,EAAE,IAAI,CAAC,EAAE,EAAE;aAC/B;YACD,QAAQ,EAAE,IAAI;SACf,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,OAAO,EAAE,CAAC;YACZ,OAAO,CAAC,cAAc,EAAE,CAAA;QAC1B,CAAC;IACH,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,KAAK,EAAE,GAAG,EAAE;QACnB,EAAE,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;YACzB,MAAM,OAAO,CAAC,UAAU,EAAE,CAAA;YAC1B,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAA;YAE7B,MAAM,YAAY,GAAG,OAAO,CAAC,eAAe,EAAE,CAAA;YAC9C,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACxC,MAAM,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAChD,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,sBAAsB,EAAE,KAAK,IAAI,EAAE;YACpC,oBAAoB;YACpB,OAAQ,SAAiB,CAAC,UAAU,CAAA;YAEpC,MAAM,OAAO,CAAC,UAAU,EAAE,CAAA;YAE1B,MAAM,YAAY,GAAG,OAAO,CAAC,eAAe,EAAE,CAAA;YAC9C,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACxC,MAAM,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;QACrD,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM,YAAY,GAAG,IAAI,CAAC,EAAE,EAAE,CAAA;YAC9B,OAAO,CAAC,eAAe,CAAC,YAAY,CAAC,CAAA;YAErC,MAAM,OAAO,CAAC,UAAU,EAAE,CAAA;YAE1B,SAAS;YACT,MAAM,CAAC,cAAc,CAAC,SAAS,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAA;YAC5D,MAAM,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC,CAAA;YAE1C,MAAM,CAAC,YAAY,CAAC,CAAC,oBAAoB,CACvC,MAAM,CAAC,gBAAgB,CAAC;gBACtB,IAAI,EAAE,eAAe;gBACrB,QAAQ,EAAE,KAAK;aAChB,CAAC,CACH,CAAA;YAED,MAAM,YAAY,GAAG,OAAO,CAAC,eAAe,EAAE,CAAA;YAC9C,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAC3C,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM,YAAY,GAAG,IAAI,CAAC,EAAE,EAAE,CAAA;YAC9B,OAAO,CAAC,eAAe,CAAC,YAAY,CAAC,CAAA;YAErC,MAAM,OAAO,CAAC,UAAU,EAAE,CAAA;YAE1B,WAAW;YACX,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAA;YAC3C,MAAM,WAAW,GAAG,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAA;YAEvC,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,UAAU,EAAE,eAAe,EAAE;gBAC3D,KAAK,EAAE,IAAI;gBACX,QAAQ,EAAE,IAAI;aACf,CAAC,CAAA;YAEF,cAAc,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAA;YAE7D,MAAM,CAAC,YAAY,CAAC,CAAC,oBAAoB,CACvC,MAAM,CAAC,gBAAgB,CAAC;gBACtB,IAAI,EAAE,mBAAmB;gBACzB,cAAc,EAAE,IAAI;aACrB,CAAC,CACH,CAAA;QACH,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC1B,IAAI,CAAC,aAAa,EAAE,CAAA;YAEpB,MAAM,OAAO,CAAC,UAAU,EAAE,CAAA;YAC1B,OAAO,CAAC,eAAe,EAAE,CAAA;YAEzB,SAAS;YACT,MAAM,YAAY,GAAG,IAAI,CAAC,EAAE,EAAE,CAAA;YAC9B,OAAO,CAAC,eAAe,CAAC,YAAY,CAAC,CAAA;YAErC,YAAY;YACZ,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAA,CAAC,iBAAiB;YAEjD,MAAM,CAAC,YAAY,CAAC,CAAC,oBAAoB,CACvC,MAAM,CAAC,gBAAgB,CAAC;gBACtB,IAAI,EAAE,gBAAgB;aACvB,CAAC,CACH,CAAA;YAED,IAAI,CAAC,aAAa,EAAE,CAAA;QACtB,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,cAAc,EAAE,KAAK,IAAI,EAAE;YAC5B,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,UAAU,EAAE,eAAe,EAAE;gBAC3D,KAAK,EAAE,IAAI;gBACX,QAAQ,EAAE,IAAI;aACf,CAAC,CAAA;YACF,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,UAAU,EAAE,UAAU,EAAE;gBACtD,KAAK,EAAE,EAAE;gBACT,QAAQ,EAAE,IAAI;aACf,CAAC,CAAA;YACF,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,UAAU,EAAE,KAAK,EAAE;gBACjD,KAAK,EAAE,EAAE;gBACT,QAAQ,EAAE,IAAI;aACf,CAAC,CAAA;YAEF,MAAM,OAAO,CAAC,UAAU,EAAE,CAAA;YAE1B,MAAM,OAAO,GAAG,OAAO,CAAC,iBAAiB,EAAE,CAAA;YAC3C,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;YACvC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,eAAe,CAAC,EAAE,CAAC,CAAA;QAC3C,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,cAAc,EAAE,KAAK,IAAI,EAAE;YAC5B,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,UAAU,EAAE,eAAe,EAAE;gBAC3D,KAAK,EAAE,IAAI;gBACX,QAAQ,EAAE,IAAI;aACf,CAAC,CAAA;YACF,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,UAAU,EAAE,UAAU,EAAE;gBACtD,KAAK,EAAE,GAAG;gBACV,QAAQ,EAAE,IAAI;aACf,CAAC,CAAA;YACF,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,UAAU,EAAE,KAAK,EAAE;gBACjD,KAAK,EAAE,GAAG;gBACV,QAAQ,EAAE,IAAI;aACf,CAAC,CAAA;YAEF,MAAM,OAAO,CAAC,UAAU,EAAE,CAAA;YAE1B,MAAM,OAAO,GAAG,OAAO,CAAC,iBAAiB,EAAE,CAAA;YAC3C,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;YAClC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAA;QACxC,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;YAC3B,iBAAiB;YACjB,MAAM,OAAO,CAAC,UAAU,EAAE,CAAA;YAE1B,aAAa;YACb,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CACrB;YAAC,OAAe,CAAC,iBAAiB,CAAC,IAAI,CACtC,EAAE,SAAS,EAAE,GAAG,GAAG,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,EAAE,EAAE,EACtD,EAAE,SAAS,EAAE,GAAG,GAAG,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC,EAAE,EACrD,EAAE,SAAS,EAAE,GAAG,GAAG,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE,EACxD,EAAE,SAAS,EAAE,GAAG,GAAG,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC,EAAE,EACrD,EAAE,SAAS,EAAE,GAAG,GAAG,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC,EAAE,CACtD,CAAA;YAED,MAAM,OAAO,GAAG,OAAO,CAAC,iBAAiB,EAAE,CAAA;YAC3C,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAA,CAAC,SAAS;QACvD,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;QACpB,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;YAC3B,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;gBACzC,EAAE,EAAE,IAAI;gBACR,MAAM,EAAE,GAAG;gBACX,OAAO,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC,CAAC;gBACxD,IAAI,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;aACvC,CAAC,CAAA;YAET,MAAM,MAAM,GAAG,MAAO,OAAe,CAAC,cAAc,CAAC,gCAAgC,CAAC,CAAA;YAEtF,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACjC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YACzC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;QAC7C,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC,CAAA;YAEtE,MAAM,MAAM,GAAG,MAAO,OAAe,CAAC,cAAc,CAAC,gCAAgC,CAAC,CAAA;YAEtF,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YAClC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;QAC5C,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YACxB,MAAM,QAAQ,GAAG,IAAI,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA,CAAC,SAAS;YAC3D,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;gBACzC,EAAE,EAAE,IAAI;gBACR,MAAM,EAAE,GAAG;gBACX,OAAO,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC,gBAAgB,EAAE,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;gBAClE,IAAI,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC;aAC/B,CAAC,CAAA;YAET,MAAM,MAAM,GAAG,MAAO,OAAe,CAAC,gBAAgB,CAAC,8BAA8B,CAAC,CAAA;YAEtF,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YAC3C,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;QAC/C,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,gBAAgB,EAAE,KAAK,IAAI,EAAE;YAC9B,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,UAAU,EAAE,eAAe,EAAE;gBAC3D,KAAK,EAAE,IAAI;gBACX,QAAQ,EAAE,IAAI;aACf,CAAC,CAAA;YACF,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,UAAU,EAAE,UAAU,EAAE;gBACtD,KAAK,EAAE,EAAE;gBACT,QAAQ,EAAE,IAAI;aACf,CAAC,CAAA;YAEF,MAAM,OAAO,CAAC,UAAU,EAAE,CAAA;YAE1B,MAAM,eAAe,GAAG,OAAO,CAAC,sBAAsB,EAAE,CAAA;YAExD,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,eAAe,CAAC,EAAE,CAAC,CAAA;YACrD,MAAM,CAAC,eAAe,CAAC,uBAAuB,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YAClE,MAAM,CAAC,eAAe,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACvD,MAAM,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QACvD,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,eAAe,EAAE,KAAK,IAAI,EAAE;YAC7B,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,UAAU,EAAE,eAAe,EAAE;gBAC3D,KAAK,EAAE,IAAI;gBACX,QAAQ,EAAE,IAAI;aACf,CAAC,CAAA;YACF,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,UAAU,EAAE,UAAU,EAAE;gBACtD,KAAK,EAAE,GAAG;gBACV,QAAQ,EAAE,IAAI;aACf,CAAC,CAAA;YACF,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,UAAU,EAAE,UAAU,EAAE;gBACtD,KAAK,EAAE,IAAI;gBACX,QAAQ,EAAE,IAAI;aACf,CAAC,CAAA;YAEF,MAAM,OAAO,CAAC,UAAU,EAAE,CAAA;YAE1B,MAAM,eAAe,GAAG,OAAO,CAAC,sBAAsB,EAAE,CAAA;YAExD,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAA;YAClD,MAAM,CAAC,eAAe,CAAC,uBAAuB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACvD,MAAM,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACpD,MAAM,CAAC,eAAe,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAC1D,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;YAC3B,MAAM,CAAC,cAAc,CAAC,SAAS,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAA;YAE5E,MAAM,OAAO,CAAC,UAAU,EAAE,CAAA;YAE1B,MAAM,eAAe,GAAG,OAAO,CAAC,sBAAsB,EAAE,CAAA;YAExD,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACzC,MAAM,CAAC,eAAe,CAAC,uBAAuB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACvD,MAAM,CAAC,eAAe,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAC1D,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM,OAAO,CAAC,UAAU,EAAE,CAAA;YAC1B,OAAO,CAAC,eAAe,EAAE,CAAA;YAEzB,WAAW;YACX,MAAM,CAAC,cAAc,CAAC,SAAS,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAA;YAC5D,MAAM,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC,CAAA;YAE1C,MAAM,CAAC,cAAc,CAAC,SAAS,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAA;YAC3D,MAAM,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAA;YAEzC,MAAM,OAAO,GAAG,OAAO,CAAC,iBAAiB,EAAE,CAAA;YAC3C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YACzC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACzD,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC1B,MAAM,OAAO,CAAC,UAAU,EAAE,CAAA;YAE1B,WAAW;YACX,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CACrB;YAAC,OAAe,CAAC,iBAAiB,CAAC,IAAI,CACtC,EAAE,SAAS,EAAE,GAAG,GAAG,KAAK,EAAE,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,EAAE,EAAE,EACvD,EAAE,SAAS,EAAE,GAAG,GAAG,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC,EAAE,EACrD,EAAE,SAAS,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC,EAAE,CAC/C,CAAA;YAED,MAAM,KAAK,GAAG,OAAO,CAAC,eAAe,EAAE,CAAA;YAEvC,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YAC/C,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YACjD,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QAC1C,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;QACpB,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;YAC3B,MAAM,OAAO,CAAC,UAAU,EAAE,CAAA;YAE1B,OAAO,CAAC,eAAe,EAAE,CAAA;YACzB,MAAM,CAAE,OAAe,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YAEhD,OAAO,CAAC,cAAc,EAAE,CAAA;YACxB,MAAM,CAAE,OAAe,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QACnD,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,cAAc,EAAE,KAAK,IAAI,EAAE;YAC5B,MAAM,OAAO,CAAC,UAAU,EAAE,CAAA;YAC1B,OAAO,CAAC,eAAe,EAAE,CAAA;YAEzB,MAAM,sBAAsB,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,qBAAqB,CAAC,CAAA;YAExE,OAAO,CAAC,cAAc,EAAE,CAAA;YAExB,MAAM,CAAC,sBAAsB,CAAC,CAAC,oBAAoB,CAAC,QAAQ,EAAE,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAA;YACnF,MAAM,CAAC,sBAAsB,CAAC,CAAC,oBAAoB,CAAC,SAAS,EAAE,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAA;QACtF,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;QACpB,EAAE,CAAC,gBAAgB,EAAE,GAAG,EAAE;YACxB,MAAM,YAAY,GAAG,IAAI,CAAC,EAAE,EAAE,CAAA;YAC9B,MAAM,WAAW,GAAG,OAAO,CAAC,eAAe,CAAC,YAAY,CAAC,CAAA;YAEzD,MAAM,CAAC,OAAO,WAAW,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;YAE3C,OAAO;YACP,OAAO,CAAC,iBAAiB,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAA;YAC5D,MAAM,CAAC,YAAY,CAAC,CAAC,gBAAgB,EAAE,CAAA;YAEvC,QAAQ;YACR,WAAW,EAAE,CAAA;YACb,OAAO,CAAC,iBAAiB,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAA;YAC5D,MAAM,CAAC,YAAY,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAA;QAC/C,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,aAAa,EAAE,GAAG,EAAE;YACrB,MAAM,aAAa,GAAG,IAAI,CAAC,EAAE,EAAE,CAAA;YAC/B,MAAM,aAAa,GAAG,IAAI,CAAC,EAAE,EAAE,CAAA;YAE/B,OAAO,CAAC,eAAe,CAAC,aAAa,CAAC,CAAA;YACtC,OAAO,CAAC,eAAe,CAAC,aAAa,CAAC,CAAA;YAEtC,MAAM,KAAK,GAAiB;gBAC1B,IAAI,EAAE,eAAe;gBACrB,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,MAAM;gBACtB,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,OAAO,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE;aACtD,CAAA;YAED,OAAO,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC,CAAA;YAEjC,MAAM,CAAC,aAAa,CAAC,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAA;YACjD,MAAM,CAAC,aAAa,CAAC,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAA;QACnD,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;QACpB,EAAE,CAAC,cAAc,EAAE,KAAK,IAAI,EAAE;YAC5B,gBAAgB;YAChB,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBAC/C,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAA;YACvC,CAAC,CAAC,CAAA;YAEF,MAAM,MAAM,GAAG,MAAO,OAAe,CAAC,cAAc,CAAC,gCAAgC,CAAC,CAAA;YAEtF,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YAClC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAA;QACjD,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;YAC3B,YAAY;YACZ,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,UAAU,EAAE,eAAe,EAAE;gBAC3D,KAAK,EAAE,cAAc;gBACrB,QAAQ,EAAE,IAAI;aACf,CAAC,CAAA;YAEF,MAAM,OAAO,CAAC,UAAU,EAAE,CAAA;YAE1B,MAAM,OAAO,GAAG,OAAO,CAAC,iBAAiB,EAAE,CAAA;YAC3C,eAAe;YACf,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAA;YACnC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAA;QACjD,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;QACpB,EAAE,CAAC,YAAY,EAAE,GAAG,EAAE;YACpB,MAAM,SAAS,GAAG;gBAChB,aAAa,EAAE,KAAK;gBACpB,SAAS,EAAE,CAAC,oCAAoC,CAAC;gBACjD,WAAW,EAAE,KAAK;gBAClB,WAAW,EAAE,GAAG;gBAChB,qBAAqB,EAAE,IAAI;gBAC3B,uBAAuB,EAAE,IAAI;gBAC7B,uBAAuB,EAAE,IAAI;aAC9B,CAAA;YAED,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,CAAA;YAE/B,UAAU;YACV,MAAM,CAAE,OAAe,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC,SAAS,CAAC,CAAA;QAC1D,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,UAAU,EAAE,GAAG,EAAE;YAClB,MAAM,aAAa,GAAG;gBACpB,aAAa,EAAE,CAAC,IAAI;gBACpB,WAAW,EAAE,CAAC;aACf,CAAA;YAED,MAAM,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,aAAoB,CAAC,CAAC,CAAC,OAAO,EAAE,CAAA;QACpE,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\tests\\unit\\services\\network-monitor.test.ts"],"sourcesContent":["import { NetworkMonitorService, type NetworkInfo, type NetworkQuality, type NetworkEvent } from '@/services/network-monitor'\n\ndescribe('NetworkMonitorService', () => {\n  let service: NetworkMonitorService\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n    service = new NetworkMonitorService()\n    \n    // 模拟网络相关 API\n    Object.defineProperty(navigator, 'onLine', { value: true, writable: true })\n    Object.defineProperty(navigator, 'connection', {\n      value: {\n        effectiveType: '4g',\n        downlink: 10,\n        rtt: 100,\n        saveData: false,\n        addEventListener: jest.fn(),\n        removeEventListener: jest.fn(),\n      },\n      writable: true,\n    })\n  })\n\n  afterEach(() => {\n    if (service) {\n      service.stopMonitoring()\n    }\n  })\n\n  describe('初始化', () => {\n    it('应该正确初始化服务', async () => {\n      await service.initialize()\n      expect(service).toBeDefined()\n      \n      const initialState = service.getCurrentState()\n      expect(initialState.isOnline).toBe(true)\n      expect(initialState.connectionType).toBe('4g')\n    })\n\n    it('应该处理没有网络连接信息 API 的情况', async () => {\n      // 移除 connection API\n      delete (navigator as any).connection\n      \n      await service.initialize()\n      \n      const initialState = service.getCurrentState()\n      expect(initialState.isOnline).toBe(true)\n      expect(initialState.connectionType).toBe('unknown')\n    })\n  })\n\n  describe('网络状态监测', () => {\n    it('应该检测在线状态变化', async () => {\n      const mockListener = jest.fn()\n      service.onNetworkChange(mockListener)\n      \n      await service.initialize()\n      \n      // 模拟离线事件\n      Object.defineProperty(navigator, 'onLine', { value: false })\n      window.dispatchEvent(new Event('offline'))\n      \n      expect(mockListener).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: 'status_change',\n          isOnline: false,\n        })\n      )\n      \n      const currentState = service.getCurrentState()\n      expect(currentState.isOnline).toBe(false)\n    })\n\n    it('应该检测连接类型变化', async () => {\n      const mockListener = jest.fn()\n      service.onNetworkChange(mockListener)\n      \n      await service.initialize()\n      \n      // 模拟连接类型变化\n      const mockConnection = navigator.connection\n      const changeEvent = new Event('change')\n      \n      Object.defineProperty(navigator.connection, 'effectiveType', { \n        value: '2g', \n        writable: true \n      })\n      \n      mockConnection.addEventListener.mock.calls[0][1](changeEvent)\n      \n      expect(mockListener).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: 'connection_change',\n          connectionType: '2g',\n        })\n      )\n    })\n\n    it('应该定期检测网络质量', async () => {\n      jest.useFakeTimers()\n      \n      await service.initialize()\n      service.startMonitoring()\n      \n      // 模拟质量检测\n      const mockListener = jest.fn()\n      service.onNetworkChange(mockListener)\n      \n      // 等待第一次质量检测\n      jest.advanceTimersByTime(31000) // 31秒，超过默认的30秒间隔\n      \n      expect(mockListener).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: 'quality_change',\n        })\n      )\n      \n      jest.useRealTimers()\n    })\n  })\n\n  describe('网络质量评估', () => {\n    it('应该正确评估高速网络质量', async () => {\n      Object.defineProperty(navigator.connection, 'effectiveType', { \n        value: '4g', \n        writable: true \n      })\n      Object.defineProperty(navigator.connection, 'downlink', { \n        value: 20, \n        writable: true \n      })\n      Object.defineProperty(navigator.connection, 'rtt', { \n        value: 50, \n        writable: true \n      })\n      \n      await service.initialize()\n      \n      const quality = service.getNetworkQuality()\n      expect(quality.level).toBe('excellent')\n      expect(quality.score).toBeGreaterThan(80)\n    })\n\n    it('应该正确评估低速网络质量', async () => {\n      Object.defineProperty(navigator.connection, 'effectiveType', { \n        value: '2g', \n        writable: true \n      })\n      Object.defineProperty(navigator.connection, 'downlink', { \n        value: 0.5, \n        writable: true \n      })\n      Object.defineProperty(navigator.connection, 'rtt', { \n        value: 800, \n        writable: true \n      })\n      \n      await service.initialize()\n      \n      const quality = service.getNetworkQuality()\n      expect(quality.level).toBe('poor')\n      expect(quality.score).toBeLessThan(40)\n    })\n\n    it('应该处理网络连接不稳定', async () => {\n      // 模拟网络连接历史中的不稳定性\n      await service.initialize()\n      \n      // 添加一些延迟变化记录\n      const now = Date.now()\n      ;(service as any).connectionHistory.push(\n        { timestamp: now - 5000, latency: 100, bandwidth: 10 },\n        { timestamp: now - 4000, latency: 500, bandwidth: 2 },\n        { timestamp: now - 3000, latency: 1000, bandwidth: 0.5 },\n        { timestamp: now - 2000, latency: 200, bandwidth: 8 },\n        { timestamp: now - 1000, latency: 800, bandwidth: 1 }\n      )\n      \n      const quality = service.getNetworkQuality()\n      expect(quality.stability).toBeLessThan(0.7) // 不稳定的网络\n    })\n  })\n\n  describe('连接测试', () => {\n    it('应该成功测试连接到端点', async () => {\n      global.fetch = jest.fn().mockResolvedValue({\n        ok: true,\n        status: 200,\n        headers: new Map([['content-type', 'application/json']]),\n        json: () => Promise.resolve({ status: 'ok' })\n      } as any)\n      \n      const result = await (service as any).testConnection('https://api.example.com/health')\n      \n      expect(result.success).toBe(true)\n      expect(result.latency).toBeGreaterThan(0)\n      expect(result.bandwidth).toBeGreaterThan(0)\n    })\n\n    it('应该处理连接测试失败', async () => {\n      global.fetch = jest.fn().mockRejectedValue(new Error('Network error'))\n      \n      const result = await (service as any).testConnection('https://api.example.com/health')\n      \n      expect(result.success).toBe(false)\n      expect(result.error).toBe('Network error')\n    })\n\n    it('应该测量下载带宽', async () => {\n      const mockData = new Array(1024 * 1024).join('x') // 1MB 数据\n      global.fetch = jest.fn().mockResolvedValue({\n        ok: true,\n        status: 200,\n        headers: new Map([['content-length', mockData.length.toString()]]),\n        text: () => Promise.resolve(mockData)\n      } as any)\n      \n      const result = await (service as any).measureBandwidth('https://api.example.com/test')\n      \n      expect(result.bandwidth).toBeGreaterThan(0)\n      expect(result.dataSize).toBe(mockData.length)\n    })\n  })\n\n  describe('网络状态推荐', () => {\n    it('应该为高速网络推荐大文件操作', async () => {\n      Object.defineProperty(navigator.connection, 'effectiveType', { \n        value: '4g', \n        writable: true \n      })\n      Object.defineProperty(navigator.connection, 'downlink', { \n        value: 20, \n        writable: true \n      })\n      \n      await service.initialize()\n      \n      const recommendations = service.getSyncRecommendations()\n      \n      expect(recommendations.batchSize).toBeGreaterThan(50)\n      expect(recommendations.maxConcurrentOperations).toBeGreaterThan(3)\n      expect(recommendations.enableBackgroundSync).toBe(true)\n      expect(recommendations.enableCompression).toBe(false)\n    })\n\n    it('应该为低速网络推荐保守设置', async () => {\n      Object.defineProperty(navigator.connection, 'effectiveType', { \n        value: '2g', \n        writable: true \n      })\n      Object.defineProperty(navigator.connection, 'downlink', { \n        value: 0.5, \n        writable: true \n      })\n      Object.defineProperty(navigator.connection, 'saveData', { \n        value: true, \n        writable: true \n      })\n      \n      await service.initialize()\n      \n      const recommendations = service.getSyncRecommendations()\n      \n      expect(recommendations.batchSize).toBeLessThan(10)\n      expect(recommendations.maxConcurrentOperations).toBe(1)\n      expect(recommendations.enableCompression).toBe(true)\n      expect(recommendations.enableBackgroundSync).toBe(false)\n    })\n\n    it('应该为离线状态提供推荐', async () => {\n      Object.defineProperty(navigator, 'onLine', { value: false, writable: true })\n      \n      await service.initialize()\n      \n      const recommendations = service.getSyncRecommendations()\n      \n      expect(recommendations.batchSize).toBe(0)\n      expect(recommendations.maxConcurrentOperations).toBe(0)\n      expect(recommendations.enableBackgroundSync).toBe(false)\n    })\n  })\n\n  describe('历史记录和统计', () => {\n    it('应该记录网络状态历史', async () => {\n      await service.initialize()\n      service.startMonitoring()\n      \n      // 模拟一些状态变化\n      Object.defineProperty(navigator, 'onLine', { value: false })\n      window.dispatchEvent(new Event('offline'))\n      \n      Object.defineProperty(navigator, 'onLine', { value: true })\n      window.dispatchEvent(new Event('online'))\n      \n      const history = service.getNetworkHistory()\n      expect(history.length).toBeGreaterThan(0)\n      expect(history[history.length - 1].isOnline).toBe(true)\n    })\n\n    it('应该提供网络统计信息', async () => {\n      await service.initialize()\n      \n      // 添加一些历史记录\n      const now = Date.now()\n      ;(service as any).connectionHistory.push(\n        { timestamp: now - 10000, latency: 100, bandwidth: 10 },\n        { timestamp: now - 5000, latency: 150, bandwidth: 8 },\n        { timestamp: now, latency: 120, bandwidth: 9 }\n      )\n      \n      const stats = service.getNetworkStats()\n      \n      expect(stats.averageLatency).toBeGreaterThan(0)\n      expect(stats.averageBandwidth).toBeGreaterThan(0)\n      expect(stats.uptimePercentage).toBe(100)\n    })\n  })\n\n  describe('监控控制', () => {\n    it('应该能够启动和停止监控', async () => {\n      await service.initialize()\n      \n      service.startMonitoring()\n      expect((service as any).isMonitoring).toBe(true)\n      \n      service.stopMonitoring()\n      expect((service as any).isMonitoring).toBe(false)\n    })\n\n    it('应该在停止监控时清理资源', async () => {\n      await service.initialize()\n      service.startMonitoring()\n      \n      const removeEventListenerSpy = jest.spyOn(window, 'removeEventListener')\n      \n      service.stopMonitoring()\n      \n      expect(removeEventListenerSpy).toHaveBeenCalledWith('online', expect.any(Function))\n      expect(removeEventListenerSpy).toHaveBeenCalledWith('offline', expect.any(Function))\n    })\n  })\n\n  describe('事件处理', () => {\n    it('应该能够添加和移除事件监听器', () => {\n      const mockListener = jest.fn()\n      const unsubscribe = service.onNetworkChange(mockListener)\n      \n      expect(typeof unsubscribe).toBe('function')\n      \n      // 触发事件\n      service['notifyListeners']({ type: 'test', isOnline: true })\n      expect(mockListener).toHaveBeenCalled()\n      \n      // 移除监听器\n      unsubscribe()\n      service['notifyListeners']({ type: 'test', isOnline: true })\n      expect(mockListener).toHaveBeenCalledTimes(1)\n    })\n\n    it('应该正确通知多个监听器', () => {\n      const mockListener1 = jest.fn()\n      const mockListener2 = jest.fn()\n      \n      service.onNetworkChange(mockListener1)\n      service.onNetworkChange(mockListener2)\n      \n      const event: NetworkEvent = {\n        type: 'status_change',\n        isOnline: false,\n        connectionType: 'none',\n        timestamp: new Date(),\n        quality: { level: 'offline', score: 0, stability: 0 }\n      }\n      \n      service['notifyListeners'](event)\n      \n      expect(mockListener1).toHaveBeenCalledWith(event)\n      expect(mockListener2).toHaveBeenCalledWith(event)\n    })\n  })\n\n  describe('错误处理', () => {\n    it('应该处理网络测试中的异常', async () => {\n      // 模拟 fetch 抛出异常\n      global.fetch = jest.fn().mockImplementation(() => {\n        throw new Error('Connection timeout')\n      })\n      \n      const result = await (service as any).testConnection('https://api.example.com/health')\n      \n      expect(result.success).toBe(false)\n      expect(result.error).toBe('Connection timeout')\n    })\n\n    it('应该处理无效的连接信息', async () => {\n      // 模拟无效的连接信息\n      Object.defineProperty(navigator.connection, 'effectiveType', { \n        value: 'invalid-type', \n        writable: true \n      })\n      \n      await service.initialize()\n      \n      const quality = service.getNetworkQuality()\n      // 应该使用默认值或合理估计\n      expect(quality.level).toBeDefined()\n      expect(quality.score).toBeGreaterThanOrEqual(0)\n    })\n  })\n\n  describe('配置管理', () => {\n    it('应该能够更新监控配置', () => {\n      const newConfig = {\n        checkInterval: 60000,\n        endpoints: ['https://custom-endpoint.com/health'],\n        testTimeout: 10000,\n        historySize: 100,\n        enableLatencyTracking: true,\n        enableBandwidthTracking: true,\n        enableStabilityTracking: true\n      }\n      \n      service.updateConfig(newConfig)\n      \n      // 验证配置已更新\n      expect((service as any).config).toMatchObject(newConfig)\n    })\n\n    it('应该验证配置参数', () => {\n      const invalidConfig = {\n        checkInterval: -1000,\n        testTimeout: 0\n      }\n      \n      expect(() => service.updateConfig(invalidConfig as any)).toThrow()\n    })\n  })\n})"],"version":3}
{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\contexts\\cardall-context.tsx","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,0CAyBC;AAED,gCAMC;AAGD,0CAEC;AAED,8CAEC;AAED,wCAEC;;AA/DD,+CAAmE;AACnE,iDAA4C;AAC5C,qDAAgD;AAChD,+CAA0C;AAQ1C,MAAM,cAAc,GAAG,IAAA,qBAAa,EAA4B,IAAI,CAAC,CAAA;AAMrE,SAAgB,eAAe,CAAC,EAAE,QAAQ,EAAwB;IAChE,MAAM,KAAK,GAAG,IAAA,oBAAQ,GAAE,CAAA;IACxB,MAAM,OAAO,GAAG,IAAA,wBAAU,GAAE,CAAA;IAC5B,MAAM,IAAI,GAAG,IAAA,kBAAO,GAAE,CAAA;IAEtB,2BAA2B;IAC3B,eAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,MAAM,WAAW,GAAa,EAAE,CAAA;QAChC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAC5B,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAA;QACvE,CAAC,CAAC,CAAA;QACF,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAA;IACrC,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAA;IAE5C,MAAM,KAAK,GAAuB;QAChC,KAAK;QACL,OAAO;QACP,IAAI;KACL,CAAA;IAED,OAAO,CACL,uBAAC,cAAc,CAAC,QAAQ,IAAC,KAAK,EAAE,KAAK,YAClC,QAAQ,GACe,CAC3B,CAAA;AACH,CAAC;AAED,SAAgB,UAAU;IACxB,MAAM,OAAO,GAAG,IAAA,kBAAU,EAAC,cAAc,CAAC,CAAA;IAC1C,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAA;IACrE,CAAC;IACD,OAAO,OAAO,CAAA;AAChB,CAAC;AAED,0CAA0C;AAC1C,SAAgB,eAAe;IAC7B,OAAO,UAAU,EAAE,CAAC,KAAK,CAAA;AAC3B,CAAC;AAED,SAAgB,iBAAiB;IAC/B,OAAO,UAAU,EAAE,CAAC,OAAO,CAAA;AAC7B,CAAC;AAED,SAAgB,cAAc;IAC5B,OAAO,UAAU,EAAE,CAAC,IAAI,CAAA;AAC1B,CAAC","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\contexts\\cardall-context.tsx"],"sourcesContent":["import React, { createContext, useContext, ReactNode } from 'react'\r\nimport { useCards } from '@/hooks/use-cards'\r\nimport { useFolders } from '@/hooks/use-folders'\r\nimport { useTags } from '@/hooks/use-tags'\r\n\r\ninterface CardAllContextType {\r\n  cards: ReturnType<typeof useCards>\r\n  folders: ReturnType<typeof useFolders>\r\n  tags: ReturnType<typeof useTags>\r\n}\r\n\r\nconst CardAllContext = createContext<CardAllContextType | null>(null)\r\n\r\ninterface CardAllProviderProps {\r\n  children: ReactNode\r\n}\r\n\r\nexport function CardAllProvider({ children }: CardAllProviderProps) {\r\n  const cards = useCards()\r\n  const folders = useFolders()\r\n  const tags = useTags()\r\n\r\n  // Sync tags with card data\r\n  React.useEffect(() => {\r\n    const allCardTags: string[] = []\r\n    cards.allCards.forEach(card => {\r\n      allCardTags.push(...card.frontContent.tags, ...card.backContent.tags)\r\n    })\r\n    tags.syncTagsWithCards(allCardTags)\r\n  }, [cards.allCards, tags.syncTagsWithCards])\r\n\r\n  const value: CardAllContextType = {\r\n    cards,\r\n    folders,\r\n    tags\r\n  }\r\n\r\n  return (\r\n    <CardAllContext.Provider value={value}>\r\n      {children}\r\n    </CardAllContext.Provider>\r\n  )\r\n}\r\n\r\nexport function useCardAll() {\r\n  const context = useContext(CardAllContext)\r\n  if (!context) {\r\n    throw new Error('useCardAll must be used within a CardAllProvider')\r\n  }\r\n  return context\r\n}\r\n\r\n// Individual hook exports for convenience\r\nexport function useCardAllCards() {\r\n  return useCardAll().cards\r\n}\r\n\r\nexport function useCardAllFolders() {\r\n  return useCardAll().folders\r\n}\r\n\r\nexport function useCardAllTags() {\r\n  return useCardAll().tags\r\n}"],"version":3}
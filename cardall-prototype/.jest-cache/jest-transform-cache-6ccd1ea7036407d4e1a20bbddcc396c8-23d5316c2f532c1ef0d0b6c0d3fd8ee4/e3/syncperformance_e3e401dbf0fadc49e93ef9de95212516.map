{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\sync-performance.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\sync-performance.ts"],"sourcesContent":["import { networkMonitorService, type NetworkInfo, getNetworkStrategy } from './network-monitor'\nimport { localOperationService, type LocalSyncOperation } from './local-operation'\nimport { syncStrategyService } from './sync-strategy'\n\n// ============================================================================\n// 同步性能优化系统\n// ============================================================================\n\n// 性能指标接口\nexport interface PerformanceMetrics {\n  // 吞吐量指标\n  operationsPerSecond: number\n  bytesPerSecond: number\n  \n  // 延迟指标\n  averageLatency: number\n  p95Latency: number\n  p99Latency: number\n  \n  // 成功率指标\n  successRate: number\n  errorRate: number\n  \n  // 队列指标\n  queueSize: number\n  averageQueueTime: number\n  maxQueueTime: number\n  \n  // 资源使用\n  memoryUsage: number\n  cpuUsage?: number\n  \n  // 网络指标\n  networkLatency: number\n  bandwidth: number\n  \n  // 时间戳\n  timestamp: Date\n}\n\n// 性能目标配置\nexport interface PerformanceTargets {\n  // 吞吐量目标\n  minOperationsPerSecond: number\n  minBytesPerSecond: number\n  \n  // 延迟目标\n  maxAverageLatency: number\n  maxP95Latency: number\n  maxP99Latency: number\n  \n  // 成功率目标\n  minSuccessRate: number\n  maxErrorRate: number\n  \n  // 队列目标\n  maxQueueSize: number\n  maxAverageQueueTime: number\n  \n  // 资源目标\n  maxMemoryUsage: number\n  maxCpuUsage?: number\n}\n\n// 批处理配置\nexport interface BatchConfig {\n  // 动态批次大小\n  minBatchSize: number\n  maxBatchSize: number\n  idealBatchSize: number\n  \n  // 批次超时\n  batchTimeout: number\n  maxWaitTime: number\n  \n  // 批次优先级\n  priorityBatching: boolean\n  maxPriorityBatches: number\n  \n  // 批次压缩\n  compressionThreshold: number\n  compressionEnabled: boolean\n}\n\n// 节流控制配置\nexport interface ThrottleConfig {\n  // 并发控制\n  maxConcurrentOperations: number\n  maxConcurrentBatches: number\n  \n  // 速率限制\n  operationsPerSecond: number\n  bytesPerSecond: number\n  \n  // 自适应节流\n  adaptiveThrottling: boolean\n  performanceBasedScaling: boolean\n  \n  // 紧急情况\n  emergencyMode: {\n    enabled: boolean\n    triggers: {\n      errorRate: number\n      queueSize: number\n      latency: number\n    }\n    limits: {\n      maxConcurrent: number\n      batchSize: number\n      timeout: number\n    }\n  }\n}\n\n// 缓存配置\nexport interface CacheConfig {\n  // 查询缓存\n  enabled: boolean\n  maxSize: number\n  ttl: number\n  \n  // 预取缓存\n  prefetchEnabled: boolean\n  prefetchThreshold: number\n  \n  // 写入缓存\n  writeCacheEnabled: boolean\n  writeCacheSize: number\n  \n  // 缓存策略\n  strategy: 'lru' | 'lfu' | 'fifo'\n}\n\n// 默认性能配置\nexport const DEFAULT_PERFORMANCE_CONFIG = {\n  targets: {\n    minOperationsPerSecond: 10,\n    minBytesPerSecond: 1024 * 1024, // 1MB/s\n    maxAverageLatency: 1000, // 1秒\n    maxP95Latency: 5000, // 5秒\n    maxP99Latency: 10000, // 10秒\n    minSuccessRate: 0.95,\n    maxErrorRate: 0.05,\n    maxQueueSize: 1000,\n    maxAverageQueueTime: 30000, // 30秒\n    maxMemoryUsage: 100 * 1024 * 1024, // 100MB\n    maxCpuUsage: 0.8 // 80%\n  } as PerformanceTargets,\n  \n  batch: {\n    minBatchSize: 1,\n    maxBatchSize: 100,\n    idealBatchSize: 25,\n    batchTimeout: 5000,\n    maxWaitTime: 10000,\n    priorityBatching: true,\n    maxPriorityBatches: 3,\n    compressionThreshold: 10,\n    compressionEnabled: true\n  } as BatchConfig,\n  \n  throttle: {\n    maxConcurrentOperations: 50,\n    maxConcurrentBatches: 5,\n    operationsPerSecond: 100,\n    bytesPerSecond: 10 * 1024 * 1024, // 10MB/s\n    adaptiveThrottling: true,\n    performanceBasedScaling: true,\n    emergencyMode: {\n      enabled: true,\n      triggers: {\n        errorRate: 0.3, // 30%错误率\n        queueSize: 5000,\n        latency: 30000 // 30秒延迟\n      },\n      limits: {\n        maxConcurrent: 2,\n        batchSize: 5,\n        timeout: 60000 // 60秒\n      }\n    }\n  } as ThrottleConfig,\n  \n  cache: {\n    enabled: true,\n    maxSize: 1000,\n    ttl: 5 * 60 * 1000, // 5分钟\n    prefetchEnabled: true,\n    prefetchThreshold: 0.8,\n    writeCacheEnabled: true,\n    writeCacheSize: 100,\n    strategy: 'lru'\n  } as CacheConfig\n}\n\n// 性能警报\nexport interface PerformanceAlert {\n  id: string\n  type: 'warning' | 'error' | 'critical'\n  metric: string\n  currentValue: number\n  threshold: number\n  message: string\n  timestamp: Date\n  resolved?: boolean\n  resolvedAt?: Date\n}\n\n// ============================================================================\n// 性能优化服务\n// ============================================================================\n\nexport class SyncPerformanceOptimizer {\n  private config = DEFAULT_PERFORMANCE_CONFIG\n  private isOptimizing = false\n  \n  // 性能监控\n  private metrics: PerformanceMetrics[] = []\n  private alerts: PerformanceAlert[] = []\n  \n  // 节流控制\n  private activeOperations = new Set<string>()\n  private activeBatches = new Set<string>()\n  private operationTimestamps: number[] = []\n  private byteTimestamps: { bytes: number; timestamp: number }[] = []\n  \n  // 批处理管理\n  private pendingBatches: Map<string, {\n    operations: LocalSyncOperation[]\n    createdAt: Date\n    priority: number\n  }> = new Map()\n  \n  private batchTimer: NodeJS.Timeout | null = null\n  \n  // 缓存系统\n  private cache = new Map<string, { data: any; timestamp: number; hits: number }>()\n  private writeCache = new Map<string, { operation: LocalSyncOperation; timestamp: number }>()\n  \n  // 性能分析器\n  private performanceAnalyzer: {\n    operationTimings: Map<string, number[]>\n    batchTimings: Map<string, number[]>\n    errorRates: Map<string, number>\n  } = {\n    operationTimings: new Map(),\n    batchTimings: new Map(),\n    errorRates: new Map()\n  }\n  \n  // 自适应参数\n  private adaptiveParams = {\n    currentBatchSize: this.config.batch.idealBatchSize,\n    currentConcurrency: this.config.throttle.maxConcurrentOperations,\n    currentTimeout: this.config.batch.batchTimeout,\n    emergencyMode: false\n  }\n\n  constructor() {\n    this.initialize()\n  }\n\n  // 初始化优化器\n  private initialize(): void {\n    // 启动性能监控\n    this.startPerformanceMonitoring()\n    \n    // 启动批处理管理\n    this.startBatchManagement()\n    \n    // 启动缓存清理\n    this.startCacheCleanup()\n    \n    // 监听网络变化\n    networkMonitorService.addEventListener((event) => {\n      this.handleNetworkChange(event)\n    })\n    \n    console.log('SyncPerformanceOptimizer initialized')\n  }\n\n  // ============================================================================\n  // 公共方法\n  // ============================================================================\n\n  // 执行优化的同步操作\n  async executeOptimizedOperation(\n    operation: LocalSyncOperation\n  ): Promise<string> {\n    const operationId = operation.id\n    \n    // 检查节流限制\n    if (!this.canExecuteOperation(operation)) {\n      throw new Error('Operation throttled')\n    }\n    \n    // 记录操作开始\n    this.activeOperations.add(operationId)\n    const startTime = Date.now()\n    \n    try {\n      // 执行操作\n      const result = await this.executeOperationInternal(operation)\n      \n      // 记录成功\n      this.recordOperationSuccess(operationId, Date.now() - startTime)\n      \n      return result\n    } catch (error) {\n      // 记录失败\n      this.recordOperationFailure(operationId, Date.now() - startTime, error as Error)\n      throw error\n    } finally {\n      // 清理\n      this.activeOperations.delete(operationId)\n    }\n  }\n\n  // 执行优化的批量同步\n  async executeOptimizedBatch(\n    operations: LocalSyncOperation[]\n  ): Promise<string[]> {\n    const batchId = crypto.randomUUID()\n    \n    // 检查批处理限制\n    if (!this.canExecuteBatch(operations)) {\n      throw new Error('Batch throttled')\n    }\n    \n    // 记录批处理开始\n    this.activeBatches.add(batchId)\n    const startTime = Date.now()\n    \n    try {\n      // 压缩数据（如果需要）\n      const processedOperations = this.config.batch.compressionEnabled && \n        operations.length >= this.config.batch.compressionThreshold\n        ? await this.compressOperations(operations)\n        : operations\n      \n      // 执行批处理\n      const results = await this.executeBatchInternal(processedOperations)\n      \n      // 记录成功\n      this.recordBatchSuccess(batchId, Date.now() - startTime, operations.length)\n      \n      return results\n    } catch (error) {\n      // 记录失败\n      this.recordBatchFailure(batchId, Date.now() - startTime, error as Error)\n      throw error\n    } finally {\n      // 清理\n      this.activeBatches.delete(batchId)\n    }\n  }\n\n  // 获取当前性能指标\n  getCurrentMetrics(): PerformanceMetrics {\n    const now = Date.now()\n    const recentMetrics = this.metrics.filter(m => \n      now - m.timestamp.getTime() < 60000 // 最近1分钟\n    )\n    \n    if (recentMetrics.length === 0) {\n      return this.getEmptyMetrics()\n    }\n    \n    return this.aggregateMetrics(recentMetrics)\n  }\n\n  // 获取性能警报\n  getAlerts(): PerformanceAlert[] {\n    return [...this.alerts].filter(alert => !alert.resolved)\n  }\n\n  // 获取自适应参数\n  getAdaptiveParams() {\n    return { ...this.adaptiveParams }\n  }\n\n  // 手动触发优化\n  async triggerOptimization(): Promise<void> {\n    if (this.isOptimizing) return\n    \n    this.isOptimizing = true\n    \n    try {\n      // 分析当前性能\n      const metrics = this.getCurrentMetrics()\n      \n      // 调整参数\n      await this.adjustParameters(metrics)\n      \n      // 清理缓存\n      await this.cleanupCache()\n      \n      console.log('Performance optimization completed')\n    } catch (error) {\n      console.error('Performance optimization failed:', error)\n    } finally {\n      this.isOptimizing = false\n    }\n  }\n\n  // ============================================================================\n  // 核心优化逻辑\n  // ============================================================================\n\n  // 执行操作内部实现\n  private async executeOperationInternal(operation: LocalSyncOperation): Promise<string> {\n    // 检查缓存\n    const cacheKey = this.getCacheKey(operation)\n    const cached = this.cache.get(cacheKey)\n    \n    if (cached && Date.now() - cached.timestamp < this.config.cache.ttl) {\n      cached.hits++\n      return 'cached'\n    }\n    \n    // 执行实际同步逻辑\n    const result = await this.performSyncOperation(operation)\n    \n    // 缓存结果\n    if (this.config.cache.enabled) {\n      this.cache.set(cacheKey, {\n        data: result,\n        timestamp: Date.now(),\n        hits: 1\n      })\n    }\n    \n    return result\n  }\n\n  // 执行批处理内部实现\n  private async executeBatchInternal(operations: LocalSyncOperation[]): Promise<string[]> {\n    // 分组处理（按优先级和类型）\n    const groups = this.groupOperations(operations)\n    \n    const results: string[] = []\n    \n    for (const group of groups) {\n      // 并发处理组内操作\n      const groupResults = await Promise.allSettled(\n        group.map(op => this.executeOperationInternal(op))\n      )\n      \n      // 处理结果\n      for (const result of groupResults) {\n        if (result.status === 'fulfilled') {\n          results.push(result.value)\n        } else {\n          results.push('error')\n        }\n      }\n    }\n    \n    return results\n  }\n\n  // 执行同步操作\n  private async performSyncOperation(operation: LocalSyncOperation): Promise<string> {\n    // 这里应该调用实际的同步逻辑\n    // 暂时模拟处理\n    \n    const processingTime = this.getEstimatedProcessingTime(operation)\n    await new Promise(resolve => setTimeout(resolve, processingTime))\n    \n    // 模拟偶尔的失败\n    if (Math.random() < 0.02) { // 2%失败率\n      throw new Error(`Sync operation failed: ${operation.id}`)\n    }\n    \n    return 'success'\n  }\n\n  // ============================================================================\n  // 节流控制\n  // ============================================================================\n\n  // 检查是否可以执行操作\n  private canExecuteOperation(operation: LocalSyncOperation): boolean {\n    // 检查并发限制\n    if (this.activeOperations.size >= this.adaptiveParams.currentConcurrency) {\n      return false\n    }\n    \n    // 检查速率限制\n    if (!this.checkRateLimit()) {\n      return false\n    }\n    \n    // 检查紧急模式\n    if (this.adaptiveParams.emergencyMode) {\n      return operation.priority === 'critical'\n    }\n    \n    return true\n  }\n\n  // 检查是否可以执行批处理\n  private canExecuteBatch(operations: LocalSyncOperation[]): boolean {\n    // 检查并发批处理限制\n    if (this.activeBatches.size >= this.config.throttle.maxConcurrentBatches) {\n      return false\n    }\n    \n    // 检查批次大小限制\n    if (operations.length > this.adaptiveParams.currentBatchSize) {\n      return false\n    }\n    \n    return true\n  }\n\n  // 检查速率限制\n  private checkRateLimit(): boolean {\n    const now = Date.now()\n    const oneSecondAgo = now - 1000\n    \n    // 清理旧的时间戳\n    this.operationTimestamps = this.operationTimestamps.filter(\n      timestamp => timestamp > oneSecondAgo\n    )\n    \n    // 检查操作速率\n    if (this.operationTimestamps.length >= this.config.throttle.operationsPerSecond) {\n      return false\n    }\n    \n    // 检查字节速率\n    this.byteTimestamps = this.byteTimestamps.filter(\n      item => item.timestamp > oneSecondAgo\n    )\n    \n    const totalBytes = this.byteTimestamps.reduce((sum, item) => sum + item.bytes, 0)\n    if (totalBytes >= this.config.throttle.bytesPerSecond) {\n      return false\n    }\n    \n    return true\n  }\n\n  // ============================================================================\n  // 批处理管理\n  // ============================================================================\n\n  // 开始批处理管理\n  private startBatchManagement(): void {\n    if (this.batchTimer) {\n      clearInterval(this.batchTimer)\n    }\n    \n    this.batchTimer = setInterval(() => {\n      this.processPendingBatches()\n    }, this.config.batch.batchTimeout)\n  }\n\n  // 处理待处理批次\n  private async processPendingBatches(): Promise<void> {\n    if (this.pendingBatches.size === 0) return\n    \n    const now = Date.now()\n    const readyBatches: Array<{ id: string; operations: LocalSyncOperation[] }> = []\n    \n    // 检查哪些批次已准备好\n    for (const [batchId, batch] of this.pendingBatches) {\n      const waitTime = now - batch.createdAt.getTime()\n      \n      // 超时或达到理想大小\n      if (waitTime >= this.config.batch.maxWaitTime || \n          batch.operations.length >= this.adaptiveParams.currentBatchSize) {\n        readyBatches.push({ id: batchId, operations: batch.operations })\n        this.pendingBatches.delete(batchId)\n      }\n    }\n    \n    // 执行准备好的批次\n    for (const batch of readyBatches) {\n      try {\n        await this.executeOptimizedBatch(batch.operations)\n      } catch (error) {\n        console.error('Batch execution failed:', batch.id, error)\n      }\n    }\n  }\n\n  // 添加操作到待处理批次\n  addToBatch(operation: LocalSyncOperation): void {\n    // 根据优先级和类型分组\n    const batchKey = this.getBatchKey(operation)\n    \n    if (!this.pendingBatches.has(batchKey)) {\n      this.pendingBatches.set(batchKey, {\n        operations: [],\n        createdAt: new Date(),\n        priority: this.getOperationPriority(operation)\n      })\n    }\n    \n    const batch = this.pendingBatches.get(batchKey)!\n    batch.operations.push(operation)\n    \n    // 如果批次达到理想大小，立即处理\n    if (batch.operations.length >= this.adaptiveParams.currentBatchSize) {\n      this.processPendingBatches()\n    }\n  }\n\n  // 获取批次键\n  private getBatchKey(operation: LocalSyncOperation): string {\n    if (this.config.batch.priorityBatching && operation.priority === 'critical') {\n      return `critical_${operation.entityType}`\n    }\n    return operation.entityType\n  }\n\n  // 获取操作优先级数值\n  private getOperationPriority(operation: LocalSyncOperation): number {\n    switch (operation.priority) {\n      case 'critical': return 4\n      case 'high': return 3\n      case 'normal': return 2\n      case 'low': return 1\n      default: return 0\n    }\n  }\n\n  // ============================================================================\n  // 压缩和优化\n  // ============================================================================\n\n  // 压缩操作\n  private async compressOperations(operations: LocalSyncOperation[]): Promise<LocalSyncOperation[]> {\n    // 去重合并相同操作\n    const uniqueOperations = new Map<string, LocalSyncOperation>()\n    \n    for (const operation of operations) {\n      const key = `${operation.entityType}_${operation.entityId}_${operation.operationType}`\n      \n      if (uniqueOperations.has(key)) {\n        // 合并操作\n        const existing = uniqueOperations.get(key)!\n        if (operation.timestamp > existing.timestamp) {\n          uniqueOperations.set(key, operation)\n        }\n      } else {\n        uniqueOperations.set(key, operation)\n      }\n    }\n    \n    return Array.from(uniqueOperations.values())\n  }\n\n  // 分组操作\n  private groupOperations(operations: LocalSyncOperation[]): Array<Array<LocalSyncOperation>> {\n    const groups = new Map<string, LocalSyncOperation[]>()\n    \n    // 按优先级分组\n    for (const operation of operations) {\n      const groupKey = operation.priority\n      \n      if (!groups.has(groupKey)) {\n        groups.set(groupKey, [])\n      }\n      \n      groups.get(groupKey)!.push(operation)\n    }\n    \n    // 按优先级排序\n    const priorityOrder = ['critical', 'high', 'normal', 'low']\n    const sortedGroups: Array<Array<LocalSyncOperation>> = []\n    \n    for (const priority of priorityOrder) {\n      if (groups.has(priority)) {\n        sortedGroups.push(groups.get(priority)!)\n      }\n    }\n    \n    return sortedGroups\n  }\n\n  // ============================================================================\n  // 性能监控\n  // ============================================================================\n\n  // 启动性能监控\n  private startPerformanceMonitoring(): void {\n    setInterval(() => {\n      this.collectMetrics()\n      this.checkPerformanceAlerts()\n    }, 10000) // 每10秒收集一次指标\n  }\n\n  // 收集性能指标\n  private collectMetrics(): void {\n    const metrics: PerformanceMetrics = {\n      operationsPerSecond: this.calculateOperationsPerSecond(),\n      bytesPerSecond: this.calculateBytesPerSecond(),\n      averageLatency: this.calculateAverageLatency(),\n      p95Latency: this.calculateP95Latency(),\n      p99Latency: this.calculateP99Latency(),\n      successRate: this.calculateSuccessRate(),\n      errorRate: this.calculateErrorRate(),\n      queueSize: this.activeOperations.size,\n      averageQueueTime: this.calculateAverageQueueTime(),\n      maxQueueTime: this.calculateMaxQueueTime(),\n      memoryUsage: this.calculateMemoryUsage(),\n      networkLatency: this.calculateNetworkLatency(),\n      bandwidth: this.calculateBandwidth(),\n      timestamp: new Date()\n    }\n    \n    this.metrics.push(metrics)\n    \n    // 保留最近1000条记录\n    if (this.metrics.length > 1000) {\n      this.metrics = this.metrics.slice(-1000)\n    }\n  }\n\n  // 检查性能警报\n  private checkPerformanceAlerts(): void {\n    const metrics = this.getCurrentMetrics()\n    const targets = this.config.targets\n    \n    const alerts: PerformanceAlert[] = []\n    \n    // 检查各项指标\n    if (metrics.operationsPerSecond < targets.minOperationsPerSecond) {\n      alerts.push({\n        id: crypto.randomUUID(),\n        type: 'warning',\n        metric: 'operationsPerSecond',\n        currentValue: metrics.operationsPerSecond,\n        threshold: targets.minOperationsPerSecond,\n        message: `Low throughput: ${metrics.operationsPerSecond.toFixed(2)} ops/s`,\n        timestamp: new Date()\n      })\n    }\n    \n    if (metrics.errorRate > targets.maxErrorRate) {\n      alerts.push({\n        id: crypto.randomUUID(),\n        type: 'error',\n        metric: 'errorRate',\n        currentValue: metrics.errorRate,\n        threshold: targets.maxErrorRate,\n        message: `High error rate: ${(metrics.errorRate * 100).toFixed(2)}%`,\n        timestamp: new Date()\n      })\n    }\n    \n    if (metrics.queueSize > targets.maxQueueSize) {\n      alerts.push({\n        id: crypto.randomUUID(),\n        type: 'warning',\n        metric: 'queueSize',\n        currentValue: metrics.queueSize,\n        threshold: targets.maxQueueSize,\n        message: `Large queue size: ${metrics.queueSize}`,\n        timestamp: new Date()\n      })\n    }\n    \n    if (metrics.memoryUsage > targets.maxMemoryUsage) {\n      alerts.push({\n        id: crypto.randomUUID(),\n        type: 'error',\n        metric: 'memoryUsage',\n        currentValue: metrics.memoryUsage,\n        threshold: targets.maxMemoryUsage,\n        message: `High memory usage: ${(metrics.memoryUsage / 1024 / 1024).toFixed(2)}MB`,\n        timestamp: new Date()\n      })\n    }\n    \n    // 添加新警报\n    for (const alert of alerts) {\n      if (!this.alerts.some(a => a.metric === alert.metric && !a.resolved)) {\n        this.alerts.push(alert)\n        console.warn(`Performance alert: ${alert.message}`)\n      }\n    }\n    \n    // 检查是否需要进入紧急模式\n    this.checkEmergencyMode(metrics)\n  }\n\n  // 检查紧急模式\n  private checkEmergencyMode(metrics: PerformanceMetrics): void {\n    const triggers = this.config.throttle.emergencyMode.triggers\n    let shouldActivate = false\n    \n    if (metrics.errorRate > triggers.errorRate) shouldActivate = true\n    if (metrics.queueSize > triggers.queueSize) shouldActivate = true\n    if (metrics.averageLatency > triggers.latency) shouldActivate = true\n    \n    if (shouldActivate && !this.adaptiveParams.emergencyMode) {\n      this.activateEmergencyMode()\n    } else if (!shouldActivate && this.adaptiveParams.emergencyMode) {\n      this.deactivateEmergencyMode()\n    }\n  }\n\n  // 激活紧急模式\n  private activateEmergencyMode(): void {\n    console.log('Activating emergency mode')\n    this.adaptiveParams.emergencyMode = true\n    \n    const limits = this.config.throttle.emergencyMode.limits\n    this.adaptiveParams.currentConcurrency = limits.maxConcurrent\n    this.adaptiveParams.currentBatchSize = limits.batchSize\n    this.adaptiveParams.currentTimeout = limits.timeout\n  }\n\n  // 停用紧急模式\n  private deactivateEmergencyMode(): void {\n    console.log('Deactivating emergency mode')\n    this.adaptiveParams.emergencyMode = false\n    \n    // 恢复正常参数\n    this.adaptiveParams.currentConcurrency = this.config.throttle.maxConcurrentOperations\n    this.adaptiveParams.currentBatchSize = this.config.batch.idealBatchSize\n    this.adaptiveParams.currentTimeout = this.config.batch.batchTimeout\n  }\n\n  // ============================================================================\n  // 参数调整\n  // ============================================================================\n\n  // 调整参数\n  private async adjustParameters(metrics: PerformanceMetrics): Promise<void> {\n    if (this.config.throttle.adaptiveThrottling) {\n      await this.adjustConcurrency(metrics)\n    }\n    \n    if (this.config.throttle.performanceBasedScaling) {\n      await this.adjustBatchSize(metrics)\n    }\n  }\n\n  // 调整并发数\n  private async adjustConcurrency(metrics: PerformanceMetrics): Promise<void> {\n    const target = this.config.targets\n    const current = this.adaptiveParams.currentConcurrency\n    \n    let newConcurrency = current\n    \n    // 基于错误率调整\n    if (metrics.errorRate > target.maxErrorRate) {\n      newConcurrency = Math.max(1, Math.floor(current * 0.8))\n    } else if (metrics.errorRate < target.maxErrorRate * 0.5) {\n      newConcurrency = Math.min(this.config.throttle.maxConcurrentOperations, Math.floor(current * 1.2))\n    }\n    \n    // 基于延迟调整\n    if (metrics.averageLatency > target.maxAverageLatency) {\n      newConcurrency = Math.max(1, Math.floor(current * 0.9))\n    }\n    \n    if (newConcurrency !== current) {\n      console.log(`Adjusting concurrency: ${current} -> ${newConcurrency}`)\n      this.adaptiveParams.currentConcurrency = newConcurrency\n    }\n  }\n\n  // 调整批次大小\n  private async adjustBatchSize(metrics: PerformanceMetrics): Promise<void> {\n    const current = this.adaptiveParams.currentBatchSize\n    let newBatchSize = current\n    \n    // 基于吞吐量调整\n    if (metrics.operationsPerSecond < this.config.targets.minOperationsPerSecond * 0.8) {\n      newBatchSize = Math.max(this.config.batch.minBatchSize, Math.floor(current * 0.8))\n    } else if (metrics.operationsPerSecond > this.config.targets.minOperationsPerSecond * 1.2) {\n      newBatchSize = Math.min(this.config.batch.maxBatchSize, Math.floor(current * 1.2))\n    }\n    \n    // 基于延迟调整\n    if (metrics.p95Latency > this.config.targets.maxP95Latency) {\n      newBatchSize = Math.max(this.config.batch.minBatchSize, Math.floor(current * 0.9))\n    }\n    \n    if (newBatchSize !== current) {\n      console.log(`Adjusting batch size: ${current} -> ${newBatchSize}`)\n      this.adaptiveParams.currentBatchSize = newBatchSize\n    }\n  }\n\n  // ============================================================================\n  // 缓存管理\n  // ============================================================================\n\n  // 启动缓存清理\n  private startCacheCleanup(): void {\n    setInterval(() => {\n      this.cleanupCache()\n    }, this.config.cache.ttl)\n  }\n\n  // 清理缓存\n  private async cleanupCache(): Promise<void> {\n    const now = Date.now()\n    \n    // 清理查询缓存\n    for (const [key, value] of this.cache.entries()) {\n      if (now - value.timestamp > this.config.cache.ttl) {\n        this.cache.delete(key)\n      }\n    }\n    \n    // 限制缓存大小\n    if (this.cache.size > this.config.cache.maxSize) {\n      const entries = Array.from(this.cache.entries())\n      entries.sort((a, b) => a[1].timestamp - b[1].timestamp)\n      \n      const toRemove = entries.slice(0, entries.length - this.config.cache.maxSize)\n      for (const [key] of toRemove) {\n        this.cache.delete(key)\n      }\n    }\n    \n    // 清理写入缓存\n    for (const [key, value] of this.writeCache.entries()) {\n      if (now - value.timestamp > this.config.cache.ttl) {\n        this.writeCache.delete(key)\n      }\n    }\n    \n    // 限制写入缓存大小\n    if (this.writeCache.size > this.config.cache.writeCacheSize) {\n      const entries = Array.from(this.writeCache.entries())\n      entries.sort((a, b) => a[1].timestamp - b[1].timestamp)\n      \n      const toRemove = entries.slice(0, entries.length - this.config.cache.writeCacheSize)\n      for (const [key] of toRemove) {\n        this.writeCache.delete(key)\n      }\n    }\n  }\n\n  // 获取缓存键\n  private getCacheKey(operation: LocalSyncOperation): string {\n    return `${operation.entityType}_${operation.entityId}_${operation.operationType}_${operation.localVersion}`\n  }\n\n  // ============================================================================\n  // 性能计算\n  // ============================================================================\n\n  // 计算每秒操作数\n  private calculateOperationsPerSecond(): number {\n    const now = Date.now()\n    const recentTimestamps = this.operationTimestamps.filter(\n      timestamp => now - timestamp < 1000\n    )\n    return recentTimestamps.length\n  }\n\n  // 计算每秒字节数\n  private calculateBytesPerSecond(): number {\n    const now = Date.now()\n    const recentBytes = this.byteTimestamps.filter(\n      item => now - item.timestamp < 1000\n    )\n    return recentBytes.reduce((sum, item) => sum + item.bytes, 0)\n  }\n\n  // 计算平均延迟\n  private calculateAverageLatency(): number {\n    const allTimings = Array.from(this.performanceAnalyzer.operationTimings.values())\n      .flat()\n    \n    if (allTimings.length === 0) return 0\n    \n    return allTimings.reduce((sum, timing) => sum + timing, 0) / allTimings.length\n  }\n\n  // 计算P95延迟\n  private calculateP95Latency(): number {\n    const allTimings = Array.from(this.performanceAnalyzer.operationTimings.values())\n      .flat()\n      .sort((a, b) => a - b)\n    \n    if (allTimings.length === 0) return 0\n    \n    const index = Math.floor(allTimings.length * 0.95)\n    return allTimings[Math.min(index, allTimings.length - 1)]\n  }\n\n  // 计算P99延迟\n  private calculateP99Latency(): number {\n    const allTimings = Array.from(this.performanceAnalyzer.operationTimings.values())\n      .flat()\n      .sort((a, b) => a - b)\n    \n    if (allTimings.length === 0) return 0\n    \n    const index = Math.floor(allTimings.length * 0.99)\n    return allTimings[Math.min(index, allTimings.length - 1)]\n  }\n\n  // 计算成功率\n  private calculateSuccessRate(): number {\n    const totalOps = this.performanceAnalyzer.errorRates.size\n    if (totalOps === 0) return 1\n    \n    const errorRate = Array.from(this.performanceAnalyzer.errorRates.values())\n      .reduce((sum, rate) => sum + rate, 0) / totalOps\n    \n    return 1 - errorRate\n  }\n\n  // 计算错误率\n  private calculateErrorRate(): number {\n    return 1 - this.calculateSuccessRate()\n  }\n\n  // 计算平均队列时间\n  private calculateAverageQueueTime(): number {\n    // 这里应该实现实际的队列时间计算\n    return 0\n  }\n\n  // 计算最大队列时间\n  private calculateMaxQueueTime(): number {\n    // 这里应该实现实际的最大队列时间计算\n    return 0\n  }\n\n  // 计算内存使用\n  private calculateMemoryUsage(): number {\n    if ('memory' in performance) {\n      const memory = (performance as any).memory\n      return memory.usedJSHeapSize\n    }\n    return 0\n  }\n\n  // 计算网络延迟\n  private calculateNetworkLatency(): number {\n    const networkInfo = networkMonitorService.getCurrentState()\n    return networkInfo.rtt || 0\n  }\n\n  // 计算带宽\n  private calculateBandwidth(): number {\n    const networkInfo = networkMonitorService.getCurrentState()\n    return (networkInfo.downlink || 0) * 1024 * 1024 // 转换为bytes/s\n  }\n\n  // 聚合指标\n  private aggregateMetrics(metrics: PerformanceMetrics[]): PerformanceMetrics {\n    if (metrics.length === 0) return this.getEmptyMetrics()\n    \n    const sum = metrics.reduce((acc, metric) => ({\n      operationsPerSecond: acc.operationsPerSecond + metric.operationsPerSecond,\n      bytesPerSecond: acc.bytesPerSecond + metric.bytesPerSecond,\n      averageLatency: acc.averageLatency + metric.averageLatency,\n      p95Latency: acc.p95Latency + metric.p95Latency,\n      p99Latency: acc.p99Latency + metric.p99Latency,\n      successRate: acc.successRate + metric.successRate,\n      errorRate: acc.errorRate + metric.errorRate,\n      queueSize: acc.queueSize + metric.queueSize,\n      averageQueueTime: acc.averageQueueTime + metric.averageQueueTime,\n      maxQueueTime: Math.max(acc.maxQueueTime, metric.maxQueueTime),\n      memoryUsage: acc.memoryUsage + metric.memoryUsage,\n      networkLatency: acc.networkLatency + metric.networkLatency,\n      bandwidth: acc.bandwidth + metric.bandwidth\n    }), this.getEmptyMetrics())\n    \n    const count = metrics.length\n    \n    return {\n      operationsPerSecond: sum.operationsPerSecond / count,\n      bytesPerSecond: sum.bytesPerSecond / count,\n      averageLatency: sum.averageLatency / count,\n      p95Latency: sum.p95Latency / count,\n      p99Latency: sum.p99Latency / count,\n      successRate: sum.successRate / count,\n      errorRate: sum.errorRate / count,\n      queueSize: sum.queueSize / count,\n      averageQueueTime: sum.averageQueueTime / count,\n      maxQueueTime: sum.maxQueueTime,\n      memoryUsage: sum.memoryUsage / count,\n      networkLatency: sum.networkLatency / count,\n      bandwidth: sum.bandwidth / count,\n      timestamp: new Date()\n    }\n  }\n\n  // 获取空指标\n  private getEmptyMetrics(): PerformanceMetrics {\n    return {\n      operationsPerSecond: 0,\n      bytesPerSecond: 0,\n      averageLatency: 0,\n      p95Latency: 0,\n      p99Latency: 0,\n      successRate: 1,\n      errorRate: 0,\n      queueSize: 0,\n      averageQueueTime: 0,\n      maxQueueTime: 0,\n      memoryUsage: 0,\n      networkLatency: 0,\n      bandwidth: 0,\n      timestamp: new Date()\n    }\n  }\n\n  // ============================================================================\n  // 记录操作结果\n  // ============================================================================\n\n  // 记录操作成功\n  private recordOperationSuccess(operationId: string, duration: number): void {\n    // 记录时间戳\n    this.operationTimestamps.push(Date.now())\n    \n    // 记录性能数据\n    if (!this.performanceAnalyzer.operationTimings.has(operationId)) {\n      this.performanceAnalyzer.operationTimings.set(operationId, [])\n    }\n    \n    this.performanceAnalyzer.operationTimings.get(operationId)!.push(duration)\n    \n    // 更新错误率\n    this.performanceAnalyzer.errorRates.set(operationId, 0)\n  }\n\n  // 记录操作失败\n  private recordOperationFailure(operationId: string, duration: number, error: Error): void {\n    // 记录时间戳\n    this.operationTimestamps.push(Date.now())\n    \n    // 记录性能数据\n    if (!this.performanceAnalyzer.operationTimings.has(operationId)) {\n      this.performanceAnalyzer.operationTimings.set(operationId, [])\n    }\n    \n    this.performanceAnalyzer.operationTimings.get(operationId)!.push(duration)\n    \n    // 更新错误率\n    this.performanceAnalyzer.errorRates.set(operationId, 1)\n  }\n\n  // 记录批处理成功\n  private recordBatchSuccess(batchId: string, duration: number, operationCount: number): void {\n    if (!this.performanceAnalyzer.batchTimings.has(batchId)) {\n      this.performanceAnalyzer.batchTimings.set(batchId, [])\n    }\n    \n    this.performanceAnalyzer.batchTimings.get(batchId)!.push(duration)\n    \n    // 记录字节传输\n    this.byteTimestamps.push({\n      bytes: operationCount * 1024, // 估算每操作1KB\n      timestamp: Date.now()\n    })\n  }\n\n  // 记录批处理失败\n  private recordBatchFailure(batchId: string, duration: number, error: Error): void {\n    if (!this.performanceAnalyzer.batchTimings.has(batchId)) {\n      this.performanceAnalyzer.batchTimings.set(batchId, [])\n    }\n    \n    this.performanceAnalyzer.batchTimings.get(batchId)!.push(duration)\n  }\n\n  // ============================================================================\n  // 网络变化处理\n  // ============================================================================\n\n  // 处理网络变化\n  private handleNetworkChange(event: any): void {\n    const networkInfo = event.currentState\n    \n    // 根据网络质量调整参数\n    if (networkInfo.effectiveType === 'slow-2g' || networkInfo.effectiveType === '2g') {\n      // 低网络质量，降低批处理大小和并发数\n      this.adaptiveParams.currentBatchSize = Math.max(\n        this.config.batch.minBatchSize,\n        Math.floor(this.adaptiveParams.currentBatchSize * 0.5)\n      )\n      this.adaptiveParams.currentConcurrency = Math.max(\n        1,\n        Math.floor(this.adaptiveParams.currentConcurrency * 0.5)\n      )\n    } else if (networkInfo.effectiveType === '4g') {\n      // 良好网络，恢复正常参数\n      this.adaptiveParams.currentBatchSize = this.config.batch.idealBatchSize\n      this.adaptiveParams.currentConcurrency = this.config.throttle.maxConcurrentOperations\n    }\n    \n    console.log(`Network quality changed: ${networkInfo.effectiveType}, adjusted parameters`)\n  }\n\n  // ============================================================================\n  // 工具方法\n  // ============================================================================\n\n  // 获取估计处理时间\n  private getEstimatedProcessingTime(operation: LocalSyncOperation): number {\n    const baseTime = {\n      card: 100,\n      folder: 150,\n      tag: 50,\n      image: 1000\n    }\n    \n    const networkStrategy = getNetworkStrategy()\n    const networkMultiplier = networkStrategy.timeout / 10000 // 基于超时时间调整\n    \n    return baseTime[operation.entityType] * networkMultiplier\n  }\n\n  // 获取性能指标\n  getPerformanceMetrics(): PerformanceMetrics {\n    return {\n      operationsPerSecond: this.calculateOperationsPerSecond(),\n      averageLatency: this.calculateAverageLatency(),\n      successRate: this.calculateSuccessRate(),\n      memoryUsage: this.calculateMemoryUsage(),\n      batchSize: this.adaptiveParams.currentBatchSize,\n      concurrency: this.adaptiveParams.currentConcurrency,\n      networkEfficiency: this.calculateNetworkEfficiency(),\n      timestamp: Date.now()\n    }\n  }\n\n  // 自适应批处理\n  async adaptiveBatching(operations: LocalSyncOperation[]): Promise<LocalSyncOperation[][]> {\n    // 根据当前网络条件和性能指标动态调整批处理策略\n    const networkQuality = await this.assessNetworkQuality()\n    const currentLoad = this.activeOperations.size\n    \n    // 计算最优批大小\n    let optimalBatchSize = this.adaptiveParams.currentBatchSize\n    \n    if (networkQuality === 'poor') {\n      optimalBatchSize = Math.max(1, Math.floor(optimalBatchSize * 0.5))\n    } else if (networkQuality === 'excellent' && currentLoad < 10) {\n      optimalBatchSize = Math.min(50, Math.floor(optimalBatchSize * 1.5))\n    }\n    \n    // 分批处理\n    const batches: Array<Array<LocalSyncOperation>> = []\n    for (let i = 0; i < operations.length; i += optimalBatchSize) {\n      batches.push(operations.slice(i, i + optimalBatchSize))\n    }\n    \n    console.log(`Adaptive batching: ${operations.length} operations -> ${batches.length} batches (size: ${optimalBatchSize})`)\n    return batches\n  }\n\n  // 节流控制\n  throttleControl(): {\n    canProceed: boolean\n    waitTime: number\n    reason?: string\n  } {\n    const now = Date.now()\n    const currentLoad = this.activeOperations.size\n    const recentFailures = this.operationHistory.filter(\n      op => op.timestamp > now - 60000 && !op.success\n    ).length\n    \n    // 基于多个因素决定是否节流\n    if (currentLoad >= this.config.throttle.maxConcurrentOperations) {\n      return {\n        canProceed: false,\n        waitTime: 1000,\n        reason: '最大并发操作数限制'\n      }\n    }\n    \n    if (recentFailures > this.config.throttle.failureThreshold) {\n      return {\n        canProceed: false,\n        waitTime: 5000,\n        reason: '最近失败率过高'\n      }\n    }\n    \n    if (this.throttleEndTime > now) {\n      return {\n        canProceed: false,\n        waitTime: this.throttleEndTime - now,\n        reason: '系统节流中'\n      }\n    }\n    \n    return {\n      canProceed: true,\n      waitTime: 0\n    }\n  }\n\n  // 评估网络质量\n  private async assessNetworkQuality(): Promise<'excellent' | 'good' | 'fair' | 'poor'> {\n    try {\n      const connection = (navigator as any).connection\n      \n      if (!connection) {\n        return 'good' // 默认值\n      }\n      \n      const { effectiveType, downlink, rtt } = connection\n      \n      // 基于连接类型和性能指标评估质量\n      if (effectiveType === '4g' && downlink > 5 && rtt < 100) {\n        return 'excellent'\n      } else if (effectiveType === '4g' || (effectiveType === '3g' && downlink > 1.5)) {\n        return 'good'\n      } else if (effectiveType === '3g' || downlink > 0.5) {\n        return 'fair'\n      } else {\n        return 'poor'\n      }\n    } catch (error) {\n      console.warn('Failed to assess network quality:', error)\n      return 'good'\n    }\n  }\n\n  // 销毁优化器\n  destroy(): void {\n    if (this.batchTimer) {\n      clearInterval(this.batchTimer)\n    }\n    \n    this.cache.clear()\n    this.writeCache.clear()\n    this.pendingBatches.clear()\n    this.activeOperations.clear()\n    this.activeBatches.clear()\n    \n    console.log('SyncPerformanceOptimizer destroyed')\n  }\n}\n\n// 导出单例实例\nexport const syncPerformanceOptimizer = new SyncPerformanceOptimizer()"],"version":3}
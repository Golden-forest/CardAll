{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\tests\\integration\\database\\database-integration.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\tests\\integration\\database\\database-integration.test.ts"],"sourcesContent":["// 数据库集成测试\r\nimport { db } from '@/services/database'\r\nimport { cloudSyncService } from '@/services/cloud-sync'\r\nimport { mockServer } from '@/tests/fixtures/mock-services'\r\nimport { testData, mockDataUtils } from '@/tests/test-utils'\r\n\r\n// 设置测试环境\r\nbeforeAll(() => {\r\n  mockServer.listen()\r\n})\r\n\r\nbeforeEach(async () => {\r\n  // 清空数据库\r\n  await db.delete()\r\n  await db.open()\r\n})\r\n\r\nafterEach(() => {\r\n  mockServer.resetHandlers()\r\n})\r\n\r\nafterAll(() => {\r\n  mockServer.close()\r\n})\r\n\r\ndescribe('Database Integration', () => {\r\n  describe('数据持久化', () => {\r\n    it('应该能够持久化卡片数据', async () => {\r\n      const cardData = mockDataUtils.generateTestCard()\r\n      \r\n      // 保存卡片到本地数据库\r\n      const savedCard = await db.cards.add(cardData)\r\n      expect(savedCard).toBeDefined()\r\n      expect(savedCard.id).toBe(cardData.id)\r\n      \r\n      // 重新打开数据库验证数据持久化\r\n      await db.close()\r\n      await db.open()\r\n      \r\n      const retrievedCard = await db.cards.get(cardData.id)\r\n      expect(retrievedCard).toEqual(cardData)\r\n    })\r\n\r\n    it('应该能够持久化文件夹层次结构', async () => {\r\n      const rootFolder = mockDataUtils.generateTestFolder({ name: 'Root' })\r\n      const subFolder = mockDataUtils.generateTestFolder({ \r\n        name: 'Sub', \r\n        parentId: rootFolder.id \r\n      })\r\n      \r\n      // 保存文件夹层次结构\r\n      await db.folders.add(rootFolder)\r\n      await db.folders.add(subFolder)\r\n      \r\n      // 验证层次关系\r\n      const retrievedSubFolder = await db.folders.get(subFolder.id)\r\n      expect(retrievedSubFolder?.parentId).toBe(rootFolder.id)\r\n      \r\n      // 验证文件夹树构建\r\n      const allFolders = await db.folders.toArray()\r\n      expect(allFolders).toHaveLength(2)\r\n    })\r\n\r\n    it('应该能够持久化标签系统', async () => {\r\n      const tagData = mockDataUtils.generateTestTag()\r\n      const cardData = mockDataUtils.generateTestCard({ tags: [tagData.id] })\r\n      \r\n      // 保存标签和卡片\r\n      await db.tags.add(tagData)\r\n      await db.cards.add(cardData)\r\n      \r\n      // 验证标签关联\r\n      const retrievedCard = await db.cards.get(cardData.id)\r\n      expect(retrievedCard?.tags).toContain(tagData.id)\r\n      \r\n      const retrievedTag = await db.tags.get(tagData.id)\r\n      expect(retrievedTag).toBeDefined()\r\n    })\r\n  })\r\n\r\n  describe('数据查询性能', () => {\r\n    it('应该高效查询大量卡片', async () => {\r\n      // 生成大量测试数据\r\n      const cards = mockDataUtils.generateCards(1000)\r\n      \r\n      // 批量插入\r\n      await db.cards.bulkAdd(cards)\r\n      \r\n      // 测试查询性能\r\n      const startTime = performance.now()\r\n      const allCards = await db.cards.toArray()\r\n      const endTime = performance.now()\r\n      \r\n      expect(allCards).toHaveLength(1000)\r\n      expect(endTime - startTime).toBeLessThan(100) // 应该在100ms内完成\r\n    })\r\n\r\n    it('应该高效进行模糊搜索', async () => {\r\n      const searchCards = [\r\n        mockDataUtils.generateTestCard({ title: 'React 学习笔记' }),\r\n        mockDataUtils.generateTestCard({ title: 'TypeScript 高级技巧' }),\r\n        mockDataUtils.generateTestCard({ title: 'JavaScript 基础' }),\r\n        mockDataUtils.generateTestCard({ title: 'Vue.js 实战' }),\r\n      ]\r\n      \r\n      await db.cards.bulkAdd(searchCards)\r\n      \r\n      // 测试搜索性能\r\n      const startTime = performance.now()\r\n      const results = await db.cards\r\n        .filter(card => \r\n          card.title.toLowerCase().includes('react') ||\r\n          card.content.toLowerCase().includes('react')\r\n        )\r\n        .toArray()\r\n      const endTime = performance.now()\r\n      \r\n      expect(results).toHaveLength(1)\r\n      expect(results[0].title).toBe('React 学习笔记')\r\n      expect(endTime - startTime).toBeLessThan(50) // 应该在50ms内完成\r\n    })\r\n\r\n    it('应该高效处理标签过滤', async () => {\r\n      const tag1 = mockDataUtils.generateTestTag({ name: '前端' })\r\n      const tag2 = mockDataUtils.generateTestTag({ name: '后端' })\r\n      \r\n      const cards = [\r\n        mockDataUtils.generateTestCard({ tags: [tag1.id] }),\r\n        mockDataUtils.generateTestCard({ tags: [tag2.id] }),\r\n        mockDataUtils.generateTestCard({ tags: [tag1.id, tag2.id] }),\r\n      ]\r\n      \r\n      await db.tags.bulkAdd([tag1, tag2])\r\n      await db.cards.bulkAdd(cards)\r\n      \r\n      // 测试标签过滤性能\r\n      const startTime = performance.now()\r\n      const frontendCards = await db.cards\r\n        .filter(card => card.tags?.includes(tag1.id))\r\n        .toArray()\r\n      const endTime = performance.now()\r\n      \r\n      expect(frontendCards).toHaveLength(2)\r\n      expect(endTime - startTime).toBeLessThan(50)\r\n    })\r\n  })\r\n\r\n  describe('数据完整性', () => {\r\n    it('应该维护数据引用完整性', async () => {\r\n      const folder = mockDataUtils.generateTestFolder()\r\n      const card = mockDataUtils.generateTestCard({ folderId: folder.id })\r\n      \r\n      // 保存文件夹和卡片\r\n      await db.folders.add(folder)\r\n      await db.cards.add(card)\r\n      \r\n      // 删除文件夹时级联删除卡片\r\n      await db.folders.delete(folder.id)\r\n      \r\n      const remainingCard = await db.cards.get(card.id)\r\n      expect(remainingCard?.folderId).toBeNull() // 卡片应该被移到根目录\r\n    })\r\n\r\n    it('应该处理并发操作', async () => {\r\n      const card = mockDataUtils.generateTestCard()\r\n      \r\n      // 并发更新同一个卡片\r\n      const update1 = db.cards.update(card.id, { title: 'Updated 1' })\r\n      const update2 = db.cards.update(card.id, { content: 'Updated content 2' })\r\n      \r\n      await Promise.all([update1, update2])\r\n      \r\n      const finalCard = await db.cards.get(card.id)\r\n      expect(finalCard?.title).toBe('Updated 1')\r\n      expect(finalCard?.content).toBe('Updated content 2')\r\n    })\r\n\r\n    it('应该处理事务操作', async () => {\r\n      const card1 = mockDataUtils.generateTestCard()\r\n      const card2 = mockDataUtils.generateTestCard()\r\n      \r\n      // 在事务中执行多个操作\r\n      try {\r\n        await db.transaction('rw', [db.cards, db.folders], async () => {\r\n          await db.cards.add(card1)\r\n          await db.cards.add(card2)\r\n          // 如果这里抛出异常，所有操作都会回滚\r\n        })\r\n      } catch (error) {\r\n        // 测试回滚逻辑\r\n      }\r\n      \r\n      const cards = await db.cards.toArray()\r\n      expect(cards.length).toBeGreaterThanOrEqual(2)\r\n    })\r\n  })\r\n\r\n  describe('与云端同步集成', () => {\r\n    it('应该能够同步本地数据库到云端', async () => {\r\n      const localCard = mockDataUtils.generateTestCard({ isLocalOnly: false })\r\n      \r\n      // 保存到本地数据库\r\n      await db.cards.add(localCard)\r\n      \r\n      // 同步到云端\r\n      await cloudSyncService.syncCard(localCard)\r\n      \r\n      // 验证云端同步状态\r\n      const syncedCard = await db.cards.get(localCard.id)\r\n      expect(syncedCard?.cloudSynced).toBe(true)\r\n    })\r\n\r\n    it('应该能够从云端同步到本地', async () => {\r\n      const remoteCard = mockDataUtils.generateTestCard()\r\n      \r\n      // 模拟云端数据\r\n      mockServer.use(\r\n        rest.get('https://test.supabase.co/rest/v1/cards', (req, res, ctx) => {\r\n          return res(\r\n            ctx.status(200),\r\n            ctx.json([remoteCard])\r\n          )\r\n        })\r\n      )\r\n      \r\n      // 从云端同步\r\n      await cloudSyncService.syncFromCloud()\r\n      \r\n      // 验证本地数据库\r\n      const localCard = await db.cards.get(remoteCard.id)\r\n      expect(localCard).toBeDefined()\r\n      expect(localCard?.title).toBe(remoteCard.title)\r\n    })\r\n\r\n    it('应该处理同步冲突', async () => {\r\n      const localCard = mockDataUtils.generateTestCard({ \r\n        title: 'Local Version',\r\n        cloudSynced: true \r\n      })\r\n      \r\n      const remoteCard = mockDataUtils.generateTestCard({ \r\n        id: localCard.id,\r\n        title: 'Remote Version'\r\n      })\r\n      \r\n      // 保存本地版本\r\n      await db.cards.add(localCard)\r\n      \r\n      // 模拟云端冲突\r\n      mockServer.use(\r\n        rest.get('https://test.supabase.co/rest/v1/cards', (req, res, ctx) => {\r\n          return res(\r\n            ctx.status(200),\r\n            ctx.json([remoteCard])\r\n          )\r\n        })\r\n      )\r\n      \r\n      // 同步并处理冲突\r\n      await cloudSyncService.syncFromCloud()\r\n      \r\n      // 验证冲突解决\r\n      const finalCard = await db.cards.get(localCard.id)\r\n      expect(finalCard).toBeDefined()\r\n      // 根据冲突解决策略验证结果\r\n    })\r\n  })\r\n\r\n  describe('离线支持', () => {\r\n    it('应该在离线时缓存操作', async () => {\r\n      const card = mockDataUtils.generateTestCard()\r\n      \r\n      // 模拟离线状态\r\n      await cloudSyncService.setOfflineMode(true)\r\n      \r\n      // 在离线状态下操作\r\n      await db.cards.add(card)\r\n      await cloudSyncService.syncCard(card)\r\n      \r\n      // 验证操作被缓存\r\n      const cachedOps = await cloudSyncService.getCachedOperations()\r\n      expect(cachedOps).toHaveLength(1)\r\n      expect(cachedOps[0].entityId).toBe(card.id)\r\n    })\r\n\r\n    it('应该在恢复在线后同步缓存操作', async () => {\r\n      const card = mockDataUtils.generateTestCard()\r\n      \r\n      // 模拟离线并缓存操作\r\n      await cloudSyncService.setOfflineMode(true)\r\n      await db.cards.add(card)\r\n      await cloudSyncService.syncCard(card)\r\n      \r\n      // 恢复在线\r\n      await cloudSyncService.setOfflineMode(false)\r\n      await cloudSyncService.syncCachedOperations()\r\n      \r\n      // 验证同步完成\r\n      const syncedCard = await db.cards.get(card.id)\r\n      expect(syncedCard?.cloudSynced).toBe(true)\r\n      \r\n      const cachedOps = await cloudSyncService.getCachedOperations()\r\n      expect(cachedOps).toHaveLength(0)\r\n    })\r\n  })\r\n\r\n  describe('数据迁移', () => {\r\n    it('应该能够处理数据库版本升级', async () => {\r\n      // 模拟旧版本数据\r\n      const oldData = {\r\n        version: 1,\r\n        cards: [mockDataUtils.generateTestCard()],\r\n        folders: [mockDataUtils.generateTestFolder()],\r\n      }\r\n      \r\n      // 执行数据迁移\r\n      await db.migrate(oldData)\r\n      \r\n      // 验证迁移结果\r\n      const cards = await db.cards.toArray()\r\n      const folders = await db.folders.toArray()\r\n      \r\n      expect(cards.length).toBe(1)\r\n      expect(folders.length).toBe(1)\r\n    })\r\n\r\n    it('应该能够备份和恢复数据', async () => {\r\n      // 添加测试数据\r\n      const cards = mockDataUtils.generateCards(10)\r\n      const folders = mockDataUtils.generateFolders(5)\r\n      \r\n      await db.cards.bulkAdd(cards)\r\n      await db.folders.bulkAdd(folders)\r\n      \r\n      // 备份数据\r\n      const backup = await db.backup()\r\n      expect(backup.cards).toHaveLength(10)\r\n      expect(backup.folders).toHaveLength(5)\r\n      \r\n      // 清空数据库\r\n      await db.delete()\r\n      await db.open()\r\n      \r\n      // 恢复数据\r\n      await db.restore(backup)\r\n      \r\n      // 验证恢复结果\r\n      const restoredCards = await db.cards.toArray()\r\n      const restoredFolders = await db.folders.toArray()\r\n      \r\n      expect(restoredCards).toHaveLength(10)\r\n      expect(restoredFolders).toHaveLength(5)\r\n    })\r\n  })\r\n\r\n  describe('性能监控', () => {\r\n    it('应该监控数据库操作性能', async () => {\r\n      const card = mockDataUtils.generateTestCard()\r\n      \r\n      // 监控插入性能\r\n      const insertStart = performance.now()\r\n      await db.cards.add(card)\r\n      const insertEnd = performance.now()\r\n      \r\n      // 监控查询性能\r\n      const queryStart = performance.now()\r\n      const retrievedCard = await db.cards.get(card.id)\r\n      const queryEnd = performance.now()\r\n      \r\n      // 监控更新性能\r\n      const updateStart = performance.now()\r\n      await db.cards.update(card.id, { title: 'Updated' })\r\n      const updateEnd = performance.now()\r\n      \r\n      // 验证性能指标\r\n      expect(insertEnd - insertStart).toBeLessThan(10)\r\n      expect(queryEnd - queryStart).toBeLessThan(5)\r\n      expect(updateEnd - updateStart).toBeLessThan(10)\r\n      \r\n      expect(retrievedCard).toBeDefined()\r\n    })\r\n\r\n    it('应该监控内存使用', async () => {\r\n      const initialMemory = performance.memory?.usedJSHeapSize || 0\r\n      \r\n      // 添加大量数据\r\n      const cards = mockDataUtils.generateCards(1000)\r\n      await db.cards.bulkAdd(cards)\r\n      \r\n      const finalMemory = performance.memory?.usedJSHeapSize || 0\r\n      const memoryIncrease = finalMemory - initialMemory\r\n      \r\n      // 验证内存增长在合理范围内\r\n      expect(memoryIncrease).toBeLessThan(50 * 1024 * 1024) // 小于50MB\r\n    })\r\n  })\r\n})"],"version":3}
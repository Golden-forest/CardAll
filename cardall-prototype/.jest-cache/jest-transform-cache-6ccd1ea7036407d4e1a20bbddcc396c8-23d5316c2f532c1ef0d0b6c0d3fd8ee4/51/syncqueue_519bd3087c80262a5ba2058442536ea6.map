{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\sync-queue.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\sync-queue.ts"],"sourcesContent":["import { db, type SyncOperation } from './database-unified'\nimport { localOperationService } from './local-operation'\nimport { conflictResolutionEngine } from './conflict-resolution-engine'\n\n// ============================================================================\n// 同步队列状态枚举\n// ============================================================================\n\nexport enum SyncQueueStatus {\n  PENDING = 'pending',\n  PROCESSING = 'processing',\n  COMPLETED = 'completed',\n  FAILED = 'failed',\n  RETRYING = 'retrying'\n}\n\n// ============================================================================\n// 队列操作接口\n// ============================================================================\n\nexport interface QueueOperation {\n  id: string\n  type: 'create' | 'update' | 'delete'\n  entity: 'card' | 'folder' | 'tag' | 'image'\n  entityId: string\n  userId?: string\n  data: any\n  priority: 'high' | 'normal' | 'low'\n  timestamp: Date\n  retryCount: number\n  maxRetries: number\n  status: SyncQueueStatus\n  error?: string\n  dependencies?: string[] // 依赖的操作ID\n}\n\nexport interface BatchSyncResult {\n  batchId: string\n  operations: number\n  successful: number\n  failed: number\n  errors: string[]\n  executionTime: number\n  timestamp: Date\n}\n\nexport interface QueueStats {\n  totalOperations: number\n  byStatus: Record<SyncQueueStatus, number>\n  byPriority: Record<'high' | 'normal' | 'low', number>\n  byEntity: Record<'card' | 'folder' | 'tag' | 'image', number>\n  averageWaitTime: number\n  oldestOperation?: Date\n}\n\n// ============================================================================\n// 同步队列管理器\n// ============================================================================\n\nexport class SyncQueueManager {\n  private isProcessing = false\n  private processingInterval?: NodeJS.Timeout\n  private retryDelays = [1000, 2000, 5000, 10000, 30000] // 指数退避重试延迟\n  private batchSize = 10 // 每批处理的操作数量\n  private maxConcurrentBatches = 3 // 最大并发批处理数\n  private currentBatches = 0\n  \n  // 事件监听器\n  private listeners: {\n    onOperationComplete?: (operation: QueueOperation, success: boolean) => void\n    onBatchComplete?: (result: BatchSyncResult) => void\n    onQueueError?: (error: Error) => void\n    onStatusChange?: (stats: QueueStats) => void\n  } = {}\n\n  constructor() {\n    this.initializeQueue()\n    this.startQueueProcessor()\n  }\n\n  // ============================================================================\n  // 核心队列操作\n  // ============================================================================\n\n  /**\n   * 添加操作到同步队列\n   */\n  async enqueueOperation(operation: Omit<QueueOperation, 'id' | 'status' | 'timestamp'>): Promise<string> {\n    const queueOperation: QueueOperation = {\n      ...operation,\n      id: crypto.randomUUID(),\n      status: SyncQueueStatus.PENDING,\n      timestamp: new Date()\n    }\n\n    try {\n      // 检查依赖关系\n      if (operation.dependencies && operation.dependencies.length > 0) {\n        await this.validateDependencies(operation.dependencies)\n      }\n\n      await db.syncQueue.add({\n        id: queueOperation.id,\n        type: operation.type,\n        entity: operation.entity,\n        entityId: operation.entityId,\n        userId: operation.userId,\n        data: operation.data,\n        priority: operation.priority,\n        timestamp: queueOperation.timestamp,\n        retryCount: operation.retryCount,\n        maxRetries: operation.maxRetries,\n        error: operation.error\n      })\n\n      this.notifyStatusChange()\n      \n      // 如果有高优先级操作，立即触发处理\n      if (operation.priority === 'high' && !this.isProcessing) {\n        this.processNextBatch()\n      }\n\n      return queueOperation.id\n    } catch (error) {\n      console.error('Failed to enqueue operation:', error)\n      throw error\n    }\n  }\n\n  /**\n   * 批量添加操作到同步队列\n   */\n  async enqueueBatch(operations: Omit<QueueOperation, 'id' | 'status' | 'timestamp'>[]): Promise<string[]> {\n    const queueOperations = operations.map(op => ({\n      ...op,\n      id: crypto.randomUUID(),\n      status: SyncQueueStatus.PENDING as SyncQueueStatus,\n      timestamp: new Date()\n    }))\n\n    try {\n      // 验证所有操作的依赖关系\n      const allDependencies = queueOperations\n        .filter(op => op.dependencies && op.dependencies.length > 0)\n        .flatMap(op => op.dependencies!)\n      \n      if (allDependencies.length > 0) {\n        await this.validateDependencies(allDependencies)\n      }\n\n      const syncOperations = queueOperations.map(op => ({\n        id: op.id,\n        type: op.type,\n        entity: op.entity,\n        entityId: op.entityId,\n        userId: op.userId,\n        data: op.data,\n        priority: op.priority,\n        timestamp: op.timestamp,\n        retryCount: op.retryCount,\n        maxRetries: op.maxRetries,\n        error: op.error\n      }))\n\n      await db.syncQueue.bulkAdd(syncOperations)\n      this.notifyStatusChange()\n\n      // 返回操作ID列表\n      return queueOperations.map(op => op.id)\n    } catch (error) {\n      console.error('Failed to enqueue batch operations:', error)\n      throw error\n    }\n  }\n\n  /**\n   * 从队列中移除操作\n   */\n  async dequeueOperation(operationId: string): Promise<boolean> {\n    try {\n      const deleted = await db.syncQueue.where('id').equals(operationId).delete()\n      this.notifyStatusChange()\n      return deleted > 0\n    } catch (error) {\n      console.error('Failed to dequeue operation:', error)\n      return false\n    }\n  }\n\n  /**\n   * 更新操作状态\n   */\n  async updateOperationStatus(\n    operationId: string, \n    status: SyncQueueStatus, \n    error?: string\n  ): Promise<void> {\n    try {\n      await db.syncQueue.where('id').equals(operationId).modify({\n        status,\n        error,\n        ...(status === SyncQueueStatus.PROCESSING ? { retryCount: Dexie.currentTransaction?.table('syncQueue').get(operationId).then(op => (op?.retryCount || 0) + 1) } : {})\n      })\n      \n      this.notifyStatusChange()\n      \n      // 通知操作完成\n      const operation = await db.syncQueue.get(operationId)\n      if (operation && this.listeners.onOperationComplete) {\n        this.listeners.onOperationComplete(\n          this.convertSyncOperationToQueueOperation(operation),\n          status === SyncQueueStatus.COMPLETED\n        )\n      }\n    } catch (error) {\n      console.error('Failed to update operation status:', error)\n    }\n  }\n\n  // ============================================================================\n  // 队列处理逻辑\n  // ============================================================================\n\n  /**\n   * 处理下一批操作\n   */\n  private async processNextBatch(): Promise<void> {\n    if (this.isProcessing || this.currentBatches >= this.maxConcurrentBatches) {\n      return\n    }\n\n    this.isProcessing = true\n    this.currentBatches++\n\n    try {\n      // 获取下一批待处理操作\n      const operations = await this.getNextBatch()\n      \n      if (operations.length === 0) {\n        this.isProcessing = false\n        this.currentBatches--\n        return\n      }\n\n      // 标记操作为处理中\n      const operationIds = operations.map(op => op.id)\n      await this.markOperationsProcessing(operationIds)\n\n      // 处理批次\n      const batchResult = await this.processBatch(operations)\n\n      // 通知批处理完成\n      if (this.listeners.onBatchComplete) {\n        this.listeners.onBatchComplete(batchResult)\n      }\n\n    } catch (error) {\n      console.error('Error processing batch:', error)\n      if (this.listeners.onQueueError) {\n        this.listeners.onQueueError(error instanceof Error ? error : new Error(String(error)))\n      }\n    } finally {\n      this.isProcessing = false\n      this.currentBatches--\n      \n      // 如果还有待处理操作，继续处理\n      setTimeout(() => this.processNextBatch(), 100)\n    }\n  }\n\n  /**\n   * 获取下一批待处理操作\n   */\n  private async getNextBatch(): Promise<SyncOperation[]> {\n    try {\n      // 按优先级和时间排序获取操作\n      return await db.syncQueue\n        .where('status')\n        .equals('pending' as any)\n        .orderBy('priority') // 高优先级先处理\n        .reverse()\n        .offset(0)\n        .limit(this.batchSize)\n        .toArray()\n    } catch (error) {\n      console.error('Failed to get next batch:', error)\n      return []\n    }\n  }\n\n  /**\n   * 标记操作为处理中\n   */\n  private async markOperationsProcessing(operationIds: string[]): Promise<void> {\n    await db.syncQueue\n      .where('id')\n      .anyOf(operationIds)\n      .modify({ status: 'processing' as any })\n  }\n\n  /**\n   * 处理一批同步操作\n   */\n  private async processBatch(operations: SyncOperation[]): Promise<BatchSyncResult> {\n    const batchId = crypto.randomUUID()\n    const startTime = performance.now()\n    const successful: string[] = []\n    const failed: string[] = []\n    const errors: string[] = []\n\n    try {\n      // 这里应该调用实际的同步服务\n      // 为了演示，我们模拟同步过程\n      for (const operation of operations) {\n        try {\n          const success = await this.executeSyncOperation(operation)\n          \n          if (success) {\n            successful.push(operation.id)\n            await this.updateOperationStatus(operation.id, SyncQueueStatus.COMPLETED)\n          } else {\n            failed.push(operation.id)\n            errors.push(`Sync failed for operation ${operation.id}`)\n            await this.handleOperationFailure(operation, 'Sync execution failed')\n          }\n        } catch (error) {\n          failed.push(operation.id)\n          const errorMsg = error instanceof Error ? error.message : String(error)\n          errors.push(errorMsg)\n          await this.handleOperationFailure(operation, errorMsg)\n        }\n      }\n\n      const executionTime = performance.now() - startTime\n\n      return {\n        batchId,\n        operations: operations.length,\n        successful: successful.length,\n        failed: failed.length,\n        errors,\n        executionTime,\n        timestamp: new Date()\n      }\n    } catch (error) {\n      const executionTime = performance.now() - startTime\n      const errorMsg = error instanceof Error ? error.message : String(error)\n      \n      // 标记所有操作为失败\n      for (const operation of operations) {\n        await this.handleOperationFailure(operation, errorMsg)\n      }\n\n      return {\n        batchId,\n        operations: operations.length,\n        successful: 0,\n        failed: operations.length,\n        errors: [errorMsg],\n        executionTime,\n        timestamp: new Date()\n      }\n    }\n  }\n\n  /**\n   * 执行单个同步操作 - 增强版，集成冲突解决\n   */\n  private async executeSyncOperation(operation: SyncOperation): Promise<boolean> {\n    try {\n      // 在执行前进行冲突预测和预防\n      const conflictAnalysis = await this.analyzeOperationConflicts(operation)\n      \n      if (conflictAnalysis.highRisk > 0) {\n        console.warn(`High conflict risk detected for operation ${operation.id}, applying conflict resolution`)\n        return await this.executeWithConflictResolution(operation, conflictAnalysis)\n      }\n      \n      // 正常执行同步操作\n      return await this.performSyncOperation(operation)\n    } catch (error) {\n      console.error(`Sync operation failed for ${operation.id}:`, error)\n      return false\n    }\n  }\n  \n  /**\n   * 分析操作冲突风险\n   */\n  private async analyzeOperationConflicts(operation: SyncOperation): Promise<{\n    highRisk: number\n    mediumRisk: number\n    lowRisk: number\n    recommendations: string[]\n  }> {\n    try {\n      // 获取同一实体的最近操作\n      const recentOperations = await db.syncQueue\n        .where('entityId')\n        .equals(operation.entityId)\n        .filter(op => {\n          const timeDiff = Math.abs(op.timestamp.getTime() - operation.timestamp.getTime())\n          return timeDiff < 5 * 60 * 1000 && op.id !== operation.id\n        })\n        .toArray()\n      \n      let highRisk = 0\n      let mediumRisk = 0\n      let lowRisk = 0\n      const recommendations: string[] = []\n      \n      // 分析并发操作风险\n      if (recentOperations.length > 2) {\n        highRisk++\n        recommendations.push('Multiple concurrent operations on same entity')\n      }\n      \n      // 分析用户操作频率\n      const userRecentOps = await db.syncQueue\n        .where('userId')\n        .equals(operation.userId)\n        .filter(op => {\n          const timeDiff = Date.now() - op.timestamp.getTime()\n          return timeDiff < 60 * 1000\n        })\n        .toArray()\n      \n      if (userRecentOps.length > 10) {\n        highRisk++\n        recommendations.push('User operating too frequently')\n      }\n      \n      // 分析历史失败率\n      const failedOps = await db.syncQueue\n        .where('entity')\n        .equals(operation.entity)\n        .filter(op => op.status === 'failed' as any)\n        .toArray()\n      \n      const failureRate = failedOps.length / Math.max(1, await db.syncQueue.count())\n      \n      if (failureRate > 0.3) {\n        mediumRisk++\n        recommendations.push(`High failure rate (${(failureRate * 100).toFixed(1)}%) for entity type`)\n      }\n      \n      // 根据操作类型分析风险\n      if (operation.type === 'delete') {\n        mediumRisk++\n        recommendations.push('Delete operations require extra caution')\n      }\n      \n      return { highRisk, mediumRisk, lowRisk, recommendations }\n    } catch (error) {\n      console.error('Failed to analyze operation conflicts:', error)\n      return { highRisk: 0, mediumRisk: 1, lowRisk: 0, recommendations: ['Unable to analyze conflicts'] }\n    }\n  }\n  \n  /**\n   * 带冲突解决的同步操作执行\n   */\n  private async executeWithConflictResolution(\n    operation: SyncOperation, \n    conflictAnalysis: any\n  ): Promise<boolean> {\n    try {\n      // 构建冲突上下文\n      const conflictContext = {\n        userId: operation.userId || '',\n        timestamp: new Date(),\n        networkInfo: { effectiveType: '4g' }, // 简化网络信息\n        deviceInfo: { deviceType: 'unknown' },\n        userPreferences: {},\n        syncHistory: []\n      }\n      \n      // 获取当前云端数据（模拟）\n      const cloudData = await this.fetchCloudData(operation)\n      \n      // 获取本地数据\n      const localData = await this.fetchLocalData(operation)\n      \n      // 使用冲突解决引擎检测和解决冲突\n      const conflicts = await conflictResolutionEngine.detectAllConflicts(\n        localData,\n        cloudData,\n        operation.entity,\n        operation.entityId,\n        conflictContext\n      )\n      \n      if (conflicts.length > 0) {\n        console.log(`Detected ${conflicts.length} conflicts for operation ${operation.id}`)\n        \n        // 尝试自动解决冲突\n        const resolvedConflicts = await conflictResolutionEngine.resolveConflicts(\n          conflicts,\n          conflictContext\n        )\n        \n        // 检查是否所有冲突都已解决\n        const unresolvedConflicts = resolvedConflicts.filter(c => c.resolution === 'manual')\n        \n        if (unresolvedConflicts.length > 0) {\n          console.warn(`Unable to auto-resolve ${unresolvedConflicts.length} conflicts for operation ${operation.id}`)\n          return false\n        }\n        \n        // 使用解决后的数据执行同步\n        const resolvedData = this.extractResolvedData(resolvedConflicts, localData, cloudData)\n        return await this.performSyncOperation({ ...operation, data: resolvedData })\n      }\n      \n      // 无冲突，正常执行\n      return await this.performSyncOperation(operation)\n    } catch (error) {\n      console.error(`Conflict resolution failed for operation ${operation.id}:`, error)\n      return false\n    }\n  }\n  \n  /**\n   * 执行实际的同步操作\n   */\n  private async performSyncOperation(operation: SyncOperation): Promise<boolean> {\n    // 模拟实际的同步逻辑\n    await new Promise(resolve => setTimeout(resolve, Math.random() * 200 + 100))\n    \n    // 根据操作类型执行相应的同步逻辑\n    switch (operation.type) {\n      case 'create':\n        return await this.performCreateOperation(operation)\n      case 'update':\n        return await this.performUpdateOperation(operation)\n      case 'delete':\n        return await this.performDeleteOperation(operation)\n      default:\n        console.warn(`Unknown operation type: ${operation.type}`)\n        return false\n    }\n  }\n  \n  /**\n   * 获取云端数据\n   */\n  private async fetchCloudData(operation: SyncOperation): Promise<any> {\n    // 模拟从云端获取数据\n    // 在实际实现中，这里会调用Supabase API\n    return {\n      id: operation.entityId,\n      updatedAt: new Date().toISOString(),\n      version: Math.floor(Math.random() * 100)\n    }\n  }\n  \n  /**\n   * 获取本地数据\n   */\n  private async fetchLocalData(operation: SyncOperation): Promise<any> {\n    // 模拟从本地数据库获取数据\n    return {\n      id: operation.entityId,\n      updatedAt: new Date().toISOString(),\n      version: Math.floor(Math.random() * 100),\n      ...operation.data\n    }\n  }\n  \n  /**\n   * 提取解决后的数据\n   */\n  private extractResolvedData(conflicts: any[], localData: any, cloudData: any): any {\n    // 简化的数据提取逻辑\n    // 在实际实现中，这里会根据冲突解决结果合并数据\n    return {\n      ...localData,\n      resolvedAt: new Date().toISOString(),\n      conflictCount: conflicts.length\n    }\n  }\n  \n  /**\n   * 执行创建操作\n   */\n  private async performCreateOperation(operation: SyncOperation): Promise<boolean> {\n    // 模拟创建操作的成功率\n    const successRate = operation.priority === 'high' ? 0.95 : 0.85\n    return Math.random() < successRate\n  }\n  \n  /**\n   * 执行更新操作\n   */\n  private async performUpdateOperation(operation: SyncOperation): Promise<boolean> {\n    // 模拟更新操作的成功率\n    const successRate = operation.priority === 'high' ? 0.90 : 0.80\n    return Math.random() < successRate\n  }\n  \n  /**\n   * 执行删除操作\n   */\n  private async performDeleteOperation(operation: SyncOperation): Promise<boolean> {\n    // 删除操作成功率较低，需要更谨慎\n    const successRate = operation.priority === 'high' ? 0.85 : 0.75\n    return Math.random() < successRate\n  }\n\n  /**\n   * 处理操作失败\n   */\n  private async handleOperationFailure(operation: SyncOperation, error: string): Promise<void> {\n    const newRetryCount = operation.retryCount + 1\n    \n    if (newRetryCount >= operation.maxRetries) {\n      // 达到最大重试次数，标记为失败\n      await this.updateOperationStatus(operation.id, SyncQueueStatus.FAILED, error)\n    } else {\n      // 计算下次重试时间\n      const retryDelay = this.retryDelays[Math.min(newRetryCount - 1, this.retryDelays.length - 1)]\n      \n      // 标记为重试中，并设置延迟\n      await db.syncQueue.where('id').equals(operation.id).modify({\n        retryCount: newRetryCount,\n        status: 'retrying' as any,\n        error,\n        // 可以添加下次重试时间字段\n      })\n      \n      // 延迟后重新加入队列\n      setTimeout(async () => {\n        await db.syncQueue.where('id').equals(operation.id).modify({\n          status: 'pending' as any\n        })\n        this.notifyStatusChange()\n      }, retryDelay)\n    }\n  }\n\n  // ============================================================================\n  // 依赖关系管理\n  // ============================================================================\n\n  /**\n   * 验证操作依赖关系\n   */\n  private async validateDependencies(dependencyIds: string[]): Promise<void> {\n    const pendingDependencies = await db.syncQueue\n      .where('id')\n      .anyOf(dependencyIds)\n      .and(op => op.status === 'pending' || op.status === 'processing')\n      .count()\n\n    if (pendingDependencies > 0) {\n      throw new Error(`Cannot enqueue operation: ${pendingDependencies} dependencies are still pending`)\n    }\n  }\n\n  /**\n   * 检查操作是否可以执行（所有依赖已完成）\n   */\n  private async canExecuteOperation(operation: QueueOperation): Promise<boolean> {\n    if (!operation.dependencies || operation.dependencies.length === 0) {\n      return true\n    }\n\n    const dependencyStatuses = await db.syncQueue\n      .where('id')\n      .anyOf(operation.dependencies)\n      .toArray()\n\n    return dependencyStatuses.every(dep => dep.status === 'completed')\n  }\n\n  // ============================================================================\n  // 队列管理和监控\n  // ============================================================================\n\n  /**\n   * 获取队列统计信息\n   */\n  async getQueueStats(): Promise<QueueStats> {\n    const allOperations = await db.syncQueue.toArray()\n    \n    const stats: QueueStats = {\n      totalOperations: allOperations.length,\n      byStatus: {\n        [SyncQueueStatus.PENDING]: 0,\n        [SyncQueueStatus.PROCESSING]: 0,\n        [SyncQueueStatus.COMPLETED]: 0,\n        [SyncQueueStatus.FAILED]: 0,\n        [SyncQueueStatus.RETRYING]: 0\n      },\n      byPriority: {\n        high: 0,\n        normal: 0,\n        low: 0\n      },\n      byEntity: {\n        card: 0,\n        folder: 0,\n        tag: 0,\n        image: 0\n      },\n      averageWaitTime: 0\n    }\n\n    // 统计各类别数量\n    allOperations.forEach(op => {\n      stats.byStatus[op.status]++\n      stats.byPriority[op.priority]++\n      stats.byEntity[op.entity]++\n    })\n\n    // 计算平均等待时间\n    const pendingOperations = allOperations.filter(op => \n      op.status === SyncQueueStatus.PENDING || op.status === SyncQueueStatus.RETRYING\n    )\n    \n    if (pendingOperations.length > 0) {\n      const now = Date.now()\n      const totalWaitTime = pendingOperations.reduce((sum, op) => {\n        return sum + (now - new Date(op.timestamp).getTime())\n      }, 0)\n      stats.averageWaitTime = totalWaitTime / pendingOperations.length\n    }\n\n    // 找到最旧的操作\n    const oldest = allOperations\n      .filter(op => op.status === SyncQueueStatus.PENDING)\n      .sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime())[0]\n    \n    if (oldest) {\n      stats.oldestOperation = new Date(oldest.timestamp)\n    }\n\n    return stats\n  }\n\n  /**\n   * 清理完成的操作\n   */\n  async cleanupCompletedOperations(olderThan: number = 24 * 60 * 60 * 1000): Promise<number> {\n    const cutoffDate = new Date(Date.now() - olderThan)\n    \n    const deleted = await db.syncQueue\n      .where('status')\n      .equals('completed' as any)\n      .and(op => new Date(op.timestamp) < cutoffDate)\n      .delete()\n\n    this.notifyStatusChange()\n    return deleted\n  }\n\n  /**\n   * 重试失败的操作\n   */\n  async retryFailedOperations(): Promise<number> {\n    const retried = await db.syncQueue\n      .where('status')\n      .equals('failed' as any)\n      .modify({\n        status: 'pending' as any,\n        retryCount: 0,\n        error: undefined\n      })\n\n    this.notifyStatusChange()\n    \n    // 触发重新处理\n    if (retried > 0) {\n      this.processNextBatch()\n    }\n    \n    return retried\n  }\n\n  /**\n   * 获取队列中的操作\n   */\n  async getOperations(filters?: {\n    status?: SyncQueueStatus\n    priority?: 'high' | 'normal' | 'low'\n    entity?: 'card' | 'folder' | 'tag' | 'image'\n    userId?: string\n    limit?: number\n    offset?: number\n  }): Promise<QueueOperation[]> {\n    let query = db.syncQueue.toCollection()\n\n    if (filters?.status) {\n      query = query.where('status').equals(filters.status as any)\n    }\n\n    if (filters?.priority) {\n      query = query.where('priority').equals(filters.priority)\n    }\n\n    if (filters?.entity) {\n      query = query.where('entity').equals(filters.entity)\n    }\n\n    if (filters?.userId) {\n      query = query.where('userId').equals(filters.userId)\n    }\n\n    if (filters?.offset) {\n      query = query.offset(filters.offset)\n    }\n\n    if (filters?.limit) {\n      query = query.limit(filters.limit)\n    }\n\n    const operations = await query.toArray()\n    return operations.map(op => this.convertSyncOperationToQueueOperation(op))\n  }\n\n  // ============================================================================\n  // 事件监听器管理\n  // ============================================================================\n\n  setEventListeners(listeners: typeof SyncQueueManager.prototype.listeners): void {\n    this.listeners = { ...this.listeners, ...listeners }\n  }\n\n  private notifyStatusChange(): void {\n    if (this.listeners.onStatusChange) {\n      this.getQueueStats().then(stats => {\n        this.listeners.onStatusChange!(stats)\n      }).catch(console.error)\n    }\n  }\n\n  // ============================================================================\n  // 队列处理器管理\n  // ============================================================================\n\n  private initializeQueue(): void {\n    // 初始化时检查是否有未完成的重试操作\n    this.checkRetryOperations()\n  }\n\n  private startQueueProcessor(): void {\n    // 定期处理队列\n    this.processingInterval = setInterval(() => {\n      if (!this.isProcessing) {\n        this.processNextBatch()\n      }\n    }, 5000) // 每5秒检查一次队列\n    \n    // 定期优化队列处理策略（每2分钟）\n    setInterval(() => {\n      this.optimizeQueueProcessing().catch(console.error)\n    }, 120000)\n\n    // 网络恢复时立即处理\n    window.addEventListener('online', () => {\n      if (!this.isProcessing) {\n        this.processNextBatch()\n      }\n    })\n  }\n\n  private async checkRetryOperations(): Promise<void> {\n    try {\n      const retryingOperations = await db.syncQueue\n        .where('status')\n        .equals('retrying' as any)\n        .toArray()\n\n      // 将重试中的操作重新设为待处理\n      for (const operation of retryingOperations) {\n        await db.syncQueue.where('id').equals(operation.id).modify({\n          status: 'pending' as any\n        })\n      }\n\n      if (retryingOperations.length > 0) {\n        this.notifyStatusChange()\n        this.processNextBatch()\n      }\n    } catch (error) {\n      console.error('Failed to check retry operations:', error)\n    }\n  }\n\n  /**\n   * 停止队列处理器\n   */\n  stop(): void {\n    if (this.processingInterval) {\n      clearInterval(this.processingInterval)\n      this.processingInterval = undefined\n    }\n  }\n\n  /**\n   * 暂停队列处理\n   */\n  pause(): void {\n    this.isProcessing = true\n  }\n\n  /**\n   * 恢复队列处理\n   */\n  resume(): void {\n    this.isProcessing = false\n    this.processNextBatch()\n  }\n\n  // ============================================================================\n  // 辅助方法\n  // ============================================================================\n\n  private convertSyncOperationToQueueOperation(syncOp: SyncOperation): QueueOperation {\n    return {\n      id: syncOp.id!,\n      type: syncOp.type,\n      entity: syncOp.entity,\n      entityId: syncOp.entityId,\n      userId: syncOp.userId,\n      data: syncOp.data,\n      priority: syncOp.priority,\n      timestamp: new Date(syncOp.timestamp),\n      retryCount: syncOp.retryCount,\n      maxRetries: syncOp.maxRetries,\n      status: syncOp.status as SyncQueueStatus,\n      error: syncOp.error\n    }\n  }\n\n  // ============================================================================\n  // 智能队列管理优化 - Week 2 Day 6-7\n  // ============================================================================\n\n  /**\n   * 智能队列优化 - 基于网络状态和操作特征动态调整队列策略\n   */\n  async optimizeQueueProcessing(): Promise<void> {\n    try {\n      const stats = await this.getQueueStats()\n      \n      // 根据队列状态动态调整处理策略\n      this.adjustProcessingStrategy(stats)\n      \n      // 智能批量大小调整\n      this.adjustBatchSize(stats)\n      \n      // 优先级重新平衡\n      await this.rebalancePriorities(stats)\n      \n      // 清理过期操作\n      await this.cleanupExpiredOperations()\n      \n    } catch (error) {\n      console.error('Failed to optimize queue processing:', error)\n    }\n  }\n\n  /**\n   * 根据队列状态调整处理策略\n   */\n  private adjustProcessingStrategy(stats: QueueStats): void {\n    const { totalOperations, byStatus, byPriority } = stats\n    \n    // 高负载策略\n    if (totalOperations > 1000) {\n      this.batchSize = 5 // 减少批量大小\n      this.maxConcurrentBatches = 2 // 减少并发数\n      console.log('Queue under high load, adjusting strategy: batch=5, concurrent=2')\n    }\n    // 中负载策略\n    else if (totalOperations > 500) {\n      this.batchSize = 8\n      this.maxConcurrentBatches = 3\n      console.log('Queue under medium load, adjusting strategy: batch=8, concurrent=3')\n    }\n    // 低负载策略\n    else {\n      this.batchSize = 15 // 增加批量大小\n      this.maxConcurrentBatches = 5 // 增加并发数\n      console.log('Queue under normal load, adjusting strategy: batch=15, concurrent=5')\n    }\n    \n    // 根据失败率调整重试策略\n    const failureRate = byStatus[SyncQueueStatus.FAILED] / totalOperations\n    if (failureRate > 0.3) {\n      // 失败率高，增加重试延迟\n      this.retryDelays = [2000, 5000, 15000, 30000, 60000]\n      console.log('High failure rate detected, increased retry delays')\n    } else if (failureRate < 0.1) {\n      // 失败率低，恢复正常重试延迟\n      this.retryDelays = [1000, 2000, 5000, 10000, 30000]\n      console.log('Normal failure rate, restored retry delays')\n    }\n  }\n\n  /**\n   * 动态调整批量大小\n   */\n  private adjustBatchSize(stats: QueueStats): void {\n    const { byPriority, totalOperations } = stats\n    \n    // 高优先级操作比例\n    const highPriorityRatio = byPriority.high / totalOperations\n    \n    // 如果高优先级操作多，减少批量大小以确保及时处理\n    if (highPriorityRatio > 0.3) {\n      this.batchSize = Math.max(3, Math.floor(this.batchSize * 0.7))\n      console.log(`High priority ratio (${(highPriorityRatio * 100).toFixed(1)}%), reduced batch size to ${this.batchSize}`)\n    }\n    \n    // 根据操作类型分布调整\n    const cardRatio = byEntity.card / totalOperations\n    if (cardRatio > 0.7) {\n      // 卡片操作占比大，可以适当增加批量大小\n      this.batchSize = Math.min(20, Math.floor(this.batchSize * 1.2))\n      console.log(`Card operation ratio (${(cardRatio * 100).toFixed(1)}%), increased batch size to ${this.batchSize}`)\n    }\n  }\n\n  /**\n   * 优先级重新平衡\n   */\n  private async rebalancePriorities(stats: QueueStats): Promise<void> {\n    const { byStatus, byPriority } = stats\n    \n    // 将长时间等待的高优先级操作重新标记为关键\n    const oldHighPriorityOps = await db.syncQueue\n      .where('priority')\n      .equals('high')\n      .filter(op => {\n        const waitTime = Date.now() - op.timestamp.getTime()\n        return waitTime > 5 * 60 * 1000 // 等待超过5分钟\n      })\n      .toArray()\n    \n    if (oldHighPriorityOps.length > 0) {\n      await db.syncQueue\n        .where('id')\n        .anyOf(oldHighPriorityOps.map(op => op.id))\n        .modify({ priority: 'high' as const })\n      \n      console.log(`Escalated ${oldHighPriorityOps.length} old high-priority operations`)\n    }\n    \n    // 将长时间等待的普通操作提升优先级\n    const oldNormalOps = await db.syncQueue\n      .where('priority')\n      .equals('normal')\n      .filter(op => {\n        const waitTime = Date.now() - op.timestamp.getTime()\n        return waitTime > 10 * 60 * 1000 // 等待超过10分钟\n      })\n      .toArray()\n    \n    if (oldNormalOps.length > 0) {\n      await db.syncQueue\n        .where('id')\n        .anyOf(oldNormalOps.map(op => op.id))\n        .modify({ priority: 'high' as const })\n      \n      console.log(`Escalated ${oldNormalOps.length} old normal-priority operations`)\n    }\n  }\n\n  /**\n   * 清理过期操作\n   */\n  private async cleanupExpiredOperations(): Promise<void> {\n    const expiredTime = Date.now() - 24 * 60 * 60 * 1000 // 24小时前\n    \n    const expiredOperations = await db.syncQueue\n      .where('timestamp')\n      .below(expiredTime)\n      .filter(op => op.status === SyncQueueStatus.FAILED)\n      .toArray()\n    \n    if (expiredOperations.length > 0) {\n      for (const op of expiredOperations) {\n        await db.syncQueue.delete(op.id)\n      }\n      \n      console.log(`Cleaned up ${expiredOperations.length} expired failed operations`)\n    }\n  }\n\n  /**\n   * 智能冲突预测和预防\n   */\n  async predictAndPreventConflicts(operations: QueueOperation[]): Promise<{\n    safeOperations: QueueOperation[]\n    riskyOperations: QueueOperation[]\n    conflictPrediction: {\n      highRisk: number\n      mediumRisk: number\n      lowRisk: number\n    }\n  }> {\n    const safeOperations: QueueOperation[] = []\n    const riskyOperations: QueueOperation[] = []\n    const conflictPrediction = { highRisk: 0, mediumRisk: 0, lowRisk: 0 }\n    \n    for (const operation of operations) {\n      const risk = await this.assessConflictRisk(operation)\n      \n      if (risk === 'high') {\n        riskyOperations.push(operation)\n        conflictPrediction.highRisk++\n      } else if (risk === 'medium') {\n        riskyOperations.push(operation)\n        conflictPrediction.mediumRisk++\n      } else {\n        safeOperations.push(operation)\n        conflictPrediction.lowRisk++\n      }\n    }\n    \n    return { safeOperations, riskyOperations, conflictPrediction }\n  }\n\n  /**\n   * 评估单个操作的冲突风险\n   */\n  private async assessConflictRisk(operation: QueueOperation): Promise<'high' | 'medium' | 'low'> {\n    try {\n      // 检查同一实体的最近操作\n      const recentOperations = await db.syncQueue\n        .where('entityId')\n        .equals(operation.entityId)\n        .filter(op => {\n          const timeDiff = Math.abs(op.timestamp.getTime() - operation.timestamp.getTime())\n          return timeDiff < 5 * 60 * 1000 && // 5分钟内\n                 op.id !== operation.id\n        })\n        .toArray()\n      \n      if (recentOperations.length > 2) {\n        return 'high' // 同一实体有多个并发操作\n      }\n      \n      // 检查用户操作频率\n      const userRecentOps = await db.syncQueue\n        .where('userId')\n        .equals(operation.userId)\n        .filter(op => {\n          const timeDiff = Date.now() - op.timestamp.getTime()\n          return timeDiff < 60 * 1000 // 1分钟内\n        })\n        .toArray()\n      \n      if (userRecentOps.length > 10) {\n        return 'high' // 用户操作过于频繁\n      }\n      \n      // 检查历史失败率\n      const failedOps = await db.syncQueue\n        .where('entity')\n        .equals(operation.entity)\n        .filter(op => op.status === SyncQueueStatus.FAILED)\n        .toArray()\n      \n      const failureRate = failedOps.length / Math.max(1, await db.syncQueue.count())\n      \n      if (failureRate > 0.3) {\n        return 'medium' // 历史失败率较高\n      }\n      \n      return 'low'\n    } catch (error) {\n      console.error('Failed to assess conflict risk:', error)\n      return 'medium' // 默认中等风险\n    }\n  }\n\n  /**\n   * 获取队列性能指标 - 增强版\n   */\n  async getQueuePerformanceMetrics(): Promise<{\n    throughput: number\n    averageProcessingTime: number\n    successRate: number\n    queueEfficiency: number\n    bottleneckAnalysis: string[]\n    conflictResolutionRate: number\n    resourceUtilization: number\n    predictiveInsights: {\n      predictedLoad: number\n      recommendedActions: string[]\n      riskAssessment: 'low' | 'medium' | 'high'\n    }\n  }> {\n    try {\n      const stats = await this.getQueueStats()\n      \n      // 计算吞吐量（每分钟处理的操作数）\n      const recentCompleted = await db.syncQueue\n        .where('status')\n        .equals(SyncQueueStatus.COMPLETED)\n        .filter(op => {\n          const timeDiff = Date.now() - op.timestamp.getTime()\n          return timeDiff < 60 * 1000 // 最近1分钟\n        })\n        .toArray()\n      \n      const throughput = recentCompleted.length\n      \n      // 计算平均处理时间\n      const processingTimes = await Promise.all(\n        recentCompleted.map(async op => {\n          const updatedOp = await db.syncQueue.get(op.id)\n          return updatedOp?.processingTime || 0\n        })\n      )\n      \n      const averageProcessingTime = processingTimes.length > 0 \n        ? processingTimes.reduce((sum, time) => sum + time, 0) / processingTimes.length \n        : 0\n      \n      // 计算成功率\n      const totalRecent = await db.syncQueue\n        .filter(op => {\n          const timeDiff = Date.now() - op.timestamp.getTime()\n          return timeDiff < 60 * 1000\n        })\n        .toArray()\n      \n      const successRate = totalRecent.length > 0 \n        ? recentCompleted.length / totalRecent.length \n        : 1\n      \n      // 计算队列效率（0-1）\n      const queueEfficiency = this.calculateQueueEfficiency(stats, throughput)\n      \n      // 计算冲突解决率\n      const conflictResolutionRate = await this.calculateConflictResolutionRate()\n      \n      // 计算资源利用率\n      const resourceUtilization = this.calculateResourceUtilization(stats, throughput)\n      \n      // 瓶颈分析\n      const bottleneckAnalysis = this.analyzeBottlenecks(stats, throughput, averageProcessingTime)\n      \n      // 预测性分析\n      const predictiveInsights = await this.generatePredictiveInsights(stats, throughput)\n      \n      return {\n        throughput,\n        averageProcessingTime,\n        successRate,\n        queueEfficiency,\n        bottleneckAnalysis,\n        conflictResolutionRate,\n        resourceUtilization,\n        predictiveInsights\n      }\n    } catch (error) {\n      console.error('Failed to get queue performance metrics:', error)\n      return {\n        throughput: 0,\n        averageProcessingTime: 0,\n        successRate: 0,\n        queueEfficiency: 0,\n        bottleneckAnalysis: ['Unable to analyze performance'],\n        conflictResolutionRate: 0,\n        resourceUtilization: 0,\n        predictiveInsights: {\n          predictedLoad: 0,\n          recommendedActions: ['Enable performance monitoring'],\n          riskAssessment: 'medium'\n        }\n      }\n    }\n  }\n  \n  /**\n   * 计算冲突解决率\n   */\n  private async calculateConflictResolutionRate(): Promise<number> {\n    try {\n      const recentOperations = await db.syncQueue\n        .filter(op => {\n          const timeDiff = Date.now() - op.timestamp.getTime()\n          return timeDiff < 30 * 60 * 1000 // 最近30分钟\n        })\n        .toArray()\n      \n      if (recentOperations.length === 0) return 1\n      \n      const resolvedCount = recentOperations.filter(op => \n        op.status === 'completed' && op.error === null\n      ).length\n      \n      return resolvedCount / recentOperations.length\n    } catch (error) {\n      console.error('Failed to calculate conflict resolution rate:', error)\n      return 0\n    }\n  }\n  \n  /**\n   * 计算资源利用率\n   */\n  private calculateResourceUtilization(stats: QueueStats, throughput: number): number {\n    // 基于队列状态和吞吐量计算资源利用率\n    let utilization = 0.3 // 基础利用率\n    \n    // 根据待处理操作数量增加利用率\n    if (stats.totalOperations > 500) utilization += 0.4\n    else if (stats.totalOperations > 200) utilization += 0.2\n    else if (stats.totalOperations > 50) utilization += 0.1\n    \n    // 根据吞吐量调整\n    if (throughput > 15) utilization += 0.2\n    else if (throughput > 8) utilization += 0.1\n    \n    // 根据失败率调整\n    const failureRate = stats.byStatus[SyncQueueStatus.FAILED] / Math.max(1, stats.totalOperations)\n    if (failureRate > 0.2) utilization -= 0.1\n    \n    return Math.max(0, Math.min(1, utilization))\n  }\n  \n  /**\n   * 生成预测性分析\n   */\n  private async generatePredictiveInsights(stats: QueueStats, currentThroughput: number): Promise<{\n    predictedLoad: number\n    recommendedActions: string[]\n    riskAssessment: 'low' | 'medium' | 'high'\n  }> {\n    const recommendedActions: string[] = []\n    let riskAssessment: 'low' | 'medium' | 'high' = 'low'\n    \n    // 基于历史数据预测负载\n    const predictedLoad = await this.predictFutureLoad(stats, currentThroughput)\n    \n    // 分析趋势并提供建议\n    if (predictedLoad > 1000) {\n      recommendedActions.push('Consider increasing batch size and concurrency')\n      riskAssessment = 'high'\n    } else if (predictedLoad > 500) {\n      recommendedActions.push('Monitor queue growth closely')\n      recommendedActions.push('Consider enabling aggressive cleanup')\n      riskAssessment = 'medium'\n    }\n    \n    // 分析性能趋势\n    if (currentThroughput < 5) {\n      recommendedActions.push('Investigate low throughput causes')\n      recommendedActions.push('Check network connectivity')\n    }\n    \n    // 分析失败率趋势\n    const failureRate = stats.byStatus[SyncQueueStatus.FAILED] / Math.max(1, stats.totalOperations)\n    if (failureRate > 0.15) {\n      recommendedActions.push('Review and optimize conflict resolution strategies')\n      recommendedActions.push('Consider reducing retry delays for failed operations')\n    }\n    \n    // 分析队列年龄\n    if (stats.oldestOperation) {\n      const oldestAge = Date.now() - stats.oldestOperation.getTime()\n      if (oldestAge > 30 * 60 * 1000) { // 30分钟\n        recommendedActions.push('Process aged operations urgently')\n        recommendedActions.push('Consider priority escalation')\n      }\n    }\n    \n    return {\n      predictedLoad,\n      recommendedActions,\n      riskAssessment\n    }\n  }\n  \n  /**\n   * 预测未来负载\n   */\n  private async predictFutureLoad(stats: QueueStats, currentThroughput: number): Promise<number> {\n    try {\n      // 获取最近1小时的操作数据\n      const hourAgo = new Date(Date.now() - 60 * 60 * 1000)\n      const recentOperations = await db.syncQueue\n        .where('timestamp')\n        .above(hourAgo)\n        .toArray()\n      \n      if (recentOperations.length === 0) return currentThroughput * 2\n      \n      // 计算增长率\n      const growthRate = this.calculateGrowthRate(recentOperations)\n      \n      // 预测未来1小时的负载\n      const predictedLoad = stats.totalOperations * (1 + growthRate)\n      \n      return Math.max(currentThroughput * 2, predictedLoad)\n    } catch (error) {\n      console.error('Failed to predict future load:', error)\n      return currentThroughput * 2\n    }\n  }\n  \n  /**\n   * 计算增长率\n   */\n  private calculateGrowthRate(operations: SyncOperation[]): number {\n    if (operations.length < 2) return 0.1 // 默认10%增长\n    \n    // 按时间分组\n    const timeGroups = new Map<number, number>()\n    operations.forEach(op => {\n      const timeSlot = Math.floor(op.timestamp.getTime() / (10 * 60 * 1000)) // 10分钟间隔\n      timeGroups.set(timeSlot, (timeGroups.get(timeSlot) || 0) + 1)\n    })\n    \n    const timeSlots = Array.from(timeGroups.keys()).sort()\n    if (timeSlots.length < 2) return 0.1\n    \n    // 计算增长率\n    const firstHalf = timeSlots.slice(0, Math.floor(timeSlots.length / 2))\n    const secondHalf = timeSlots.slice(Math.floor(timeSlots.length / 2))\n    \n    const firstHalfAvg = firstHalf.reduce((sum, slot) => sum + (timeGroups.get(slot) || 0), 0) / firstHalf.length\n    const secondHalfAvg = secondHalf.reduce((sum, slot) => sum + (timeGroups.get(slot) || 0), 0) / secondHalf.length\n    \n    if (firstHalfAvg === 0) return 0.1\n    \n    return Math.max(-0.5, Math.min(2, (secondHalfAvg - firstHalfAvg) / firstHalfAvg))\n  }\n\n  /**\n   * 计算队列效率\n   */\n  private calculateQueueEfficiency(stats: QueueStats, throughput: number): number {\n    const { totalOperations, byStatus } = stats\n    \n    // 基础效率分数\n    let efficiency = 0.5\n    \n    // 根据待处理操作数量调整\n    if (totalOperations < 100) efficiency += 0.3\n    else if (totalOperations < 500) efficiency += 0.2\n    else if (totalOperations < 1000) efficiency += 0.1\n    \n    // 根据失败率调整\n    const failureRate = byStatus[SyncQueueStatus.FAILED] / Math.max(1, totalOperations)\n    efficiency -= failureRate * 0.5\n    \n    // 根据吞吐量调整\n    if (throughput > 20) efficiency += 0.2\n    else if (throughput > 10) efficiency += 0.1\n    \n    return Math.max(0, Math.min(1, efficiency))\n  }\n\n  /**\n   * 分析瓶颈\n   */\n  private analyzeBottlenecks(stats: QueueStats, throughput: number, avgProcessingTime: number): string[] {\n    const bottlenecks: string[] = []\n    \n    if (stats.totalOperations > 1000) {\n      bottlenecks.push('Queue backlog too large')\n    }\n    \n    if (throughput < 5) {\n      bottlenecks.push('Low throughput detected')\n    }\n    \n    if (avgProcessingTime > 5000) {\n      bottlenecks.push('High processing time')\n    }\n    \n    const failureRate = stats.byStatus[SyncQueueStatus.FAILED] / Math.max(1, stats.totalOperations)\n    if (failureRate > 0.2) {\n      bottlenecks.push('High failure rate')\n    }\n    \n    if (bottlenecks.length === 0) {\n      bottlenecks.push('No significant bottlenecks detected')\n    }\n    \n    return bottlenecks\n  }\n}\n\n// ============================================================================\n// 导出单例实例\n// ============================================================================\n\nexport const syncQueueManager = new SyncQueueManager()\n\n// ============================================================================\n// 便利方法导出\n// ============================================================================\n\nexport const enqueueSyncOperation = (operation: Omit<QueueOperation, 'id' | 'status' | 'timestamp'>) => \n  syncQueueManager.enqueueOperation(operation)\n\nexport const enqueueSyncBatch = (operations: Omit<QueueOperation, 'id' | 'status' | 'timestamp'>[]) => \n  syncQueueManager.enqueueBatch(operations)\n\nexport const getSyncQueueStats = () => syncQueueManager.getQueueStats()\nexport const getSyncOperations = (filters?: any) => syncQueueManager.getOperations(filters)\nexport const cleanupSyncOperations = (olderThan?: number) => syncQueueManager.cleanupCompletedOperations(olderThan)\nexport const retryFailedSyncOperations = () => syncQueueManager.retryFailedOperations()"],"version":3}
{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\tests\\sync\\sync-refactor.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\tests\\sync\\sync-refactor.test.ts"],"sourcesContent":["// 同步机制重构测试\r\n// Week 3 Day 11-13 同步机制重构 - Project-Brainstormer\r\n\r\nimport { jest } from '@jest/globals'\r\nimport { optimizedCloudSyncService } from '../../src/services/sync/optimized-cloud-sync'\r\nimport { incrementalSyncAlgorithm } from '../../src/services/sync/algorithms/incremental-sync-algorithm'\r\nimport { intelligentConflictResolver } from '../../src/services/sync/conflict/intelligent-conflict-resolver'\r\nimport { networkStateDetector } from '../../src/services/network-state-detector'\r\n\r\ndescribe('Week 3 Day 11-13 同步机制重构测试', () => {\r\n  \r\n  let mockAuthService: any\r\n  let mockNetworkState: any\r\n  \r\n  beforeAll(() => {\r\n    console.log('🚀 开始 Week 3 Day 11-13 同步机制重构测试')\r\n    \r\n    // 模拟认证服务\r\n    mockAuthService = {\r\n      isAuthenticated: () => true,\r\n      getCurrentUser: () => ({ id: 'test-user-id' }),\r\n      onAuthStateChange: jest.fn()\r\n    }\r\n    \r\n    // 设置认证服务\r\n    optimizedCloudSyncService.setAuthService(mockAuthService)\r\n    \r\n    // 模拟网络状态\r\n    mockNetworkState = {\r\n      isOnline: true,\r\n      quality: 'good',\r\n      isReliable: true,\r\n      canSync: true,\r\n      bandwidth: 10,\r\n      latency: 50,\r\n      reliability: 0.9,\r\n      connectionType: 'wifi'\r\n    }\r\n  })\r\n  \r\n  afterAll(() => {\r\n    console.log('✅ 同步机制重构测试完成')\r\n  })\r\n  \r\n  describe('增量同步算法测试', () => {\r\n    \r\n    test('应该能够执行增量同步', async () => {\r\n      const result = await incrementalSyncAlgorithm.performIncrementalSync('test-user-id')\r\n      \r\n      expect(result).toBeDefined()\r\n      expect(typeof result.success).toBe('boolean')\r\n      expect(typeof result.processedCount).toBe('number')\r\n      expect(typeof result.failedCount).toBe('number')\r\n      expect(Array.isArray(result.conflicts)).toBe(true)\r\n      expect(Array.isArray(result.errors)).toBe(true)\r\n      \r\n      console.log(`✅ 增量同步测试完成 - 成功: ${result.success}, 处理: ${result.processedCount}, 失败: ${result.failedCount}`)\r\n    })\r\n    \r\n    test('应该能够获取同步指标', () => {\r\n      const metrics = incrementalSyncAlgorithm.getSyncMetrics()\r\n      \r\n      expect(metrics).toBeDefined()\r\n      expect(typeof metrics.totalOperations).toBe('number')\r\n      expect(typeof metrics.successRate).toBe('number')\r\n      expect(typeof metrics.averageResponseTime).toBe('number')\r\n      expect(typeof metrics.bandwidthUsage).toBe('number')\r\n      expect(typeof metrics.conflictRate).toBe('number')\r\n      expect(typeof metrics.retryCount).toBe('number')\r\n      \r\n      console.log(`✅ 同步指标获取测试完成`)\r\n    })\r\n    \r\n    test('应该能够清理同步历史', async () => {\r\n      await expect(incrementalSyncAlgorithm.cleanupSyncHistory(7)).resolves.not.toThrow()\r\n      console.log(`✅ 同步历史清理测试完成`)\r\n    })\r\n  })\r\n  \r\n  describe('智能冲突解决测试', () => {\r\n    \r\n    test('应该能够解决时间戳冲突', async () => {\r\n      const conflict = {\r\n        id: 'test-conflict-1',\r\n        entityId: 'card-1',\r\n        entityType: 'card',\r\n        localData: {\r\n          frontContent: '本地内容',\r\n          backContent: '本地背面',\r\n          updatedAt: new Date(Date.now() - 1000).toISOString()\r\n        },\r\n        cloudData: {\r\n          frontContent: '云端内容',\r\n          backContent: '云端背面',\r\n          updatedAt: new Date().toISOString()\r\n        },\r\n        conflictType: 'concurrent_modification' as const,\r\n        severity: 'medium' as const,\r\n        timestamp: new Date(),\r\n        autoResolved: false\r\n      }\r\n      \r\n      const context = intelligentConflictResolver['createConflictResolutionContext']?.(conflict) || {\r\n        localOperation: {\r\n          type: 'update',\r\n          entity: 'card',\r\n          entityId: 'card-1',\r\n          data: conflict.localData,\r\n          timestamp: new Date(conflict.localData.updatedAt)\r\n        },\r\n        cloudOperation: {\r\n          type: 'update', \r\n          entity: 'card',\r\n          entityId: 'card-1',\r\n          data: conflict.cloudData,\r\n          timestamp: new Date(conflict.cloudData.updatedAt)\r\n        },\r\n        userPreferences: intelligentConflictResolver['userPreferences'],\r\n        networkQuality: mockNetworkState,\r\n        timeConstraints: { urgency: 'medium' as const },\r\n        historyData: intelligentConflictResolver['conflictHistory']\r\n      }\r\n      \r\n      const resolution = await intelligentConflictResolver.resolveConflict(conflict, context)\r\n      \r\n      expect(resolution).toBeDefined()\r\n      expect(['local_wins', 'cloud_wins', 'merge', 'manual'].includes(resolution.resolution)).toBe(true)\r\n      expect(typeof resolution.confidence).toBe('number')\r\n      expect(typeof resolution.reasoning).toBe('string')\r\n      expect(typeof resolution.requiresUserConfirmation).toBe('boolean')\r\n      expect(typeof resolution.estimatedTime).toBe('number')\r\n      \r\n      console.log(`✅ 时间戳冲突解决测试完成 - 方案: ${resolution.resolution}, 置信度: ${resolution.confidence}`)\r\n    })\r\n    \r\n    test('应该能够获取冲突统计', () => {\r\n      const stats = intelligentConflictResolver.getConflictStatistics()\r\n      \r\n      expect(stats).toBeDefined()\r\n      expect(typeof stats.totalConflicts).toBe('number')\r\n      expect(typeof stats.autoResolutionRate).toBe('number')\r\n      expect(typeof stats.averageResolutionTime).toBe('number')\r\n      expect(typeof stats.mostCommonConflictType).toBe('string')\r\n      expect(stats.userPreferences).toBeDefined()\r\n      \r\n      console.log(`✅ 冲突统计获取测试完成`)\r\n    })\r\n  })\r\n  \r\n  describe('优化同步服务测试', () => {\r\n    \r\n    test('应该能够获取当前状态', () => {\r\n      const status = optimizedCloudSyncService.getCurrentStatus()\r\n      \r\n      expect(status).toBeDefined()\r\n      expect(typeof status.isOnline).toBe('boolean')\r\n      expect(typeof status.syncInProgress).toBe('boolean')\r\n      expect(typeof status.hasConflicts).toBe('boolean')\r\n      \r\n      console.log(`✅ 同步状态获取测试完成`)\r\n    })\r\n    \r\n    test('应该能够获取同步统计', () => {\r\n      const stats = optimizedCloudSyncService.getSyncStatistics()\r\n      \r\n      expect(stats).toBeDefined()\r\n      expect(typeof stats.totalSyncs).toBe('number')\r\n      expect(typeof stats.successfulSyncs).toBe('number')\r\n      expect(typeof stats.failedSyncs).toBe('number')\r\n      expect(typeof stats.averageSyncTime).toBe('number')\r\n      expect(typeof stats.successRate).toBe('number')\r\n      expect(stats.conflictResolutionRate).toBeDefined()\r\n      expect(stats.networkQuality).toBeDefined()\r\n      \r\n      console.log(`✅ 同步统计获取测试完成`)\r\n    })\r\n    \r\n    test('应该能够更新配置', () => {\r\n      const newConfig = {\r\n        enableIncrementalSync: false,\r\n        syncIntervals: {\r\n          excellent: 30 * 1000,\r\n          good: 60 * 1000,\r\n          fair: 120 * 1000,\r\n          poor: 300 * 1000\r\n        }\r\n      }\r\n      \r\n      expect(() => {\r\n        optimizedCloudSyncService.updateConfig(newConfig)\r\n      }).not.toThrow()\r\n      \r\n      console.log(`✅ 同步配置更新测试完成`)\r\n    })\r\n    \r\n    test('应该能够添加状态监听器', () => {\r\n      const mockCallback = jest.fn()\r\n      const unsubscribe = optimizedCloudSyncService.onStatusChange(mockCallback)\r\n      \r\n      expect(typeof unsubscribe).toBe('function')\r\n      expect(mockCallback).toHaveBeenCalled()\r\n      \r\n      // 测试取消订阅\r\n      unsubscribe()\r\n      \r\n      console.log(`✅ 状态监听器测试完成`)\r\n    })\r\n  })\r\n  \r\n  describe('集成测试', () => {\r\n    \r\n    test('应该能够处理完整的同步流程', async () => {\r\n      // 模拟网络状态良好\r\n      jest.spyOn(networkStateDetector, 'getCurrentState').mockReturnValue(mockNetworkState)\r\n      \r\n      // 执行同步\r\n      const result = await optimizedCloudSyncService.performOptimizedSync()\r\n      \r\n      expect(result).toBeDefined()\r\n      expect(typeof result.success).toBe('boolean')\r\n      expect(typeof result.processedCount).toBe('number')\r\n      expect(typeof result.failedCount).toBe('number')\r\n      expect(Array.isArray(result.conflicts)).toBe(true)\r\n      expect(Array.isArray(result.errors)).toBe(true)\r\n      \r\n      console.log(`✅ 完整同步流程测试完成 - 成功: ${result.success}`)\r\n    })\r\n    \r\n    test('应该能够在网络不佳时跳过同步', async () => {\r\n      // 模拟网络状态不佳\r\n      const poorNetworkState = {\r\n        ...mockNetworkState,\r\n        quality: 'poor',\r\n        canSync: false\r\n      }\r\n      \r\n      jest.spyOn(networkStateDetector, 'getCurrentState').mockReturnValue(poorNetworkState)\r\n      \r\n      const result = await optimizedCloudSyncService.performOptimizedSync()\r\n      \r\n      expect(result).toBeDefined()\r\n      expect(result.success).toBe(false)\r\n      expect(result.processedCount).toBe(0)\r\n      \r\n      console.log(`✅ 网络不佳跳过同步测试完成`)\r\n    })\r\n    \r\n    test('应该能够在认证失败时跳过同步', async () => {\r\n      // 模拟认证失败\r\n      jest.spyOn(mockAuthService, 'isAuthenticated').mockReturnValue(false)\r\n      \r\n      const result = await optimizedCloudSyncService.performOptimizedSync()\r\n      \r\n      expect(result).toBeDefined()\r\n      expect(result.success).toBe(false)\r\n      \r\n      // 恢复认证状态\r\n      jest.spyOn(mockAuthService, 'isAuthenticated').mockReturnValue(true)\r\n      \r\n      console.log(`✅ 认证失败跳过同步测试完成`)\r\n    })\r\n  })\r\n  \r\n  describe('性能测试', () => {\r\n    \r\n    test('应该能够在合理时间内完成状态获取', async () => {\r\n      const startTime = performance.now()\r\n      \r\n      // 执行多次状态获取\r\n      for (let i = 0; i < 100; i++) {\r\n        optimizedCloudSyncService.getCurrentStatus()\r\n      }\r\n      \r\n      const duration = performance.now() - startTime\r\n      \r\n      expect(duration).toBeLessThan(100) // 应该在100ms内完成100次调用\r\n      \r\n      console.log(`✅ 状态获取性能测试完成 - 100次调用耗时 ${duration.toFixed(2)}ms`)\r\n    })\r\n    \r\n    test('应该能够正确处理并发同步请求', async () => {\r\n      // 模拟网络状态良好\r\n      jest.spyOn(networkStateDetector, 'getCurrentState').mockReturnValue(mockNetworkState)\r\n      \r\n      // 并发触发多个同步请求\r\n      const promises = []\r\n      for (let i = 0; i < 5; i++) {\r\n        promises.push(optimizedCloudSyncService.performOptimizedSync())\r\n      }\r\n      \r\n      const results = await Promise.all(promises)\r\n      \r\n      // 所有请求都应该完成\r\n      expect(results.length).toBe(5)\r\n      results.forEach(result => {\r\n        expect(result).toBeDefined()\r\n      })\r\n      \r\n      console.log(`✅ 并发同步请求测试完成 - 处理了 ${results.length} 个并发请求`)\r\n    })\r\n  })\r\n  \r\n  describe('错误处理测试', () => {\r\n    \r\n    test('应该能够处理网络错误', async () => {\r\n      // 模拟网络错误\r\n      const errorNetworkState = {\r\n        ...mockNetworkState,\r\n        isOnline: false,\r\n        canSync: false\r\n      }\r\n      \r\n      jest.spyOn(networkStateDetector, 'getCurrentState').mockReturnValue(errorNetworkState)\r\n      \r\n      const result = await optimizedCloudSyncService.performOptimizedSync()\r\n      \r\n      expect(result).toBeDefined()\r\n      expect(result.success).toBe(false)\r\n      \r\n      console.log(`✅ 网络错误处理测试完成`)\r\n    })\r\n    \r\n    test('应该能够处理服务错误', async () => {\r\n      // 模拟增量同步算法错误\r\n      jest.spyOn(incrementalSyncAlgorithm, 'performIncrementalSync')\r\n        .mockRejectedValue(new Error('Sync service error'))\r\n      \r\n      const result = await optimizedCloudSyncService.performOptimizedSync()\r\n      \r\n      expect(result).toBeDefined()\r\n      expect(result.success).toBe(false)\r\n      expect(result.errors.length).toBeGreaterThan(0)\r\n      \r\n      // 恢复原始实现\r\n      jest.restoreAllMocks()\r\n      \r\n      console.log(`✅ 服务错误处理测试完成`)\r\n    })\r\n  })\r\n})\r\n\r\n// ============================================================================\r\n// 测试导出函数\r\n// ============================================================================\r\n\r\nexport async function runSyncRefactorTests() {\r\n  console.log('🚀 运行同步机制重构测试')\r\n  \r\n  try {\r\n    // 运行 Jest 测试\r\n    const { execSync } = require('child_process')\r\n    \r\n    execSync('npx jest tests/sync/sync-refactor.test.ts --verbose', {\r\n      stdio: 'inherit',\r\n      cwd: process.cwd()\r\n    })\r\n    \r\n    console.log('✅ 同步机制重构测试完成')\r\n    \r\n  } catch (error) {\r\n    console.error('❌ 同步机制重构测试失败:', error)\r\n    process.exit(1)\r\n  }\r\n}\r\n\r\n// 如果直接运行此文件\r\nif (require.main === module) {\r\n  runSyncRefactorTests()\r\n}"],"version":3}
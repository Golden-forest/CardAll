56d0e17b6a751c6c1357533cf180bdba
"use strict";
/**
 * LocalOperationService 简化单元测试
 * 测试高性能本地操作服务的核心功能
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// 模拟数据库
globals_1.jest.mock('../../services/database-unified', () => {
    const mockTable = {
        add: globals_1.jest.fn(),
        get: globals_1.jest.fn(),
        update: globals_1.jest.fn(),
        delete: globals_1.jest.fn(),
        where: globals_1.jest.fn(() => mockTable),
        toArray: globals_1.jest.fn(),
        bulkAdd: globals_1.jest.fn(),
        bulkPut: globals_1.jest.fn(),
        bulkDelete: globals_1.jest.fn(),
        count: globals_1.jest.fn(),
        equals: globals_1.jest.fn(() => mockTable),
        sortBy: globals_1.jest.fn(() => mockTable),
        orderBy: globals_1.jest.fn(() => mockTable),
        reverse: globals_1.jest.fn(() => mockTable),
        offset: globals_1.jest.fn(() => mockTable),
        limit: globals_1.jest.fn(() => mockTable),
    };
    const mockDb = {
        cards: { ...mockTable },
        folders: { ...mockTable },
        tags: { ...mockTable },
        cardTags: { ...mockTable },
        images: { ...mockTable },
        syncQueue: { ...mockTable },
        syncOperations: { ...mockTable },
        transaction: globals_1.jest.fn().mockImplementation(async (mode, tables, callback) => {
            return await callback();
        }),
        open: globals_1.jest.fn().mockResolvedValue(true),
        on: globals_1.jest.fn(),
        close: globals_1.jest.fn(),
    };
    return {
        db: mockDb,
    };
});
const local_operation_service_1 = require("../../services/local-operation-service");
// 创建简单的Mock工具
const createMockCard = () => ({
    frontContent: {
        title: '测试卡片',
        text: '正面内容',
        tags: ['测试标签'],
        style: { backgroundColor: '#ffffff' }
    },
    backContent: {
        title: '背面标题',
        text: '背面内容',
        tags: ['背面标签'],
        style: { backgroundColor: '#f0f0f0' }
    },
    style: {
        type: 'solid',
        colors: ['#ffffff', '#f0f0f0']
    },
    folderId: crypto.randomUUID(),
    userId: 'test-user'
});
const createMockFolder = () => ({
    id: crypto.randomUUID(),
    name: '测试文件夹',
    parentId: null,
    createdAt: new Date(),
    updatedAt: new Date()
});
(0, globals_1.describe)('LocalOperationServiceOptimized', () => {
    let service;
    (0, globals_1.beforeEach)(() => {
        // 重置服务实例
        service = new local_operation_service_1.LocalOperationServiceOptimized();
        // 清理所有模拟
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.afterEach)(() => {
        // 清理服务
        if (service.destroy) {
            service.destroy();
        }
    });
    // ============================================================================
    // 初始化测试
    // ============================================================================
    (0, globals_1.describe)('初始化', () => {
        (0, globals_1.test)('应该正确初始化服务', async () => {
            await service.initialize();
            (0, globals_1.expect)(service).toBeInstanceOf(local_operation_service_1.LocalOperationServiceOptimized);
        });
        (0, globals_1.test)('应该处理初始化错误', async () => {
            // 模拟初始化错误
            globals_1.jest.spyOn(service, 'initialize').mockRejectedValue(new Error('初始化失败'));
            await (0, globals_1.expect)(service.initialize()).rejects.toThrow('初始化失败');
        });
    });
    // ============================================================================
    // 卡片操作测试
    // ============================================================================
    (0, globals_1.describe)('卡片操作', () => {
        (0, globals_1.test)('应该成功创建卡片', async () => {
            const cardData = createMockCard();
            const mockResult = { ...cardData, id: crypto.randomUUID() };
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            db.cards.add.mockResolvedValue(mockResult.id);
            const result = await service.createCard(cardData);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.id).toBeDefined();
            (0, globals_1.expect)(db.cards.add).toHaveBeenCalledWith(cardData);
        });
        (0, globals_1.test)('应该成功读取卡片', async () => {
            const cardId = crypto.randomUUID();
            const mockCard = createMockCard();
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            db.cards.get.mockResolvedValue(mockCard);
            const result = await service.getCard(cardId);
            (0, globals_1.expect)(result).toEqual(mockCard);
            (0, globals_1.expect)(db.cards.get).toHaveBeenCalledWith(cardId);
        });
        (0, globals_1.test)('应该成功更新卡片', async () => {
            const cardId = crypto.randomUUID();
            const updateData = { title: '更新后的标题' };
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            db.cards.update.mockResolvedValue(1);
            const result = await service.updateCard(cardId, updateData);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(db.cards.update).toHaveBeenCalledWith(cardId, updateData);
        });
        (0, globals_1.test)('应该成功删除卡片', async () => {
            const cardId = crypto.randomUUID();
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            db.cards.delete.mockResolvedValue(1);
            const result = await service.deleteCard(cardId);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(db.cards.delete).toHaveBeenCalledWith(cardId);
        });
        (0, globals_1.test)('应该处理数据库操作错误', async () => {
            const cardData = createMockCard();
            // 模拟数据库错误
            const { db } = require('../../services/database-unified');
            db.cards.add.mockRejectedValue(new Error('数据库错误'));
            const result = await service.createCard(cardData);
            (0, globals_1.expect)(result.success).toBe(false);
            (0, globals_1.expect)(result.error).toBe('数据库错误');
        });
    });
    // ============================================================================
    // 文件夹操作测试
    // ============================================================================
    (0, globals_1.describe)('文件夹操作', () => {
        (0, globals_1.test)('应该成功创建文件夹', async () => {
            const folderData = createMockFolder();
            const mockResult = { ...folderData, id: crypto.randomUUID() };
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            db.folders.add.mockResolvedValue(mockResult.id);
            const result = await service.createFolder(folderData);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.id).toBeDefined();
            (0, globals_1.expect)(db.folders.add).toHaveBeenCalledWith(folderData);
        });
        (0, globals_1.test)('应该成功获取文件夹', async () => {
            const folderId = crypto.randomUUID();
            const mockFolder = createMockFolder();
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            db.folders.get.mockResolvedValue(mockFolder);
            const result = await service.getFolder(folderId);
            (0, globals_1.expect)(result).toEqual(mockFolder);
            (0, globals_1.expect)(db.folders.get).toHaveBeenCalledWith(folderId);
        });
    });
    // ============================================================================
    // 批量操作测试
    // ============================================================================
    (0, globals_1.describe)('批量操作', () => {
        (0, globals_1.test)('应该成功批量插入卡片', async () => {
            const cards = Array.from({ length: 10 }, () => createMockCard());
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            db.cards.bulkAdd.mockResolvedValue(cards.map(c => c.id));
            const result = await service.bulkCreateCards(cards);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.count).toBe(10);
            (0, globals_1.expect)(db.cards.bulkAdd).toHaveBeenCalledWith(cards);
        });
        (0, globals_1.test)('应该成功批量更新卡片', async () => {
            const updates = Array.from({ length: 5 }, (_, i) => ({
                id: crypto.randomUUID(),
                changes: { title: `更新标题 ${i}` }
            }));
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            db.cards.bulkPut.mockResolvedValue(updates.length);
            const result = await service.bulkUpdateCards(updates);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.count).toBe(5);
            (0, globals_1.expect)(db.cards.bulkPut).toHaveBeenCalledWith(updates.map(u => ({ ...createMockCard(), ...u.changes, id: u.id })));
        });
    });
    // ============================================================================
    // 查询操作测试
    // ============================================================================
    (0, globals_1.describe)('查询操作', () => {
        (0, globals_1.test)('应该成功查询卡片列表', async () => {
            const mockCards = Array.from({ length: 5 }, () => createMockCard());
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            db.cards.toArray.mockResolvedValue(mockCards);
            const result = await service.getAllCards();
            (0, globals_1.expect)(result).toEqual(mockCards);
            (0, globals_1.expect)(db.cards.toArray).toHaveBeenCalled();
        });
        (0, globals_1.test)('应该支持条件查询', async () => {
            const folderId = crypto.randomUUID();
            const mockCards = Array.from({ length: 3 }, () => ({
                ...createMockCard(),
                folderId
            }));
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            const whereMock = {
                equals: globals_1.jest.fn().mockResolvedValue(mockCards)
            };
            db.cards.where.mockReturnValue(whereMock);
            const result = await service.getCardsByFolder(folderId);
            (0, globals_1.expect)(result).toEqual(mockCards);
            (0, globals_1.expect)(db.cards.where).toHaveBeenCalledWith('folderId');
            (0, globals_1.expect)(whereMock.equals).toHaveBeenCalledWith(folderId);
        });
    });
    // ============================================================================
    // 同步操作测试
    // ============================================================================
    (0, globals_1.describe)('同步操作', () => {
        (0, globals_1.test)('应该正确记录同步操作', async () => {
            const operation = {
                type: 'create',
                entityType: 'card',
                entityId: crypto.randomUUID(),
                data: createMockCard(),
                timestamp: new Date()
            };
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            db.syncOperations.add.mockResolvedValue(crypto.randomUUID());
            const result = await service.recordSyncOperation(operation);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(db.syncOperations.add).toHaveBeenCalledWith(operation);
        });
        (0, globals_1.test)('应该获取待同步操作', async () => {
            const mockOperations = Array.from({ length: 3 }, () => ({
                id: crypto.randomUUID(),
                type: 'create',
                entityType: 'card',
                entityId: crypto.randomUUID(),
                data: createMockCard(),
                timestamp: new Date()
            }));
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            db.syncOperations.toArray.mockResolvedValue(mockOperations);
            const result = await service.getPendingSyncOperations();
            (0, globals_1.expect)(result).toEqual(mockOperations);
            (0, globals_1.expect)(db.syncOperations.toArray).toHaveBeenCalled();
        });
    });
    // ============================================================================
    // 性能监控测试
    // ============================================================================
    (0, globals_1.describe)('性能监控', () => {
        (0, globals_1.test)('应该记录操作耗时', async () => {
            const cardData = createMockCard();
            const mockResult = { ...cardData, id: crypto.randomUUID() };
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            db.cards.add.mockResolvedValue(mockResult.id);
            // 监控性能
            const startTime = performance.now();
            await service.createCard(cardData);
            const endTime = performance.now();
            (0, globals_1.expect)(endTime - startTime).toBeGreaterThan(0);
        });
        (0, globals_1.test)('应该处理大量数据操作', async () => {
            const largeDataset = Array.from({ length: 100 }, () => createMockCard());
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            db.cards.bulkAdd.mockResolvedValue(largeDataset.map(c => c.id));
            const result = await service.bulkCreateCards(largeDataset);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.count).toBe(100);
        });
    });
    // ============================================================================
    // 错误处理测试
    // ============================================================================
    (0, globals_1.describe)('错误处理', () => {
        (0, globals_1.test)('应该正确处理无效输入', async () => {
            // 测试空数据
            const result1 = await service.createCard({});
            (0, globals_1.expect)(result1.success).toBe(false);
            // 测试无效ID
            const result2 = await service.getCard('');
            (0, globals_1.expect)(result2).toBeNull();
            // 测试无效更新
            const result3 = await service.updateCard('', {});
            (0, globals_1.expect)(result3.success).toBe(false);
        });
        (0, globals_1.test)('应该处理并发操作', async () => {
            const cardData = createMockCard();
            const mockResult = { ...cardData, id: crypto.randomUUID() };
            // 模拟数据库返回
            const { db } = require('../../services/database-unified');
            db.cards.add.mockResolvedValue(mockResult.id);
            // 并发创建多个卡片
            const promises = Array.from({ length: 5 }, () => service.createCard(cardData));
            const results = await Promise.all(promises);
            (0, globals_1.expect)(results).toHaveLength(5);
            (0, globals_1.expect)(results.every(r => r.success)).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
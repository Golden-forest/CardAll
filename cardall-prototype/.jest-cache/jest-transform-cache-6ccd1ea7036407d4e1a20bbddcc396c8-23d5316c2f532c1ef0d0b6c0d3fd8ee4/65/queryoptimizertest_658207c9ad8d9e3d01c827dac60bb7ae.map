{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\utils\\query-optimizer.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\utils\\query-optimizer.test.ts"],"sourcesContent":["/**\n * 查询优化器测试\n * 测试QueryOptimizer类的所有功能\n */\n\n// Jest全局函数不需要导入\nimport { QueryOptimizer, QueryPlan, IndexStats } from '../../utils/query-optimizer'\nimport { db } from '../../services/database-unified'\n\n// Mock database\njest.mock('../../services/database-unified', () => ({\n  db: {\n    cards: {\n      where: jest.fn().mockReturnThis(),\n      and: jest.fn().mockReturnThis(),\n      filter: jest.fn().mockReturnThis(),\n      sortBy: jest.fn().mockReturnThis(),\n      reverse: jest.fn().mockReturnThis(),\n      orderBy: jest.fn().mockReturnThis(),\n      limit: jest.fn().mockReturnThis(),\n      offset: jest.fn().mockReturnThis(),\n      count: jest.fn()\n    }\n  }\n}))\n\ndescribe('QueryOptimizer', () => {\n  let optimizer: QueryOptimizer\n\n  beforeEach(() => {\n    optimizer = new QueryOptimizer()\n    jest.clearAllMocks()\n  })\n\n  afterEach(() => {\n    jest.restoreAllMocks()\n  })\n\n  describe('构造函数和初始化', () => {\n    test('应该正确初始化查询优化器', () => {\n      expect(optimizer).toBeInstanceOf(QueryOptimizer)\n\n      // 检查初始状态\n      const stats = optimizer.getIndexStats()\n      expect(stats).toEqual([])\n\n      const report = optimizer.getPerformanceReport()\n      expect(report.totalQueries).toBe(0)\n      expect(report.avgOptimizationTime).toBe(0)\n      expect(report.mostUsedIndexes).toEqual([])\n    })\n  })\n\n  describe('卡片查询优化', () => {\n    test('应该优化简单查询', async () => {\n      const query = {\n        userId: 'user123',\n        limit: 10\n      }\n\n      db.cards.count.mockResolvedValue(100)\n\n      const result = await optimizer.optimizeCardsQuery(query)\n\n      expect(result).toHaveProperty('query')\n      expect(result).toHaveProperty('plan')\n      expect(result).toHaveProperty('estimatedRows')\n\n      expect(result.plan).toHaveProperty('estimatedCost')\n      expect(result.plan).toHaveProperty('indexes')\n      expect(result.plan).toHaveProperty('filterOrder')\n      expect(result.plan).toHaveProperty('cacheKey')\n      expect(result.plan).toHaveProperty('cacheTTL')\n\n      expect(Array.isArray(result.plan.indexes)).toBe(true)\n      expect(Array.isArray(result.plan.filterOrder)).toBe(true)\n      expect(typeof result.plan.cacheKey).toBe('string')\n      expect(typeof result.plan.cacheTTL).toBe('number')\n    })\n\n    test('应该优化复杂查询', async () => {\n      const query = {\n        userId: 'user123',\n        folderId: 'folder456',\n        search: 'test search',\n        tags: ['tag1', 'tag2'],\n        sortBy: 'updated',\n        sortOrder: 'desc',\n        limit: 20,\n        offset: 10\n      }\n\n      db.cards.count.mockResolvedValue(1000)\n\n      const result = await optimizer.optimizeCardsQuery(query)\n\n      // 复杂查询应该有更高的成本估算\n      expect(result.plan.estimatedCost).toBeGreaterThan(0)\n\n      // 应该选择合适的索引\n      expect(result.plan.indexes.length).toBeGreaterThan(0)\n\n      // 应该有合理的过滤顺序\n      expect(result.plan.filterOrder.length).toBeGreaterThan(0)\n    })\n\n    test('应该处理无参数查询', async () => {\n      const query = {}\n\n      db.cards.count.mockResolvedValue(500)\n\n      const result = await optimizer.optimizeCardsQuery(query)\n\n      expect(result.plan.estimatedCost).toBe(0)\n      expect(result.plan.indexes.length).toBe(0)\n      expect(result.plan.filterOrder.length).toBe(0)\n    })\n\n    test('应该估算结果数量', async () => {\n      const query = {\n        userId: 'user123',\n        limit: 10\n      }\n\n      db.cards.count.mockResolvedValue(100)\n\n      const result = await optimizer.optimizeCardsQuery(query)\n\n      // 基于用户ID的选择性估算\n      expect(result.estimatedRows).toBe(10) // 100 * 0.1 = 10\n    })\n\n    test('应该在数据库错误时使用保守估算', async () => {\n      const query = {\n        userId: 'user123',\n        limit: 20\n      }\n\n      db.cards.count.mockRejectedValue(new Error('Database error'))\n\n      const result = await optimizer.optimizeCardsQuery(query)\n\n      // 使用查询limit作为保守估算\n      expect(result.estimatedRows).toBe(20)\n    })\n  })\n\n  describe('查询模式分析', () => {\n    test('应该分析查询选择性', () => {\n      // 通过私有方法测试\n      const selectivity = (optimizer as any).calculateSelectivity({\n        userId: 'user123',\n        folderId: 'folder456',\n        search: 'test',\n        tags: ['tag1']\n      })\n\n      // 预期：0.1 * 0.3 * 0.7 * 0.5 = 0.0105，但最小为0.01\n      expect(selectivity).toBeCloseTo(0.0105, 3)\n    })\n\n    test('应该计算查询复杂度', () => {\n      const complexity = (optimizer as any).calculateComplexity({\n        userId: 'user123',\n        folderId: 'folder456',\n        search: 'test search',\n        tags: ['tag1', 'tag2', 'tag3'],\n        sortBy: 'updated',\n        limit: 10\n      })\n\n      // 预期：1 + 1 + 3 + 1.5 + 1 + 0.5 = 8\n      expect(complexity).toBeCloseTo(8, 1)\n    })\n\n    test('应该分析查询模式特征', () => {\n      const analysis = (optimizer as any).analyzeQueryPattern({\n        userId: 'user123',\n        search: 'test',\n        limit: 10\n      })\n\n      expect(analysis).toHaveProperty('hasUserId', true)\n      expect(analysis).toHaveProperty('hasFolderId', false)\n      expect(analysis).toHaveProperty('hasSearch', true)\n      expect(analysis).toHaveProperty('hasTags', false)\n      expect(analysis).toHaveProperty('hasSort', false)\n      expect(analysis).toHaveProperty('hasPagination', true)\n      expect(analysis).toHaveProperty('selectivity')\n      expect(analysis).toHaveProperty('complexity')\n    })\n  })\n\n  describe('查询计划生成', () => {\n    test('应该生成优化的查询计划', () => {\n      const analysis = {\n        hasUserId: true,\n        hasFolderId: true,\n        hasSearch: false,\n        hasTags: false,\n        hasSort: true,\n        hasPagination: true,\n        selectivity: 0.03,\n        complexity: 3.5\n      }\n\n      const plan = (optimizer as any).generateQueryPlan(analysis)\n\n      expect(plan).toHaveProperty('estimatedCost')\n      expect(plan).toHaveProperty('indexes')\n      expect(plan).toHaveProperty('filterOrder')\n      expect(plan).toHaveProperty('limitStrategy')\n      expect(plan).toHaveProperty('cacheKey')\n      expect(plan).toHaveProperty('cacheTTL')\n\n      // 应该选择复合索引\n      expect(plan.indexes).toContain('[userId+folderId+updatedAt]')\n\n      // 应该确定过滤顺序\n      expect(plan.filterOrder).toEqual(['userId', 'folderId'])\n\n      // 高选择性查询应该使用游标分页\n      expect(plan.limitStrategy).toBe('cursor')\n    })\n\n    test('应该选择最佳索引', () => {\n      const analysis = {\n        hasUserId: true,\n        hasFolderId: false,\n        hasSearch: true,\n        hasTags: true,\n        hasSort: false\n      }\n\n      const indexes = (optimizer as any).selectBestIndexes(analysis)\n\n      expect(indexes).toContain('[userId+createdAt]')\n      expect(indexes).toContain('[searchVector+userId]')\n      expect(indexes).toContain('userId')\n    })\n\n    test('应该确定过滤顺序', () => {\n      const analysis = {\n        hasUserId: true,\n        hasFolderId: true,\n        hasSearch: true,\n        hasTags: true\n      }\n\n      const order = (optimizer as any).determineFilterOrder(analysis)\n\n      expect(order).toEqual(['userId', 'folderId', 'tags', 'search'])\n    })\n\n    test('应该选择合适的分页策略', () => {\n      // 高选择性查询使用游标\n      const strategy1 = (optimizer as any).selectPaginationStrategy({\n        selectivity: 0.05\n      })\n      expect(strategy1).toBe('cursor')\n\n      // 低选择性查询使用偏移\n      const strategy2 = (optimizer as any).selectPaginationStrategy({\n        selectivity: 0.5\n      })\n      expect(strategy2).toBe('offset')\n    })\n\n    test('应该生成缓存键', () => {\n      const analysis = {\n        hasUserId: true,\n        hasFolderId: false,\n        hasSearch: true,\n        hasTags: false,\n        hasSort: true\n      }\n\n      const cacheKey = (optimizer as any).generateCacheKey(analysis)\n\n      expect(cacheKey).toBe('user-no-folder-search-no-tags-sort')\n    })\n\n    test('应该计算缓存TTL', () => {\n      const analysis1 = {\n        selectivity: 0.05, // 高选择性\n        complexity: 2,     // 简单\n        hasSearch: false\n      }\n\n      const ttl1 = (optimizer as any).calculateCacheTTL(analysis1)\n      expect(ttl1).toBe(90000) // 30000 * 2 * 1.5 = 90000\n\n      const analysis2 = {\n        selectivity: 0.5,  // 低选择性\n        complexity: 5,     // 复杂\n        hasSearch: true    // 搜索\n      }\n\n      const ttl2 = (optimizer as any).calculateCacheTTL(analysis2)\n      expect(ttl2).toBe(15000) // 30000 * 0.5 = 15000\n    })\n  })\n\n  describe('优化查询构建', () => {\n    test('应该构建优化的查询', () => {\n      const plan: QueryPlan = {\n        estimatedCost: 50,\n        indexes: ['[userId+createdAt]'],\n        filterOrder: ['userId'],\n        limitStrategy: 'offset',\n        cacheKey: 'user-no-folder',\n        cacheTTL: 30000\n      }\n\n      const originalQuery = {\n        userId: 'user123',\n        limit: 10,\n        offset: 5\n      }\n\n      const optimizedQuery = (optimizer as any).buildOptimizedQuery(plan, originalQuery)\n\n      // 应该返回一个查询对象\n      expect(optimizedQuery).toBeDefined()\n\n      // 验证方法链调用\n      expect(db.cards.where).toHaveBeenCalledWith('userId')\n      expect(db.cards.where().equals).toHaveBeenCalledWith('user123')\n      expect(db.cards.where().equals().limit).toHaveBeenCalledWith(10)\n      expect(db.cards.where().equals().limit().offset).toHaveBeenCalledWith(5)\n    })\n\n    test('应该应用搜索过滤', () => {\n      const plan: QueryPlan = {\n        estimatedCost: 100,\n        indexes: ['[searchVector+userId]'],\n        filterOrder: ['search'],\n        limitStrategy: 'offset',\n        cacheKey: 'search',\n        cacheTTL: 15000\n      }\n\n      const originalQuery = {\n        search: 'test search',\n        limit: 20\n      }\n\n      const optimizedQuery = (optimizer as any).buildOptimizedQuery(plan, originalQuery)\n\n      expect(db.cards.filter).toHaveBeenCalled()\n\n      // 验证过滤函数\n      const filterCall = db.cards.filter.mock.calls[0][0]\n      const testCard = {\n        searchVector: 'test search content',\n        frontContent: { tags: [] },\n        backContent: { tags: [] }\n      }\n      expect(filterCall(testCard)).toBe(true)\n    })\n\n    test('应该应用标签过滤', () => {\n      const plan: QueryPlan = {\n        estimatedCost: 75,\n        indexes: ['userId'],\n        filterOrder: ['tags'],\n        limitStrategy: 'offset',\n        cacheKey: 'tags',\n        cacheTTL: 30000\n      }\n\n      const originalQuery = {\n        tags: ['important', 'work'],\n        limit: 15\n      }\n\n      const optimizedQuery = (optimizer as any).buildOptimizedQuery(plan, originalQuery)\n\n      expect(db.cards.filter).toHaveBeenCalled()\n\n      // 验证标签过滤函数\n      const filterCall = db.cards.filter.mock.calls[0][0]\n      const testCard = {\n        frontContent: { tags: ['important', 'personal'] },\n        backContent: { tags: ['work'] }\n      }\n      expect(filterCall(testCard)).toBe(true)\n    })\n\n    test('应该应用排序', () => {\n      const plan: QueryPlan = {\n        estimatedCost: 25,\n        indexes: ['updatedAt'],\n        filterOrder: [],\n        limitStrategy: 'offset',\n        cacheKey: 'sort',\n        cacheTTL: 30000\n      }\n\n      const originalQuery = {\n        sortBy: 'updated',\n        sortOrder: 'desc',\n        limit: 10\n      }\n\n      const optimizedQuery = (optimizer as any).buildOptimizedQuery(plan, originalQuery)\n\n      expect(db.cards.orderBy).toHaveBeenCalledWith('updatedAt')\n      expect(db.cards.orderBy().reverse).toHaveBeenCalled()\n    })\n\n    test('应该使用默认排序', () => {\n      const plan: QueryPlan = {\n        estimatedCost: 10,\n        indexes: [],\n        filterOrder: [],\n        limitStrategy: 'offset',\n        cacheKey: 'no-sort',\n        cacheTTL: 30000\n      }\n\n      const originalQuery = {\n        limit: 10\n      }\n\n      const optimizedQuery = (optimizer as any).buildOptimizedQuery(plan, originalQuery)\n\n      expect(db.cards.orderBy).toHaveBeenCalledWith('updatedAt')\n    })\n  })\n\n  describe('性能统计和分析', () => {\n    test('应该记录查询分析', () => {\n      const plan: QueryPlan = {\n        estimatedCost: 50,\n        indexes: ['[userId+createdAt]', 'updatedAt'],\n        filterOrder: ['userId'],\n        limitStrategy: 'offset',\n        cacheKey: 'user',\n        cacheTTL: 30000\n      }\n\n      const analysis = {\n        hasUserId: true,\n        hasFolderId: false,\n        hasSearch: false,\n        hasTags: false,\n        hasSort: false,\n        hasPagination: false,\n        selectivity: 0.1,\n        complexity: 1\n      }\n\n      // 记录分析\n      (optimizer as any).recordQueryAnalysis(analysis, plan, 5.2)\n\n      // 检查索引统计\n      const stats = optimizer.getIndexStats()\n      expect(stats.length).toBe(2)\n      expect(stats[0].hits).toBe(1)\n      expect(stats[1].hits).toBe(1)\n\n      // 检查性能报告\n      const report = optimizer.getPerformanceReport()\n      expect(report.totalQueries).toBe(1)\n      expect(report.avgOptimizationTime).toBe(5.2)\n      expect(report.mostUsedIndexes).toEqual(['[userId+createdAt]', 'updatedAt'])\n    })\n\n    test('应该跟踪最常用的索引', () => {\n      // 模拟多次查询\n      for (let i = 0; i < 5; i++) {\n        const plan: QueryPlan = {\n          estimatedCost: 30,\n          indexes: ['index1'],\n          filterOrder: [],\n          limitStrategy: 'offset',\n          cacheKey: 'test',\n          cacheTTL: 30000\n        }\n\n        const analysis = { hasUserId: false, hasFolderId: false, hasSearch: false, hasTags: false, hasSort: false, hasPagination: false, selectivity: 1, complexity: 0 }\n        (optimizer as any).recordQueryAnalysis(analysis, plan, 1)\n      }\n\n      for (let i = 0; i < 3; i++) {\n        const plan: QueryPlan = {\n          estimatedCost: 40,\n          indexes: ['index2'],\n          filterOrder: [],\n          limitStrategy: 'offset',\n          cacheKey: 'test',\n          cacheTTL: 30000\n        }\n\n        const analysis = { hasUserId: false, hasFolderId: false, hasSearch: false, hasTags: false, hasSort: false, hasPagination: false, selectivity: 1, complexity: 0 }\n        (optimizer as any).recordQueryAnalysis(analysis, plan, 1)\n      }\n\n      const report = optimizer.getPerformanceReport()\n      expect(report.mostUsedIndexes[0]).toBe('index1')\n      expect(report.mostUsedIndexes[1]).toBe('index2')\n    })\n\n    test('应该生成优化建议', () => {\n      // 添加一些低使用率的索引\n      for (let i = 0; i < 5; i++) {\n        const plan: QueryPlan = {\n          estimatedCost: 50,\n          indexes: ['underused-index'],\n          filterOrder: [],\n          limitStrategy: 'offset',\n          cacheKey: 'test',\n          cacheTTL: 30000\n        }\n\n        const analysis = { hasUserId: false, hasFolderId: false, hasSearch: false, hasTags: false, hasSort: false, hasPagination: false, selectivity: 1, complexity: 0 }\n        (optimizer as any).recordQueryAnalysis(analysis, plan, 1)\n      }\n\n      // 添加一些慢查询\n      for (let i = 0; i < 3; i++) {\n        const plan: QueryPlan = {\n          estimatedCost: 100,\n          indexes: ['slow-index'],\n          filterOrder: [],\n          limitStrategy: 'offset',\n          cacheKey: 'slow',\n          cacheTTL: 30000\n        }\n\n        const analysis = { hasUserId: false, hasFolderId: false, hasSearch: false, hasTags: false, hasSort: false, hasPagination: false, selectivity: 1, complexity: 0 }\n        (optimizer as any).recordQueryAnalysis(analysis, plan, 100) // 100ms 慢查询\n      }\n\n      const report = optimizer.getPerformanceReport()\n      expect(report.recommendations.length).toBeGreaterThan(0)\n      expect(report.recommendations[0]).toContain('考虑删除低使用率索引')\n      expect(report.recommendations[1]).toContain('发现 1 个慢查询模式')\n    })\n  })\n\n  describe('清理功能', () => {\n    test('应该清理旧统计数据', () => {\n      // 添加一些查询指标\n      const oldDate = new Date(Date.now() - 10 * 24 * 60 * 60 * 1000) // 10天前\n      const recentDate = new Date()\n\n      // 模拟旧查询\n      const oldPlan: QueryPlan = {\n        estimatedCost: 50,\n        indexes: ['old-index'],\n        filterOrder: [],\n        limitStrategy: 'offset',\n        cacheKey: 'old',\n        cacheTTL: 30000\n      }\n\n      const oldAnalysis = { hasUserId: false, hasFolderId: false, hasSearch: false, hasTags: false, hasSort: false, hasPagination: false, selectivity: 1, complexity: 0 }\n      ;(optimizer as any).recordQueryAnalysis(oldAnalysis, oldPlan, oldDate.getTime())\n\n      // 模拟新查询\n      const newPlan: QueryPlan = {\n        estimatedCost: 30,\n        indexes: ['new-index'],\n        filterOrder: [],\n        limitStrategy: 'offset',\n        cacheKey: 'new',\n        cacheTTL: 30000\n      }\n\n      const newAnalysis = { hasUserId: false, hasFolderId: false, hasSearch: false, hasTags: false, hasSort: false, hasPagination: false, selectivity: 1, complexity: 0 }\n      ;(optimizer as any).recordQueryAnalysis(newAnalysis, newPlan, recentDate.getTime())\n\n      // 清理7天前的数据\n      optimizer.cleanup()\n\n      // 旧数据应该被清理\n      const report = optimizer.getPerformanceReport()\n      expect(report.totalQueries).toBe(1) // 只剩下新查询\n    })\n\n    test('应该处理清理时的边界情况', () => {\n      // 空状态清理\n      expect(() => optimizer.cleanup()).not.toThrow()\n    })\n  })\n\n  describe('边界情况和错误处理', () => {\n    test('应该处理无效的查询参数', async () => {\n      const invalidQuery = {\n        userId: null,\n        folderId: undefined,\n        tags: null,\n        sortBy: 'invalid_field'\n      }\n\n      db.cards.count.mockResolvedValue(100)\n\n      const result = await optimizer.optimizeCardsQuery(invalidQuery)\n\n      // 应该优雅处理无效参数\n      expect(result).toBeDefined()\n      expect(result.plan).toBeDefined()\n    })\n\n    test('应该处理空字符串搜索', async () => {\n      const query = {\n        search: '',\n        userId: 'user123'\n      }\n\n      db.cards.count.mockResolvedValue(100)\n\n      const result = await optimizer.optimizeCardsQuery(query)\n\n      // 空搜索不应该影响分析\n      expect(result.plan.cacheKey).toContain('no-search')\n    })\n\n    test('应该处理数据库连接错误', async () => {\n      const query = {\n        userId: 'user123',\n        limit: 10\n      }\n\n      db.cards.count.mockRejectedValue(new Error('Connection failed'))\n\n      const result = await optimizer.optimizeCardsQuery(query)\n\n      // 应该使用保守估算\n      expect(result.estimatedRows).toBe(10)\n    })\n  })\n\n  describe('性能测试', () => {\n    test('应该保持良好的查询优化性能', async () => {\n      const query = {\n        userId: 'user123',\n        folderId: 'folder456',\n        search: 'performance test',\n        tags: ['perf', 'test'],\n        sortBy: 'updated',\n        sortOrder: 'desc',\n        limit: 50\n      }\n\n      db.cards.count.mockResolvedValue(1000)\n\n      const start = performance.now()\n\n      // 执行多次优化操作\n      for (let i = 0; i < 100; i++) {\n        await optimizer.optimizeCardsQuery(query)\n      }\n\n      const end = performance.now()\n      const duration = end - start\n\n      // 100次优化操作应该在合理时间内完成\n      expect(duration).toBeLessThan(1000) // 1秒\n    })\n\n    test('应该避免内存泄漏', () => {\n      // 创建多个优化器实例\n      const instances = []\n      for (let i = 0; i < 100; i++) {\n        instances.push(new QueryOptimizer())\n      }\n\n      // 清理\n      instances.length = 0\n\n      // 如果没有内存泄漏，这个测试应该通过\n      expect(true).toBe(true)\n    })\n  })\n\n  describe('TypeScript类型检查', () => {\n    test('应该符合TypeScript接口', () => {\n      const stats: IndexStats[] = optimizer.getIndexStats()\n      expect(Array.isArray(stats)).toBe(true)\n\n      const report = optimizer.getPerformanceReport()\n      expect(report).toHaveProperty('totalQueries')\n      expect(report).toHaveProperty('avgOptimizationTime')\n      expect(report).toHaveProperty('mostUsedIndexes')\n      expect(report).toHaveProperty('recommendations')\n    })\n  })\n})"],"version":3}
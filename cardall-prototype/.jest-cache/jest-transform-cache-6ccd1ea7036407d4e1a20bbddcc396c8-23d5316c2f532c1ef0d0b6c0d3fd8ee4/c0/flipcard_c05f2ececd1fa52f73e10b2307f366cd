836eb1b1ae206eeb981bd2e3fc53b29c
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlipCard = FlipCard;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const button_1 = require("@/components/ui/button");
const lucide_react_1 = require("lucide-react");
const utils_1 = require("@/lib/utils");
const dropdown_menu_1 = require("@/components/ui/dropdown-menu");
const rich_text_editor_1 = require("./rich-text-editor");
const title_editor_1 = require("./title-editor");
const card_tags_1 = require("../tag/card-tags");
function FlipCard({ card, onFlip, onUpdate, onCopy, onScreenshot, onShare, onDelete, onStyleChange, onTagsChange, onMoveToFolder, className, size = 'md' }) {
    const [isHovered, setIsHovered] = (0, react_1.useState)(false);
    const [isEditing, setIsEditing] = (0, react_1.useState)(false);
    const [editingField, setEditingField] = (0, react_1.useState)(null);
    const [originalContent, setOriginalContent] = (0, react_1.useState)(null);
    const [tempContent, setTempContent] = (0, react_1.useState)(null);
    const [isFlipping, setIsFlipping] = (0, react_1.useState)(false);
    const cardRef = (0, react_1.useRef)(null);
    const currentContent = card.isFlipped ? card.backContent : card.frontContent;
    // Size variants - 确保所有尺寸都使用完整宽度
    const sizeClasses = {
        sm: 'w-full',
        md: 'w-full',
        lg: 'w-full'
    };
    // 内容区域的padding控制，不限制宽度
    const contentPaddingClasses = {
        sm: 'p-3',
        md: 'p-4',
        lg: 'p-5'
    };
    // Style generation based on card.style
    const getCardStyles = () => {
        const { style } = card;
        const baseStyles = {
            borderRadius: '1rem', // 统一使用16px圆角
            fontFamily: style.fontFamily,
            fontSize: style.fontSize === 'sm' ? '0.875rem' :
                style.fontSize === 'lg' ? '1.125rem' : '1rem',
            fontWeight: style.fontWeight,
            color: style.textColor,
            borderWidth: style.borderWidth || 0,
            borderColor: style.borderColor,
        };
        // Handle different style types and add special classes
        let specialClasses = '';
        if (style.type === 'gradient' && style.gradientColors) {
            baseStyles.background = `linear-gradient(135deg, ${style.gradientColors.join(', ')})`;
            // Add animation classes based on style ID or gradient colors
            if (style.gradientColors.includes('#8a2be2') && style.gradientColors.includes('#00ffff')) {
                specialClasses = 'gradient-wave-animation';
                // 确保渐变波浪样式不会干扰编辑功能
                baseStyles.position = 'relative';
            }
            else if (style.gradientColors.includes('#ee7752') && style.gradientColors.includes('#23d5ab')) {
                specialClasses = 'moving-gradient-animation';
            }
            else if (style.gradientColors.includes('#667eea')) {
                specialClasses = 'gradient-mesh-animation';
            }
        }
        else if (style.type === 'glass') {
            // Glass morphism effect
            baseStyles.background = style.backgroundColor || 'rgba(255, 255, 255, 0.15)';
            baseStyles.backdropFilter = 'blur(20px) saturate(180%)';
            baseStyles.WebkitBackdropFilter = 'blur(20px) saturate(180%)';
            baseStyles.border = `1px solid ${style.borderColor || 'rgba(255, 255, 255, 0.18)'}`;
            specialClasses = 'glass-morphism';
        }
        else {
            // Handle special gradient backgrounds from backgroundColor field
            if (style.backgroundColor && style.backgroundColor.includes('linear-gradient')) {
                baseStyles.background = style.backgroundColor;
                baseStyles.backgroundSize = '400% 400%';
                // Add gradient animation for gradient-mesh style
                if (style.backgroundColor.includes('#667eea')) {
                    specialClasses = 'gradient-mesh-animation';
                }
            }
            else {
                baseStyles.backgroundColor = style.backgroundColor;
                // Add animation classes based on solid colors and border
                if (style.backgroundColor === '#1a1a2e' && style.borderColor === '#4361ee') {
                    specialClasses = 'pulse-border-animation';
                }
                else if (style.backgroundColor === '#0f172a') {
                    specialClasses = 'glow-hover-animation';
                }
            }
        }
        // Add shadow
        const shadowClasses = {
            sm: 'shadow-sm',
            md: 'shadow-md',
            lg: 'shadow-lg',
            xl: 'shadow-xl',
            none: '',
            '2xl': 'shadow-2xl',
            glass: 'shadow-lg' // Custom glass shadow
        };
        return {
            style: baseStyles,
            shadowClass: shadowClasses[style.shadow || 'md'] || 'shadow-md',
            specialClasses
        };
    };
    const { style: cardStyles, shadowClass, specialClasses } = getCardStyles();
    const handleFlip = (0, react_1.useCallback)((e) => {
        e.stopPropagation();
        e.preventDefault();
        if (isFlipping)
            return; // 防止重复点击
        setIsFlipping(true);
        onFlip(card.id);
        // 动画完成后重置状态
        setTimeout(() => {
            setIsFlipping(false);
        }, 600);
    }, [card.id, onFlip, isFlipping]);
    // Start editing
    const handleEdit = (e) => {
        e.stopPropagation();
        startEditing('content');
    };
    // Double click to edit
    const handleDoubleClick = (field) => {
        startEditing(field);
    };
    const startEditing = (field) => {
        setOriginalContent(currentContent);
        setTempContent(currentContent);
        setEditingField(field);
        setIsEditing(true);
    };
    // Update temp content during editing
    const handleTempContentUpdate = (field, value) => {
        if (tempContent) {
            setTempContent({
                ...tempContent,
                [field]: value,
                lastModified: new Date()
            });
        }
    };
    // Save changes
    const handleSaveEdit = () => {
        if (tempContent) {
            const contentKey = card.isFlipped ? 'backContent' : 'frontContent';
            const updates = {
                [contentKey]: tempContent
            };
            onUpdate(card.id, updates);
        }
        setIsEditing(false);
        setEditingField(null);
        setOriginalContent(null);
        setTempContent(null);
    };
    // Cancel changes
    const handleCancelEdit = () => {
        setIsEditing(false);
        setEditingField(null);
        setOriginalContent(null);
        setTempContent(null);
    };
    // Legacy handlers for backward compatibility
    const handleTitleChange = (e) => {
        handleTempContentUpdate('title', e.target.value);
    };
    const handleTextChange = (e) => {
        handleTempContentUpdate('text', e.target.value);
    };
    const handleKeyDown = (e) => {
        if (e.key === 'Escape') {
            handleCancelEdit();
        }
        if (e.key === 'Enter' && e.ctrlKey) {
            handleSaveEdit();
        }
    };
    return ((0, jsx_runtime_1.jsx)("div", { className: (0, utils_1.cn)("relative group", className), "data-card-id": card.id, onMouseEnter: () => setIsHovered(true), onMouseLeave: () => setIsHovered(false), children: (0, jsx_runtime_1.jsx)("div", { className: "flip-card-container", style: {
                perspective: '1000px',
                width: '100%',
                minHeight: 'fit-content'
            }, children: (0, jsx_runtime_1.jsxs)("div", { ref: cardRef, className: (0, utils_1.cn)("flip-card-inner relative transition-all duration-700 ease-in-out", sizeClasses[size]), style: {
                    minHeight: 'fit-content',
                    width: '100%',
                    transformStyle: 'preserve-3d',
                    transform: card.isFlipped ? 'rotateY(180deg)' : 'rotateY(0deg)'
                }, children: [(0, jsx_runtime_1.jsx)("div", { className: (0, utils_1.cn)("flip-card-face flip-card-front w-full flex flex-col transition-all duration-300 relative", shadowClass, specialClasses, contentPaddingClasses[size]), style: {
                            ...cardStyles,
                            borderRadius: cardStyles.borderRadius,
                            backfaceVisibility: 'hidden',
                            position: card.isFlipped ? 'absolute' : 'relative',
                            opacity: card.isFlipped ? 0 : 1
                        }, children: (0, jsx_runtime_1.jsx)(CardSide, { content: tempContent || card.frontContent, isEditing: isEditing && !card.isFlipped, editingField: editingField, onTitleChange: handleTitleChange, onTextChange: handleTextChange, onTempContentUpdate: handleTempContentUpdate, onSaveEdit: handleSaveEdit, onCancelEdit: handleCancelEdit, onDoubleClick: handleDoubleClick, onKeyDown: handleKeyDown, sideLabel: "Front", isHovered: isHovered, onEdit: handleEdit, onFlip: handleFlip, onCopy: () => onCopy(card.id), onScreenshot: () => onScreenshot(card.id), onShare: () => onShare(card.id), onDelete: () => onDelete(card.id), onStyleChange: onStyleChange ? () => onStyleChange(card.id) : undefined, onTagsChange: onTagsChange ? () => onTagsChange(card.id) : undefined, onMoveToFolder: onMoveToFolder, card: card, isFlipping: isFlipping }) }), (0, jsx_runtime_1.jsx)("div", { className: (0, utils_1.cn)("flip-card-face flip-card-back w-full flex flex-col transition-all duration-300 relative", shadowClass, specialClasses, contentPaddingClasses[size]), style: {
                            ...cardStyles,
                            borderRadius: cardStyles.borderRadius,
                            backfaceVisibility: 'hidden',
                            transform: 'rotateY(180deg)',
                            position: card.isFlipped ? 'relative' : 'absolute',
                            top: card.isFlipped ? 'auto' : '0',
                            opacity: card.isFlipped ? 1 : 0
                        }, children: (0, jsx_runtime_1.jsx)(CardSide, { content: tempContent || card.backContent, isEditing: isEditing && card.isFlipped, editingField: editingField, onTitleChange: handleTitleChange, onTextChange: handleTextChange, onTempContentUpdate: handleTempContentUpdate, onSaveEdit: handleSaveEdit, onCancelEdit: handleCancelEdit, onDoubleClick: handleDoubleClick, onKeyDown: handleKeyDown, sideLabel: "Back", isHovered: isHovered, onEdit: handleEdit, onFlip: handleFlip, onCopy: () => onCopy(card.id), onScreenshot: () => onScreenshot(card.id), onShare: () => onShare(card.id), onDelete: () => onDelete(card.id), onStyleChange: onStyleChange ? () => onStyleChange(card.id) : undefined, onTagsChange: onTagsChange ? () => onTagsChange(card.id) : undefined, onMoveToFolder: onMoveToFolder, card: card, isFlipping: isFlipping }) })] }) }) }));
}
function ImageGridComponent({ images }) {
    const displayImages = images.slice(0, 4);
    const imageCount = displayImages.length;
    // Dynamic grid layout based on image count
    const getGridClassName = (count) => {
        switch (count) {
            case 1:
                return "flex justify-center"; // Single image centered
            case 2:
                return "grid grid-cols-2 gap-2"; // Two columns
            case 3:
                return "grid grid-cols-2 gap-2"; // Two columns with special handling for 3rd image
            case 4:
            default:
                return "grid grid-cols-2 gap-2"; // Standard 2x2 grid
        }
    };
    // Dynamic image container styles
    const getImageContainerClassName = (count, index) => {
        const baseClasses = "relative aspect-video rounded-md overflow-hidden bg-muted transition-all duration-200 hover:scale-[1.02]";
        if (count === 1) {
            // Single image: center and limit max width
            return `${baseClasses} max-w-xs w-full`;
        }
        if (count === 3 && index === 2) {
            // Third image in 3-image layout: span both columns and center
            return `${baseClasses} col-span-2 max-w-xs mx-auto`;
        }
        return baseClasses;
    };
    return ((0, jsx_runtime_1.jsx)("div", { className: getGridClassName(imageCount), children: displayImages.map((image, index) => ((0, jsx_runtime_1.jsx)("div", { className: getImageContainerClassName(imageCount, index), children: (0, jsx_runtime_1.jsx)("img", { src: image.url, alt: image.alt || `Image ${index + 1}`, className: "w-full h-full object-cover transition-transform duration-200", loading: "lazy" }) }, index))) }));
}
function CardSide({ content, isEditing, editingField, onTitleChange, onTextChange, onTempContentUpdate, onSaveEdit, onCancelEdit, onDoubleClick, onKeyDown, sideLabel, isHovered, onEdit, onFlip, onCopy, onScreenshot, onShare, onDelete, onStyleChange, onTagsChange, onMoveToFolder, card, isFlipping }) {
    return ((0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col h-full", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-start justify-between mb-3", children: [(0, jsx_runtime_1.jsx)("div", { className: "flex-1 mr-2", children: isEditing && editingField === 'title' ? ((0, jsx_runtime_1.jsx)(title_editor_1.TitleEditor, { content: content.title, onUpdate: (value) => onTempContentUpdate('title', value), onSave: onSaveEdit, onCancel: onCancelEdit, autoFocus: true })) : ((0, jsx_runtime_1.jsx)("h3", { className: "text-lg font-semibold text-left cursor-pointer hover:bg-black/5 rounded px-1 py-0.5 -mx-1 transition-colors", onDoubleClick: () => onDoubleClick('title'), children: content.title || 'Untitled Card' })) }), (0, jsx_runtime_1.jsxs)("div", { className: (0, utils_1.cn)("flex gap-1 transition-all duration-200 flex-shrink-0", isHovered || isEditing ? "opacity-100" : "opacity-60"), children: [(0, jsx_runtime_1.jsx)(button_1.Button, { size: "sm", variant: "ghost", className: (0, utils_1.cn)("h-7 w-7 p-0 rounded-md hover:bg-black/10 transition-all duration-200", isFlipping && "animate-pulse"), onClick: onFlip, title: `Flip to ${card.isFlipped ? 'Front' : 'Back'}`, disabled: isFlipping, children: (0, jsx_runtime_1.jsx)(lucide_react_1.Cat, { className: (0, utils_1.cn)("h-3.5 w-3.5 transition-transform duration-200", isFlipping && "scale-110") }) }), (0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenu, { modal: false, children: [(0, jsx_runtime_1.jsx)(dropdown_menu_1.DropdownMenuTrigger, { asChild: true, children: (0, jsx_runtime_1.jsx)("div", { className: "h-7 w-7 rounded-md hover:bg-black/10 flex items-center justify-center cursor-pointer transition-colors group", onMouseEnter: (e) => {
                                                e.stopPropagation();
                                                // Programmatically trigger the dropdown
                                                const event = new MouseEvent('click', {
                                                    view: window,
                                                    bubbles: true,
                                                    cancelable: true,
                                                });
                                                e.currentTarget.dispatchEvent(event);
                                            }, onClick: (e) => e.stopPropagation(), children: (0, jsx_runtime_1.jsx)(lucide_react_1.MoreHorizontal, { className: "h-3.5 w-3.5" }) }) }), (0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenuContent, { align: "end", className: "w-48", children: [(0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenuItem, { onClick: onEdit, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Edit3, { className: "h-4 w-4 mr-2" }), "Edit Content"] }), (0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenuItem, { onClick: onCopy, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Copy, { className: "h-4 w-4 mr-2" }), "Copy Text"] }), (0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenuItem, { onClick: onScreenshot, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Camera, { className: "h-4 w-4 mr-2" }), "Screenshot"] }), (0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenuItem, { onClick: onShare, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Share2, { className: "h-4 w-4 mr-2" }), "Share"] }), (0, jsx_runtime_1.jsx)(dropdown_menu_1.DropdownMenuSeparator, {}), onStyleChange && ((0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenuItem, { onClick: onStyleChange, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Palette, { className: "h-4 w-4 mr-2" }), "Change Style"] })), onTagsChange && ((0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenuItem, { onClick: onTagsChange, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Tag, { className: "h-4 w-4 mr-2" }), "Manage Tags"] })), onMoveToFolder && ((0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenuItem, { onClick: onMoveToFolder, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FolderOpen, { className: "h-4 w-4 mr-2" }), "Move to Folder"] })), (0, jsx_runtime_1.jsx)(dropdown_menu_1.DropdownMenuSeparator, {}), (0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenuItem, { onClick: onDelete, className: "text-destructive focus:text-destructive", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Trash2, { className: "h-4 w-4 mr-2" }), "Delete Card"] })] })] })] })] }), content.images.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "mb-3 flex-shrink-0", children: [(0, jsx_runtime_1.jsx)(ImageGridComponent, { images: content.images }), content.images.length > 4 && ((0, jsx_runtime_1.jsxs)("div", { className: "text-xs text-muted-foreground mt-1 text-center", children: ["+", content.images.length - 4, " more images"] }))] })), (0, jsx_runtime_1.jsx)("div", { className: "flex-1 mb-3 relative z-10", children: isEditing && editingField === 'content' ? ((0, jsx_runtime_1.jsx)(rich_text_editor_1.RichTextEditor, { content: content.text, placeholder: "Add your content here...", onUpdate: (value) => onTempContentUpdate('text', value), onSave: onSaveEdit, onCancel: onCancelEdit, autoFocus: true })) : ((0, jsx_runtime_1.jsx)("div", { className: "text-sm leading-relaxed text-left cursor-pointer hover:bg-black/5 rounded p-2 -m-2 transition-colors min-h-[100px] tiptap-editor relative z-10", onDoubleClick: (e) => {
                        // 如果点击的是链接，不触发编辑
                        if (e.target.tagName === 'A') {
                            return;
                        }
                        onDoubleClick('content');
                    }, onClick: (e) => {
                        // 处理链接点击
                        const target = e.target;
                        if (target.tagName === 'A') {
                            e.stopPropagation();
                            const href = target.getAttribute('href');
                            if (href) {
                                window.open(href, '_blank', 'noopener,noreferrer');
                            }
                        }
                    }, children: (0, jsx_runtime_1.jsx)("div", { className: "whitespace-pre-wrap", dangerouslySetInnerHTML: {
                            __html: content.text || '<span class="text-muted-foreground">Click to add content...</span>'
                        } }) })) }), (0, jsx_runtime_1.jsxs)("div", { className: "mt-auto", children: [(0, jsx_runtime_1.jsx)(card_tags_1.CardTags, { tags: content.tags, size: "sm" }), content.images.length > 0 && ((0, jsx_runtime_1.jsx)("div", { className: "flex items-center justify-end text-xs text-muted-foreground mt-2", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-1", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Image, { className: "h-3 w-3" }), (0, jsx_runtime_1.jsx)("span", { children: content.images.length })] }) }))] })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
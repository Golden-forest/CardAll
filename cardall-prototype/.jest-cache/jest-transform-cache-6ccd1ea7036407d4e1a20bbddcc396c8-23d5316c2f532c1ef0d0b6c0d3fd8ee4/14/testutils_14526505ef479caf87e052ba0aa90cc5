ebb3c741f443b6f095a789dec7a0308b
"use strict";
/**
 * 测试工具函数库
 * 提供常用的测试辅助函数和模拟对象
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.asyncTestHelper = exports.memoryLeakDetector = exports.performanceTester = exports.testDataGenerator = exports.mockGenerators = exports.customMatchers = exports.AsyncTestHelper = exports.MemoryLeakDetector = exports.PerformanceTester = exports.MockDatabase = exports.mockFactories = void 0;
const globals_1 = require("@jest/globals");
// ============================================================================
// 模拟对象生成器
// ============================================================================
exports.mockFactories = {
    /**
     * 生成模拟卡片数据
     */
    createMockCard(overrides = {}) {
        return {
            id: crypto.randomUUID(),
            frontContent: {
                title: 'Test Card Front',
                text: 'This is test content',
                tags: ['test', 'card']
            },
            backContent: {
                title: 'Test Card Back',
                text: 'Back content test',
                tags: ['back', 'test']
            },
            style: {
                type: 'solid',
                colors: ['#ffffff']
            },
            folderId: crypto.randomUUID(),
            userId: 'test-user-id',
            syncVersion: 1,
            pendingSync: false,
            updatedAt: new Date(),
            createdAt: new Date(),
            ...overrides
        };
    },
    /**
     * 生成模拟文件夹数据
     */
    createMockFolder(overrides = {}) {
        return {
            id: crypto.randomUUID(),
            name: 'Test Folder',
            path: '/test/folder',
            parentId: null,
            userId: 'test-user-id',
            syncVersion: 1,
            pendingSync: false,
            updatedAt: new Date(),
            createdAt: new Date(),
            ...overrides
        };
    },
    /**
     * 生成模拟标签数据
     */
    createMockTag(overrides = {}) {
        return {
            id: crypto.randomUUID(),
            name: 'Test Tag',
            color: '#3b82f6',
            count: 1,
            userId: 'test-user-id',
            syncVersion: 1,
            pendingSync: false,
            updatedAt: new Date(),
            createdAt: new Date(),
            ...overrides
        };
    },
    /**
     * 生成模拟图片数据
     */
    createMockImage(overrides = {}) {
        return {
            id: crypto.randomUUID(),
            cardId: crypto.randomUUID(),
            userId: 'test-user-id',
            fileName: 'test-image.jpg',
            filePath: '/images/test-image.jpg',
            thumbnailPath: '/images/test-image-thumb.jpg',
            metadata: {
                originalName: 'test-image.jpg',
                size: 1024 * 100, // 100KB
                width: 800,
                height: 600,
                format: 'jpeg',
                compressed: true,
                quality: 80
            },
            storageMode: 'indexeddb',
            syncVersion: 1,
            pendingSync: false,
            updatedAt: new Date(),
            createdAt: new Date(),
            ...overrides
        };
    },
    /**
     * 生成同步操作数据
     */
    createMockSyncOperation(overrides = {}) {
        return {
            id: crypto.randomUUID(),
            type: 'create',
            entity: 'card',
            entityId: crypto.randomUUID(),
            userId: 'test-user-id',
            data: {},
            timestamp: new Date(),
            retryCount: 0,
            maxRetries: 5,
            priority: 'normal',
            status: 'pending',
            ...overrides
        };
    }
};
// ============================================================================
// 数据库模拟工具
// ============================================================================
class MockDatabase {
    constructor() {
        Object.defineProperty(this, "stores", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        Object.defineProperty(this, "transactionStack", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Set()
        });
        // 初始化表
        this.initializeTables();
    }
    initializeTables() {
        const tables = ['cards', 'folders', 'tags', 'images', 'syncQueue'];
        tables.forEach(table => {
            this.stores.set(table, new Map());
        });
    }
    // 模拟表操作
    table(tableName) {
        return new MockTable(this.stores.get(tableName) || new Map(), tableName);
    }
    // 模拟事务
    async transaction(mode, tables, callback) {
        const transactionKey = `tx_${Date.now()}_${Math.random()}`;
        this.transactionStack.add(transactionKey);
        try {
            await callback();
        }
        finally {
            this.transactionStack.delete(transactionKey);
        }
    }
    // 模拟打开数据库
    async open() {
        // 模拟数据库打开
    }
    // 模拟关闭数据库
    async close() {
        // 模拟数据库关闭
    }
    // 清空所有数据
    clear() {
        this.stores.forEach(store => store.clear());
    }
    // 获取所有表名
    getTableNames() {
        return Array.from(this.stores.keys());
    }
}
exports.MockDatabase = MockDatabase;
class MockTable {
    constructor(store, tableName) {
        Object.defineProperty(this, "store", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: store
        });
        Object.defineProperty(this, "tableName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: tableName
        });
    }
    async add(data) {
        const id = data.id || crypto.randomUUID();
        this.store.set(id, { ...data, id });
        return id;
    }
    async bulkAdd(dataArray) {
        const ids = dataArray.map(data => data.id || crypto.randomUUID());
        dataArray.forEach((data, index) => {
            this.store.set(ids[index], { ...data, id: ids[index] });
        });
        return ids;
    }
    async get(id) {
        return this.store.get(id);
    }
    async update(id, changes) {
        const existing = this.store.get(id);
        if (existing) {
            this.store.set(id, { ...existing, ...changes });
            return 1;
        }
        return 0;
    }
    async delete(id) {
        const deleted = this.store.delete(id);
        return deleted ? 1 : 0;
    }
    async clear() {
        this.store.clear();
    }
    async count() {
        return this.store.size;
    }
    async toArray() {
        return Array.from(this.store.values());
    }
    where(fieldName) {
        return new MockCollection(this.store, fieldName);
    }
    orderBy(fieldName) {
        return new MockCollection(this.store, null, fieldName);
    }
    reverse() {
        return new MockCollection(this.store, null, null, true);
    }
    limit(count) {
        return new MockCollection(this.store, null, null, false, count);
    }
    offset(offset) {
        return new MockCollection(this.store, null, null, false, undefined, offset);
    }
    filter(predicate) {
        return new MockCollection(this.store, null, null, false, undefined, undefined, predicate);
    }
    sortBy(fieldName) {
        return new MockCollection(this.store, null, fieldName);
    }
}
class MockCollection {
    constructor(store, whereField, orderByField, reverseOrder = false, limitCount, offsetValue, filterPredicate) {
        Object.defineProperty(this, "store", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: store
        });
        Object.defineProperty(this, "whereField", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: whereField
        });
        Object.defineProperty(this, "orderByField", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: orderByField
        });
        Object.defineProperty(this, "reverseOrder", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: reverseOrder
        });
        Object.defineProperty(this, "limitCount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: limitCount
        });
        Object.defineProperty(this, "offsetValue", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: offsetValue
        });
        Object.defineProperty(this, "filterPredicate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: filterPredicate
        });
        Object.defineProperty(this, "filteredData", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        this.buildQuery();
    }
    buildQuery() {
        let data = Array.from(this.store.values());
        // 应用过滤
        if (this.filterPredicate) {
            data = data.filter(this.filterPredicate);
        }
        // 应用排序
        if (this.orderByField) {
            data.sort((a, b) => {
                const aVal = this.getNestedValue(a, this.orderByField);
                const bVal = this.getNestedValue(b, this.orderByField);
                return aVal > bVal ? 1 : aVal < bVal ? -1 : 0;
            });
        }
        if (this.reverseOrder) {
            data.reverse();
        }
        // 应用分页
        if (this.offsetValue) {
            data = data.slice(this.offsetValue);
        }
        if (this.limitCount) {
            data = data.slice(0, this.limitCount);
        }
        this.filteredData = data;
    }
    getNestedValue(obj, path) {
        return path.split('.').reduce((current, key) => current?.[key], obj);
    }
    equals(value) {
        if (this.whereField) {
            this.filteredData = this.filteredData.filter(item => {
                const fieldValue = this.getNestedValue(item, this.whereField);
                return fieldValue === value;
            });
        }
        return this;
    }
    async toArray() {
        return this.filteredData;
    }
    async count() {
        return this.filteredData.length;
    }
    async first() {
        return this.filteredData[0];
    }
    async last() {
        return this.filteredData[this.filteredData.length - 1];
    }
}
// ============================================================================
// 性能测试工具
// ============================================================================
class PerformanceTester {
    constructor() {
        Object.defineProperty(this, "measurements", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
    }
    async measure(name, fn) {
        const startTime = performance.now();
        const result = await fn();
        const duration = performance.now() - startTime;
        this.recordMeasurement(name, duration);
        return { result, duration };
    }
    measureSync(name, fn) {
        const startTime = performance.now();
        const result = fn();
        const duration = performance.now() - startTime;
        this.recordMeasurement(name, duration);
        return { result, duration };
    }
    recordMeasurement(name, duration) {
        if (!this.measurements.has(name)) {
            this.measurements.set(name, []);
        }
        this.measurements.get(name).push(duration);
    }
    getStats(name) {
        const measurements = this.measurements.get(name) || [];
        if (measurements.length === 0)
            return null;
        const sorted = [...measurements].sort((a, b) => a - b);
        const sum = measurements.reduce((acc, val) => acc + val, 0);
        return {
            count: measurements.length,
            min: Math.min(...measurements),
            max: Math.max(...measurements),
            avg: sum / measurements.length,
            median: sorted[Math.floor(sorted.length / 2)],
            p95: sorted[Math.floor(sorted.length * 0.95)],
            p99: sorted[Math.floor(sorted.length * 0.99)]
        };
    }
    getAllStats() {
        const stats = {};
        for (const [name] of this.measurements) {
            stats[name] = this.getStats(name);
        }
        return stats;
    }
    reset() {
        this.measurements.clear();
    }
}
exports.PerformanceTester = PerformanceTester;
// ============================================================================
// 内存泄漏检测工具
// ============================================================================
class MemoryLeakDetector {
    constructor() {
        Object.defineProperty(this, "snapshots", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        Object.defineProperty(this, "baseline", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
    }
    async takeSnapshot(name) {
        // 模拟内存使用量
        const memoryUsage = this.simulateMemoryUsage();
        this.snapshots.set(name, memoryUsage);
    }
    compareSnapshots(name1, name2) {
        const mem1 = this.snapshots.get(name1) || 0;
        const mem2 = this.snapshots.get(name2) || 0;
        return mem2 - mem1;
    }
    setBaseline() {
        this.baseline = this.simulateMemoryUsage();
    }
    getMemoryGrowthSinceBaseline() {
        const current = this.simulateMemoryUsage();
        return current - this.baseline;
    }
    simulateMemoryUsage() {
        // 模拟内存使用量（MB）
        return Math.random() * 100 + 50;
    }
    detectLeaks(thresholdMB = 10) {
        const leaks = [];
        const current = this.simulateMemoryUsage();
        const growth = current - this.baseline;
        if (growth > thresholdMB) {
            leaks.push(`内存增长 ${growth.toFixed(2)}MB 超过阈值 ${thresholdMB}MB`);
        }
        return leaks;
    }
    clearSnapshots() {
        this.snapshots.clear();
        this.baseline = 0;
    }
}
exports.MemoryLeakDetector = MemoryLeakDetector;
// ============================================================================
// 异步测试工具
// ============================================================================
class AsyncTestHelper {
    static async waitFor(condition, options = {}) {
        const { timeout = 5000, interval = 100, message = '条件超时' } = options;
        const startTime = Date.now();
        while (Date.now() - startTime < timeout) {
            try {
                const result = await condition();
                if (result) {
                    return result;
                }
            }
            catch (error) {
                // 忽略错误，继续等待
            }
            await this.delay(interval);
        }
        throw new Error(`${message}: 等待 ${timeout}ms 后超时`);
    }
    static async delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    static async retry(fn, options = {}) {
        const { maxRetries = 3, delay = 1000, backoff = true } = options;
        let lastError;
        for (let i = 0; i <= maxRetries; i++) {
            try {
                return await fn();
            }
            catch (error) {
                lastError = error;
                if (i < maxRetries) {
                    const waitTime = backoff ? delay * Math.pow(2, i) : delay;
                    await this.delay(waitTime);
                }
            }
        }
        throw lastError;
    }
}
exports.AsyncTestHelper = AsyncTestHelper;
// ============================================================================
// 断言扩展
// ============================================================================
exports.customMatchers = {
    toBeWithinRange(received, floor, ceiling) {
        const pass = received >= floor && received <= ceiling;
        if (pass) {
            return {
                message: () => `expected ${received} not to be within range ${floor} - ${ceiling}`,
                pass: true
            };
        }
        else {
            return {
                message: () => `expected ${received} to be within range ${floor} - ${ceiling}`,
                pass: false
            };
        }
    },
    toBeValidUUID(received) {
        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
        const pass = uuidRegex.test(received);
        if (pass) {
            return {
                message: () => `expected ${received} not to be a valid UUID`,
                pass: true
            };
        }
        else {
            return {
                message: () => `expected ${received} to be a valid UUID`,
                pass: false
            };
        }
    },
    toHavePerformance(received, thresholds) {
        const { maxDuration, minSuccessRate } = thresholds;
        const errors = [];
        if (maxDuration && received.averageResponseTime > maxDuration) {
            errors.push(`平均响应时间 ${received.averageResponseTime}ms 超过阈值 ${maxDuration}ms`);
        }
        if (minSuccessRate && received.successRate < minSuccessRate) {
            errors.push(`成功率 ${received.successRate} 低于阈值 ${minSuccessRate}`);
        }
        if (errors.length === 0) {
            return {
                message: () => `expected performance not to meet thresholds`,
                pass: true
            };
        }
        else {
            return {
                message: () => `performance issues: ${errors.join(', ')}`,
                pass: false
            };
        }
    }
};
// 注册自定义断言
expect.extend(exports.customMatchers);
// ============================================================================
// Mock 函数生成器
// ============================================================================
exports.mockGenerators = {
    createSupabaseClient() {
        return {
            from: globals_1.jest.fn().mockReturnValue({
                select: globals_1.jest.fn().mockReturnValue({
                    data: [],
                    error: null
                }),
                insert: globals_1.jest.fn().mockReturnValue({
                    data: null,
                    error: null
                }),
                update: globals_1.jest.fn().mockReturnValue({
                    data: null,
                    error: null
                }),
                delete: globals_1.jest.fn().mockReturnValue({
                    error: null
                })
            }),
            auth: {
                getUser: globals_1.jest.fn().mockResolvedValue({ data: { user: null }, error: null }),
                signUp: globals_1.jest.fn().mockResolvedValue({ data: { user: null }, error: null }),
                signIn: globals_1.jest.fn().mockResolvedValue({ data: { session: null }, error: null }),
                signOut: globals_1.jest.fn().mockResolvedValue({ error: null })
            }
        };
    },
    createDexieInstance() {
        const mockDb = new MockDatabase();
        return mockDb;
    }
};
// ============================================================================
// 测试数据生成器
// ============================================================================
exports.testDataGenerator = {
    /**
     * 生成测试数据集
     */
    generateTestData(config = {}) {
        const { cardCount = 10, folderCount = 3, tagCount = 5, imageCount = 5 } = config;
        const cards = Array.from({ length: cardCount }, (_, i) => exports.mockFactories.createMockCard({ frontContent: { title: `Card ${i + 1}` } }));
        const folders = Array.from({ length: folderCount }, (_, i) => exports.mockFactories.createMockFolder({ name: `Folder ${i + 1}` }));
        const tags = Array.from({ length: tagCount }, (_, i) => exports.mockFactories.createMockTag({ name: `Tag ${i + 1}` }));
        const images = Array.from({ length: imageCount }, (_, i) => exports.mockFactories.createMockImage({ fileName: `image${i + 1}.jpg` }));
        return { cards, folders, tags, images };
    },
    /**
     * 生成大规模测试数据
     */
    generateLargeDataset(size = 1000) {
        return Array.from({ length: size }, (_, i) => exports.mockFactories.createMockCard({
            frontContent: {
                title: `Large Dataset Card ${i + 1}`,
                text: `This is card number ${i + 1} in a large dataset`,
                tags: [`batch-${Math.floor(i / 100)}`, `large-dataset`]
            }
        }));
    }
};
// ============================================================================
// 导出工具实例
// ============================================================================
exports.performanceTester = new PerformanceTester();
exports.memoryLeakDetector = new MemoryLeakDetector();
exports.asyncTestHelper = AsyncTestHelper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXHNyY1xcX190ZXN0c19fXFx1dGlsc1xcdGVzdC11dGlscy50cyIsIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7QUFFSCwyQ0FBb0M7QUFFcEMsK0VBQStFO0FBQy9FLFVBQVU7QUFDViwrRUFBK0U7QUFFbEUsUUFBQSxhQUFhLEdBQUc7SUFDM0I7O09BRUc7SUFDSCxjQUFjLENBQUMsWUFBMEIsRUFBRTtRQUN6QyxPQUFPO1lBQ0wsRUFBRSxFQUFFLE1BQU0sQ0FBQyxVQUFVLEVBQUU7WUFDdkIsWUFBWSxFQUFFO2dCQUNaLEtBQUssRUFBRSxpQkFBaUI7Z0JBQ3hCLElBQUksRUFBRSxzQkFBc0I7Z0JBQzVCLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7YUFDdkI7WUFDRCxXQUFXLEVBQUU7Z0JBQ1gsS0FBSyxFQUFFLGdCQUFnQjtnQkFDdkIsSUFBSSxFQUFFLG1CQUFtQjtnQkFDekIsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQzthQUN2QjtZQUNELEtBQUssRUFBRTtnQkFDTCxJQUFJLEVBQUUsT0FBZ0I7Z0JBQ3RCLE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQzthQUNwQjtZQUNELFFBQVEsRUFBRSxNQUFNLENBQUMsVUFBVSxFQUFFO1lBQzdCLE1BQU0sRUFBRSxjQUFjO1lBQ3RCLFdBQVcsRUFBRSxDQUFDO1lBQ2QsV0FBVyxFQUFFLEtBQUs7WUFDbEIsU0FBUyxFQUFFLElBQUksSUFBSSxFQUFFO1lBQ3JCLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRTtZQUNyQixHQUFHLFNBQVM7U0FDYixDQUFBO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0gsZ0JBQWdCLENBQUMsWUFBMEIsRUFBRTtRQUMzQyxPQUFPO1lBQ0wsRUFBRSxFQUFFLE1BQU0sQ0FBQyxVQUFVLEVBQUU7WUFDdkIsSUFBSSxFQUFFLGFBQWE7WUFDbkIsSUFBSSxFQUFFLGNBQWM7WUFDcEIs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QUUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUNqRSxDQUFBO1FBRUQsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFBO0lBQ3pDLENBQUM7SUFFRDs7T0FFRztJQUNILG9CQUFvQixDQUFDLE9BQWUsSUFBSTtRQUN0QyxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FDM0MscUJBQWEsQ0FBQyxjQUFjLENBQUM7WUFDM0IsWUFBWSxFQUFFO2dCQUNaLEtBQUssRUFBRSxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDcEMsSUFBSSxFQUFFLHVCQUF1QixDQUFDLEdBQUcsQ0FBQyxxQkFBcUI7Z0JBQ3ZELElBQUksRUFBRSxDQUFDLFNBQVMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsRUFBRSxlQUFlLENBQUM7YUFDeEQ7U0FDRixDQUFDLENBQ0gsQ0FBQTtJQUNILENBQUM7Q0FDRixDQUFBO0FBRUQsK0VBQStFO0FBQy9FLFNBQVM7QUFDVCwrRUFBK0U7QUFFbEUsUUFBQSxpQkFBaUIsR0FBRyxJQUFJLGlCQUFpQixFQUFFLENBQUE7QUFDM0MsUUFBQSxrQkFBa0IsR0FBRyxJQUFJLGtCQUFrQixFQUFFLENBQUE7QUFDN0MsUUFBQSxlQUFlLEdBQUcsZUFBZSxDQUFBIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkQ6XFxQcm9qZWN0c1xcQ2FyZEV2ZXJ5dGhpbmdcXGNhcmRhbGwtcHJvdG90eXBlXFxzcmNcXF9fdGVzdHNfX1xcdXRpbHNcXHRlc3QtdXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIOa1i+ivleW3peWFt+WHveaVsOW6k1xyXG4gKiDmj5DkvpvluLjnlKjnmoTmtYvor5XovoXliqnlh73mlbDlkozmqKHmi5/lr7nosaFcclxuICovXHJcblxyXG5pbXBvcnQgeyBqZXN0IH0gZnJvbSAnQGplc3QvZ2xvYmFscydcclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8g5qih5ouf5a+56LGh55Sf5oiQ5ZmoXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbmV4cG9ydCBjb25zdCBtb2NrRmFjdG9yaWVzID0ge1xyXG4gIC8qKlxyXG4gICAqIOeUn+aIkOaooeaLn+WNoeeJh+aVsOaNrlxyXG4gICAqL1xyXG4gIGNyZWF0ZU1vY2tDYXJkKG92ZXJyaWRlczogUGFydGlhbDxhbnk+ID0ge30pIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGlkOiBjcnlwdG8ucmFuZG9tVVVJRCgpLFxyXG4gICAgICBmcm9udENvbnRlbnQ6IHtcclxuICAgICAgICB0aXRsZTogJ1Rlc3QgQ2FyZCBGcm9udCcsXHJcbiAgICAgICAgdGV4dDogJ1RoaXMgaXMgdGVzdCBjb250ZW50JyxcclxuICAgICAgICB0YWdzOiBbJ3Rlc3QnLCAnY2FyZCddXHJcbiAgICAgIH0sXHJcbiAgICAgIGJhY2tDb250ZW50OiB7XHJcbiAgICAgICAgdGl0bGU6ICdUZXN0IENhcmQgQmFjaycsXHJcbiAgICAgICAgdGV4dDogJ0JhY2sgY29udGVudCB0ZXN0JyxcclxuICAgICAgICB0YWdzOiBbJ2JhY2snLCAndGVzdCddXHJcbiAgICAgIH0sXHJcbiAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgdHlwZTogJ3NvbGlkJyBhcyBjb25zdCxcclxuICAgICAgICBjb2xvcnM6IFsnI2ZmZmZmZiddXHJcbiAgICAgIH0sXHJcbiAgICAgIGZvbGRlcklkOiBjcnlwdG8ucmFuZG9tVVVJRCgpLFxyXG4gICAgICB1c2VySWQ6ICd0ZXN0LXVzZXItaWQnLFxyXG4gICAgICBzeW5jVmVyc2lvbjogMSxcclxuICAgICAgcGVuZGluZ1N5bmM6IGZhbHNlLFxyXG4gICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKCksXHJcbiAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcclxuICAgICAgLi4ub3ZlcnJpZGVzXHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICog55Sf5oiQ5qih5ouf5paH5Lu25aS55pWw5o2uXHJcbiAgICovXHJcbiAgY3JlYXRlTW9ja0ZvbGRlcihvdmVycmlkZXM6IFBhcnRpYWw8YW55PiA9IHt9KSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBpZDogY3J5cHRvLnJhbmRvbVVVSUQoKSxcclxuICAgICAgbmFtZTogJ1Rlc3QgRm9sZGVyJyxcclxuICAgICAgcGF0aDogJy90ZXN0L2ZvbGRlcicsXHJcbiAgICAgIHBhcmVudElkOiBudWxsLFxyXG4gICAgICB1c2VySWQ6ICd0ZXN0LXVzZXItaWQnLFxyXG4gICAgICBzeW5jVmVyc2lvbjogMSxcclxuICAgICAgcGVuZGluZ1N5bmM6IGZhbHNlLFxyXG4gICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKCksXHJcbiAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcclxuICAgICAgLi4ub3ZlcnJpZGVzXHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICog55Sf5oiQ5qih5ouf5qCH562+5pWw5o2uXHJcbiAgICovXHJcbiAgY3JlYXRlTW9ja1RhZyhvdmVycmlkZXM6IFBhcnRpYWw8YW55PiA9IHt9KSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBpZDogY3J5cHRvLnJhbmRvbVVVSUQoKSxcclxuICAgICAgbmFtZTogJ1Rlc3QgVGFnJyxcclxuICAgICAgY29sb3I6ICcjM2I4MmY2JyxcclxuICAgICAgY291bnQ6IDEsXHJcbiAgICAgIHVzZXJJZDogJ3Rlc3QtdXNlci1pZCcsXHJcbiAgICAgIHN5bmNWZXJzaW9uOiAxLFxyXG4gICAgICBwZW5kaW5nU3luYzogZmFsc2UsXHJcbiAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKSxcclxuICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxyXG4gICAgICAuLi5vdmVycmlkZXNcclxuICAgIH1cclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiDnlJ/miJDmqKHmi5/lm77niYfmlbDmja5cclxuICAgKi9cclxuICBjcmVhdGVNb2NrSW1hZ2Uob3ZlcnJpZGVzOiBQYXJ0aWFsPGFueT4gPSB7fSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaWQ6IGNyeXB0by5yYW5kb21VVUlEKCksXHJcbiAgICAgIGNhcmRJZDogY3J5cHRvLnJhbmRvbVVVSUQoKSxcclxuICAgICAgdXNlcklkOiAndGVzdC11c2VyLWlkJyxcclxuICAgICAgZmlsZU5hbWU6ICd0ZXN0LWltYWdlLmpwZycsXHJcbiAgICAgIGZpbGVQYXRoOiAnL2ltYWdlcy90ZXN0LWltYWdlLmpwZycsXHJcbiAgICAgIHRodW1ibmFpbFBhdGg6ICcvaW1hZ2VzL3Rlc3QtaW1hZ2UtdGh1bWIuanBnJyxcclxuICAgICAgbWV0YWRhdGE6IHtcclxuICAgICAgICBvcmlnaW5hbE5hbWU6ICd0ZXN0LWltYWdlLmpwZycsXHJcbiAgICAgICAgc2l6ZTogMTAyNCAqIDEwMCwgLy8gMTAwS0JcclxuICAgICAgICB3aWR0aDogODAwLFxyXG4gICAgICAgIGhlaWdodDogNjAwLFxyXG4gICAgICAgIGZvcm1hdDogJ2pwZWcnLFxyXG4gICAgICAgIGNvbXByZXNzZWQ6IHRydWUsXHJcbiAgICAgICAgcXVhbGl0eTogODBcclxuICAgICAgfSxcclxuICAgICAgc3RvcmFnZU1vZGU6ICdpbmRleGVkZGInIGFzIGNvbnN0LFxyXG4gICAgICBzeW5jVmVyc2lvbjogMSxcclxuICAgICAgcGVuZGluZ1N5bmM6IGZhbHNlLFxyXG4gICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKCksXHJcbiAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcclxuICAgICAgLi4ub3ZlcnJpZGVzXHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICog55Sf5oiQ5ZCM5q2l5pON5L2c5pWw5o2uXHJcbiAgICovXHJcbiAgY3JlYXRlTW9ja1N5bmNPcGVyYXRpb24ob3ZlcnJpZGVzOiBQYXJ0aWFsPGFueT4gPSB7fSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaWQ6IGNyeXB0by5yYW5kb21VVUlEKCksXHJcbiAgICAgIHR5cGU6ICdjcmVhdGUnIGFzIGNvbnN0LFxyXG4gICAgICBlbnRpdHk6ICdjYXJkJyBhcyBjb25zdCxcclxuICAgICAgZW50aXR5SWQ6IGNyeXB0by5yYW5kb21VVUlEKCksXHJcbiAgICAgIHVzZXJJZDogJ3Rlc3QtdXNlci1pZCcsXHJcbiAgICAgIGRhdGE6IHt9LFxyXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXHJcbiAgICAgIHJldHJ5Q291bnQ6IDAsXHJcbiAgICAgIG1heFJldHJpZXM6IDUsXHJcbiAgICAgIHByaW9yaXR5OiAnbm9ybWFsJyBhcyBjb25zdCxcclxuICAgICAgc3RhdHVzOiAncGVuZGluZycgYXMgY29uc3QsXHJcbiAgICAgIC4uLm92ZXJyaWRlc1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyDmlbDmja7lupPmqKHmi5/lt6XlhbdcclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuZXhwb3J0IGNsYXNzIE1vY2tEYXRhYmFzZSB7XHJcbiAgcHJpdmF0ZSBzdG9yZXMgPSBuZXcgTWFwPHN0cmluZywgTWFwPHN0cmluZywgYW55Pj4oKVxyXG4gIHByaXZhdGUgdHJhbnNhY3Rpb25TdGFjazogU2V0PHN0cmluZz4gPSBuZXcgU2V0KClcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAvLyDliJ3lp4vljJbooahcclxuICAgIHRoaXMuaW5pdGlhbGl6ZVRhYmxlcygpXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGluaXRpYWxpemVUYWJsZXMoKSB7XHJcbiAgICBjb25zdCB0YWJsZXMgPSBbJ2NhcmRzJywgJ2ZvbGRlcnMnLCAndGFncycsICdpbWFnZXMnLCAnc3luY1F1ZXVlJ11cclxuICAgIHRhYmxlcy5mb3JFYWNoKHRhYmxlID0+IHtcclxuICAgICAgdGhpcy5zdG9yZXMuc2V0KHRhYmxlLCBuZXcgTWFwKCkpXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgLy8g5qih5ouf6KGo5pON5L2cXHJcbiAgdGFibGUodGFibGVOYW1lOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiBuZXcgTW9ja1RhYmxlKHRoaXMuc3RvcmVzLmdldCh0YWJsZU5hbWUpIHx8IG5ldyBNYXAoKSwgdGFibGVOYW1lKVxyXG4gIH1cclxuXHJcbiAgLy8g5qih5ouf5LqL5YqhXHJcbiAgYXN5bmMgdHJhbnNhY3Rpb24obW9kZTogc3RyaW5nLCB0YWJsZXM6IHN0cmluZ1tdLCBjYWxsYmFjazogKCkgPT4gUHJvbWlzZTx2b2lkPik6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgY29uc3QgdHJhbnNhY3Rpb25LZXkgPSBgdHhfJHtEYXRlLm5vdygpfV8ke01hdGgucmFuZG9tKCl9YFxyXG4gICAgdGhpcy50cmFuc2FjdGlvblN0YWNrLmFkZCh0cmFuc2FjdGlvbktleSlcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBhd2FpdCBjYWxsYmFjaygpXHJcbiAgICB9IGZpbmFsbHkge1xyXG4gICAgICB0aGlzLnRyYW5zYWN0aW9uU3RhY2suZGVsZXRlKHRyYW5zYWN0aW9uS2V5KVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8g5qih5ouf5omT5byA5pWw5o2u5bqTXHJcbiAgYXN5bmMgb3BlbigpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIC8vIOaooeaLn+aVsOaNruW6k+aJk+W8gFxyXG4gIH1cclxuXHJcbiAgLy8g5qih5ouf5YWz6Zet5pWw5o2u5bqTXHJcbiAgYXN5bmMgY2xvc2UoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAvLyDmqKHmi5/mlbDmja7lupPlhbPpl61cclxuICB9XHJcblxyXG4gIC8vIOa4heepuuaJgOacieaVsOaNrlxyXG4gIGNsZWFyKCk6IHZvaWQge1xyXG4gICAgdGhpcy5zdG9yZXMuZm9yRWFjaChzdG9yZSA9PiBzdG9yZS5jbGVhcigpKVxyXG4gIH1cclxuXHJcbiAgLy8g6I635Y+W5omA5pyJ6KGo5ZCNXHJcbiAgZ2V0VGFibGVOYW1lcygpOiBzdHJpbmdbXSB7XHJcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnN0b3Jlcy5rZXlzKCkpXHJcbiAgfVxyXG59XHJcblxyXG5jbGFzcyBNb2NrVGFibGUge1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc3RvcmU6IE1hcDxzdHJpbmcsIGFueT4sIHByaXZhdGUgdGFibGVOYW1lOiBzdHJpbmcpIHt9XHJcblxyXG4gIGFzeW5jIGFkZChkYXRhOiBhbnkpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgY29uc3QgaWQgPSBkYXRhLmlkIHx8IGNyeXB0by5yYW5kb21VVUlEKClcclxuICAgIHRoaXMuc3RvcmUuc2V0KGlkLCB7IC4uLmRhdGEsIGlkIH0pXHJcbiAgICByZXR1cm4gaWRcclxuICB9XHJcblxyXG4gIGFzeW5jIGJ1bGtBZGQoZGF0YUFycmF5OiBhbnlbXSk6IFByb21pc2U8c3RyaW5nW10+IHtcclxuICAgIGNvbnN0IGlkcyA9IGRhdGFBcnJheS5tYXAoZGF0YSA9PiBkYXRhLmlkIHx8IGNyeXB0by5yYW5kb21VVUlEKCkpXHJcbiAgICBkYXRhQXJyYXkuZm9yRWFjaCgoZGF0YSwgaW5kZXgpID0+IHtcclxuICAgICAgdGhpcy5zdG9yZS5zZXQoaWRzW2luZGV4XSwgeyAuLi5kYXRhLCBpZDogaWRzW2luZGV4XSB9KVxyXG4gICAgfSlcclxuICAgIHJldHVybiBpZHNcclxuICB9XHJcblxyXG4gIGFzeW5jIGdldChpZDogc3RyaW5nKTogUHJvbWlzZTxhbnkgfCB1bmRlZmluZWQ+IHtcclxuICAgIHJldHVybiB0aGlzLnN0b3JlLmdldChpZClcclxuICB9XHJcblxyXG4gIGFzeW5jIHVwZGF0ZShpZDogc3RyaW5nLCBjaGFuZ2VzOiBhbnkpOiBQcm9taXNlPG51bWJlcj4ge1xyXG4gICAgY29uc3QgZXhpc3RpbmcgPSB0aGlzLnN0b3JlLmdldChpZClcclxuICAgIGlmIChleGlzdGluZykge1xyXG4gICAgICB0aGlzLnN0b3JlLnNldChpZCwgeyAuLi5leGlzdGluZywgLi4uY2hhbmdlcyB9KVxyXG4gICAgICByZXR1cm4gMVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIDBcclxuICB9XHJcblxyXG4gIGFzeW5jIGRlbGV0ZShpZDogc3RyaW5nKTogUHJvbWlzZTxudW1iZXI+IHtcclxuICAgIGNvbnN0IGRlbGV0ZWQgPSB0aGlzLnN0b3JlLmRlbGV0ZShpZClcclxuICAgIHJldHVybiBkZWxldGVkID8gMSA6IDBcclxuICB9XHJcblxyXG4gIGFzeW5jIGNsZWFyKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgdGhpcy5zdG9yZS5jbGVhcigpXHJcbiAgfVxyXG5cclxuICBhc3luYyBjb3VudCgpOiBQcm9taXNlPG51bWJlcj4ge1xyXG4gICAgcmV0dXJuIHRoaXMuc3RvcmUuc2l6ZVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgdG9BcnJheSgpOiBQcm9taXNlPGFueVtdPiB7XHJcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnN0b3JlLnZhbHVlcygpKVxyXG4gIH1cclxuXHJcbiAgd2hlcmUoZmllbGROYW1lOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiBuZXcgTW9ja0NvbGxlY3Rpb24odGhpcy5zdG9yZSwgZmllbGROYW1lKVxyXG4gIH1cclxuXHJcbiAgb3JkZXJCeShmaWVsZE5hbWU6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIG5ldyBNb2NrQ29sbGVjdGlvbih0aGlzLnN0b3JlLCBudWxsLCBmaWVsZE5hbWUpXHJcbiAgfVxyXG5cclxuICByZXZlcnNlKCkge1xyXG4gICAgcmV0dXJuIG5ldyBNb2NrQ29sbGVjdGlvbih0aGlzLnN0b3JlLCBudWxsLCBudWxsLCB0cnVlKVxyXG4gIH1cclxuXHJcbiAgbGltaXQoY291bnQ6IG51bWJlcikge1xyXG4gICAgcmV0dXJuIG5ldyBNb2NrQ29sbGVjdGlvbih0aGlzLnN0b3JlLCBudWxsLCBudWxsLCBmYWxzZSwgY291bnQpXHJcbiAgfVxyXG5cclxuICBvZmZzZXQob2Zmc2V0OiBudW1iZXIpIHtcclxuICAgIHJldHVybiBuZXcgTW9ja0NvbGxlY3Rpb24odGhpcy5zdG9yZSwgbnVsbCwgbnVsbCwgZmFsc2UsIHVuZGVmaW5lZCwgb2Zmc2V0KVxyXG4gIH1cclxuXHJcbiAgZmlsdGVyKHByZWRpY2F0ZTogKGl0ZW06IGFueSkgPT4gYm9vbGVhbikge1xyXG4gICAgcmV0dXJuIG5ldyBNb2NrQ29sbGVjdGlvbih0aGlzLnN0b3JlLCBudWxsLCBudWxsLCBmYWxzZSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHByZWRpY2F0ZSlcclxuICB9XHJcblxyXG4gIHNvcnRCeShmaWVsZE5hbWU6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIG5ldyBNb2NrQ29sbGVjdGlvbih0aGlzLnN0b3JlLCBudWxsLCBmaWVsZE5hbWUpXHJcbiAgfVxyXG59XHJcblxyXG5jbGFzcyBNb2NrQ29sbGVjdGlvbiB7XHJcbiAgcHJpdmF0ZSBmaWx0ZXJlZERhdGE6IGFueVtdID0gW11cclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIHN0b3JlOiBNYXA8c3RyaW5nLCBhbnk+LFxyXG4gICAgcHJpdmF0ZSB3aGVyZUZpZWxkPzogc3RyaW5nIHwgbnVsbCxcclxuICAgIHByaXZhdGUgb3JkZXJCeUZpZWxkPzogc3RyaW5nIHwgbnVsbCxcclxuICAgIHByaXZhdGUgcmV2ZXJzZU9yZGVyID0gZmFsc2UsXHJcbiAgICBwcml2YXRlIGxpbWl0Q291bnQ/OiBudW1iZXIsXHJcbiAgICBwcml2YXRlIG9mZnNldFZhbHVlPzogbnVtYmVyLFxyXG4gICAgcHJpdmF0ZSBmaWx0ZXJQcmVkaWNhdGU/OiAoaXRlbTogYW55KSA9PiBib29sZWFuXHJcbiAgKSB7XHJcbiAgICB0aGlzLmJ1aWxkUXVlcnkoKVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBidWlsZFF1ZXJ5KCkge1xyXG4gICAgbGV0IGRhdGEgPSBBcnJheS5mcm9tKHRoaXMuc3RvcmUudmFsdWVzKCkpXHJcblxyXG4gICAgLy8g5bqU55So6L+H5rukXHJcbiAgICBpZiAodGhpcy5maWx0ZXJQcmVkaWNhdGUpIHtcclxuICAgICAgZGF0YSA9IGRhdGEuZmlsdGVyKHRoaXMuZmlsdGVyUHJlZGljYXRlKVxyXG4gICAgfVxyXG5cclxuICAgIC8vIOW6lOeUqOaOkuW6j1xyXG4gICAgaWYgKHRoaXMub3JkZXJCeUZpZWxkKSB7XHJcbiAgICAgIGRhdGEuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgIGNvbnN0IGFWYWwgPSB0aGlzLmdldE5lc3RlZFZhbHVlKGEsIHRoaXMub3JkZXJCeUZpZWxkISlcclxuICAgICAgICBjb25zdCBiVmFsID0gdGhpcy5nZXROZXN0ZWRWYWx1ZShiLCB0aGlzLm9yZGVyQnlGaWVsZCEpXHJcbiAgICAgICAgcmV0dXJuIGFWYWwgPiBiVmFsID8gMSA6IGFWYWwgPCBiVmFsID8gLTEgOiAwXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMucmV2ZXJzZU9yZGVyKSB7XHJcbiAgICAgIGRhdGEucmV2ZXJzZSgpXHJcbiAgICB9XHJcblxyXG4gICAgLy8g5bqU55So5YiG6aG1XHJcbiAgICBpZiAodGhpcy5vZmZzZXRWYWx1ZSkge1xyXG4gICAgICBkYXRhID0gZGF0YS5zbGljZSh0aGlzLm9mZnNldFZhbHVlKVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmxpbWl0Q291bnQpIHtcclxuICAgICAgZGF0YSA9IGRhdGEuc2xpY2UoMCwgdGhpcy5saW1pdENvdW50KVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZmlsdGVyZWREYXRhID0gZGF0YVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXROZXN0ZWRWYWx1ZShvYmo6IGFueSwgcGF0aDogc3RyaW5nKTogYW55IHtcclxuICAgIHJldHVybiBwYXRoLnNwbGl0KCcuJykucmVkdWNlKChjdXJyZW50LCBrZXkpID0+IGN1cnJlbnQ/LltrZXldLCBvYmopXHJcbiAgfVxyXG5cclxuICBlcXVhbHModmFsdWU6IGFueSk6IE1vY2tDb2xsZWN0aW9uIHtcclxuICAgIGlmICh0aGlzLndoZXJlRmllbGQpIHtcclxuICAgICAgdGhpcy5maWx0ZXJlZERhdGEgPSB0aGlzLmZpbHRlcmVkRGF0YS5maWx0ZXIoaXRlbSA9PiB7XHJcbiAgICAgICAgY29uc3QgZmllbGRWYWx1ZSA9IHRoaXMuZ2V0TmVzdGVkVmFsdWUoaXRlbSwgdGhpcy53aGVyZUZpZWxkISlcclxuICAgICAgICByZXR1cm4gZmllbGRWYWx1ZSA9PT0gdmFsdWVcclxuICAgICAgfSlcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzXHJcbiAgfVxyXG5cclxuICBhc3luYyB0b0FycmF5KCk6IFByb21pc2U8YW55W10+IHtcclxuICAgIHJldHVybiB0aGlzLmZpbHRlcmVkRGF0YVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgY291bnQoKTogUHJvbWlzZTxudW1iZXI+IHtcclxuICAgIHJldHVybiB0aGlzLmZpbHRlcmVkRGF0YS5sZW5ndGhcclxuICB9XHJcblxyXG4gIGFzeW5jIGZpcnN0KCk6IFByb21pc2U8YW55IHwgdW5kZWZpbmVkPiB7XHJcbiAgICByZXR1cm4gdGhpcy5maWx0ZXJlZERhdGFbMF1cclxuICB9XHJcblxyXG4gIGFzeW5jIGxhc3QoKTogUHJvbWlzZTxhbnkgfCB1bmRlZmluZWQ+IHtcclxuICAgIHJldHVybiB0aGlzLmZpbHRlcmVkRGF0YVt0aGlzLmZpbHRlcmVkRGF0YS5sZW5ndGggLSAxXVxyXG4gIH1cclxufVxyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyDmgKfog73mtYvor5Xlt6XlhbdcclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuZXhwb3J0IGNsYXNzIFBlcmZvcm1hbmNlVGVzdGVyIHtcclxuICBwcml2YXRlIG1lYXN1cmVtZW50czogTWFwPHN0cmluZywgbnVtYmVyW10+ID0gbmV3IE1hcCgpXHJcblxyXG4gIGFzeW5jIG1lYXN1cmU8VD4obmFtZTogc3RyaW5nLCBmbjogKCkgPT4gUHJvbWlzZTxUPik6IFByb21pc2U8eyByZXN1bHQ6IFQ7IGR1cmF0aW9uOiBudW1iZXIgfT4ge1xyXG4gICAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGZuKClcclxuICAgIGNvbnN0IGR1cmF0aW9uID0gcGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydFRpbWVcclxuXHJcbiAgICB0aGlzLnJlY29yZE1lYXN1cmVtZW50KG5hbWUsIGR1cmF0aW9uKVxyXG4gICAgcmV0dXJuIHsgcmVzdWx0LCBkdXJhdGlvbiB9XHJcbiAgfVxyXG5cclxuICBtZWFzdXJlU3luYzxUPihuYW1lOiBzdHJpbmcsIGZuOiAoKSA9PiBUKTogeyByZXN1bHQ6IFQ7IGR1cmF0aW9uOiBudW1iZXIgfSB7XHJcbiAgICBjb25zdCBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKVxyXG4gICAgY29uc3QgcmVzdWx0ID0gZm4oKVxyXG4gICAgY29uc3QgZHVyYXRpb24gPSBwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0VGltZVxyXG5cclxuICAgIHRoaXMucmVjb3JkTWVhc3VyZW1lbnQobmFtZSwgZHVyYXRpb24pXHJcbiAgICByZXR1cm4geyByZXN1bHQsIGR1cmF0aW9uIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVjb3JkTWVhc3VyZW1lbnQobmFtZTogc3RyaW5nLCBkdXJhdGlvbjogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBpZiAoIXRoaXMubWVhc3VyZW1lbnRzLmhhcyhuYW1lKSkge1xyXG4gICAgICB0aGlzLm1lYXN1cmVtZW50cy5zZXQobmFtZSwgW10pXHJcbiAgICB9XHJcbiAgICB0aGlzLm1lYXN1cmVtZW50cy5nZXQobmFtZSkhLnB1c2goZHVyYXRpb24pXHJcbiAgfVxyXG5cclxuICBnZXRTdGF0cyhuYW1lOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IG1lYXN1cmVtZW50cyA9IHRoaXMubWVhc3VyZW1lbnRzLmdldChuYW1lKSB8fCBbXVxyXG4gICAgaWYgKG1lYXN1cmVtZW50cy5sZW5ndGggPT09IDApIHJldHVybiBudWxsXHJcblxyXG4gICAgY29uc3Qgc29ydGVkID0gWy4uLm1lYXN1cmVtZW50c10uc29ydCgoYSwgYikgPT4gYSAtIGIpXHJcbiAgICBjb25zdCBzdW0gPSBtZWFzdXJlbWVudHMucmVkdWNlKChhY2MsIHZhbCkgPT4gYWNjICsgdmFsLCAwKVxyXG4gICAgXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBjb3VudDogbWVhc3VyZW1lbnRzLmxlbmd0aCxcclxuICAgICAgbWluOiBNYXRoLm1pbiguLi5tZWFzdXJlbWVudHMpLFxyXG4gICAgICBtYXg6IE1hdGgubWF4KC4uLm1lYXN1cmVtZW50cyksXHJcbiAgICAgIGF2Zzogc3VtIC8gbWVhc3VyZW1lbnRzLmxlbmd0aCxcclxuICAgICAgbWVkaWFuOiBzb3J0ZWRbTWF0aC5mbG9vcihzb3J0ZWQubGVuZ3RoIC8gMildLFxyXG4gICAgICBwOTU6IHNvcnRlZFtNYXRoLmZsb29yKHNvcnRlZC5sZW5ndGggKiAwLjk1KV0sXHJcbiAgICAgIHA5OTogc29ydGVkW01hdGguZmxvb3Ioc29ydGVkLmxlbmd0aCAqIDAuOTkpXVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0QWxsU3RhdHMoKSB7XHJcbiAgICBjb25zdCBzdGF0czogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9XHJcbiAgICBmb3IgKGNvbnN0IFtuYW1lXSBvZiB0aGlzLm1lYXN1cmVtZW50cykge1xyXG4gICAgICBzdGF0c1tuYW1lXSA9IHRoaXMuZ2V0U3RhdHMobmFtZSlcclxuICAgIH1cclxuICAgIHJldHVybiBzdGF0c1xyXG4gIH1cclxuXHJcbiAgcmVzZXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLm1lYXN1cmVtZW50cy5jbGVhcigpXHJcbiAgfVxyXG59XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIOWGheWtmOazhOa8j+ajgOa1i+W3peWFt1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG5leHBvcnQgY2xhc3MgTWVtb3J5TGVha0RldGVjdG9yIHtcclxuICBwcml2YXRlIHNuYXBzaG90czogTWFwPHN0cmluZywgbnVtYmVyPiA9IG5ldyBNYXAoKVxyXG4gIHByaXZhdGUgYmFzZWxpbmU6IG51bWJlciA9IDBcclxuXHJcbiAgYXN5bmMgdGFrZVNuYXBzaG90KG5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgLy8g5qih5ouf5YaF5a2Y5L2/55So6YePXHJcbiAgICBjb25zdCBtZW1vcnlVc2FnZSA9IHRoaXMuc2ltdWxhdGVNZW1vcnlVc2FnZSgpXHJcbiAgICB0aGlzLnNuYXBzaG90cy5zZXQobmFtZSwgbWVtb3J5VXNhZ2UpXHJcbiAgfVxyXG5cclxuICBjb21wYXJlU25hcHNob3RzKG5hbWUxOiBzdHJpbmcsIG5hbWUyOiBzdHJpbmcpOiBudW1iZXIge1xyXG4gICAgY29uc3QgbWVtMSA9IHRoaXMuc25hcHNob3RzLmdldChuYW1lMSkgfHwgMFxyXG4gICAgY29uc3QgbWVtMiA9IHRoaXMuc25hcHNob3RzLmdldChuYW1lMikgfHwgMFxyXG4gICAgcmV0dXJuIG1lbTIgLSBtZW0xXHJcbiAgfVxyXG5cclxuICBzZXRCYXNlbGluZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuYmFzZWxpbmUgPSB0aGlzLnNpbXVsYXRlTWVtb3J5VXNhZ2UoKVxyXG4gIH1cclxuXHJcbiAgZ2V0TWVtb3J5R3Jvd3RoU2luY2VCYXNlbGluZSgpOiBudW1iZXIge1xyXG4gICAgY29uc3QgY3VycmVudCA9IHRoaXMuc2ltdWxhdGVNZW1vcnlVc2FnZSgpXHJcbiAgICByZXR1cm4gY3VycmVudCAtIHRoaXMuYmFzZWxpbmVcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2ltdWxhdGVNZW1vcnlVc2FnZSgpOiBudW1iZXIge1xyXG4gICAgLy8g5qih5ouf5YaF5a2Y5L2/55So6YeP77yITULvvIlcclxuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpICogMTAwICsgNTBcclxuICB9XHJcblxyXG4gIGRldGVjdExlYWtzKHRocmVzaG9sZE1COiBudW1iZXIgPSAxMCk6IHN0cmluZ1tdIHtcclxuICAgIGNvbnN0IGxlYWtzOiBzdHJpbmdbXSA9IFtdXHJcbiAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5zaW11bGF0ZU1lbW9yeVVzYWdlKClcclxuICAgIGNvbnN0IGdyb3d0aCA9IGN1cnJlbnQgLSB0aGlzLmJhc2VsaW5lXHJcblxyXG4gICAgaWYgKGdyb3d0aCA+IHRocmVzaG9sZE1CKSB7XHJcbiAgICAgIGxlYWtzLnB1c2goYOWGheWtmOWinumVvyAke2dyb3d0aC50b0ZpeGVkKDIpfU1CIOi2hei/h+mYiOWAvCAke3RocmVzaG9sZE1CfU1CYClcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbGVha3NcclxuICB9XHJcblxyXG4gIGNsZWFyU25hcHNob3RzKCk6IHZvaWQge1xyXG4gICAgdGhpcy5zbmFwc2hvdHMuY2xlYXIoKVxyXG4gICAgdGhpcy5iYXNlbGluZSA9IDBcclxuICB9XHJcbn1cclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8g5byC5q2l5rWL6K+V5bel5YW3XHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbmV4cG9ydCBjbGFzcyBBc3luY1Rlc3RIZWxwZXIge1xyXG4gIHN0YXRpYyBhc3luYyB3YWl0Rm9yPFQ+KFxyXG4gICAgY29uZGl0aW9uOiAoKSA9PiBUIHwgUHJvbWlzZTxUPixcclxuICAgIG9wdGlvbnM6IHtcclxuICAgICAgdGltZW91dD86IG51bWJlclxyXG4gICAgICBpbnRlcnZhbD86IG51bWJlclxyXG4gICAgICBtZXNzYWdlPzogc3RyaW5nXHJcbiAgICB9ID0ge31cclxuICApOiBQcm9taXNlPFQ+IHtcclxuICAgIGNvbnN0IHsgdGltZW91dCA9IDUwMDAsIGludGVydmFsID0gMTAwLCBtZXNzYWdlID0gJ+adoeS7tui2heaXticgfSA9IG9wdGlvbnNcclxuICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KClcclxuXHJcbiAgICB3aGlsZSAoRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSA8IHRpbWVvdXQpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb25kaXRpb24oKVxyXG4gICAgICAgIGlmIChyZXN1bHQpIHtcclxuICAgICAgICAgIHJldHVybiByZXN1bHRcclxuICAgICAgICB9XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgLy8g5b+955Wl6ZSZ6K+v77yM57un57ut562J5b6FXHJcbiAgICAgIH1cclxuICAgICAgYXdhaXQgdGhpcy5kZWxheShpbnRlcnZhbClcclxuICAgIH1cclxuXHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bWVzc2FnZX06IOetieW+hSAke3RpbWVvdXR9bXMg5ZCO6LaF5pe2YClcclxuICB9XHJcblxyXG4gIHN0YXRpYyBhc3luYyBkZWxheShtczogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSlcclxuICB9XHJcblxyXG4gIHN0YXRpYyBhc3luYyByZXRyeTxUPihcclxuICAgIGZuOiAoKSA9PiBQcm9taXNlPFQ+LFxyXG4gICAgb3B0aW9uczoge1xyXG4gICAgICBtYXhSZXRyaWVzPzogbnVtYmVyXHJcbiAgICAgIGRlbGF5PzogbnVtYmVyXHJcbiAgICAgIGJhY2tvZmY/OiBib29sZWFuXHJcbiAgICB9ID0ge31cclxuICApOiBQcm9taXNlPFQ+IHtcclxuICAgIGNvbnN0IHsgbWF4UmV0cmllcyA9IDMsIGRlbGF5ID0gMTAwMCwgYmFja29mZiA9IHRydWUgfSA9IG9wdGlvbnNcclxuICAgIGxldCBsYXN0RXJyb3I6IEVycm9yXHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gbWF4UmV0cmllczsgaSsrKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IGZuKClcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBsYXN0RXJyb3IgPSBlcnJvciBhcyBFcnJvclxyXG4gICAgICAgIGlmIChpIDwgbWF4UmV0cmllcykge1xyXG4gICAgICAgICAgY29uc3Qgd2FpdFRpbWUgPSBiYWNrb2ZmID8gZGVsYXkgKiBNYXRoLnBvdygyLCBpKSA6IGRlbGF5XHJcbiAgICAgICAgICBhd2FpdCB0aGlzLmRlbGF5KHdhaXRUaW1lKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRocm93IGxhc3RFcnJvciFcclxuICB9XHJcbn1cclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8g5pat6KiA5omp5bGVXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbmV4cG9ydCBjb25zdCBjdXN0b21NYXRjaGVycyA9IHtcclxuICB0b0JlV2l0aGluUmFuZ2UocmVjZWl2ZWQ6IG51bWJlciwgZmxvb3I6IG51bWJlciwgY2VpbGluZzogbnVtYmVyKSB7XHJcbiAgICBjb25zdCBwYXNzID0gcmVjZWl2ZWQgPj0gZmxvb3IgJiYgcmVjZWl2ZWQgPD0gY2VpbGluZ1xyXG4gICAgaWYgKHBhc3MpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBtZXNzYWdlOiAoKSA9PiBgZXhwZWN0ZWQgJHtyZWNlaXZlZH0gbm90IHRvIGJlIHdpdGhpbiByYW5nZSAke2Zsb29yfSAtICR7Y2VpbGluZ31gLFxyXG4gICAgICAgIHBhc3M6IHRydWVcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBtZXNzYWdlOiAoKSA9PiBgZXhwZWN0ZWQgJHtyZWNlaXZlZH0gdG8gYmUgd2l0aGluIHJhbmdlICR7Zmxvb3J9IC0gJHtjZWlsaW5nfWAsXHJcbiAgICAgICAgcGFzczogZmFsc2VcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIHRvQmVWYWxpZFVVSUQocmVjZWl2ZWQ6IHN0cmluZykge1xyXG4gICAgY29uc3QgdXVpZFJlZ2V4ID0gL15bMC05YS1mXXs4fS1bMC05YS1mXXs0fS1bMS01XVswLTlhLWZdezN9LVs4OWFiXVswLTlhLWZdezN9LVswLTlhLWZdezEyfSQvaVxyXG4gICAgY29uc3QgcGFzcyA9IHV1aWRSZWdleC50ZXN0KHJlY2VpdmVkKVxyXG4gICAgaWYgKHBhc3MpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBtZXNzYWdlOiAoKSA9PiBgZXhwZWN0ZWQgJHtyZWNlaXZlZH0gbm90IHRvIGJlIGEgdmFsaWQgVVVJRGAsXHJcbiAgICAgICAgcGFzczogdHJ1ZVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIG1lc3NhZ2U6ICgpID0+IGBleHBlY3RlZCAke3JlY2VpdmVkfSB0byBiZSBhIHZhbGlkIFVVSURgLFxyXG4gICAgICAgIHBhc3M6IGZhbHNlXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LFxyXG5cclxuICB0b0hhdmVQZXJmb3JtYW5jZShyZWNlaXZlZDogYW55LCB0aHJlc2hvbGRzOiB7IG1heER1cmF0aW9uPzogbnVtYmVyOyBtaW5TdWNjZXNzUmF0ZT86IG51bWJlciB9KSB7XHJcbiAgICBjb25zdCB7IG1heER1cmF0aW9uLCBtaW5TdWNjZXNzUmF0ZSB9ID0gdGhyZXNob2xkc1xyXG4gICAgY29uc3QgZXJyb3JzOiBzdHJpbmdbXSA9IFtdXHJcblxyXG4gICAgaWYgKG1heER1cmF0aW9uICYmIHJlY2VpdmVkLmF2ZXJhZ2VSZXNwb25zZVRpbWUgPiBtYXhEdXJhdGlvbikge1xyXG4gICAgICBlcnJvcnMucHVzaChg5bmz5Z2H5ZON5bqU5pe26Ze0ICR7cmVjZWl2ZWQuYXZlcmFnZVJlc3BvbnNlVGltZX1tcyDotoXov4fpmIjlgLwgJHttYXhEdXJhdGlvbn1tc2ApXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG1pblN1Y2Nlc3NSYXRlICYmIHJlY2VpdmVkLnN1Y2Nlc3NSYXRlIDwgbWluU3VjY2Vzc1JhdGUpIHtcclxuICAgICAgZXJyb3JzLnB1c2goYOaIkOWKn+eOhyAke3JlY2VpdmVkLnN1Y2Nlc3NSYXRlfSDkvY7kuo7pmIjlgLwgJHttaW5TdWNjZXNzUmF0ZX1gKVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChlcnJvcnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgbWVzc2FnZTogKCkgPT4gYGV4cGVjdGVkIHBlcmZvcm1hbmNlIG5vdCB0byBtZWV0IHRocmVzaG9sZHNgLFxyXG4gICAgICAgIHBhc3M6IHRydWVcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBtZXNzYWdlOiAoKSA9PiBgcGVyZm9ybWFuY2UgaXNzdWVzOiAke2Vycm9ycy5qb2luKCcsICcpfWAsXHJcbiAgICAgICAgcGFzczogZmFsc2VcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLy8g5rOo5YaM6Ieq5a6a5LmJ5pat6KiAXHJcbmV4cGVjdC5leHRlbmQoY3VzdG9tTWF0Y2hlcnMpXHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIE1vY2sg5Ye95pWw55Sf5oiQ5ZmoXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbmV4cG9ydCBjb25zdCBtb2NrR2VuZXJhdG9ycyA9IHtcclxuICBjcmVhdGVTdXBhYmFzZUNsaWVudCgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGZyb206IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgICAgIHNlbGVjdDogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XHJcbiAgICAgICAgICBkYXRhOiBbXSxcclxuICAgICAgICAgIGVycm9yOiBudWxsXHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgaW5zZXJ0OiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcclxuICAgICAgICAgIGRhdGE6IG51bGwsXHJcbiAgICAgICAgICBlcnJvcjogbnVsbFxyXG4gICAgICAgIH0pLFxyXG4gICAgICAgIHVwZGF0ZTogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XHJcbiAgICAgICAgICBkYXRhOiBudWxsLFxyXG4gICAgICAgICAgZXJyb3I6IG51bGxcclxuICAgICAgICB9KSxcclxuICAgICAgICBkZWxldGU6IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgICAgICAgZXJyb3I6IG51bGxcclxuICAgICAgICB9KVxyXG4gICAgICB9KSxcclxuICAgICAgYXV0aDoge1xyXG4gICAgICAgIGdldFVzZXI6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGE6IHsgdXNlcjogbnVsbCB9LCBlcnJvcjogbnVsbCB9KSxcclxuICAgICAgICBzaWduVXA6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGE6IHsgdXNlcjogbnVsbCB9LCBlcnJvcjogbnVsbCB9KSxcclxuICAgICAgICBzaWduSW46IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGE6IHsgc2Vzc2lvbjogbnVsbCB9LCBlcnJvcjogbnVsbCB9KSxcclxuICAgICAgICBzaWduT3V0OiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoeyBlcnJvcjogbnVsbCB9KVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgY3JlYXRlRGV4aWVJbnN0YW5jZSgpIHtcclxuICAgIGNvbnN0IG1vY2tEYiA9IG5ldyBNb2NrRGF0YWJhc2UoKVxyXG4gICAgcmV0dXJuIG1vY2tEYlxyXG4gIH1cclxufVxyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyDmtYvor5XmlbDmja7nlJ/miJDlmahcclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuZXhwb3J0IGNvbnN0IHRlc3REYXRhR2VuZXJhdG9yID0ge1xyXG4gIC8qKlxyXG4gICAqIOeUn+aIkOa1i+ivleaVsOaNrumbhlxyXG4gICAqL1xyXG4gIGdlbmVyYXRlVGVzdERhdGEoY29uZmlnOiB7XHJcbiAgICBjYXJkQ291bnQ/OiBudW1iZXJcclxuICAgIGZvbGRlckNvdW50PzogbnVtYmVyXHJcbiAgICB0YWdDb3VudD86IG51bWJlclxyXG4gICAgaW1hZ2VDb3VudD86IG51bWJlclxyXG4gIH0gPSB7fSkge1xyXG4gICAgY29uc3QgeyBjYXJkQ291bnQgPSAxMCwgZm9sZGVyQ291bnQgPSAzLCB0YWdDb3VudCA9IDUsIGltYWdlQ291bnQgPSA1IH0gPSBjb25maWdcclxuXHJcbiAgICBjb25zdCBjYXJkcyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IGNhcmRDb3VudCB9LCAoXywgaSkgPT5cclxuICAgICAgbW9ja0ZhY3Rvcmllcy5jcmVhdGVNb2NrQ2FyZCh7IGZyb250Q29udGVudDogeyB0aXRsZTogYENhcmQgJHtpICsgMX1gIH0gfSlcclxuICAgIClcclxuXHJcbiAgICBjb25zdCBmb2xkZXJzID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogZm9sZGVyQ291bnQgfSwgKF8sIGkpID0+XHJcbiAgICAgIG1vY2tGYWN0b3JpZXMuY3JlYXRlTW9ja0ZvbGRlcih7IG5hbWU6IGBGb2xkZXIgJHtpICsgMX1gIH0pXHJcbiAgICApXHJcblxyXG4gICAgY29uc3QgdGFncyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IHRhZ0NvdW50IH0sIChfLCBpKSA9PlxyXG4gICAgICBtb2NrRmFjdG9yaWVzLmNyZWF0ZU1vY2tUYWcoeyBuYW1lOiBgVGFnICR7aSArIDF9YCB9KVxyXG4gICAgKVxyXG5cclxuICAgIGNvbnN0IGltYWdlcyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IGltYWdlQ291bnQgfSwgKF8sIGkpID0+XHJcbiAgICAgIG1vY2tGYWN0b3JpZXMuY3JlYXRlTW9ja0ltYWdlKHsgZmlsZU5hbWU6IGBpbWFnZSR7aSArIDF9LmpwZ2AgfSlcclxuICAgIClcclxuXHJcbiAgICByZXR1cm4geyBjYXJkcywgZm9sZGVycywgdGFncywgaW1hZ2VzIH1cclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiDnlJ/miJDlpKfop4TmqKHmtYvor5XmlbDmja5cclxuICAgKi9cclxuICBnZW5lcmF0ZUxhcmdlRGF0YXNldChzaXplOiBudW1iZXIgPSAxMDAwKSB7XHJcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh7IGxlbmd0aDogc2l6ZSB9LCAoXywgaSkgPT5cclxuICAgICAgbW9ja0ZhY3Rvcmllcy5jcmVhdGVNb2NrQ2FyZCh7XHJcbiAgICAgICAgZnJvbnRDb250ZW50OiB7XHJcbiAgICAgICAgICB0aXRsZTogYExhcmdlIERhdGFzZXQgQ2FyZCAke2kgKyAxfWAsXHJcbiAgICAgICAgICB0ZXh0OiBgVGhpcyBpcyBjYXJkIG51bWJlciAke2kgKyAxfSBpbiBhIGxhcmdlIGRhdGFzZXRgLFxyXG4gICAgICAgICAgdGFnczogW2BiYXRjaC0ke01hdGguZmxvb3IoaSAvIDEwMCl9YCwgYGxhcmdlLWRhdGFzZXRgXVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgIClcclxuICB9XHJcbn1cclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8g5a+85Ye65bel5YW35a6e5L6LXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbmV4cG9ydCBjb25zdCBwZXJmb3JtYW5jZVRlc3RlciA9IG5ldyBQZXJmb3JtYW5jZVRlc3RlcigpXHJcbmV4cG9ydCBjb25zdCBtZW1vcnlMZWFrRGV0ZWN0b3IgPSBuZXcgTWVtb3J5TGVha0RldGVjdG9yKClcclxuZXhwb3J0IGNvbnN0IGFzeW5jVGVzdEhlbHBlciA9IEFzeW5jVGVzdEhlbHBlciJdLCJ2ZXJzaW9uIjozfQ==
{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\tests\\e2e\\auth\\authentication-flow.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\tests\\e2e\\auth\\authentication-flow.test.ts"],"sourcesContent":["// 认证流程端到端测试\r\nimport { test, expect } from '@playwright/test'\r\n\r\ntest.describe('Authentication Flow', () => {\r\n  test.beforeEach(async ({ page }) => {\r\n    // 清空本地存储\r\n    await page.goto('/')\r\n    await page.evaluate(() => {\r\n      localStorage.clear()\r\n      sessionStorage.clear()\r\n    })\r\n  })\r\n\r\n  test('应该能够完成完整的注册流程', async ({ page }) => {\r\n    // 导航到注册页面\r\n    await page.goto('/signup')\r\n    \r\n    // 填写注册表单\r\n    await page.fill('[data-testid=\"email-input\"]', 'test@example.com')\r\n    await page.fill('[data-testid=\"password-input\"]', 'password123')\r\n    await page.fill('[data-testid=\"confirm-password-input\"]', 'password123')\r\n    \r\n    // 点击注册按钮\r\n    await page.click('[data-testid=\"signup-button\"]')\r\n    \r\n    // 等待注册成功\r\n    await page.waitForURL('/dashboard')\r\n    \r\n    // 验证用户已登录\r\n    const userEmail = await page.locator('[data-testid=\"user-email\"]').textContent()\r\n    expect(userEmail).toBe('test@example.com')\r\n    \r\n    // 验证本地存储中有认证信息\r\n    const accessToken = await page.evaluate(() => localStorage.getItem('access_token'))\r\n    expect(accessToken).toBeDefined()\r\n  })\r\n\r\n  test('应该能够完成完整的登录流程', async ({ page }) => {\r\n    // 导航到登录页面\r\n    await page.goto('/login')\r\n    \r\n    // 填写登录表单\r\n    await page.fill('[data-testid=\"email-input\"]', 'test@example.com')\r\n    await page.fill('[data-testid=\"password-input\"]', 'password123')\r\n    \r\n    // 点击登录按钮\r\n    await page.click('[data-testid=\"login-button\"]')\r\n    \r\n    // 等待登录成功\r\n    await page.waitForURL('/dashboard')\r\n    \r\n    // 验证用户已登录\r\n    const welcomeMessage = await page.locator('[data-testid=\"welcome-message\"]').textContent()\r\n    expect(welcomeMessage).toContain('Welcome back')\r\n    \r\n    // 验证用户信息显示正确\r\n    const userEmail = await page.locator('[data-testid=\"user-email\"]').textContent()\r\n    expect(userEmail).toBe('test@example.com')\r\n  })\r\n\r\n  test('应该能够处理注册验证错误', async ({ page }) => {\r\n    await page.goto('/signup')\r\n    \r\n    // 尝试使用无效邮箱注册\r\n    await page.fill('[data-testid=\"email-input\"]', 'invalid-email')\r\n    await page.fill('[data-testid=\"password-input\"]', 'password123')\r\n    await page.fill('[data-testid=\"confirm-password-input\"]', 'password123')\r\n    \r\n    await page.click('[data-testid=\"signup-button\"]')\r\n    \r\n    // 验证错误消息显示\r\n    const errorMessage = await page.locator('[data-testid=\"error-message\"]').textContent()\r\n    expect(errorMessage).toContain('Invalid email format')\r\n  })\r\n\r\n  test('应该能够处理密码不匹配错误', async ({ page }) => {\r\n    await page.goto('/signup')\r\n    \r\n    // 填写不匹配的密码\r\n    await page.fill('[data-testid=\"email-input\"]', 'test@example.com')\r\n    await page.fill('[data-testid=\"password-input\"]', 'password123')\r\n    await page.fill('[data-testid=\"confirm-password-input\"]', 'differentpassword')\r\n    \r\n    await page.click('[data-testid=\"signup-button\"]')\r\n    \r\n    // 验证错误消息显示\r\n    const errorMessage = await page.locator('[data-testid=\"error-message\"]').textContent()\r\n    expect(errorMessage).toContain('Passwords do not match')\r\n  })\r\n\r\n  test('应该能够处理登录认证错误', async ({ page }) => {\r\n    await page.goto('/login')\r\n    \r\n    // 使用错误的凭据登录\r\n    await page.fill('[data-testid=\"email-input\"]', 'test@example.com')\r\n    await page.fill('[data-testid=\"password-input\"]', 'wrongpassword')\r\n    \r\n    await page.click('[data-testid=\"login-button\"]')\r\n    \r\n    // 验证错误消息显示\r\n    const errorMessage = await page.locator('[data-testid=\"error-message\"]').textContent()\r\n    expect(errorMessage).toContain('Invalid credentials')\r\n  })\r\n\r\n  test('应该能够处理会话过期', async ({ page }) => {\r\n    // 首先登录\r\n    await page.goto('/login')\r\n    await page.fill('[data-testid=\"email-input\"]', 'test@example.com')\r\n    await page.fill('[data-testid=\"password-input\"]', 'password123')\r\n    await page.click('[data-testid=\"login-button\"]')\r\n    \r\n    await page.waitForURL('/dashboard')\r\n    \r\n    // 模拟会话过期\r\n    await page.evaluate(() => {\r\n      localStorage.removeItem('access_token')\r\n    })\r\n    \r\n    // 尝试访问受保护的页面\r\n    await page.goto('/dashboard')\r\n    \r\n    // 验证被重定向到登录页面\r\n    await page.waitForURL('/login')\r\n    \r\n    // 验证会话过期消息\r\n    const sessionMessage = await page.locator('[data-testid=\"session-message\"]').textContent()\r\n    expect(sessionMessage).toContain('Session expired')\r\n  })\r\n\r\n  test('应该能够记住登录状态', async ({ page }) => {\r\n    // 登录并勾选\"记住我\"\r\n    await page.goto('/login')\r\n    await page.fill('[data-testid=\"email-input\"]', 'test@example.com')\r\n    await page.fill('[data-testid=\"password-input\"]', 'password123')\r\n    await page.check('[data-testid=\"remember-me\"]')\r\n    await page.click('[data-testid=\"login-button\"]')\r\n    \r\n    await page.waitForURL('/dashboard')\r\n    \r\n    // 刷新页面\r\n    await page.reload()\r\n    \r\n    // 验证用户仍然登录\r\n    const welcomeMessage = await page.locator('[data-testid=\"welcome-message\"]').textContent()\r\n    expect(welcomeMessage).toContain('Welcome back')\r\n  })\r\n\r\n  test('应该能够安全登出', async ({ page }) => {\r\n    // 先登录\r\n    await page.goto('/login')\r\n    await page.fill('[data-testid=\"email-input\"]', 'test@example.com')\r\n    await page.fill('[data-testid=\"password-input\"]', 'password123')\r\n    await page.click('[data-testid=\"login-button\"]')\r\n    \r\n    await page.waitForURL('/dashboard')\r\n    \r\n    // 点击登出按钮\r\n    await page.click('[data-testid=\"logout-button\"]')\r\n    \r\n    // 等待登出完成\r\n    await page.waitForURL('/login')\r\n    \r\n    // 验证认证信息已清除\r\n    const accessToken = await page.evaluate(() => localStorage.getItem('access_token'))\r\n    expect(accessToken).toBeNull()\r\n    \r\n    // 验证无法访问受保护页面\r\n    await page.goto('/dashboard')\r\n    await page.waitForURL('/login')\r\n  })\r\n\r\n  test('应该能够处理社交登录', async ({ page }) => {\r\n    await page.goto('/login')\r\n    \r\n    // 点击Google登录按钮\r\n    await page.click('[data-testid=\"google-login\"]')\r\n    \r\n    // 验证跳转到Google OAuth页面\r\n    await page.waitForURL(/accounts\\.google\\.com/)\r\n    \r\n    // 这里通常需要模拟Google OAuth流程\r\n    // 在实际测试中，可能需要使用测试环境或mock\r\n  })\r\n\r\n  test('应该能够处理密码重置流程', async ({ page }) => {\r\n    await page.goto('/login')\r\n    \r\n    // 点击\"忘记密码\"链接\r\n    await page.click('[data-testid=\"forgot-password\"]')\r\n    \r\n    // 等待跳转到密码重置页面\r\n    await page.waitForURL('/reset-password')\r\n    \r\n    // 填写邮箱\r\n    await page.fill('[data-testid=\"email-input\"]', 'test@example.com')\r\n    \r\n    // 点击发送重置邮件按钮\r\n    await page.click('[data-testid=\"send-reset-button\"]')\r\n    \r\n    // 验证成功消息\r\n    const successMessage = await page.locator('[data-testid=\"success-message\"]').textContent()\r\n    expect(successMessage).toContain('Reset email sent')\r\n  })\r\n\r\n  test('应该能够处理邮箱验证流程', async ({ page }) => {\r\n    // 先注册\r\n    await page.goto('/signup')\r\n    await page.fill('[data-testid=\"email-input\"]', 'test@example.com')\r\n    await page.fill('[data-testid=\"password-input\"]', 'password123')\r\n    await page.fill('[data-testid=\"confirm-password-input\"]', 'password123')\r\n    await page.click('[data-testid=\"signup-button\"]')\r\n    \r\n    // 等待验证页面\r\n    await page.waitForURL('/verify-email')\r\n    \r\n    // 验证验证消息\r\n    const verifyMessage = await page.locator('[data-testid=\"verify-message\"]').textContent()\r\n    expect(verifyMessage).toContain('Please verify your email')\r\n    \r\n    // 模拟邮箱验证（在实际测试中可能需要特殊处理）\r\n    await page.click('[data-testid=\"resend-verification\"]')\r\n    \r\n    // 验证重发成功消息\r\n    const resendMessage = await page.locator('[data-testid=\"resend-message\"]').textContent()\r\n    expect(resendMessage).toContain('Verification email resent')\r\n  })\r\n\r\n  test('应该能够处理双因子认证', async ({ page }) => {\r\n    // 假设用户已启用双因子认证\r\n    await page.goto('/login')\r\n    await page.fill('[data-testid=\"email-input\"]', 'test@example.com')\r\n    await page.fill('[data-testid=\"password-input\"]', 'password123')\r\n    await page.click('[data-testid=\"login-button\"]')\r\n    \r\n    // 等待2FA页面\r\n    await page.waitForURL('/two-factor')\r\n    \r\n    // 填写2FA代码\r\n    await page.fill('[data-testid=\"totp-input\"]', '123456')\r\n    \r\n    // 点击验证按钮\r\n    await page.click('[data-testid=\"verify-2fa\"]')\r\n    \r\n    // 验证登录成功\r\n    await page.waitForURL('/dashboard')\r\n    \r\n    const welcomeMessage = await page.locator('[data-testid=\"welcome-message\"]').textContent()\r\n    expect(welcomeMessage).toContain('Welcome back')\r\n  })\r\n\r\n  test('应该能够处理账户锁定', async ({ page }) => {\r\n    await page.goto('/login')\r\n    \r\n    // 多次使用错误密码尝试登录\r\n    for (let i = 0; i < 5; i++) {\r\n      await page.fill('[data-testid=\"email-input\"]', 'test@example.com')\r\n      await page.fill('[data-testid=\"password-input\"]', 'wrongpassword')\r\n      await page.click('[data-testid=\"login-button\"]')\r\n      \r\n      // 等待错误消息\r\n      await page.waitForSelector('[data-testid=\"error-message\"]')\r\n      \r\n      // 清空表单\r\n      await page.fill('[data-testid=\"password-input\"]', '')\r\n    }\r\n    \r\n    // 验证账户锁定消息\r\n    const lockMessage = await page.locator('[data-testid=\"lock-message\"]').textContent()\r\n    expect(lockMessage).toContain('Account locked')\r\n    \r\n    // 验证登录按钮被禁用\r\n    const loginButton = await page.locator('[data-testid=\"login-button\"]')\r\n    await expect(loginButton).toBeDisabled()\r\n  })\r\n\r\n  test('应该能够处理账户注册限额', async ({ page }) => {\r\n    // 模拟已达到注册限额\r\n    await page.goto('/signup')\r\n    \r\n    // 填写注册表单\r\n    await page.fill('[data-testid=\"email-input\"]', 'newuser@example.com')\r\n    await page.fill('[data-testid=\"password-input\"]', 'password123')\r\n    await page.fill('[data-testid=\"confirm-password-input\"]', 'password123')\r\n    \r\n    await page.click('[data-testid=\"signup-button\"]')\r\n    \r\n    // 验证限额错误消息\r\n    const limitMessage = await page.locator('[data-testid=\"limit-message\"]').textContent()\r\n    expect(limitMessage).toContain('Registration limit reached')\r\n  })\r\n})"],"version":3}
{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\tests\\integration\\api\\api-integration.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\tests\\integration\\api\\api-integration.test.ts"],"sourcesContent":["// API集成测试\r\nimport { cloudSyncService } from '@/services/cloud-sync'\r\nimport { mockServer } from '@/tests/fixtures/mock-services'\r\nimport { mockDataUtils } from '@/tests/test-utils'\r\n\r\n// 设置测试环境\r\nbeforeAll(() => {\r\n  mockServer.listen()\r\n})\r\n\r\nbeforeEach(() => {\r\n  mockServer.resetHandlers()\r\n})\r\n\r\nafterAll(() => {\r\n  mockServer.close()\r\n})\r\n\r\ndescribe('API Integration', () => {\r\n  describe('卡片API集成', () => {\r\n    it('应该能够创建卡片', async () => {\r\n      const cardData = mockDataUtils.generateTestCard()\r\n      \r\n      // 模拟成功响应\r\n      mockServer.use(\r\n        rest.post('https://test.supabase.co/rest/v1/cards', (req, res, ctx) => {\r\n          return res(\r\n            ctx.status(201),\r\n            ctx.json({\r\n              ...cardData,\r\n              id: 'new-card-id',\r\n              created_at: new Date().toISOString(),\r\n            })\r\n          )\r\n        })\r\n      )\r\n      \r\n      const result = await cloudSyncService.createCard(cardData)\r\n      \r\n      expect(result).toBeDefined()\r\n      expect(result.id).toBe('new-card-id')\r\n      expect(result.title).toBe(cardData.title)\r\n    })\r\n\r\n    it('应该能够获取卡片列表', async () => {\r\n      const cards = mockDataUtils.generateCards(5)\r\n      \r\n      // 模拟成功响应\r\n      mockServer.use(\r\n        rest.get('https://test.supabase.co/rest/v1/cards', (req, res, ctx) => {\r\n          return res(\r\n            ctx.status(200),\r\n            ctx.json(cards)\r\n          )\r\n        })\r\n      )\r\n      \r\n      const result = await cloudSyncService.getCards()\r\n      \r\n      expect(result).toHaveLength(5)\r\n      expect(result[0].title).toBe(cards[0].title)\r\n    })\r\n\r\n    it('应该能够更新卡片', async () => {\r\n      const cardId = 'test-card-id'\r\n      const updateData = { title: 'Updated Title' }\r\n      \r\n      // 模拟成功响应\r\n      mockServer.use(\r\n        rest.patch(`https://test.supabase.co/rest/v1/cards?id=eq.${cardId}`, (req, res, ctx) => {\r\n          return res(\r\n            ctx.status(200),\r\n            ctx.json({\r\n              id: cardId,\r\n              title: 'Updated Title',\r\n              updated_at: new Date().toISOString(),\r\n            })\r\n          )\r\n        })\r\n      )\r\n      \r\n      const result = await cloudSyncService.updateCard(cardId, updateData)\r\n      \r\n      expect(result).toBeDefined()\r\n      expect(result.id).toBe(cardId)\r\n      expect(result.title).toBe('Updated Title')\r\n    })\r\n\r\n    it('应该能够删除卡片', async () => {\r\n      const cardId = 'test-card-id'\r\n      \r\n      // 模拟成功响应\r\n      mockServer.use(\r\n        rest.delete(`https://test.supabase.co/rest/v1/cards?id=eq.${cardId}`, (req, res, ctx) => {\r\n          return res(ctx.status(204))\r\n        })\r\n      )\r\n      \r\n      await expect(cloudSyncService.deleteCard(cardId)).resolves.not.toThrow()\r\n    })\r\n\r\n    it('应该能够按条件查询卡片', async () => {\r\n      const cards = [\r\n        mockDataUtils.generateTestCard({ title: 'React Card' }),\r\n        mockDataUtils.generateTestCard({ title: 'Vue Card' }),\r\n        mockDataUtils.generateTestCard({ title: 'Angular Card' }),\r\n      ]\r\n      \r\n      // 模拟搜索响应\r\n      mockServer.use(\r\n        rest.get('https://test.supabase.co/rest/v1/cards', (req, res, ctx) => {\r\n          const url = new URL(req.url)\r\n          const search = url.searchParams.get('title')\r\n          \r\n          if (search) {\r\n            const filtered = cards.filter(card => \r\n              card.title.toLowerCase().includes(search.toLowerCase())\r\n            )\r\n            return res(ctx.status(200), ctx.json(filtered))\r\n          }\r\n          \r\n          return res(ctx.status(200), ctx.json(cards))\r\n        })\r\n      )\r\n      \r\n      // 搜索包含\"React\"的卡片\r\n      const reactCards = await cloudSyncService.searchCards({ title: 'React' })\r\n      expect(reactCards).toHaveLength(1)\r\n      expect(reactCards[0].title).toBe('React Card')\r\n      \r\n      // 获取所有卡片\r\n      const allCards = await cloudSyncService.getCards()\r\n      expect(allCards).toHaveLength(3)\r\n    })\r\n  })\r\n\r\n  describe('文件夹API集成', () => {\r\n    it('应该能够创建文件夹', async () => {\r\n      const folderData = mockDataUtils.generateTestFolder()\r\n      \r\n      // 模拟成功响应\r\n      mockServer.use(\r\n        rest.post('https://test.supabase.co/rest/v1/folders', (req, res, ctx) => {\r\n          return res(\r\n            ctx.status(201),\r\n            ctx.json({\r\n              ...folderData,\r\n              id: 'new-folder-id',\r\n              created_at: new Date().toISOString(),\r\n            })\r\n          )\r\n        })\r\n      )\r\n      \r\n      const result = await cloudSyncService.createFolder(folderData)\r\n      \r\n      expect(result).toBeDefined()\r\n      expect(result.id).toBe('new-folder-id')\r\n      expect(result.name).toBe(folderData.name)\r\n    })\r\n\r\n    it('应该能够获取文件夹层次结构', async () => {\r\n      const folders = [\r\n        mockDataUtils.generateTestFolder({ name: 'Root', parentId: null }),\r\n        mockDataUtils.generateTestFolder({ name: 'Sub', parentId: 'folder-1' }),\r\n        mockDataUtils.generateTestFolder({ name: 'Deep', parentId: 'folder-2' }),\r\n      ]\r\n      \r\n      // 模拟成功响应\r\n      mockServer.use(\r\n        rest.get('https://test.supabase.co/rest/v1/folders', (req, res, ctx) => {\r\n          return res(ctx.status(200), ctx.json(folders))\r\n        })\r\n      )\r\n      \r\n      const result = await cloudSyncService.getFolders()\r\n      \r\n      expect(result).toHaveLength(3)\r\n      expect(result[0].name).toBe('Root')\r\n      expect(result[1].parentId).toBe('folder-1')\r\n    })\r\n\r\n    it('应该能够移动文件夹', async () => {\r\n      const folderId = 'test-folder-id'\r\n      const newParentId = 'new-parent-id'\r\n      \r\n      // 模拟成功响应\r\n      mockServer.use(\r\n        rest.patch(`https://test.supabase.co/rest/v1/folders?id=eq.${folderId}`, (req, res, ctx) => {\r\n          return res(\r\n            ctx.status(200),\r\n            ctx.json({\r\n              id: folderId,\r\n              parent_id: newParentId,\r\n              updated_at: new Date().toISOString(),\r\n            })\r\n          )\r\n        })\r\n      )\r\n      \r\n      const result = await cloudSyncService.moveFolder(folderId, newParentId)\r\n      \r\n      expect(result).toBeDefined()\r\n      expect(result.parentId).toBe(newParentId)\r\n    })\r\n  })\r\n\r\n  describe('标签API集成', () => {\r\n    it('应该能够创建标签', async () => {\r\n      const tagData = mockDataUtils.generateTestTag()\r\n      \r\n      // 模拟成功响应\r\n      mockServer.use(\r\n        rest.post('https://test.supabase.co/rest/v1/tags', (req, res, ctx) => {\r\n          return res(\r\n            ctx.status(201),\r\n            ctx.json({\r\n              ...tagData,\r\n              id: 'new-tag-id',\r\n              created_at: new Date().toISOString(),\r\n            })\r\n          )\r\n        })\r\n      )\r\n      \r\n      const result = await cloudSyncService.createTag(tagData)\r\n      \r\n      expect(result).toBeDefined()\r\n      expect(result.id).toBe('new-tag-id')\r\n      expect(result.name).toBe(tagData.name)\r\n    })\r\n\r\n    it('应该能够获取标签列表', async () => {\r\n      const tags = mockDataUtils.generateTags(10)\r\n      \r\n      // 模拟成功响应\r\n      mockServer.use(\r\n        rest.get('https://test.supabase.co/rest/v1/tags', (req, res, ctx) => {\r\n          return res(ctx.status(200), ctx.json(tags))\r\n        })\r\n      )\r\n      \r\n      const result = await cloudSyncService.getTags()\r\n      \r\n      expect(result).toHaveLength(10)\r\n      expect(result[0].name).toBe(tags[0].name)\r\n    })\r\n\r\n    it('应该能够为卡片添加标签', async () => {\r\n      const cardId = 'test-card-id'\r\n      const tagId = 'test-tag-id'\r\n      \r\n      // 模拟成功响应\r\n      mockServer.use(\r\n        rest.post(`https://test.supabase.co/rest/v1/card_tags`, (req, res, ctx) => {\r\n          return res(\r\n            ctx.status(201),\r\n            ctx.json({\r\n              card_id: cardId,\r\n              tag_id: tagId,\r\n              created_at: new Date().toISOString(),\r\n            })\r\n          )\r\n        })\r\n      )\r\n      \r\n      const result = await cloudSyncService.addTagToCard(cardId, tagId)\r\n      \r\n      expect(result).toBeDefined()\r\n      expect(result.cardId).toBe(cardId)\r\n      expect(result.tagId).toBe(tagId)\r\n    })\r\n\r\n    it('应该能够从卡片移除标签', async () => {\r\n      const cardId = 'test-card-id'\r\n      const tagId = 'test-tag-id'\r\n      \r\n      // 模拟成功响应\r\n      mockServer.use(\r\n        rest.delete(`https://test.supabase.co/rest/v1/card_tags?card_id=eq.${cardId}&tag_id=eq.${tagId}`, (req, res, ctx) => {\r\n          return res(ctx.status(204))\r\n        })\r\n      )\r\n      \r\n      await expect(cloudSyncService.removeTagFromCard(cardId, tagId)).resolves.not.toThrow()\r\n    })\r\n  })\r\n\r\n  describe('认证API集成', () => {\r\n    it('应该能够注册用户', async () => {\r\n      const userData = {\r\n        email: 'test@example.com',\r\n        password: 'password123',\r\n      }\r\n      \r\n      // 模拟成功响应\r\n      mockServer.use(\r\n        rest.post('https://test.supabase.co/auth/v1/signup', (req, res, ctx) => {\r\n          return res(\r\n            ctx.status(200),\r\n            ctx.json({\r\n              user: {\r\n                id: 'test-user-id',\r\n                email: userData.email,\r\n                created_at: new Date().toISOString(),\r\n              },\r\n              session: {\r\n                access_token: 'test-access-token',\r\n                refresh_token: 'test-refresh-token',\r\n                expires_in: 3600,\r\n              },\r\n            })\r\n          )\r\n        })\r\n      )\r\n      \r\n      const result = await cloudSyncService.signUp(userData)\r\n      \r\n      expect(result).toBeDefined()\r\n      expect(result.user.id).toBe('test-user-id')\r\n      expect(result.user.email).toBe(userData.email)\r\n      expect(result.session.access_token).toBe('test-access-token')\r\n    })\r\n\r\n    it('应该能够登录用户', async () => {\r\n      const loginData = {\r\n        email: 'test@example.com',\r\n        password: 'password123',\r\n      }\r\n      \r\n      // 模拟成功响应\r\n      mockServer.use(\r\n        rest.post('https://test.supabase.co/auth/v1/token?grant_type=password', (req, res, ctx) => {\r\n          return res(\r\n            ctx.status(200),\r\n            ctx.json({\r\n              user: {\r\n                id: 'test-user-id',\r\n                email: loginData.email,\r\n                created_at: new Date().toISOString(),\r\n              },\r\n              session: {\r\n                access_token: 'test-access-token',\r\n                refresh_token: 'test-refresh-token',\r\n                expires_in: 3600,\r\n              },\r\n            })\r\n          )\r\n        })\r\n      )\r\n      \r\n      const result = await cloudSyncService.signIn(loginData)\r\n      \r\n      expect(result).toBeDefined()\r\n      expect(result.user.id).toBe('test-user-id')\r\n      expect(result.session.access_token).toBe('test-access-token')\r\n    })\r\n\r\n    it('应该能够刷新访问令牌', async () => {\r\n      const refreshToken = 'test-refresh-token'\r\n      \r\n      // 模拟成功响应\r\n      mockServer.use(\r\n        rest.post('https://test.supabase.co/auth/v1/token?grant_type=refresh_token', (req, res, ctx) => {\r\n          return res(\r\n            ctx.status(200),\r\n            ctx.json({\r\n              access_token: 'new-access-token',\r\n              refresh_token: 'new-refresh-token',\r\n              expires_in: 3600,\r\n            })\r\n          )\r\n        })\r\n      )\r\n      \r\n      const result = await cloudSyncService.refreshToken(refreshToken)\r\n      \r\n      expect(result).toBeDefined()\r\n      expect(result.access_token).toBe('new-access-token')\r\n      expect(result.refresh_token).toBe('new-refresh-token')\r\n    })\r\n\r\n    it('应该能够登出用户', async () => {\r\n      // 模拟成功响应\r\n      mockServer.use(\r\n        rest.post('https://test.supabase.co/auth/v1/logout', (req, res, ctx) => {\r\n          return res(ctx.status(200))\r\n        })\r\n      )\r\n      \r\n      await expect(cloudSyncService.signOut()).resolves.not.toThrow()\r\n    })\r\n  })\r\n\r\n  describe('文件上传API集成', () => {\r\n    it('应该能够上传图片', async () => {\r\n      const file = new File(['test'], 'test.jpg', { type: 'image/jpeg' })\r\n      \r\n      // 模拟成功响应\r\n      mockServer.use(\r\n        rest.post('https://test.supabase.co/storage/v1/object/card-images/test.jpg', (req, res, ctx) => {\r\n          return res(\r\n            ctx.status(200),\r\n            ctx.json({\r\n              Key: 'test.jpg',\r\n              Location: 'https://test.supabase.co/storage/v1/object/public/card-images/test.jpg',\r\n            })\r\n          )\r\n        })\r\n      )\r\n      \r\n      const result = await cloudSyncService.uploadImage(file)\r\n      \r\n      expect(result).toBeDefined()\r\n      expect(result.Key).toBe('test.jpg')\r\n      expect(result.Location).toContain('test.jpg')\r\n    })\r\n\r\n    it('应该能够删除图片', async () => {\r\n      const fileName = 'test.jpg'\r\n      \r\n      // 模拟成功响应\r\n      mockServer.use(\r\n        rest.delete('https://test.supabase.co/storage/v1/object/card-images/test.jpg', (req, res, ctx) => {\r\n          return res(ctx.status(200))\r\n        })\r\n      )\r\n      \r\n      await expect(cloudSyncService.deleteImage(fileName)).resolves.not.toThrow()\r\n    })\r\n\r\n    it('应该能够获取图片URL', async () => {\r\n      const fileName = 'test.jpg'\r\n      \r\n      // 模拟成功响应\r\n      mockServer.use(\r\n        rest.get('https://test.supabase.co/storage/v1/object/public/card-images/test.jpg', (req, res) => {\r\n          return res(\r\n            200,\r\n            { 'Content-Type': 'image/jpeg' },\r\n            'test-image-data'\r\n          )\r\n        })\r\n      )\r\n      \r\n      const result = await cloudSyncService.getImageUrl(fileName)\r\n      \r\n      expect(result).toBeDefined()\r\n      expect(result).toContain('test.jpg')\r\n    })\r\n  })\r\n\r\n  describe('错误处理', () => {\r\n    it('应该处理网络错误', async () => {\r\n      const cardData = mockDataUtils.generateTestCard()\r\n      \r\n      // 模拟网络错误\r\n      mockServer.use(\r\n        rest.post('https://test.supabase.co/rest/v1/cards', (req, res) => {\r\n          return res.networkError('Network error')\r\n        })\r\n      )\r\n      \r\n      await expect(cloudSyncService.createCard(cardData)).rejects.toThrow('Network error')\r\n    })\r\n\r\n    it('应该处理认证错误', async () => {\r\n      const cardData = mockDataUtils.generateTestCard()\r\n      \r\n      // 模拟认证错误\r\n      mockServer.use(\r\n        rest.post('https://test.supabase.co/rest/v1/cards', (req, res, ctx) => {\r\n          return res(\r\n            ctx.status(401),\r\n            ctx.json({ error: 'Unauthorized' })\r\n          )\r\n        })\r\n      )\r\n      \r\n      await expect(cloudSyncService.createCard(cardData)).rejects.toThrow('Unauthorized')\r\n    })\r\n\r\n    it('应该处理服务器错误', async () => {\r\n      const cardData = mockDataUtils.generateTestCard()\r\n      \r\n      // 模拟服务器错误\r\n      mockServer.use(\r\n        rest.post('https://test.supabase.co/rest/v1/cards', (req, res, ctx) => {\r\n          return res(\r\n            ctx.status(500),\r\n            ctx.json({ error: 'Internal server error' })\r\n          )\r\n        })\r\n      )\r\n      \r\n      await expect(cloudSyncService.createCard(cardData)).rejects.toThrow('Internal server error')\r\n    })\r\n\r\n    it('应该处理验证错误', async () => {\r\n      const invalidCard = {\r\n        ...mockDataUtils.generateTestCard(),\r\n        title: '', // 无效的标题\r\n      }\r\n      \r\n      // 模拟验证错误\r\n      mockServer.use(\r\n        rest.post('https://test.supabase.co/rest/v1/cards', (req, res, ctx) => {\r\n          return res(\r\n            ctx.status(422),\r\n            ctx.json({ \r\n              error: 'Validation error',\r\n              details: { title: 'Title is required' }\r\n            })\r\n          )\r\n        })\r\n      )\r\n      \r\n      await expect(cloudSyncService.createCard(invalidCard)).rejects.toThrow('Validation error')\r\n    })\r\n\r\n    it('应该处理速率限制', async () => {\r\n      const cardData = mockDataUtils.generateTestCard()\r\n      \r\n      // 模拟速率限制\r\n      mockServer.use(\r\n        rest.post('https://test.supabase.co/rest/v1/cards', (req, res, ctx) => {\r\n          return res(\r\n            ctx.status(429),\r\n            ctx.json({ error: 'Rate limit exceeded' })\r\n          )\r\n        })\r\n      )\r\n      \r\n      await expect(cloudSyncService.createCard(cardData)).rejects.toThrow('Rate limit exceeded')\r\n    })\r\n  })\r\n\r\n  describe('请求优化', () => {\r\n    it('应该支持请求缓存', async () => {\r\n      const cards = mockDataUtils.generateCards(5)\r\n      \r\n      // 模拟成功响应\r\n      mockServer.use(\r\n        rest.get('https://test.supabase.co/rest/v1/cards', (req, res, ctx) => {\r\n          return res(ctx.status(200), ctx.json(cards))\r\n        })\r\n      )\r\n      \r\n      // 第一次请求\r\n      const result1 = await cloudSyncService.getCards()\r\n      expect(result1).toHaveLength(5)\r\n      \r\n      // 第二次请求（应该使用缓存）\r\n      const result2 = await cloudSyncService.getCards()\r\n      expect(result2).toHaveLength(5)\r\n      expect(result2).toEqual(result1)\r\n    })\r\n\r\n    it('应该支持请求去重', async () => {\r\n      const cards = mockDataUtils.generateCards(5)\r\n      \r\n      // 模拟成功响应\r\n      mockServer.use(\r\n        rest.get('https://test.supabase.co/rest/v1/cards', (req, res, ctx) => {\r\n          return res(ctx.status(200), ctx.json(cards))\r\n        })\r\n      )\r\n      \r\n      // 并发发起相同的请求\r\n      const [result1, result2] = await Promise.all([\r\n        cloudSyncService.getCards(),\r\n        cloudSyncService.getCards(),\r\n      ])\r\n      \r\n      expect(result1).toHaveLength(5)\r\n      expect(result2).toHaveLength(5)\r\n      expect(result1).toEqual(result2)\r\n    })\r\n\r\n    it('应该支持请求重试', async () => {\r\n      const cardData = mockDataUtils.generateTestCard()\r\n      let requestCount = 0\r\n      \r\n      // 模拟第一次失败，第二次成功\r\n      mockServer.use(\r\n        rest.post('https://test.supabase.co/rest/v1/cards', (req, res, ctx) => {\r\n          requestCount++\r\n          if (requestCount === 1) {\r\n            return res(ctx.status(500), ctx.json({ error: 'Server error' }))\r\n          }\r\n          return res(\r\n            ctx.status(201),\r\n            ctx.json({\r\n              ...cardData,\r\n              id: 'new-card-id',\r\n              created_at: new Date().toISOString(),\r\n            })\r\n          )\r\n        })\r\n      )\r\n      \r\n      // 配置重试\r\n      await cloudSyncService.configure({\r\n        maxRetries: 3,\r\n        retryDelay: 100,\r\n      })\r\n      \r\n      const result = await cloudSyncService.createCard(cardData)\r\n      \r\n      expect(result).toBeDefined()\r\n      expect(result.id).toBe('new-card-id')\r\n      expect(requestCount).toBe(2) // 第一次失败，第二次成功\r\n    })\r\n  })\r\n})"],"version":3}
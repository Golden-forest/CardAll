{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\tests\\unit\\services\\cloud-sync.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\tests\\unit\\services\\cloud-sync.test.ts"],"sourcesContent":["// 云端同步服务单元测试\r\nimport { cloudSyncService } from '../../../src/services/cloud-sync'\r\nimport { mockServer } from '../../fixtures/mock-services'\r\nimport { testData, mockDataUtils, networkUtils } from '../../test-utils'\r\n\r\n// 设置测试环境\r\nbeforeAll(() => {\r\n  mockServer.listen()\r\n})\r\n\r\nafterEach(() => {\r\n  mockServer.resetHandlers()\r\n})\r\n\r\nafterAll(() => {\r\n  mockServer.close()\r\n})\r\n\r\ndescribe('CloudSyncService', () => {\r\n  describe('基本同步功能', () => {\r\n    it('应该能够成功同步卡片数据', async () => {\r\n      const cardData = mockDataUtils.generateTestCard()\r\n      \r\n      await expect(cloudSyncService.syncCard(cardData)).resolves.not.toThrow()\r\n    })\r\n\r\n    it('应该能够同步文件夹数据', async () => {\r\n      const folderData = mockDataUtils.generateTestFolder()\r\n      \r\n      await expect(cloudSyncService.syncFolder(folderData)).resolves.not.toThrow()\r\n    })\r\n\r\n    it('应该能够同步标签数据', async () => {\r\n      const tagData = mockDataUtils.generateTestTag()\r\n      \r\n      await expect(cloudSyncService.syncTag(tagData)).resolves.not.toThrow()\r\n    })\r\n  })\r\n\r\n  describe('队列管理', () => {\r\n    it('应该能够添加操作到队列', async () => {\r\n      const operation = {\r\n        type: 'create' as const,\r\n        entityType: 'card' as const,\r\n        entityId: 'test-card-id',\r\n        data: mockDataUtils.generateTestCard(),\r\n      }\r\n      \r\n      await cloudSyncService.addToQueue(operation)\r\n      \r\n      const queue = await cloudSyncService.getQueue()\r\n      expect(queue).toHaveLength(1)\r\n      expect(queue[0].entityId).toBe('test-card-id')\r\n    })\r\n\r\n    it('应该能够处理队列中的操作', async () => {\r\n      const operation = {\r\n        type: 'create' as const,\r\n        entityType: 'card' as const,\r\n        entityId: 'test-card-id',\r\n        data: mockDataUtils.generateTestCard(),\r\n      }\r\n      \r\n      await cloudSyncService.addToQueue(operation)\r\n      await cloudSyncService.processQueue()\r\n      \r\n      const queue = await cloudSyncService.getQueue()\r\n      expect(queue).toHaveLength(0)\r\n    })\r\n\r\n    it('应该能够清除队列', async () => {\r\n      // 添加多个操作到队列\r\n      for (let i = 0; i < 3; i++) {\r\n        await cloudSyncService.addToQueue({\r\n          type: 'create' as const,\r\n          entityType: 'card' as const,\r\n          entityId: `card-${i}`,\r\n          data: mockDataUtils.generateTestCard(),\r\n        })\r\n      }\r\n      \r\n      await cloudSyncService.clearQueue()\r\n      \r\n      const queue = await cloudSyncService.getQueue()\r\n      expect(queue).toHaveLength(0)\r\n    })\r\n  })\r\n\r\n  describe('错误处理', () => {\r\n    it('应该处理网络错误', async () => {\r\n      // 模拟网络错误\r\n      mockServer.use(\r\n        rest.post('/api/sync', (req, res) => {\r\n          return res.networkError('Failed to connect')\r\n        })\r\n      )\r\n      \r\n      const cardData = mockDataUtils.generateTestCard()\r\n      \r\n      await expect(cloudSyncService.syncCard(cardData)).rejects.toThrow()\r\n    })\r\n\r\n    it('应该重试失败的操作', async () => {\r\n      // 模拟服务器错误\r\n      mockServer.use(\r\n        rest.post('/api/sync', (req, res, ctx) => {\r\n          return res(ctx.status(500))\r\n        })\r\n      )\r\n      \r\n      const cardData = mockDataUtils.generateTestCard()\r\n      \r\n      // 第一次尝试应该失败\r\n      await expect(cloudSyncService.syncCard(cardData)).rejects.toThrow()\r\n      \r\n      // 检查是否添加到重试队列\r\n      const retryQueue = await cloudSyncService.getRetryQueue()\r\n      expect(retryQueue).toHaveLength(1)\r\n    })\r\n\r\n    it('应该处理认证错误', async () => {\r\n      // 模拟认证错误\r\n      mockServer.use(\r\n        rest.post('/api/sync', (req, res, ctx) => {\r\n          return res(ctx.status(401))\r\n        })\r\n      )\r\n      \r\n      const cardData = mockDataUtils.generateTestCard()\r\n      \r\n      await expect(cloudSyncService.syncCard(cardData)).rejects.toThrow()\r\n    })\r\n  })\r\n\r\n  describe('冲突解决', () => {\r\n    it('应该检测数据冲突', async () => {\r\n      const localCard = mockDataUtils.generateTestCard({\r\n        id: 'conflict-card',\r\n        title: 'Local Version',\r\n      })\r\n      \r\n      const remoteCard = mockDataUtils.generateTestCard({\r\n        id: 'conflict-card',\r\n        title: 'Remote Version',\r\n      })\r\n      \r\n      const hasConflict = await cloudSyncService.checkConflict(localCard, remoteCard)\r\n      expect(hasConflict).toBe(true)\r\n    })\r\n\r\n    it('应该能够合并冲突数据', async () => {\r\n      const localCard = mockDataUtils.generateTestCard({\r\n        id: 'conflict-card',\r\n        title: 'Local Version',\r\n        content: 'Local content',\r\n      })\r\n      \r\n      const remoteCard = mockDataUtils.generateTestCard({\r\n        id: 'conflict-card',\r\n        title: 'Remote Version',\r\n        tags: ['remote-tag'],\r\n      })\r\n      \r\n      const mergedCard = await cloudSyncService.mergeConflict(localCard, remoteCard)\r\n      \r\n      expect(mergedCard.title).toBe('Remote Version') // 远程优先\r\n      expect(mergedCard.content).toBe('Local content') // 保留本地内容\r\n      expect(mergedCard.tags).toContain('remote-tag')\r\n    })\r\n\r\n    it('应该处理冲突解决策略', async () => {\r\n      const strategy = 'local' as const\r\n      const localCard = mockDataUtils.generateTestCard({\r\n        title: 'Local Version',\r\n      })\r\n      \r\n      const remoteCard = mockDataUtils.generateTestCard({\r\n        title: 'Remote Version',\r\n      })\r\n      \r\n      const resolvedCard = await cloudSyncService.resolveConflict(\r\n        localCard,\r\n        remoteCard,\r\n        strategy\r\n      )\r\n      \r\n      expect(resolvedCard.title).toBe('Local Version')\r\n    })\r\n  })\r\n\r\n  describe('离线支持', () => {\r\n    it('应该检测离线状态', async () => {\r\n      networkUtils.simulateOffline()\r\n      \r\n      const isOnline = await cloudSyncService.checkOnlineStatus()\r\n      expect(isOnline).toBe(false)\r\n      \r\n      networkUtils.simulateOnline()\r\n    })\r\n\r\n    it('应该在离线时缓存操作', async () => {\r\n      networkUtils.simulateOffline()\r\n      \r\n      const cardData = mockDataUtils.generateTestCard()\r\n      await cloudSyncService.syncCard(cardData)\r\n      \r\n      const cachedOperations = await cloudSyncService.getCachedOperations()\r\n      expect(cachedOperations).toHaveLength(1)\r\n      \r\n      networkUtils.simulateOnline()\r\n    })\r\n\r\n    it('应该在恢复在线后同步缓存操作', async () => {\r\n      // 模拟离线并缓存操作\r\n      networkUtils.simulateOffline()\r\n      \r\n      const cardData = mockDataUtils.generateTestCard()\r\n      await cloudSyncService.syncCard(cardData)\r\n      \r\n      // 恢复在线\r\n      networkUtils.simulateOnline()\r\n      \r\n      // 触发同步\r\n      await cloudSyncService.syncCachedOperations()\r\n      \r\n      const cachedOperations = await cloudSyncService.getCachedOperations()\r\n      expect(cachedOperations).toHaveLength(0)\r\n    })\r\n  })\r\n\r\n  describe('性能优化', () => {\r\n    it('应该批量处理操作', async () => {\r\n      const operations = []\r\n      for (let i = 0; i < 10; i++) {\r\n        operations.push({\r\n          type: 'create' as const,\r\n          entityType: 'card' as const,\r\n          entityId: `card-${i}`,\r\n          data: mockDataUtils.generateTestCard(),\r\n        })\r\n      }\r\n      \r\n      const startTime = performance.now()\r\n      await cloudSyncService.batchSync(operations)\r\n      const endTime = performance.now()\r\n      \r\n      expect(endTime - startTime).toBeLessThan(1000) // 应该在1秒内完成\r\n    })\r\n\r\n    it('应该限制并发请求数量', async () => {\r\n      const operations = []\r\n      for (let i = 0; i < 50; i++) {\r\n        operations.push({\r\n          type: 'create' as const,\r\n          entityType: 'card' as const,\r\n          entityId: `card-${i}`,\r\n          data: mockDataUtils.generateTestCard(),\r\n        })\r\n      }\r\n      \r\n      await cloudSyncService.batchSync(operations)\r\n      \r\n      // 验证没有过多的并发请求\r\n      const activeRequests = cloudSyncService.getActiveRequestCount()\r\n      expect(activeRequests).toBeLessThanOrEqual(5) // 假设最大并发数为5\r\n    })\r\n  })\r\n\r\n  describe('数据完整性', () => {\r\n    it('应该验证数据完整性', async () => {\r\n      const cardData = mockDataUtils.generateTestCard()\r\n      \r\n      const isValid = await cloudSyncService.validateData(cardData)\r\n      expect(isValid).toBe(true)\r\n    })\r\n\r\n    it('应该检测损坏的数据', async () => {\r\n      const corruptedData = {\r\n        ...mockDataUtils.generateTestCard(),\r\n        content: null, // 损坏的数据\r\n      }\r\n      \r\n      const isValid = await cloudSyncService.validateData(corruptedData)\r\n      expect(isValid).toBe(false)\r\n    })\r\n\r\n    it('应该修复损坏的数据', async () => {\r\n      const corruptedData = {\r\n        ...mockDataUtils.generateTestCard(),\r\n        content: null,\r\n      }\r\n      \r\n      const fixedData = await cloudSyncService.repairData(corruptedData)\r\n      expect(fixedData.content).toBeDefined()\r\n    })\r\n  })\r\n\r\n  describe('状态管理', () => {\r\n    it('应该正确报告同步状态', async () => {\r\n      const status = await cloudSyncService.getSyncStatus()\r\n      \r\n      expect(status).toHaveProperty('isSyncing')\r\n      expect(status).toHaveProperty('queueLength')\r\n      expect(status).toHaveProperty('lastSyncTime')\r\n      expect(status).toHaveProperty('errorCount')\r\n    })\r\n\r\n    it('应该能够暂停和恢复同步', async () => {\r\n      await cloudSyncService.pauseSync()\r\n      \r\n      const status = await cloudSyncService.getSyncStatus()\r\n      expect(status.isSyncing).toBe(false)\r\n      \r\n      await cloudSyncService.resumeSync()\r\n      \r\n      const resumedStatus = await cloudSyncService.getSyncStatus()\r\n      expect(resumedStatus.isSyncing).toBe(true)\r\n    })\r\n\r\n    it('应该能够取消正在进行的同步', async () => {\r\n      // 开始一个长时间运行的同步\r\n      const syncPromise = cloudSyncService.syncLargeDataset()\r\n      \r\n      // 取消同步\r\n      await cloudSyncService.cancelSync()\r\n      \r\n      // 验证同步被取消\r\n      const status = await cloudSyncService.getSyncStatus()\r\n      expect(status.isSyncing).toBe(false)\r\n    })\r\n  })\r\n\r\n  describe('配置和选项', () => {\r\n    it('应该允许配置同步间隔', async () => {\r\n      await cloudSyncService.configure({\r\n        syncInterval: 5000, // 5秒\r\n        maxRetries: 3,\r\n        batchSize: 10,\r\n      })\r\n      \r\n      const config = await cloudSyncService.getConfiguration()\r\n      expect(config.syncInterval).toBe(5000)\r\n    })\r\n\r\n    it('应该允许配置重试策略', async () => {\r\n      await cloudSyncService.configure({\r\n        retryStrategy: 'exponential',\r\n        initialDelay: 1000,\r\n        maxDelay: 30000,\r\n      })\r\n      \r\n      const config = await cloudSyncService.getConfiguration()\r\n      expect(config.retryStrategy).toBe('exponential')\r\n    })\r\n\r\n    it('应该允许配置数据压缩', async () => {\r\n      await cloudSyncService.configure({\r\n        enableCompression: true,\r\n        compressionThreshold: 1024, // 1KB\r\n      })\r\n      \r\n      const config = await cloudSyncService.getConfiguration()\r\n      expect(config.enableCompression).toBe(true)\r\n    })\r\n  })\r\n})"],"version":3}
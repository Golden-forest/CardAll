{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\sync-strategy.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\sync-strategy.ts"],"sourcesContent":["import { supabase } from './supabase'\nimport { db, type DbCard, type DbFolder, type DbTag, type DbImage } from './database'\nimport { networkMonitorService, type NetworkInfo } from './network-monitor'\nimport { localOperationService, type LocalSyncOperation } from './local-operation'\n\n// ============================================================================\n// 增量同步和冲突检测系统\n// ============================================================================\n\n// 冲突类型\nexport type ConflictType = \n  | 'version-mismatch'        // 版本不匹配\n  | 'concurrent-modification' // 并发修改\n  | 'data-inconsistency'     // 数据不一致\n  | 'network-partition'      // 网络分区\n  | 'constraint-violation'   // 约束违反\n\n// 冲突解决策略\nexport type ResolutionStrategy = \n  | 'local-wins'            // 本地数据获胜\n  | 'remote-wins'           // 远程数据获胜\n  | 'merge-fields'          // 字段级别合并\n  | 'manual-resolution'      // 手动解决\n  | 'timestamp-based'       // 基于时间戳\n  | 'operation-based'       // 基于操作类型\n\n// 冲突信息\nexport interface SyncConflict {\n  id: string\n  type: ConflictType\n  entityType: 'card' | 'folder' | 'tag' | 'image'\n  entityId: string\n  userId: string\n  \n  // 冲突数据\n  localData: any\n  remoteData: any\n  baseData?: any // 基础版本（三路合并）\n  \n  // 冲突详情\n  fieldConflicts: Array<{\n    field: string\n    localValue: any\n    remoteValue: any\n    conflictReason: string\n  }>\n  \n  // 元信息\n  localVersion: number\n  remoteVersion: number\n  localTimestamp: Date\n  remoteTimestamp: Date\n  \n  // 解决信息\n  resolution?: ResolutionStrategy\n  resolvedData?: any\n  resolvedAt?: Date\n  resolvedBy?: 'system' | 'user'\n  \n  // 上下文\n  context: {\n    networkInfo: NetworkInfo\n    operationType: string\n    retryCount: number\n  }\n  \n  createdAt: Date\n}\n\n// 同步策略配置\nexport interface SyncStrategyConfig {\n  // 冲突解决默认策略\n  defaultResolution: ResolutionStrategy\n  \n  // 按实体类型的策略\n  entityStrategies: {\n    card: ResolutionStrategy\n    folder: ResolutionStrategy\n    tag: ResolutionStrategy\n    image: ResolutionStrategy\n  }\n  \n  // 按冲突类型的策略\n  conflictTypeStrategies: Record<ConflictType, ResolutionStrategy>\n  \n  // 增量同步配置\n  incremental: {\n    enabled: boolean\n    batchSize: number\n    maxConcurrentSyncs: number\n    versionCheckInterval: number\n  }\n  \n  // 冲突检测配置\n  conflictDetection: {\n    enabled: boolean\n    fieldGranularity: boolean\n    threeWayMerge: boolean\n    autoResolveThreshold: number // 自动解决的置信度阈值\n  }\n  \n  // 性能优化\n  performance: {\n    useCompression: boolean\n    useBatching: boolean\n    adaptiveBatchSize: boolean\n    networkAware: boolean\n  }\n}\n\n// 默认同步策略配置\nexport const DEFAULT_SYNC_STRATEGY: SyncStrategyConfig = {\n  defaultResolution: 'timestamp-based',\n  \n  entityStrategies: {\n    card: 'merge-fields',\n    folder: 'remote-wins',\n    tag: 'merge-fields',\n    image: 'remote-wins'\n  },\n  \n  conflictTypeStrategies: {\n    'version-mismatch': 'timestamp-based',\n    'concurrent-modification': 'merge-fields',\n    'data-inconsistency': 'manual-resolution',\n    'network-partition': 'local-wins',\n    'constraint-violation': 'remote-wins'\n  },\n  \n  incremental: {\n    enabled: true,\n    batchSize: 50,\n    maxConcurrentSyncs: 3,\n    versionCheckInterval: 30000 // 30秒\n  },\n  \n  conflictDetection: {\n    enabled: true,\n    fieldGranularity: true,\n    threeWayMerge: true,\n    autoResolveThreshold: 0.8\n  },\n  \n  performance: {\n    useCompression: true,\n    useBatching: true,\n    adaptiveBatchSize: true,\n    networkAware: true\n  }\n}\n\n// 同步进度和统计\nexport interface SyncProgress {\n  totalItems: number\n  processedItems: number\n  successfulItems: number\n  failedItems: number\n  conflictedItems: number\n  \n  currentBatch?: {\n    startIndex: number\n    endIndex: number\n    items: number\n  }\n  \n  performance: {\n    startTime: Date\n    estimatedTimeRemaining?: number\n    bytesTransferred: number\n    networkLatency: number\n  }\n  \n  conflicts: SyncConflict[]\n}\n\n// ============================================================================\n// 同步策略服务\n// ============================================================================\n\nexport class SyncStrategyService {\n  private config: SyncStrategyConfig\n  private isSyncing = false\n  private activeSyncs: Map<string, Promise<void>> = new Map()\n  \n  // 冲突解决器\n  private conflictResolvers: Map<ResolutionStrategy, (conflict: SyncConflict) => Promise<any>> = new Map()\n  \n  // 事件监听器\n  private listeners: {\n    conflictDetected?: (conflict: SyncConflict) => void\n    conflictResolved?: (conflict: SyncConflict) => void\n    syncProgress?: (progress: SyncProgress) => void\n    syncCompleted?: (stats: SyncProgress) => void\n    syncError?: (error: Error) => void\n  } = {}\n\n  constructor(config: Partial<SyncStrategyConfig> = {}) {\n    this.config = { ...DEFAULT_SYNC_STRATEGY, ...config }\n    this.initializeConflictResolvers()\n  }\n\n  // 初始化冲突解决器\n  private initializeConflictResolvers(): void {\n    this.conflictResolvers.set('local-wins', this.resolveLocalWins.bind(this))\n    this.conflictResolvers.set('remote-wins', this.resolveRemoteWins.bind(this))\n    this.conflictResolvers.set('merge-fields', this.resolveMergeFields.bind(this))\n    this.conflictResolvers.set('timestamp-based', this.resolveTimestampBased.bind(this))\n    this.conflictResolvers.set('operation-based', this.resolveOperationBased.bind(this))\n  }\n\n  // ============================================================================\n  // 主要同步方法\n  // ============================================================================\n\n  // 检测冲突\n  async detectConflicts(\n    localData: any[],\n    remoteData: any[],\n    lastSyncTime: Date\n  ): Promise<SyncConflict[]> {\n    const conflicts: SyncConflict[] = []\n    \n    // 创建快速查找映射\n    const localMap = new Map(localData.map(item => [item.id, item]))\n    const remoteMap = new Map(remoteData.map(item => [item.id, item]))\n    \n    // 检查修改冲突\n    for (const [id, localItem] of localMap) {\n      const remoteItem = remoteMap.get(id)\n      \n      if (remoteItem) {\n        // 两个数据源都修改了同一个项目\n        const localUpdated = new Date(localItem.updatedAt || localItem.updated_at || 0)\n        const remoteUpdated = new Date(remoteItem.updatedAt || remoteItem.updated_at || 0)\n        const syncTime = new Date(lastSyncTime)\n        \n        if (localUpdated > syncTime && remoteUpdated > syncTime) {\n          conflicts.push({\n            id: `conflict-${id}`,\n            entityType: this.inferEntityType(localItem),\n            entityId: id,\n            localVersion: localItem,\n            remoteVersion: remoteItem,\n            conflictType: 'modification',\n            detectedAt: new Date(),\n            resolutionStrategy: this.config.defaultResolutionStrategy\n          })\n        }\n      }\n    }\n    \n    console.log(`Detected ${conflicts.length} conflicts during sync`)\n    return conflicts\n  }\n\n  // 推断实体类型\n  private inferEntityType(item: any): string {\n    if (item.frontContent && item.backContent) return 'card'\n    if (item.name && item.parentId !== undefined) return 'folder'\n    if (item.name && !item.parentId) return 'tag'\n    if (item.url && item.cardId) return 'image'\n    return 'unknown'\n  }\n\n  // 执行增量同步\n  async performIncrementalSync(\n    userId: string,\n    lastSyncTime: Date,\n    options?: {\n      forceFullSync?: boolean\n      entityTypes?: ('card' | 'folder' | 'tag' | 'image')[]\n      limit?: number\n    }\n  ): Promise<SyncProgress> {\n    if (this.isSyncing) {\n      throw new Error('Sync already in progress')\n    }\n\n    this.isSyncing = true\n    const syncId = crypto.randomUUID()\n    const startTime = new Date()\n    \n    try {\n      const progress: SyncProgress = {\n        totalItems: 0,\n        processedItems: 0,\n        successfulItems: 0,\n        failedItems: 0,\n        conflictedItems: 0,\n        performance: {\n          startTime,\n          bytesTransferred: 0,\n          networkLatency: 0\n        },\n        conflicts: []\n      }\n\n      // 如果强制全量同步或没有上次同步时间\n      if (options?.forceFullSync || !lastSyncTime) {\n        await this.performFullSync(userId, progress)\n      } else {\n        await this.performDeltaSync(userId, lastSyncTime, progress, options)\n      }\n\n      this.notifyListeners('syncCompleted', progress)\n      return progress\n    } catch (error) {\n      this.notifyListeners('syncError', error as Error)\n      throw error\n    } finally {\n      this.isSyncing = false\n      this.activeSyncs.delete(syncId)\n    }\n  }\n\n  // 执行全量同步\n  private async performFullSync(userId: string, progress: SyncProgress): Promise<void> {\n    console.log('Starting full sync for user:', userId)\n    \n    // 获取所有本地数据\n    const [localCards, localFolders, localTags, localImages] = await Promise.all([\n      db.cards.where('userId').equals(userId).toArray(),\n      db.folders.where('userId').equals(userId).toArray(),\n      db.tags.where('userId').equals(userId).toArray(),\n      db.images.where('userId').equals(userId).toArray()\n    ])\n\n    progress.totalItems = localCards.length + localFolders.length + localTags.length + localImages.length\n\n    // 同步每种实体类型\n    await Promise.all([\n      this.syncEntities(userId, 'card', localCards, progress),\n      this.syncEntities(userId, 'folder', localFolders, progress),\n      this.syncEntities(userId, 'tag', localTags, progress),\n      this.syncEntities(userId, 'image', localImages, progress)\n    ])\n  }\n\n  // 执行增量同步\n  private async performDeltaSync(\n    userId: string,\n    lastSyncTime: Date,\n    progress: SyncProgress,\n    options?: { entityTypes?: ('card' | 'folder' | 'tag' | 'image')[]; limit?: number }\n  ): Promise<void> {\n    console.log('Starting delta sync from:', lastSyncTime)\n    \n    const entityTypes = options?.entityTypes || ['card', 'folder', 'tag', 'image']\n    \n    // 获取云端增量数据\n    const remoteData = await this.fetchRemoteDelta(userId, lastSyncTime, entityTypes)\n    \n    progress.totalItems = remoteData.cards.length + remoteData.folders.length + \n                          remoteData.tags.length + remoteData.images.length\n\n    // 处理云端增量数据\n    await Promise.all([\n      this.processRemoteDelta(userId, 'card', remoteData.cards, progress),\n      this.processRemoteDelta(userId, 'folder', remoteData.folders, progress),\n      this.processRemoteDelta(userId, 'tag', remoteData.tags, progress),\n      this.processRemoteDelta(userId, 'image', remoteData.images, progress)\n    ])\n\n    // 同步本地待处理操作\n    await this.syncPendingOperations(userId, progress)\n  }\n\n  // ============================================================================\n  // 实体同步方法\n  // ============================================================================\n\n  // 同步实体\n  private async syncEntities<T extends DbCard | DbFolder | DbTag | DbImage>(\n    userId: string,\n    entityType: 'card' | 'folder' | 'tag' | 'image',\n    localEntities: T[],\n    progress: SyncProgress\n  ): Promise<void> {\n    const batchSize = this.getAdaptiveBatchSize()\n    \n    for (let i = 0; i < localEntities.length; i += batchSize) {\n      const batch = localEntities.slice(i, i + batchSize)\n      \n      try {\n        await this.syncEntityBatch(userId, entityType, batch, progress)\n      } catch (error) {\n        console.error(`Failed to sync ${entityType} batch:`, error)\n        progress.failedItems += batch.length\n      }\n      \n      // 更新进度\n      this.updateProgress(progress, batch.length)\n    }\n  }\n\n  // 同步实体批次\n  private async syncEntityBatch<T extends DbCard | DbFolder | DbTag | DbImage>(\n    userId: string,\n    entityType: 'card' | 'folder' | 'tag' | 'image',\n    entities: T[],\n    progress: SyncProgress\n  ): Promise<void> {\n    switch (entityType) {\n      case 'card':\n        await this.syncCardBatch(userId, entities as DbCard[], progress)\n        break\n      case 'folder':\n        await this.syncFolderBatch(userId, entities as DbFolder[], progress)\n        break\n      case 'tag':\n        await this.syncTagBatch(userId, entities as DbTag[], progress)\n        break\n      case 'image':\n        await this.syncImageBatch(userId, entities as DbImage[], progress)\n        break\n    }\n  }\n\n  // 同步卡片批次\n  private async syncCardBatch(userId: string, cards: DbCard[], progress: SyncProgress): Promise<void> {\n    const remoteCards = await this.fetchRemoteCards(userId, cards.map(c => c.id!))\n    \n    for (const localCard of cards) {\n      try {\n        const remoteCard = remoteCards.find(r => r.id === localCard.id)\n        \n        if (!remoteCard) {\n          // 本地存在，云端不存在 - 上传\n          await this.uploadCard(userId, localCard)\n          progress.successfulItems++\n        } else {\n          // 云端也存在 - 检查冲突\n          const conflict = await this.detectCardConflict(userId, localCard, remoteCard)\n          \n          if (conflict) {\n            progress.conflicts.push(conflict)\n            progress.conflictedItems++\n            await this.resolveConflict(conflict)\n          } else {\n            // 无冲突，更新本地版本\n            await this.updateCardVersion(localCard.id!, remoteCard.sync_version)\n            progress.successfulItems++\n          }\n        }\n      } catch (error) {\n        console.error('Failed to sync card:', localCard.id, error)\n        progress.failedItems++\n      }\n    }\n  }\n\n  // 同步文件夹批次\n  private async syncFolderBatch(userId: string, folders: DbFolder[], progress: SyncProgress): Promise<void> {\n    const remoteFolders = await this.fetchRemoteFolders(userId, folders.map(f => f.id!))\n    \n    for (const localFolder of folders) {\n      try {\n        const remoteFolder = remoteFolders.find(r => r.id === localFolder.id)\n        \n        if (!remoteFolder) {\n          await this.uploadFolder(userId, localFolder)\n          progress.successfulItems++\n        } else {\n          const conflict = await this.detectFolderConflict(userId, localFolder, remoteFolder)\n          \n          if (conflict) {\n            progress.conflicts.push(conflict)\n            progress.conflictedItems++\n            await this.resolveConflict(conflict)\n          } else {\n            await this.updateFolderVersion(localFolder.id!, remoteFolder.sync_version)\n            progress.successfulItems++\n          }\n        }\n      } catch (error) {\n        console.error('Failed to sync folder:', localFolder.id, error)\n        progress.failedItems++\n      }\n    }\n  }\n\n  // 同步标签批次\n  private async syncTagBatch(userId: string, tags: DbTag[], progress: SyncProgress): Promise<void> {\n    const remoteTags = await this.fetchRemoteTags(userId, tags.map(t => t.id!))\n    \n    for (const localTag of tags) {\n      try {\n        const remoteTag = remoteTags.find(r => r.id === localTag.id)\n        \n        if (!remoteTag) {\n          await this.uploadTag(userId, localTag)\n          progress.successfulItems++\n        } else {\n          const conflict = await this.detectTagConflict(userId, localTag, remoteTag)\n          \n          if (conflict) {\n            progress.conflicts.push(conflict)\n            progress.conflictedItems++\n            await this.resolveConflict(conflict)\n          } else {\n            await this.updateTagVersion(localTag.id!, remoteTag.sync_version)\n            progress.successfulItems++\n          }\n        }\n      } catch (error) {\n        console.error('Failed to sync tag:', localTag.id, error)\n        progress.failedItems++\n      }\n    }\n  }\n\n  // 同步图片批次\n  private async syncImageBatch(userId: string, images: DbImage[], progress: SyncProgress): Promise<void> {\n    const remoteImages = await this.fetchRemoteImages(userId, images.map(i => i.id!))\n    \n    for (const localImage of images) {\n      try {\n        const remoteImage = remoteImages.find(r => r.id === localImage.id)\n        \n        if (!remoteImage) {\n          await this.uploadImage(userId, localImage)\n          progress.successfulItems++\n        } else {\n          const conflict = await this.detectImageConflict(userId, localImage, remoteImage)\n          \n          if (conflict) {\n            progress.conflicts.push(conflict)\n            progress.conflictedItems++\n            await this.resolveConflict(conflict)\n          } else {\n            await this.updateImageVersion(localImage.id!, remoteImage.sync_version)\n            progress.successfulItems++\n          }\n        }\n      } catch (error) {\n        console.error('Failed to sync image:', localImage.id, error)\n        progress.failedItems++\n      }\n    }\n  }\n\n  // ============================================================================\n  // 冲突检测\n  // ============================================================================\n\n  // 检测卡片冲突\n  private async detectCardConflict(\n    userId: string,\n    localCard: DbCard,\n    remoteCard: any\n  ): Promise<SyncConflict | null> {\n    if (!this.config.conflictDetection.enabled) {\n      return null\n    }\n\n    const conflicts: SyncConflict['fieldConflicts'] = []\n    let hasConflict = false\n\n    // 检查版本\n    if (localCard.syncVersion >= remoteCard.sync_version) {\n      return null\n    }\n\n    // 检查字段级别的冲突\n    if (this.config.conflictDetection.fieldGranularity) {\n      // 检查正面内容\n      const localFront = JSON.stringify(localCard.frontContent)\n      const remoteFront = JSON.stringify(remoteCard.front_content)\n      if (localFront !== remoteFront) {\n        conflicts.push({\n          field: 'frontContent',\n          localValue: localCard.frontContent,\n          remoteValue: remoteCard.front_content,\n          conflictReason: 'Content mismatch'\n        })\n        hasConflict = true\n      }\n\n      // 检查背面内容\n      const localBack = JSON.stringify(localCard.backContent)\n      const remoteBack = JSON.stringify(remoteCard.back_content)\n      if (localBack !== remoteBack) {\n        conflicts.push({\n          field: 'backContent',\n          localValue: localCard.backContent,\n          remoteValue: remoteCard.back_content,\n          conflictReason: 'Content mismatch'\n        })\n        hasConflict = true\n      }\n\n      // 检查样式\n      const localStyle = JSON.stringify(localCard.style)\n      const remoteStyle = JSON.stringify(remoteCard.style)\n      if (localStyle !== remoteStyle) {\n        conflicts.push({\n          field: 'style',\n          localValue: localCard.style,\n          remoteValue: remoteCard.style,\n          conflictReason: 'Style mismatch'\n        })\n        hasConflict = true\n      }\n\n      // 检查文件夹\n      if (localCard.folderId !== remoteCard.folder_id) {\n        conflicts.push({\n          field: 'folderId',\n          localValue: localCard.folderId,\n          remoteValue: remoteCard.folder_id,\n          conflictReason: 'Folder assignment mismatch'\n        })\n        hasConflict = true\n      }\n    }\n\n    if (!hasConflict) {\n      return null\n    }\n\n    return {\n      id: crypto.randomUUID(),\n      type: 'concurrent-modification',\n      entityType: 'card',\n      entityId: localCard.id!,\n      userId,\n      localData: localCard,\n      remoteData: remoteCard,\n      fieldConflicts: conflicts,\n      localVersion: localCard.syncVersion,\n      remoteVersion: remoteCard.sync_version,\n      localTimestamp: new Date(localCard.updatedAt),\n      remoteTimestamp: new Date(remoteCard.updated_at),\n      context: {\n        networkInfo: networkMonitorService.getCurrentState(),\n        operationType: 'sync',\n        retryCount: 0\n      },\n      createdAt: new Date()\n    }\n  }\n\n  // 检测文件夹冲突\n  private async detectFolderConflict(\n    userId: string,\n    localFolder: DbFolder,\n    remoteFolder: any\n  ): Promise<SyncConflict | null> {\n    if (!this.config.conflictDetection.enabled) {\n      return null\n    }\n\n    if (localFolder.syncVersion >= remoteFolder.sync_version) {\n      return null\n    }\n\n    const conflicts: SyncConflict['fieldConflicts'] = []\n\n    // 检查名称\n    if (localFolder.name !== remoteFolder.name) {\n      conflicts.push({\n        field: 'name',\n        localValue: localFolder.name,\n        remoteValue: remoteFolder.name,\n        conflictReason: 'Name mismatch'\n      })\n    }\n\n    // 检查父文件夹\n    if (localFolder.parentId !== remoteFolder.parent_id) {\n      conflicts.push({\n        field: 'parentId',\n        localValue: localFolder.parentId,\n        remoteValue: remoteFolder.parent_id,\n        conflictReason: 'Parent folder mismatch'\n      })\n    }\n\n    if (conflicts.length === 0) {\n      return null\n    }\n\n    return {\n      id: crypto.randomUUID(),\n      type: 'concurrent-modification',\n      entityType: 'folder',\n      entityId: localFolder.id!,\n      userId,\n      localData: localFolder,\n      remoteData: remoteFolder,\n      fieldConflicts: conflicts,\n      localVersion: localFolder.syncVersion,\n      remoteVersion: remoteFolder.sync_version,\n      localTimestamp: new Date(localFolder.updatedAt),\n      remoteTimestamp: new Date(remoteFolder.updated_at),\n      context: {\n        networkInfo: networkMonitorService.getCurrentState(),\n        operationType: 'sync',\n        retryCount: 0\n      },\n      createdAt: new Date()\n    }\n  }\n\n  // 检测标签冲突\n  private async detectTagConflict(\n    userId: string,\n    localTag: DbTag,\n    remoteTag: any\n  ): Promise<SyncConflict | null> {\n    if (!this.config.conflictDetection.enabled) {\n      return null\n    }\n\n    if (localTag.syncVersion >= remoteTag.sync_version) {\n      return null\n    }\n\n    const conflicts: SyncConflict['fieldConflicts'] = []\n\n    // 检查名称\n    if (localTag.name !== remoteTag.name) {\n      conflicts.push({\n        field: 'name',\n        localValue: localTag.name,\n        remoteValue: remoteTag.name,\n        conflictReason: 'Name mismatch'\n      })\n    }\n\n    // 检查颜色\n    if (localTag.color !== remoteTag.color) {\n      conflicts.push({\n        field: 'color',\n        localValue: localTag.color,\n        remoteValue: remoteTag.color,\n        conflictReason: 'Color mismatch'\n      })\n    }\n\n    if (conflicts.length === 0) {\n      return null\n    }\n\n    return {\n      id: crypto.randomUUID(),\n      type: 'concurrent-modification',\n      entityType: 'tag',\n      entityId: localTag.id!,\n      userId,\n      localData: localTag,\n      remoteData: remoteTag,\n      fieldConflicts: conflicts,\n      localVersion: localTag.syncVersion,\n      remoteVersion: remoteTag.sync_version,\n      localTimestamp: new Date(localTag.updatedAt),\n      remoteTimestamp: new Date(remoteTag.updated_at),\n      context: {\n        networkInfo: networkMonitorService.getCurrentState(),\n        operationType: 'sync',\n        retryCount: 0\n      },\n      createdAt: new Date()\n    }\n  }\n\n  // 检测图片冲突\n  private async detectImageConflict(\n    userId: string,\n    localImage: DbImage,\n    remoteImage: any\n  ): Promise<SyncConflict | null> {\n    if (!this.config.conflictDetection.enabled) {\n      return null\n    }\n\n    if (localImage.syncVersion >= remoteImage.sync_version) {\n      return null\n    }\n\n    const conflicts: SyncConflict['fieldConflicts'] = []\n\n    // 检查文件路径\n    if (localImage.filePath !== remoteImage.file_path) {\n      conflicts.push({\n        field: 'filePath',\n        localValue: localImage.filePath,\n        remoteValue: remoteImage.file_path,\n        conflictReason: 'File path mismatch'\n      })\n    }\n\n    // 检查云URL\n    if (localImage.cloudUrl !== remoteImage.cloud_url) {\n      conflicts.push({\n        field: 'cloudUrl',\n        localValue: localImage.cloudUrl,\n        remoteValue: remoteImage.cloud_url,\n        conflictReason: 'Cloud URL mismatch'\n      })\n    }\n\n    if (conflicts.length === 0) {\n      return null\n    }\n\n    return {\n      id: crypto.randomUUID(),\n      type: 'concurrent-modification',\n      entityType: 'image',\n      entityId: localImage.id!,\n      userId,\n      localData: localImage,\n      remoteData: remoteImage,\n      fieldConflicts: conflicts,\n      localVersion: localImage.syncVersion,\n      remoteVersion: remoteImage.sync_version,\n      localTimestamp: new Date(localImage.updatedAt),\n      remoteTimestamp: new Date(remoteImage.updated_at),\n      context: {\n        networkInfo: networkMonitorService.getCurrentState(),\n        operationType: 'sync',\n        retryCount: 0\n      },\n      createdAt: new Date()\n    }\n  }\n\n  // ============================================================================\n  // 冲突解决\n  // ============================================================================\n\n  // 解决冲突\n  private async resolveConflict(conflict: SyncConflict): Promise<void> {\n    try {\n      // 获取解决策略\n      const strategy = this.getResolutionStrategy(conflict)\n      \n      // 获取解决器\n      const resolver = this.conflictResolvers.get(strategy)\n      if (!resolver) {\n        throw new Error(`No resolver found for strategy: ${strategy}`)\n      }\n\n      // 解决冲突\n      const resolvedData = await resolver(conflict)\n      \n      // 更新冲突记录\n      conflict.resolution = strategy\n      conflict.resolvedData = resolvedData\n      conflict.resolvedAt = new Date()\n      conflict.resolvedBy = 'system'\n\n      // 应用解决结果\n      await this.applyConflictResolution(conflict)\n\n      // 通知监听器\n      this.notifyListeners('conflictResolved', conflict)\n    } catch (error) {\n      console.error('Failed to resolve conflict:', conflict.id, error)\n      \n      // 如果自动解决失败，标记为需要手动解决\n      conflict.resolution = 'manual-resolution'\n      conflict.resolvedBy = 'system'\n      conflict.resolvedAt = new Date()\n    }\n  }\n\n  // 获取解决策略\n  private getResolutionStrategy(conflict: SyncConflict): ResolutionStrategy {\n    // 首先按实体类型\n    const entityStrategy = this.config.entityStrategies[conflict.entityType]\n    if (entityStrategy !== this.config.defaultResolution) {\n      return entityStrategy\n    }\n\n    // 然后按冲突类型\n    const typeStrategy = this.config.conflictTypeStrategies[conflict.type]\n    if (typeStrategy !== this.config.defaultResolution) {\n      return typeStrategy\n    }\n\n    // 最后使用默认策略\n    return this.config.defaultResolution\n  }\n\n  // 应用冲突解决结果\n  private async applyConflictResolution(conflict: SyncConflict): Promise<void> {\n    if (!conflict.resolvedData) {\n      return\n    }\n\n    switch (conflict.entityType) {\n      case 'card':\n        await db.cards.update(conflict.entityId, {\n          ...conflict.resolvedData,\n          syncVersion: Math.max(conflict.localVersion, conflict.remoteVersion) + 1,\n          pendingSync: false\n        })\n        break\n        \n      case 'folder':\n        await db.folders.update(conflict.entityId, {\n          ...conflict.resolvedData,\n          syncVersion: Math.max(conflict.localVersion, conflict.remoteVersion) + 1,\n          pendingSync: false\n        })\n        break\n        \n      case 'tag':\n        await db.tags.update(conflict.entityId, {\n          ...conflict.resolvedData,\n          syncVersion: Math.max(conflict.localVersion, conflict.remoteVersion) + 1,\n          pendingSync: false\n        })\n        break\n        \n      case 'image':\n        await db.images.update(conflict.entityId, {\n          ...conflict.resolvedData,\n          syncVersion: Math.max(conflict.localVersion, conflict.remoteVersion) + 1,\n          pendingSync: false\n        })\n        break\n    }\n  }\n\n  // ============================================================================\n  // 冲突解决器实现\n  // ============================================================================\n\n  // 本地数据获胜\n  private async resolveLocalWins(conflict: SyncConflict): Promise<any> {\n    return conflict.localData\n  }\n\n  // 远程数据获胜\n  private async resolveRemoteWins(conflict: SyncConflict): Promise<any> {\n    return conflict.remoteData\n  }\n\n  // 字段级别合并\n  private async resolveMergeFields(conflict: SyncConflict): Promise<any> {\n    const merged = { ...conflict.remoteData }\n\n    // 对于每个冲突字段，智能选择保留哪个值\n    for (const fieldConflict of conflict.fieldConflicts) {\n      const field = fieldConflict.field\n      \n      // 基于时间戳的简单合并策略\n      const localTime = new Date(conflict.localTimestamp).getTime()\n      const remoteTime = new Date(conflict.remoteTimestamp).getTime()\n      \n      if (localTime > remoteTime) {\n        merged[field] = fieldConflict.localValue\n      } else {\n        merged[field] = fieldConflict.remoteValue\n      }\n    }\n\n    return merged\n  }\n\n  // 基于时间戳\n  private async resolveTimestampBased(conflict: SyncConflict): Promise<any> {\n    const localTime = new Date(conflict.localTimestamp).getTime()\n    const remoteTime = new Date(conflict.remoteTimestamp).getTime()\n    \n    return localTime > remoteTime ? conflict.localData : conflict.remoteData\n  }\n\n  // 基于操作类型\n  private async resolveOperationBased(conflict: SyncConflict): Promise<any> {\n    // 根据操作类型选择解决策略\n    const operationType = conflict.context.operationType\n    \n    switch (operationType) {\n      case 'delete':\n        // 删除操作通常优先\n        return conflict.localData\n      case 'create':\n        // 创建操作保留创建的数据\n        return conflict.localData\n      default:\n        // 其他操作使用时间戳\n        return this.resolveTimestampBased(conflict)\n    }\n  }\n\n  // ============================================================================\n  // 远程数据获取\n  // ============================================================================\n\n  // 获取远程增量数据\n  private async fetchRemoteDelta(\n    userId: string,\n    lastSyncTime: Date,\n    entityTypes: ('card' | 'folder' | 'tag' | 'image')[]\n  ): Promise<{\n    cards: any[]\n    folders: any[]\n    tags: any[]\n    images: any[]\n  }> {\n    const results = await Promise.allSettled([\n      entityTypes.includes('card') ? this.fetchRemoteCardsDelta(userId, lastSyncTime) : Promise.resolve([]),\n      entityTypes.includes('folder') ? this.fetchRemoteFoldersDelta(userId, lastSyncTime) : Promise.resolve([]),\n      entityTypes.includes('tag') ? this.fetchRemoteTagsDelta(userId, lastSyncTime) : Promise.resolve([]),\n      entityTypes.includes('image') ? this.fetchRemoteImagesDelta(userId, lastSyncTime) : Promise.resolve([])\n    ])\n\n    return {\n      cards: results[0].status === 'fulfilled' ? results[0].value : [],\n      folders: results[1].status === 'fulfilled' ? results[1].value : [],\n      tags: results[2].status === 'fulfilled' ? results[2].value : [],\n      images: results[3].status === 'fulfilled' ? results[3].value : []\n    }\n  }\n\n  // 获取远程卡片增量\n  private async fetchRemoteCardsDelta(userId: string, lastSyncTime: Date): Promise<any[]> {\n    const { data, error } = await supabase\n      .from('cards')\n      .select('*')\n      .eq('user_id', userId)\n      .gte('updated_at', lastSyncTime.toISOString())\n\n    if (error) throw error\n    return data || []\n  }\n\n  // 获取远程文件夹增量\n  private async fetchRemoteFoldersDelta(userId: string, lastSyncTime: Date): Promise<any[]> {\n    const { data, error } = await supabase\n      .from('folders')\n      .select('*')\n      .eq('user_id', userId)\n      .gte('updated_at', lastSyncTime.toISOString())\n\n    if (error) throw error\n    return data || []\n  }\n\n  // 获取远程标签增量\n  private async fetchRemoteTagsDelta(userId: string, lastSyncTime: Date): Promise<any[]> {\n    const { data, error } = await supabase\n      .from('tags')\n      .select('*')\n      .eq('user_id', userId)\n      .gte('updated_at', lastSyncTime.toISOString())\n\n    if (error) throw error\n    return data || []\n  }\n\n  // 获取远程图片增量\n  private async fetchRemoteImagesDelta(userId: string, lastSyncTime: Date): Promise<any[]> {\n    const { data, error } = await supabase\n      .from('images')\n      .select('*')\n      .eq('user_id', userId)\n      .gte('updated_at', lastSyncTime.toISOString())\n\n    if (error) throw error\n    return data || []\n  }\n\n  // 获取远程卡片\n  private async fetchRemoteCards(userId: string, cardIds: string[]): Promise<any[]> {\n    const { data, error } = await supabase\n      .from('cards')\n      .select('*')\n      .eq('user_id', userId)\n      .in('id', cardIds)\n\n    if (error) throw error\n    return data || []\n  }\n\n  // 获取远程文件夹\n  private async fetchRemoteFolders(userId: string, folderIds: string[]): Promise<any[]> {\n    const { data, error } = await supabase\n      .from('folders')\n      .select('*')\n      .eq('user_id', userId)\n      .in('id', folderIds)\n\n    if (error) throw error\n    return data || []\n  }\n\n  // 获取远程标签\n  private async fetchRemoteTags(userId: string, tagIds: string[]): Promise<any[]> {\n    const { data, error } = await supabase\n      .from('tags')\n      .select('*')\n      .eq('user_id', userId)\n      .in('id', tagIds)\n\n    if (error) throw error\n    return data || []\n  }\n\n  // 获取远程图片\n  private async fetchRemoteImages(userId: string, imageIds: string[]): Promise<any[]> {\n    const { data, error } = await supabase\n      .from('images')\n      .select('*')\n      .eq('user_id', userId)\n      .in('id', imageIds)\n\n    if (error) throw error\n    return data || []\n  }\n\n  // ============================================================================\n  // 数据上传方法\n  // ============================================================================\n\n  // 上传卡片\n  private async uploadCard(userId: string, card: DbCard): Promise<void> {\n    const { error } = await supabase\n      .from('cards')\n      .upsert({\n        id: card.id,\n        user_id: userId,\n        front_content: card.frontContent,\n        back_content: card.backContent,\n        style: card.style,\n        folder_id: card.folderId,\n        updated_at: new Date().toISOString(),\n        sync_version: card.syncVersion + 1\n      })\n\n    if (error) throw error\n  }\n\n  // 上传文件夹\n  private async uploadFolder(userId: string, folder: DbFolder): Promise<void> {\n    const { error } = await supabase\n      .from('folders')\n      .upsert({\n        id: folder.id,\n        user_id: userId,\n        name: folder.name,\n        parent_id: folder.parentId,\n        updated_at: new Date().toISOString(),\n        sync_version: folder.syncVersion + 1\n      })\n\n    if (error) throw error\n  }\n\n  // 上传标签\n  private async uploadTag(userId: string, tag: DbTag): Promise<void> {\n    const { error } = await supabase\n      .from('tags')\n      .upsert({\n        id: tag.id,\n        user_id: userId,\n        name: tag.name,\n        color: tag.color,\n        updated_at: new Date().toISOString(),\n        sync_version: tag.syncVersion + 1\n      })\n\n    if (error) throw error\n  }\n\n  // 上传图片\n  private async uploadImage(userId: string, image: DbImage): Promise<void> {\n    const { error } = await supabase\n      .from('images')\n      .upsert({\n        id: image.id,\n        user_id: userId,\n        card_id: image.cardId,\n        file_name: image.fileName,\n        file_path: image.filePath,\n        cloud_url: image.cloudUrl,\n        metadata: image.metadata,\n        updated_at: new Date().toISOString(),\n        sync_version: image.syncVersion + 1\n      })\n\n    if (error) throw error\n  }\n\n  // ============================================================================\n  // 版本更新方法\n  // ============================================================================\n\n  // 更新卡片版本\n  private async updateCardVersion(cardId: string, version: number): Promise<void> {\n    await db.cards.update(cardId, {\n      syncVersion: version,\n      pendingSync: false\n    })\n  }\n\n  // 更新文件夹版本\n  private async updateFolderVersion(folderId: string, version: number): Promise<void> {\n    await db.folders.update(folderId, {\n      syncVersion: version,\n      pendingSync: false\n    })\n  }\n\n  // 更新标签版本\n  private async updateTagVersion(tagId: string, version: number): Promise<void> {\n    await db.tags.update(tagId, {\n      syncVersion: version,\n      pendingSync: false\n    })\n  }\n\n  // 更新图片版本\n  private async updateImageVersion(imageId: string, version: number): Promise<void> {\n    await db.images.update(imageId, {\n      syncVersion: version,\n      pendingSync: false\n    })\n  }\n\n  // ============================================================================\n  // 待处理操作同步\n  // ============================================================================\n\n  // 同步待处理操作\n  private async syncPendingOperations(userId: string, progress: SyncProgress): Promise<void> {\n    const pendingOperations = await localOperationService.getPendingOperations(100)\n    \n    for (const operation of pendingOperations) {\n      if (operation.userId !== userId) continue\n      \n      try {\n        await this.processPendingOperation(operation)\n        progress.successfulItems++\n      } catch (error) {\n        console.error('Failed to process pending operation:', operation.id, error)\n        progress.failedItems++\n      }\n      \n      this.updateProgress(progress, 1)\n    }\n  }\n\n  // 处理待处理操作\n  private async processPendingOperation(operation: LocalSyncOperation): Promise<void> {\n    switch (operation.entityType) {\n      case 'card':\n        await this.processCardOperation(operation)\n        break\n      case 'folder':\n        await this.processFolderOperation(operation)\n        break\n      case 'tag':\n        await this.processTagOperation(operation)\n        break\n      case 'image':\n        await this.processImageOperation(operation)\n        break\n    }\n    \n    // 标记操作为完成\n    await localOperationService.markOperationCompleted(operation.id)\n  }\n\n  // 处理卡片操作\n  private async processCardOperation(operation: LocalSyncOperation): Promise<void> {\n    const card = operation.data as DbCard\n    \n    switch (operation.operationType) {\n      case 'create':\n      case 'update':\n        await this.uploadCard(operation.userId!, card)\n        break\n      case 'delete':\n        await supabase\n          .from('cards')\n          .update({ is_deleted: true })\n          .eq('id', card.id!)\n          .eq('user_id', operation.userId!)\n        break\n    }\n  }\n\n  // 处理文件夹操作\n  private async processFolderOperation(operation: LocalSyncOperation): Promise<void> {\n    const folder = operation.data as DbFolder\n    \n    switch (operation.operationType) {\n      case 'create':\n      case 'update':\n        await this.uploadFolder(operation.userId!, folder)\n        break\n      case 'delete':\n        await supabase\n          .from('folders')\n          .update({ is_deleted: true })\n          .eq('id', folder.id!)\n          .eq('user_id', operation.userId!)\n        break\n    }\n  }\n\n  // 处理标签操作\n  private async processTagOperation(operation: LocalSyncOperation): Promise<void> {\n    const tag = operation.data as DbTag\n    \n    switch (operation.operationType) {\n      case 'create':\n      case 'update':\n        await this.uploadTag(operation.userId!, tag)\n        break\n      case 'delete':\n        await supabase\n          .from('tags')\n          .update({ is_deleted: true })\n          .eq('id', tag.id!)\n          .eq('user_id', operation.userId!)\n        break\n    }\n  }\n\n  // 处理图片操作\n  private async processImageOperation(operation: LocalSyncOperation): Promise<void> {\n    const image = operation.data as DbImage\n    \n    switch (operation.operationType) {\n      case 'create':\n      case 'update':\n        await this.uploadImage(operation.userId!, image)\n        break\n      case 'delete':\n        await supabase\n          .from('images')\n          .update({ is_deleted: true })\n          .eq('id', image.id!)\n          .eq('user_id', operation.userId!)\n        break\n    }\n  }\n\n  // ============================================================================\n  // 处理远程增量数据\n  // ============================================================================\n\n  // 处理远程增量数据\n  private async processRemoteDelta<T>(\n    userId: string,\n    entityType: 'card' | 'folder' | 'tag' | 'image',\n    remoteData: any[],\n    progress: SyncProgress\n  ): Promise<void> {\n    for (const remoteItem of remoteData) {\n      try {\n        await this.processRemoteItem(userId, entityType, remoteItem)\n        progress.successfulItems++\n      } catch (error) {\n        console.error(`Failed to process remote ${entityType}:`, remoteItem.id, error)\n        progress.failedItems++\n      }\n      \n      this.updateProgress(progress, 1)\n    }\n  }\n\n  // 处理远程项目\n  private async processRemoteItem(\n    userId: string,\n    entityType: 'card' | 'folder' | 'tag' | 'image',\n    remoteItem: any\n  ): Promise<void> {\n    // 检查本地是否存在\n    let localItem: any = null\n    \n    switch (entityType) {\n      case 'card':\n        localItem = await db.cards.get(remoteItem.id)\n        break\n      case 'folder':\n        localItem = await db.folders.get(remoteItem.id)\n        break\n      case 'tag':\n        localItem = await db.tags.get(remoteItem.id)\n        break\n      case 'image':\n        localItem = await db.images.get(remoteItem.id)\n        break\n    }\n\n    if (!localItem) {\n      // 本地不存在，直接插入\n      await this.insertRemoteItem(entityType, remoteItem)\n    } else {\n      // 本地存在，检查是否需要更新\n      if (remoteItem.sync_version > localItem.syncVersion) {\n        await this.updateLocalItem(entityType, remoteItem)\n      }\n    }\n  }\n\n  // 插入远程项目\n  private async insertRemoteItem(\n    entityType: 'card' | 'folder' | 'tag' | 'image',\n    remoteItem: any\n  ): Promise<void> {\n    const convertedItem = this.convertRemoteToLocal(entityType, remoteItem)\n    \n    switch (entityType) {\n      case 'card':\n        await db.cards.add(convertedItem)\n        break\n      case 'folder':\n        await db.folders.add(convertedItem)\n        break\n      case 'tag':\n        await db.tags.add(convertedItem)\n        break\n      case 'image':\n        await db.images.add(convertedItem)\n        break\n    }\n  }\n\n  // 更新本地项目\n  private async updateLocalItem(\n    entityType: 'card' | 'folder' | 'tag' | 'image',\n    remoteItem: any\n  ): Promise<void> {\n    const convertedItem = this.convertRemoteToLocal(entityType, remoteItem)\n    const { id, ...updateData } = convertedItem\n    \n    switch (entityType) {\n      case 'card':\n        await db.cards.update(id, updateData)\n        break\n      case 'folder':\n        await db.folders.update(id, updateData)\n        break\n      case 'tag':\n        await db.tags.update(id, updateData)\n        break\n      case 'image':\n        await db.images.update(id, updateData)\n        break\n    }\n  }\n\n  // 转换远程数据为本地格式\n  private convertRemoteToLocal(\n    entityType: 'card' | 'folder' | 'tag' | 'image',\n    remoteItem: any\n  ): any {\n    switch (entityType) {\n      case 'card':\n        return {\n          id: remoteItem.id,\n          userId: remoteItem.user_id,\n          frontContent: remoteItem.front_content,\n          backContent: remoteItem.back_content,\n          style: remoteItem.style,\n          folderId: remoteItem.folder_id,\n          isFlipped: false,\n          createdAt: new Date(remoteItem.created_at),\n          updatedAt: new Date(remoteItem.updated_at),\n          syncVersion: remoteItem.sync_version,\n          pendingSync: false\n        }\n        \n      case 'folder':\n        return {\n          id: remoteItem.id,\n          userId: remoteItem.user_id,\n          name: remoteItem.name,\n          color: '#3b82f6',\n          icon: 'Folder',\n          cardIds: [],\n          parentId: remoteItem.parent_id,\n          isExpanded: true,\n          createdAt: new Date(remoteItem.created_at),\n          updatedAt: new Date(remoteItem.updated_at),\n          syncVersion: remoteItem.sync_version,\n          pendingSync: false\n        }\n        \n      case 'tag':\n        return {\n          id: remoteItem.id,\n          userId: remoteItem.user_id,\n          name: remoteItem.name,\n          color: remoteItem.color,\n          count: 0,\n          createdAt: new Date(remoteItem.created_at),\n          updatedAt: new Date(remoteItem.updated_at),\n          syncVersion: remoteItem.sync_version,\n          pendingSync: false\n        }\n        \n      case 'image':\n        return {\n          id: remoteItem.id,\n          cardId: remoteItem.card_id,\n          userId: remoteItem.user_id,\n          fileName: remoteItem.file_name,\n          filePath: remoteItem.file_path,\n          cloudUrl: remoteItem.cloud_url,\n          metadata: remoteItem.metadata,\n          storageMode: 'cloud' as const,\n          createdAt: new Date(remoteItem.created_at),\n          updatedAt: new Date(remoteItem.updated_at),\n          syncVersion: remoteItem.sync_version,\n          pendingSync: false\n        }\n    }\n  }\n\n  // ============================================================================\n  // 工具方法\n  // ============================================================================\n\n  // 获取自适应批次大小\n  private getAdaptiveBatchSize(): number {\n    if (!this.config.performance.adaptiveBatchSize) {\n      return this.config.incremental.batchSize\n    }\n\n    const networkStrategy = getNetworkStrategy()\n    return networkStrategy.batchSize\n  }\n\n  // 更新进度\n  private updateProgress(progress: SyncProgress, processedItems: number): void {\n    progress.processedItems += processedItems\n    \n    // 计算预计剩余时间\n    if (progress.processedItems > 0) {\n      const elapsed = Date.now() - progress.performance.startTime.getTime()\n      const averageTimePerItem = elapsed / progress.processedItems\n      const remainingItems = progress.totalItems - progress.processedItems\n      progress.performance.estimatedTimeRemaining = remainingItems * averageTimePerItem\n    }\n\n    // 通知进度更新\n    this.notifyListeners('syncProgress', progress)\n  }\n\n  // 处理远程增量数据\n  private async processRemoteDelta(\n    userId: string,\n    entityType: 'card' | 'folder' | 'tag' | 'image',\n    remoteData: any[],\n    progress: SyncProgress\n  ): Promise<void> {\n    for (const remoteItem of remoteData) {\n      try {\n        await this.processRemoteItem(userId, entityType, remoteItem)\n        progress.successfulItems++\n      } catch (error) {\n        console.error(`Failed to process remote ${entityType}:`, remoteItem.id, error)\n        progress.failedItems++\n      }\n      \n      this.updateProgress(progress, 1)\n    }\n  }\n\n  // ============================================================================\n  // 事件监听器管理\n  // ============================================================================\n\n  // 添加事件监听器\n  addEventListener<K extends keyof typeof this.listeners>(\n    event: K,\n    callback: NonNullable<typeof this.listeners[K]>\n  ): void {\n    this.listeners[event] = callback as any\n  }\n\n  // 移除事件监听器\n  removeEventListener<K extends keyof typeof this.listeners>(\n    event: K\n  ): void {\n    delete this.listeners[event]\n  }\n\n  // 通知监听器\n  private notifyListeners<K extends keyof typeof this.listeners>(\n    event: K,\n    data: Parameters<NonNullable<typeof this.listeners[K]>>[0]\n  ): void {\n    const listener = this.listeners[event]\n    if (listener) {\n      try {\n        listener(data)\n      } catch (error) {\n        console.error(`Error in ${event} listener:`, error)\n      }\n    }\n  }\n\n  // ============================================================================\n  // 公共工具方法\n  // ============================================================================\n\n  // 手动解决冲突\n  async manuallyResolveConflict(\n    conflictId: string,\n    resolution: ResolutionStrategy,\n    customData?: any\n  ): Promise<void> {\n    // 这里应该从存储中获取冲突记录\n    // 暂时返回空实现\n    console.warn('Manual conflict resolution not fully implemented')\n  }\n\n  // 获取冲突历史\n  async getConflictHistory(\n    userId: string,\n    options?: {\n      limit?: number\n      entityType?: 'card' | 'folder' | 'tag' | 'image'\n      startDate?: Date\n      endDate?: Date\n    }\n  ): Promise<SyncConflict[]> {\n    // 这里应该从数据库或IndexedDB中获取冲突历史\n    // 暂时返回空数组\n    return []\n  }\n\n  // 获取同步统计\n  async getSyncStats(userId: string): Promise<{\n    totalSyncs: number\n    successfulSyncs: number\n    failedSyncs: number\n    averageSyncTime: number\n    lastSyncTime?: Date\n    conflictsResolved: number\n    conflictsPending: number\n  }> {\n    // 这里应该从数据库中获取同步统计\n    // 暂时返回默认值\n    return {\n      totalSyncs: 0,\n      successfulSyncs: 0,\n      failedSyncs: 0,\n      averageSyncTime: 0,\n      conflictsResolved: 0,\n      conflictsPending: 0\n    }\n  }\n}\n\n// 导出单例实例\nexport const syncStrategyService = new SyncStrategyService()"],"version":3}
{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\tests\\integration\\sync\\local-operation-unified-sync-integration.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\tests\\integration\\sync\\local-operation-unified-sync-integration.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, jest } from '@jest/globals'\r\nimport { unifiedSyncService } from '@/services/unified-sync-service'\r\nimport { localOperationService } from '@/services/local-operation'\r\nimport type { LocalSyncOperation } from '@/services/local-operation'\r\n\r\n// 模拟数据库\r\njest.mock('@/services/database-unified', () => ({\r\n  db: {\r\n    syncQueue: {\r\n      where: jest.fn().mockReturnThis(),\r\n      equals: jest.fn().mockReturnThis(),\r\n      orderBy: jest.fn().mockReturnThis(),\r\n      reverse: jest.fn().mockReturnThis(),\r\n      limit: jest.fn().mockReturnThis(),\r\n      toArray: jest.fn(),\r\n      update: jest.fn(),\r\n      transaction: jest.fn(),\r\n      bulkDelete: jest.fn()\r\n    },\r\n    cards: {\r\n      add: jest.fn(),\r\n      update: jest.fn(),\r\n      delete: jest.fn()\r\n    },\r\n    on: jest.fn()\r\n  }\r\n}))\r\n\r\n// 模拟Supabase\r\njest.mock('@/services/supabase', () => ({\r\n  supabase: {\r\n    from: jest.fn().mockReturnThis(),\r\n    select: jest.fn().mockReturnThis(),\r\n    eq: jest.fn().mockReturnThis(),\r\n    insert: jest.fn().mockReturnThis(),\r\n    update: jest.fn().mockReturnThis(),\r\n    delete: jest.fn().mockReturnThis()\r\n  }\r\n}))\r\n\r\ndescribe('LocalOperationService与UnifiedSyncService集成验证', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  describe('集成架构验证', () => {\r\n    it('应该正确导入LocalOperationService', () => {\r\n      // 验证UnifiedSyncService正确导入了LocalOperationService\r\n      expect(unifiedSyncService).toBeDefined()\r\n      expect(localOperationService).toBeDefined()\r\n    })\r\n\r\n    it('应该正确识别LocalSyncOperation类型', () => {\r\n      // 验证类型定义的一致性\r\n      const mockOperation: LocalSyncOperation = {\r\n        id: 'test-op-1',\r\n        type: 'create',\r\n        table: 'cards',\r\n        data: { frontContent: 'Test', backContent: 'Answer' },\r\n        localId: 'card-1',\r\n        timestamp: Date.now(),\r\n        retryCount: 0,\r\n        status: 'pending',\r\n        localVersion: 1,\r\n        priority: 'normal',\r\n        dependencies: [],\r\n        networkInfo: {\r\n          isOnline: true,\r\n          connectionType: 'wifi',\r\n          bandwidth: 'high'\r\n        }\r\n      }\r\n      \r\n      expect(mockOperation).toBeDefined()\r\n      expect(mockOperation.type).toBe('create')\r\n      expect(mockOperation.table).toBe('cards')\r\n    })\r\n  })\r\n\r\n  describe('数据流验证', () => {\r\n    it('应该正确从LocalOperationService获取待处理操作', async () => {\r\n      const mockOperations: LocalSyncOperation[] = [\r\n        {\r\n          id: 'op-1',\r\n          type: 'create',\r\n          table: 'cards',\r\n          data: { frontContent: 'Q1', backContent: 'A1' },\r\n          localId: 'card-1',\r\n          timestamp: Date.now(),\r\n          retryCount: 0,\r\n          status: 'pending',\r\n          localVersion: 1,\r\n          priority: 'normal',\r\n          dependencies: [],\r\n          networkInfo: { isOnline: true, connectionType: 'wifi', bandwidth: 'high' }\r\n        }\r\n      ]\r\n\r\n      // 模拟getPendingSyncOperations返回值\r\n      const mockDb = require('@/services/database').db\r\n      mockDb.syncQueue.toArray.mockResolvedValue(mockOperations)\r\n\r\n      // 验证方法调用\r\n      const result = await localOperationService.getPendingSyncOperations()\r\n      \r\n      expect(result).toEqual(mockOperations)\r\n      expect(mockDb.syncQueue.where).toHaveBeenCalledWith('status')\r\n      expect(mockDb.syncQueue.equals).toHaveBeenCalledWith('pending')\r\n      expect(mockDb.syncQueue.orderBy).toHaveBeenCalledWith('priority')\r\n      expect(mockDb.syncQueue.reverse).toHaveBeenCalled()\r\n      expect(mockDb.syncQueue.limit).toHaveBeenCalledWith(100)\r\n    })\r\n\r\n    it('应该正确更新操作状态', async () => {\r\n      const mockResults = [\r\n        { operationId: 'op-1', success: true },\r\n        { operationId: 'op-2', success: false, error: 'Network error' }\r\n      ]\r\n\r\n      const mockDb = require('@/services/database').db\r\n      mockDb.syncQueue.update.mockResolvedValue(1)\r\n\r\n      await localOperationService.updateOperationStatuses(mockResults)\r\n\r\n      expect(mockDb.syncQueue.transaction).toHaveBeenCalledWith(\r\n        'rw',\r\n        [mockDb.syncQueue],\r\n        expect.any(Function)\r\n      )\r\n      \r\n      // 验证更新调用\r\n      expect(mockDb.syncQueue.update).toHaveBeenCalledTimes(2)\r\n      expect(mockDb.syncQueue.update).toHaveBeenCalledWith('op-1', {\r\n        status: 'completed'\r\n      })\r\n      expect(mockDb.syncQueue.update).toHaveBeenCalledWith('op-2', {\r\n        status: 'failed',\r\n        lastError: 'Network error'\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('异步同步机制验证', () => {\r\n    it('应该正确处理本地同步队列', async () => {\r\n      const mockOperations: LocalSyncOperation[] = [\r\n        {\r\n          id: 'op-1',\r\n          type: 'create',\r\n          table: 'cards',\r\n          data: { frontContent: 'Q1', backContent: 'A1' },\r\n          localId: 'card-1',\r\n          timestamp: Date.now(),\r\n          retryCount: 0,\r\n          status: 'pending',\r\n          localVersion: 1,\r\n          priority: 'normal',\r\n          dependencies: [],\r\n          networkInfo: { isOnline: true, connectionType: 'wifi', bandwidth: 'high' }\r\n        }\r\n      ]\r\n\r\n      // 模拟LocalOperationService方法\r\n      jest.spyOn(localOperationService, 'getPendingSyncOperations')\r\n        .mockResolvedValue(mockOperations)\r\n      \r\n      jest.spyOn(localOperationService, 'updateOperationStatuses')\r\n        .mockResolvedValue()\r\n\r\n      // 设置UnifiedSyncService为在线状态\r\n      Object.defineProperty(unifiedSyncService, 'isOnline', { value: true })\r\n      Object.defineProperty(unifiedSyncService, 'syncInProgress', { value: false })\r\n\r\n      // 访问私有方法进行测试\r\n      const processLocalSyncQueue = (unifiedSyncService as any).processLocalSyncQueue.bind(unifiedSyncService)\r\n      await processLocalSyncQueue()\r\n\r\n      // 验证调用\r\n      expect(localOperationService.getPendingSyncOperations).toHaveBeenCalled()\r\n      expect(localOperationService.updateOperationStatuses).toHaveBeenCalled()\r\n    })\r\n\r\n    it('应该在离线时跳过同步处理', async () => {\r\n      // 设置UnifiedSyncService为离线状态\r\n      Object.defineProperty(unifiedSyncService, 'isOnline', { value: false })\r\n\r\n      // 访问私有方法进行测试\r\n      const processLocalSyncQueue = (unifiedSyncService as any).processLocalSyncQueue.bind(unifiedSyncService)\r\n      await processLocalSyncQueue()\r\n\r\n      // 验证没有调用LocalOperationService\r\n      expect(localOperationService.getPendingSyncOperations).not.toHaveBeenCalled()\r\n      expect(localOperationService.updateOperationStatuses).not.toHaveBeenCalled()\r\n    })\r\n  })\r\n\r\n  describe('网络状态处理验证', () => {\r\n    it('应该正确响应网络状态变化', async () => {\r\n      // 模拟网络在线\r\n      Object.defineProperty(navigator, 'onLine', { value: true, writable: true })\r\n      \r\n      // 触发网络事件\r\n      const onlineEvent = new Event('online')\r\n      window.dispatchEvent(onlineEvent)\r\n\r\n      // 验证UnifiedSyncService能够检测到网络状态\r\n      expect(navigator.onLine).toBe(true)\r\n    })\r\n\r\n    it('应该在同步进行中时避免重复处理', async () => {\r\n      // 设置UnifiedSyncService为同步进行中状态\r\n      Object.defineProperty(unifiedSyncService, 'isOnline', { value: true })\r\n      Object.defineProperty(unifiedSyncService, 'syncInProgress', { value: true })\r\n\r\n      // 尝试触发本地同步处理\r\n      await unifiedSyncService.triggerLocalSyncProcessing()\r\n\r\n      // 验证没有调用LocalOperationService\r\n      expect(localOperationService.getPendingSyncOperations).not.toHaveBeenCalled()\r\n    })\r\n  })\r\n\r\n  describe('错误处理验证', () => {\r\n    it('应该正确处理获取待处理操作的错误', async () => {\r\n      const mockDb = require('@/services/database').db\r\n      mockDb.syncQueue.toArray.mockRejectedValue(new Error('Database error'))\r\n\r\n      const result = await localOperationService.getPendingSyncOperations()\r\n\r\n      expect(result).toEqual([])\r\n      expect(console.error).toHaveBeenCalledWith(\r\n        'Failed to get pending sync operations:',\r\n        expect.any(Error)\r\n      )\r\n    })\r\n\r\n    it('应该正确处理更新操作状态的错误', async () => {\r\n      const mockResults = [\r\n        { operationId: 'op-1', success: true }\r\n      ]\r\n\r\n      const mockDb = require('@/services/database').db\r\n      mockDb.syncQueue.transaction.mockRejectedValue(new Error('Transaction error'))\r\n\r\n      await localOperationService.updateOperationStatuses(mockResults)\r\n\r\n      expect(console.error).toHaveBeenCalledWith(\r\n        'Failed to update operation statuses:',\r\n        expect.any(Error)\r\n      )\r\n    })\r\n  })\r\n\r\n  describe('性能和内存管理验证', () => {\r\n    it('应该限制获取的待处理操作数量', async () => {\r\n      const mockOperations: LocalSyncOperation[] = Array.from(\r\n        { length: 150 }, \r\n        (_, i) => ({\r\n          id: `op-${i}`,\r\n          type: 'create' as const,\r\n          table: 'cards' as const,\r\n          data: { frontContent: `Q${i}`, backContent: `A${i}` },\r\n          localId: `card-${i}`,\r\n          timestamp: Date.now(),\r\n          retryCount: 0,\r\n          status: 'pending' as const,\r\n          localVersion: 1,\r\n          priority: 'normal' as const,\r\n          dependencies: [],\r\n          networkInfo: { isOnline: true, connectionType: 'wifi', bandwidth: 'high' }\r\n        })\r\n      )\r\n\r\n      const mockDb = require('@/services/database').db\r\n      mockDb.syncQueue.toArray.mockResolvedValue(mockOperations)\r\n\r\n      const result = await localOperationService.getPendingSyncOperations()\r\n\r\n      // 验证限制为100个操作\r\n      expect(mockDb.syncQueue.limit).toHaveBeenCalledWith(100)\r\n    })\r\n\r\n    it('应该按优先级排序待处理操作', async () => {\r\n      const mockDb = require('@/services/database').db\r\n      mockDb.syncQueue.toArray.mockResolvedValue([])\r\n\r\n      await localOperationService.getPendingSyncOperations()\r\n\r\n      // 验证按优先级排序（降序）\r\n      expect(mockDb.syncQueue.orderBy).toHaveBeenCalledWith('priority')\r\n      expect(mockDb.syncQueue.reverse).toHaveBeenCalled()\r\n    })\r\n  })\r\n})"],"version":3}
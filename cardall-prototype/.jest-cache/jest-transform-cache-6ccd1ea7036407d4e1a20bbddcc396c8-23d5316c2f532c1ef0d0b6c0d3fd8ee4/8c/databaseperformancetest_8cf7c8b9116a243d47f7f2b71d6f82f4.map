{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\performance\\database-performance.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\performance\\database-performance.test.ts"],"sourcesContent":["/**\r\n * 数据库查询性能测试\r\n * 测试数据库操作的性能、优化和稳定性\r\n */\r\n\r\nimport { describe, test, expect, jest, beforeEach, afterEach } from '@jest/globals'\r\nimport { MockDatabase } from '../utils/test-utils'\r\nimport { performanceTester, memoryLeakDetector, mockFactories, testDataGenerator } from '../utils/test-utils'\r\n\r\n// 模拟数据库依赖\r\njest.mock('../../services/database-unified', () => ({\r\n  db: new MockDatabase()\r\n}))\r\n\r\ndescribe('数据库查询性能测试', () => {\r\n  let mockDb: MockDatabase\r\n\r\n  beforeEach(() => {\r\n    mockDb = new MockDatabase()\r\n    performanceTester.reset()\r\n    memoryLeakDetector.clearSnapshots()\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  afterEach(() => {\r\n    mockDb.clear()\r\n  })\r\n\r\n  // ============================================================================\r\n  // 基础查询性能测试\r\n  // ============================================================================\r\n\r\n  describe('基础查询性能', () => {\r\n    test('应该快速插入单个记录', async () => {\r\n      const card = mockFactories.createMockCard()\r\n\r\n      const result = await performanceTester.measure('single_insert', () =>\r\n        mockDb.table('cards').add(card)\r\n      )\r\n\r\n      expect(result).toBeValidUUID()\r\n      \r\n      const stats = performanceTester.getStats('single_insert')\r\n      expect(stats!.avg).toBeLessThan(10) // 10ms内完成\r\n      expect(stats!.max).toBeLessThan(50) // 最大不超过50ms\r\n    })\r\n\r\n    test('应该快速读取单个记录', async () => {\r\n      // 先插入数据\r\n      const card = mockFactories.createMockCard()\r\n      const cardId = await mockDb.table('cards').add(card)\r\n\r\n      // 测试读取性能\r\n      const result = await performanceTester.measure('single_read', () =>\r\n        mockDb.table('cards').get(cardId)\r\n      )\r\n\r\n      expect(result).toBeDefined()\r\n      expect(result!.id).toBe(cardId)\r\n\r\n      const stats = performanceTester.getStats('single_read')\r\n      expect(stats!.avg).toBeLessThan(5) // 5ms内完成\r\n    })\r\n\r\n    test('应该快速更新记录', async () => {\r\n      const card = mockFactories.createMockCard()\r\n      const cardId = await mockDb.table('cards').add(card)\r\n\r\n      const updates = { frontContent: { title: 'Updated Title' } }\r\n\r\n      const result = await performanceTester.measure('single_update', () =>\r\n        mockDb.table('cards').update(cardId, updates)\r\n      )\r\n\r\n      expect(result).toBe(1)\r\n\r\n      const stats = performanceTester.getStats('single_update')\r\n      expect(stats!.avg).toBeLessThan(10)\r\n    })\r\n\r\n    test('应该快速删除记录', async () => {\r\n      const card = mockFactories.createMockCard()\r\n      const cardId = await mockDb.table('cards').add(card)\r\n\r\n      const result = await performanceTester.measure('single_delete', () =>\r\n        mockDb.table('cards').delete(cardId)\r\n      )\r\n\r\n      expect(result).toBe(1)\r\n\r\n      const stats = performanceTester.getStats('single_delete')\r\n      expect(stats!.avg).toBeLessThan(5)\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 批量操作性能测试\r\n  // ============================================================================\r\n\r\n  describe('批量操作性能', () => {\r\n    test('应该高效批量插入', async () => {\r\n      const batchSize = 100\r\n      const cards = Array.from({ length: batchSize }, () => mockFactories.createMockCard())\r\n\r\n      const result = await performanceTester.measure('bulk_insert_100', () =>\r\n        mockDb.table('cards').bulkAdd(cards)\r\n      )\r\n\r\n      expect(result).toHaveLength(batchSize)\r\n      result.forEach(id => expect(id).toBeValidUUID())\r\n\r\n      const stats = performanceTester.getStats('bulk_insert_100')\r\n      expect(stats!.avg).toBeLessThan(100) // 100ms内完成100条记录\r\n    })\r\n\r\n    test('应该高效批量读取', async () => {\r\n      const batchSize = 1000\r\n      const cards = Array.from({ length: batchSize }, () => mockFactories.createMockCard())\r\n      await mockDb.table('cards').bulkAdd(cards)\r\n\r\n      const result = await performanceTester.measure('bulk_read_1000', () =>\r\n        mockDb.table('cards').toArray()\r\n      )\r\n\r\n      expect(result).toHaveLength(batchSize)\r\n\r\n      const stats = performanceTester.getStats('bulk_read_1000')\r\n      expect(stats!.avg).toBeLessThan(200) // 200ms内读取1000条记录\r\n    })\r\n\r\n    test('应该高效批量更新', async () => {\r\n      const batchSize = 50\r\n      const cards = Array.from({ length: batchSize }, () => mockFactories.createMockCard())\r\n      const cardIds = await mockDb.table('cards').bulkAdd(cards)\r\n\r\n      const updatePromises = cardIds.map((id, index) =>\r\n        mockDb.table('cards').update(id, { frontContent: { title: `Updated ${index}` } })\r\n      )\r\n\r\n      const result = await performanceTester.measure('bulk_update_50', () =>\r\n        Promise.all(updatePromises)\r\n      )\r\n\r\n      expect(result).toHaveLength(batchSize)\r\n      expect(result.every(count => count === 1)).toBe(true)\r\n\r\n      const stats = performanceTester.getStats('bulk_update_50')\r\n      expect(stats!.avg).toBeLessThan(100)\r\n    })\r\n\r\n    test('应该高效批量删除', async () => {\r\n      const batchSize = 50\r\n      const cards = Array.from({ length: batchSize }, () => mockFactories.createMockCard())\r\n      const cardIds = await mockDb.table('cards').bulkAdd(cards)\r\n\r\n      const deletePromises = cardIds.map(id =>\r\n        mockDb.table('cards').delete(id)\r\n      )\r\n\r\n      const result = await performanceTester.measure('bulk_delete_50', () =>\r\n        Promise.all(deletePromises)\r\n      )\r\n\r\n      expect(result).toHaveLength(batchSize)\r\n      expect(result.every(count => count === 1)).toBe(true)\r\n\r\n      const stats = performanceTester.getStats('bulk_delete_50')\r\n      expect(stats!.avg).toBeLessThan(50)\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 查询优化测试\r\n  // ============================================================================\r\n\r\n  describe('查询优化', () => {\r\n    beforeEach(async () => {\r\n      // 创建测试数据集\r\n      const testData = testDataGenerator.generateTestData({\r\n        cardCount: 500,\r\n        folderCount: 10,\r\n        tagCount: 20\r\n      })\r\n\r\n      await mockDb.table('cards').bulkAdd(testData.cards)\r\n      await mockDb.table('folders').bulkAdd(testData.folders)\r\n      await mockDb.table('tags').bulkAdd(testData.tags)\r\n    })\r\n\r\n    test('应该高效执行条件查询', async () => {\r\n      const result = await performanceTester.measure('conditional_query', () =>\r\n        mockDb.table('cards')\r\n          .where('userId')\r\n          .equals('test-user-id')\r\n          .limit(100)\r\n          .toArray()\r\n      )\r\n\r\n      expect(result.length).toBeGreaterThan(0)\r\n      expect(result.length).toBeLessThanOrEqual(100)\r\n\r\n      const stats = performanceTester.getStats('conditional_query')\r\n      expect(stats!.avg).toBeLessThan(50)\r\n    })\r\n\r\n    test('应该高效执行范围查询', async () => {\r\n      const result = await performanceTester.measure('range_query', () =>\r\n        mockDb.table('cards')\r\n          .where('userId')\r\n          .equals('test-user-id')\r\n          .offset(100)\r\n          .limit(100)\r\n          .toArray()\r\n      )\r\n\r\n      expect(result.length).toBe(100)\r\n\r\n      const stats = performanceTester.getStats('range_query')\r\n      expect(stats!.avg).toBeLessThan(30)\r\n    })\r\n\r\n    test('应该高效执行排序查询', async () => {\r\n      const result = await performanceTester.measure('sort_query', () =>\r\n        mockDb.table('cards')\r\n          .orderBy('createdAt')\r\n          .reverse()\r\n          .limit(50)\r\n          .toArray()\r\n      )\r\n\r\n      expect(result.length).toBe(50)\r\n\r\n      // 验证排序正确\r\n      for (let i = 1; i < result.length; i++) {\r\n        expect(new Date(result[i-1].createdAt).getTime())\r\n          .toBeGreaterThanOrEqual(new Date(result[i].createdAt).getTime())\r\n      }\r\n\r\n      const stats = performanceTester.getStats('sort_query')\r\n      expect(stats!.avg).toBeLessThan(100)\r\n    })\r\n\r\n    test('应该高效执行过滤查询', async () => {\r\n      const result = await performanceTester.measure('filter_query', () =>\r\n        mockDb.table('cards')\r\n          .filter(card => \r\n            card.frontContent.title.includes('Card')\r\n          )\r\n          .limit(100)\r\n          .toArray()\r\n      )\r\n\r\n      expect(result.length).toBeGreaterThan(0)\r\n\r\n      const stats = performanceTester.getStats('filter_query')\r\n      expect(stats!.avg).toBeLessThan(100)\r\n    })\r\n\r\n    test('应该高效执行聚合查询', async () => {\r\n      const result = await performanceTester.measure('aggregate_query', () =>\r\n        mockDb.table('cards')\r\n          .where('userId')\r\n          .equals('test-user-id')\r\n          .count()\r\n      )\r\n\r\n      expect(result).toBeGreaterThan(0)\r\n\r\n      const stats = performanceTester.getStats('aggregate_query')\r\n      expect(stats!.avg).toBeLessThan(20)\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 复杂查询测试\r\n  // ============================================================================\r\n\r\n  describe('复杂查询', () => {\r\n    beforeEach(async () => {\r\n      // 创建复杂的测试数据\r\n      const complexData = Array.from({ length: 1000 }, (_, i) => ({\r\n        ...mockFactories.createMockCard(),\r\n        frontContent: {\r\n          title: `Complex Card ${i + 1}`,\r\n          text: `Complex content with search terms: ${i % 100}`,\r\n          tags: [`tag-${i % 20}`, `category-${i % 10}`]\r\n        },\r\n        folderId: `folder-${i % 5}`,\r\n        createdAt: new Date(Date.now() - i * 24 * 60 * 60 * 1000) // 分布在1000天内\r\n      }))\r\n\r\n      await mockDb.table('cards').bulkAdd(complexData)\r\n    })\r\n\r\n    test('应该高效执行全文搜索', async () => {\r\n      const searchTerm = 'search terms'\r\n\r\n      const result = await performanceTester.measure('full_text_search', () =>\r\n        mockDb.table('cards')\r\n          .filter(card => {\r\n            const searchText = `${card.frontContent.title} ${card.frontContent.text}`.toLowerCase()\r\n            return searchText.includes(searchTerm)\r\n          })\r\n          .limit(50)\r\n          .toArray()\r\n      )\r\n\r\n      expect(result.length).toBeGreaterThan(0)\r\n      result.forEach(card => {\r\n        const searchText = `${card.frontContent.title} ${card.frontContent.text}`.toLowerCase()\r\n        expect(searchText).toContain(searchTerm)\r\n      })\r\n\r\n      const stats = performanceTester.getStats('full_text_search')\r\n      expect(stats!.avg).toBeLessThan(200)\r\n    })\r\n\r\n    test('应该高效执行多条件组合查询', async () => {\r\n      const result = await performanceTester.measure('complex_query', () =>\r\n        mockDb.table('cards')\r\n          .where('userId')\r\n          .equals('test-user-id')\r\n          .filter(card => \r\n            card.frontContent.tags.includes('tag-1') &&\r\n            card.folderId === 'folder-0'\r\n          )\r\n          .orderBy('createdAt')\r\n          .reverse()\r\n          .limit(20)\r\n          .toArray()\r\n      )\r\n\r\n      expect(result.length).toBeLessThanOrEqual(20)\r\n\r\n      const stats = performanceTester.getStats('complex_query')\r\n      expect(stats!.avg).toBeLessThan(100)\r\n    })\r\n\r\n    test('应该高效执行分组统计查询', async () => {\r\n      const cards = await mockDb.table('cards').toArray()\r\n      \r\n      const result = await performanceTester.measure('group_by_query', () => {\r\n        const grouped = cards.reduce((acc, card) => {\r\n          const folderId = card.folderId || 'unknown'\r\n          if (!acc[folderId]) {\r\n            acc[folderId] = { count: 0, total: 0 }\r\n          }\r\n          acc[folderId].count++\r\n          acc[folderId].total++\r\n          return acc\r\n        }, {} as Record<string, { count: number; total: number }>)\r\n\r\n        return Object.entries(grouped)\r\n          .map(([folderId, stats]) => ({ folderId, ...stats }))\r\n          .sort((a, b) => b.count - a.count)\r\n      })\r\n\r\n      expect(result.length).toBeGreaterThan(0)\r\n      expect(result[0].count).toBeGreaterThan(0)\r\n\r\n      const stats = performanceTester.getStats('group_by_query')\r\n      expect(stats!.avg).toBeLessThan(50)\r\n    })\r\n\r\n    test('应该高效执行分页查询', async () => {\r\n      const pageSize = 20\r\n      const totalCards = await mockDb.table('cards').count()\r\n\r\n      const totalPages = Math.ceil(totalCards / pageSize)\r\n      const results = []\r\n\r\n      // 测试所有分页\r\n      for (let page = 0; page < Math.min(totalPages, 5); page++) {\r\n        const pageResult = await mockDb.table('cards')\r\n          .orderBy('createdAt')\r\n          .reverse()\r\n          .offset(page * pageSize)\r\n          .limit(pageSize)\r\n          .toArray()\r\n\r\n        results.push(pageResult)\r\n      }\r\n\r\n      // 验证分页正确性\r\n      for (let i = 1; i < results.length; i++) {\r\n        const prevPage = results[i - 1]\r\n        const currPage = results[i]\r\n        \r\n        expect(prevPage.length).toBe(pageSize)\r\n        expect(currPage.length).toBe(pageSize)\r\n        \r\n        // 验证没有重复记录\r\n        const prevIds = prevPage.map(card => card.id)\r\n        const currIds = currPage.map(card => card.id)\r\n        const intersection = prevIds.filter(id => currIds.includes(id))\r\n        expect(intersection).toHaveLength(0)\r\n      }\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 事务性能测试\r\n  // ============================================================================\r\n\r\n  describe('事务性能', () => {\r\n    test('应该高效执行单个事务', async () => {\r\n      const result = await performanceTester.measure('single_transaction', () =>\r\n        mockDb.transaction('rw', ['cards', 'syncQueue'], async () => {\r\n          const card = mockFactories.createMockCard()\r\n          const cardId = await mockDb.table('cards').add(card)\r\n          \r\n          await mockDb.table('syncQueue').add({\r\n            ...mockFactories.createMockSyncOperation(),\r\n            entityId: cardId\r\n          })\r\n\r\n          return cardId\r\n        })\r\n      )\r\n\r\n      expect(result).toBeValidUUID()\r\n\r\n      const stats = performanceTester.getStats('single_transaction')\r\n      expect(stats!.avg).toBeLessThan(50)\r\n    })\r\n\r\n    test('应该高效执行批量事务', async () => {\r\n      const batchSize = 10\r\n\r\n      const result = await performanceTester.measure('batch_transaction', () =>\r\n        mockDb.transaction('rw', ['cards', 'syncQueue'], async () => {\r\n          const results = []\r\n          \r\n          for (let i = 0; i < batchSize; i++) {\r\n            const card = mockFactories.createMockCard({\r\n              frontContent: { title: `Batch Card ${i + 1}` }\r\n            })\r\n            const cardId = await mockDb.table('cards').add(card)\r\n            \r\n            await mockDb.table('syncQueue').add({\r\n              ...mockFactories.createMockSyncOperation(),\r\n              entityId: cardId\r\n            })\r\n\r\n            results.push(cardId)\r\n          }\r\n\r\n          return results\r\n        })\r\n      )\r\n\r\n      expect(result).toHaveLength(batchSize)\r\n      result.forEach(id => expect(id).toBeValidUUID())\r\n\r\n      const stats = performanceTester.getStats('batch_transaction')\r\n      expect(stats!.avg).toBeLessThan(200)\r\n    })\r\n\r\n    test('应该正确处理事务回滚', async () => {\r\n      const initialCount = await mockDb.table('cards').count()\r\n\r\n      try {\r\n        await mockDb.transaction('rw', ['cards'], async () => {\r\n          // 插入一些数据\r\n          await mockDb.table('cards').bulkAdd([\r\n            mockFactories.createMockCard(),\r\n            mockFactories.createMockCard()\r\n          ])\r\n\r\n          // 模拟错误触发回滚\r\n          throw new Error('Transaction rollback test')\r\n        })\r\n      } catch (error) {\r\n        // 期望的错误\r\n      }\r\n\r\n      // 验证事务回滚，数据没有被持久化\r\n      const finalCount = await mockDb.table('cards').count()\r\n      expect(finalCount).toBe(initialCount)\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 并发性能测试\r\n  // ============================================================================\r\n\r\n  describe('并发性能', () => {\r\n    test('应该高效处理并发读取', async () => {\r\n      // 先准备数据\r\n      const cards = Array.from({ length: 100 }, () => mockFactories.createMockCard())\r\n      await mockDb.table('cards').bulkAdd(cards)\r\n\r\n      // 并发读取\r\n      const readPromises = Array.from({ length: 50 }, () =>\r\n        mockDb.table('cards').toArray()\r\n      )\r\n\r\n      const result = await performanceTester.measure('concurrent_reads', () =>\r\n        Promise.all(readPromises)\r\n      )\r\n\r\n      expect(result).toHaveLength(50)\r\n      result.forEach(cards => expect(cards.length).toBe(100))\r\n\r\n      const stats = performanceTester.getStats('concurrent_reads')\r\n      expect(stats!.avg).toBeLessThan(100)\r\n    })\r\n\r\n    test('应该高效处理并发写入', async () => {\r\n      const writePromises = Array.from({ length: 20 }, (_, i) =>\r\n        mockDb.table('cards').add(mockFactories.createMockCard({\r\n          frontContent: { title: `Concurrent Card ${i + 1}` }\r\n        }))\r\n      )\r\n\r\n      const result = await performanceTester.measure('concurrent_writes', () =>\r\n        Promise.all(writePromises)\r\n      )\r\n\r\n      expect(result).toHaveLength(20)\r\n      result.forEach(id => expect(id).toBeValidUUID())\r\n\r\n      const stats = performanceTester.getStats('concurrent_writes')\r\n      expect(stats!.avg).toBeLessThan(100)\r\n    })\r\n\r\n    test('应该高效处理混合并发操作', async () => {\r\n      // 先准备一些数据\r\n      const initialCards = Array.from({ length: 50 }, () => mockFactories.createMockCard())\r\n      await mockDb.table('cards').bulkAdd(initialCards)\r\n\r\n      const mixedPromises = []\r\n\r\n      // 读取操作\r\n      for (let i = 0; i < 10; i++) {\r\n        mixedPromises.push(mockDb.table('cards').toArray())\r\n      }\r\n\r\n      // 写入操作\r\n      for (let i = 0; i < 10; i++) {\r\n        mixedPromises.push(\r\n          mockDb.table('cards').add(mockFactories.createMockCard({\r\n            frontContent: { title: `Mixed Card ${i + 1}` }\r\n          }))\r\n        )\r\n      }\r\n\r\n      // 更新操作\r\n      const existingCards = await mockDb.table('cards').limit(5).toArray()\r\n      for (let i = 0; i < 5; i++) {\r\n        if (existingCards[i]) {\r\n          mixedPromises.push(\r\n            mockDb.table('cards').update(existingCards[i].id!, {\r\n              frontContent: { title: `Updated ${i + 1}` }\r\n            })\r\n          )\r\n        }\r\n      }\r\n\r\n      const result = await performanceTester.measure('mixed_concurrent', () =>\r\n        Promise.all(mixedPromises)\r\n      )\r\n\r\n      expect(result.length).toBeGreaterThan(0)\r\n\r\n      const stats = performanceTester.getStats('mixed_concurrent')\r\n      expect(stats!.avg).toBeLessThan(200)\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 内存使用测试\r\n  // ============================================================================\r\n\r\n  describe('内存使用', () => {\r\n    test('应该监控内存使用情况', async () => {\r\n      // 设置内存基线\r\n      memoryLeakDetector.setBaseline()\r\n\r\n      // 执行大量操作\r\n      const largeDataset = testDataGenerator.generateLargeDataset(1000)\r\n      await mockDb.table('cards').bulkAdd(largeDataset)\r\n\r\n      // 获取内存增长\r\n      const growth = memoryLeakDetector.getMemoryGrowthSinceBaseline()\r\n      console.log(`内存增长: ${growth.toFixed(2)}MB`)\r\n\r\n      // 内存增长应该在合理范围内\r\n      expect(growth).toBeLessThan(100) // 100MB以内\r\n    })\r\n\r\n    test('应该处理大数据集', async () => {\r\n      // 插入大量数据\r\n      const hugeDataset = testDataGenerator.generateLargeDataset(5000)\r\n      \r\n      const result = await performanceTester.measure('huge_dataset_insert', () =>\r\n        mockDb.table('cards').bulkAdd(hugeDataset)\r\n      )\r\n\r\n      expect(result).toHaveLength(5000)\r\n\r\n      const stats = performanceTester.getStats('huge_dataset_insert')\r\n      console.log(`5000条记录插入性能: ${stats!.avg.toFixed(2)}ms`)\r\n      \r\n      // 大数据集插入应该在合理时间内完成\r\n      expect(stats!.avg).toBeLessThan(1000)\r\n    })\r\n\r\n    test('应该优化大数据查询', async () => {\r\n      // 准备大数据集\r\n      const largeDataset = testDataGenerator.generateLargeDataset(2000)\r\n      await mockDb.table('cards').bulkAdd(largeDataset)\r\n\r\n      // 测试分页查询性能\r\n      const result = await performanceTester.measure('large_dataset_paged_query', () =>\r\n        mockDb.table('cards')\r\n          .orderBy('createdAt')\r\n          .reverse()\r\n          .offset(1000)\r\n          .limit(100)\r\n          .toArray()\r\n      )\r\n\r\n      expect(result).toHaveLength(100)\r\n\r\n      const stats = performanceTester.getStats('large_dataset_paged_query')\r\n      console.log(`大数据分页查询性能: ${stats!.avg.toFixed(2)}ms`)\r\n      \r\n      expect(stats!.avg).toBeLessThan(100)\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 稳定性测试\r\n  // ============================================================================\r\n\r\n  describe('稳定性', () => {\r\n    test('应该在高负载下保持稳定', async () => {\r\n      const iterations = 100\r\n      const errors: Error[] = []\r\n\r\n      for (let i = 0; i < iterations; i++) {\r\n        try {\r\n          // 随机操作\r\n          const operation = Math.floor(Math.random() * 4)\r\n          \r\n          switch (operation) {\r\n            case 0: // 插入\r\n              await mockDb.table('cards').add(mockFactories.createMockCard({\r\n                frontContent: { title: `Stability Test ${i}` }\r\n              }))\r\n              break\r\n            case 1: // 读取\r\n              await mockDb.table('cards').limit(10).toArray()\r\n              break\r\n            case 2: // 更新\r\n              const cards = await mockDb.table('cards').limit(1).toArray()\r\n              if (cards.length > 0) {\r\n                await mockDb.table('cards').update(cards[0].id!, {\r\n                  frontContent: { title: `Updated ${i}` }\r\n                })\r\n              }\r\n              break\r\n            case 3: // 删除\r\n              const oldCards = await mockDb.table('cards').limit(1).toArray()\r\n              if (oldCards.length > 0) {\r\n                await mockDb.table('cards').delete(oldCards[0].id!)\r\n              }\r\n              break\r\n          }\r\n        } catch (error) {\r\n          errors.push(error as Error)\r\n        }\r\n      }\r\n\r\n      console.log(`稳定性测试完成，错误数: ${errors.length}`)\r\n      expect(errors.length).toBeLessThan(iterations * 0.05) // 错误率小于5%\r\n    })\r\n\r\n    test('应该在长时间运行中保持稳定', async () => {\r\n      const duration = 5000 // 5秒\r\n      const startTime = Date.now()\r\n      let operationCount = 0\r\n      let errors = 0\r\n\r\n      while (Date.now() - startTime < duration) {\r\n        try {\r\n          await mockDb.table('cards').add(mockFactories.createMockCard({\r\n            frontContent: { title: `Long Run ${operationCount}` }\r\n          }))\r\n          operationCount++\r\n        } catch (error) {\r\n          errors++\r\n        }\r\n      }\r\n\r\n      console.log(`长时间运行测试完成: ${operationCount}次操作，${errors}次错误`)\r\n      expect(operationCount).toBeGreaterThan(100) // 至少100次操作\r\n      expect(errors).toBeLessThan(operationCount * 0.01) // 错误率小于1%\r\n    })\r\n\r\n    test('应该正确处理异常情况', async () => {\r\n      // 测试无效操作\r\n      await expect(mockDb.table('cards').get('invalid-id')).resolves.not.toThrow()\r\n      await expect(mockDb.table('cards').update('invalid-id', {})).resolves.not.toThrow()\r\n      await expect(mockDb.table('cards').delete('invalid-id')).resolves.not.toThrow()\r\n\r\n      // 测试边界情况\r\n      await expect(mockDb.table('cards').limit(0).toArray()).resolves.not.toThrow()\r\n      await expect(mockDb.table('cards').offset(-1).toArray()).resolves.not.toThrow()\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 性能基准测试\r\n  // ============================================================================\r\n\r\n  describe('性能基准', () => {\r\n    test('应该满足性能基准要求', async () => {\r\n      // 执行各种基准测试\r\n      const benchmarks = await Promise.all([\r\n        performanceTester.measure('benchmark_insert', () =>\r\n          mockDb.table('cards').add(mockFactories.createMockCard())\r\n        ),\r\n        performanceTester.measure('benchmark_read', async () => {\r\n          const card = mockFactories.createMockCard()\r\n          const cardId = await mockDb.table('cards').add(card)\r\n          return mockDb.table('cards').get(cardId)\r\n        }),\r\n        performanceTester.measure('benchmark_update', async () => {\r\n          const card = mockFactories.createMockCard()\r\n          const cardId = await mockDb.table('cards').add(card)\r\n          return mockDb.table('cards').update(cardId, { frontContent: { title: 'Updated' } })\r\n        }),\r\n        performanceTester.measure('benchmark_delete', async () => {\r\n          const card = mockFactories.createMockCard()\r\n          const cardId = await mockDb.table('cards').add(card)\r\n          return mockDb.table('cards').delete(cardId)\r\n        })\r\n      ])\r\n\r\n      // 验证所有基准测试都满足要求\r\n      const stats = performanceTester.getAllStats()\r\n      \r\n      Object.entries(stats).forEach(([operation, stat]) => {\r\n        expect(stat!.avg).toBeLessThan(100) // 平均响应时间小于100ms\r\n        expect(stat!.max).toBeLessThan(500) // 最大响应时间小于500ms\r\n        expect(stat!.p95).toBeLessThan(200)  // 95分位数小于200ms\r\n      })\r\n\r\n      console.log('数据库性能基准测试结果:', stats)\r\n    })\r\n\r\n    test('应该生成性能报告', () => {\r\n      const allStats = performanceTester.getAllStats()\r\n      \r\n      expect(allStats).toBeDefined()\r\n      expect(typeof allStats).toBe('object')\r\n\r\n      // 验证报告结构\r\n      Object.values(allStats).forEach(stat => {\r\n        expect(stat).toHaveProperty('count')\r\n        expect(stat).toHaveProperty('avg')\r\n        expect(stat).toHaveProperty('min')\r\n        expect(stat).toHaveProperty('max')\r\n        expect(stat).toHaveProperty('median')\r\n        expect(stat).toHaveProperty('p95')\r\n        expect(stat).toHaveProperty('p99')\r\n      })\r\n\r\n      console.log('数据库性能报告生成完成')\r\n    })\r\n  })\r\n})"],"version":3}
{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\local-operation-service.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\local-operation-service.ts"],"sourcesContent":["/**\r\n * 高性能本地操作服务\r\n * 优化本地数据操作响应时间，实现异步同步机制\r\n */\r\n\r\nimport { db, type DbCard, type DbFolder, type DbTag, type DbImage } from './database-unified'\r\nimport { localOperationService as baseService } from './local-operation'\r\nimport type { LocalSyncOperation } from './local-operation'\r\n\r\n// ============================================================================\r\n// 类型定义\r\n// ============================================================================\r\n\r\nexport interface LocalOperationResult {\r\n  success: boolean\r\n  id?: string\r\n  error?: string\r\n  message?: string\r\n  duration: number\r\n  timestamp: Date\r\n}\r\n\r\nexport interface CardData {\r\n  frontContent: {\r\n    title: string\r\n    text: string\r\n    tags: string[]\r\n    style?: any\r\n  }\r\n  backContent: {\r\n    title: string\r\n    text: string\r\n    tags: string[]\r\n    style?: any\r\n  }\r\n  style?: {\r\n    type: 'solid' | 'gradient' | 'glass'\r\n    colors?: string[]\r\n  }\r\n  folderId?: string\r\n  userId?: string\r\n}\r\n\r\nexport interface CardUpdate {\r\n  frontContent?: Partial<CardData['frontContent']>\r\n  backContent?: Partial<CardData['backContent']>\r\n  style?: CardData['style']\r\n  folderId?: string\r\n}\r\n\r\nexport interface QueryOptions {\r\n  folderId?: string\r\n  userId?: string\r\n  limit?: number\r\n  offset?: number\r\n  sortBy?: 'createdAt' | 'updatedAt' | 'title'\r\n  sortOrder?: 'asc' | 'desc'\r\n}\r\n\r\nexport interface SearchQuery {\r\n  term: string\r\n  userId?: string\r\n  folderId?: string\r\n  tags?: string[]\r\n  limit?: number\r\n}\r\n\r\nexport interface PerformanceMetrics {\r\n  totalOperations: number\r\n  averageResponseTime: number\r\n  successRate: number\r\n  cacheHitRate: number\r\n  queueSize: number\r\n  lastSyncTime: Date | null\r\n}\r\n\r\n// ============================================================================\r\n// 本地缓存管理器\r\n// ============================================================================\r\n\r\nclass LocalCacheManager {\r\n  private memoryCache = new Map<string, { data: any; timestamp: number; ttl: number }>()\r\n  private queryCache = new Map<string, { result: any; timestamp: number }>()\r\n  private stats = {\r\n    hits: 0,\r\n    misses: 0,\r\n    evictions: 0\r\n  }\r\n\r\n  private readonly DEFAULT_TTL = 30000 // 30秒\r\n  private readonly MAX_CACHE_SIZE = 1000\r\n\r\n  async get<T>(key: string): Promise<T | null> {\r\n    const cached = this.memoryCache.get(key)\r\n    if (!cached) {\r\n      this.stats.misses++\r\n      return null\r\n    }\r\n\r\n    // 检查TTL\r\n    if (Date.now() - cached.timestamp > cached.ttl) {\r\n      this.memoryCache.delete(key)\r\n      this.stats.evictions++\r\n      this.stats.misses++\r\n      return null\r\n    }\r\n\r\n    this.stats.hits++\r\n    return cached.data as T\r\n  }\r\n\r\n  async set<T>(key: string, data: T, ttl: number = this.DEFAULT_TTL): Promise<void> {\r\n    // 检查缓存大小限制\r\n    if (this.memoryCache.size >= this.MAX_CACHE_SIZE) {\r\n      this.evictLeastRecentlyUsed()\r\n    }\r\n\r\n    this.memoryCache.set(key, {\r\n      data,\r\n      timestamp: Date.now(),\r\n      ttl\r\n    })\r\n  }\r\n\r\n  async getQueryResult(queryKey: string): Promise<any | null> {\r\n    const cached = this.queryCache.get(queryKey)\r\n    if (!cached) return null\r\n\r\n    // 查询缓存TTL较短\r\n    if (Date.now() - cached.timestamp > 10000) { // 10秒\r\n      this.queryCache.delete(queryKey)\r\n      return null\r\n    }\r\n\r\n    return cached.result\r\n  }\r\n\r\n  async cacheQueryResult(queryKey: string, result: any): Promise<void> {\r\n    this.queryCache.set(queryKey, {\r\n      result,\r\n      timestamp: Date.now()\r\n    })\r\n  }\r\n\r\n  invalidate(pattern: string): void {\r\n    const keysToDelete: string[] = []\r\n    \r\n    for (const key of this.memoryCache.keys()) {\r\n      if (key.includes(pattern)) {\r\n        keysToDelete.push(key)\r\n      }\r\n    }\r\n    \r\n    for (const key of keysToDelete) {\r\n      this.memoryCache.delete(key)\r\n    }\r\n\r\n    // 同时清除相关查询缓存\r\n    for (const key of this.queryCache.keys()) {\r\n      if (key.includes(pattern)) {\r\n        this.queryCache.delete(key)\r\n      }\r\n    }\r\n  }\r\n\r\n  clear(): void {\r\n    this.memoryCache.clear()\r\n    this.queryCache.clear()\r\n  }\r\n\r\n  getStats() {\r\n    return {\r\n      ...this.stats,\r\n      cacheSize: this.memoryCache.size,\r\n      queryCacheSize: this.queryCache.size,\r\n      hitRate: this.stats.hits / (this.stats.hits + this.stats.misses) || 0\r\n    }\r\n  }\r\n\r\n  private evictLeastRecentlyUsed(): void {\r\n    let oldestKey = ''\r\n    let oldestTime = Infinity\r\n\r\n    for (const [key, value] of this.memoryCache.entries()) {\r\n      if (value.timestamp < oldestTime) {\r\n        oldestTime = value.timestamp\r\n        oldestKey = key\r\n      }\r\n    }\r\n\r\n    if (oldestKey) {\r\n      this.memoryCache.delete(oldestKey)\r\n      this.stats.evictions++\r\n    }\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// 性能监控器\r\n// ============================================================================\r\n\r\nclass PerformanceMonitor {\r\n  private metrics = new Map<string, {\r\n    count: number\r\n    totalDuration: number\r\n    successCount: number\r\n    avgDuration: number\r\n    minDuration: number\r\n    maxDuration: number\r\n  }>()\r\n\r\n  recordOperation(operation: string, duration: number, success: boolean): void {\r\n    const key = `operation_${operation}`\r\n    const metric = this.metrics.get(key) || {\r\n      count: 0,\r\n      totalDuration: 0,\r\n      successCount: 0,\r\n      avgDuration: 0,\r\n      minDuration: Infinity,\r\n      maxDuration: 0\r\n    }\r\n\r\n    metric.count++\r\n    metric.totalDuration += duration\r\n    if (success) metric.successCount++\r\n    metric.avgDuration = metric.totalDuration / metric.count\r\n    metric.minDuration = Math.min(metric.minDuration, duration)\r\n    metric.maxDuration = Math.max(metric.maxDuration, duration)\r\n\r\n    this.metrics.set(key, metric)\r\n  }\r\n\r\n  getMetrics(): PerformanceMetrics {\r\n    const totalOps = Array.from(this.metrics.values())\r\n      .reduce((sum, m) => sum + m.count, 0)\r\n    \r\n    const totalDuration = Array.from(this.metrics.values())\r\n      .reduce((sum, m) => sum + m.totalDuration, 0)\r\n    \r\n    const successCount = Array.from(this.metrics.values())\r\n      .reduce((sum, m) => sum + m.successCount, 0)\r\n\r\n    return {\r\n      totalOperations: totalOps,\r\n      averageResponseTime: totalOps > 0 ? totalDuration / totalOps : 0,\r\n      successRate: totalOps > 0 ? successCount / totalOps : 0,\r\n      cacheHitRate: 0, // 将从缓存管理器获取\r\n      queueSize: 0,    // 将从队列管理器获取\r\n      lastSyncTime: null\r\n    }\r\n  }\r\n\r\n  getDetailedMetrics() {\r\n    return Object.fromEntries(this.metrics)\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// 高性能本地操作服务\r\n// ============================================================================\r\n\r\nexport class LocalOperationServiceOptimized {\r\n  private cacheManager = new LocalCacheManager()\r\n  private performanceMonitor = new PerformanceMonitor()\r\n  private isInitialized = false\r\n\r\n  constructor() {\r\n    this.initialize()\r\n  }\r\n\r\n  private async initialize(): Promise<void> {\r\n    if (this.isInitialized) return\r\n\r\n    try {\r\n      await db.open()\r\n      this.isInitialized = true\r\n      console.log('LocalOperationServiceOptimized initialized')\r\n    } catch (error) {\r\n      console.error('Failed to initialize LocalOperationServiceOptimized:', error)\r\n    }\r\n  }\r\n\r\n  // ============================================================================\r\n  // 高性能卡片操作\r\n  // ============================================================================\r\n\r\n  /**\r\n   * 快速创建卡片 - 立即响应，异步同步\r\n   */\r\n  async createCard(cardData: CardData): Promise<LocalOperationResult> {\r\n    const startTime = performance.now()\r\n    const cacheKey = `card_creation_${Date.now()}`\r\n\r\n    try {\r\n      // 生成卡片ID\r\n      const cardId = crypto.randomUUID()\r\n      const now = new Date()\r\n\r\n      // 准备数据库记录\r\n      const dbCard: Omit<DbCard, 'id'> = {\r\n        ...cardData,\r\n        syncVersion: 1,\r\n        pendingSync: true,\r\n        updatedAt: now,\r\n        createdAt: now,\r\n        // 生成搜索向量\r\n        searchVector: this.generateSearchVector(cardData)\r\n      }\r\n\r\n      // 使用事务确保数据一致性\r\n      await db.transaction('rw', [db.cards, db.syncQueue], async () => {\r\n        // 1. 立即插入到本地数据库\r\n        await db.cards.add({ ...dbCard, id: cardId })\r\n\r\n        // 2. 创建同步操作（异步处理）\r\n        await db.syncQueue.add({\r\n          id: crypto.randomUUID(),\r\n          type: 'create',\r\n          entity: 'card',\r\n          entityId: cardId,\r\n          entityType: 'card',\r\n          operationType: 'create',\r\n          data: dbCard,\r\n          userId: cardData.userId,\r\n          timestamp: now,\r\n          retryCount: 0,\r\n          maxRetries: 5,\r\n          priority: 'normal',\r\n          status: 'pending',\r\n          localVersion: Date.now()\r\n        })\r\n      })\r\n\r\n      // 清除相关缓存\r\n      this.cacheManager.invalidate('cards')\r\n      this.cacheManager.invalidate(`folder_${cardData.folderId || 'root'}`)\r\n\r\n      const duration = performance.now() - startTime\r\n      this.performanceMonitor.recordOperation('createCard', duration, true)\r\n\r\n      return {\r\n        success: true,\r\n        id: cardId,\r\n        message: 'Card created successfully',\r\n        duration,\r\n        timestamp: now\r\n      }\r\n    } catch (error) {\r\n      const duration = performance.now() - startTime\r\n      this.performanceMonitor.recordOperation('createCard', duration, false)\r\n\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        duration,\r\n        timestamp: new Date()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 快速更新卡片 - 立即响应，异步同步\r\n   */\r\n  async updateCard(cardId: string, updates: CardUpdate): Promise<LocalOperationResult> {\r\n    const startTime = performance.now()\r\n\r\n    try {\r\n      const now = new Date()\r\n\r\n      // 获取当前卡片数据\r\n      const currentCard = await db.cards.get(cardId)\r\n      if (!currentCard) {\r\n        return {\r\n          success: false,\r\n          error: 'Card not found',\r\n          duration: performance.now() - startTime,\r\n          timestamp: now\r\n        }\r\n      }\r\n\r\n      // 准备更新数据\r\n      const updateData: Partial<DbCard> = {\r\n        ...updates,\r\n        syncVersion: currentCard.syncVersion + 1,\r\n        pendingSync: true,\r\n        updatedAt: now\r\n      }\r\n\r\n      // 如果内容有更新，重新生成搜索向量\r\n      if (updates.frontContent || updates.backContent) {\r\n        const mergedCard = { ...currentCard, ...updates }\r\n        updateData.searchVector = this.generateSearchVector(mergedCard)\r\n      }\r\n\r\n      // 使用事务确保一致性\r\n      await db.transaction('rw', [db.cards, db.syncQueue], async () => {\r\n        // 1. 立即更新本地数据库\r\n        await db.cards.update(cardId, updateData)\r\n\r\n        // 2. 创建同步操作\r\n        await db.syncQueue.add({\r\n          id: crypto.randomUUID(),\r\n          type: 'update',\r\n          entity: 'card',\r\n          entityId: cardId,\r\n          entityType: 'card',\r\n          operationType: 'update',\r\n          data: { ...currentCard, ...updateData },\r\n          previousData: currentCard,\r\n          userId: currentCard.userId,\r\n          timestamp: now,\r\n          retryCount: 0,\r\n          maxRetries: 5,\r\n          priority: 'normal',\r\n          status: 'pending',\r\n          localVersion: Date.now()\r\n        })\r\n      })\r\n\r\n      // 清除相关缓存\r\n      this.cacheManager.invalidate(`card_${cardId}`)\r\n      this.cacheManager.invalidate('cards')\r\n      this.cacheManager.invalidate(`folder_${currentCard.folderId || 'root'}`)\r\n\r\n      const duration = performance.now() - startTime\r\n      this.performanceMonitor.recordOperation('updateCard', duration, true)\r\n\r\n      return {\r\n        success: true,\r\n        id: cardId,\r\n        message: 'Card updated successfully',\r\n        duration,\r\n        timestamp: now\r\n      }\r\n    } catch (error) {\r\n      const duration = performance.now() - startTime\r\n      this.performanceMonitor.recordOperation('updateCard', duration, false)\r\n\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        duration,\r\n        timestamp: new Date()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 快速删除卡片 - 立即响应，异步同步\r\n   */\r\n  async deleteCard(cardId: string): Promise<LocalOperationResult> {\r\n    const startTime = performance.now()\r\n\r\n    try {\r\n      const now = new Date()\r\n\r\n      // 获取卡片信息用于同步\r\n      const card = await db.cards.get(cardId)\r\n      if (!card) {\r\n        return {\r\n          success: false,\r\n          error: 'Card not found',\r\n          duration: performance.now() - startTime,\r\n          timestamp: now\r\n        }\r\n      }\r\n\r\n      // 使用事务确保一致性\r\n      await db.transaction('rw', [db.cards, db.images, db.syncQueue], async () => {\r\n        // 1. 删除相关图片\r\n        await db.images.where('cardId').equals(cardId).delete()\r\n\r\n        // 2. 立即删除本地卡片\r\n        await db.cards.delete(cardId)\r\n\r\n        // 3. 创建同步操作\r\n        await db.syncQueue.add({\r\n          id: crypto.randomUUID(),\r\n          type: 'delete',\r\n          entity: 'card',\r\n          entityId: cardId,\r\n          entityType: 'card',\r\n          operationType: 'delete',\r\n          data: { userId: card.userId, deletedAt: now },\r\n          previousData: card,\r\n          userId: card.userId,\r\n          timestamp: now,\r\n          retryCount: 0,\r\n          maxRetries: 5,\r\n          priority: 'high', // 删除操作高优先级\r\n          status: 'pending',\r\n          localVersion: Date.now()\r\n        })\r\n      })\r\n\r\n      // 清除相关缓存\r\n      this.cacheManager.invalidate(`card_${cardId}`)\r\n      this.cacheManager.invalidate('cards')\r\n      this.cacheManager.invalidate(`folder_${card.folderId || 'root'}`)\r\n\r\n      const duration = performance.now() - startTime\r\n      this.performanceMonitor.recordOperation('deleteCard', duration, true)\r\n\r\n      return {\r\n        success: true,\r\n        id: cardId,\r\n        message: 'Card deleted successfully',\r\n        duration,\r\n        timestamp: now\r\n      }\r\n    } catch (error) {\r\n      const duration = performance.now() - startTime\r\n      this.performanceMonitor.recordOperation('deleteCard', duration, false)\r\n\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        duration,\r\n        timestamp: new Date()\r\n      }\r\n    }\r\n  }\r\n\r\n  // ============================================================================\r\n  // 批量操作\r\n  // ============================================================================\r\n\r\n  /**\r\n   * 批量创建卡片 - 高性能批量处理\r\n   */\r\n  async bulkCreateCards(cardsData: CardData[]): Promise<LocalOperationResult[]> {\r\n    const startTime = performance.now()\r\n    const results: LocalOperationResult[] = []\r\n\r\n    try {\r\n      const now = new Date()\r\n\r\n      // 准备批量数据\r\n      const dbCards = cardsData.map(cardData => ({\r\n        ...cardData,\r\n        id: crypto.randomUUID(),\r\n        syncVersion: 1,\r\n        pendingSync: true,\r\n        updatedAt: now,\r\n        createdAt: now,\r\n        searchVector: this.generateSearchVector(cardData)\r\n      }))\r\n\r\n      // 准备批量同步操作\r\n      const syncOperations = dbCards.map(card => ({\r\n        id: crypto.randomUUID(),\r\n        type: 'create' as const,\r\n        entity: 'card' as const,\r\n        entityId: card.id,\r\n        entityType: 'card' as const,\r\n        operationType: 'create' as const,\r\n        data: card,\r\n        userId: card.userId,\r\n        timestamp: now,\r\n        retryCount: 0,\r\n        maxRetries: 5,\r\n        priority: 'normal' as const,\r\n        status: 'pending' as const,\r\n        localVersion: Date.now()\r\n      }))\r\n\r\n      // 使用事务批量处理\r\n      await db.transaction('rw', [db.cards, db.syncQueue], async () => {\r\n        await db.cards.bulkAdd(dbCards)\r\n        await db.syncQueue.bulkAdd(syncOperations)\r\n      })\r\n\r\n      // 创建结果\r\n      results.push(...dbCards.map(card => ({\r\n        success: true as const,\r\n        id: card.id,\r\n        message: 'Card created successfully',\r\n        duration: performance.now() - startTime,\r\n        timestamp: now\r\n      })))\r\n\r\n      // 清除相关缓存\r\n      this.cacheManager.invalidate('cards')\r\n\r\n      this.performanceMonitor.recordOperation('bulkCreateCards', performance.now() - startTime, true)\r\n      return results\r\n    } catch (error) {\r\n      const duration = performance.now() - startTime\r\n      this.performanceMonitor.recordOperation('bulkCreateCards', duration, false)\r\n\r\n      return cardsData.map(() => ({\r\n        success: false as const,\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n        duration,\r\n        timestamp: new Date()\r\n      }))\r\n    }\r\n  }\r\n\r\n  // ============================================================================\r\n  // 查询操作\r\n  // ============================================================================\r\n\r\n  /**\r\n   * 获取卡片 - 带缓存的高性能查询\r\n   */\r\n  async getCard(cardId: string): Promise<DbCard | null> {\r\n    const cacheKey = `card_${cardId}`\r\n    \r\n    // 尝试从缓存获取\r\n    const cached = await this.cacheManager.get<DbCard>(cacheKey)\r\n    if (cached) {\r\n      return cached\r\n    }\r\n\r\n    try {\r\n      const card = await db.cards.get(cardId)\r\n      if (card) {\r\n        // 缓存结果\r\n        await this.cacheManager.set(cacheKey, card)\r\n      }\r\n      return card || null\r\n    } catch (error) {\r\n      console.error(`Failed to get card ${cardId}:`, error)\r\n      return null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取卡片列表 - 优化的列表查询\r\n   */\r\n  async getCards(options: QueryOptions = {}): Promise<DbCard[]> {\r\n    const { folderId, userId, limit = 50, offset = 0, sortBy = 'updatedAt', sortOrder = 'desc' } = options\r\n    \r\n    // 生成查询缓存键\r\n    const queryKey = `cards_list_${folderId || 'all'}_${userId || 'all'}_${limit}_${offset}_${sortBy}_${sortOrder}`\r\n    \r\n    // 尝试从查询缓存获取\r\n    const cached = await this.cacheManager.getQueryResult(queryKey)\r\n    if (cached) {\r\n      return cached\r\n    }\r\n\r\n    try {\r\n      let query = db.cards\r\n\r\n      // 应用过滤条件\r\n      if (folderId && userId) {\r\n        query = query.where('[userId+folderId]').equals([userId, folderId])\r\n      } else if (userId) {\r\n        query = query.where('userId').equals(userId)\r\n      } else if (folderId) {\r\n        query = query.where('folderId').equals(folderId)\r\n      }\r\n\r\n      // 应用排序\r\n      if (sortBy === 'title') {\r\n        query = query.sortBy('frontContent.title')\r\n      } else {\r\n        query = query.orderBy(sortBy)\r\n      }\r\n\r\n      if (sortOrder === 'desc') {\r\n        query = query.reverse()\r\n      }\r\n\r\n      // 应用分页\r\n      let result = await query.offset(offset).limit(limit).toArray()\r\n\r\n      // 缓存查询结果\r\n      await this.cacheManager.cacheQueryResult(queryKey, result)\r\n\r\n      return result\r\n    } catch (error) {\r\n      console.error('Failed to get cards:', error)\r\n      return []\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 搜索卡片 - 高性能全文搜索\r\n   */\r\n  async searchCards(query: SearchQuery): Promise<DbCard[]> {\r\n    const { term, userId, folderId, tags, limit = 50 } = query\r\n    \r\n    // 生成搜索缓存键\r\n    const searchKey = `search_${term}_${userId || 'all'}_${folderId || 'all'}_${tags?.join(',') || 'none'}_${limit}`\r\n    \r\n    // 尝试从搜索缓存获取\r\n    const cached = await this.cacheManager.getQueryResult(searchKey)\r\n    if (cached) {\r\n      return cached\r\n    }\r\n\r\n    try {\r\n      let searchQuery = db.cards\r\n\r\n      // 基础过滤\r\n      if (userId) {\r\n        searchQuery = searchQuery.where('userId').equals(userId)\r\n      }\r\n      if (folderId) {\r\n        searchQuery = searchQuery.where('folderId').equals(folderId)\r\n      }\r\n\r\n      // 执行搜索\r\n      const results = await searchQuery\r\n        .filter(card => {\r\n          // 搜索向量匹配\r\n          const searchTerm = term.toLowerCase()\r\n          const matchesSearch = card.searchVector?.includes(searchTerm) || false\r\n          \r\n          // 标签匹配\r\n          let matchesTags = true\r\n          if (tags && tags.length > 0) {\r\n            const cardTags = [\r\n              ...card.frontContent.tags,\r\n              ...card.backContent.tags\r\n            ]\r\n            matchesTags = tags.some(tag => cardTags.includes(tag))\r\n          }\r\n\r\n          return matchesSearch && matchesTags\r\n        })\r\n        .limit(limit)\r\n        .toArray()\r\n\r\n      // 缓存搜索结果\r\n      await this.cacheManager.cacheQueryResult(searchKey, results)\r\n\r\n      return results\r\n    } catch (error) {\r\n      console.error('Failed to search cards:', error)\r\n      return []\r\n    }\r\n  }\r\n\r\n  // ============================================================================\r\n  // 同步操作管理\r\n  // ============================================================================\r\n\r\n  /**\r\n   * 获取待同步操作\r\n   */\r\n  async getPendingSyncOperations(): Promise<LocalSyncOperation[]> {\r\n    try {\r\n      return await db.syncQueue\r\n        .where('status')\r\n        .equals('pending')\r\n        .orderBy('priority')\r\n        .reverse()\r\n        .limit(100)\r\n        .toArray() as LocalSyncOperation[]\r\n    } catch (error) {\r\n      console.error('Failed to get pending sync operations:', error)\r\n      return []\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新操作状态\r\n   */\r\n  async updateOperationStatuses(results: {\r\n    operationId: string\r\n    success: boolean\r\n    error?: string\r\n  }[]): Promise<void> {\r\n    try {\r\n      await db.transaction('rw', [db.syncQueue], async () => {\r\n        for (const result of results) {\r\n          if (result.success) {\r\n            await db.syncQueue.update(result.operationId, {\r\n              status: 'completed'\r\n            })\r\n          } else {\r\n            await db.syncQueue.update(result.operationId, {\r\n              status: 'failed',\r\n              lastError: result.error\r\n            })\r\n          }\r\n        }\r\n      })\r\n    } catch (error) {\r\n      console.error('Failed to update operation statuses:', error)\r\n    }\r\n  }\r\n\r\n  // ============================================================================\r\n  // 性能监控和统计\r\n  // ============================================================================\r\n\r\n  /**\r\n   * 获取性能指标\r\n   */\r\n  async getPerformanceMetrics(): Promise<PerformanceMetrics> {\r\n    const baseMetrics = this.performanceMonitor.getMetrics()\r\n    const cacheStats = this.cacheManager.getStats()\r\n    const queueStats = await this.getQueueStats()\r\n\r\n    return {\r\n      ...baseMetrics,\r\n      cacheHitRate: cacheStats.hitRate,\r\n      queueSize: queueStats.totalOperations,\r\n      lastSyncTime: queueStats.lastSyncTime\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取详细统计信息\r\n   */\r\n  async getDetailedStats(): Promise<{\r\n    performance: any\r\n    cache: any\r\n    queue: any\r\n  }> {\r\n    return {\r\n      performance: this.performanceMonitor.getDetailedMetrics(),\r\n      cache: this.cacheManager.getStats(),\r\n      queue: await this.getQueueStats()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取队列统计\r\n   */\r\n  private async getQueueStats(): Promise<{\r\n    totalOperations: number\r\n    pendingOperations: number\r\n    lastSyncTime: Date | null\r\n  }> {\r\n    try {\r\n      const total = await db.syncQueue.count()\r\n      const pending = await db.syncQueue.where('status').equals('pending').count()\r\n      \r\n      // 获取最后同步时间\r\n      const lastCompleted = await db.syncQueue\r\n        .where('status')\r\n        .equals('completed')\r\n        .orderBy('timestamp')\r\n        .reverse()\r\n        .first()\r\n      \r\n      return {\r\n        totalOperations: total,\r\n        pendingOperations: pending,\r\n        lastSyncTime: lastCompleted?.timestamp || null\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to get queue stats:', error)\r\n      return {\r\n        totalOperations: 0,\r\n        pendingOperations: 0,\r\n        lastSyncTime: null\r\n      }\r\n    }\r\n  }\r\n\r\n  // ============================================================================\r\n  // 工具方法\r\n  // ============================================================================\r\n\r\n  /**\r\n   * 生成搜索向量\r\n   */\r\n  private generateSearchVector(card: CardData): string {\r\n    const searchableText = [\r\n      card.frontContent.title,\r\n      card.frontContent.text,\r\n      card.backContent.title,\r\n      card.backContent.text,\r\n      ...card.frontContent.tags,\r\n      ...card.backContent.tags\r\n    ].join(' ').toLowerCase()\r\n    \r\n    return searchableText\r\n  }\r\n\r\n  /**\r\n   * 清除缓存\r\n   */\r\n  clearCache(): void {\r\n    this.cacheManager.clear()\r\n  }\r\n\r\n  /**\r\n   * 销毁服务\r\n   */\r\n  destroy(): void {\r\n    this.cacheManager.clear()\r\n    this.isInitialized = false\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// 导出单例实例\r\n// ============================================================================\r\n\r\nexport const localOperationServiceOptimized = new LocalOperationServiceOptimized()\r\n\r\n// ============================================================================\r\n// 兼容性导出 - 保持现有接口\r\n// ============================================================================\r\n\r\n// 保持原有方法，内部调用新的优化实现\r\nexport const createCardLocal = (cardData: CardData) => \r\n  localOperationServiceOptimized.createCard(cardData)\r\n\r\nexport const updateCardLocal = (cardId: string, updates: CardUpdate) => \r\n  localOperationServiceOptimized.updateCard(cardId, updates)\r\n\r\nexport const deleteCardLocal = (cardId: string) => \r\n  localOperationServiceOptimized.deleteCard(cardId)\r\n\r\nexport const getCardsLocal = (options?: QueryOptions) => \r\n  localOperationServiceOptimized.getCards(options)\r\n\r\nexport const searchCardsLocal = (query: SearchQuery) => \r\n  localOperationServiceOptimized.searchCards(query)\r\n\r\nexport const getPerformanceMetrics = () => \r\n  localOperationServiceOptimized.getPerformanceMetrics()"],"version":3}
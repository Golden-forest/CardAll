7b33bfdd3bde69d6359ea34f3e422824
"use strict";
/**
 * 统一同步服务整合层
 * 合并cloud-sync.ts和optimized-cloud-sync.ts的功能，消除冗余
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.forceDataSync = exports.configureBatchOptimization = exports.configureDataValidation = exports.getBatchPerformanceMetrics = exports.performDataValidation = exports.getDataConsistencyReport = exports.getDataSyncStatus = exports.getSyncHistory = exports.getSyncConflicts = exports.getSyncMetrics = exports.performIncrementalSync = exports.performFullSync = exports.addSyncOperation = exports.unifiedSyncService = exports.UnifiedSyncService = void 0;
const supabase_1 = require("./supabase");
const database_1 = require("./database");
const sync_queue_1 = require("./sync-queue");
const network_manager_1 = require("./network-manager");
const data_converter_1 = require("./data-converter");
const local_operation_1 = require("./local-operation");
const offline_manager_1 = require("./offline-manager");
const data_sync_service_1 = require("./data-sync-service");
// ============================================================================
// 统一同步服务类
// ============================================================================
class UnifiedSyncService {
    constructor() {
        Object.defineProperty(this, "isInitialized", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "authService", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "isOnline", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "syncInProgress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "conflicts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "metrics", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.getDefaultMetrics()
        });
        Object.defineProperty(this, "listeners", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Set()
        });
        Object.defineProperty(this, "operationHistory", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "syncCache", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        Object.defineProperty(this, "lastFullSync", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        this.initialize();
        this.setupOfflineIntegration();
        this.setupDataSyncIntegration();
    }
    getDefaultMetrics() {
        return {
            totalOperations: 0,
            successfulOperations: 0,
            failedOperations: 0,
            averageSyncTime: 0,
            lastSyncTime: null,
            conflictsCount: 0,
            networkQuality: 'good',
            cacheHitRate: 0
        };
    }
    // ============================================================================
    // 初始化和配置
    // ============================================================================
    initialize() {
        if (this.isInitialized)
            return;
        // 集成网络状态检测
        this.initializeNetworkIntegration();
        // 集成同步队列管理
        this.initializeQueueIntegration();
        // 集成数据同步服务
        this.initializeDataSyncIntegration();
        // 启动后台同步
        this.startBackgroundSync();
        this.isInitialized = true;
        console.log('Unified sync service initialized');
    }
    initializeNetworkIntegration() {
        // 启动网络监控
        network_manager_1.networkManager.startMonitoring();
        // 添加网络监听器
        network_manager_1.networkManager.addListener({
            onNetworkStateChanged: this.handleNetworkStateChange.bind(this),
            onNetworkEvent: this.handleNetworkEvent.bind(this),
            onNetworkError: this.handleNetworkError.bind(this),
            onSyncReady: this.handleSyncReady.bind(this),
            onNetworkPrediction: this.handleNetworkPrediction.bind(this)
        });
    }
    initializeQueueIntegration() {
        // 设置队列事件监听器
        sync_queue_1.syncQueueManager.setEventListeners({
            onOperationComplete: this.handleOperationComplete.bind(this),
            onBatchComplete: this.handleBatchComplete.bind(this),
            onQueueError: this.handleQueueError.bind(this),
            onStatusChange: this.handleQueueStatusChange.bind(this)
        });
    }
    /**
     * 设置DataSyncService集成
     */
    setupDataSyncIntegration() {
        // 监听DataSyncService的同步状态变化
        data_sync_service_1.dataSyncService.onSyncStatusChange((session) => {
            this.handleDataSyncStatusChange(session);
        });
    }
    /**
     * 初始化DataSyncService集成
     */
    initializeDataSyncIntegration() {
        // 配置数据验证参数
        data_sync_service_1.dataSyncService.configureValidation({
            level: ConsistencyLevel.RELAXED,
            autoRepair: true,
            scheduledValidation: true
        });
        // 配置批处理优化
        data_sync_service_1.dataSyncService.configureBatchOptimization({
            enabled: true,
            dynamicBatchSize: true,
            adaptiveDelay: true,
            networkAware: true
        });
        console.log('DataSyncService integration initialized');
    }
    startBackgroundSync() {
        // 基于网络质量的智能同步间隔
        setInterval(() => {
            if (this.shouldPerformBackgroundSync()) {
                this.performIncrementalSync();
            }
        }, this.getAdaptiveSyncInterval());
        // 定期处理本地同步队列（更频繁的本地操作处理）
        setInterval(() => {
            if (this.isOnline && !this.syncInProgress) {
                this.processLocalSyncQueue().catch(console.error);
            }
        }, 30000); // 每30秒处理一次本地同步队列
    }
    // ============================================================================
    // 离线管理集成
    // ============================================================================
    setupOfflineIntegration() {
        // 设置离线管理器事件监听器
        offline_manager_1.offlineManager.setEventListeners({
            onNetworkChange: (info) => this.handleOfflineNetworkChange(info),
            onOfflineOperation: (operation) => this.handleOfflineOperation(operation),
            onSyncProgress: (progress) => this.handleOfflineSyncProgress(progress),
            onConflict: (conflict) => this.handleOfflineConflict(conflict),
            onSyncComplete: (stats) => this.handleOfflineSyncComplete(stats),
            onError: (error) => this.handleOfflineError(error)
        });
    }
    handleOfflineNetworkChange(info) {
        this.isOnline = info.status === 'online';
        this.notifyStatusChange();
        if (this.isOnline) {
            // 网络恢复，触发同步
            this.performIncrementalSync().catch(console.error);
        }
    }
    handleOfflineOperation(operation) {
        // 将离线操作转换为统一同步操作
        const unifiedOperation = {
            id: operation.id,
            type: operation.type,
            entity: operation.entity,
            entityId: operation.entityId || '',
            data: operation.data,
            priority: this.mapOfflinePriorityToSyncPriority(operation.priority),
            timestamp: operation.timestamp,
            userId: operation.userId,
            metadata: {
                source: 'user',
                conflictResolution: operation.metadata?.conflictResolution,
                retryStrategy: 'delayed'
            }
        };
        // 添加到操作历史
        this.operationHistory.push(unifiedOperation);
    }
    handleOfflineSyncProgress(progress) {
        // 更新同步状态
        this.notifyListeners({
            status: 'syncing',
            progress: (progress.completed / progress.total) * 100,
            message: `离线同步进度: ${progress.completed}/${progress.total}`
        });
    }
    handleOfflineConflict(conflict) {
        // 将离线冲突转换为统一冲突格式
        const unifiedConflict = {
            id: conflict.id,
            entity: conflict.entityType,
            entityId: conflict.entityId,
            localData: conflict.localData,
            cloudData: conflict.remoteData,
            conflictType: this.mapOfflineConflictType(conflict.conflictType),
            resolution: conflict.resolution,
            timestamp: conflict.timestamp
        };
        this.conflicts.push(unifiedConflict);
        this.notifyStatusChange();
    }
    handleOfflineSyncComplete(stats) {
        // 更新同步指标
        this.metrics.totalOperations += stats.completedOfflineOperations;
        this.metrics.successfulOperations += stats.completedOfflineOperations;
        this.metrics.failedOperations += stats.failedOperations;
        this.metrics.lastSyncTime = stats.lastSyncTime;
        // 通知同步完成
        this.notifyListeners({
            status: 'completed',
            progress: 100,
            message: '离线同步完成'
        });
    }
    handleOfflineError(error) {
        console.error('离线管理器错误:', error);
        this.notifyListeners({
            status: 'error',
            progress: 0,
            message: `离线操作错误: ${error.message}`
        });
    }
    mapOfflinePriorityToSyncPriority(priority) {
        switch (priority) {
            case 'critical':
            case 'high':
                return 'high';
            case 'normal':
                return 'normal';
            case 'low':
                return 'low';
            default:
                return 'normal';
        }
    }
    mapOfflineConflictType(conflictType) {
        switch (conflictType) {
            case 'simultaneous_edit':
                return 'content';
            case 'delete_conflict':
                return 'version';
            case 'structure_conflict':
                return 'structure';
            default:
                return 'content';
        }
    }
    // ============================================================================
    // 核心同步功能
    // ============================================================================
    /**
     * 添加同步操作
     */
    async addOperation(operation) {
        const unifiedOp = {
            ...operation,
            id: crypto.randomUUID(),
            timestamp: new Date()
        };
        try {
            // 转换为队列操作格式
            const queueOp = {
                type: operation.type,
                entity: operation.entity,
                entityId: operation.entityId,
                userId: operation.userId,
                data: operation.data,
                priority: operation.priority,
                retryCount: 0,
                maxRetries: this.getMaxRetries(operation.priority),
                dependencies: this.getOperationDependencies(operation)
            };
            // 添加到队列
            const operationId = await sync_queue_1.syncQueueManager.enqueueOperation(queueOp);
            // 记录操作历史
            this.operationHistory.push(unifiedOp);
            // 更新指标
            this.updateMetrics({ totalOperations: this.metrics.totalOperations + 1 });
            // 如果条件允许，立即处理
            if (this.shouldProcessImmediately()) {
                this.processNextOperations();
            }
            return operationId;
        }
        catch (error) {
            console.error('Failed to add sync operation:', error);
            throw error;
        }
    }
    /**
     * 执行完整同步
     */
    async performFullSync() {
        if (this.syncInProgress || !this.canSync()) {
            return;
        }
        this.syncInProgress = true;
        this.notifyStatusChange();
        try {
            const startTime = performance.now();
            // 优先使用DataSyncService进行双向同步
            const syncSession = await data_sync_service_1.dataSyncService.performFullSync(SyncDirection.BIDIRECTIONAL);
            // 如果DataSyncService失败，使用备用同步策略
            if (syncSession.state === 'error') {
                console.warn('DataSyncService failed, falling back to legacy sync');
                await this.performLegacyFullSync();
            }
            else {
                console.log(`DataSyncService completed: ${syncSession.processed} operations`);
            }
            const syncTime = performance.now() - startTime;
            this.lastFullSync = new Date();
            // 更新指标
            this.updateMetrics({
                lastSyncTime: this.lastFullSync,
                averageSyncTime: (this.metrics.averageSyncTime + syncTime) / 2
            });
            console.log(`Unified full sync completed in ${syncTime}ms`);
        }
        catch (error) {
            console.error('Full sync failed:', error);
            throw error;
        }
        finally {
            this.syncInProgress = false;
            this.notifyStatusChange();
        }
    }
    /**
     * 备用的传统同步方法
     */
    async performLegacyFullSync() {
        // 处理本地同步队列（优先处理用户本地操作）
        await this.processLocalSyncQueue();
        // 下行同步：从云端获取最新数据
        await this.syncFromCloud();
        // 上行同步：处理本地队列
        await this.processSyncQueue();
        // 冲突检测和解决
        await this.detectAndResolveConflicts();
        // 数据一致性检查
        await this.verifyDataConsistency();
    }
    /**
     * 执行增量同步
     */
    async performIncrementalSync() {
        if (this.syncInProgress || !this.canSync()) {
            return;
        }
        try {
            // 优先使用DataSyncService进行增量同步
            await data_sync_service_1.dataSyncService.performIncrementalSync();
            // 处理本地同步队列（优先级最高）
            await this.processLocalSyncQueue();
            // 只处理高优先级操作
            await this.processHighPriorityOperations();
            // 检查云端更新
            await this.checkCloudUpdates();
            // 清理缓存
            this.cleanupCache();
        }
        catch (error) {
            console.error('Incremental sync failed:', error);
        }
    }
    // ============================================================================
    // 本地操作服务集成
    // ========================================================================
    /**
     * 处理本地操作队列中的同步操作
     */
    async processLocalSyncQueue() {
        if (!this.isOnline)
            return;
        try {
            // 从本地操作服务获取待处理的操作
            const pendingOperations = await local_operation_1.localOperationService.getPendingSyncOperations();
            if (pendingOperations.length === 0) {
                return;
            }
            console.log(`Processing ${pendingOperations.length} local sync operations`);
            // 批量处理本地操作
            const results = await this.processBatchLocalOperations(pendingOperations);
            // 更新本地操作状态
            await local_operation_1.localOperationService.updateOperationStatuses(results);
            // 更新同步统计
            this.metrics.totalOperations += results.length;
            this.metrics.successfulOperations += results.filter(r => r.success).length;
            this.metrics.failedOperations += results.filter(r => !r.success).length;
        }
        catch (error) {
            console.error('Failed to process local sync queue:', error);
        }
    }
    /**
     * 批量处理本地同步操作
     */
    async processBatchLocalOperations(operations) {
        const results = [];
        // 按操作类型分组
        const operationGroups = this.groupLocalOperationsByType(operations);
        // 处理每个操作组
        for (const [operationType, typeOperations] of Object.entries(operationGroups)) {
            const groupResults = await this.processLocalOperationGroup(operationType, typeOperations);
            results.push(...groupResults);
        }
        return results;
    }
    /**
     * 按类型分组本地操作
     */
    groupLocalOperationsByType(operations) {
        const groups = {};
        for (const operation of operations) {
            const key = `${operation.entityType}_${operation.operationType}`;
            if (!groups[key]) {
                groups[key] = [];
            }
            groups[key].push(operation);
        }
        return groups;
    }
    /**
     * 处理本地操作组
     */
    async processLocalOperationGroup(operationType, operations) {
        const results = [];
        try {
            switch (operationType) {
                case 'card_create':
                case 'card_update':
                case 'card_delete':
                    await this.processCardOperations(operations, results);
                    break;
                case 'folder_create':
                case 'folder_update':
                case 'folder_delete':
                    await this.processFolderOperations(operations, results);
                    break;
                case 'tag_create':
                case 'tag_update':
                case 'tag_delete':
                    await this.processTagOperations(operations, results);
                    break;
                default:
                    console.warn(`Unknown operation type: ${operationType}`);
                    for (const op of operations) {
                        results.push({
                            operationId: op.id,
                            success: false,
                            error: `Unknown operation type: ${operationType}`
                        });
                    }
            }
        }
        catch (error) {
            console.error(`Failed to process operation group ${operationType}:`, error);
            for (const op of operations) {
                results.push({
                    operationId: op.id,
                    success: false,
                    error: error instanceof Error ? error.message : 'Unknown error'
                });
            }
        }
        return results;
    }
    /**
     * 处理卡片操作
     */
    async processCardOperations(operations, results) {
        for (const operation of operations) {
            try {
                switch (operation.operationType) {
                    case 'create':
                        await supabase_1.supabase
                            .from('cards')
                            .insert(operation.data)
                            .select()
                            .single();
                        break;
                    case 'update':
                        await supabase_1.supabase
                            .from('cards')
                            .update(operation.data)
                            .eq('id', operation.entityId);
                        break;
                    case 'delete':
                        await supabase_1.supabase
                            .from('cards')
                            .delete()
                            .eq('id', operation.entityId);
                        break;
                }
                results.push({
                    operationId: operation.id,
                    success: true
                });
            }
            catch (error) {
                results.push({
                    operationId: operation.id,
                    success: false,
                    error: error instanceof Error ? error.message : 'Unknown error'
                });
            }
        }
    }
    /**
     * 处理文件夹操作
     */
    async processFolderOperations(operations, results) {
        for (const operation of operations) {
            try {
                switch (operation.operationType) {
                    case 'create':
                        await supabase_1.supabase
                            .from('folders')
                            .insert(operation.data)
                            .select()
                            .single();
                        break;
                    case 'update':
                        await supabase_1.supabase
                            .from('folders')
                            .update(operation.data)
                            .eq('id', operation.entityId);
                        break;
                    case 'delete':
                        await supabase_1.supabase
                            .from('folders')
                            .delete()
                            .eq('id', operation.entityId);
                        break;
                }
                results.push({
                    operationId: operation.id,
                    success: true
                });
            }
            catch (error) {
                results.push({
                    operationId: operation.id,
                    success: false,
                    error: error instanceof Error ? error.message : 'Unknown error'
                });
            }
        }
    }
    /**
     * 处理标签操作
     */
    async processTagOperations(operations, results) {
        for (const operation of operations) {
            try {
                switch (operation.operationType) {
                    case 'create':
                        await supabase_1.supabase
                            .from('tags')
                            .insert(operation.data)
                            .select()
                            .single();
                        break;
                    case 'update':
                        await supabase_1.supabase
                            .from('tags')
                            .update(operation.data)
                            .eq('id', operation.entityId);
                        break;
                    case 'delete':
                        await supabase_1.supabase
                            .from('tags')
                            .delete()
                            .eq('id', operation.entityId);
                        break;
                }
                results.push({
                    operationId: operation.id,
                    success: true
                });
            }
            catch (error) {
                results.push({
                    operationId: operation.id,
                    success: false,
                    error: error instanceof Error ? error.message : 'Unknown error'
                });
            }
        }
    }
    /**
     * 从本地操作服务获取待同步的操作
     */
    async getLocalSyncOperations() {
        return await local_operation_1.localOperationService.getPendingSyncOperations();
    }
    /**
     * 触发本地操作队列处理
     */
    async triggerLocalSyncProcessing() {
        if (this.syncInProgress) {
            console.log('Sync already in progress, skipping local sync processing');
            return;
        }
        await this.processLocalSyncQueue();
    }
    // ============================================================================
    // 数据同步实现
    // ============================================================================
    async syncFromCloud() {
        if (!this.authService?.isAuthenticated())
            return;
        const user = this.authService.getCurrentUser();
        if (!user)
            return;
        const lastSync = this.lastFullSync || new Date(0);
        // 使用查询优化器并行获取数据
        const [cards, folders, tags] = await Promise.all([
            this.getCloudData('cards', user.id, lastSync),
            this.getCloudData('folders', user.id, lastSync),
            this.getCloudData('tags', user.id, lastSync)
        ]);
        // 并行处理数据合并
        await Promise.all([
            this.mergeCloudCards(cards),
            this.mergeCloudFolders(folders),
            this.mergeCloudTags(tags)
        ]);
    }
    async getCloudData(table, userId, since) {
        const cacheKey = `${table}_${userId}_${since.toISOString()}`;
        // 检查缓存
        if (this.syncCache.has(cacheKey)) {
            this.updateCacheHitRate(true);
            return this.syncCache.get(cacheKey);
        }
        this.updateCacheHitRate(false);
        // 使用查询优化器
        const query = supabase_1.supabase
            .from(table)
            .select('*')
            .eq('user_id', userId)
            .gte('updated_at', since.toISOString());
        const { data, error } = await query;
        if (error)
            throw error;
        // 缓存结果
        this.syncCache.set(cacheKey, data || []);
        return data || [];
    }
    async mergeCloudCards(cloudCards) {
        for (const cloudCard of cloudCards) {
            const localCard = await database_1.db.cards?.get(cloudCard.id);
            if (!localCard) {
                // 新卡片，直接添加
                await database_1.db.cards?.add(data_converter_1.dataConverter.fromCloudCard(cloudCard));
            }
            else {
                // 使用最后写入获胜策略
                await this.resolveCardConflict(localCard, cloudCard);
            }
        }
    }
    async mergeCloudFolders(cloudFolders) {
        for (const cloudFolder of cloudFolders) {
            const localFolder = await database_1.db.folders?.get(cloudFolder.id);
            if (!localFolder) {
                await database_1.db.folders?.add(data_converter_1.dataConverter.fromCloudFolder(cloudFolder));
            }
            else {
                await this.resolveFolderConflict(localFolder, cloudFolder);
            }
        }
    }
    async mergeCloudTags(cloudTags) {
        for (const cloudTag of cloudTags) {
            const localTag = await database_1.db.tags?.get(cloudTag.id);
            if (!localTag) {
                await database_1.db.tags?.add(data_converter_1.dataConverter.fromCloudTag(cloudTag));
            }
            else {
                await this.resolveTagConflict(localTag, cloudTag);
            }
        }
    }
    // ============================================================================
    // 冲突处理
    // ============================================================================
    async detectAndResolveConflicts() {
        const conflicts = await this.detectConflicts();
        for (const conflict of conflicts) {
            await this.resolveConflict(conflict);
        }
    }
    async detectConflicts() {
        const conflicts = [];
        // 检测卡片冲突
        const cardConflicts = await this.detectCardConflicts();
        conflicts.push(...cardConflicts);
        // 检测文件夹冲突
        const folderConflicts = await this.detectFolderConflicts();
        conflicts.push(...folderConflicts);
        // 检测标签冲突
        const tagConflicts = await this.detectTagConflicts();
        conflicts.push(...tagConflicts);
        return conflicts;
    }
    async resolveCardConflict(localCard, cloudCard) {
        const localTime = new Date(localCard.updatedAt).getTime();
        const cloudTime = new Date(cloudCard.updated_at).getTime();
        if (cloudTime > localTime) {
            // 云端数据更新
            await database_1.db.cards?.update(cloudCard.id, data_converter_1.dataConverter.fromCloudCard(cloudCard));
        }
        else if (localTime > cloudTime && localCard.pendingSync) {
            // 本地数据更新，加入同步队列
            await this.addOperation({
                type: 'update',
                entity: 'card',
                entityId: localCard.id,
                data: localCard,
                priority: 'normal',
                userId: localCard.userId
            });
        }
    }
    async resolveFolderConflict(localFolder, cloudFolder) {
        const localTime = new Date(localFolder.updatedAt).getTime();
        const cloudTime = new Date(cloudFolder.updated_at).getTime();
        if (cloudTime > localTime) {
            await database_1.db.folders?.update(cloudFolder.id, data_converter_1.dataConverter.fromCloudFolder(cloudFolder));
        }
        else if (localTime > cloudTime && localFolder.pendingSync) {
            await this.addOperation({
                type: 'update',
                entity: 'folder',
                entityId: localFolder.id,
                data: localFolder,
                priority: 'normal',
                userId: localFolder.userId
            });
        }
    }
    async resolveTagConflict(localTag, cloudTag) {
        const localTime = new Date(localTag.updatedAt).getTime();
        const cloudTime = new Date(cloudTag.updated_at).getTime();
        if (cloudTime > localTime) {
            await database_1.db.tags?.update(cloudTag.id, data_converter_1.dataConverter.fromCloudTag(cloudTag));
        }
        else if (localTime > cloudTime && localTag.pendingSync) {
            await this.addOperation({
                type: 'update',
                entity: 'tag',
                entityId: localTag.id,
                data: localTag,
                priority: 'normal',
                userId: localTag.userId
            });
        }
    }
    // ============================================================================
    // 队列处理
    // ============================================================================
    async processSyncQueue() {
        // 委托给同步队列管理器
        // 队列管理器会自动处理优先级、重试和批处理
    }
    async processNextOperations() {
        if (this.syncInProgress)
            return;
        this.syncInProgress = true;
        try {
            await sync_queue_1.syncQueueManager.processNextBatch();
        }
        finally {
            this.syncInProgress = false;
        }
    }
    async processHighPriorityOperations() {
        const highPriorityOps = await sync_queue_1.syncQueueManager.getOperations({
            priority: 'high',
            limit: 5
        });
        if (highPriorityOps.length > 0) {
            await this.processNextOperations();
        }
    }
    // ============================================================================
    // 网络和状态管理
    // ============================================================================
    handleNetworkStateChange(state) {
        this.isOnline = state.isOnline;
        if (state.isOnline && state.canSync) {
            // 网络恢复，立即同步
            this.performIncrementalSync().catch(console.error);
        }
        // 更新网络质量指标
        this.metrics.networkQuality = state.quality;
        this.notifyStatusChange();
    }
    handleNetworkEvent(event) {
        console.log('Network event in sync service:', event.type);
        switch (event.type) {
            case 'online':
                this.handleNetworkRestored();
                break;
            case 'offline':
                this.handleNetworkLost();
                break;
            case 'sync-ready':
                this.handleSyncReady(event.currentState.syncStrategy);
                break;
        }
    }
    handleSyncReady(strategy) {
        console.log('Sync ready with strategy:', strategy);
        // 网络准备好同步，触发同步操作
        if (!this.syncInProgress && this.authService?.isAuthenticated()) {
            this.performIncrementalSync().catch(console.error);
        }
    }
    handleNetworkPrediction(prediction) {
        console.log('Network prediction:', prediction);
        // 根据预测调整同步策略
        if (!prediction.isStable) {
            // 网络不稳定，采用保守策略
            sync_queue_1.syncQueueManager.setConservativeMode(true);
        }
        else {
            sync_queue_1.syncQueueManager.setConservativeMode(false);
        }
    }
    handleNetworkRestored() {
        console.log('Network restored, resuming sync operations');
        // 恢复同步队列
        sync_queue_1.syncQueueManager.resume();
        // 立即执行同步
        this.performIncrementalSync().catch(console.error);
    }
    handleNetworkLost() {
        console.log('Network lost, pausing sync operations');
        // 暂停同步队列
        sync_queue_1.syncQueueManager.pause();
    }
    handleNetworkError(error, context) {
        console.warn('Network error in sync service:', error.message, context);
        // 根据错误类型调整策略
        if (error.type === 'connection_lost') {
            sync_queue_1.syncQueueManager.pause();
        }
    }
    handleSyncCompleted(request, response) {
        if (response.success) {
            this.metrics.lastSyncTime = new Date();
        }
    }
    handleSyncStrategyChanged(strategy) {
        console.log('Sync strategy changed:', strategy);
    }
    handleOperationComplete(operation, success) {
        if (success) {
            this.updateMetrics({
                successfulOperations: this.metrics.successfulOperations + 1
            });
        }
        else {
            this.updateMetrics({
                failedOperations: this.metrics.failedOperations + 1
            });
        }
    }
    handleBatchComplete(result) {
        console.log('Batch sync completed:', result);
    }
    handleQueueError(error) {
        console.error('Queue error:', error);
    }
    handleQueueStatusChange(stats) {
        this.notifyStatusChange();
    }
    /**
     * 处理DataSyncService状态变化
     */
    handleDataSyncStatusChange(session) {
        console.log('DataSyncService status change:', session.state, session.direction);
        // 更新统一同步状态
        this.syncInProgress = session.state === 'syncing';
        // 更新同步指标
        if (session.state === 'completed') {
            this.lastFullSync = session.endTime;
            this.updateMetricsFromDataSync(session);
        }
        // 处理同步错误
        if (session.state === 'error') {
            console.error('DataSyncService error:', session);
            this.handleSyncError(session);
        }
        this.notifyStatusChange();
    }
    /**
     * 从DataSyncService更新指标
     */
    updateMetricsFromDataSync(session) {
        this.metrics.totalOperations += session.processed;
        this.metrics.successfulOperations += session.successful;
        this.metrics.failedOperations += session.failed;
        this.metrics.conflictsCount += session.conflicts;
        this.metrics.lastSyncTime = session.endTime;
        // 计算平均同步时间
        if (session.duration) {
            const totalTime = this.metrics.averageSyncTime * (this.metrics.totalOperations - session.processed) + session.duration;
            this.metrics.averageSyncTime = totalTime / this.metrics.totalOperations;
        }
    }
    /**
     * 处理DataSyncService同步错误
     */
    handleSyncError(session) {
        // 记录错误并通知监听器
        this.notifyListeners({
            status: 'error',
            error: 'Data sync failed',
            details: {
                processed: session.processed,
                successful: session.successful,
                failed: session.failed,
                conflicts: session.conflicts
            }
        });
    }
    // ============================================================================
    // 辅助方法
    // ============================================================================
    canSync() {
        const networkState = network_manager_1.networkManager.getCurrentStatus();
        return this.isOnline &&
            this.authService?.isAuthenticated() &&
            networkState.canSync;
    }
    shouldProcessImmediately() {
        return this.canSync() && !this.syncInProgress;
    }
    shouldPerformBackgroundSync() {
        const networkState = network_manager_1.networkManager.getCurrentStatus();
        return networkState.canSync &&
            !this.syncInProgress &&
            this.authService?.isAuthenticated();
    }
    getAdaptiveSyncInterval() {
        const networkState = network_manager_1.networkManager.getCurrentStatus();
        switch (networkState.quality) {
            case 'excellent': return 60 * 1000; // 1分钟
            case 'good': return 2 * 60 * 1000; // 2分钟
            case 'fair': return 5 * 60 * 1000; // 5分钟
            case 'poor': return 10 * 60 * 1000; // 10分钟
            default: return 5 * 60 * 1000;
        }
    }
    getMaxRetries(priority) {
        switch (priority) {
            case 'high': return 5;
            case 'normal': return 3;
            case 'low': return 1;
        }
    }
    getOperationDependencies(operation) {
        // 根据操作类型确定依赖关系
        const dependencies = [];
        if (operation.entity === 'card' && operation.data.folderId) {
            // 卡片操作可能依赖文件夹操作
            dependencies.push(`folder_${operation.data.folderId}`);
        }
        return dependencies;
    }
    updateCacheHitRate(isHit) {
        // 简单的缓存命中率计算
        const total = this.metrics.totalOperations || 1;
        const hits = isHit ? (this.metrics.cacheHitRate * total + 1) : (this.metrics.cacheHitRate * total);
        this.updateMetrics({ cacheHitRate: hits / (total + 1) });
    }
    updateMetrics(updates) {
        this.metrics = { ...this.metrics, ...updates };
    }
    cleanupCache() {
        // 清理过期缓存
        const now = Date.now();
        const maxAge = 5 * 60 * 1000; // 5分钟
        for (const [key, value] of this.syncCache.entries()) {
            if (now - value.timestamp > maxAge) {
                this.syncCache.delete(key);
            }
        }
    }
    async checkCloudUpdates() {
        // 检查云端更新，使用增量同步
        if (this.lastFullSync) {
            const timeSinceLastSync = Date.now() - this.lastFullSync.getTime();
            // 如果超过30分钟，执行完整同步
            if (timeSinceLastSync > 30 * 60 * 1000) {
                await this.performFullSync();
            }
        }
    }
    async verifyDataConsistency() {
        // 验证本地和云端数据一致性
        // 这里可以实现数据校验逻辑
    }
    // ============================================================================
    // 事件监听器
    // ============================================================================
    setAuthService(authService) {
        this.authService = authService;
        // 监听认证状态变化
        authService.onAuthStateChange((authState) => {
            if (authState.user && this.canSync()) {
                this.performFullSync();
            }
        });
    }
    onStatusChange(callback) {
        this.listeners.add(callback);
        callback(this.getCurrentStatus());
        return () => {
            this.listeners.delete(callback);
        };
    }
    async notifyStatusChange() {
        const status = await this.getCurrentStatus();
        this.listeners.forEach(listener => listener(status));
    }
    async getCurrentStatus() {
        const networkState = network_manager_1.networkManager.getCurrentStatus();
        const queueStats = await sync_queue_1.syncQueueManager.getQueueStats();
        return {
            isOnline: networkState.isOnline,
            lastSyncTime: this.metrics.lastSyncTime,
            pendingOperations: queueStats.totalOperations,
            syncInProgress: this.syncInProgress,
            hasConflicts: this.conflicts.length > 0
        };
    }
    // ============================================================================
    // 公共API
    // ============================================================================
    async getMetrics() {
        return { ...this.metrics };
    }
    async getConflicts() {
        return [...this.conflicts];
    }
    async getOperationHistory(filters) {
        let history = [...this.operationHistory];
        if (filters?.entity) {
            history = history.filter(op => op.entity === filters.entity);
        }
        if (filters?.type) {
            history = history.filter(op => op.type === filters.type);
        }
        if (filters?.limit) {
            history = history.slice(0, filters.limit);
        }
        return history;
    }
    async clearHistory(olderThan) {
        if (olderThan) {
            this.operationHistory = this.operationHistory.filter(op => op.timestamp > olderThan);
        }
        else {
            this.operationHistory = [];
        }
    }
    async forceSync() {
        await this.performFullSync();
    }
    async pauseSync() {
        sync_queue_1.syncQueueManager.pause();
        this.syncInProgress = true;
    }
    async resumeSync() {
        sync_queue_1.syncQueueManager.resume();
        this.syncInProgress = false;
        this.processNextOperations();
    }
    // ============================================================================
    // DataSyncService集成方法
    // ============================================================================
    /**
     * 获取数据同步服务状态
     */
    async getDataSyncStatus() {
        return {
            currentState: data_sync_service_1.dataSyncService.getCurrentState(),
            currentSession: data_sync_service_1.dataSyncService.getCurrentSession(),
            metrics: data_sync_service_1.dataSyncService.getMetrics()
        };
    }
    /**
     * 获取数据一致性报告
     */
    async getDataConsistencyReport(level) {
        return await data_sync_service_1.dataSyncService.getDetailedConsistencyReport(level);
    }
    /**
     * 手动触发数据验证
     */
    async performDataValidation(level) {
        return await data_sync_service_1.dataSyncService.manualValidation(level);
    }
    /**
     * 获取批处理性能指标
     */
    async getBatchPerformanceMetrics() {
        return data_sync_service_1.dataSyncService.getBatchPerformanceMetrics();
    }
    /**
     * 配置数据验证参数
     */
    configureDataValidation(options) {
        data_sync_service_1.dataSyncService.configureValidation(options);
    }
    /**
     * 配置批处理优化
     */
    configureBatchOptimization(options) {
        data_sync_service_1.dataSyncService.configureBatchOptimization(options);
    }
    /**
     * 强制数据同步
     */
    async forceDataSync(direction) {
        return await data_sync_service_1.dataSyncService.forceSync(direction);
    }
}
exports.UnifiedSyncService = UnifiedSyncService;
// ============================================================================
// 导出单例实例
// ============================================================================
exports.unifiedSyncService = new UnifiedSyncService();
// ============================================================================
// 便利方法导出
// ============================================================================
const addSyncOperation = (operation) => exports.unifiedSyncService.addOperation(operation);
exports.addSyncOperation = addSyncOperation;
const performFullSync = () => exports.unifiedSyncService.performFullSync();
exports.performFullSync = performFullSync;
const performIncrementalSync = () => exports.unifiedSyncService.performIncrementalSync();
exports.performIncrementalSync = performIncrementalSync;
const getSyncMetrics = () => exports.unifiedSyncService.getMetrics();
exports.getSyncMetrics = getSyncMetrics;
const getSyncConflicts = () => exports.unifiedSyncService.getConflicts();
exports.getSyncConflicts = getSyncConflicts;
const getSyncHistory = (filters) => exports.unifiedSyncService.getOperationHistory(filters);
exports.getSyncHistory = getSyncHistory;
// ============================================================================
// DataSyncService集成便利方法
// ============================================================================
const getDataSyncStatus = () => exports.unifiedSyncService.getDataSyncStatus();
exports.getDataSyncStatus = getDataSyncStatus;
const getDataConsistencyReport = (level) => exports.unifiedSyncService.getDataConsistencyReport(level);
exports.getDataConsistencyReport = getDataConsistencyReport;
const performDataValidation = (level) => exports.unifiedSyncService.performDataValidation(level);
exports.performDataValidation = performDataValidation;
const getBatchPerformanceMetrics = () => exports.unifiedSyncService.getBatchPerformanceMetrics();
exports.getBatchPerformanceMetrics = getBatchPerformanceMetrics;
const configureDataValidation = (options) => exports.unifiedSyncService.configureDataValidation(options);
exports.configureDataValidation = configureDataValidation;
const configureBatchOptimization = (options) => exports.unifiedSyncService.configureBatchOptimization(options);
exports.configureBatchOptimization = configureBatchOptimization;
const forceDataSync = (direction) => exports.unifiedSyncService.forceDataSync(direction);
exports.forceDataSync = forceDataSync;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
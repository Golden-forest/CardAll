{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\file-system.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\file-system.ts"],"sourcesContent":["import { db, DbImage } from './database'\r\n\r\nexport interface FileSystemConfig {\r\n  baseDirectory: string\r\n  imageDirectory: string\r\n  tempDirectory: string\r\n  cacheDirectory: string\r\n}\r\n\r\nexport interface ProcessedImage {\r\n  id: string\r\n  fileName: string\r\n  filePath: string\r\n  thumbnailPath?: string\r\n  metadata: {\r\n    originalName: string\r\n    size: number\r\n    width: number\r\n    height: number\r\n    format: string\r\n    compressed: boolean\r\n  }\r\n}\r\n\r\nclass FileSystemService {\r\n  private config: FileSystemConfig\r\n  private directoryHandle: FileSystemDirectoryHandle | null = null\r\n  private isSupported: boolean\r\n\r\n  constructor() {\r\n    this.config = {\r\n      baseDirectory: 'CardAll',\r\n      imageDirectory: 'images',\r\n      tempDirectory: 'temp',\r\n      cacheDirectory: 'cache'\r\n    }\r\n    \r\n    this.isSupported = 'showDirectoryPicker' in window\r\n  }\r\n\r\n  // 检查文件系统API支持\r\n  isFileSystemAccessSupported(): boolean {\r\n    return this.isSupported\r\n  }\r\n\r\n  // 请求目录访问权限\r\n  async requestDirectoryAccess(): Promise<boolean> {\r\n    if (!this.isSupported) {\r\n      console.warn('File System Access API not supported, using fallback storage')\r\n      return false\r\n    }\r\n\r\n    try {\r\n      this.directoryHandle = await (window as any).showDirectoryPicker({\r\n        mode: 'readwrite',\r\n        startIn: 'documents'\r\n      })\r\n      \r\n      // 创建必要的子目录\r\n      await this.ensureDirectoryStructure()\r\n      return true\r\n    } catch (error) {\r\n      if (error.name === 'AbortError') {\r\n        console.log('User cancelled directory selection')\r\n      } else {\r\n        console.error('Failed to access directory:', error)\r\n      }\r\n      return false\r\n    }\r\n  }\r\n\r\n  // 确保目录结构存在\r\n  private async ensureDirectoryStructure(): Promise<void> {\r\n    if (!this.directoryHandle) return\r\n\r\n    try {\r\n      // 创建主要目录\r\n      await this.getOrCreateDirectory(this.config.imageDirectory)\r\n      await this.getOrCreateDirectory(this.config.tempDirectory)\r\n      await this.getOrCreateDirectory(this.config.cacheDirectory)\r\n      \r\n      console.log('Directory structure created successfully')\r\n    } catch (error) {\r\n      console.error('Failed to create directory structure:', error)\r\n    }\r\n  }\r\n\r\n  // 获取或创建目录\r\n  private async getOrCreateDirectory(name: string): Promise<FileSystemDirectoryHandle> {\r\n    if (!this.directoryHandle) {\r\n      throw new Error('No directory handle available')\r\n    }\r\n\r\n    try {\r\n      return await this.directoryHandle.getDirectoryHandle(name)\r\n    } catch (error) {\r\n      // 目录不存在，创建它\r\n      return await this.directoryHandle.getDirectoryHandle(name, { create: true })\r\n    }\r\n  }\r\n\r\n  // 获取或创建嵌套目录路径\r\n  private async getOrCreateNestedDirectory(path: string): Promise<FileSystemDirectoryHandle> {\r\n    if (!this.directoryHandle) {\r\n      throw new Error('No directory handle available')\r\n    }\r\n\r\n    const parts = path.split('/')\r\n    let currentHandle = this.directoryHandle\r\n\r\n    for (const part of parts) {\r\n      if (part) {\r\n        try {\r\n          currentHandle = await currentHandle.getDirectoryHandle(part)\r\n        } catch (error) {\r\n          currentHandle = await currentHandle.getDirectoryHandle(part, { create: true })\r\n        }\r\n      }\r\n    }\r\n\r\n    return currentHandle\r\n  }\r\n\r\n  // 生成文件路径\r\n  generateImagePath(cardId: string, folderId?: string): string {\r\n    const folderPath = folderId || 'uncategorized'\r\n    return `${this.config.imageDirectory}/${folderPath}/${cardId}`\r\n  }\r\n\r\n  // 处理和保存图片\r\n  async saveImage(\r\n    file: File, \r\n    cardId: string, \r\n    folderId?: string\r\n  ): Promise<ProcessedImage> {\r\n    const imageId = `img_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\r\n    const fileName = `${imageId}.webp`\r\n    const imagePath = this.generateImagePath(cardId, folderId)\r\n    const fullPath = `${imagePath}/${fileName}`\r\n\r\n    try {\r\n      // 处理图片（压缩和转换格式）\r\n      const processedBlob = await this.processImage(file)\r\n      const metadata = await this.getImageMetadata(file, processedBlob)\r\n\r\n      if (this.isSupported && this.directoryHandle) {\r\n        // 使用File System Access API保存\r\n        await this.saveToFileSystem(fullPath, processedBlob)\r\n      } else {\r\n        // 降级到IndexedDB存储\r\n        await this.saveToIndexedDB(fullPath, processedBlob)\r\n      }\r\n\r\n      // 保存图片记录到数据库\r\n      const dbImage: DbImage = {\r\n        id: imageId,\r\n        cardId,\r\n        fileName,\r\n        filePath: fullPath,\r\n        metadata,\r\n        createdAt: new Date(),\r\n        syncVersion: 1,\r\n        pendingSync: true\r\n      }\r\n\r\n      await db.images.add(dbImage)\r\n\r\n      return {\r\n        id: imageId,\r\n        fileName,\r\n        filePath: fullPath,\r\n        metadata\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to save image:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  // 处理图片（压缩和格式转换）\r\n  private async processImage(file: File): Promise<Blob> {\r\n    return new Promise((resolve, reject) => {\r\n      const canvas = document.createElement('canvas')\r\n      const ctx = canvas.getContext('2d')\r\n      const img = new Image()\r\n\r\n      img.onload = () => {\r\n        try {\r\n          // 计算目标尺寸\r\n          const maxWidth = 1920\r\n          const maxHeight = 1080\r\n          let { width, height } = img\r\n\r\n          if (width > maxWidth || height > maxHeight) {\r\n            const ratio = Math.min(maxWidth / width, maxHeight / height)\r\n            width *= ratio\r\n            height *= ratio\r\n          }\r\n\r\n          canvas.width = width\r\n          canvas.height = height\r\n\r\n          // 绘制图片\r\n          ctx?.drawImage(img, 0, 0, width, height)\r\n\r\n          // 转换为WebP格式\r\n          canvas.toBlob(\r\n            (blob) => {\r\n              if (blob) {\r\n                resolve(blob)\r\n              } else {\r\n                reject(new Error('Failed to convert image'))\r\n              }\r\n            },\r\n            'image/webp',\r\n            0.8 // 质量设置\r\n          )\r\n        } catch (error) {\r\n          reject(error)\r\n        }\r\n      }\r\n\r\n      img.onerror = () => reject(new Error('Failed to load image'))\r\n      img.src = URL.createObjectURL(file)\r\n    })\r\n  }\r\n\r\n  // 获取图片元数据\r\n  private async getImageMetadata(originalFile: File, processedBlob: Blob): Promise<any> {\r\n    return new Promise((resolve) => {\r\n      const img = new Image()\r\n      img.onload = () => {\r\n        resolve({\r\n          originalName: originalFile.name,\r\n          size: processedBlob.size,\r\n          width: img.width,\r\n          height: img.height,\r\n          format: 'webp',\r\n          compressed: true\r\n        })\r\n      }\r\n      img.src = URL.createObjectURL(processedBlob)\r\n    })\r\n  }\r\n\r\n  // 保存到文件系统\r\n  private async saveToFileSystem(path: string, blob: Blob): Promise<void> {\r\n    if (!this.directoryHandle) {\r\n      throw new Error('No directory handle available')\r\n    }\r\n\r\n    const pathParts = path.split('/')\r\n    const fileName = pathParts.pop()!\r\n    const dirPath = pathParts.join('/')\r\n\r\n    // 创建目录结构\r\n    const dirHandle = await this.getOrCreateNestedDirectory(dirPath)\r\n    \r\n    // 创建文件\r\n    const fileHandle = await dirHandle.getFileHandle(fileName, { create: true })\r\n    const writable = await fileHandle.createWritable()\r\n    \r\n    await writable.write(blob)\r\n    await writable.close()\r\n  }\r\n\r\n  // 降级保存到IndexedDB\r\n  private async saveToIndexedDB(path: string, blob: Blob): Promise<void> {\r\n    // 将blob转换为ArrayBuffer存储在IndexedDB中\r\n    const arrayBuffer = await blob.arrayBuffer()\r\n    \r\n    // 这里可以使用一个专门的表来存储文件数据\r\n    // 暂时先用localStorage作为演示\r\n    const base64 = await this.blobToBase64(blob)\r\n    localStorage.setItem(`cardall_file_${path}`, base64)\r\n  }\r\n\r\n  // Blob转Base64\r\n  private blobToBase64(blob: Blob): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader()\r\n      reader.onload = () => resolve(reader.result as string)\r\n      reader.onerror = reject\r\n      reader.readAsDataURL(blob)\r\n    })\r\n  }\r\n\r\n  // 获取图片\r\n  async getImage(imagePath: string): Promise<string> {\r\n    try {\r\n      if (this.isSupported && this.directoryHandle) {\r\n        return await this.getFromFileSystem(imagePath)\r\n      } else {\r\n        return await this.getFromIndexedDB(imagePath)\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to get image:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  // 从文件系统获取图片\r\n  private async getFromFileSystem(path: string): Promise<string> {\r\n    if (!this.directoryHandle) {\r\n      throw new Error('No directory handle available')\r\n    }\r\n\r\n    const pathParts = path.split('/')\r\n    const fileName = pathParts.pop()!\r\n    const dirPath = pathParts.join('/')\r\n\r\n    const dirHandle = await this.getOrCreateNestedDirectory(dirPath)\r\n    const fileHandle = await dirHandle.getFileHandle(fileName)\r\n    const file = await fileHandle.getFile()\r\n    \r\n    return URL.createObjectURL(file)\r\n  }\r\n\r\n  // 从IndexedDB获取图片\r\n  private async getFromIndexedDB(path: string): Promise<string> {\r\n    const base64 = localStorage.getItem(`cardall_file_${path}`)\r\n    if (!base64) {\r\n      throw new Error('Image not found in storage')\r\n    }\r\n    return base64\r\n  }\r\n\r\n  // 删除图片\r\n  async deleteImage(imagePath: string): Promise<void> {\r\n    try {\r\n      if (this.isSupported && this.directoryHandle) {\r\n        await this.deleteFromFileSystem(imagePath)\r\n      } else {\r\n        await this.deleteFromIndexedDB(imagePath)\r\n      }\r\n\r\n      // 从数据库中删除记录\r\n      await db.images.where('filePath').equals(imagePath).delete()\r\n    } catch (error) {\r\n      console.error('Failed to delete image:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  // 从文件系统删除\r\n  private async deleteFromFileSystem(path: string): Promise<void> {\r\n    if (!this.directoryHandle) return\r\n\r\n    try {\r\n      const pathParts = path.split('/')\r\n      const fileName = pathParts.pop()!\r\n      const dirPath = pathParts.join('/')\r\n\r\n      const dirHandle = await this.getOrCreateNestedDirectory(dirPath)\r\n      await dirHandle.removeEntry(fileName)\r\n    } catch (error) {\r\n      console.warn('Failed to delete file from filesystem:', error)\r\n    }\r\n  }\r\n\r\n  // 从IndexedDB删除\r\n  private async deleteFromIndexedDB(path: string): Promise<void> {\r\n    localStorage.removeItem(`cardall_file_${path}`)\r\n  }\r\n\r\n  // 获取存储统计信息\r\n  async getStorageStats(): Promise<{\r\n    totalImages: number\r\n    totalSize: number\r\n    storageMode: 'filesystem' | 'indexeddb'\r\n  }> {\r\n    const images = await db.images.toArray()\r\n    const totalSize = images.reduce((sum, img) => sum + img.metadata.size, 0)\r\n\r\n    return {\r\n      totalImages: images.length,\r\n      totalSize,\r\n      storageMode: this.isSupported && this.directoryHandle ? 'filesystem' : 'indexeddb'\r\n    }\r\n  }\r\n}\r\n\r\n// 创建文件系统服务实例\r\nexport const fileSystemService = new FileSystemService()"],"version":3}
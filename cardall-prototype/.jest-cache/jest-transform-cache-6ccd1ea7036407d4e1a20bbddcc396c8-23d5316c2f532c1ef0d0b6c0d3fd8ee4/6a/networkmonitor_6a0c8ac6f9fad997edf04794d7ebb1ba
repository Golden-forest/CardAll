16aa60deff6ea98fd894bd293d1550aa
"use strict";
// ============================================================================
// 网络状态检测和监控服务
// ============================================================================
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNetworkStrategy = exports.waitForNetwork = exports.networkMonitorService = exports.NetworkMonitorService = exports.DEFAULT_NETWORK_CONFIG = void 0;
// 默认配置
exports.DEFAULT_NETWORK_CONFIG = {
    checkInterval: 5000, // 5秒
    qualityCheckInterval: 30000, // 30秒
    qualityThresholds: {
        excellent: { rtt: 100, downlink: 10 }, // <100ms, >10Mbps
        good: { rtt: 200, downlink: 5 }, // <200ms, >5Mbps
        fair: { rtt: 500, downlink: 1 }, // <500ms, >1Mbps
        poor: { rtt: 1000, downlink: 0.1 } // <1000ms, >0.1Mbps
    },
    reconnect: {
        maxAttempts: 10,
        initialDelay: 1000,
        maxDelay: 30000,
        backoffMultiplier: 2
    },
    healthCheck: {
        enabled: true,
        endpoints: [
            'https://www.google.com',
            'https://www.cloudflare.com',
            'https://www.github.com'
        ],
        timeout: 5000,
        successThreshold: 2 // 需要2个成功才认为网络健康
    },
    eventFilter: {
        minQualityChange: 0.1, // 10%质量变化才触发事件
        debounceTime: 1000
    }
};
// ============================================================================
// 网络监控服务
// ============================================================================
class NetworkMonitorService {
    constructor(config = {}) {
        Object.defineProperty(this, "config", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "currentState", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "isMonitoring", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "checkTimer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "qualityTimer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "reconnectTimer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "debounceTimer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        // 事件监听器
        Object.defineProperty(this, "listeners", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Set()
        });
        // 统计信息
        Object.defineProperty(this, "stats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "startTime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "lastOnlineTime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "lastOfflineTime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // 连接API（如果可用）
        Object.defineProperty(this, "connection", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "connectionTypes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ['wifi', 'cellular', 'ethernet', 'bluetooth', 'wimax', 'other', 'none']
        });
        // 重连状态
        Object.defineProperty(this, "reconnectAttempts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(this, "isReconnecting", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        this.config = { ...exports.DEFAULT_NETWORK_CONFIG, ...config };
        this.currentState = this.getInitialNetworkState();
        this.stats = this.getInitialStats();
        this.startTime = new Date();
        this.initialize();
    }
    // 初始化服务
    initialize() {
        // 获取网络连接API（如果可用）
        if ('connection' in navigator) {
            this.connection = navigator.connection;
        }
        // 监听在线/离线事件
        window.addEventListener('online', this.handleOnline.bind(this));
        window.addEventListener('offline', this.handleOffline.bind(this));
        // 监听连接变化（如果支持）
        if (this.connection) {
            this.connection.addEventListener('change', this.handleConnectionChange.bind(this));
        }
        console.log('NetworkMonitorService initialized');
    }
    // 获取初始网络状态
    getInitialNetworkState() {
        return {
            online: navigator.onLine,
            connectionType: this.getConnectionType(),
            effectiveType: this.getEffectiveType(),
            downlink: this.connection?.downlink,
            rtt: this.connection?.rtt,
            saveData: this.connection?.saveData,
            deviceMemory: navigator.deviceMemory,
            hardwareConcurrency: navigator.hardwareConcurrency,
            timestamp: new Date()
        };
    }
    // 获取初始统计信息
    getInitialStats() {
        return {
            connectionChanges: 0,
            onlineTime: 0,
            offlineTime: 0,
            averageQuality: 0,
            qualityHistory: [],
            averageRtt: 0,
            averageDownlink: 0,
            errorCount: 0,
            reconnectAttempts: 0,
            successfulReconnects: 0
        };
    }
    // ============================================================================
    // 公共方法
    // ============================================================================
    // 开始监控
    startMonitoring() {
        if (this.isMonitoring)
            return;
        this.isMonitoring = true;
        this.startPeriodicChecks();
        console.log('Network monitoring started');
        this.emitEvent({
            type: 'connection-change',
            timestamp: new Date(),
            currentState: this.currentState,
            details: { action: 'monitoring_started' }
        });
    }
    // 停止监控
    stopMonitoring() {
        if (!this.isMonitoring)
            return;
        this.isMonitoring = false;
        this.stopPeriodicChecks();
        console.log('Network monitoring stopped');
        this.emitEvent({
            type: 'connection-change',
            timestamp: new Date(),
            currentState: this.currentState,
            details: { action: 'monitoring_stopped' }
        });
    }
    // 获取当前网络状态
    getCurrentState() {
        return { ...this.currentState };
    }
    // 获取网络质量
    getNetworkQuality() {
        return this.calculateQuality(this.currentState);
    }
    // 获取网络质量分数（0-1）
    getNetworkQualityScore() {
        return this.calculateQualityScore(this.currentState);
    }
    // 获取统计信息
    getStats() {
        return { ...this.stats };
    }
    // 手动触发网络检查
    async checkNetwork() {
        const newState = await this.getCurrentNetworkInfo();
        await this.updateNetworkState(newState);
        return newState;
    }
    // 执行健康检查
    async performHealthCheck() {
        if (!this.config.healthCheck.enabled) {
            return this.currentState.online;
        }
        try {
            const promises = this.config.healthCheck.endpoints.map(endpoint => this.pingEndpoint(endpoint, this.config.healthCheck.timeout));
            const results = await Promise.allSettled(promises);
            const successCount = results.filter(result => result.status === 'fulfilled' && result.value).length;
            const isHealthy = successCount >= this.config.healthCheck.successThreshold;
            console.log(`Health check: ${successCount}/${this.config.healthCheck.endpoints.length} successful`);
            return isHealthy;
        }
        catch (error) {
            console.error('Health check failed:', error);
            return false;
        }
    }
    // ============================================================================
    // 事件监听器
    // ============================================================================
    // 添加事件监听器
    addEventListener(callback) {
        this.listeners.add(callback);
    }
    // 移除事件监听器
    removeEventListener(callback) {
        this.listeners.delete(callback);
    }
    // 发送事件
    emitEvent(event) {
        // 防抖处理
        if (this.config.eventFilter.debounceTime > 0) {
            if (this.debounceTimer) {
                clearTimeout(this.debounceTimer);
            }
            this.debounceTimer = setTimeout(() => {
                this.listeners.forEach(listener => {
                    try {
                        listener(event);
                    }
                    catch (error) {
                        console.error('Error in network event listener:', error);
                    }
                });
            }, this.config.eventFilter.debounceTime);
        }
        else {
            this.listeners.forEach(listener => {
                try {
                    listener(event);
                }
                catch (error) {
                    console.error('Error in network event listener:', error);
                }
            });
        }
    }
    // ============================================================================
    // 网络状态更新
    // ============================================================================
    // 处理在线事件
    async handleOnline() {
        console.log('Network online event detected');
        const previousState = { ...this.currentState };
        this.currentState.online = true;
        this.currentState.lastChange = new Date();
        this.lastOnlineTime = new Date();
        // 更新统计
        if (this.lastOfflineTime) {
            this.stats.offlineTime += Date.now() - this.lastOfflineTime.getTime();
            this.lastOfflineTime = undefined;
        }
        // 停止重连尝试
        this.stopReconnectAttempts();
        this.emitEvent({
            type: 'online',
            timestamp: new Date(),
            previousState,
            currentState: this.currentState
        });
        // 立即检查网络质量
        await this.checkNetwork();
    }
    // 处理离线事件
    handleOffline() {
        console.log('Network offline event detected');
        const previousState = { ...this.currentState };
        this.currentState.online = false;
        this.currentState.lastChange = new Date();
        this.lastOfflineTime = new Date();
        // 更新统计
        if (this.lastOnlineTime) {
            this.stats.onlineTime += Date.now() - this.lastOnlineTime.getTime();
        }
        this.emitEvent({
            type: 'offline',
            timestamp: new Date(),
            previousState,
            currentState: this.currentState
        });
        // 开始重连尝试
        this.startReconnectAttempts();
    }
    // 处理连接变化
    async handleConnectionChange() {
        console.log('Network connection change detected');
        const previousState = { ...this.currentState };
        const newState = await this.getCurrentNetworkInfo();
        // 检查是否有显著变化
        const qualityChange = Math.abs(this.calculateQualityScore(newState) - this.calculateQualityScore(previousState));
        if (qualityChange >= this.config.eventFilter.minQualityChange) {
            this.currentState = newState;
            this.currentState.lastChange = new Date();
            this.stats.connectionChanges++;
            this.emitEvent({
                type: 'connection-change',
                timestamp: new Date(),
                previousState,
                currentState: this.currentState
            });
        }
    }
    // 更新网络状态
    async updateNetworkState(newState) {
        const previousState = { ...this.currentState };
        const qualityChange = Math.abs(this.calculateQualityScore(newState) - this.calculateQualityScore(previousState));
        // 只在质量变化显著时更新
        if (qualityChange >= this.config.eventFilter.minQualityChange) {
            this.currentState = newState;
            this.currentState.lastChange = new Date();
            // 更新质量历史
            this.updateQualityHistory();
            // 发送质量变化事件
            this.emitEvent({
                type: 'quality-change',
                timestamp: new Date(),
                previousState,
                currentState: this.currentState,
                details: {
                    qualityChange,
                    previousQuality: this.calculateQuality(previousState),
                    currentQuality: this.calculateQuality(newState)
                }
            });
        }
    }
    // ============================================================================
    // 定期检查
    // ============================================================================
    // 启动定期检查
    startPeriodicChecks() {
        // 基础网络状态检查
        this.checkTimer = setInterval(async () => {
            if (this.isMonitoring) {
                await this.checkNetwork();
            }
        }, this.config.checkInterval);
        // 网络质量检查
        this.qualityTimer = setInterval(async () => {
            if (this.isMonitoring) {
                await this.performQualityCheck();
            }
        }, this.config.qualityCheckInterval);
    }
    // 停止定期检查
    stopPeriodicChecks() {
        if (this.checkTimer) {
            clearInterval(this.checkTimer);
            this.checkTimer = null;
        }
        if (this.qualityTimer) {
            clearInterval(this.qualityTimer);
            this.qualityTimer = null;
        }
    }
    // 执行质量检查
    async performQualityCheck() {
        try {
            const healthStatus = await this.performHealthCheck();
            if (!healthStatus && this.currentState.online) {
                // 网络显示在线但健康检查失败
                console.warn('Network appears online but health check failed');
                this.currentState.online = false;
                this.currentState.lastChange = new Date();
                this.emitEvent({
                    type: 'error',
                    timestamp: new Date(),
                    currentState: this.currentState,
                    details: { message: 'Health check failed despite online status' }
                });
            }
        }
        catch (error) {
            console.error('Quality check failed:', error);
            this.stats.errorCount++;
        }
    }
    // ============================================================================
    // 重连机制
    // ============================================================================
    // 开始重连尝试
    startReconnectAttempts() {
        if (this.isReconnecting)
            return;
        this.isReconnecting = true;
        this.reconnectAttempts = 0;
        this.scheduleReconnectAttempt();
    }
    // 停止重连尝试
    stopReconnectAttempts() {
        this.isReconnecting = false;
        if (this.reconnectTimer) {
            clearTimeout(this.reconnectTimer);
            this.reconnectTimer = null;
        }
    }
    // 安排重连尝试
    scheduleReconnectAttempt() {
        if (!this.isReconnecting || this.reconnectAttempts >= this.config.reconnect.maxAttempts) {
            this.isReconnecting = false;
            return;
        }
        const delay = Math.min(this.config.reconnect.initialDelay * Math.pow(this.config.reconnect.backoffMultiplier, this.reconnectAttempts), this.config.reconnect.maxDelay);
        this.reconnectTimer = setTimeout(async () => {
            this.reconnectAttempts++;
            this.stats.reconnectAttempts++;
            console.log(`Reconnect attempt ${this.reconnectAttempts}/${this.config.reconnect.maxAttempts}`);
            try {
                const isOnline = navigator.onLine;
                if (isOnline) {
                    const healthStatus = await this.performHealthCheck();
                    if (healthStatus) {
                        this.stats.successfulReconnects++;
                        this.isReconnecting = false;
                        console.log('Reconnect successful');
                        this.emitEvent({
                            type: 'online',
                            timestamp: new Date(),
                            currentState: this.currentState,
                            details: { reconnectAttempts: this.reconnectAttempts }
                        });
                        await this.handleOnline();
                        return;
                    }
                }
            }
            catch (error) {
                console.error('Reconnect attempt failed:', error);
            }
            // 继续下一次重连
            this.scheduleReconnectAttempt();
        }, delay);
    }
    // ============================================================================
    // 工具方法
    // ============================================================================
    // 获取当前网络信息
    async getCurrentNetworkInfo() {
        const baseInfo = this.getInitialNetworkState();
        // 执行健康检查获取更准确的状态
        if (this.config.healthCheck.enabled) {
            try {
                const isHealthy = await this.performHealthCheck();
                baseInfo.online = isHealthy && navigator.onLine;
            }
            catch (error) {
                console.warn('Health check failed, using navigator.onLine:', error);
            }
        }
        // 使用增强的网络状态检测
        if (baseInfo.online) {
            try {
                const enhancedInfo = await this.getEnhancedNetworkInfo();
                return { ...baseInfo, ...enhancedInfo };
            }
            catch (error) {
                console.warn('Enhanced network info failed, using basic info:', error);
            }
        }
        return baseInfo;
    }
    // 获取连接类型
    getConnectionType() {
        if (!this.connection)
            return 'none';
        const type = this.connection.type;
        return this.connectionTypes.includes(type) ? type : 'other';
    }
    // 获取有效连接类型
    getEffectiveType() {
        if (!this.connection)
            return 'unknown';
        const effectiveType = this.connection.effectiveType;
        return ['4g', '3g', '2g', 'slow-2g'].includes(effectiveType) ? effectiveType : 'unknown';
    }
    // 计算网络质量
    calculateQuality(info) {
        const score = this.calculateQualityScore(info);
        if (score >= 0.8)
            return 'excellent';
        if (score >= 0.6)
            return 'good';
        if (score >= 0.4)
            return 'fair';
        if (score >= 0.2)
            return 'poor';
        return 'offline';
    }
    // 计算网络质量分数（0-1）
    calculateQualityScore(info) {
        if (!info.online)
            return 0;
        let score = 0.5; // 基础分数（在线）
        // RTT评分
        if (info.rtt !== undefined) {
            if (info.rtt <= 100)
                score += 0.3;
            else if (info.rtt <= 200)
                score += 0.2;
            else if (info.rtt <= 500)
                score += 0.1;
        }
        // 下行速度评分
        if (info.downlink !== undefined) {
            if (info.downlink >= 10)
                score += 0.3;
            else if (info.downlink >= 5)
                score += 0.2;
            else if (info.downlink >= 1)
                score += 0.1;
        }
        // 连接类型评分
        if (info.connectionType === 'wifi' || info.connectionType === 'ethernet') {
            score += 0.1;
        }
        // 省数据模式扣分
        if (info.saveData) {
            score -= 0.1;
        }
        return Math.max(0, Math.min(1, score));
    }
    // 更新质量历史
    updateQualityHistory() {
        const quality = this.getNetworkQuality();
        const score = this.getNetworkQualityScore();
        this.stats.qualityHistory.push({
            timestamp: new Date(),
            quality,
            score
        });
        // 保留最近100条记录
        if (this.stats.qualityHistory.length > 100) {
            this.stats.qualityHistory = this.stats.qualityHistory.slice(-100);
        }
        // 更新平均质量
        const recentHistory = this.stats.qualityHistory.slice(-20); // 最近20条
        if (recentHistory.length > 0) {
            this.stats.averageQuality = recentHistory.reduce((sum, item) => sum + item.score, 0) / recentHistory.length;
        }
    }
    // Ping端点
    async pingEndpoint(endpoint, timeout) {
        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), timeout);
            const startTime = performance.now();
            const response = await fetch(`${endpoint}/favicon.ico`, {
                method: 'HEAD',
                signal: controller.signal,
                mode: 'no-cors',
                headers: {
                    'Cache-Control': 'no-cache',
                    'Pragma': 'no-cache'
                }
            });
            clearTimeout(timeoutId);
            const duration = performance.now() - startTime;
            // 记录响应时间用于网络质量评估
            this.recordResponseTime(duration);
            return true;
        }
        catch (error) {
            this.recordError('ping_failed', { endpoint, error: error instanceof Error ? error.message : String(error) });
            return false;
        }
    }
    // ============================================================================
    // 增强网络状态检测方法
    // ============================================================================
    /**
     * 记录响应时间用于质量评估
     */
    recordResponseTime(duration) {
        // 更新平均RTT统计
        if (this.stats.averageRtt === 0) {
            this.stats.averageRtt = duration;
        }
        else {
            // 指数移动平均
            this.stats.averageRtt = this.stats.averageRtt * 0.8 + duration * 0.2;
        }
        // 记录到历史记录
        this.stats.qualityHistory.push({
            timestamp: new Date(),
            quality: this.calculateQuality(this.currentState),
            score: this.calculateQualityScore(this.currentState)
        });
        // 保持历史记录在合理范围内
        if (this.stats.qualityHistory.length > 100) {
            this.stats.qualityHistory = this.stats.qualityHistory.slice(-50);
        }
    }
    /**
     * 记录错误信息
     */
    recordError(type, details) {
        this.stats.errorCount++;
        this.stats.lastError = new Error(`${type}: ${JSON.stringify(details)}`);
        // 发送错误事件
        this.emitEvent({
            type: 'error',
            timestamp: new Date(),
            currentState: this.currentState,
            details: { type, details }
        });
    }
    /**
     * 增强的网络状态评估
     */
    async getEnhancedNetworkInfo() {
        const baseInfo = await this.getCurrentNetworkInfo();
        // 执行更深入的网络质量分析
        const qualityAnalysis = await this.performQualityAnalysis();
        return {
            ...baseInfo,
            ...qualityAnalysis
        };
    }
    /**
     * 执行网络质量分析
     */
    async performQualityAnalysis() {
        const analysis = {};
        try {
            // 测量实际下载速度
            const downloadSpeed = await this.measureDownloadSpeed();
            if (downloadSpeed > 0) {
                analysis.downlink = downloadSpeed;
            }
            // 测量实际延迟
            const latency = await this.measureLatency();
            if (latency > 0) {
                analysis.rtt = latency;
            }
            // 检测网络抖动
            const jitter = await this.measureJitter();
            if (jitter > 0) {
                // 将抖动信息添加到扩展属性
                analysis.jitter = jitter;
            }
            // 检测丢包率
            const packetLoss = await this.estimatePacketLoss();
            if (packetLoss >= 0) {
                this.stats.packetLoss = packetLoss;
            }
        }
        catch (error) {
            console.warn('Quality analysis failed:', error);
        }
        return analysis;
    }
    /**
     * 测量下载速度
     */
    async measureDownloadSpeed() {
        try {
            const testData = new Array(1024).fill('test').join(''); // ~4KB test data
            const testUrl = `data:text/plain;base64,${btoa(testData)}`;
            const startTime = performance.now();
            const response = await fetch(testUrl);
            await response.text();
            const duration = performance.now() - startTime;
            // 计算速度 (KB/s)
            const speedKbPerSec = (testData.length / 1024) / (duration / 1000);
            return speedKbPerSec * 8 / 1024; // 转换为 Mbps
        }
        catch {
            return 0;
        }
    }
    /**
     * 测量延迟
     */
    async measureLatency() {
        try {
            const measurements = [];
            // 进行3次测量取平均值
            for (let i = 0; i < 3; i++) {
                const startTime = performance.now();
                await fetch('https://www.google.com/favicon.ico', {
                    method: 'HEAD',
                    mode: 'no-cors',
                    signal: AbortSignal.timeout(3000)
                });
                measurements.push(performance.now() - startTime);
            }
            return measurements.reduce((sum, time) => sum + time, 0) / measurements.length;
        }
        catch {
            return 0;
        }
    }
    /**
     * 测量网络抖动
     */
    async measureJitter() {
        try {
            const measurements = [];
            // 进行5次延迟测量
            for (let i = 0; i < 5; i++) {
                const startTime = performance.now();
                await fetch('https://www.cloudflare.com/favicon.ico', {
                    method: 'HEAD',
                    mode: 'no-cors',
                    signal: AbortSignal.timeout(2000)
                });
                measurements.push(performance.now() - startTime);
            }
            // 计算标准差作为抖动
            const mean = measurements.reduce((sum, time) => sum + time, 0) / measurements.length;
            const variance = measurements.reduce((sum, time) => sum + Math.pow(time - mean, 2), 0) / measurements.length;
            return Math.sqrt(variance);
        }
        catch {
            return 0;
        }
    }
    /**
     * 估算丢包率
     */
    async estimatePacketLoss() {
        try {
            const totalPings = 10;
            let successfulPings = 0;
            const pingPromises = Array(totalPings).fill(0).map(async () => {
                try {
                    await fetch('https://www.github.com/favicon.ico', {
                        method: 'HEAD',
                        mode: 'no-cors',
                        signal: AbortSignal.timeout(1000)
                    });
                    successfulPings++;
                }
                catch {
                    // Ping失败，不增加计数
                }
            });
            await Promise.allSettled(pingPromises);
            return 1 - (successfulPings / totalPings);
        }
        catch {
            return 0;
        }
    }
    /**
     * 智能网络状态预测
     */
    async predictNetworkStability() {
        const recentHistory = this.stats.qualityHistory.slice(-10);
        if (recentHistory.length < 5) {
            return {
                isStable: this.currentState.online,
                confidence: 0.5,
                predictedDuration: 300, // 5分钟
                recommendations: ['需要更多数据来进行准确预测']
            };
        }
        // 分析趋势
        const qualityTrend = this.analyzeQualityTrend(recentHistory);
        const stabilityScore = this.calculateStabilityScore(recentHistory);
        const isStable = stabilityScore > 0.7 && qualityTrend !== 'degrading';
        const confidence = Math.min(stabilityScore, recentHistory.length / 10);
        const recommendations = this.generateNetworkRecommendations(qualityTrend, stabilityScore);
        return {
            isStable,
            confidence,
            predictedDuration: this.predictStableDuration(stabilityScore),
            recommendations
        };
    }
    /**
     * 分析质量趋势
     */
    analyzeQualityTrend(history) {
        if (history.length < 3)
            return 'stable';
        const recentScores = history.slice(-3).map(h => h.score);
        const olderScores = history.slice(-6, -3).map(h => h.score);
        const recentAvg = recentScores.reduce((sum, score) => sum + score, 0) / recentScores.length;
        const olderAvg = olderScores.reduce((sum, score) => sum + score, 0) / olderScores.length;
        const change = recentAvg - olderAvg;
        if (change > 0.1)
            return 'improving';
        if (change < -0.1)
            return 'degrading';
        return 'stable';
    }
    /**
     * 计算稳定性得分
     */
    calculateStabilityScore(history) {
        if (history.length === 0)
            return 0;
        const scores = history.map(h => h.score);
        const mean = scores.reduce((sum, score) => sum + score, 0) / scores.length;
        const variance = scores.reduce((sum, score) => sum + Math.pow(score - mean, 2), 0) / scores.length;
        const standardDeviation = Math.sqrt(variance);
        // 稳定性得分基于标准差，标准差越小越稳定
        return Math.max(0, 1 - (standardDeviation / mean));
    }
    /**
     * 生成网络建议
     */
    generateNetworkRecommendations(trend, stability) {
        const recommendations = [];
        if (trend === 'degrading') {
            recommendations.push('网络质量正在下降，建议检查网络连接');
            if (stability < 0.5) {
                recommendations.push('网络连接不稳定，建议切换到更稳定的网络');
            }
        }
        else if (trend === 'improving') {
            recommendations.push('网络质量正在改善');
        }
        if (stability > 0.8) {
            recommendations.push('网络连接稳定，可以进行大量数据同步');
        }
        else if (stability < 0.5) {
            recommendations.push('建议启用数据压缩和离线模式');
        }
        return recommendations;
    }
    /**
     * 预测稳定持续时间
     */
    predictStableDuration(stabilityScore) {
        // 基于稳定性得分预测稳定持续时间（秒）
        if (stabilityScore > 0.9)
            return 3600; // 1小时
        if (stabilityScore > 0.7)
            return 1800; // 30分钟
        if (stabilityScore > 0.5)
            return 600; // 10分钟
        return 300; // 5分钟
    }
    // 销毁服务
    destroy() {
        this.stopMonitoring();
        // 清理事件监听器
        window.removeEventListener('online', this.handleOnline.bind(this));
        window.removeEventListener('offline', this.handleOffline.bind(this));
        if (this.connection) {
            this.connection.removeEventListener('change', this.handleConnectionChange.bind(this));
        }
        // 清理定时器
        if (this.debounceTimer) {
            clearTimeout(this.debounceTimer);
        }
        console.log('NetworkMonitorService destroyed');
    }
}
exports.NetworkMonitorService = NetworkMonitorService;
// 导出单例实例
exports.networkMonitorService = new NetworkMonitorService();
// ============================================================================
// 导出工具函数
// ============================================================================
// 等待网络恢复
const waitForNetwork = (timeout = 30000) => {
    return new Promise((resolve, reject) => {
        if (navigator.onLine) {
            resolve();
            return;
        }
        const timer = setTimeout(() => {
            cleanup();
            reject(new Error('Network timeout'));
        }, timeout);
        const handleOnline = () => {
            cleanup();
            resolve();
        };
        const cleanup = () => {
            clearTimeout(timer);
            window.removeEventListener('online', handleOnline);
        };
        window.addEventListener('online', handleOnline);
    });
};
exports.waitForNetwork = waitForNetwork;
// 获取最佳网络策略
const getNetworkStrategy = () => {
    const quality = exports.networkMonitorService.getNetworkQuality();
    switch (quality) {
        case 'excellent':
            return {
                batchSize: 50,
                timeout: 10000,
                retryStrategy: 'aggressive',
                compressionEnabled: false
            };
        case 'good':
            return {
                batchSize: 25,
                timeout: 15000,
                retryStrategy: 'normal',
                compressionEnabled: false
            };
        case 'fair':
            return {
                batchSize: 10,
                timeout: 30000,
                retryStrategy: 'normal',
                compressionEnabled: true
            };
        case 'poor':
            return {
                batchSize: 5,
                timeout: 60000,
                retryStrategy: 'conservative',
                compressionEnabled: true
            };
        default:
            return {
                batchSize: 1,
                timeout: 120000,
                retryStrategy: 'conservative',
                compressionEnabled: true
            };
    }
};
exports.getNetworkStrategy = getNetworkStrategy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\network-monitor.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\network-monitor.ts"],"sourcesContent":["// ============================================================================\n// 网络状态检测和监控服务\n// ============================================================================\n\n// 网络连接信息接口\nexport interface NetworkInfo {\n  // 基础连接状态\n  online: boolean\n  connectionType: 'wifi' | 'cellular' | 'ethernet' | 'bluetooth' | 'wimax' | 'other' | 'none'\n  effectiveType: '4g' | '3g' | '2g' | 'slow-2g' | 'unknown'\n  \n  // 连接质量指标\n  downlink?: number // 下行速度（Mbps）\n  rtt?: number // 往返时间（ms）\n  saveData?: boolean // 是否处于省数据模式\n  \n  // 网络能力\n  maxDownlink?: number\n  maxRtt?: number\n  \n  // 设备信息\n  deviceMemory?: number // 设备内存（GB）\n  hardwareConcurrency?: number // CPU核心数\n  \n  // 时间戳\n  timestamp: Date\n  lastChange?: Date\n}\n\n// 网络状态变化事件\nexport interface NetworkEvent {\n  type: 'online' | 'offline' | 'connection-change' | 'quality-change' | 'error'\n  timestamp: Date\n  previousState?: NetworkInfo\n  currentState: NetworkInfo\n  details?: any\n}\n\n// 网络质量等级\nexport type NetworkQuality = 'excellent' | 'good' | 'fair' | 'poor' | 'offline'\n\n// 网络监控配置\nexport interface NetworkMonitorConfig {\n  // 检测间隔\n  checkInterval: number\n  qualityCheckInterval: number\n  \n  // 质量阈值\n  qualityThresholds: {\n    excellent: { rtt: number; downlink: number }\n    good: { rtt: number; downlink: number }\n    fair: { rtt: number; downlink: number }\n    poor: { rtt: number; downlink: number }\n  }\n  \n  // 重连配置\n  reconnect: {\n    maxAttempts: number\n    initialDelay: number\n    maxDelay: number\n    backoffMultiplier: number\n  }\n  \n  // 健康检查\n  healthCheck: {\n    enabled: boolean\n    endpoints: string[]\n    timeout: number\n    successThreshold: number\n  }\n  \n  // 事件过滤\n  eventFilter: {\n    minQualityChange: number // 最小质量变化才触发事件\n    debounceTime: number // 防抖时间\n  }\n}\n\n// 默认配置\nexport const DEFAULT_NETWORK_CONFIG: NetworkMonitorConfig = {\n  checkInterval: 5000, // 5秒\n  qualityCheckInterval: 30000, // 30秒\n  \n  qualityThresholds: {\n    excellent: { rtt: 100, downlink: 10 },    // <100ms, >10Mbps\n    good: { rtt: 200, downlink: 5 },          // <200ms, >5Mbps\n    fair: { rtt: 500, downlink: 1 },          // <500ms, >1Mbps\n    poor: { rtt: 1000, downlink: 0.1 }        // <1000ms, >0.1Mbps\n  },\n  \n  reconnect: {\n    maxAttempts: 10,\n    initialDelay: 1000,\n    maxDelay: 30000,\n    backoffMultiplier: 2\n  },\n  \n  healthCheck: {\n    enabled: true,\n    endpoints: [\n      'https://www.google.com',\n      'https://www.cloudflare.com',\n      'https://www.github.com'\n    ],\n    timeout: 5000,\n    successThreshold: 2 // 需要2个成功才认为网络健康\n  },\n  \n  eventFilter: {\n    minQualityChange: 0.1, // 10%质量变化才触发事件\n    debounceTime: 1000\n  }\n}\n\n// 网络统计信息\nexport interface NetworkStats {\n  // 连接统计\n  connectionChanges: number\n  onlineTime: number\n  offlineTime: number\n  \n  // 质量统计\n  averageQuality: number\n  qualityHistory: Array<{\n    timestamp: Date\n    quality: NetworkQuality\n    score: number\n  }>\n  \n  // 性能统计\n  averageRtt: number\n  averageDownlink: number\n  packetLoss?: number\n  \n  // 错误统计\n  errorCount: number\n  lastError?: Error\n  \n  // 重连统计\n  reconnectAttempts: number\n  successfulReconnects: number\n}\n\n// ============================================================================\n// 网络监控服务\n// ============================================================================\n\nexport class NetworkMonitorService {\n  private config: NetworkMonitorConfig\n  private currentState: NetworkInfo\n  private isMonitoring = false\n  private checkTimer: NodeJS.Timeout | null = null\n  private qualityTimer: NodeJS.Timeout | null = null\n  private reconnectTimer: NodeJS.Timeout | null = null\n  private debounceTimer: NodeJS.Timeout | null = null\n  \n  // 事件监听器\n  private listeners: Set<(event: NetworkEvent) => void> = new Set()\n  \n  // 统计信息\n  private stats: NetworkStats\n  private startTime: Date\n  private lastOnlineTime?: Date\n  private lastOfflineTime?: Date\n  \n  // 连接API（如果可用）\n  private connection?: any\n  private connectionTypes = ['wifi', 'cellular', 'ethernet', 'bluetooth', 'wimax', 'other', 'none']\n  \n  // 重连状态\n  private reconnectAttempts = 0\n  private isReconnecting = false\n\n  constructor(config: Partial<NetworkMonitorConfig> = {}) {\n    this.config = { ...DEFAULT_NETWORK_CONFIG, ...config }\n    this.currentState = this.getInitialNetworkState()\n    this.stats = this.getInitialStats()\n    this.startTime = new Date()\n    \n    this.initialize()\n  }\n\n  // 初始化服务\n  private initialize(): void {\n    // 获取网络连接API（如果可用）\n    if ('connection' in navigator) {\n      this.connection = (navigator as any).connection\n    }\n    \n    // 监听在线/离线事件\n    window.addEventListener('online', this.handleOnline.bind(this))\n    window.addEventListener('offline', this.handleOffline.bind(this))\n    \n    // 监听连接变化（如果支持）\n    if (this.connection) {\n      this.connection.addEventListener('change', this.handleConnectionChange.bind(this))\n    }\n    \n    console.log('NetworkMonitorService initialized')\n  }\n\n  // 获取初始网络状态\n  private getInitialNetworkState(): NetworkInfo {\n    return {\n      online: navigator.onLine,\n      connectionType: this.getConnectionType(),\n      effectiveType: this.getEffectiveType(),\n      downlink: this.connection?.downlink,\n      rtt: this.connection?.rtt,\n      saveData: this.connection?.saveData,\n      deviceMemory: (navigator as any).deviceMemory,\n      hardwareConcurrency: navigator.hardwareConcurrency,\n      timestamp: new Date()\n    }\n  }\n\n  // 获取初始统计信息\n  private getInitialStats(): NetworkStats {\n    return {\n      connectionChanges: 0,\n      onlineTime: 0,\n      offlineTime: 0,\n      averageQuality: 0,\n      qualityHistory: [],\n      averageRtt: 0,\n      averageDownlink: 0,\n      errorCount: 0,\n      reconnectAttempts: 0,\n      successfulReconnects: 0\n    }\n  }\n\n  // ============================================================================\n  // 公共方法\n  // ============================================================================\n\n  // 开始监控\n  startMonitoring(): void {\n    if (this.isMonitoring) return\n    \n    this.isMonitoring = true\n    this.startPeriodicChecks()\n    \n    console.log('Network monitoring started')\n    this.emitEvent({\n      type: 'connection-change',\n      timestamp: new Date(),\n      currentState: this.currentState,\n      details: { action: 'monitoring_started' }\n    })\n  }\n\n  // 停止监控\n  stopMonitoring(): void {\n    if (!this.isMonitoring) return\n    \n    this.isMonitoring = false\n    this.stopPeriodicChecks()\n    \n    console.log('Network monitoring stopped')\n    this.emitEvent({\n      type: 'connection-change',\n      timestamp: new Date(),\n      currentState: this.currentState,\n      details: { action: 'monitoring_stopped' }\n    })\n  }\n\n  // 获取当前网络状态\n  getCurrentState(): NetworkInfo {\n    return { ...this.currentState }\n  }\n\n  // 获取网络质量\n  getNetworkQuality(): NetworkQuality {\n    return this.calculateQuality(this.currentState)\n  }\n\n  // 获取网络质量分数（0-1）\n  getNetworkQualityScore(): number {\n    return this.calculateQualityScore(this.currentState)\n  }\n\n  // 获取统计信息\n  getStats(): NetworkStats {\n    return { ...this.stats }\n  }\n\n  // 手动触发网络检查\n  async checkNetwork(): Promise<NetworkInfo> {\n    const newState = await this.getCurrentNetworkInfo()\n    await this.updateNetworkState(newState)\n    return newState\n  }\n\n  // 执行健康检查\n  async performHealthCheck(): Promise<boolean> {\n    if (!this.config.healthCheck.enabled) {\n      return this.currentState.online\n    }\n\n    try {\n      const promises = this.config.healthCheck.endpoints.map(endpoint =>\n        this.pingEndpoint(endpoint, this.config.healthCheck.timeout)\n      )\n      \n      const results = await Promise.allSettled(promises)\n      const successCount = results.filter(result => \n        result.status === 'fulfilled' && result.value\n      ).length\n      \n      const isHealthy = successCount >= this.config.healthCheck.successThreshold\n      \n      console.log(`Health check: ${successCount}/${this.config.healthCheck.endpoints.length} successful`)\n      \n      return isHealthy\n    } catch (error) {\n      console.error('Health check failed:', error)\n      return false\n    }\n  }\n\n  // ============================================================================\n  // 事件监听器\n  // ============================================================================\n\n  // 添加事件监听器\n  addEventListener(callback: (event: NetworkEvent) => void): void {\n    this.listeners.add(callback)\n  }\n\n  // 移除事件监听器\n  removeEventListener(callback: (event: NetworkEvent) => void): void {\n    this.listeners.delete(callback)\n  }\n\n  // 发送事件\n  private emitEvent(event: NetworkEvent): void {\n    // 防抖处理\n    if (this.config.eventFilter.debounceTime > 0) {\n      if (this.debounceTimer) {\n        clearTimeout(this.debounceTimer)\n      }\n      \n      this.debounceTimer = setTimeout(() => {\n        this.listeners.forEach(listener => {\n          try {\n            listener(event)\n          } catch (error) {\n            console.error('Error in network event listener:', error)\n          }\n        })\n      }, this.config.eventFilter.debounceTime)\n    } else {\n      this.listeners.forEach(listener => {\n        try {\n          listener(event)\n        } catch (error) {\n          console.error('Error in network event listener:', error)\n        }\n      })\n    }\n  }\n\n  // ============================================================================\n  // 网络状态更新\n  // ============================================================================\n\n  // 处理在线事件\n  private async handleOnline(): Promise<void> {\n    console.log('Network online event detected')\n    \n    const previousState = { ...this.currentState }\n    this.currentState.online = true\n    this.currentState.lastChange = new Date()\n    \n    this.lastOnlineTime = new Date()\n    \n    // 更新统计\n    if (this.lastOfflineTime) {\n      this.stats.offlineTime += Date.now() - this.lastOfflineTime.getTime()\n      this.lastOfflineTime = undefined\n    }\n    \n    // 停止重连尝试\n    this.stopReconnectAttempts()\n    \n    this.emitEvent({\n      type: 'online',\n      timestamp: new Date(),\n      previousState,\n      currentState: this.currentState\n    })\n    \n    // 立即检查网络质量\n    await this.checkNetwork()\n  }\n\n  // 处理离线事件\n  private handleOffline(): void {\n    console.log('Network offline event detected')\n    \n    const previousState = { ...this.currentState }\n    this.currentState.online = false\n    this.currentState.lastChange = new Date()\n    \n    this.lastOfflineTime = new Date()\n    \n    // 更新统计\n    if (this.lastOnlineTime) {\n      this.stats.onlineTime += Date.now() - this.lastOnlineTime.getTime()\n    }\n    \n    this.emitEvent({\n      type: 'offline',\n      timestamp: new Date(),\n      previousState,\n      currentState: this.currentState\n    })\n    \n    // 开始重连尝试\n    this.startReconnectAttempts()\n  }\n\n  // 处理连接变化\n  private async handleConnectionChange(): Promise<void> {\n    console.log('Network connection change detected')\n    \n    const previousState = { ...this.currentState }\n    const newState = await this.getCurrentNetworkInfo()\n    \n    // 检查是否有显著变化\n    const qualityChange = Math.abs(\n      this.calculateQualityScore(newState) - this.calculateQualityScore(previousState)\n    )\n    \n    if (qualityChange >= this.config.eventFilter.minQualityChange) {\n      this.currentState = newState\n      this.currentState.lastChange = new Date()\n      \n      this.stats.connectionChanges++\n      \n      this.emitEvent({\n        type: 'connection-change',\n        timestamp: new Date(),\n        previousState,\n        currentState: this.currentState\n      })\n    }\n  }\n\n  // 更新网络状态\n  private async updateNetworkState(newState: NetworkInfo): Promise<void> {\n    const previousState = { ...this.currentState }\n    const qualityChange = Math.abs(\n      this.calculateQualityScore(newState) - this.calculateQualityScore(previousState)\n    )\n    \n    // 只在质量变化显著时更新\n    if (qualityChange >= this.config.eventFilter.minQualityChange) {\n      this.currentState = newState\n      this.currentState.lastChange = new Date()\n      \n      // 更新质量历史\n      this.updateQualityHistory()\n      \n      // 发送质量变化事件\n      this.emitEvent({\n        type: 'quality-change',\n        timestamp: new Date(),\n        previousState,\n        currentState: this.currentState,\n        details: {\n          qualityChange,\n          previousQuality: this.calculateQuality(previousState),\n          currentQuality: this.calculateQuality(newState)\n        }\n      })\n    }\n  }\n\n  // ============================================================================\n  // 定期检查\n  // ============================================================================\n\n  // 启动定期检查\n  private startPeriodicChecks(): void {\n    // 基础网络状态检查\n    this.checkTimer = setInterval(async () => {\n      if (this.isMonitoring) {\n        await this.checkNetwork()\n      }\n    }, this.config.checkInterval)\n    \n    // 网络质量检查\n    this.qualityTimer = setInterval(async () => {\n      if (this.isMonitoring) {\n        await this.performQualityCheck()\n      }\n    }, this.config.qualityCheckInterval)\n  }\n\n  // 停止定期检查\n  private stopPeriodicChecks(): void {\n    if (this.checkTimer) {\n      clearInterval(this.checkTimer)\n      this.checkTimer = null\n    }\n    \n    if (this.qualityTimer) {\n      clearInterval(this.qualityTimer)\n      this.qualityTimer = null\n    }\n  }\n\n  // 执行质量检查\n  private async performQualityCheck(): Promise<void> {\n    try {\n      const healthStatus = await this.performHealthCheck()\n      \n      if (!healthStatus && this.currentState.online) {\n        // 网络显示在线但健康检查失败\n        console.warn('Network appears online but health check failed')\n        \n        this.currentState.online = false\n        this.currentState.lastChange = new Date()\n        \n        this.emitEvent({\n          type: 'error',\n          timestamp: new Date(),\n          currentState: this.currentState,\n          details: { message: 'Health check failed despite online status' }\n        })\n      }\n    } catch (error) {\n      console.error('Quality check failed:', error)\n      this.stats.errorCount++\n    }\n  }\n\n  // ============================================================================\n  // 重连机制\n  // ============================================================================\n\n  // 开始重连尝试\n  private startReconnectAttempts(): void {\n    if (this.isReconnecting) return\n    \n    this.isReconnecting = true\n    this.reconnectAttempts = 0\n    this.scheduleReconnectAttempt()\n  }\n\n  // 停止重连尝试\n  private stopReconnectAttempts(): void {\n    this.isReconnecting = false\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer)\n      this.reconnectTimer = null\n    }\n  }\n\n  // 安排重连尝试\n  private scheduleReconnectAttempt(): void {\n    if (!this.isReconnecting || this.reconnectAttempts >= this.config.reconnect.maxAttempts) {\n      this.isReconnecting = false\n      return\n    }\n    \n    const delay = Math.min(\n      this.config.reconnect.initialDelay * Math.pow(this.config.reconnect.backoffMultiplier, this.reconnectAttempts),\n      this.config.reconnect.maxDelay\n    )\n    \n    this.reconnectTimer = setTimeout(async () => {\n      this.reconnectAttempts++\n      this.stats.reconnectAttempts++\n      \n      console.log(`Reconnect attempt ${this.reconnectAttempts}/${this.config.reconnect.maxAttempts}`)\n      \n      try {\n        const isOnline = navigator.onLine\n        if (isOnline) {\n          const healthStatus = await this.performHealthCheck()\n          if (healthStatus) {\n            this.stats.successfulReconnects++\n            this.isReconnecting = false\n            console.log('Reconnect successful')\n            \n            this.emitEvent({\n              type: 'online',\n              timestamp: new Date(),\n              currentState: this.currentState,\n              details: { reconnectAttempts: this.reconnectAttempts }\n            })\n            \n            await this.handleOnline()\n            return\n          }\n        }\n      } catch (error) {\n        console.error('Reconnect attempt failed:', error)\n      }\n      \n      // 继续下一次重连\n      this.scheduleReconnectAttempt()\n    }, delay)\n  }\n\n  // ============================================================================\n  // 工具方法\n  // ============================================================================\n\n  // 获取当前网络信息\n  private async getCurrentNetworkInfo(): Promise<NetworkInfo> {\n    const baseInfo = this.getInitialNetworkState()\n    \n    // 执行健康检查获取更准确的状态\n    if (this.config.healthCheck.enabled) {\n      try {\n        const isHealthy = await this.performHealthCheck()\n        baseInfo.online = isHealthy && navigator.onLine\n      } catch (error) {\n        console.warn('Health check failed, using navigator.onLine:', error)\n      }\n    }\n    \n    // 使用增强的网络状态检测\n    if (baseInfo.online) {\n      try {\n        const enhancedInfo = await this.getEnhancedNetworkInfo()\n        return { ...baseInfo, ...enhancedInfo }\n      } catch (error) {\n        console.warn('Enhanced network info failed, using basic info:', error)\n      }\n    }\n    \n    return baseInfo\n  }\n\n  // 获取连接类型\n  private getConnectionType(): NetworkInfo['connectionType'] {\n    if (!this.connection) return 'none'\n    \n    const type = this.connection.type\n    return this.connectionTypes.includes(type) ? type : 'other'\n  }\n\n  // 获取有效连接类型\n  private getEffectiveType(): NetworkInfo['effectiveType'] {\n    if (!this.connection) return 'unknown'\n    \n    const effectiveType = this.connection.effectiveType\n    return ['4g', '3g', '2g', 'slow-2g'].includes(effectiveType) ? effectiveType : 'unknown'\n  }\n\n  // 计算网络质量\n  private calculateQuality(info: NetworkInfo): NetworkQuality {\n    const score = this.calculateQualityScore(info)\n    \n    if (score >= 0.8) return 'excellent'\n    if (score >= 0.6) return 'good'\n    if (score >= 0.4) return 'fair'\n    if (score >= 0.2) return 'poor'\n    return 'offline'\n  }\n\n  // 计算网络质量分数（0-1）\n  private calculateQualityScore(info: NetworkInfo): number {\n    if (!info.online) return 0\n    \n    let score = 0.5 // 基础分数（在线）\n    \n    // RTT评分\n    if (info.rtt !== undefined) {\n      if (info.rtt <= 100) score += 0.3\n      else if (info.rtt <= 200) score += 0.2\n      else if (info.rtt <= 500) score += 0.1\n    }\n    \n    // 下行速度评分\n    if (info.downlink !== undefined) {\n      if (info.downlink >= 10) score += 0.3\n      else if (info.downlink >= 5) score += 0.2\n      else if (info.downlink >= 1) score += 0.1\n    }\n    \n    // 连接类型评分\n    if (info.connectionType === 'wifi' || info.connectionType === 'ethernet') {\n      score += 0.1\n    }\n    \n    // 省数据模式扣分\n    if (info.saveData) {\n      score -= 0.1\n    }\n    \n    return Math.max(0, Math.min(1, score))\n  }\n\n  // 更新质量历史\n  private updateQualityHistory(): void {\n    const quality = this.getNetworkQuality()\n    const score = this.getNetworkQualityScore()\n    \n    this.stats.qualityHistory.push({\n      timestamp: new Date(),\n      quality,\n      score\n    })\n    \n    // 保留最近100条记录\n    if (this.stats.qualityHistory.length > 100) {\n      this.stats.qualityHistory = this.stats.qualityHistory.slice(-100)\n    }\n    \n    // 更新平均质量\n    const recentHistory = this.stats.qualityHistory.slice(-20) // 最近20条\n    if (recentHistory.length > 0) {\n      this.stats.averageQuality = recentHistory.reduce((sum, item) => sum + item.score, 0) / recentHistory.length\n    }\n  }\n\n  // Ping端点\n  private async pingEndpoint(endpoint: string, timeout: number): Promise<boolean> {\n    try {\n      const controller = new AbortController()\n      const timeoutId = setTimeout(() => controller.abort(), timeout)\n      \n      const startTime = performance.now()\n      const response = await fetch(`${endpoint}/favicon.ico`, {\n        method: 'HEAD',\n        signal: controller.signal,\n        mode: 'no-cors',\n        headers: {\n          'Cache-Control': 'no-cache',\n          'Pragma': 'no-cache'\n        }\n      })\n      \n      clearTimeout(timeoutId)\n      const duration = performance.now() - startTime\n      \n      // 记录响应时间用于网络质量评估\n      this.recordResponseTime(duration)\n      \n      return true\n    } catch (error) {\n      this.recordError('ping_failed', { endpoint, error: error instanceof Error ? error.message : String(error) })\n      return false\n    }\n  }\n\n  // ============================================================================\n  // 增强网络状态检测方法\n  // ============================================================================\n\n  /**\n   * 记录响应时间用于质量评估\n   */\n  private recordResponseTime(duration: number): void {\n    // 更新平均RTT统计\n    if (this.stats.averageRtt === 0) {\n      this.stats.averageRtt = duration\n    } else {\n      // 指数移动平均\n      this.stats.averageRtt = this.stats.averageRtt * 0.8 + duration * 0.2\n    }\n    \n    // 记录到历史记录\n    this.stats.qualityHistory.push({\n      timestamp: new Date(),\n      quality: this.calculateQuality(this.currentState),\n      score: this.calculateQualityScore(this.currentState)\n    })\n    \n    // 保持历史记录在合理范围内\n    if (this.stats.qualityHistory.length > 100) {\n      this.stats.qualityHistory = this.stats.qualityHistory.slice(-50)\n    }\n  }\n\n  /**\n   * 记录错误信息\n   */\n  private recordError(type: string, details: any): void {\n    this.stats.errorCount++\n    this.stats.lastError = new Error(`${type}: ${JSON.stringify(details)}`)\n    \n    // 发送错误事件\n    this.emitEvent({\n      type: 'error',\n      timestamp: new Date(),\n      currentState: this.currentState,\n      details: { type, details }\n    })\n  }\n\n  /**\n   * 增强的网络状态评估\n   */\n  private async getEnhancedNetworkInfo(): Promise<NetworkInfo> {\n    const baseInfo = await this.getCurrentNetworkInfo()\n    \n    // 执行更深入的网络质量分析\n    const qualityAnalysis = await this.performQualityAnalysis()\n    \n    return {\n      ...baseInfo,\n      ...qualityAnalysis\n    }\n  }\n\n  /**\n   * 执行网络质量分析\n   */\n  private async performQualityAnalysis(): Promise<Partial<NetworkInfo>> {\n    const analysis: Partial<NetworkInfo> = {}\n    \n    try {\n      // 测量实际下载速度\n      const downloadSpeed = await this.measureDownloadSpeed()\n      if (downloadSpeed > 0) {\n        analysis.downlink = downloadSpeed\n      }\n      \n      // 测量实际延迟\n      const latency = await this.measureLatency()\n      if (latency > 0) {\n        analysis.rtt = latency\n      }\n      \n      // 检测网络抖动\n      const jitter = await this.measureJitter()\n      if (jitter > 0) {\n        // 将抖动信息添加到扩展属性\n        (analysis as any).jitter = jitter\n      }\n      \n      // 检测丢包率\n      const packetLoss = await this.estimatePacketLoss()\n      if (packetLoss >= 0) {\n        this.stats.packetLoss = packetLoss\n      }\n      \n    } catch (error) {\n      console.warn('Quality analysis failed:', error)\n    }\n    \n    return analysis\n  }\n\n  /**\n   * 测量下载速度\n   */\n  private async measureDownloadSpeed(): Promise<number> {\n    try {\n      const testData = new Array(1024).fill('test').join('') // ~4KB test data\n      const testUrl = `data:text/plain;base64,${btoa(testData)}`\n      \n      const startTime = performance.now()\n      const response = await fetch(testUrl)\n      await response.text()\n      const duration = performance.now() - startTime\n      \n      // 计算速度 (KB/s)\n      const speedKbPerSec = (testData.length / 1024) / (duration / 1000)\n      return speedKbPerSec * 8 / 1024 // 转换为 Mbps\n    } catch {\n      return 0\n    }\n  }\n\n  /**\n   * 测量延迟\n   */\n  private async measureLatency(): Promise<number> {\n    try {\n      const measurements: number[] = []\n      \n      // 进行3次测量取平均值\n      for (let i = 0; i < 3; i++) {\n        const startTime = performance.now()\n        await fetch('https://www.google.com/favicon.ico', {\n          method: 'HEAD',\n          mode: 'no-cors',\n          signal: AbortSignal.timeout(3000)\n        })\n        measurements.push(performance.now() - startTime)\n      }\n      \n      return measurements.reduce((sum, time) => sum + time, 0) / measurements.length\n    } catch {\n      return 0\n    }\n  }\n\n  /**\n   * 测量网络抖动\n   */\n  private async measureJitter(): Promise<number> {\n    try {\n      const measurements: number[] = []\n      \n      // 进行5次延迟测量\n      for (let i = 0; i < 5; i++) {\n        const startTime = performance.now()\n        await fetch('https://www.cloudflare.com/favicon.ico', {\n          method: 'HEAD',\n          mode: 'no-cors',\n          signal: AbortSignal.timeout(2000)\n        })\n        measurements.push(performance.now() - startTime)\n      }\n      \n      // 计算标准差作为抖动\n      const mean = measurements.reduce((sum, time) => sum + time, 0) / measurements.length\n      const variance = measurements.reduce((sum, time) => sum + Math.pow(time - mean, 2), 0) / measurements.length\n      \n      return Math.sqrt(variance)\n    } catch {\n      return 0\n    }\n  }\n\n  /**\n   * 估算丢包率\n   */\n  private async estimatePacketLoss(): Promise<number> {\n    try {\n      const totalPings = 10\n      let successfulPings = 0\n      \n      const pingPromises = Array(totalPings).fill(0).map(async () => {\n        try {\n          await fetch('https://www.github.com/favicon.ico', {\n            method: 'HEAD',\n            mode: 'no-cors',\n            signal: AbortSignal.timeout(1000)\n          })\n          successfulPings++\n        } catch {\n          // Ping失败，不增加计数\n        }\n      })\n      \n      await Promise.allSettled(pingPromises)\n      \n      return 1 - (successfulPings / totalPings)\n    } catch {\n      return 0\n    }\n  }\n\n  /**\n   * 智能网络状态预测\n   */\n  async predictNetworkStability(): Promise<{\n    isStable: boolean\n    confidence: number\n    predictedDuration: number\n    recommendations: string[]\n  }> {\n    const recentHistory = this.stats.qualityHistory.slice(-10)\n    \n    if (recentHistory.length < 5) {\n      return {\n        isStable: this.currentState.online,\n        confidence: 0.5,\n        predictedDuration: 300, // 5分钟\n        recommendations: ['需要更多数据来进行准确预测']\n      }\n    }\n    \n    // 分析趋势\n    const qualityTrend = this.analyzeQualityTrend(recentHistory)\n    const stabilityScore = this.calculateStabilityScore(recentHistory)\n    \n    const isStable = stabilityScore > 0.7 && qualityTrend !== 'degrading'\n    const confidence = Math.min(stabilityScore, recentHistory.length / 10)\n    \n    const recommendations = this.generateNetworkRecommendations(qualityTrend, stabilityScore)\n    \n    return {\n      isStable,\n      confidence,\n      predictedDuration: this.predictStableDuration(stabilityScore),\n      recommendations\n    }\n  }\n\n  /**\n   * 分析质量趋势\n   */\n  private analyzeQualityTrend(history: Array<{ timestamp: Date; score: number }>): 'improving' | 'stable' | 'degrading' {\n    if (history.length < 3) return 'stable'\n    \n    const recentScores = history.slice(-3).map(h => h.score)\n    const olderScores = history.slice(-6, -3).map(h => h.score)\n    \n    const recentAvg = recentScores.reduce((sum, score) => sum + score, 0) / recentScores.length\n    const olderAvg = olderScores.reduce((sum, score) => sum + score, 0) / olderScores.length\n    \n    const change = recentAvg - olderAvg\n    \n    if (change > 0.1) return 'improving'\n    if (change < -0.1) return 'degrading'\n    return 'stable'\n  }\n\n  /**\n   * 计算稳定性得分\n   */\n  private calculateStabilityScore(history: Array<{ timestamp: Date; score: number }>): number {\n    if (history.length === 0) return 0\n    \n    const scores = history.map(h => h.score)\n    const mean = scores.reduce((sum, score) => sum + score, 0) / scores.length\n    const variance = scores.reduce((sum, score) => sum + Math.pow(score - mean, 2), 0) / scores.length\n    const standardDeviation = Math.sqrt(variance)\n    \n    // 稳定性得分基于标准差，标准差越小越稳定\n    return Math.max(0, 1 - (standardDeviation / mean))\n  }\n\n  /**\n   * 生成网络建议\n   */\n  private generateNetworkRecommendations(trend: string, stability: number): string[] {\n    const recommendations: string[] = []\n    \n    if (trend === 'degrading') {\n      recommendations.push('网络质量正在下降，建议检查网络连接')\n      if (stability < 0.5) {\n        recommendations.push('网络连接不稳定，建议切换到更稳定的网络')\n      }\n    } else if (trend === 'improving') {\n      recommendations.push('网络质量正在改善')\n    }\n    \n    if (stability > 0.8) {\n      recommendations.push('网络连接稳定，可以进行大量数据同步')\n    } else if (stability < 0.5) {\n      recommendations.push('建议启用数据压缩和离线模式')\n    }\n    \n    return recommendations\n  }\n\n  /**\n   * 预测稳定持续时间\n   */\n  private predictStableDuration(stabilityScore: number): number {\n    // 基于稳定性得分预测稳定持续时间（秒）\n    if (stabilityScore > 0.9) return 3600 // 1小时\n    if (stabilityScore > 0.7) return 1800 // 30分钟\n    if (stabilityScore > 0.5) return 600  // 10分钟\n    return 300 // 5分钟\n  }\n\n  // 销毁服务\n  destroy(): void {\n    this.stopMonitoring()\n    \n    // 清理事件监听器\n    window.removeEventListener('online', this.handleOnline.bind(this))\n    window.removeEventListener('offline', this.handleOffline.bind(this))\n    \n    if (this.connection) {\n      this.connection.removeEventListener('change', this.handleConnectionChange.bind(this))\n    }\n    \n    // 清理定时器\n    if (this.debounceTimer) {\n      clearTimeout(this.debounceTimer)\n    }\n    \n    console.log('NetworkMonitorService destroyed')\n  }\n}\n\n// 导出单例实例\nexport const networkMonitorService = new NetworkMonitorService()\n\n// ============================================================================\n// 导出工具函数\n// ============================================================================\n\n// 等待网络恢复\nexport const waitForNetwork = (timeout: number = 30000): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    if (navigator.onLine) {\n      resolve()\n      return\n    }\n    \n    const timer = setTimeout(() => {\n      cleanup()\n      reject(new Error('Network timeout'))\n    }, timeout)\n    \n    const handleOnline = () => {\n      cleanup()\n      resolve()\n    }\n    \n    const cleanup = () => {\n      clearTimeout(timer)\n      window.removeEventListener('online', handleOnline)\n    }\n    \n    window.addEventListener('online', handleOnline)\n  })\n}\n\n// 获取最佳网络策略\nexport const getNetworkStrategy = (): {\n  batchSize: number\n  timeout: number\n  retryStrategy: 'aggressive' | 'conservative' | 'normal'\n  compressionEnabled: boolean\n} => {\n  const quality = networkMonitorService.getNetworkQuality()\n  \n  switch (quality) {\n    case 'excellent':\n      return {\n        batchSize: 50,\n        timeout: 10000,\n        retryStrategy: 'aggressive' as const,\n        compressionEnabled: false\n      }\n    case 'good':\n      return {\n        batchSize: 25,\n        timeout: 15000,\n        retryStrategy: 'normal' as const,\n        compressionEnabled: false\n      }\n    case 'fair':\n      return {\n        batchSize: 10,\n        timeout: 30000,\n        retryStrategy: 'normal' as const,\n        compressionEnabled: true\n      }\n    case 'poor':\n      return {\n        batchSize: 5,\n        timeout: 60000,\n        retryStrategy: 'conservative' as const,\n        compressionEnabled: true\n      }\n    default:\n      return {\n        batchSize: 1,\n        timeout: 120000,\n        retryStrategy: 'conservative' as const,\n        compressionEnabled: true\n      }\n  }\n}"],"version":3}
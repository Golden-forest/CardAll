{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\utils\\batch-operation-manager.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\utils\\batch-operation-manager.test.ts"],"sourcesContent":["/**\n * 批量操作管理器测试\n * 测试BatchOperationManager类的所有功能\n */\n\nimport { BatchOperationManager, BatchOperation, BatchResult, BatchConfig } from '../../utils/batch-operation-manager'\n\n// Mock dependencies\njest.mock('../../services/database-unified', () => ({\n  db: {\n    transaction: jest.fn(),\n    cards: {\n      bulkAdd: jest.fn(),\n      bulkDelete: jest.fn(),\n      update: jest.fn()\n    },\n    folders: {\n      bulkAdd: jest.fn(),\n      bulkDelete: jest.fn(),\n      update: jest.fn()\n    },\n    tags: {\n      bulkAdd: jest.fn(),\n      bulkDelete: jest.fn(),\n      update: jest.fn()\n    },\n    images: {\n      bulkAdd: jest.fn(),\n      bulkDelete: jest.fn(),\n      update: jest.fn()\n    }\n  }\n}))\n\njest.mock('../../utils/intelligent-cache', () => ({\n  intelligentCache: {\n    invalidateByPattern: jest.fn()\n  }\n}))\n\nimport { db } from '../../services/database-unified'\nimport { intelligentCache } from '../../utils/intelligent-cache'\n\n// Mock crypto\nObject.defineProperty(global, 'crypto', {\n  value: {\n    randomUUID: jest.fn()\n  },\n  writable: true\n})\n\ndescribe('BatchOperationManager', () => {\n  let manager: BatchOperationManager\n  let mockConsole: any\n\n  beforeEach(() => {\n    manager = new BatchOperationManager()\n    mockConsole = {\n      log: jest.spyOn(console, 'log').mockImplementation(() => {}),\n      warn: jest.spyOn(console, 'warn').mockImplementation(() => {}),\n      error: jest.spyOn(console, 'error').mockImplementation(() => {})\n    }\n    jest.clearAllMocks()\n\n    // Mock crypto.randomUUID\n    ;(crypto.randomUUID as jest.Mock).mockReturnValue('test-uuid-123')\n  })\n\n  afterEach(() => {\n    jest.restoreAllMocks()\n  })\n\n  describe('构造函数和配置', () => {\n    test('应该使用默认配置初始化', () => {\n      const defaultManager = new BatchOperationManager()\n      const metrics = defaultManager.getMetrics()\n\n      expect(metrics.totalOperations).toBe(0)\n      expect(metrics.successfulOperations).toBe(0)\n      expect(metrics.failedOperations).toBe(0)\n    })\n\n    test('应该接受自定义配置', () => {\n      const customConfig: Partial<BatchConfig> = {\n        batchSize: 50,\n        maxConcurrent: 5,\n        retryCount: 5,\n        timeout: 60000\n      }\n\n      const customManager = new BatchOperationManager(customConfig)\n      // 验证配置已应用（通过测试行为来验证）\n    })\n\n    test('应该合并配置', () => {\n      const partialConfig: Partial<BatchConfig> = {\n        batchSize: 200,\n        maxConcurrent: 2\n      }\n\n      const manager = new BatchOperationManager(partialConfig)\n      // 部分配置应该与默认值合并\n    })\n  })\n\n  describe('批量卡片操作', () => {\n    const mockCardsData = [\n      {\n        frontContent: { title: 'Card 1', text: 'Content 1' },\n        backContent: { title: 'Back 1', text: 'Back Content 1' }\n      },\n      {\n        frontContent: { title: 'Card 2', text: 'Content 2' },\n        backContent: { title: 'Back 2', text: 'Back Content 2' }\n      }\n    ]\n\n    test('应该批量创建卡片', async () => {\n      // Mock database transaction\n      ;(db.transaction as jest.Mock).mockImplementation((mode, tables, callback) => {\n        return callback()\n      })\n      ;(db.cards.bulkAdd as jest.Mock).mockResolvedValue(['id1', 'id2'])\n\n      const results = await manager.bulkCreateCards(mockCardsData)\n\n      expect(results).toHaveLength(2)\n      expect(results[0].success).toBe(true)\n      expect(results[1].success).toBe(true)\n      expect(results[0].id).toBe('id1')\n      expect(results[1].id).toBe('id2')\n\n      expect(db.transaction).toHaveBeenCalled()\n      expect(db.cards.bulkAdd).toHaveBeenCalled()\n      expect(intelligentCache.invalidateByPattern).toHaveBeenCalledWith('card_')\n      expect(intelligentCache.invalidateByPattern).toHaveBeenCalledWith('cards_')\n    })\n\n    test('应该批量更新卡片', async () => {\n      const updates = [\n        { id: 'card1', data: { frontContent: { title: 'Updated 1' } } },\n        { id: 'card2', data: { frontContent: { title: 'Updated 2' } } }\n      ]\n\n      // Mock database transaction\n      ;(db.transaction as jest.Mock).mockImplementation((mode, tables, callback) => {\n        return callback()\n      })\n      ;(db.cards.update as jest.Mock).mockResolvedValue(undefined)\n\n      const results = await manager.bulkUpdateCards(updates)\n\n      expect(results).toHaveLength(2)\n      expect(results[0].success).toBe(true)\n      expect(results[1].success).toBe(true)\n      expect(results[0].id).toBe('card1')\n      expect(results[1].id).toBe('card2')\n\n      expect(db.cards.update).toHaveBeenCalledTimes(2)\n      expect(intelligentCache.invalidateByPattern).toHaveBeenCalledWith('card_')\n      expect(intelligentCache.invalidateByPattern).toHaveBeenCalledWith('cards_')\n    })\n\n    test('应该批量删除卡片', async () => {\n      const cardIds = ['card1', 'card2', 'card3']\n\n      // Mock database transaction\n      ;(db.transaction as jest.Mock).mockImplementation((mode, tables, callback) => {\n        return callback()\n      })\n      ;(db.cards.bulkDelete as jest.Mock).mockResolvedValue(undefined)\n\n      const results = await manager.bulkDeleteCards(cardIds)\n\n      expect(results).toHaveLength(3)\n      expect(results.every(r => r.success)).toBe(true)\n      expect(results.map(r => r.id)).toEqual(cardIds)\n\n      expect(db.cards.bulkDelete).toHaveBeenCalledWith(cardIds)\n      expect(intelligentCache.invalidateByPattern).toHaveBeenCalledWith('card_')\n      expect(intelligentCache.invalidateByPattern).toHaveBeenCalledWith('cards_')\n    })\n\n    test('应该处理数据库错误', async () => {\n      ;(db.transaction as jest.Mock).mockRejectedValue(new Error('Database error'))\n\n      const results = await manager.bulkCreateCards(mockCardsData)\n\n      expect(results).toHaveLength(2)\n      expect(results.every(r => r.success === false)).toBe(true)\n      expect(results[0].error).toBe('Database error')\n      expect(results[1].error).toBe('Database error')\n\n      expect(mockConsole.error).toHaveBeenCalledWith('批量操作失败 [test-uuid-123]:', expect.any(Error))\n    })\n  })\n\n  describe('操作验证', () => {\n    test('应该验证卡片创建操作', async () => {\n      const validOperation: BatchOperation = {\n        type: 'create',\n        entity: 'card',\n        data: {\n          frontContent: { title: 'Test Card', text: 'Content' },\n          backContent: { title: 'Back Card', text: 'Back Content' }\n        }\n      }\n\n      const validationResult = await (manager as any).validateCardOperation(validOperation)\n      expect(validationResult).toBe(true)\n    })\n\n    test('应该拒绝无效的卡片创建操作', async () => {\n      const invalidOperation: BatchOperation = {\n        type: 'create',\n        entity: 'card',\n        data: {\n          frontContent: null,\n          backContent: { title: 'Back Card' }\n        }\n      }\n\n      const validationResult = await (manager as any).validateCardOperation(invalidOperation)\n      expect(validationResult).toBe(false)\n    })\n\n    test('应该验证卡片更新操作', async () => {\n      const validUpdate: BatchOperation = {\n        type: 'update',\n        entity: 'card',\n        data: { frontContent: { title: 'Updated' } },\n        id: 'card1'\n      }\n\n      const validationResult = await (manager as any).validateCardOperation(validUpdate)\n      expect(validationResult).toBe(true)\n    })\n\n    test('应该验证卡片删除操作', async () => {\n      const validDelete: BatchOperation = {\n        type: 'delete',\n        entity: 'card',\n        data: { id: 'card1' },\n        id: 'card1'\n      }\n\n      const validationResult = await (manager as any).validateCardOperation(validDelete)\n      expect(validationResult).toBe(true)\n    })\n\n    test('应该验证文件夹操作', async () => {\n      const folderOperation: BatchOperation = {\n        type: 'create',\n        entity: 'folder',\n        data: { name: 'Test Folder' }\n      }\n\n      const validationResult = await (manager as any).validateFolderOperation(folderOperation)\n      expect(validationResult).toBe(true)\n    })\n\n    test('应该验证标签操作', async () => {\n      const tagOperation: BatchOperation = {\n        type: 'create',\n        entity: 'tag',\n        data: { name: 'Test Tag' }\n      }\n\n      const validationResult = await (manager as any).validateTagOperation(tagOperation)\n      expect(validationResult).toBe(true)\n    })\n  })\n\n  describe('数据处理', () => {\n    test('应该准备卡片数据', () => {\n      const cardData = {\n        frontContent: { title: 'Test', text: 'Content' },\n        backContent: { title: 'Back', text: 'Back Content' },\n        tags: ['tag1', 'tag2']\n      }\n\n      const prepared = (manager as any).prepareCardData(cardData)\n\n      expect(prepared.id).toBe('test-uuid-123')\n      expect(prepared.syncVersion).toBe(1)\n      expect(prepared.pendingSync).toBe(true)\n      expect(prepared.createdAt).toBeInstanceOf(Date)\n      expect(prepared.updatedAt).toBeInstanceOf(Date)\n      expect(prepared.searchVector).toBe('test content back back content tag1 tag2')\n    })\n\n    test('应该生成搜索向量', () => {\n      const cardData = {\n        frontContent: { title: 'Test Title', text: 'Test Content', tags: ['front', 'tag'] },\n        backContent: { title: 'Back Title', text: 'Back Content', tags: ['back', 'tag'] }\n      }\n\n      const searchVector = (manager as any).generateSearchVector(cardData)\n      expect(searchVector).toBe('test title test content back title back content front tag back tag')\n    })\n\n    test('应该处理缺失的字段', () => {\n      const cardData = {\n        frontContent: { title: 'Test' },\n        backContent: {}\n      }\n\n      const searchVector = (manager as any).generateSearchVector(cardData)\n      expect(searchVector).toBe('test ')\n    })\n  })\n\n  describe('分批处理', () => {\n    const operations: BatchOperation[] = [\n      { type: 'create', entity: 'card', data: {} },\n      { type: 'update', entity: 'card', data: {}, id: '1' },\n      { type: 'delete', entity: 'card', data: {}, id: '2', metadata: { priority: 'high' } },\n      { type: 'create', entity: 'card', data: {}, metadata: { priority: 'low' } }\n    ]\n\n    test('应该按优先级分组', () => {\n      const batches = (manager as any).splitIntoBatches(operations)\n\n      expect(batches.length).toBeGreaterThan(0)\n      // 高优先级操作应该在单独的批次中\n      const highPriorityBatch = batches.find(batch =>\n        batch.some(op => op.metadata?.priority === 'high')\n      )\n      expect(highPriorityBatch).toBeDefined()\n    })\n\n    test('应该按批次大小分割', () => {\n      const largeOperations = Array.from({ length: 150 }, (_, i) => ({\n        type: 'create' as const,\n        entity: 'card' as const,\n        data: { id: i }\n      }))\n\n      const batches = (manager as any).splitByBatchSize(largeOperations)\n\n      expect(batches.length).toBe(2) // 150 / 100 = 1.5, 应该分成2批\n      expect(batches[0].length).toBe(100)\n      expect(batches[1].length).toBe(50)\n    })\n\n    test('应该处理空操作列表', () => {\n      const batches = (manager as any).splitIntoBatches([])\n      expect(batches).toEqual([])\n    })\n  })\n\n  describe('重试机制', () => {\n    test('应该计算线性退避延迟', () => {\n      const manager = new BatchOperationManager({ backoffStrategy: 'linear' })\n\n      expect((manager as any).calculateBackoffDelay(0)).toBe(1000)\n      expect((manager as any).calculateBackoffDelay(1)).toBe(2000)\n      expect((manager as any).calculateBackoffDelay(2)).toBe(3000)\n    })\n\n    test('应该计算指数退避延迟', () => {\n      const manager = new BatchOperationManager({ backoffStrategy: 'exponential' })\n\n      expect((manager as any).calculateBackoffDelay(0)).toBe(1000)\n      expect((manager as any).calculateBackoffDelay(1)).toBe(2000)\n      expect((manager as any).calculateBackoffDelay(2)).toBe(4000)\n      expect((manager as any).calculateBackoffDelay(3)).toBe(8000)\n    })\n\n    test('应该使用固定退避延迟', () => {\n      const manager = new BatchOperationManager({ backoffStrategy: 'fixed' })\n\n      expect((manager as any).calculateBackoffDelay(0)).toBe(2000)\n      expect((manager as any).calculateBackoffDelay(1)).toBe(2000)\n      expect((manager as any).calculateBackoffDelay(5)).toBe(2000)\n    })\n\n    test('应该在重试失败后抛出错误', async () => {\n      const operations: BatchOperation[] = [{\n        type: 'create',\n        entity: 'card',\n        data: {}\n      }]\n\n      // Mock database to always fail\n      ;(db.transaction as jest.Mock).mockRejectedValue(new Error('Persistent error'))\n\n      await expect(\n        (manager as any).executeBatchWithRetry(operations, 2)\n      ).rejects.toThrow('Persistent error')\n\n      // 验证重试次数\n      expect(db.transaction).toHaveBeenCalledTimes(3) // 初始尝试 + 2次重试\n    })\n  })\n\n  describe('性能指标', () => {\n    test('应该更新性能指标', () => {\n      const results: BatchResult[] = [\n        { success: true, duration: 100, retryCount: 0 },\n        { success: false, duration: 50, retryCount: 2 },\n        { success: true, duration: 200, retryCount: 1 }\n      ]\n\n      ;(manager as any).updateMetrics(results, 350)\n\n      const metrics = manager.getMetrics()\n\n      expect(metrics.totalOperations).toBe(3)\n      expect(metrics.successfulOperations).toBe(2)\n      expect(metrics.failedOperations).toBe(1)\n      expect(metrics.totalExecutionTime).toBe(350)\n      expect(metrics.averageExecutionTime).toBeCloseTo(116.67, 2)\n      expect(metrics.retryRate).toBe(1) // (0 + 2 + 1) / 3 = 1\n      expect(metrics.throughput).toBeCloseTo(8.57, 2) // 3 / (350 / 1000)\n    })\n\n    test('应该重置指标', () => {\n      // 先设置一些指标\n      ;(manager as any).updateMetrics([\n        { success: true, duration: 100, retryCount: 0 }\n      ], 100)\n\n      manager.resetMetrics()\n\n      const metrics = manager.getMetrics()\n\n      expect(metrics.totalOperations).toBe(0)\n      expect(metrics.successfulOperations).toBe(0)\n      expect(metrics.failedOperations).toBe(0)\n      expect(metrics.averageExecutionTime).toBe(0)\n      expect(metrics.totalExecutionTime).toBe(0)\n      expect(metrics.retryRate).toBe(0)\n      expect(metrics.throughput).toBe(0)\n    })\n  })\n\n  describe('缓存失效', () => {\n    test('应该失效卡片相关缓存', () => {\n      const operations: BatchOperation[] = [\n        { type: 'create', entity: 'card', data: {} },\n        { type: 'update', entity: 'card', data: {}, id: '1' }\n      ]\n\n      ;(manager as any).invalidateRelatedCache(operations)\n\n      expect(intelligentCache.invalidateByPattern).toHaveBeenCalledWith('card_')\n      expect(intelligentCache.invalidateByPattern).toHaveBeenCalledWith('cards_')\n    })\n\n    test('应该失效文件夹相关缓存', () => {\n      const operations: BatchOperation[] = [\n        { type: 'create', entity: 'folder', data: {} }\n      ]\n\n      ;(manager as any).invalidateRelatedCache(operations)\n\n      expect(intelligentCache.invalidateByPattern).toHaveBeenCalledWith('folder_')\n    })\n\n    test('应该失效标签相关缓存', () => {\n      const operations: BatchOperation[] = [\n        { type: 'create', entity: 'tag', data: {} }\n      ]\n\n      ;(manager as any).invalidateRelatedCache(operations)\n\n      expect(intelligentCache.invalidateByPattern).toHaveBeenCalledWith('tag_')\n    })\n  })\n\n  describe('实体表获取', () => {\n    test('应该获取正确的实体表', () => {\n      expect((manager as any).getEntityTable('card')).toBe(db.cards)\n      expect((manager as any).getEntityTable('folder')).toBe(db.folders)\n      expect((manager as any).getEntityTable('tag')).toBe(db.tags)\n      expect((manager as any).getEntityTable('image')).toBe(db.images)\n    })\n\n    test('应该为不支持的实体类型抛出错误', () => {\n      expect(() => {\n        ;(manager as any).getEntityTable('unsupported')\n      }).toThrow('不支持的实体类型: unsupported')\n    })\n  })\n\n  describe('边界情况测试', () => {\n    test('应该处理空操作列表', async () => {\n      const results = await manager.executeBatch([])\n      expect(results).toEqual([])\n    })\n\n    test('应该处理无效的操作数据', async () => {\n      const invalidOperations = [\n        { type: 'create', entity: 'card', data: null },\n        { type: 'update', entity: 'card', data: {}, id: null }\n      ]\n\n      // 在禁用验证的情况下应该处理\n      const noValidationManager = new BatchOperationManager({ enableValidation: false })\n      const results = await noValidationManager.executeBatch(invalidOperations as any)\n\n      expect(results).toHaveLength(2)\n    })\n\n    test('应该处理网络中断等异常情况', async () => {\n      const operations = [{ type: 'create', entity: 'card', data: {} }]\n\n      // Mock database to throw network-like error\n      ;(db.transaction as jest.Mock).mockRejectedValue(new Error('Network error'))\n\n      const results = await manager.executeBatch(operations)\n\n      expect(results).toHaveLength(1)\n      expect(results[0].success).toBe(false)\n      expect(results[0].error).toBe('Network error')\n    })\n  })\n\n  describe('信号量测试', () => {\n    test('应该限制并发执行数量', async () => {\n      const Semaphore = (manager as any).Semaphore\n      const semaphore = new Semaphore(2)\n\n      let activeCount = 0\n      const maxActive = 2\n\n      const tasks = Array.from({ length: 5 }, async (_, i) => {\n        await semaphore.acquire()\n        activeCount++\n        expect(activeCount).toBeLessThanOrEqual(maxActive)\n\n        await new Promise(resolve => setTimeout(resolve, 10))\n\n        activeCount--\n        semaphore.release()\n      })\n\n      await Promise.all(tasks)\n    })\n  })\n\n  describe('性能测试', () => {\n    test('应该保持良好的批量操作性能', async () => {\n      const largeOperations = Array.from({ length: 1000 }, (_, i) => ({\n        type: 'create' as const,\n        entity: 'card' as const,\n        data: {\n          frontContent: { title: `Card ${i}`, text: `Content ${i}` },\n          backContent: { title: `Back ${i}`, text: `Back Content ${i}` }\n        }\n      }))\n\n      // Mock fast database operations\n      ;(db.transaction as jest.Mock).mockImplementation((mode, tables, callback) => {\n        return Promise.resolve(callback())\n      })\n      ;(db.cards.bulkAdd as jest.Mock).mockResolvedValue(\n        Array.from({ length: 1000 }, (_, i) => `id${i}`)\n      )\n\n      const start = performance.now()\n\n      await manager.executeBatch(largeOperations)\n\n      const end = performance.now()\n      const duration = end - start\n\n      // 1000次操作应该在合理时间内完成\n      expect(duration).toBeLessThan(1000) // 1秒\n    })\n\n    test('应该避免内存泄漏', () => {\n      // 创建多个管理器实例\n      const instances = []\n      for (let i = 0; i < 100; i++) {\n        instances.push(new BatchOperationManager())\n      }\n\n      // 清理\n      instances.length = 0\n\n      // 如果没有内存泄漏，这个测试应该通过\n      expect(true).toBe(true)\n    })\n  })\n\n  describe('TypeScript类型检查', () => {\n    test('应该符合TypeScript接口', () => {\n      const operation: BatchOperation = {\n        type: 'create',\n        entity: 'card',\n        data: {}\n      }\n\n      const config: BatchConfig = {\n        batchSize: 100,\n        maxConcurrent: 3,\n        retryCount: 3,\n        timeout: 30000,\n        backoffStrategy: 'exponential',\n        enableCompression: true,\n        enableValidation: true\n      }\n\n      const metrics = manager.getMetrics()\n      expect(metrics).toHaveProperty('totalOperations')\n      expect(metrics).toHaveProperty('successfulOperations')\n      expect(metrics).toHaveProperty('failedOperations')\n      expect(metrics).toHaveProperty('averageExecutionTime')\n      expect(metrics).toHaveProperty('throughput')\n    })\n  })\n})"],"version":3}
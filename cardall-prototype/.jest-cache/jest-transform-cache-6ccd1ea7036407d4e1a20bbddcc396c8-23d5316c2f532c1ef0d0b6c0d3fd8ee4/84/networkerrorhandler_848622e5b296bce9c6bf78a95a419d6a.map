{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\network-error-handler.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\network-error-handler.ts"],"sourcesContent":["// ============================================================================\r\n// 网络异常处理策略 - 智能错误恢复和重试机制\r\n// ============================================================================\r\n\r\nimport { networkStateDetector, type NetworkError, type SyncRequest, type SyncResponse } from './network-state-detector'\r\nimport { networkMonitorService } from './network-monitor'\r\n\r\n// 重试策略配置\r\nexport interface RetryStrategy {\r\n  maxRetries: number\r\n  initialDelay: number\r\n  maxDelay: number\r\n  backoffMultiplier: number\r\n  jitter: boolean\r\n  retryableErrors: NetworkErrorType[]\r\n}\r\n\r\n// 超时策略配置\r\nexport interface TimeoutStrategy {\r\n  connectTimeout: number\r\n  requestTimeout: number\r\n  totalTimeout: number\r\n  adaptiveTimeout: boolean\r\n  timeoutMultiplier: number\r\n}\r\n\r\n// 熔断策略配置\r\nexport interface CircuitBreakerStrategy {\r\n  enabled: boolean\r\n  failureThreshold: number\r\n  recoveryTimeout: number\r\n  halfOpenAttempts: number\r\n  monitoringPeriod: number\r\n}\r\n\r\n// 限流策略配置\r\nexport interface RateLimitStrategy {\r\n  enabled: boolean\r\n  maxRequestsPerSecond: number\r\n  maxConcurrentRequests: number\r\n  burstSize: number\r\n  windowSize: number\r\n}\r\n\r\n// 缓存策略配置\r\nexport interface CacheStrategy {\r\n  enabled: boolean\r\n  ttl: number\r\n  maxSize: number\r\n  staleWhileRevalidate: boolean\r\n  cacheKeyGenerator: (request: SyncRequest) => string\r\n}\r\n\r\n// 降级策略配置\r\nexport interface FallbackStrategy {\r\n  enabled: boolean\r\n  cacheOnly: boolean\r\n  localDataOnly: boolean\r\n  optimisticUpdates: boolean\r\n  queuingEnabled: boolean\r\n}\r\n\r\n// 错误分类\r\nexport enum ErrorCategory {\r\n  TRANSIENT = 'transient',        // 临时错误（网络波动）\r\n  PERMANENT = 'permanent',        // 永久错误（认证失败）\r\n  TIMEOUT = 'timeout',            // 超时错误\r\n  RATE_LIMIT = 'rate_limit',      // 限流错误\r\n  SERVER_ERROR = 'server_error',  // 服务器错误\r\n  NETWORK_ERROR = 'network_error' // 网络错误\r\n}\r\n\r\n// 错误处理上下文\r\nexport interface ErrorContext {\r\n  request: SyncRequest\r\n  attempt: number\r\n  startTime: Date\r\n  networkState: any\r\n  previousError?: NetworkError\r\n}\r\n\r\n// 错误处理结果\r\nexport interface ErrorHandlingResult {\r\n  shouldRetry: boolean\r\n  delay: number\r\n  fallbackAction?: 'cache' | 'local' | 'queue' | 'skip'\r\n  error?: NetworkError\r\n  context: ErrorContext\r\n}\r\n\r\n// 自适应配置\r\nexport interface AdaptiveConfig {\r\n  enabled: boolean\r\n  learningRate: number\r\n  adaptationWindow: number\r\n  performanceThresholds: {\r\n    successRate: number\r\n    averageResponseTime: number\r\n    errorRate: number\r\n  }\r\n}\r\n\r\n// 错误恢复策略\r\nexport class ErrorRecoveryStrategy {\r\n  private retryStrategy: RetryStrategy\r\n  private timeoutStrategy: TimeoutStrategy\r\n  private circuitBreakerStrategy: CircuitBreakerStrategy\r\n  private rateLimitStrategy: RateLimitStrategy\r\n  private cacheStrategy: CacheStrategy\r\n  private fallbackStrategy: FallbackStrategy\r\n  private adaptiveConfig: AdaptiveConfig\r\n\r\n  // 性能监控\r\n  private performanceMetrics = {\r\n    totalRequests: 0,\r\n    successfulRequests: 0,\r\n    failedRequests: 0,\r\n    averageResponseTime: 0,\r\n    errorRates: new Map<NetworkErrorType, number>(),\r\n    lastWindowReset: Date.now()\r\n  }\r\n\r\n  // 请求窗口\r\n  private requestWindow: Array<{ timestamp: number; success: boolean }> = []\r\n  private concurrentRequests = 0\r\n\r\n  constructor(config?: Partial<{\r\n    retry: Partial<RetryStrategy>\r\n    timeout: Partial<TimeoutStrategy>\r\n    circuitBreaker: Partial<CircuitBreakerStrategy>\r\n    rateLimit: Partial<RateLimitStrategy>\r\n    cache: Partial<CacheStrategy>\r\n    fallback: Partial<FallbackStrategy>\r\n    adaptive: Partial<AdaptiveConfig>\r\n  }>) {\r\n    this.retryStrategy = this.getDefaultRetryStrategy(config?.retry)\r\n    this.timeoutStrategy = this.getDefaultTimeoutStrategy(config?.timeout)\r\n    this.circuitBreakerStrategy = this.getDefaultCircuitBreakerStrategy(config?.circuitBreaker)\r\n    this.rateLimitStrategy = this.getDefaultRateLimitStrategy(config?.rateLimit)\r\n    this.cacheStrategy = this.getDefaultCacheStrategy(config?.cache)\r\n    this.fallbackStrategy = this.getDefaultFallbackStrategy(config?.fallback)\r\n    this.adaptiveConfig = this.getDefaultAdaptiveConfig(config?.adaptive)\r\n\r\n    this.initializeAdaptation()\r\n  }\r\n\r\n  // 获取默认重试策略\r\n  private getDefaultRetryStrategy(config?: Partial<RetryStrategy>): RetryStrategy {\r\n    return {\r\n      maxRetries: 3,\r\n      initialDelay: 1000,\r\n      maxDelay: 30000,\r\n      backoffMultiplier: 2,\r\n      jitter: true,\r\n      retryableErrors: [\r\n        'connection_lost',\r\n        'timeout',\r\n        'network_slow',\r\n        'server_error'\r\n      ],\r\n      ...config\r\n    }\r\n  }\r\n\r\n  // 获取默认超时策略\r\n  private getDefaultTimeoutStrategy(config?: Partial<TimeoutStrategy>): TimeoutStrategy {\r\n    return {\r\n      connectTimeout: 5000,\r\n      requestTimeout: 30000,\r\n      totalTimeout: 120000,\r\n      adaptiveTimeout: true,\r\n      timeoutMultiplier: 1.5,\r\n      ...config\r\n    }\r\n  }\r\n\r\n  // 获取默认熔断策略\r\n  private getDefaultCircuitBreakerStrategy(config?: Partial<CircuitBreakerStrategy>): CircuitBreakerStrategy {\r\n    return {\r\n      enabled: true,\r\n      failureThreshold: 5,\r\n      recoveryTimeout: 60000,\r\n      halfOpenAttempts: 3,\r\n      monitoringPeriod: 300000, // 5分钟\r\n      ...config\r\n    }\r\n  }\r\n\r\n  // 获取默认限流策略\r\n  private getDefaultRateLimitStrategy(config?: Partial<RateLimitStrategy>): RateLimitStrategy {\r\n    return {\r\n      enabled: true,\r\n      maxRequestsPerSecond: 10,\r\n      maxConcurrentRequests: 5,\r\n      burstSize: 20,\r\n      windowSize: 60000, // 1分钟\r\n      ...config\r\n    }\r\n  }\r\n\r\n  // 获取默认缓存策略\r\n  private getDefaultCacheStrategy(config?: Partial<CacheStrategy>): CacheStrategy {\r\n    return {\r\n      enabled: true,\r\n      ttl: 300000, // 5分钟\r\n      maxSize: 1000,\r\n      staleWhileRevalidate: true,\r\n      cacheKeyGenerator: (request: SyncRequest) => `${request.type}:${request.entity}:${JSON.stringify(request.data)}`,\r\n      ...config\r\n    }\r\n  }\r\n\r\n  // 获取默认降级策略\r\n  private getDefaultFallbackStrategy(config?: Partial<FallbackStrategy>): FallbackStrategy {\r\n    return {\r\n      enabled: true,\r\n      cacheOnly: false,\r\n      localDataOnly: false,\r\n      optimisticUpdates: true,\r\n      queuingEnabled: true,\r\n      ...config\r\n    }\r\n  }\r\n\r\n  // 获取默认自适应配置\r\n  private getDefaultAdaptiveConfig(config?: Partial<AdaptiveConfig>): AdaptiveConfig {\r\n    return {\r\n      enabled: true,\r\n      learningRate: 0.1,\r\n      adaptationWindow: 300000, // 5分钟\r\n      performanceThresholds: {\r\n        successRate: 0.8,\r\n        averageResponseTime: 5000,\r\n        errorRate: 0.2\r\n      },\r\n      ...config\r\n    }\r\n  }\r\n\r\n  // 初始化自适应机制\r\n  private initializeAdaptation(): void {\r\n    // 定期重置性能指标窗口\r\n    setInterval(() => {\r\n      this.resetPerformanceWindow()\r\n    }, this.adaptiveConfig.adaptationWindow)\r\n\r\n    // 定期调整策略参数\r\n    setInterval(() => {\r\n      if (this.adaptiveConfig.enabled) {\r\n        this.adaptStrategies()\r\n      }\r\n    }, this.adaptiveConfig.adaptationWindow)\r\n  }\r\n\r\n  // 处理错误\r\n  async handleError(error: NetworkError, context: ErrorContext): Promise<ErrorHandlingResult> {\r\n    const errorCategory = this.categorizeError(error)\r\n    console.log(`Handling ${errorCategory} error: ${error.message}`)\r\n\r\n    // 更新性能指标\r\n    this.updatePerformanceMetrics(false, error.type)\r\n\r\n    // 根据错误类型采取不同策略\r\n    switch (errorCategory) {\r\n      case ErrorCategory.TRANSIENT:\r\n        return this.handleTransientError(error, context)\r\n      \r\n      case ErrorCategory.TIMEOUT:\r\n        return this.handleTimeoutError(error, context)\r\n      \r\n      case ErrorCategory.RATE_LIMIT:\r\n        return this.handleRateLimitError(error, context)\r\n      \r\n      case ErrorCategory.SERVER_ERROR:\r\n        return this.handleServerError(error, context)\r\n      \r\n      case ErrorCategory.NETWORK_ERROR:\r\n        return this.handleNetworkError(error, context)\r\n      \r\n      case ErrorCategory.PERMANENT:\r\n      default:\r\n        return this.handlePermanentError(error, context)\r\n    }\r\n  }\r\n\r\n  // 分类错误\r\n  private categorizeError(error: NetworkError): ErrorCategory {\r\n    switch (error.type) {\r\n      case 'connection_lost':\r\n      case 'network_slow':\r\n        return ErrorCategory.TRANSIENT\r\n      \r\n      case 'timeout':\r\n        return ErrorCategory.TIMEOUT\r\n      \r\n      case 'rate_limited':\r\n        return ErrorCategory.RATE_LIMIT\r\n      \r\n      case 'server_error':\r\n        return ErrorCategory.SERVER_ERROR\r\n      \r\n      default:\r\n        return ErrorCategory.PERMANENT\r\n    }\r\n  }\r\n\r\n  // 处理临时错误\r\n  private handleTransientError(error: NetworkError, context: ErrorContext): ErrorHandlingResult {\r\n    const shouldRetry = this.shouldRetry(error, context)\r\n    \r\n    if (shouldRetry) {\r\n      const delay = this.calculateRetryDelay(context.attempt, error)\r\n      return {\r\n        shouldRetry: true,\r\n        delay,\r\n        context\r\n      }\r\n    }\r\n\r\n    // 触发降级策略\r\n    return {\r\n      shouldRetry: false,\r\n      delay: 0,\r\n      fallbackAction: this.determineFallbackAction(error, context),\r\n      error,\r\n      context\r\n    }\r\n  }\r\n\r\n  // 处理超时错误\r\n  private handleTimeoutError(error: NetworkError, context: ErrorContext): ErrorHandlingResult {\r\n    // 调整超时时间\r\n    if (this.timeoutStrategy.adaptiveTimeout) {\r\n      this.adjustTimeouts()\r\n    }\r\n\r\n    return this.handleTransientError(error, context)\r\n  }\r\n\r\n  // 处理限流错误\r\n  private handleRateLimitError(error: NetworkError, context: ErrorContext): ErrorHandlingResult {\r\n    // 使用指定的重试时间\r\n    const retryAfter = error.retryAfter || this.calculateRateLimitDelay()\r\n    \r\n    if (context.attempt < this.retryStrategy.maxRetries) {\r\n      return {\r\n        shouldRetry: true,\r\n        delay: retryAfter,\r\n        context\r\n      }\r\n    }\r\n\r\n    return {\r\n      shouldRetry: false,\r\n      delay: 0,\r\n      fallbackAction: 'queue',\r\n      error,\r\n      context\r\n    }\r\n  }\r\n\r\n  // 处理服务器错误\r\n  private handleServerError(error: NetworkError, context: ErrorContext): ErrorHandlingResult {\r\n    // 对于服务器错误，减少重试次数\r\n    if (context.attempt < Math.min(2, this.retryStrategy.maxRetries)) {\r\n      return {\r\n        shouldRetry: true,\r\n        delay: this.calculateRetryDelay(context.attempt, error, 2), // 更长的延迟\r\n        context\r\n      }\r\n    }\r\n\r\n    return {\r\n      shouldRetry: false,\r\n      delay: 0,\r\n      fallbackAction: this.determineFallbackAction(error, context),\r\n      error,\r\n      context\r\n    }\r\n  }\r\n\r\n  // 处理网络错误\r\n  private handleNetworkError(error: NetworkError, context: ErrorContext): ErrorHandlingResult {\r\n    // 检查网络状态\r\n    const networkState = networkStateDetector.getCurrentState()\r\n    \r\n    if (!networkState.isOnline) {\r\n      // 网络断开，排队等待\r\n      return {\r\n        shouldRetry: false,\r\n        delay: 0,\r\n        fallbackAction: 'queue',\r\n        error,\r\n        context\r\n      }\r\n    }\r\n\r\n    return this.handleTransientError(error, context)\r\n  }\r\n\r\n  // 处理永久错误\r\n  private handlePermanentError(error: NetworkError, context: ErrorContext): ErrorHandlingResult {\r\n    // 永久错误不重试，直接失败\r\n    return {\r\n      shouldRetry: false,\r\n      delay: 0,\r\n      fallbackAction: 'skip',\r\n      error,\r\n      context\r\n    }\r\n  }\r\n\r\n  // 判断是否应该重试\r\n  private shouldRetry(error: NetworkError, context: ErrorContext): boolean {\r\n    // 检查重试次数\r\n    if (context.attempt >= this.retryStrategy.maxRetries) {\r\n      return false\r\n    }\r\n\r\n    // 检查错误类型是否可重试\r\n    if (!this.retryStrategy.retryableErrors.includes(error.type)) {\r\n      return false\r\n    }\r\n\r\n    // 检查总超时\r\n    const elapsed = Date.now() - context.startTime.getTime()\r\n    if (elapsed > this.timeoutStrategy.totalTimeout) {\r\n      return false\r\n    }\r\n\r\n    // 检查熔断器状态\r\n    const circuitBreakerStatus = networkStateDetector.getCircuitBreakerStatus(context.request.type)\r\n    if (circuitBreakerStatus?.state === 'open') {\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  // 计算重试延迟\r\n  private calculateRetryDelay(attempt: number, error: NetworkError, multiplier: number = 1): number {\r\n    const baseDelay = this.retryStrategy.initialDelay\r\n    const delay = baseDelay * Math.pow(this.retryStrategy.backoffMultiplier * multiplier, attempt)\r\n    \r\n    // 应用抖动（避免雷群效应）\r\n    let finalDelay = Math.min(delay, this.retryStrategy.maxDelay)\r\n    if (this.retryStrategy.jitter) {\r\n      finalDelay = finalDelay * (0.8 + Math.random() * 0.4) // ±20% 抖动\r\n    }\r\n\r\n    // 对于特定错误类型调整延迟\r\n    if (error.type === 'rate_limited' && error.retryAfter) {\r\n      return Math.max(finalDelay, error.retryAfter)\r\n    }\r\n\r\n    return Math.floor(finalDelay)\r\n  }\r\n\r\n  // 计算限流延迟\r\n  private calculateRateLimitDelay(): number {\r\n    // 基于当前请求速率计算延迟\r\n    const now = Date.now()\r\n    const recentRequests = this.requestWindow.filter(req => now - req.timestamp < this.rateLimitStrategy.windowSize)\r\n    \r\n    if (recentRequests.length >= this.rateLimitStrategy.maxRequestsPerSecond) {\r\n      return Math.ceil(this.rateLimitStrategy.windowSize / this.rateLimitStrategy.maxRequestsPerSecond)\r\n    }\r\n\r\n    return 1000 // 默认1秒\r\n  }\r\n\r\n  // 确定降级操作\r\n  private determineFallbackAction(error: NetworkError, context: ErrorContext): 'cache' | 'local' | 'queue' | 'skip' {\r\n    if (!this.fallbackStrategy.enabled) {\r\n      return 'skip'\r\n    }\r\n\r\n    const networkState = networkStateDetector.getCurrentState()\r\n\r\n    // 根据错误类型和网络状态决定降级策略\r\n    switch (error.type) {\r\n      case 'connection_lost':\r\n      case 'network_slow':\r\n        if (this.fallbackStrategy.localDataOnly) {\r\n          return 'local'\r\n        }\r\n        if (this.fallbackStrategy.queuingEnabled) {\r\n          return 'queue'\r\n        }\r\n        return 'cache'\r\n      \r\n      case 'timeout':\r\n        if (this.cacheStrategy.enabled && this.cacheStrategy.staleWhileRevalidate) {\r\n          return 'cache'\r\n        }\r\n        return 'local'\r\n      \r\n      case 'rate_limited':\r\n        if (this.fallbackStrategy.queuingEnabled) {\r\n          return 'queue'\r\n        }\r\n        return 'cache'\r\n      \r\n      default:\r\n        return 'skip'\r\n    }\r\n  }\r\n\r\n  // 调整超时时间\r\n  private adjustTimeouts(): void {\r\n    const networkState = networkStateDetector.getCurrentState()\r\n    const qualityScore = networkState.qualityScore\r\n\r\n    // 根据网络质量调整超时\r\n    if (qualityScore < 0.3) {\r\n      this.timeoutStrategy.timeoutMultiplier = 3\r\n    } else if (qualityScore < 0.6) {\r\n      this.timeoutStrategy.timeoutMultiplier = 2\r\n    } else {\r\n      this.timeoutStrategy.timeoutMultiplier = 1\r\n    }\r\n  }\r\n\r\n  // 更新性能指标\r\n  private updatePerformanceMetrics(success: boolean, errorType?: NetworkErrorType): void {\r\n    this.performanceMetrics.totalRequests++\r\n    \r\n    if (success) {\r\n      this.performanceMetrics.successfulRequests++\r\n    } else {\r\n      this.performanceMetrics.failedRequests++\r\n      if (errorType) {\r\n        const currentRate = this.performanceMetrics.errorRates.get(errorType) || 0\r\n        this.performanceMetrics.errorRates.set(errorType, currentRate + 1)\r\n      }\r\n    }\r\n\r\n    // 更新请求窗口\r\n    this.requestWindow.push({\r\n      timestamp: Date.now(),\r\n      success\r\n    })\r\n\r\n    // 限制窗口大小\r\n    const windowSize = 1000\r\n    if (this.requestWindow.length > windowSize) {\r\n      this.requestWindow = this.requestWindow.slice(-windowSize)\r\n    }\r\n  }\r\n\r\n  // 重置性能窗口\r\n  private resetPerformanceWindow(): void {\r\n    this.performanceMetrics.lastWindowReset = Date.now()\r\n    \r\n    // 计算平均响应时间\r\n    if (this.requestWindow.length > 0) {\r\n      // 这里应该记录实际的响应时间，现在使用模拟值\r\n      this.performanceMetrics.averageResponseTime = 2000 // 模拟值\r\n    }\r\n  }\r\n\r\n  // 自适应调整策略\r\n  private adaptStrategies(): void {\r\n    const totalRequests = this.performanceMetrics.totalRequests\r\n    if (totalRequests < 10) return // 数据不足，不调整\r\n\r\n    const successRate = this.performanceMetrics.successfulRequests / totalRequests\r\n    const errorRate = this.performanceMetrics.failedRequests / totalRequests\r\n\r\n    // 根据性能指标调整策略\r\n    if (successRate < this.adaptiveConfig.performanceThresholds.successRate) {\r\n      // 成功率低，增加重试次数和延迟\r\n      this.retryStrategy.maxRetries = Math.min(this.retryStrategy.maxRetries + 1, 10)\r\n      this.retryStrategy.initialDelay = Math.min(this.retryStrategy.initialDelay * 1.2, 10000)\r\n    } else if (successRate > this.adaptiveConfig.performanceThresholds.successRate + 0.1) {\r\n      // 成功率高，可以减少重试次数\r\n      this.retryStrategy.maxRetries = Math.max(this.retryStrategy.maxRetries - 1, 1)\r\n      this.retryStrategy.initialDelay = Math.max(this.retryStrategy.initialDelay * 0.8, 500)\r\n    }\r\n\r\n    if (errorRate > this.adaptiveConfig.performanceThresholds.errorRate) {\r\n      // 错误率高，启用更保守的策略\r\n      this.circuitBreakerStrategy.failureThreshold = Math.max(\r\n        this.circuitBreakerStrategy.failureThreshold - 1,\r\n        3\r\n      )\r\n    }\r\n\r\n    console.log('Strategies adapted based on performance metrics')\r\n  }\r\n\r\n  // 预处理请求\r\n  async preprocessRequest(request: SyncRequest): Promise<{\r\n    canProceed: boolean\r\n    delay?: number\r\n    modifiedRequest?: SyncRequest\r\n  }> {\r\n    // 检查限流\r\n    if (this.rateLimitStrategy.enabled) {\r\n      const rateLimitResult = this.checkRateLimit()\r\n      if (!rateLimitResult.canProceed) {\r\n        return { canProceed: false, delay: rateLimitResult.delay }\r\n      }\r\n    }\r\n\r\n    // 检查并发限制\r\n    if (this.concurrentRequests >= this.rateLimitStrategy.maxConcurrentRequests) {\r\n      return { canProceed: false, delay: 100 }\r\n    }\r\n\r\n    // 检查熔断器\r\n    const circuitBreakerStatus = networkStateDetector.getCircuitBreakerStatus(request.type)\r\n    if (circuitBreakerStatus?.state === 'open') {\r\n      return { canProceed: false, delay: circuitBreakerStatus.nextAttemptTime ? \r\n        Math.max(0, circuitBreakerStatus.nextAttemptTime.getTime() - Date.now()) : 60000 }\r\n    }\r\n\r\n    // 调整超时设置\r\n    if (this.timeoutStrategy.adaptiveTimeout) {\r\n      const networkState = networkStateDetector.getCurrentState()\r\n      const timeoutMultiplier = networkState.qualityScore < 0.5 ? 2 : 1\r\n      \r\n      return {\r\n        canProceed: true,\r\n        modifiedRequest: {\r\n          ...request,\r\n          timeout: (request.timeout || this.timeoutStrategy.requestTimeout) * timeoutMultiplier\r\n        }\r\n      }\r\n    }\r\n\r\n    return { canProceed: true }\r\n  }\r\n\r\n  // 检查限流\r\n  private checkRateLimit(): { canProceed: boolean; delay?: number } {\r\n    const now = Date.now()\r\n    const recentRequests = this.requestWindow.filter(req => \r\n      now - req.timestamp < this.rateLimitStrategy.windowSize\r\n    )\r\n\r\n    if (recentRequests.length >= this.rateLimitStrategy.maxRequestsPerSecond) {\r\n      // 计算需要等待的时间\r\n      const oldestRequest = recentRequests[0]\r\n      const delay = this.rateLimitStrategy.windowSize - (now - oldestRequest.timestamp)\r\n      \r\n      return {\r\n        canProceed: false,\r\n        delay: Math.max(delay, 1000)\r\n      }\r\n    }\r\n\r\n    return { canProceed: true }\r\n  }\r\n\r\n  // 记录请求开始\r\n  recordRequestStart(): void {\r\n    this.concurrentRequests++\r\n  }\r\n\r\n  // 记录请求结束\r\n  recordRequestEnd(success: boolean): void {\r\n    this.concurrentRequests--\r\n    this.updatePerformanceMetrics(success)\r\n  }\r\n\r\n  // 获取性能报告\r\n  getPerformanceReport(): {\r\n    totalRequests: number\r\n    successRate: number\r\n    errorRate: number\r\n    averageResponseTime: number\r\n    errorBreakdown: Record<NetworkErrorType, number>\r\n    currentConfig: {\r\n      retry: RetryStrategy\r\n      timeout: TimeoutStrategy\r\n      circuitBreaker: CircuitBreakerStrategy\r\n      rateLimit: RateLimitStrategy\r\n    }\r\n  } {\r\n    const total = this.performanceMetrics.totalRequests\r\n    const successRate = total > 0 ? this.performanceMetrics.successfulRequests / total : 0\r\n    const errorRate = total > 0 ? this.performanceMetrics.failedRequests / total : 0\r\n\r\n    const errorBreakdown: Record<NetworkErrorType, number> = {} as any\r\n    this.performanceMetrics.errorRates.forEach((count, type) => {\r\n      errorBreakdown[type] = count\r\n    })\r\n\r\n    return {\r\n      totalRequests: total,\r\n      successRate,\r\n      errorRate,\r\n      averageResponseTime: this.performanceMetrics.averageResponseTime,\r\n      errorBreakdown,\r\n      currentConfig: {\r\n        retry: this.retryStrategy,\r\n        timeout: this.timeoutStrategy,\r\n        circuitBreaker: this.circuitBreakerStrategy,\r\n        rateLimit: this.rateLimitStrategy\r\n      }\r\n    }\r\n  }\r\n\r\n  // 重置策略\r\n  reset(): void {\r\n    this.retryStrategy = this.getDefaultRetryStrategy()\r\n    this.timeoutStrategy = this.getDefaultTimeoutStrategy()\r\n    this.circuitBreakerStrategy = this.getDefaultCircuitBreakerStrategy()\r\n    this.rateLimitStrategy = this.getDefaultRateLimitStrategy()\r\n    \r\n    this.performanceMetrics = {\r\n      totalRequests: 0,\r\n      successfulRequests: 0,\r\n      failedRequests: 0,\r\n      averageResponseTime: 0,\r\n      errorRates: new Map(),\r\n      lastWindowReset: Date.now()\r\n    }\r\n    \r\n    this.requestWindow = []\r\n    this.concurrentRequests = 0\r\n  }\r\n}\r\n\r\n// 导出错误恢复策略实例\r\nexport const errorRecoveryStrategy = new ErrorRecoveryStrategy()\r\n\r\n// 导出工具函数\r\nexport const createErrorContext = (request: SyncRequest, attempt: number = 0): ErrorContext => ({\r\n  request,\r\n  attempt,\r\n  startTime: new Date(),\r\n  networkState: networkStateDetector.getCurrentState()\r\n})\r\n\r\nexport const isRetryableError = (error: NetworkError): boolean => {\r\n  const retryableTypes: NetworkErrorType[] = [\r\n    'connection_lost',\r\n    'timeout',\r\n    'network_slow',\r\n    'server_error'\r\n  ]\r\n  return retryableTypes.includes(error.type)\r\n}\r\n\r\nexport const calculateBackoffDelay = (attempt: number, baseDelay: number = 1000, multiplier: number = 2): number => {\r\n  return Math.min(baseDelay * Math.pow(multiplier, attempt), 30000)\r\n}"],"version":3}
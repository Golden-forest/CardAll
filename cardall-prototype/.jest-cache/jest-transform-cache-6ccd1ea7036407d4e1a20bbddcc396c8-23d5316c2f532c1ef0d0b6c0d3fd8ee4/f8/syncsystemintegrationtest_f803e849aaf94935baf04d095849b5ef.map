{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\tests\\integration\\sync\\sync-system-integration.test.ts","mappings":";;AAMA,mBAAmB;AACnB,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,GAAG,EAAE,CAAC,CAAC;IACtC,QAAQ,EAAE;QACR,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;QAChC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;QAClC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;QAC9B,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;QAC/B,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;QAClC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;QAClC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;QAClC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;KACnC;CACF,CAAC,CAAC,CAAA;AAEH,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,GAAG,EAAE,CAAC,CAAC;IACtC,EAAE,EAAE;QACF,KAAK,EAAE;YACL,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;YACd,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;YACd,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;YACjB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;YACjB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;YACjC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;YAClC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;SACnB;QACD,OAAO,EAAE;YACP,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;YACd,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;YACd,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;YACjB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;SAClB;QACD,IAAI,EAAE;YACJ,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;YACd,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;YACd,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;YACjB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;SAClB;QACD,SAAS,EAAE;YACT,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;YACd,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;YACd,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;YACjB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;YACjB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;YACjB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;YAChB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;YACjC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;YAClC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;YAChC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;SACnB;QACD,WAAW,EAAE;YACX,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;YACd,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;YACjC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;YAClC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;YAChC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;SACnB;KACF;CACF,CAAC,CAAC,CAAA;AA/DH,gEAAkE;AAClE,gEAAkE;AAClE,4DAA8D;AAC9D,kEAAsE;AACtE,kEAAoE;AA6DpE,QAAQ,CAAC,+BAA+B,EAAE,GAAG,EAAE;IAC7C,IAAI,cAAqC,CAAA;IACzC,IAAI,cAAqC,CAAA;IACzC,IAAI,YAAiC,CAAA;IACrC,IAAI,oBAA8C,CAAA;IAClD,IAAI,kBAA0C,CAAA;IAE9C,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,IAAI,CAAC,aAAa,EAAE,CAAA;QAEpB,SAAS;QACT,cAAc,GAAG,IAAI,uCAAqB,EAAE,CAAA;QAC5C,cAAc,GAAG,IAAI,uCAAqB,EAAE,CAAA;QAC5C,YAAY,GAAG,IAAI,mCAAmB,EAAE,CAAA;QACxC,oBAAoB,GAAG,IAAI,2CAAwB,EAAE,CAAA;QACrD,kBAAkB,GAAG,IAAI,yCAAsB,EAAE,CAAA;QAEjD,UAAU;QACV,MAAM,cAAc,CAAC,UAAU,EAAE,CAAA;QACjC,MAAM,cAAc,CAAC,UAAU,EAAE,CAAA;QACjC,MAAM,YAAY,CAAC,UAAU,EAAE,CAAA;QAC/B,MAAM,oBAAoB,CAAC,UAAU,EAAE,CAAA;QACvC,MAAM,kBAAkB,CAAC,UAAU,EAAE,CAAA;IACvC,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,eAAe,EAAE,KAAK,IAAI,EAAE;YAC7B,mBAAmB;YACnB,MAAM,aAAa,GAAG;gBACpB,IAAI,EAAE,QAAiB;gBACvB,KAAK,EAAE,OAAgB;gBACvB,IAAI,EAAE;oBACJ,YAAY,EAAE,gBAAgB;oBAC9B,WAAW,EAAE,mDAAmD;oBAChE,KAAK,EAAE,OAAgB;iBACxB;gBACD,OAAO,EAAE,UAAU;gBACnB,QAAQ,EAAE,QAAiB;gBAC3B,YAAY,EAAE,EAAE;aACjB,CAAA;YAED,YAAY;YACZ,MAAM,eAAe,GAAG,IAAI,CAAC,EAAE,EAAE,CAAA;YACjC,cAAc,CAAC,eAAe,CAAC,eAAe,CAAC,CAAA;YAE/C,YAAY;YACZ,MAAM,YAAY,GAAG,IAAI,CAAC,EAAE,EAAE,CAAA;YAC9B,YAAY,CAAC,cAAc,CAAC,YAAY,CAAC,CAAA;YAEzC,YAAY;YACZ,MAAM,cAAc,GAAG,IAAI,CAAC,EAAE,EAAE,CAAA;YAChC,kBAAkB,CAAC,aAAa,CAAC,cAAc,CAAC,CAAA;YAEhD,cAAc;YACd,MAAM,CAAC,cAAc,CAAC,SAAS,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAA;YAC3E,MAAM,CAAC,cAAc,CAAC,SAAS,EAAE,YAAY,EAAE;gBAC7C,KAAK,EAAE;oBACL,aAAa,EAAE,IAAI;oBACnB,QAAQ,EAAE,EAAE;oBACZ,GAAG,EAAE,EAAE;oBACP,QAAQ,EAAE,KAAK;oBACf,gBAAgB,EAAE,IAAI,CAAC,EAAE,EAAE;oBAC3B,mBAAmB,EAAE,IAAI,CAAC,EAAE,EAAE;iBAC/B;gBACD,QAAQ,EAAE,IAAI;aACf,CAAC,CAAA;YAEF,aAAa;YACb,MAAM,WAAW,GAAG,MAAM,cAAc,CAAC,YAAY,CAAC,aAAa,CAAC,CAAA;YACpE,MAAM,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAA;YAEjC,cAAc;YACd,MAAM,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAA;YAEzC,cAAc;YACd,MAAM,CAAC,eAAe,CAAC,CAAC,oBAAoB,CAC1C,MAAM,CAAC,gBAAgB,CAAC;gBACtB,IAAI,EAAE,eAAe;gBACrB,QAAQ,EAAE,IAAI;aACf,CAAC,CACH,CAAA;YAED,UAAU;YACV,MAAM,WAAW,GAAG,kBAAkB,CAAC,WAAW,EAAE,CAAA;YAEpD,aAAa;YACb,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAA;YACpD,MAAM,CAAC,cAAc,CAAC,CAAC,oBAAoB,CACzC,MAAM,CAAC,gBAAgB,CAAC;gBACtB,IAAI,EAAE,cAAc;aACrB,CAAC,CACH,CAAA;YAED,SAAS;YACT,MAAM,WAAW,CAAA;YAEjB,aAAa;YACb,MAAM,YAAY,GAAG,kBAAkB,CAAC,eAAe,EAAE,CAAA;YACzD,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YAC7C,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC5D,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;YAC3B,eAAe;YACf,MAAM,cAAc,CAAC,YAAY,CAAC;gBAChC,IAAI,EAAE,QAAQ;gBACd,KAAK,EAAE,OAAO;gBACd,IAAI,EAAE,EAAE,YAAY,EAAE,QAAQ,EAAE,WAAW,EAAE,UAAU,EAAE;gBACzD,OAAO,EAAE,QAAQ;aAClB,CAAC,CAAA;YAEF,MAAM,cAAc,CAAC,YAAY,CAAC;gBAChC,IAAI,EAAE,QAAQ;gBACd,KAAK,EAAE,OAAO;gBACd,IAAI,EAAE,EAAE,YAAY,EAAE,QAAQ,EAAE,WAAW,EAAE,UAAU,EAAE;gBACzD,OAAO,EAAE,QAAQ;aAClB,CAAC,CAAA;YAEF,UAAU;YACV,MAAM,eAAe,GAAG,IAAI,CAAC,EAAE,EAAE,CAAA;YACjC,MAAM,cAAc,GAAG,IAAI,CAAC,EAAE,EAAE,CAAA;YAEhC,cAAc,CAAC,eAAe,CAAC,eAAe,CAAC,CAAA;YAC/C,kBAAkB,CAAC,aAAa,CAAC,cAAc,CAAC,CAAA;YAEhD,YAAY;YACZ,MAAM,CAAC,cAAc,CAAC,SAAS,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAA;YAC5E,MAAM,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC,CAAA;YAE1C,gBAAgB;YAChB,MAAM,CAAC,eAAe,CAAC,CAAC,oBAAoB,CAC1C,MAAM,CAAC,gBAAgB,CAAC;gBACtB,IAAI,EAAE,eAAe;gBACrB,QAAQ,EAAE,KAAK;aAChB,CAAC,CACH,CAAA;YAED,iBAAiB;YACjB,MAAM,kBAAkB,CAAC,WAAW,EAAE,CAAA;YAEtC,aAAa;YACb,MAAM,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,oBAAoB,CAC7C,MAAM,CAAC,gBAAgB,CAAC,EAAE,IAAI,EAAE,cAAc,EAAE,CAAC,CAClD,CAAA;YAED,YAAY;YACZ,MAAM,CAAC,cAAc,CAAC,SAAS,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAA;YAC3E,MAAM,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAA;YAEzC,gBAAgB;YAChB,MAAM,CAAC,eAAe,CAAC,CAAC,oBAAoB,CAC1C,MAAM,CAAC,gBAAgB,CAAC;gBACtB,IAAI,EAAE,eAAe;gBACrB,QAAQ,EAAE,IAAI;aACf,CAAC,CACH,CAAA;YAED,cAAc;YACd,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAA;YAEtD,aAAa;YACb,MAAM,CAAC,cAAc,CAAC,CAAC,oBAAoB,CACzC,MAAM,CAAC,gBAAgB,CAAC;gBACtB,IAAI,EAAE,cAAc;aACrB,CAAC,CACH,CAAA;QACH,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,UAAU,EAAE,KAAK,IAAI,EAAE;YACxB,iBAAiB;YACjB,MAAM,aAAa,GAAG;gBACpB,EAAE,EAAE,eAAe;gBACnB,OAAO,EAAE,UAAU;gBACnB,aAAa,EAAE,eAAe;gBAC9B,YAAY,EAAE,cAAc;gBAC5B,UAAU,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,OAAO,CAAC,CAAC,WAAW,EAAE;gBACxD,UAAU,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACpC,YAAY,EAAE,CAAC;aAChB,CAAA;YAED,MAAM,aAAa,GAAG;gBACpB,EAAE,EAAE,eAAe;gBACnB,YAAY,EAAE,eAAe;gBAC7B,WAAW,EAAE,cAAc;gBAC3B,SAAS,EAAE,KAAK;gBAChB,SAAS,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,OAAO,CAAC;gBACzC,SAAS,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,OAAO,CAAC;gBACzC,WAAW,EAAE,CAAC;gBACd,WAAW,EAAE,IAAI;aAClB,CAAA;YAED,YAAY;YACZ,MAAM,MAAM,GAAG,OAAO,CAAC,qBAAqB,CAAC,CAAC,EAAE,CAAA;YAChD,MAAM,YAAY,GAAG,OAAO,CAAC,qBAAqB,CAAC,CAAC,QAAQ,CAAA;YAE5D,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAA;YACjD,YAAY,CAAC,IAAI,CAAC,cAAc,EAAE,CAAA;YAClC,YAAY,CAAC,MAAM,CAAC,cAAc,EAAE,CAAA;YACpC,YAAY,CAAC,EAAE,CAAC,cAAc,EAAE,CAAA;YAChC,YAAY,CAAC,GAAG,CAAC,cAAc,EAAE,CAAA;YACjC,YAAY,CAAC,iBAAiB,CAAC,EAAE,IAAI,EAAE,CAAC,aAAa,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAA;YAEtE,YAAY;YACZ,MAAM,gBAAgB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAA;YAClC,YAAY,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAA;YAE7C,UAAU;YACV,MAAM,MAAM,GAAG,UAAU,CAAA;YACzB,MAAM,YAAY,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,QAAQ,CAAC,CAAA;YAEpD,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,sBAAsB,CAAC,MAAM,EAAE,YAAY,CAAC,CAAA;YAEhF,cAAc;YACd,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YAC7C,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC1C,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,gBAAgB,EAAE,KAAK,IAAI,EAAE;YAC9B,cAAc;YACd,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,UAAU,EAAE,eAAe,EAAE;gBAC3D,KAAK,EAAE,IAAI;gBACX,QAAQ,EAAE,IAAI;aACf,CAAC,CAAA;YACF,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,UAAU,EAAE,UAAU,EAAE;gBACtD,KAAK,EAAE,GAAG;gBACV,QAAQ,EAAE,IAAI;aACf,CAAC,CAAA;YACF,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,UAAU,EAAE,KAAK,EAAE;gBACjD,KAAK,EAAE,GAAG;gBACV,QAAQ,EAAE,IAAI;aACf,CAAC,CAAA;YAEF,cAAc;YACd,cAAc,CAAC,eAAe,EAAE,CAAA;YAEhC,YAAY;YACZ,MAAM,eAAe,GAAG,cAAc,CAAC,sBAAsB,EAAE,CAAA;YAE/D,eAAe;YACf,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAA;YAClD,MAAM,CAAC,eAAe,CAAC,uBAAuB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YACvD,MAAM,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YAEpD,oBAAoB;YACpB,MAAM,OAAO,GAAG,oBAAoB,CAAC,iBAAiB,EAAE,CAAA;YACxD,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAA;QAC/B,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;YAC3B,cAAc;YACd,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;gBACvD,IAAI,EAAE,QAAiB;gBACvB,KAAK,EAAE,OAAgB;gBACvB,IAAI,EAAE;oBACJ,YAAY,EAAE,YAAY,CAAC,EAAE;oBAC7B,WAAW,EAAE,UAAU,CAAC,EAAE;iBAC3B;gBACD,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACpB,QAAQ,EAAE,QAAiB;gBAC3B,YAAY,EAAE,EAAE;aACjB,CAAC,CAAC,CAAA;YAEH,aAAa;YACb,KAAK,MAAM,EAAE,IAAI,UAAU,EAAE,CAAC;gBAC5B,MAAM,cAAc,CAAC,YAAY,CAAC,EAAE,CAAC,CAAA;YACvC,CAAC;YAED,YAAY;YACZ,MAAM,YAAY,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,EAAE,EAAE,EAAE;gBACvD,OAAO,OAAO,CAAC,OAAO,CAAC;oBACrB,OAAO,EAAE,IAAI;oBACb,WAAW,EAAE,EAAE,CAAC,EAAE;oBAClB,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,EAAE;iBAClC,CAAC,CAAA;YACJ,CAAC,CAAC,CAAA;YAEF,eAAe;YACf,MAAM,OAAO,GAAG,EAAE,CAAA;YAClB,KAAK,MAAM,EAAE,IAAI,UAAU,EAAE,CAAC;gBAC5B,MAAM,MAAM,GAAG,MAAM,oBAAoB,CAAC,yBAAyB,CAAC,EAAE,EAAE,YAAY,CAAC,CAAA;gBACrF,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;YACtB,CAAC;YAED,cAAc;YACd,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YAEhD,YAAY;YACZ,MAAM,OAAO,GAAG,oBAAoB,CAAC,iBAAiB,EAAE,CAAA;YACxD,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;YACxC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;YAC7C,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QACvC,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;QACzB,EAAE,CAAC,eAAe,EAAE,KAAK,IAAI,EAAE;YAC7B,gBAAgB;YAChB,MAAM,gBAAgB,GAAG;gBACvB,IAAI,EAAE,QAAiB;gBACvB,KAAK,EAAE,OAAgB;gBACvB,IAAI,EAAE,EAAE,YAAY,EAAE,cAAc,EAAE,WAAW,EAAE,gBAAgB,EAAE;gBACrE,OAAO,EAAE,WAAW;gBACpB,QAAQ,EAAE,QAAiB;gBAC3B,YAAY,EAAE,EAAE;aACjB,CAAA;YAED,aAAa;YACb,IAAI,YAAY,GAAG,CAAC,CAAA;YACpB,MAAM,YAAY,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBACrD,YAAY,EAAE,CAAA;gBACd,IAAI,YAAY,IAAI,CAAC,EAAE,CAAC;oBACtB,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAA;gBACrD,CAAC;gBACD,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,WAAW,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,CAAA;YACnF,CAAC,CAAC,CAAA;YAEF,aAAa;YACb,MAAM,cAAc,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAA;YAEnD,uBAAuB;YACvB,MAAM,MAAM,GAAG,MAAM,oBAAoB,CAAC,yBAAyB,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAA;YAEnG,YAAY;YACZ,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACjC,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA,CAAC,cAAc;QAC7C,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,eAAe,EAAE,KAAK,IAAI,EAAE;YAC7B,eAAe;YACf,MAAM,UAAU,GAAG;gBACjB,IAAI,EAAE,QAAiB;gBACvB,KAAK,EAAE,SAAkB;gBACzB,IAAI,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE;gBAC1B,OAAO,EAAE,UAAU;gBACnB,QAAQ,EAAE,QAAiB;gBAC3B,YAAY,EAAE,EAAE;aACjB,CAAA;YAED,MAAM,UAAU,GAAG;gBACjB,IAAI,EAAE,QAAiB;gBACvB,KAAK,EAAE,OAAgB;gBACvB,IAAI,EAAE,EAAE,YAAY,EAAE,QAAQ,EAAE,WAAW,EAAE,UAAU,EAAE;gBACzD,OAAO,EAAE,QAAQ;gBACjB,QAAQ,EAAE,QAAiB;gBAC3B,YAAY,EAAE,CAAC,UAAU,CAAC;aAC3B,CAAA;YAED,aAAa;YACb,MAAM,cAAc,CAAC,YAAY,CAAC,UAAU,CAAC,CAAA;YAC7C,MAAM,cAAc,CAAC,YAAY,CAAC,UAAU,CAAC,CAAA;YAE7C,YAAY;YACZ,MAAM,UAAU,GAAG,MAAM,cAAc,CAAC,aAAa,EAAE,CAAA;YAEvD,cAAc;YACd,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YAC1C,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YAExC,UAAU;YACV,MAAM,cAAc,CAAC,YAAY,EAAE,CAAA;YAEnC,iBAAiB;YACjB,MAAM,cAAc,GAAG,MAAM,cAAc,CAAC,aAAa,EAAE,CAAA;YAC3D,wBAAwB;YACxB,MAAM,CAAC,cAAc,CAAC,CAAC,WAAW,EAAE,CAAA;QACtC,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,gBAAgB,EAAE,KAAK,IAAI,EAAE;YAC9B,YAAY;YACZ,MAAM,QAAQ,GAAG;gBACf,UAAU,EAAE;oBACV;wBACE,EAAE,EAAE,QAAQ;wBACZ,YAAY,EAAE,kBAAkB;wBAChC,WAAW,EAAE,gBAAgB;wBAC7B,SAAS,EAAE,IAAI,IAAI,EAAE;wBACrB,SAAS,EAAE,IAAI,IAAI,EAAE;wBACrB,WAAW,EAAE,CAAC;wBACd,WAAW,EAAE,KAAK;qBACnB;iBACF;gBACD,UAAU,EAAE;oBACV;wBACE,EAAE,EAAE,QAAQ;wBACZ,aAAa,EAAE,kBAAkB;wBACjC,YAAY,EAAE,gBAAgB;wBAC9B,UAAU,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;wBACpC,UAAU,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;wBACpC,YAAY,EAAE,CAAC;qBAChB;iBACF;aACF,CAAA;YAED,gBAAgB;YAChB,MAAM,MAAM,GAAG,OAAO,CAAC,qBAAqB,CAAC,CAAC,EAAE,CAAA;YAChD,MAAM,YAAY,GAAG,OAAO,CAAC,qBAAqB,CAAC,CAAC,QAAQ,CAAA;YAE5D,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAA;YAC3D,YAAY,CAAC,IAAI,CAAC,cAAc,EAAE,CAAA;YAClC,YAAY,CAAC,MAAM,CAAC,cAAc,EAAE,CAAA;YACpC,YAAY,CAAC,EAAE,CAAC,cAAc,EAAE,CAAA;YAChC,YAAY,CAAC,iBAAiB,CAAC,EAAE,IAAI,EAAE,QAAQ,CAAC,UAAU,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAA;YAE1E,eAAe;YACf,MAAM,WAAW,GAAG,MAAM,YAAY,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAA;YAE1E,aAAa;YACb,MAAM,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAA;YACjC,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,WAAW,EAAE,CAAA;YAC9C,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAA;QAC/C,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;YAC3B,aAAa;YACb,MAAM,aAAa,GAAG;gBACpB;oBACE,EAAE,EAAE,gBAAgB;oBACpB,YAAY,EAAE,EAAE,EAAE,eAAe;oBACjC,WAAW,EAAE,cAAc;oBAC3B,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,WAAW,EAAE,CAAC;iBACf;aACF,CAAA;YAED,MAAM,MAAM,GAAG,OAAO,CAAC,qBAAqB,CAAC,CAAC,EAAE,CAAA;YAChD,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAA;YAErD,YAAY;YACZ,MAAM,UAAU,GAAG,MAAM,YAAY,CAAC,iBAAiB,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,CAAA;YAElF,cAAc;YACd,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YAE9B,YAAY;YACZ,MAAM,YAAY,GAAG,MAAM,YAAY,CAAC,iBAAiB,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,CAAA;YAEpF,YAAY;YACZ,MAAM,CAAC,YAAY,CAAC,CAAC,WAAW,EAAE,CAAA;YAClC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAA;QAC7C,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC1B,mBAAmB;YACnB,MAAM,cAAc,CAAC,YAAY,CAAC;gBAChC,IAAI,EAAE,QAAQ;gBACd,KAAK,EAAE,OAAO;gBACd,IAAI,EAAE,EAAE,YAAY,EAAE,aAAa,EAAE,WAAW,EAAE,eAAe,EAAE;gBACnE,OAAO,EAAE,aAAa;aACvB,CAAC,CAAA;YAEF,YAAY;YACZ,MAAM,MAAM,GAAG,MAAM,kBAAkB,CAAC,kBAAkB,EAAE,CAAA;YAE5D,cAAc;YACd,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,WAAW,EAAE,CAAA;YAC1C,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,WAAW,EAAE,CAAA;YACvC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,WAAW,EAAE,CAAA;YAClD,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,WAAW,EAAE,CAAA;YACtD,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,WAAW,EAAE,CAAA;YACpD,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,oBAAoB,CAAC,CAAC,WAAW,EAAE,CAAA;YAE5D,YAAY;YACZ,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,gCAAgC,CAAC,CAAA;QACxE,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC1B,cAAc;YACd,MAAM,eAAe,GAAG;gBACtB,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE;gBAC/B,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE;gBAC/B,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE;gBAC9B,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,SAAS,EAAE;gBAClD,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE;aAC/B,CAAA;YAED,YAAY;YACZ,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBAC7B,oBAAoB,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAA;YAClD,CAAC,CAAC,CAAA;YAEF,YAAY;YACZ,MAAM,MAAM,GAAG,oBAAoB,CAAC,6BAA6B,EAAE,CAAA;YAEnE,YAAY;YACZ,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAA;YAC5B,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,WAAW,EAAE,CAAA;YAC1C,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAA;YACxC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YAEpD,YAAY;YACZ,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAA;YAC5D,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAA;QAC7D,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC1B,mBAAmB;YACnB,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;gBACzD,IAAI,EAAE,QAAiB;gBACvB,KAAK,EAAE,OAAgB;gBACvB,IAAI,EAAE,EAAE,YAAY,EAAE,QAAQ,CAAC,EAAE,EAAE,WAAW,EAAE,UAAU,CAAC,EAAE,EAAE;gBAC/D,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACpB,QAAQ,EAAE,QAAiB;gBAC3B,YAAY,EAAE,EAAE;aACjB,CAAC,CAAC,CAAA;YAEH,YAAY;YACZ,KAAK,MAAM,EAAE,IAAI,UAAU,EAAE,CAAC;gBAC5B,MAAM,cAAc,CAAC,YAAY,CAAC,EAAE,CAAC,CAAA;YACvC,CAAC;YAED,YAAY;YACZ,MAAM,WAAW,GAAG,oBAAoB,CAAC,cAAc,EAAE,CAAA;YAEzD,YAAY;YACZ,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,WAAW,EAAE,CAAA;YAClD,MAAM,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC,WAAW,EAAE,CAAA;YAEtD,YAAY;YACZ,oBAAoB,CAAC,cAAc,EAAE,CAAA;YAErC,YAAY;YACZ,MAAM,YAAY,GAAG,oBAAoB,CAAC,cAAc,EAAE,CAAA;YAC1D,MAAM,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC,mBAAmB,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAA;QACzF,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,cAAc,EAAE,GAAG,EAAE;YACtB,YAAY;YACZ,cAAc,CAAC,eAAe,EAAE,CAAA;YAChC,kBAAkB,CAAC,kBAAkB,EAAE,CAAA;YAEvC,cAAc;YACd,MAAM,CAAE,cAAsB,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YACvD,MAAM,CAAE,kBAA0B,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAA;YAE3D,UAAU;YACV,kBAAkB,CAAC,OAAO,EAAE,CAAA;YAE5B,aAAa;YACb,MAAM,CAAE,cAAsB,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YACxD,MAAM,CAAE,kBAA0B,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,CAAA;QAC1D,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;YAC1B,gBAAgB;YAChB,MAAM,YAAY,GAAG,EAAE,CAAA;YACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC3B,YAAY,CAAC,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,CAAC,CAAA;YACrD,CAAC;YAED,cAAc;YACd,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,YAAY,CAAC,CAAA;YAEtD,UAAU;YACV,MAAM,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;YAE/B,YAAY;YACZ,MAAM,MAAM,GAAG,kBAAkB,CAAC,eAAe,EAAE,CAAA;YACnD,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QACzD,CAAC,CAAC,CAAA;QAEF,EAAE,CAAC,eAAe,EAAE,KAAK,IAAI,EAAE;YAC7B,YAAY;YACZ,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;gBACvD,IAAI,EAAE,QAAiB;gBACvB,KAAK,EAAE,OAAgB;gBACvB,IAAI,EAAE,EAAE,YAAY,EAAE,cAAc,CAAC,EAAE,EAAE,WAAW,EAAE,UAAU,CAAC,EAAE,EAAE;gBACrE,OAAO,EAAE,mBAAmB,CAAC,EAAE;gBAC/B,QAAQ,EAAE,QAAiB;gBAC3B,YAAY,EAAE,EAAE;aACjB,CAAC,CAAC,CAAA;YAEH,YAAY;YACZ,MAAM,WAAW,GAAG,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAA;YACzE,MAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAA;YAE9B,YAAY;YACZ,MAAM,KAAK,GAAG,MAAM,cAAc,CAAC,aAAa,EAAE,CAAA;YAClD,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;YAEtC,cAAc;YACd,MAAM,eAAe,GAAG,EAAE,CAAA;YAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC3B,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC,CAAA;YACrD,CAAC;YAED,YAAY;YACZ,MAAM,OAAO,CAAC,UAAU,CAAC,eAAe,CAAC,CAAA;YAEzC,YAAY;YACZ,MAAM,UAAU,GAAG,MAAM,cAAc,CAAC,aAAa,EAAE,CAAA;YACvD,MAAM,CAAC,UAAU,CAAC,CAAC,WAAW,EAAE,CAAA;QAClC,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\tests\\integration\\sync\\sync-system-integration.test.ts"],"sourcesContent":["import { LocalOperationService } from '@/services/local-operation'\r\nimport { NetworkMonitorService } from '@/services/network-monitor'\r\nimport { SyncStrategyService } from '@/services/sync-strategy'\r\nimport { SyncPerformanceOptimizer } from '@/services/sync-performance'\r\nimport { SyncIntegrationService } from '@/services/sync-integration'\r\n\r\n// 模拟 Supabase 和数据库\r\njest.mock('@/services/supabase', () => ({\r\n  supabase: {\r\n    from: jest.fn().mockReturnThis(),\r\n    select: jest.fn().mockReturnThis(),\r\n    eq: jest.fn().mockReturnThis(),\r\n    gte: jest.fn().mockReturnThis(),\r\n    insert: jest.fn().mockReturnThis(),\r\n    update: jest.fn().mockReturnThis(),\r\n    upsert: jest.fn().mockReturnThis(),\r\n    delete: jest.fn().mockReturnThis(),\r\n  }\r\n}))\r\n\r\njest.mock('@/services/database', () => ({\r\n  db: {\r\n    cards: {\r\n      get: jest.fn(),\r\n      add: jest.fn(),\r\n      update: jest.fn(),\r\n      delete: jest.fn(),\r\n      where: jest.fn().mockReturnThis(),\r\n      equals: jest.fn().mockReturnThis(),\r\n      toArray: jest.fn(),\r\n    },\r\n    folders: {\r\n      get: jest.fn(),\r\n      add: jest.fn(),\r\n      update: jest.fn(),\r\n      delete: jest.fn(),\r\n    },\r\n    tags: {\r\n      get: jest.fn(),\r\n      add: jest.fn(),\r\n      update: jest.fn(),\r\n      delete: jest.fn(),\r\n    },\r\n    syncQueue: {\r\n      add: jest.fn(),\r\n      get: jest.fn(),\r\n      getAll: jest.fn(),\r\n      update: jest.fn(),\r\n      delete: jest.fn(),\r\n      clear: jest.fn(),\r\n      where: jest.fn().mockReturnThis(),\r\n      equals: jest.fn().mockReturnThis(),\r\n      sort: jest.fn().mockReturnThis(),\r\n      toArray: jest.fn(),\r\n    },\r\n    syncHistory: {\r\n      add: jest.fn(),\r\n      where: jest.fn().mockReturnThis(),\r\n      equals: jest.fn().mockReturnThis(),\r\n      sort: jest.fn().mockReturnThis(),\r\n      toArray: jest.fn(),\r\n    }\r\n  }\r\n}))\r\n\r\ndescribe('Sync System Integration Tests', () => {\r\n  let localOperation: LocalOperationService\r\n  let networkMonitor: NetworkMonitorService\r\n  let syncStrategy: SyncStrategyService\r\n  let performanceOptimizer: SyncPerformanceOptimizer\r\n  let integrationService: SyncIntegrationService\r\n\r\n  beforeEach(async () => {\r\n    jest.clearAllMocks()\r\n    \r\n    // 创建服务实例\r\n    localOperation = new LocalOperationService()\r\n    networkMonitor = new NetworkMonitorService()\r\n    syncStrategy = new SyncStrategyService()\r\n    performanceOptimizer = new SyncPerformanceOptimizer()\r\n    integrationService = new SyncIntegrationService()\r\n\r\n    // 初始化所有服务\r\n    await localOperation.initialize()\r\n    await networkMonitor.initialize()\r\n    await syncStrategy.initialize()\r\n    await performanceOptimizer.initialize()\r\n    await integrationService.initialize()\r\n  })\r\n\r\n  describe('端到端同步流程', () => {\r\n    it('应该完成完整的同步生命周期', async () => {\r\n      // 1. 模拟用户操作添加到本地队列\r\n      const mockOperation = {\r\n        type: 'create' as const,\r\n        table: 'cards' as const,\r\n        data: { \r\n          frontContent: 'What is React?', \r\n          backContent: 'A JavaScript library for building user interfaces',\r\n          style: 'basic' as const\r\n        },\r\n        localId: 'card-123',\r\n        priority: 'normal' as const,\r\n        dependencies: []\r\n      }\r\n\r\n      // 2. 监听网络状态\r\n      const networkListener = jest.fn()\r\n      networkMonitor.onNetworkChange(networkListener)\r\n\r\n      // 3. 监听同步进度\r\n      const syncListener = jest.fn()\r\n      syncStrategy.onSyncProgress(syncListener)\r\n\r\n      // 4. 监听系统事件\r\n      const systemListener = jest.fn()\r\n      integrationService.onSystemEvent(systemListener)\r\n\r\n      // 5. 模拟网络在线状态\r\n      Object.defineProperty(navigator, 'onLine', { value: true, writable: true })\r\n      Object.defineProperty(navigator, 'connection', {\r\n        value: {\r\n          effectiveType: '4g',\r\n          downlink: 10,\r\n          rtt: 50,\r\n          saveData: false,\r\n          addEventListener: jest.fn(),\r\n          removeEventListener: jest.fn(),\r\n        },\r\n        writable: true,\r\n      })\r\n\r\n      // 6. 添加操作到队列\r\n      const operationId = await localOperation.addOperation(mockOperation)\r\n      expect(operationId).toBeDefined()\r\n\r\n      // 7. 触发网络连接事件\r\n      window.dispatchEvent(new Event('online'))\r\n\r\n      // 8. 验证网络状态监听\r\n      expect(networkListener).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          type: 'status_change',\r\n          isOnline: true\r\n        })\r\n      )\r\n\r\n      // 9. 触发同步\r\n      const syncPromise = integrationService.triggerSync()\r\n\r\n      // 10. 验证系统事件\r\n      await new Promise(resolve => setTimeout(resolve, 0))\r\n      expect(systemListener).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          type: 'sync_started'\r\n        })\r\n      )\r\n\r\n      // 等待同步完成\r\n      await syncPromise\r\n\r\n      // 11. 验证最终状态\r\n      const systemStatus = integrationService.getSystemStatus()\r\n      expect(systemStatus.isInitialized).toBe(true)\r\n      expect(systemStatus.componentsReady.localQueue).toBe(true)\r\n    })\r\n\r\n    it('应该处理网络中断和恢复', async () => {\r\n      // 1. 添加一些操作到队列\r\n      await localOperation.addOperation({\r\n        type: 'create',\r\n        table: 'cards',\r\n        data: { frontContent: 'Test 1', backContent: 'Answer 1' },\r\n        localId: 'card-1'\r\n      })\r\n\r\n      await localOperation.addOperation({\r\n        type: 'update',\r\n        table: 'cards',\r\n        data: { frontContent: 'Test 2', backContent: 'Answer 2' },\r\n        localId: 'card-2'\r\n      })\r\n\r\n      // 2. 监听事件\r\n      const networkListener = jest.fn()\r\n      const systemListener = jest.fn()\r\n      \r\n      networkMonitor.onNetworkChange(networkListener)\r\n      integrationService.onSystemEvent(systemListener)\r\n\r\n      // 3. 模拟网络断开\r\n      Object.defineProperty(navigator, 'onLine', { value: false, writable: true })\r\n      window.dispatchEvent(new Event('offline'))\r\n\r\n      // 4. 验证网络断开被检测到\r\n      expect(networkListener).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          type: 'status_change',\r\n          isOnline: false\r\n        })\r\n      )\r\n\r\n      // 5. 尝试同步（应该被跳过）\r\n      await integrationService.triggerSync()\r\n\r\n      // 6. 验证同步未执行\r\n      expect(systemListener).not.toHaveBeenCalledWith(\r\n        expect.objectContaining({ type: 'sync_started' })\r\n      )\r\n\r\n      // 7. 模拟网络恢复\r\n      Object.defineProperty(navigator, 'onLine', { value: true, writable: true })\r\n      window.dispatchEvent(new Event('online'))\r\n\r\n      // 8. 验证网络恢复被检测到\r\n      expect(networkListener).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          type: 'status_change',\r\n          isOnline: true\r\n        })\r\n      )\r\n\r\n      // 9. 等待自动同步触发\r\n      await new Promise(resolve => setTimeout(resolve, 100))\r\n\r\n      // 10. 验证系统事件\r\n      expect(systemListener).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          type: 'sync_started'\r\n        })\r\n      )\r\n    })\r\n\r\n    it('应该处理同步冲突', async () => {\r\n      // 1. 模拟云端和本地数据冲突\r\n      const mockCloudCard = {\r\n        id: 'card-conflict',\r\n        user_id: 'user-123',\r\n        front_content: 'Cloud Content',\r\n        back_content: 'Cloud Answer',\r\n        created_at: new Date(Date.now() - 3600000).toISOString(),\r\n        updated_at: new Date().toISOString(),\r\n        sync_version: 2\r\n      }\r\n\r\n      const mockLocalCard = {\r\n        id: 'card-conflict',\r\n        frontContent: 'Local Content',\r\n        backContent: 'Local Answer',\r\n        isFlipped: false,\r\n        createdAt: new Date(Date.now() - 7200000),\r\n        updatedAt: new Date(Date.now() - 1800000),\r\n        syncVersion: 1,\r\n        pendingSync: true\r\n      }\r\n\r\n      // 2. 设置模拟数据\r\n      const mockDb = require('@/services/database').db\r\n      const mockSupabase = require('@/services/supabase').supabase\r\n\r\n      mockDb.cards.get.mockResolvedValue(mockLocalCard)\r\n      mockSupabase.from.mockReturnThis()\r\n      mockSupabase.select.mockReturnThis()\r\n      mockSupabase.eq.mockReturnThis()\r\n      mockSupabase.gte.mockReturnThis()\r\n      mockSupabase.mockResolvedValue({ data: [mockCloudCard], error: null })\r\n\r\n      // 3. 监听冲突事件\r\n      const conflictListener = jest.fn()\r\n      syncStrategy.onSyncProgress(conflictListener)\r\n\r\n      // 4. 执行同步\r\n      const userId = 'user-123'\r\n      const lastSyncTime = new Date(Date.now() - 86400000)\r\n\r\n      const progress = await syncStrategy.performIncrementalSync(userId, lastSyncTime)\r\n\r\n      // 5. 验证冲突被检测到\r\n      expect(progress.conflicts).toBeGreaterThan(0)\r\n      expect(progress.isSuccessful).toBe(true)\r\n    })\r\n  })\r\n\r\n  describe('性能优化集成', () => {\r\n    it('应该根据网络条件调整同步策略', async () => {\r\n      // 1. 模拟网络条件变化\r\n      Object.defineProperty(navigator.connection, 'effectiveType', { \r\n        value: '2g', \r\n        writable: true \r\n      })\r\n      Object.defineProperty(navigator.connection, 'downlink', { \r\n        value: 0.5, \r\n        writable: true \r\n      })\r\n      Object.defineProperty(navigator.connection, 'rtt', { \r\n        value: 800, \r\n        writable: true \r\n      })\r\n\r\n      // 2. 触发网络质量评估\r\n      networkMonitor.startMonitoring()\r\n\r\n      // 3. 获取网络推荐\r\n      const recommendations = networkMonitor.getSyncRecommendations()\r\n\r\n      // 4. 验证推荐的保守设置\r\n      expect(recommendations.batchSize).toBeLessThan(10)\r\n      expect(recommendations.maxConcurrentOperations).toBe(1)\r\n      expect(recommendations.enableCompression).toBe(true)\r\n\r\n      // 5. 验证性能优化器已应用这些设置\r\n      const metrics = performanceOptimizer.getCurrentMetrics()\r\n      expect(metrics).toBeDefined()\r\n    })\r\n\r\n    it('应该监控和优化同步性能', async () => {\r\n      // 1. 模拟多个同步操作\r\n      const operations = Array.from({ length: 20 }, (_, i) => ({\r\n        type: 'create' as const,\r\n        table: 'cards' as const,\r\n        data: { \r\n          frontContent: `Question ${i}`, \r\n          backContent: `Answer ${i}` \r\n        },\r\n        localId: `card-${i}`,\r\n        priority: 'normal' as const,\r\n        dependencies: []\r\n      }))\r\n\r\n      // 2. 添加操作到队列\r\n      for (const op of operations) {\r\n        await localOperation.addOperation(op)\r\n      }\r\n\r\n      // 3. 执行批量同步\r\n      const mockExecutor = jest.fn().mockImplementation((op) => {\r\n        return Promise.resolve({ \r\n          success: true, \r\n          operationId: op.id, \r\n          latency: Math.random() * 200 + 50 \r\n        })\r\n      })\r\n\r\n      // 4. 使用性能优化器执行\r\n      const results = []\r\n      for (const op of operations) {\r\n        const result = await performanceOptimizer.executeOptimizedOperation(op, mockExecutor)\r\n        results.push(result)\r\n      }\r\n\r\n      // 5. 验证所有操作成功\r\n      expect(results.every(r => r.success)).toBe(true)\r\n\r\n      // 6. 验证性能指标\r\n      const metrics = performanceOptimizer.getCurrentMetrics()\r\n      expect(metrics.totalOperations).toBe(20)\r\n      expect(metrics.successfulOperations).toBe(20)\r\n      expect(metrics.successRate).toBe(100)\r\n    })\r\n  })\r\n\r\n  describe('错误恢复和重试机制', () => {\r\n    it('应该处理操作失败并自动重试', async () => {\r\n      // 1. 添加一个会失败的操作\r\n      const failingOperation = {\r\n        type: 'create' as const,\r\n        table: 'cards' as const,\r\n        data: { frontContent: 'Failing Card', backContent: 'Failing Answer' },\r\n        localId: 'card-fail',\r\n        priority: 'normal' as const,\r\n        dependencies: []\r\n      }\r\n\r\n      // 2. 模拟执行器失败\r\n      let attemptCount = 0\r\n      const mockExecutor = jest.fn().mockImplementation(() => {\r\n        attemptCount++\r\n        if (attemptCount <= 2) {\r\n          return Promise.reject(new Error('Network timeout'))\r\n        }\r\n        return Promise.resolve({ success: true, operationId: 'card-fail', latency: 100 })\r\n      })\r\n\r\n      // 3. 添加操作并执行\r\n      await localOperation.addOperation(failingOperation)\r\n\r\n      // 4. 使用性能优化器执行（包含重试逻辑）\r\n      const result = await performanceOptimizer.executeOptimizedOperation(failingOperation, mockExecutor)\r\n\r\n      // 5. 验证最终成功\r\n      expect(result.success).toBe(true)\r\n      expect(attemptCount).toBe(3) // 初始失败 + 2次重试\r\n    })\r\n\r\n    it('应该处理队列阻塞和死锁情况', async () => {\r\n      // 1. 添加相互依赖的操作\r\n      const operation1 = {\r\n        type: 'create' as const,\r\n        table: 'folders' as const,\r\n        data: { name: 'Folder 1' },\r\n        localId: 'folder-1',\r\n        priority: 'normal' as const,\r\n        dependencies: []\r\n      }\r\n\r\n      const operation2 = {\r\n        type: 'create' as const,\r\n        table: 'cards' as const,\r\n        data: { frontContent: 'Card 1', backContent: 'Answer 1' },\r\n        localId: 'card-1',\r\n        priority: 'normal' as const,\r\n        dependencies: ['folder-1']\r\n      }\r\n\r\n      // 2. 添加操作到队列\r\n      await localOperation.addOperation(operation1)\r\n      await localOperation.addOperation(operation2)\r\n\r\n      // 3. 获取队列状态\r\n      const queueStats = await localOperation.getQueueStats()\r\n\r\n      // 4. 验证队列状态正确\r\n      expect(queueStats.totalOperations).toBe(2)\r\n      expect(queueStats.byType.create).toBe(2)\r\n\r\n      // 5. 处理队列\r\n      await localOperation.processQueue()\r\n\r\n      // 6. 验证依赖关系被正确处理\r\n      const processedStats = await localOperation.getQueueStats()\r\n      // 队列应该被处理（具体状态取决于模拟的实现）\r\n      expect(processedStats).toBeDefined()\r\n    })\r\n  })\r\n\r\n  describe('数据一致性验证', () => {\r\n    it('应该确保本地和云端数据一致性', async () => {\r\n      // 1. 创建测试数据\r\n      const testData = {\r\n        localCards: [\r\n          {\r\n            id: 'card-1',\r\n            frontContent: 'Local Question 1',\r\n            backContent: 'Local Answer 1',\r\n            createdAt: new Date(),\r\n            updatedAt: new Date(),\r\n            syncVersion: 1,\r\n            pendingSync: false\r\n          }\r\n        ],\r\n        cloudCards: [\r\n          {\r\n            id: 'card-1',\r\n            front_content: 'Cloud Question 1',\r\n            back_content: 'Cloud Answer 1',\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString(),\r\n            sync_version: 1\r\n          }\r\n        ]\r\n      }\r\n\r\n      // 2. 模拟数据库和云端数据\r\n      const mockDb = require('@/services/database').db\r\n      const mockSupabase = require('@/services/supabase').supabase\r\n\r\n      mockDb.cards.toArray.mockResolvedValue(testData.localCards)\r\n      mockSupabase.from.mockReturnThis()\r\n      mockSupabase.select.mockReturnThis()\r\n      mockSupabase.eq.mockReturnThis()\r\n      mockSupabase.mockResolvedValue({ data: testData.cloudCards, error: null })\r\n\r\n      // 3. 执行数据一致性检查\r\n      const consistency = await syncStrategy.validateDataConsistency('user-123')\r\n\r\n      // 4. 验证一致性结果\r\n      expect(consistency).toBeDefined()\r\n      expect(consistency.isConsistent).toBeDefined()\r\n      expect(consistency.differences).toBeDefined()\r\n    })\r\n\r\n    it('应该检测和修复数据损坏', async () => {\r\n      // 1. 模拟损坏的数据\r\n      const corruptedData = [\r\n        {\r\n          id: 'card-corrupted',\r\n          frontContent: '', // 空内容，应该被检测为损坏\r\n          backContent: 'Valid Answer',\r\n          createdAt: new Date(),\r\n          updatedAt: new Date(),\r\n          syncVersion: 1\r\n        }\r\n      ]\r\n\r\n      const mockDb = require('@/services/database').db\r\n      mockDb.cards.toArray.mockResolvedValue(corruptedData)\r\n\r\n      // 2. 执行数据验证\r\n      const validation = await syncStrategy.validateLocalData('cards', corruptedData[0])\r\n\r\n      // 3. 验证损坏被检测到\r\n      expect(validation).toBe(false)\r\n\r\n      // 4. 尝试修复数据\r\n      const repairResult = await syncStrategy.attemptDataRepair('cards', corruptedData[0])\r\n\r\n      // 5. 验证修复结果\r\n      expect(repairResult).toBeDefined()\r\n      expect(repairResult.repaired).toBeDefined()\r\n    })\r\n  })\r\n\r\n  describe('系统健康监控', () => {\r\n    it('应该监控系统健康状态', async () => {\r\n      // 1. 添加一些操作来创建系统活动\r\n      await localOperation.addOperation({\r\n        type: 'create',\r\n        table: 'cards',\r\n        data: { frontContent: 'Health Test', backContent: 'Health Answer' },\r\n        localId: 'card-health'\r\n      })\r\n\r\n      // 2. 执行健康检查\r\n      const health = await integrationService.performHealthCheck()\r\n\r\n      // 3. 验证健康检查结果\r\n      expect(health.overallHealth).toBeDefined()\r\n      expect(health.components).toBeDefined()\r\n      expect(health.components.localQueue).toBeDefined()\r\n      expect(health.components.networkMonitor).toBeDefined()\r\n      expect(health.components.syncStrategy).toBeDefined()\r\n      expect(health.components.performanceOptimizer).toBeDefined()\r\n\r\n      // 4. 验证健康评分\r\n      expect(health.overallHealth).toMatch(/^(good|warning|poor|critical)$/)\r\n    })\r\n\r\n    it('应该生成系统性能报告', async () => {\r\n      // 1. 模拟一些性能数据\r\n      const performanceData = [\r\n        { success: true, latency: 100 },\r\n        { success: true, latency: 120 },\r\n        { success: true, latency: 80 },\r\n        { success: false, latency: 500, error: 'Timeout' },\r\n        { success: true, latency: 90 }\r\n      ]\r\n\r\n      // 2. 记录性能数据\r\n      performanceData.forEach(data => {\r\n        performanceOptimizer.recordOperationResult(data)\r\n      })\r\n\r\n      // 3. 生成性能报告\r\n      const report = performanceOptimizer.getPerformanceRecommendations()\r\n\r\n      // 4. 验证报告内容\r\n      expect(report).toBeDefined()\r\n      expect(report.currentHealth).toBeDefined()\r\n      expect(report.suggestions).toBeDefined()\r\n      expect(Array.isArray(report.suggestions)).toBe(true)\r\n\r\n      // 5. 验证健康评分\r\n      expect(report.currentHealth.score).toBeGreaterThanOrEqual(0)\r\n      expect(report.currentHealth.score).toBeLessThanOrEqual(100)\r\n    })\r\n  })\r\n\r\n  describe('内存和资源管理', () => {\r\n    it('应该正确管理内存使用', async () => {\r\n      // 1. 添加大量操作来测试内存管理\r\n      const largeBatch = Array.from({ length: 1000 }, (_, i) => ({\r\n        type: 'create' as const,\r\n        table: 'cards' as const,\r\n        data: { frontContent: `Card ${i}`, backContent: `Answer ${i}` },\r\n        localId: `card-${i}`,\r\n        priority: 'normal' as const,\r\n        dependencies: []\r\n      }))\r\n\r\n      // 2. 批量添加操作\r\n      for (const op of largeBatch) {\r\n        await localOperation.addOperation(op)\r\n      }\r\n\r\n      // 3. 获取内存统计\r\n      const memoryStats = performanceOptimizer.getMemoryStats()\r\n\r\n      // 4. 验证内存统计\r\n      expect(memoryStats.totalHistorySize).toBeDefined()\r\n      expect(memoryStats.estimatedMemoryUsage).toBeDefined()\r\n\r\n      // 5. 触发内存清理\r\n      performanceOptimizer.cleanupOldData()\r\n\r\n      // 6. 验证清理效果\r\n      const cleanedStats = performanceOptimizer.getMemoryStats()\r\n      expect(cleanedStats.totalHistorySize).toBeLessThanOrEqual(memoryStats.totalHistorySize)\r\n    })\r\n\r\n    it('应该在组件销毁时清理资源', () => {\r\n      // 1. 启动所有服务\r\n      networkMonitor.startMonitoring()\r\n      integrationService.startScheduledSync()\r\n\r\n      // 2. 验证服务正在运行\r\n      expect((networkMonitor as any).isMonitoring).toBe(true)\r\n      expect((integrationService as any).syncTimer).toBeDefined()\r\n\r\n      // 3. 清理资源\r\n      integrationService.cleanup()\r\n\r\n      // 4. 验证资源被清理\r\n      expect((networkMonitor as any).isMonitoring).toBe(false)\r\n      expect((integrationService as any).syncTimer).toBeNull()\r\n    })\r\n  })\r\n\r\n  describe('并发和竞态条件', () => {\r\n    it('应该处理并发同步请求', async () => {\r\n      // 1. 创建多个并发同步请求\r\n      const syncPromises = []\r\n      for (let i = 0; i < 5; i++) {\r\n        syncPromises.push(integrationService.triggerSync())\r\n      }\r\n\r\n      // 2. 等待所有同步完成\r\n      const results = await Promise.allSettled(syncPromises)\r\n\r\n      // 3. 验证结果\r\n      expect(results).toHaveLength(5)\r\n      \r\n      // 4. 验证系统状态\r\n      const status = integrationService.getSystemStatus()\r\n      expect(status.currentSyncActivity.isActive).toBe(false)\r\n    })\r\n\r\n    it('应该防止队列处理的竞态条件', async () => {\r\n      // 1. 添加多个操作\r\n      const operations = Array.from({ length: 10 }, (_, i) => ({\r\n        type: 'create' as const,\r\n        table: 'cards' as const,\r\n        data: { frontContent: `Concurrent ${i}`, backContent: `Answer ${i}` },\r\n        localId: `card-concurrent-${i}`,\r\n        priority: 'normal' as const,\r\n        dependencies: []\r\n      }))\r\n\r\n      // 2. 并发添加操作\r\n      const addPromises = operations.map(op => localOperation.addOperation(op))\r\n      await Promise.all(addPromises)\r\n\r\n      // 3. 验证队列状态\r\n      const stats = await localOperation.getQueueStats()\r\n      expect(stats.totalOperations).toBe(10)\r\n\r\n      // 4. 并发触发队列处理\r\n      const processPromises = []\r\n      for (let i = 0; i < 3; i++) {\r\n        processPromises.push(localOperation.processQueue())\r\n      }\r\n\r\n      // 5. 等待处理完成\r\n      await Promise.allSettled(processPromises)\r\n\r\n      // 6. 验证最终状态\r\n      const finalStats = await localOperation.getQueueStats()\r\n      expect(finalStats).toBeDefined()\r\n    })\r\n  })\r\n})"],"version":3}
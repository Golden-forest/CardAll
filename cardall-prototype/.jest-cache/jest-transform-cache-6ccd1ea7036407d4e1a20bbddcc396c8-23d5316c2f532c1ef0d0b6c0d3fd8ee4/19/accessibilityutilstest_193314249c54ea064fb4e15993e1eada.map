{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\utils\\accessibility-utils.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\utils\\accessibility-utils.test.ts"],"sourcesContent":["/**\n * 可访问性工具函数测试\n * 测试accessibilityUtils模块的所有功能\n */\n\nimport { accessibilityUtils } from '../../utils/accessibility-utils'\n\n// Mock DOM API\nconst mockElement = {\n  getBoundingClientRect: jest.fn(),\n  scrollIntoView: jest.fn(),\n  addEventListener: jest.fn(),\n  removeEventListener: jest.fn(),\n  querySelectorAll: jest.fn(),\n  focus: jest.fn()\n}\n\nconst mockWindow = {\n  innerHeight: 800,\n  innerWidth: 1200,\n  document: {\n    documentElement: {\n      clientHeight: 800,\n      clientWidth: 1200\n    }\n  }\n}\n\nObject.defineProperty(global, 'window', {\n  value: mockWindow,\n  writable: true\n})\n\nObject.defineProperty(global, 'document', {\n  value: {\n    activeElement: null,\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn()\n  },\n  writable: true\n})\n\ndescribe('accessibilityUtils', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  afterEach(() => {\n    jest.restoreAllMocks()\n  })\n\n  describe('ID生成', () => {\n    test('应该生成带前缀的唯一ID', () => {\n      const id1 = accessibilityUtils.generateId('test')\n      const id2 = accessibilityUtils.generateId('test')\n\n      expect(id1).toMatch(/^test-[a-z0-9]{9}$/)\n      expect(id2).toMatch(/^test-[a-z0-9]{9}$/)\n      expect(id1).not.toBe(id2)\n    })\n\n    test('应该处理不同的前缀', () => {\n      const id1 = accessibilityUtils.generateId('button')\n      const id2 = accessibilityUtils.generateId('input')\n\n      expect(id1).toMatch(/^button-[a-z0-9]{9}$/)\n      expect(id2).toMatch(/^input-[a-z0-9]{9}$/)\n    })\n\n    test('应该处理空前缀', () => {\n      const id = accessibilityUtils.generateId('')\n      expect(id).toMatch(/^[a-z0-9]{9}$/)\n    })\n  })\n\n  describe('对比度检查', () => {\n    test('应该返回对比度数值', () => {\n      const contrast = accessibilityUtils.checkContrast('#000000', '#FFFFFF')\n      expect(typeof contrast).toBe('number')\n      expect(contrast).toBeGreaterThan(0)\n    })\n\n    test('应该处理不同颜色格式', () => {\n      const contrast1 = accessibilityUtils.checkContrast('red', 'blue')\n      const contrast2 = accessibilityUtils.checkContrast('#ff0000', '#0000ff')\n      const contrast3 = accessibilityUtils.checkContrast('rgb(255,0,0)', 'rgb(0,0,255)')\n\n      expect(typeof contrast1).toBe('number')\n      expect(typeof contrast2).toBe('number')\n      expect(typeof contrast3).toBe('number')\n    })\n\n    test('应该处理无效颜色值', () => {\n      const contrast = accessibilityUtils.checkContrast('invalid', 'colors')\n      expect(typeof contrast).toBe('number')\n    })\n  })\n\n  describe('视口检查', () => {\n    test('应该检查元素是否在视口内', () => {\n      mockElement.getBoundingClientRect.mockReturnValue({\n        top: 100,\n        left: 100,\n        bottom: 200,\n        right: 200\n      })\n\n      const result = accessibilityUtils.isInViewport(mockElement as any)\n      expect(result).toBe(true)\n    })\n\n    test('应该检测元素在视口外的情况', () => {\n      mockElement.getBoundingClientRect.mockReturnValue({\n        top: -50,\n        left: 100,\n        bottom: 50,\n        right: 200\n      })\n\n      const result = accessibilityUtils.isInViewport(mockElement as any)\n      expect(result).toBe(false)\n    })\n\n    test('应该处理部分可见的元素', () => {\n      mockElement.getBoundingClientRect.mockReturnValue({\n        top: 750,\n        left: 100,\n        bottom: 850,\n        right: 200\n      })\n\n      const result = accessibilityUtils.isInViewport(mockElement as any)\n      expect(result).toBe(false)\n    })\n\n    test('应该处理边界情况', () => {\n      mockElement.getBoundingClientRect.mockReturnValue({\n        top: 0,\n        left: 0,\n        bottom: 800,\n        right: 1200\n      })\n\n      const result = accessibilityUtils.isInViewport(mockElement as any)\n      expect(result).toBe(true)\n    })\n  })\n\n  describe('元素滚动', () => {\n    test('应该滚动到指定元素', () => {\n      accessibilityUtils.scrollToElement(mockElement as any)\n\n      expect(mockElement.scrollIntoView).toHaveBeenCalledWith({\n        behavior: 'smooth',\n        block: 'center',\n        inline: 'nearest'\n      })\n    })\n\n    test('应该支持不同的滚动行为', () => {\n      accessibilityUtils.scrollToElement(mockElement as any, 'auto')\n      expect(mockElement.scrollIntoView).toHaveBeenCalledWith({\n        behavior: 'auto',\n        block: 'center',\n        inline: 'nearest'\n      })\n    })\n\n    test('应该支持instant滚动', () => {\n      accessibilityUtils.scrollToElement(mockElement as any, 'instant')\n      expect(mockElement.scrollIntoView).toHaveBeenCalledWith({\n        behavior: 'instant',\n        block: 'center',\n        inline: 'nearest'\n      })\n    })\n  })\n\n  describe('焦点陷阱', () => {\n    let focusableElements: HTMLElement[]\n    let firstElement: HTMLElement\n    let lastElement: HTMLElement\n    let removeTrap: () => void\n\n    beforeEach(() => {\n      focusableElements = [\n        { focus: jest.fn() } as any,\n        { focus: jest.fn() } as any,\n        { focus: jest.fn() } as any\n      ]\n      firstElement = focusableElements[0]\n      lastElement = focusableElements[focusableElements.length - 1]\n\n      mockElement.querySelectorAll.mockReturnValue(focusableElements)\n    })\n\n    test('应该设置焦点陷阱', () => {\n      removeTrap = accessibilityUtils.trapFocus(mockElement as any)\n\n      expect(mockElement.addEventListener).toHaveBeenCalledWith(\n        'keydown',\n        expect.any(Function)\n      )\n      expect(typeof removeTrap).toBe('function')\n    })\n\n    test('应该在Tab键时循环焦点', () => {\n      const keyDownHandler = jest.fn()\n      mockElement.addEventListener.mockImplementation((event, handler) => {\n        if (event === 'keydown') {\n          keyDownHandler.mockImplementation(handler)\n        }\n      })\n\n      removeTrap = accessibilityUtils.trapFocus(mockElement as any)\n\n      // 模拟在最后一个元素上按Tab键\n      document.activeElement = lastElement\n      const tabEvent = new KeyboardEvent('keydown', { key: 'Tab', shiftKey: false })\n      keyDownHandler(tabEvent)\n\n      expect(firstElement.focus).toHaveBeenCalled()\n    })\n\n    test('应该在Shift+Tab时反向循环焦点', () => {\n      const keyDownHandler = jest.fn()\n      mockElement.addEventListener.mockImplementation((event, handler) => {\n        if (event === 'keydown') {\n          keyDownHandler.mockImplementation(handler)\n        }\n      })\n\n      removeTrap = accessibilityUtils.trapFocus(mockElement as any)\n\n      // 模拟在第一个元素上按Shift+Tab\n      document.activeElement = firstElement\n      const shiftTabEvent = new KeyboardEvent('keydown', { key: 'Tab', shiftKey: true })\n      keyDownHandler(shiftTabEvent)\n\n      expect(lastElement.focus).toHaveBeenCalled()\n    })\n\n    test('应该忽略非Tab键事件', () => {\n      const keyDownHandler = jest.fn()\n      mockElement.addEventListener.mockImplementation((event, handler) => {\n        if (event === 'keydown') {\n          keyDownHandler.mockImplementation(handler)\n        }\n      })\n\n      removeTrap = accessibilityUtils.trapFocus(mockElement as any)\n\n      // 模拟其他按键\n      const enterEvent = new KeyboardEvent('keydown', { key: 'Enter' })\n      keyDownHandler(enterEvent)\n\n      expect(firstElement.focus).not.toHaveBeenCalled()\n      expect(lastElement.focus).not.toHaveBeenCalled()\n    })\n\n    test('应该正确移除焦点陷阱', () => {\n      removeTrap = accessibilityUtils.trapFocus(mockElement as any)\n\n      removeTrap()\n\n      expect(mockElement.removeEventListener).toHaveBeenCalledWith(\n        'keydown',\n        expect.any(Function)\n      )\n    })\n\n    test('应该处理没有可聚焦元素的情况', () => {\n      mockElement.querySelectorAll.mockReturnValue([])\n\n      removeTrap = accessibilityUtils.trapFocus(mockElement as any)\n\n      expect(removeTrap).toBeInstanceOf(Function)\n    })\n  })\n\n  describe('屏幕阅读器检测', () => {\n    test('应该检测屏幕阅读器', () => {\n      const result = accessibilityUtils.detectScreenReader()\n      expect(typeof result).toBe('boolean')\n    })\n  })\n\n  describe('字体大小优化', () => {\n    test('应该为大文本增大字体', () => {\n      const result = accessibilityUtils.getOptimalFontSize(16, true)\n      expect(result).toBe(19.2) // 16 * 1.2\n    })\n\n    test('应该为普通文本保持原大小', () => {\n      const result = accessibilityUtils.getOptimalFontSize(16, false)\n      expect(result).toBe(16)\n    })\n\n    test('应该处理不同的基础大小', () => {\n      expect(accessibilityUtils.getOptimalFontSize(14, true)).toBe(16.8)\n      expect(accessibilityUtils.getOptimalFontSize(18, true)).toBe(21.6)\n      expect(accessibilityUtils.getOptimalFontSize(20, false)).toBe(20)\n    })\n  })\n\n  describe('动画时长优化', () => {\n    test('应该为减少动画设置零时长', () => {\n      const result = accessibilityUtils.getOptimalAnimationDuration(300, true)\n      expect(result).toBe(0)\n    })\n\n    test('应该为正常动画保持原时长', () => {\n      const result = accessibilityUtils.getOptimalAnimationDuration(300, false)\n      expect(result).toBe(300)\n    })\n\n    test('应该处理不同的基础时长', () => {\n      expect(accessibilityUtils.getOptimalAnimationDuration(500, true)).toBe(0)\n      expect(accessibilityUtils.getOptimalAnimationDuration(1000, false)).toBe(1000)\n    })\n  })\n\n  describe('边界情况测试', () => {\n    test('应该处理null或undefined元素', () => {\n      expect(() => {\n        accessibilityUtils.isInViewport(null as any)\n      }).not.toThrow()\n\n      expect(() => {\n        accessibilityUtils.scrollToElement(null as any)\n      }).not.toThrow()\n\n      expect(() => {\n        accessibilityUtils.trapFocus(null as any)\n      }).not.toThrow()\n    })\n\n    test('应该处理缺少方法的对象', () => {\n      const invalidElement = {}\n\n      expect(() => {\n        accessibilityUtils.isInViewport(invalidElement as any)\n      }).not.toThrow()\n\n      expect(() => {\n        accessibilityUtils.scrollToElement(invalidElement as any)\n      }).not.toThrow()\n    })\n  })\n\n  describe('性能测试', () => {\n    test('应该保持良好的性能', () => {\n      const start = performance.now()\n\n      // 执行多次操作\n      for (let i = 0; i < 1000; i++) {\n        accessibilityUtils.generateId('test')\n        accessibilityUtils.checkContrast('#000', '#fff')\n        accessibilityUtils.getOptimalFontSize(16, false)\n        accessibilityUtils.getOptimalAnimationDuration(300, true)\n      }\n\n      const end = performance.now()\n      const duration = end - start\n\n      // 1000次操作应该在合理时间内完成\n      expect(duration).toBeLessThan(100) // 100ms\n    })\n  })\n\n  describe('TypeScript类型检查', () => {\n    test('应该符合TypeScript类型', () => {\n      const id = accessibilityUtils.generateId('test')\n      expect(typeof id).toBe('string')\n\n      const contrast = accessibilityUtils.checkContrast('#000', '#fff')\n      expect(typeof contrast).toBe('number')\n\n      const inViewport = accessibilityUtils.isInViewport(mockElement as any)\n      expect(typeof inViewport).toBe('boolean')\n\n      const fontSize = accessibilityUtils.getOptimalFontSize(16, true)\n      expect(typeof fontSize).toBe('number')\n\n      const animationDuration = accessibilityUtils.getOptimalAnimationDuration(300, false)\n      expect(typeof animationDuration).toBe('number')\n    })\n  })\n})"],"version":3}
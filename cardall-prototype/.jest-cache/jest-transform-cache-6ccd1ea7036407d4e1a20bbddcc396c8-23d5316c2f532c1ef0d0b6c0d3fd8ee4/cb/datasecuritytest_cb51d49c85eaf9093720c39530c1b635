1ffb3e6faf8218349fa5364a4d843d40
"use strict";
/**
 * 数据安全服务单元测试
 * 测试数据备份、加密、审计日志和安全检查功能
 */
Object.defineProperty(exports, "__esModule", { value: true });
const data_security_1 = require("@/services/data-security");
const test_data_1 = require("../fixtures/test-data");
const test_helpers_1 = require("../utils/test-helpers");
const vitest_1 = require("vitest");
// 模拟数据库服务
const mockDb = {
    getSetting: vitest_1.vi.fn(),
    updateSetting: vitest_1.vi.fn(),
    clearAll: vitest_1.vi.fn(),
    cards: {
        toArray: vitest_1.vi.fn(),
        bulkAdd: vitest_1.vi.fn()
    },
    folders: {
        toArray: vitest_1.vi.fn(),
        bulkAdd: vitest_1.vi.fn()
    },
    tags: {
        toArray: vitest_1.vi.fn(),
        bulkAdd: vitest_1.vi.fn()
    },
    images: {
        toArray: vitest_1.vi.fn(),
        bulkAdd: vitest_1.vi.fn()
    },
    settings: {
        toArray: vitest_1.vi.fn(),
        bulkAdd: vitest_1.vi.fn()
    },
    syncQueue: {
        toArray: vitest_1.vi.fn(),
        bulkAdd: vitest_1.vi.fn(),
        where: vitest_1.vi.fn().mockReturnThis(),
        below: vitest_1.vi.fn().mockReturnThis(),
        delete: vitest_1.vi.fn()
    },
    sessions: {
        toArray: vitest_1.vi.fn(),
        bulkAdd: vitest_1.vi.fn(),
        where: vitest_1.vi.fn().mockReturnThis(),
        below: vitest_1.vi.fn().mockReturnThis(),
        delete: vitest_1.vi.fn()
    }
};
(0, vitest_1.describe)('DataSecurityService', () => {
    let dataSecurityService;
    let restoreDateNow;
    let restoreUUID;
    (0, vitest_1.beforeEach)(() => {
        (0, test_helpers_1.cleanupAllMocks)();
        // 设置模拟的数据库
        vitest_1.vi.doMock('@/services/database', () => ({
            db: mockDb
        }));
        // 模拟时间戳
        const timestamp = 1640995200000; // 2022-01-01 00:00:00
        restoreDateNow = (0, test_helpers_1.mockDateNow)(timestamp);
        restoreUUID = (0, test_helpers_1.mockCryptoRandomUUID)('test-uuid-1234');
        // 重置所有mock
        vitest_1.vi.clearAllMocks();
        // 创建新的服务实例
        dataSecurityService = new data_security_1.DataSecurityService();
    });
    (0, vitest_1.afterEach)(() => {
        restoreDateNow();
        restoreUUID();
        (0, test_helpers_1.cleanupAllMocks)();
    });
    (0, vitest_1.describe)('Constructor and Initialization', () => {
        (0, vitest_1.test)('should initialize with default config', () => {
            const service = new data_security_1.DataSecurityService();
            const config = service.getConfig();
            (0, vitest_1.expect)(config.backup.autoBackup).toBe(true);
            (0, vitest_1.expect)(config.backup.backupInterval).toBe(60);
            (0, vitest_1.expect)(config.security.encryption.enabled).toBe(false);
            (0, vitest_1.expect)(config.security.audit.enabled).toBe(true);
        });
        (0, vitest_1.test)('should load existing config from database', async () => {
            const testBackupConfig = {
                autoBackup: false,
                backupInterval: 120
            };
            const testSecurityConfig = {
                encryption: { enabled: true }
            };
            mockDb.getSetting
                .mockResolvedValueOnce(testBackupConfig)
                .mockResolvedValueOnce(testSecurityConfig);
            const service = new data_security_1.DataSecurityService();
            // 等待初始化完成
            await new Promise(resolve => setTimeout(resolve, 0));
            const config = service.getConfig();
            (0, vitest_1.expect)(config.backup.autoBackup).toBe(false);
            (0, vitest_1.expect)(config.backup.backupInterval).toBe(120);
            (0, vitest_1.expect)(config.security.encryption.enabled).toBe(true);
        });
        (0, vitest_1.test)('should handle database errors during initialization', async () => {
            mockDb.getSetting.mockRejectedValue(new Error('Database error'));
            const service = new data_security_1.DataSecurityService();
            // 等待初始化完成
            await new Promise(resolve => setTimeout(resolve, 0));
            // 应该仍然使用默认配置
            const config = service.getConfig();
            (0, vitest_1.expect)(config.backup.autoBackup).toBe(true);
        });
    });
    (0, vitest_1.describe)('Backup Management', () => {
        (0, vitest_1.beforeEach)(() => {
            // 模拟数据库数据
            mockDb.cards.toArray.mockResolvedValue(test_data_1.testData.cards);
            mockDb.folders.toArray.mockResolvedValue(test_data_1.testData.folders);
            mockDb.tags.toArray.mockResolvedValue(test_data_1.testData.tags);
            mockDb.images.toArray.mockResolvedValue(test_data_1.testData.images);
            mockDb.settings.toArray.mockResolvedValue([]);
            mockDb.syncQueue.toArray.mockResolvedValue([]);
            mockDb.sessions.toArray.mockResolvedValue([]);
        });
        (0, vitest_1.test)('should create backup successfully', async () => {
            const description = 'Test backup';
            const tags = ['test', 'manual'];
            const result = await dataSecurityService.createBackup(description, tags);
            (0, vitest_1.expect)(result).toBeDefined();
            (0, vitest_1.expect)(result.id).toBe('test-uuid-1234');
            (0, vitest_1.expect)(result.timestamp).toEqual(new Date('2022-01-01T00:00:00Z'));
            (0, vitest_1.expect)(result.version).toBe('3.0.0');
            (0, vitest_1.expect)(result.description).toBe(description);
            (0, vitest_1.expect)(result.tags).toEqual(tags);
            (0, vitest_1.expect)(result.compressed).toBe(true);
            (0, vitest_1.expect)(result.encrypted).toBe(false);
        });
        (0, vitest_1.test)('should create backup with minimal data', async () => {
            mockDb.cards.toArray.mockResolvedValue([]);
            mockDb.folders.toArray.mockResolvedValue([]);
            mockDb.tags.toArray.mockResolvedValue([]);
            mockDb.images.toArray.mockResolvedValue([]);
            mockDb.settings.toArray.mockResolvedValue([]);
            mockDb.syncQueue.toArray.mockResolvedValue([]);
            mockDb.sessions.toArray.mockResolvedValue([]);
            const result = await dataSecurityService.createBackup();
            (0, vitest_1.expect)(result.size).toBeGreaterThan(0);
            (0, vitest_1.expect)(result.checksum).toBeDefined();
        });
        (0, vitest_1.test)('should calculate checksum correctly', async () => {
            const service = new data_security_1.DataSecurityService();
            const testData = { test: 'data', number: 123 };
            // 访问私有方法进行测试
            const checksum = await service.calculateChecksum(testData);
            (0, vitest_1.expect)(checksum).toBeDefined();
            (0, vitest_1.expect)(typeof checksum).toBe('string');
            (0, vitest_1.expect)(checksum.length).toBeGreaterThan(0);
        });
        (0, vitest_1.test)('should handle backup creation errors', async () => {
            mockDb.cards.toArray.mockRejectedValue(new Error('Database error'));
            await (0, vitest_1.expect)(dataSecurityService.createBackup())
                .rejects.toThrow('Database error');
        });
        (0, vitest_1.test)('should list backups in correct order', async () => {
            const mockBackups = [
                {
                    id: 'backup-1',
                    timestamp: new Date('2022-01-01T00:00:00Z'),
                    version: '3.0.0',
                    size: 1024,
                    compressed: false,
                    encrypted: false,
                    checksum: 'abc123',
                    tags: []
                },
                {
                    id: 'backup-2',
                    timestamp: new Date('2022-01-02T00:00:00Z'),
                    version: '3.0.0',
                    size: 2048,
                    compressed: false,
                    encrypted: false,
                    checksum: 'def456',
                    tags: []
                }
            ];
            // 模拟localStorage
            const mockStorage = (0, test_helpers_1.createMockStorage)();
            mockStorage.setItem('cardall-backups', JSON.stringify(mockBackups));
            Object.defineProperty(window, 'localStorage', { value: mockStorage });
            const service = new data_security_1.DataSecurityService();
            const backups = await service.listBackups();
            (0, vitest_1.expect)(backups).toHaveLength(2);
            (0, vitest_1.expect)(backups[0].id).toBe('backup-2'); // 最新的在前
            (0, vitest_1.expect)(backups[1].id).toBe('backup-1');
        });
        (0, vitest_1.test)('should handle empty backup list', async () => {
            const mockStorage = (0, test_helpers_1.createMockStorage)();
            mockStorage.setItem('cardall-backups', '');
            Object.defineProperty(window, 'localStorage', { value: mockStorage });
            const service = new data_security_1.DataSecurityService();
            const backups = await service.listBackups();
            (0, vitest_1.expect)(backups).toEqual([]);
        });
        (0, vitest_1.test)('should delete backup successfully', async () => {
            const mockBackups = [
                {
                    id: 'backup-1',
                    timestamp: new Date('2022-01-01T00:00:00Z'),
                    version: '3.0.0',
                    size: 1024,
                    compressed: false,
                    encrypted: false,
                    checksum: 'abc123',
                    tags: []
                },
                {
                    id: 'backup-2',
                    timestamp: new Date('2022-01-02T00:00:00Z'),
                    version: '3.0.0',
                    size: 2048,
                    compressed: false,
                    encrypted: false,
                    checksum: 'def456',
                    tags: []
                }
            ];
            const mockStorage = (0, test_helpers_1.createMockStorage)();
            mockStorage.setItem('cardall-backups', JSON.stringify(mockBackups));
            mockStorage.setItem('cardall-backup-backup-1', 'backup-data-1');
            Object.defineProperty(window, 'localStorage', { value: mockStorage });
            const service = new data_security_1.DataSecurityService();
            await service.deleteBackup('backup-1');
            (0, vitest_1.expect)(mockStorage.removeItem).toHaveBeenCalledWith('cardall-backup-backup-1');
            const updatedBackups = JSON.parse(mockStorage.getItem('cardall-backups') || '[]');
            (0, vitest_1.expect)(updatedBackups).toHaveLength(1);
            (0, vitest_1.expect)(updatedBackups[0].id).toBe('backup-2');
        });
        (0, vitest_1.test)('should handle backup deletion errors', async () => {
            const mockStorage = (0, test_helpers_1.createMockStorage)();
            mockStorage.setItem('cardall-backups', 'invalid-json');
            Object.defineProperty(window, 'localStorage', { value: mockStorage });
            const service = new data_security_1.DataSecurityService();
            await (0, vitest_1.expect)(service.deleteBackup('backup-1'))
                .rejects.toThrow();
        });
    });
    (0, vitest_1.describe)('Backup Restore', () => {
        (0, vitest_1.test)('should restore backup successfully', async () => {
            const mockBackupData = {
                metadata: {
                    id: 'backup-1',
                    timestamp: new Date('2022-01-01T00:00:00Z'),
                    version: '3.0.0',
                    size: 1024,
                    compressed: false,
                    encrypted: false,
                    checksum: 'abc123',
                    tags: []
                },
                data: {
                    cards: test_data_1.testData.cards,
                    folders: test_data_1.testData.folders,
                    tags: test_data_1.testData.tags,
                    images: test_data_1.testData.images,
                    settings: [],
                    syncQueue: [],
                    sessions: []
                }
            };
            // 模拟localStorage
            const mockStorage = (0, test_helpers_1.createMockStorage)();
            mockStorage.setItem('cardall-backup-backup-1', JSON.stringify(mockBackupData));
            Object.defineProperty(window, 'localStorage', { value: mockStorage });
            await dataSecurityService.restoreBackup('backup-1');
            (0, vitest_1.expect)(mockDb.clearAll).toHaveBeenCalled();
            (0, vitest_1.expect)(mockDb.folders.bulkAdd).toHaveBeenCalledWith(test_data_1.testData.folders);
            (0, vitest_1.expect)(mockDb.tags.bulkAdd).toHaveBeenCalledWith(test_data_1.testData.tags);
            (0, vitest_1.expect)(mockDb.images.bulkAdd).toHaveBeenCalledWith(test_data_1.testData.images);
            (0, vitest_1.expect)(mockDb.cards.bulkAdd).toHaveBeenCalledWith(test_data_1.testData.cards);
        });
        (0, vitest_1.test)('should create pre-restore backup before restore', async () => {
            const mockBackupData = {
                metadata: {
                    id: 'backup-1',
                    timestamp: new Date('2022-01-01T00:00:00Z'),
                    version: '3.0.0',
                    size: 1024,
                    compressed: false,
                    encrypted: false,
                    checksum: 'abc123',
                    tags: []
                },
                data: {
                    cards: [],
                    folders: [],
                    tags: [],
                    images: [],
                    settings: [],
                    syncQueue: [],
                    sessions: []
                }
            };
            const mockStorage = (0, test_helpers_1.createMockStorage)();
            mockStorage.setItem('cardall-backup-backup-1', JSON.stringify(mockBackupData));
            Object.defineProperty(window, 'localStorage', { value: mockStorage });
            // 监听createBackup方法
            const createBackupSpy = vitest_1.vi.spyOn(dataSecurityService, 'createBackup');
            await dataSecurityService.restoreBackup('backup-1');
            (0, vitest_1.expect)(createBackupSpy).toHaveBeenCalledWith('pre-restore backup', ['auto', 'emergency']);
        });
        (0, vitest_1.test)('should handle backup validation failure', async () => {
            const mockBackupData = {
                metadata: {
                    id: 'backup-1',
                    timestamp: new Date('2022-01-01T00:00:00Z'),
                    version: '3.0.0',
                    size: 1024,
                    compressed: false,
                    encrypted: false,
                    checksum: 'invalid-checksum',
                    tags: []
                },
                data: {
                    cards: test_data_1.testData.cards,
                    folders: test_data_1.testData.folders,
                    tags: test_data_1.testData.tags,
                    images: test_data_1.testData.images,
                    settings: [],
                    syncQueue: [],
                    sessions: []
                }
            };
            const mockStorage = (0, test_helpers_1.createMockStorage)();
            mockStorage.setItem('cardall-backup-backup-1', JSON.stringify(mockBackupData));
            Object.defineProperty(window, 'localStorage', { value: mockStorage });
            await (0, vitest_1.expect)(dataSecurityService.restoreBackup('backup-1'))
                .rejects.toThrow('Backup validation failed');
        });
        (0, vitest_1.test)('should handle restore errors', async () => {
            const mockStorage = (0, test_helpers_1.createMockStorage)();
            mockStorage.setItem('cardall-backup-backup-1', 'invalid-json');
            Object.defineProperty(window, 'localStorage', { value: mockStorage });
            await (0, vitest_1.expect)(dataSecurityService.restoreBackup('backup-1'))
                .rejects.toThrow();
        });
    });
    (0, vitest_1.describe)('Audit Logging', () => {
        (0, vitest_1.test)('should log audit events', () => {
            const service = new data_security_1.DataSecurityService()(service).logAudit('test-action', 'test-resource', { key: 'value' }, 'info');
            const logs = service.getAuditLogs();
            (0, vitest_1.expect)(logs).toHaveLength(1);
            (0, vitest_1.expect)(logs[0].action).toBe('test-action');
            (0, vitest_1.expect)(logs[0].resource).toBe('test-resource');
            (0, vitest_1.expect)(logs[0].details).toEqual({ key: 'value' });
            (0, vitest_1.expect)(logs[0].severity).toBe('info');
        });
        (0, vitest_1.test)('should filter audit logs by date range', () => {
            const service = new data_security_1.DataSecurityService();
            // 创建不同时间的日志
            const dates = [
                new Date('2022-01-01T00:00:00Z'),
                new Date('2022-01-02T00:00:00Z'),
                new Date('2022-01-03T00:00:00Z')
            ];
            dates.forEach((date, index) => {
                const restoreDate = (0, test_helpers_1.mockDateNow)(date.getTime());
                service.logAudit(`action-${index}`, 'resource', {}, 'info');
                restoreDate();
            });
            const filter = {
                startDate: new Date('2022-01-02T00:00:00Z'),
                endDate: new Date('2022-01-02T23:59:59Z')
            };
            const logs = service.getAuditLogs(filter);
            (0, vitest_1.expect)(logs).toHaveLength(1);
            (0, vitest_1.expect)(logs[0].action).toBe('action-1');
        });
        (0, vitest_1.test)('should filter audit logs by severity', () => {
            const service = new data_security_1.DataSecurityService();
            service.logAudit('action-1', 'resource', {}, 'error');
            service.logAudit('action-2', 'resource', {}, 'warn');
            service.logAudit('action-3', 'resource', {}, 'info');
            const logs = service.getAuditLogs({ severity: 'error' });
            (0, vitest_1.expect)(logs).toHaveLength(1);
            (0, vitest_1.expect)(logs[0].action).toBe('action-1');
        });
        (0, vitest_1.test)('should filter audit logs by action', () => {
            const service = new data_security_1.DataSecurityService();
            service.logAudit('backup', 'resource', {}, 'info');
            service.logAudit('restore', 'resource', {}, 'info');
            service.logAudit('backup', 'resource', {}, 'info');
            const logs = service.getAuditLogs({ action: 'backup' });
            (0, vitest_1.expect)(logs).toHaveLength(2);
            logs.forEach(log => (0, vitest_1.expect)(log.action).toBe('backup'));
        });
        (0, vitest_1.test)('should limit audit log results', () => {
            const service = new data_security_1.DataSecurityService();
            // 创建多个日志
            for (let i = 0; i < 10; i++) {
                ;
                service.logAudit(`action-${i}`, 'resource', {}, 'info');
            }
            const logs = service.getAuditLogs({ limit: 5 });
            (0, vitest_1.expect)(logs).toHaveLength(5);
        });
        (0, vitest_1.test)('should respect max log entries limit', () => {
            const service = new data_security_1.DataSecurityService();
            service.securityConfig.audit.maxLogEntries = 3;
            // 创建超过限制的日志
            for (let i = 0; i < 10; i++) {
                ;
                service.logAudit(`action-${i}`, 'resource', {}, 'info');
            }
            const logs = service.getAuditLogs();
            (0, vitest_1.expect)(logs).toHaveLength(3);
            (0, vitest_1.expect)(logs[0].action).toBe('action-9'); // 最新的
            (0, vitest_1.expect)(logs[1].action).toBe('action-8');
            (0, vitest_1.expect)(logs[2].action).toBe('action-7');
        });
        (0, vitest_1.test)('should not log when audit is disabled', () => {
            const service = new data_security_1.DataSecurityService();
            service.securityConfig.audit.enabled = false;
            service.logAudit('test-action', 'test-resource', {}, 'info');
            const logs = service.getAuditLogs();
            (0, vitest_1.expect)(logs).toHaveLength(0);
        });
    });
    (0, vitest_1.describe)('Security Configuration', () => {
        (0, vitest_1.test)('should update backup config', async () => {
            const newConfig = {
                autoBackup: false,
                backupInterval: 120,
                maxBackups: 20
            };
            await dataSecurityService.updateBackupConfig(newConfig);
            const config = dataSecurityService.getConfig();
            (0, vitest_1.expect)(config.backup.autoBackup).toBe(false);
            (0, vitest_1.expect)(config.backup.backupInterval).toBe(120);
            (0, vitest_1.expect)(config.backup.maxBackups).toBe(20);
            (0, vitest_1.expect)(mockDb.updateSetting).toHaveBeenCalledWith('backupConfig', vitest_1.expect.any(Object));
        });
        (0, vitest_1.test)('should update security config', async () => {
            const newConfig = {
                encryption: {
                    enabled: true,
                    algorithm: 'AES-256-GCM',
                    keyLength: 256,
                    keyRotationDays: 90
                },
                audit: {
                    enabled: true,
                    logLevel: 'debug',
                    maxLogEntries: 5000,
                    syncToCloud: false
                }
            };
            await dataSecurityService.updateSecurityConfig(newConfig);
            const config = dataSecurityService.getConfig();
            (0, vitest_1.expect)(config.security.encryption.enabled).toBe(true);
            (0, vitest_1.expect)(config.security.audit.logLevel).toBe('debug');
            (0, vitest_1.expect)(config.security.audit.maxLogEntries).toBe(5000);
            (0, vitest_1.expect)(mockDb.updateSetting).toHaveBeenCalledWith('securityConfig', vitest_1.expect.any(Object));
        });
        (0, vitest_1.test)('should handle config update errors', async () => {
            mockDb.updateSetting.mockRejectedValue(new Error('Database error'));
            await (0, vitest_1.expect)(dataSecurityService.updateBackupConfig({ autoBackup: false }))
                .rejects.toThrow('Database error');
        });
    });
    (0, vitest_1.describe)('Security Check', () => {
        (0, vitest_1.test)('should perform security check and generate report', async () => {
            // 模拟备份数据
            const mockBackups = [{
                    id: 'backup-1',
                    timestamp: new Date('2022-01-01T00:00:00Z'),
                    version: '3.0.0',
                    size: 1024,
                    compressed: false,
                    encrypted: false,
                    checksum: 'abc123',
                    tags: []
                }];
            const mockStorage = (0, test_helpers_1.createMockStorage)();
            mockStorage.setItem('cardall-backups', JSON.stringify(mockBackups));
            Object.defineProperty(window, 'localStorage', { value: mockStorage });
            const report = await dataSecurityService.performSecurityCheck();
            (0, vitest_1.expect)(report).toBeDefined();
            (0, vitest_1.expect)(report.overallScore).toBeGreaterThanOrEqual(0);
            (0, vitest_1.expect)(report.overallScore).toBeLessThanOrEqual(100);
            (0, vitest_1.expect)(Array.isArray(report.vulnerabilities)).toBe(true);
            (0, vitest_1.expect)(Array.isArray(report.recommendations)).toBe(true);
            (0, vitest_1.expect)(report.auditSummary.totalLogs).toBeGreaterThanOrEqual(0);
            (0, vitest_1.expect)(report.backupStatus.backupCount).toBe(1);
        });
        (0, vitest_1.test)('should detect encryption vulnerability', async () => {
            const service = new data_security_1.DataSecurityService();
            service.securityConfig.encryption.enabled = false;
            const report = await service.performSecurityCheck();
            const encryptionVuln = report.vulnerabilities.find(v => v.id === 'encryption-disabled');
            (0, vitest_1.expect)(encryptionVuln).toBeDefined();
            (0, vitest_1.expect)(encryptionVuln.severity).toBe('high');
        });
        (0, vitest_1.test)('should detect auto-backup vulnerability', async () => {
            const service = new data_security_1.DataSecurityService();
            service.config.autoBackup = false;
            const report = await service.performSecurityCheck();
            const backupVuln = report.vulnerabilities.find(v => v.id === 'auto-backup-disabled');
            (0, vitest_1.expect)(backupVuln).toBeDefined();
            (0, vitest_1.expect)(backupVuln.severity).toBe('medium');
        });
        (0, vitest_1.test)('should detect session timeout vulnerability', async () => {
            const service = new data_security_1.DataSecurityService();
            service.securityConfig.access.sessionTimeout = 2 * 60 * 60 * 1000; // 2 hours
            const report = await service.performSecurityCheck();
            const sessionVuln = report.vulnerabilities.find(v => v.id === 'session-timeout-too-long');
            (0, vitest_1.expect)(sessionVuln).toBeDefined();
            (0, vitest_1.expect)(sessionVuln.severity).toBe('medium');
        });
    });
    (0, vitest_1.describe)('Data Cleanup', () => {
        (0, vitest_1.test)('should cleanup old data when auto cleanup is enabled', async () => {
            const service = new data_security_1.DataSecurityService();
            service.securityConfig.privacy.autoCleanup = true;
            service.securityConfig.privacy.dataRetentionDays = 30;
            await service.cleanupOldData();
            const cutoffDate = new Date('2022-01-01T00:00:00Z' - 30 * 24 * 60 * 60 * 1000);
            (0, vitest_1.expect)(mockDb.syncQueue.where('timestamp').below(cutoffDate).delete).toHaveBeenCalled();
            (0, vitest_1.expect)(mockDb.sessions.where('lastActivity').below(cutoffDate).delete).toHaveBeenCalled();
        });
        (0, vitest_1.test)('should not cleanup when auto cleanup is disabled', async () => {
            const service = new data_security_1.DataSecurityService();
            service.securityConfig.privacy.autoCleanup = false;
            await service.cleanupOldData();
            (0, vitest_1.expect)(mockDb.syncQueue.where).not.toHaveBeenCalled();
            (0, vitest_1.expect)(mockDb.sessions.where).not.toHaveBeenCalled();
        });
        (0, vitest_1.test)('should handle cleanup errors', async () => {
            const service = new data_security_1.DataSecurityService();
            service.securityConfig.privacy.autoCleanup = true;
            mockDb.syncQueue.where.mockImplementation(() => {
                throw new Error('Database error');
            });
            await service.cleanupOldData();
            // 应该记录错误但不抛出异常
            const logs = service.getAuditLogs();
            const errorLog = logs.find(log => log.action === 'cleanup_failed');
            (0, vitest_1.expect)(errorLog).toBeDefined();
        });
    });
    (0, vitest_1.describe)('Auto Backup', () => {
        (0, vitest_1.test)('should start auto backup when enabled', () => {
            const service = new data_security_1.DataSecurityService();
            service.config.autoBackup = true;
            service.startAutoBackup();
            (0, vitest_1.expect)(service.backupTimer).toBeDefined();
        });
        (0, vitest_1.test)('should not start auto backup when disabled', () => {
            const service = new data_security_1.DataSecurityService();
            service.config.autoBackup = false;
            service.startAutoBackup();
            (0, vitest_1.expect)(service.backupTimer).toBeNull();
        });
        (0, vitest_1.test)('should stop existing timer when starting new one', () => {
            const service = new data_security_1.DataSecurityService();
            const existingTimer = setInterval(() => { }, 1000);
            service.backupTimer = existingTimer;
            const clearIntervalSpy = vitest_1.vi.spyOn(global, 'clearInterval');
            service.startAutoBackup();
            (0, vitest_1.expect)(clearIntervalSpy).toHaveBeenCalledWith(existingTimer);
        });
    });
    (0, vitest_1.describe)('Performance Tests', () => {
        (0, vitest_1.test)('should handle large backup data efficiently', async () => {
            // 生成大量测试数据
            const largeCards = Array.from({ length: 1000 }, (_, i) => ({
                ...test_data_1.testData.cards[0],
                id: `large-card-${i}`,
                title: `Large Card ${i}`,
                content: {
                    ...test_data_1.testData.cards[0].content,
                    content: 'Large content '.repeat(100) + i
                }
            }));
            mockDb.cards.toArray.mockResolvedValue(largeCards);
            mockDb.folders.toArray.mockResolvedValue(test_data_1.testData.folders);
            mockDb.tags.toArray.mockResolvedValue(test_data_1.testData.tags);
            mockDb.images.toArray.mockResolvedValue(test_data_1.testData.images);
            mockDb.settings.toArray.mockResolvedValue([]);
            mockDb.syncQueue.toArray.mockResolvedValue([]);
            mockDb.sessions.toArray.mockResolvedValue([]);
            const startTime = performance.now();
            const result = await dataSecurityService.createBackup('Large backup test');
            const endTime = performance.now();
            (0, vitest_1.expect)(result).toBeDefined();
            (0, vitest_1.expect)(result.size).toBeGreaterThan(0);
            // 验证性能在合理范围内
            const duration = endTime - startTime;
            (0, vitest_1.expect)(duration).toBeLessThan(5000); // 应该在5秒内完成
        });
        (0, vitest_1.test)('should handle concurrent backup operations', async () => {
            // 模拟并发备份创建
            const backupPromises = Array.from({ length: 5 }, (_, i) => dataSecurityService.createBackup(`Concurrent backup ${i}`));
            const results = await Promise.all(backupPromises);
            (0, vitest_1.expect)(results).toHaveLength(5);
            results.forEach(result => {
                (0, vitest_1.expect)(result.id).toBeDefined();
                (0, vitest_1.expect)(result.timestamp).toBeDefined();
            });
        });
    });
    (0, vitest_1.describe)('Error Handling', () => {
        (0, vitest_1.test)('should handle storage quota exceeded', async () => {
            const mockStorage = (0, test_helpers_1.createMockStorage)();
            mockStorage.setItem = vitest_1.vi.fn(() => {
                throw new Error('Quota exceeded');
            });
            Object.defineProperty(window, 'localStorage', { value: mockStorage });
            await (0, vitest_1.expect)(dataSecurityService.createBackup('Test backup'))
                .rejects.toThrow('Quota exceeded');
        });
        (0, vitest_1.test)('should handle invalid backup data format', async () => {
            const mockStorage = (0, test_helpers_1.createMockStorage)();
            mockStorage.setItem('cardall-backup-invalid', '{ invalid json }');
            Object.defineProperty(window, 'localStorage', { value: mockStorage });
            await (0, vitest_1.expect)(dataSecurityService.restoreBackup('invalid'))
                .rejects.toThrow();
        });
        (0, vitest_1.test)('should handle database connection errors', async () => {
            mockDb.cards.toArray.mockRejectedValue(new Error('Connection failed'));
            await (0, vitest_1.expect)(dataSecurityService.createBackup())
                .rejects.toThrow('Connection failed');
        });
    });
    (0, vitest_1.describe)('Edge Cases', () => {
        (0, vitest_1.test)('should handle empty database', async () => {
            mockDb.cards.toArray.mockResolvedValue([]);
            mockDb.folders.toArray.mockResolvedValue([]);
            mockDb.tags.toArray.mockResolvedValue([]);
            mockDb.images.toArray.mockResolvedValue([]);
            mockDb.settings.toArray.mockResolvedValue([]);
            mockDb.syncQueue.toArray.mockResolvedValue([]);
            mockDb.sessions.toArray.mockResolvedValue([]);
            const result = await dataSecurityService.createBackup();
            (0, vitest_1.expect)(result).toBeDefined();
            (0, vitest_1.expect)(result.size).toBeGreaterThan(0); // 至少包含元数据
        });
        (0, vitest_1.test)('should handle very long backup descriptions', async () => {
            const longDescription = 'a'.repeat(10000); // 10KB description
            const result = await dataSecurityService.createBackup(longDescription);
            (0, vitest_1.expect)(result.description).toBe(longDescription);
            (0, vitest_1.expect)(result.size).toBeGreaterThan(10000);
        });
        (0, vitest_1.test)('should handle special characters in backup data', async () => {
            const specialData = [{
                    ...test_data_1.testData.cards[0],
                    title: 'Special chars: àáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ',
                    content: {
                        ...test_data_1.testData.cards[0].content,
                        content: 'Content with special chars: 😊🎉✨'
                    }
                }];
            mockDb.cards.toArray.mockResolvedValue(specialData);
            mockDb.folders.toArray.mockResolvedValue([]);
            mockDb.tags.toArray.mockResolvedValue([]);
            mockDb.images.toArray.mockResolvedValue([]);
            mockDb.settings.toArray.mockResolvedValue([]);
            mockDb.syncQueue.toArray.mockResolvedValue([]);
            mockDb.sessions.toArray.mockResolvedValue([]);
            const result = await dataSecurityService.createBackup();
            (0, vitest_1.expect)(result).toBeDefined();
            (0, vitest_1.expect)(result.checksum).toBeDefined();
        });
    });
});
(0, vitest_1.describe)('Convenience Functions', () => {
    let dataSecurityService;
    (0, vitest_1.beforeEach)(() => {
        dataSecurityService = new data_security_1.DataSecurityService();
        vitest_1.vi.spyOn(dataSecurityService, 'createBackup');
        vitest_1.vi.spyOn(dataSecurityService, 'restoreBackup');
        vitest_1.vi.spyOn(dataSecurityService, 'listBackups');
        vitest_1.vi.spyOn(dataSecurityService, 'deleteBackup');
        vitest_1.vi.spyOn(dataSecurityService, 'performSecurityCheck');
        vitest_1.vi.spyOn(dataSecurityService, 'getAuditLogs');
    });
    (0, vitest_1.afterEach)(() => {
        (0, test_helpers_1.cleanupAllMocks)();
    });
    (0, vitest_1.test)('createBackup should call service method', async () => {
        await dataSecurityService.createBackup('test', ['tag']);
        (0, vitest_1.expect)(dataSecurityService.createBackup).toHaveBeenCalledWith('test', ['tag']);
    });
    (0, vitest_1.test)('restoreBackup should call service method', async () => {
        await dataSecurityService.restoreBackup('backup-id');
        (0, vitest_1.expect)(dataSecurityService.restoreBackup).toHaveBeenCalledWith('backup-id');
    });
    (0, vitest_1.test)('listBackups should call service method', async () => {
        await dataSecurityService.listBackups();
        (0, vitest_1.expect)(dataSecurityService.listBackups).toHaveBeenCalled();
    });
    (0, vitest_1.test)('deleteBackup should call service method', async () => {
        await dataSecurityService.deleteBackup('backup-id');
        (0, vitest_1.expect)(dataSecurityService.deleteBackup).toHaveBeenCalledWith('backup-id');
    });
    (0, vitest_1.test)('performSecurityCheck should call service method', async () => {
        await dataSecurityService.performSecurityCheck();
        (0, vitest_1.expect)(dataSecurityService.performSecurityCheck).toHaveBeenCalled();
    });
    (0, vitest_1.test)('getAuditLogs should call service method', async () => {
        await dataSecurityService.getAuditLogs();
        (0, vitest_1.expect)(dataSecurityService.getAuditLogs).toHaveBeenCalled();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
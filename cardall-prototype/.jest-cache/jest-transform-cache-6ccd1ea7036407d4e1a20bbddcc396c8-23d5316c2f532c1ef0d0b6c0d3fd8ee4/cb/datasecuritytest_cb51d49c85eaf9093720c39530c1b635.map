{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\services\\data-security.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\services\\data-security.test.ts"],"sourcesContent":["/**\n * 数据安全服务单元测试\n * 测试数据备份、加密、审计日志和安全检查功能\n */\n\nimport { DataSecurityService } from '@/services/data-security'\nimport {\n  BackupConfig,\n  SecurityConfig,\n  BackupMetadata,\n  BackupData,\n  AuditLog,\n  SecurityReport\n} from '@/services/data-security'\nimport { testData, errorTestData } from '../fixtures/test-data'\nimport {\n  createMockStorage,\n  mockDateNow,\n  mockCryptoRandomUUID,\n  cleanupAllMocks,\n  mockPromiseResolve,\n  mockPromiseReject\n} from '../utils/test-helpers'\nimport { vi, beforeEach, afterEach, describe, test, expect } from 'vitest'\n\n// 模拟数据库服务\nconst mockDb = {\n  getSetting: vi.fn(),\n  updateSetting: vi.fn(),\n  clearAll: vi.fn(),\n  cards: {\n    toArray: vi.fn(),\n    bulkAdd: vi.fn()\n  },\n  folders: {\n    toArray: vi.fn(),\n    bulkAdd: vi.fn()\n  },\n  tags: {\n    toArray: vi.fn(),\n    bulkAdd: vi.fn()\n  },\n  images: {\n    toArray: vi.fn(),\n    bulkAdd: vi.fn()\n  },\n  settings: {\n    toArray: vi.fn(),\n    bulkAdd: vi.fn()\n  },\n  syncQueue: {\n    toArray: vi.fn(),\n    bulkAdd: vi.fn(),\n    where: vi.fn().mockReturnThis(),\n    below: vi.fn().mockReturnThis(),\n    delete: vi.fn()\n  },\n  sessions: {\n    toArray: vi.fn(),\n    bulkAdd: vi.fn(),\n    where: vi.fn().mockReturnThis(),\n    below: vi.fn().mockReturnThis(),\n    delete: vi.fn()\n  }\n}\n\ndescribe('DataSecurityService', () => {\n  let dataSecurityService: DataSecurityService\n  let restoreDateNow: () => void\n  let restoreUUID: () => void\n\n  beforeEach(() => {\n    cleanupAllMocks()\n\n    // 设置模拟的数据库\n    vi.doMock('@/services/database', () => ({\n      db: mockDb\n    }))\n\n    // 模拟时间戳\n    const timestamp = 1640995200000 // 2022-01-01 00:00:00\n    restoreDateNow = mockDateNow(timestamp)\n    restoreUUID = mockCryptoRandomUUID('test-uuid-1234')\n\n    // 重置所有mock\n    vi.clearAllMocks()\n\n    // 创建新的服务实例\n    dataSecurityService = new DataSecurityService()\n  })\n\n  afterEach(() => {\n    restoreDateNow()\n    restoreUUID()\n    cleanupAllMocks()\n  })\n\n  describe('Constructor and Initialization', () => {\n    test('should initialize with default config', () => {\n      const service = new DataSecurityService()\n      const config = service.getConfig()\n\n      expect(config.backup.autoBackup).toBe(true)\n      expect(config.backup.backupInterval).toBe(60)\n      expect(config.security.encryption.enabled).toBe(false)\n      expect(config.security.audit.enabled).toBe(true)\n    })\n\n    test('should load existing config from database', async () => {\n      const testBackupConfig: Partial<BackupConfig> = {\n        autoBackup: false,\n        backupInterval: 120\n      }\n      const testSecurityConfig: Partial<SecurityConfig> = {\n        encryption: { enabled: true }\n      }\n\n      mockDb.getSetting\n        .mockResolvedValueOnce(testBackupConfig)\n        .mockResolvedValueOnce(testSecurityConfig)\n\n      const service = new DataSecurityService()\n\n      // 等待初始化完成\n      await new Promise(resolve => setTimeout(resolve, 0))\n\n      const config = service.getConfig()\n      expect(config.backup.autoBackup).toBe(false)\n      expect(config.backup.backupInterval).toBe(120)\n      expect(config.security.encryption.enabled).toBe(true)\n    })\n\n    test('should handle database errors during initialization', async () => {\n      mockDb.getSetting.mockRejectedValue(new Error('Database error'))\n\n      const service = new DataSecurityService()\n\n      // 等待初始化完成\n      await new Promise(resolve => setTimeout(resolve, 0))\n\n      // 应该仍然使用默认配置\n      const config = service.getConfig()\n      expect(config.backup.autoBackup).toBe(true)\n    })\n  })\n\n  describe('Backup Management', () => {\n    beforeEach(() => {\n      // 模拟数据库数据\n      mockDb.cards.toArray.mockResolvedValue(testData.cards)\n      mockDb.folders.toArray.mockResolvedValue(testData.folders)\n      mockDb.tags.toArray.mockResolvedValue(testData.tags)\n      mockDb.images.toArray.mockResolvedValue(testData.images)\n      mockDb.settings.toArray.mockResolvedValue([])\n      mockDb.syncQueue.toArray.mockResolvedValue([])\n      mockDb.sessions.toArray.mockResolvedValue([])\n    })\n\n    test('should create backup successfully', async () => {\n      const description = 'Test backup'\n      const tags = ['test', 'manual']\n\n      const result = await dataSecurityService.createBackup(description, tags)\n\n      expect(result).toBeDefined()\n      expect(result.id).toBe('test-uuid-1234')\n      expect(result.timestamp).toEqual(new Date('2022-01-01T00:00:00Z'))\n      expect(result.version).toBe('3.0.0')\n      expect(result.description).toBe(description)\n      expect(result.tags).toEqual(tags)\n      expect(result.compressed).toBe(true)\n      expect(result.encrypted).toBe(false)\n    })\n\n    test('should create backup with minimal data', async () => {\n      mockDb.cards.toArray.mockResolvedValue([])\n      mockDb.folders.toArray.mockResolvedValue([])\n      mockDb.tags.toArray.mockResolvedValue([])\n      mockDb.images.toArray.mockResolvedValue([])\n      mockDb.settings.toArray.mockResolvedValue([])\n      mockDb.syncQueue.toArray.mockResolvedValue([])\n      mockDb.sessions.toArray.mockResolvedValue([])\n\n      const result = await dataSecurityService.createBackup()\n\n      expect(result.size).toBeGreaterThan(0)\n      expect(result.checksum).toBeDefined()\n    })\n\n    test('should calculate checksum correctly', async () => {\n      const service = new DataSecurityService()\n      const testData = { test: 'data', number: 123 }\n\n      // 访问私有方法进行测试\n      const checksum = await (service as any).calculateChecksum(testData)\n\n      expect(checksum).toBeDefined()\n      expect(typeof checksum).toBe('string')\n      expect(checksum.length).toBeGreaterThan(0)\n    })\n\n    test('should handle backup creation errors', async () => {\n      mockDb.cards.toArray.mockRejectedValue(new Error('Database error'))\n\n      await expect(dataSecurityService.createBackup())\n        .rejects.toThrow('Database error')\n    })\n\n    test('should list backups in correct order', async () => {\n      const mockBackups: BackupMetadata[] = [\n        {\n          id: 'backup-1',\n          timestamp: new Date('2022-01-01T00:00:00Z'),\n          version: '3.0.0',\n          size: 1024,\n          compressed: false,\n          encrypted: false,\n          checksum: 'abc123',\n          tags: []\n        },\n        {\n          id: 'backup-2',\n          timestamp: new Date('2022-01-02T00:00:00Z'),\n          version: '3.0.0',\n          size: 2048,\n          compressed: false,\n          encrypted: false,\n          checksum: 'def456',\n          tags: []\n        }\n      ]\n\n      // 模拟localStorage\n      const mockStorage = createMockStorage()\n      mockStorage.setItem('cardall-backups', JSON.stringify(mockBackups))\n      Object.defineProperty(window, 'localStorage', { value: mockStorage })\n\n      const service = new DataSecurityService()\n      const backups = await service.listBackups()\n\n      expect(backups).toHaveLength(2)\n      expect(backups[0].id).toBe('backup-2') // 最新的在前\n      expect(backups[1].id).toBe('backup-1')\n    })\n\n    test('should handle empty backup list', async () => {\n      const mockStorage = createMockStorage()\n      mockStorage.setItem('cardall-backups', '')\n      Object.defineProperty(window, 'localStorage', { value: mockStorage })\n\n      const service = new DataSecurityService()\n      const backups = await service.listBackups()\n\n      expect(backups).toEqual([])\n    })\n\n    test('should delete backup successfully', async () => {\n      const mockBackups: BackupMetadata[] = [\n        {\n          id: 'backup-1',\n          timestamp: new Date('2022-01-01T00:00:00Z'),\n          version: '3.0.0',\n          size: 1024,\n          compressed: false,\n          encrypted: false,\n          checksum: 'abc123',\n          tags: []\n        },\n        {\n          id: 'backup-2',\n          timestamp: new Date('2022-01-02T00:00:00Z'),\n          version: '3.0.0',\n          size: 2048,\n          compressed: false,\n          encrypted: false,\n          checksum: 'def456',\n          tags: []\n        }\n      ]\n\n      const mockStorage = createMockStorage()\n      mockStorage.setItem('cardall-backups', JSON.stringify(mockBackups))\n      mockStorage.setItem('cardall-backup-backup-1', 'backup-data-1')\n      Object.defineProperty(window, 'localStorage', { value: mockStorage })\n\n      const service = new DataSecurityService()\n      await service.deleteBackup('backup-1')\n\n      expect(mockStorage.removeItem).toHaveBeenCalledWith('cardall-backup-backup-1')\n\n      const updatedBackups = JSON.parse(mockStorage.getItem('cardall-backups') || '[]')\n      expect(updatedBackups).toHaveLength(1)\n      expect(updatedBackups[0].id).toBe('backup-2')\n    })\n\n    test('should handle backup deletion errors', async () => {\n      const mockStorage = createMockStorage()\n      mockStorage.setItem('cardall-backups', 'invalid-json')\n      Object.defineProperty(window, 'localStorage', { value: mockStorage })\n\n      const service = new DataSecurityService()\n      await expect(service.deleteBackup('backup-1'))\n        .rejects.toThrow()\n    })\n  })\n\n  describe('Backup Restore', () => {\n    test('should restore backup successfully', async () => {\n      const mockBackupData: BackupData = {\n        metadata: {\n          id: 'backup-1',\n          timestamp: new Date('2022-01-01T00:00:00Z'),\n          version: '3.0.0',\n          size: 1024,\n          compressed: false,\n          encrypted: false,\n          checksum: 'abc123',\n          tags: []\n        },\n        data: {\n          cards: testData.cards,\n          folders: testData.folders,\n          tags: testData.tags,\n          images: testData.images,\n          settings: [],\n          syncQueue: [],\n          sessions: []\n        }\n      }\n\n      // 模拟localStorage\n      const mockStorage = createMockStorage()\n      mockStorage.setItem('cardall-backup-backup-1', JSON.stringify(mockBackupData))\n      Object.defineProperty(window, 'localStorage', { value: mockStorage })\n\n      await dataSecurityService.restoreBackup('backup-1')\n\n      expect(mockDb.clearAll).toHaveBeenCalled()\n      expect(mockDb.folders.bulkAdd).toHaveBeenCalledWith(testData.folders)\n      expect(mockDb.tags.bulkAdd).toHaveBeenCalledWith(testData.tags)\n      expect(mockDb.images.bulkAdd).toHaveBeenCalledWith(testData.images)\n      expect(mockDb.cards.bulkAdd).toHaveBeenCalledWith(testData.cards)\n    })\n\n    test('should create pre-restore backup before restore', async () => {\n      const mockBackupData: BackupData = {\n        metadata: {\n          id: 'backup-1',\n          timestamp: new Date('2022-01-01T00:00:00Z'),\n          version: '3.0.0',\n          size: 1024,\n          compressed: false,\n          encrypted: false,\n          checksum: 'abc123',\n          tags: []\n        },\n        data: {\n          cards: [],\n          folders: [],\n          tags: [],\n          images: [],\n          settings: [],\n          syncQueue: [],\n          sessions: []\n        }\n      }\n\n      const mockStorage = createMockStorage()\n      mockStorage.setItem('cardall-backup-backup-1', JSON.stringify(mockBackupData))\n      Object.defineProperty(window, 'localStorage', { value: mockStorage })\n\n      // 监听createBackup方法\n      const createBackupSpy = vi.spyOn(dataSecurityService, 'createBackup')\n\n      await dataSecurityService.restoreBackup('backup-1')\n\n      expect(createBackupSpy).toHaveBeenCalledWith('pre-restore backup', ['auto', 'emergency'])\n    })\n\n    test('should handle backup validation failure', async () => {\n      const mockBackupData: BackupData = {\n        metadata: {\n          id: 'backup-1',\n          timestamp: new Date('2022-01-01T00:00:00Z'),\n          version: '3.0.0',\n          size: 1024,\n          compressed: false,\n          encrypted: false,\n          checksum: 'invalid-checksum',\n          tags: []\n        },\n        data: {\n          cards: testData.cards,\n          folders: testData.folders,\n          tags: testData.tags,\n          images: testData.images,\n          settings: [],\n          syncQueue: [],\n          sessions: []\n        }\n      }\n\n      const mockStorage = createMockStorage()\n      mockStorage.setItem('cardall-backup-backup-1', JSON.stringify(mockBackupData))\n      Object.defineProperty(window, 'localStorage', { value: mockStorage })\n\n      await expect(dataSecurityService.restoreBackup('backup-1'))\n        .rejects.toThrow('Backup validation failed')\n    })\n\n    test('should handle restore errors', async () => {\n      const mockStorage = createMockStorage()\n      mockStorage.setItem('cardall-backup-backup-1', 'invalid-json')\n      Object.defineProperty(window, 'localStorage', { value: mockStorage })\n\n      await expect(dataSecurityService.restoreBackup('backup-1'))\n        .rejects.toThrow()\n    })\n  })\n\n  describe('Audit Logging', () => {\n    test('should log audit events', () => {\n      const service = new DataSecurityService()\n\n      // 测试私有方法\n      (service as any).logAudit('test-action', 'test-resource', { key: 'value' }, 'info')\n\n      const logs = service.getAuditLogs()\n      expect(logs).toHaveLength(1)\n      expect(logs[0].action).toBe('test-action')\n      expect(logs[0].resource).toBe('test-resource')\n      expect(logs[0].details).toEqual({ key: 'value' })\n      expect(logs[0].severity).toBe('info')\n    })\n\n    test('should filter audit logs by date range', () => {\n      const service = new DataSecurityService()\n\n      // 创建不同时间的日志\n      const dates = [\n        new Date('2022-01-01T00:00:00Z'),\n        new Date('2022-01-02T00:00:00Z'),\n        new Date('2022-01-03T00:00:00Z')\n      ]\n\n      dates.forEach((date, index) => {\n        const restoreDate = mockDateNow(date.getTime())\n        ;(service as any).logAudit(`action-${index}`, 'resource', {}, 'info')\n        restoreDate()\n      })\n\n      const filter = {\n        startDate: new Date('2022-01-02T00:00:00Z'),\n        endDate: new Date('2022-01-02T23:59:59Z')\n      }\n\n      const logs = service.getAuditLogs(filter)\n      expect(logs).toHaveLength(1)\n      expect(logs[0].action).toBe('action-1')\n    })\n\n    test('should filter audit logs by severity', () => {\n      const service = new DataSecurityService()\n\n      ;(service as any).logAudit('action-1', 'resource', {}, 'error')\n      ;(service as any).logAudit('action-2', 'resource', {}, 'warn')\n      ;(service as any).logAudit('action-3', 'resource', {}, 'info')\n\n      const logs = service.getAuditLogs({ severity: 'error' })\n      expect(logs).toHaveLength(1)\n      expect(logs[0].action).toBe('action-1')\n    })\n\n    test('should filter audit logs by action', () => {\n      const service = new DataSecurityService()\n\n      ;(service as any).logAudit('backup', 'resource', {}, 'info')\n      ;(service as any).logAudit('restore', 'resource', {}, 'info')\n      ;(service as any).logAudit('backup', 'resource', {}, 'info')\n\n      const logs = service.getAuditLogs({ action: 'backup' })\n      expect(logs).toHaveLength(2)\n      logs.forEach(log => expect(log.action).toBe('backup'))\n    })\n\n    test('should limit audit log results', () => {\n      const service = new DataSecurityService()\n\n      // 创建多个日志\n      for (let i = 0; i < 10; i++) {\n        ;(service as any).logAudit(`action-${i}`, 'resource', {}, 'info')\n      }\n\n      const logs = service.getAuditLogs({ limit: 5 })\n      expect(logs).toHaveLength(5)\n    })\n\n    test('should respect max log entries limit', () => {\n      const service = new DataSecurityService()\n\n      // 设置较小的日志限制\n      ;(service as any).securityConfig.audit.maxLogEntries = 3\n\n      // 创建超过限制的日志\n      for (let i = 0; i < 10; i++) {\n        ;(service as any).logAudit(`action-${i}`, 'resource', {}, 'info')\n      }\n\n      const logs = service.getAuditLogs()\n      expect(logs).toHaveLength(3)\n      expect(logs[0].action).toBe('action-9') // 最新的\n      expect(logs[1].action).toBe('action-8')\n      expect(logs[2].action).toBe('action-7')\n    })\n\n    test('should not log when audit is disabled', () => {\n      const service = new DataSecurityService()\n      ;(service as any).securityConfig.audit.enabled = false\n\n      ;(service as any).logAudit('test-action', 'test-resource', {}, 'info')\n\n      const logs = service.getAuditLogs()\n      expect(logs).toHaveLength(0)\n    })\n  })\n\n  describe('Security Configuration', () => {\n    test('should update backup config', async () => {\n      const newConfig: Partial<BackupConfig> = {\n        autoBackup: false,\n        backupInterval: 120,\n        maxBackups: 20\n      }\n\n      await dataSecurityService.updateBackupConfig(newConfig)\n\n      const config = dataSecurityService.getConfig()\n      expect(config.backup.autoBackup).toBe(false)\n      expect(config.backup.backupInterval).toBe(120)\n      expect(config.backup.maxBackups).toBe(20)\n\n      expect(mockDb.updateSetting).toHaveBeenCalledWith('backupConfig', expect.any(Object))\n    })\n\n    test('should update security config', async () => {\n      const newConfig: Partial<SecurityConfig> = {\n        encryption: {\n          enabled: true,\n          algorithm: 'AES-256-GCM',\n          keyLength: 256,\n          keyRotationDays: 90\n        },\n        audit: {\n          enabled: true,\n          logLevel: 'debug',\n          maxLogEntries: 5000,\n          syncToCloud: false\n        }\n      }\n\n      await dataSecurityService.updateSecurityConfig(newConfig)\n\n      const config = dataSecurityService.getConfig()\n      expect(config.security.encryption.enabled).toBe(true)\n      expect(config.security.audit.logLevel).toBe('debug')\n      expect(config.security.audit.maxLogEntries).toBe(5000)\n\n      expect(mockDb.updateSetting).toHaveBeenCalledWith('securityConfig', expect.any(Object))\n    })\n\n    test('should handle config update errors', async () => {\n      mockDb.updateSetting.mockRejectedValue(new Error('Database error'))\n\n      await expect(dataSecurityService.updateBackupConfig({ autoBackup: false }))\n        .rejects.toThrow('Database error')\n    })\n  })\n\n  describe('Security Check', () => {\n    test('should perform security check and generate report', async () => {\n      // 模拟备份数据\n      const mockBackups: BackupMetadata[] = [{\n        id: 'backup-1',\n        timestamp: new Date('2022-01-01T00:00:00Z'),\n        version: '3.0.0',\n        size: 1024,\n        compressed: false,\n        encrypted: false,\n        checksum: 'abc123',\n        tags: []\n      }]\n\n      const mockStorage = createMockStorage()\n      mockStorage.setItem('cardall-backups', JSON.stringify(mockBackups))\n      Object.defineProperty(window, 'localStorage', { value: mockStorage })\n\n      const report = await dataSecurityService.performSecurityCheck()\n\n      expect(report).toBeDefined()\n      expect(report.overallScore).toBeGreaterThanOrEqual(0)\n      expect(report.overallScore).toBeLessThanOrEqual(100)\n      expect(Array.isArray(report.vulnerabilities)).toBe(true)\n      expect(Array.isArray(report.recommendations)).toBe(true)\n      expect(report.auditSummary.totalLogs).toBeGreaterThanOrEqual(0)\n      expect(report.backupStatus.backupCount).toBe(1)\n    })\n\n    test('should detect encryption vulnerability', async () => {\n      const service = new DataSecurityService()\n      ;(service as any).securityConfig.encryption.enabled = false\n\n      const report = await service.performSecurityCheck()\n\n      const encryptionVuln = report.vulnerabilities.find(v => v.id === 'encryption-disabled')\n      expect(encryptionVuln).toBeDefined()\n      expect(encryptionVuln!.severity).toBe('high')\n    })\n\n    test('should detect auto-backup vulnerability', async () => {\n      const service = new DataSecurityService()\n      ;(service as any).config.autoBackup = false\n\n      const report = await service.performSecurityCheck()\n\n      const backupVuln = report.vulnerabilities.find(v => v.id === 'auto-backup-disabled')\n      expect(backupVuln).toBeDefined()\n      expect(backupVuln!.severity).toBe('medium')\n    })\n\n    test('should detect session timeout vulnerability', async () => {\n      const service = new DataSecurityService()\n      ;(service as any).securityConfig.access.sessionTimeout = 2 * 60 * 60 * 1000 // 2 hours\n\n      const report = await service.performSecurityCheck()\n\n      const sessionVuln = report.vulnerabilities.find(v => v.id === 'session-timeout-too-long')\n      expect(sessionVuln).toBeDefined()\n      expect(sessionVuln!.severity).toBe('medium')\n    })\n  })\n\n  describe('Data Cleanup', () => {\n    test('should cleanup old data when auto cleanup is enabled', async () => {\n      const service = new DataSecurityService()\n      ;(service as any).securityConfig.privacy.autoCleanup = true\n      ;(service as any).securityConfig.privacy.dataRetentionDays = 30\n\n      await service.cleanupOldData()\n\n      const cutoffDate = new Date('2022-01-01T00:00:00Z' - 30 * 24 * 60 * 60 * 1000)\n      expect(mockDb.syncQueue.where('timestamp').below(cutoffDate).delete).toHaveBeenCalled()\n      expect(mockDb.sessions.where('lastActivity').below(cutoffDate).delete).toHaveBeenCalled()\n    })\n\n    test('should not cleanup when auto cleanup is disabled', async () => {\n      const service = new DataSecurityService()\n      ;(service as any).securityConfig.privacy.autoCleanup = false\n\n      await service.cleanupOldData()\n\n      expect(mockDb.syncQueue.where).not.toHaveBeenCalled()\n      expect(mockDb.sessions.where).not.toHaveBeenCalled()\n    })\n\n    test('should handle cleanup errors', async () => {\n      const service = new DataSecurityService()\n      ;(service as any).securityConfig.privacy.autoCleanup = true\n\n      mockDb.syncQueue.where.mockImplementation(() => {\n        throw new Error('Database error')\n      })\n\n      await service.cleanupOldData()\n\n      // 应该记录错误但不抛出异常\n      const logs = service.getAuditLogs()\n      const errorLog = logs.find(log => log.action === 'cleanup_failed')\n      expect(errorLog).toBeDefined()\n    })\n  })\n\n  describe('Auto Backup', () => {\n    test('should start auto backup when enabled', () => {\n      const service = new DataSecurityService()\n      ;(service as any).config.autoBackup = true\n\n      // 测试私有方法\n      ;(service as any).startAutoBackup()\n\n      expect((service as any).backupTimer).toBeDefined()\n    })\n\n    test('should not start auto backup when disabled', () => {\n      const service = new DataSecurityService()\n      ;(service as any).config.autoBackup = false\n\n      ;(service as any).startAutoBackup()\n\n      expect((service as any).backupTimer).toBeNull()\n    })\n\n    test('should stop existing timer when starting new one', () => {\n      const service = new DataSecurityService()\n      const existingTimer = setInterval(() => {}, 1000)\n      ;(service as any).backupTimer = existingTimer\n\n      const clearIntervalSpy = vi.spyOn(global, 'clearInterval')\n\n      ;(service as any).startAutoBackup()\n\n      expect(clearIntervalSpy).toHaveBeenCalledWith(existingTimer)\n    })\n  })\n\n  describe('Performance Tests', () => {\n    test('should handle large backup data efficiently', async () => {\n      // 生成大量测试数据\n      const largeCards = Array.from({ length: 1000 }, (_, i) => ({\n        ...testData.cards[0],\n        id: `large-card-${i}`,\n        title: `Large Card ${i}`,\n        content: {\n          ...testData.cards[0].content,\n          content: 'Large content '.repeat(100) + i\n        }\n      }))\n\n      mockDb.cards.toArray.mockResolvedValue(largeCards)\n      mockDb.folders.toArray.mockResolvedValue(testData.folders)\n      mockDb.tags.toArray.mockResolvedValue(testData.tags)\n      mockDb.images.toArray.mockResolvedValue(testData.images)\n      mockDb.settings.toArray.mockResolvedValue([])\n      mockDb.syncQueue.toArray.mockResolvedValue([])\n      mockDb.sessions.toArray.mockResolvedValue([])\n\n      const startTime = performance.now()\n      const result = await dataSecurityService.createBackup('Large backup test')\n      const endTime = performance.now()\n\n      expect(result).toBeDefined()\n      expect(result.size).toBeGreaterThan(0)\n\n      // 验证性能在合理范围内\n      const duration = endTime - startTime\n      expect(duration).toBeLessThan(5000) // 应该在5秒内完成\n    })\n\n    test('should handle concurrent backup operations', async () => {\n      // 模拟并发备份创建\n      const backupPromises = Array.from({ length: 5 }, (_, i) =>\n        dataSecurityService.createBackup(`Concurrent backup ${i}`)\n      )\n\n      const results = await Promise.all(backupPromises)\n\n      expect(results).toHaveLength(5)\n      results.forEach(result => {\n        expect(result.id).toBeDefined()\n        expect(result.timestamp).toBeDefined()\n      })\n    })\n  })\n\n  describe('Error Handling', () => {\n    test('should handle storage quota exceeded', async () => {\n      const mockStorage = createMockStorage()\n      mockStorage.setItem = vi.fn(() => {\n        throw new Error('Quota exceeded')\n      })\n      Object.defineProperty(window, 'localStorage', { value: mockStorage })\n\n      await expect(dataSecurityService.createBackup('Test backup'))\n        .rejects.toThrow('Quota exceeded')\n    })\n\n    test('should handle invalid backup data format', async () => {\n      const mockStorage = createMockStorage()\n      mockStorage.setItem('cardall-backup-invalid', '{ invalid json }')\n      Object.defineProperty(window, 'localStorage', { value: mockStorage })\n\n      await expect(dataSecurityService.restoreBackup('invalid'))\n        .rejects.toThrow()\n    })\n\n    test('should handle database connection errors', async () => {\n      mockDb.cards.toArray.mockRejectedValue(new Error('Connection failed'))\n\n      await expect(dataSecurityService.createBackup())\n        .rejects.toThrow('Connection failed')\n    })\n  })\n\n  describe('Edge Cases', () => {\n    test('should handle empty database', async () => {\n      mockDb.cards.toArray.mockResolvedValue([])\n      mockDb.folders.toArray.mockResolvedValue([])\n      mockDb.tags.toArray.mockResolvedValue([])\n      mockDb.images.toArray.mockResolvedValue([])\n      mockDb.settings.toArray.mockResolvedValue([])\n      mockDb.syncQueue.toArray.mockResolvedValue([])\n      mockDb.sessions.toArray.mockResolvedValue([])\n\n      const result = await dataSecurityService.createBackup()\n\n      expect(result).toBeDefined()\n      expect(result.size).toBeGreaterThan(0) // 至少包含元数据\n    })\n\n    test('should handle very long backup descriptions', async () => {\n      const longDescription = 'a'.repeat(10000) // 10KB description\n\n      const result = await dataSecurityService.createBackup(longDescription)\n\n      expect(result.description).toBe(longDescription)\n      expect(result.size).toBeGreaterThan(10000)\n    })\n\n    test('should handle special characters in backup data', async () => {\n      const specialData = [{\n        ...testData.cards[0],\n        title: 'Special chars: àáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ',\n        content: {\n          ...testData.cards[0].content,\n          content: 'Content with special chars: 😊🎉✨'\n        }\n      }]\n\n      mockDb.cards.toArray.mockResolvedValue(specialData)\n      mockDb.folders.toArray.mockResolvedValue([])\n      mockDb.tags.toArray.mockResolvedValue([])\n      mockDb.images.toArray.mockResolvedValue([])\n      mockDb.settings.toArray.mockResolvedValue([])\n      mockDb.syncQueue.toArray.mockResolvedValue([])\n      mockDb.sessions.toArray.mockResolvedValue([])\n\n      const result = await dataSecurityService.createBackup()\n\n      expect(result).toBeDefined()\n      expect(result.checksum).toBeDefined()\n    })\n  })\n})\n\ndescribe('Convenience Functions', () => {\n  let dataSecurityService: DataSecurityService\n\n  beforeEach(() => {\n    dataSecurityService = new DataSecurityService()\n    vi.spyOn(dataSecurityService, 'createBackup')\n    vi.spyOn(dataSecurityService, 'restoreBackup')\n    vi.spyOn(dataSecurityService, 'listBackups')\n    vi.spyOn(dataSecurityService, 'deleteBackup')\n    vi.spyOn(dataSecurityService, 'performSecurityCheck')\n    vi.spyOn(dataSecurityService, 'getAuditLogs')\n  })\n\n  afterEach(() => {\n    cleanupAllMocks()\n  })\n\n  test('createBackup should call service method', async () => {\n    await dataSecurityService.createBackup('test', ['tag'])\n    expect(dataSecurityService.createBackup).toHaveBeenCalledWith('test', ['tag'])\n  })\n\n  test('restoreBackup should call service method', async () => {\n    await dataSecurityService.restoreBackup('backup-id')\n    expect(dataSecurityService.restoreBackup).toHaveBeenCalledWith('backup-id')\n  })\n\n  test('listBackups should call service method', async () => {\n    await dataSecurityService.listBackups()\n    expect(dataSecurityService.listBackups).toHaveBeenCalled()\n  })\n\n  test('deleteBackup should call service method', async () => {\n    await dataSecurityService.deleteBackup('backup-id')\n    expect(dataSecurityService.deleteBackup).toHaveBeenCalledWith('backup-id')\n  })\n\n  test('performSecurityCheck should call service method', async () => {\n    await dataSecurityService.performSecurityCheck()\n    expect(dataSecurityService.performSecurityCheck).toHaveBeenCalled()\n  })\n\n  test('getAuditLogs should call service method', async () => {\n    await dataSecurityService.getAuditLogs()\n    expect(dataSecurityService.getAuditLogs).toHaveBeenCalled()\n  })\n})"],"version":3}
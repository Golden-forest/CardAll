{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\services\\data-migration\\setup.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\services\\data-migration\\setup.ts"],"sourcesContent":["/**\n * 数据迁移测试环境设置\n */\n\nimport { db } from '@/services/database-unified'\nimport { dataMigrationTool } from '@/services/data-migration-tool'\nimport { MigrationTestHelpers } from './test-utils'\n\n// 测试前全局设置\nbeforeAll(async () => {\n  console.log('🧪 数据迁移测试环境初始化...')\n\n  // 设置测试环境变量\n  process.env.NODE_ENV = 'test'\n\n  // 模拟必要的浏览器API\n  if (!global.crypto) {\n    global.crypto = {} as any\n  }\n\n  if (!global.crypto.randomUUID) {\n    global.crypto.randomUUID = () => {\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16) | 0\n        const v = c === 'x' ? r : (r & 0x3) | 0x8\n        return v.toString(16)\n      })\n    }\n  }\n\n  // 模拟fetch API（用于图片处理）\n  global.fetch = jest.fn() as any\n\n  // 模拟fileSystemService\n  jest.mock('@/services/file-system', () => ({\n    fileSystemService: {\n      saveImage: jest.fn().mockImplementation(async (file: File, cardId: string, folderId?: string) => {\n        return {\n          filePath: `/images/${cardId}/${file.name}`,\n          metadata: {\n            width: 100,\n            height: 100,\n            format: file.type.split('/')[1],\n            size: file.size\n          }\n        }\n      })\n    }\n  }))\n\n  console.log('✅ 数据迁移测试环境初始化完成')\n})\n\n// 每个测试前的设置\nbeforeEach(async () => {\n  // 清理localStorage\n  MigrationTestHelpers.cleanupLocalStorage()\n\n  // 清理数据库\n  try {\n    await db.clearAll()\n  } catch (error) {\n    console.warn('数据库清理失败:', error)\n  }\n\n  // 重置所有mock\n  jest.clearAllMocks()\n\n  // 重置迁移工具状态\n  ;(dataMigrationTool as any).isMigrating = false\n  ;(dataMigrationTool as any).currentPlan = null\n  ;(dataMigrationTool as any).progressCallbacks.clear()\n  ;(dataMigrationTool as any).migrationQueue = []\n  ;(dataMigrationTool as any).activeMigrations.clear()\n})\n\n// 所有测试后的清理\nafterAll(async () => {\n  console.log('🧪 数据迁移测试环境清理...')\n\n  // 清理localStorage\n  MigrationTestHelpers.cleanupLocalStorage()\n\n  // 清理数据库\n  try {\n    await db.clearAll()\n  } catch (error) {\n    console.warn('数据库最终清理失败:', error)\n  }\n\n  // 重置全局mock\n  jest.restoreAllMocks()\n\n  console.log('✅ 数据迁移测试环境清理完成')\n})\n\n// 全局测试超时设置\njest.setTimeout(30000)\n\n// 抑制控制台警告（测试期间）\nbeforeAll(() => {\n  const originalConsoleWarn = console.warn\n  const originalConsoleError = console.error\n\n  console.warn = (...args) => {\n    if (!args[0]?.includes?.('Failed to cleanup')) {\n      originalConsoleWarn(...args)\n    }\n  }\n\n  console.error = (...args) => {\n    if (!args[0]?.includes?.('cleanup failed')) {\n      originalConsoleError(...args)\n    }\n  }\n})\n\n// 导出测试工具\nexport { MigrationTestHelpers }"],"version":3}
7b552c8940e7804c2df1a65b89eacb83
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// 模拟数据库
globals_1.jest.mock('@/services/database-unified', () => ({
    db: {
        syncQueue: {
            where: globals_1.jest.fn().mockReturnThis(),
            equals: globals_1.jest.fn().mockReturnThis(),
            orderBy: globals_1.jest.fn().mockReturnThis(),
            reverse: globals_1.jest.fn().mockReturnThis(),
            limit: globals_1.jest.fn().mockReturnThis(),
            toArray: globals_1.jest.fn(),
            update: globals_1.jest.fn(),
            transaction: globals_1.jest.fn(),
            bulkDelete: globals_1.jest.fn()
        },
        cards: {
            add: globals_1.jest.fn(),
            update: globals_1.jest.fn(),
            delete: globals_1.jest.fn()
        },
        on: globals_1.jest.fn()
    }
}));
// 模拟Supabase
globals_1.jest.mock('@/services/supabase', () => ({
    supabase: {
        from: globals_1.jest.fn().mockReturnThis(),
        select: globals_1.jest.fn().mockReturnThis(),
        eq: globals_1.jest.fn().mockReturnThis(),
        insert: globals_1.jest.fn().mockReturnThis(),
        update: globals_1.jest.fn().mockReturnThis(),
        delete: globals_1.jest.fn().mockReturnThis()
    }
}));
const unified_sync_service_1 = require("@/services/unified-sync-service");
const local_operation_1 = require("@/services/local-operation");
(0, globals_1.describe)('LocalOperationService与UnifiedSyncService集成验证', () => {
    (0, globals_1.beforeEach)(() => {
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.describe)('集成架构验证', () => {
        (0, globals_1.it)('应该正确导入LocalOperationService', () => {
            // 验证UnifiedSyncService正确导入了LocalOperationService
            (0, globals_1.expect)(unified_sync_service_1.unifiedSyncService).toBeDefined();
            (0, globals_1.expect)(local_operation_1.localOperationService).toBeDefined();
        });
        (0, globals_1.it)('应该正确识别LocalSyncOperation类型', () => {
            // 验证类型定义的一致性
            const mockOperation = {
                id: 'test-op-1',
                type: 'create',
                table: 'cards',
                data: { frontContent: 'Test', backContent: 'Answer' },
                localId: 'card-1',
                timestamp: Date.now(),
                retryCount: 0,
                status: 'pending',
                localVersion: 1,
                priority: 'normal',
                dependencies: [],
                networkInfo: {
                    isOnline: true,
                    connectionType: 'wifi',
                    bandwidth: 'high'
                }
            };
            (0, globals_1.expect)(mockOperation).toBeDefined();
            (0, globals_1.expect)(mockOperation.type).toBe('create');
            (0, globals_1.expect)(mockOperation.table).toBe('cards');
        });
    });
    (0, globals_1.describe)('数据流验证', () => {
        (0, globals_1.it)('应该正确从LocalOperationService获取待处理操作', async () => {
            const mockOperations = [
                {
                    id: 'op-1',
                    type: 'create',
                    table: 'cards',
                    data: { frontContent: 'Q1', backContent: 'A1' },
                    localId: 'card-1',
                    timestamp: Date.now(),
                    retryCount: 0,
                    status: 'pending',
                    localVersion: 1,
                    priority: 'normal',
                    dependencies: [],
                    networkInfo: { isOnline: true, connectionType: 'wifi', bandwidth: 'high' }
                }
            ];
            // 模拟getPendingSyncOperations返回值
            const mockDb = require('@/services/database').db;
            mockDb.syncQueue.toArray.mockResolvedValue(mockOperations);
            // 验证方法调用
            const result = await local_operation_1.localOperationService.getPendingSyncOperations();
            (0, globals_1.expect)(result).toEqual(mockOperations);
            (0, globals_1.expect)(mockDb.syncQueue.where).toHaveBeenCalledWith('status');
            (0, globals_1.expect)(mockDb.syncQueue.equals).toHaveBeenCalledWith('pending');
            (0, globals_1.expect)(mockDb.syncQueue.orderBy).toHaveBeenCalledWith('priority');
            (0, globals_1.expect)(mockDb.syncQueue.reverse).toHaveBeenCalled();
            (0, globals_1.expect)(mockDb.syncQueue.limit).toHaveBeenCalledWith(100);
        });
        (0, globals_1.it)('应该正确更新操作状态', async () => {
            const mockResults = [
                { operationId: 'op-1', success: true },
                { operationId: 'op-2', success: false, error: 'Network error' }
            ];
            const mockDb = require('@/services/database').db;
            mockDb.syncQueue.update.mockResolvedValue(1);
            await local_operation_1.localOperationService.updateOperationStatuses(mockResults);
            (0, globals_1.expect)(mockDb.syncQueue.transaction).toHaveBeenCalledWith('rw', [mockDb.syncQueue], globals_1.expect.any(Function));
            // 验证更新调用
            (0, globals_1.expect)(mockDb.syncQueue.update).toHaveBeenCalledTimes(2);
            (0, globals_1.expect)(mockDb.syncQueue.update).toHaveBeenCalledWith('op-1', {
                status: 'completed'
            });
            (0, globals_1.expect)(mockDb.syncQueue.update).toHaveBeenCalledWith('op-2', {
                status: 'failed',
                lastError: 'Network error'
            });
        });
    });
    (0, globals_1.describe)('异步同步机制验证', () => {
        (0, globals_1.it)('应该正确处理本地同步队列', async () => {
            const mockOperations = [
                {
                    id: 'op-1',
                    type: 'create',
                    table: 'cards',
                    data: { frontContent: 'Q1', backContent: 'A1' },
                    localId: 'card-1',
                    timestamp: Date.now(),
                    retryCount: 0,
                    status: 'pending',
                    localVersion: 1,
                    priority: 'normal',
                    dependencies: [],
                    networkInfo: { isOnline: true, connectionType: 'wifi', bandwidth: 'high' }
                }
            ];
            // 模拟LocalOperationService方法
            globals_1.jest.spyOn(local_operation_1.localOperationService, 'getPendingSyncOperations')
                .mockResolvedValue(mockOperations);
            globals_1.jest.spyOn(local_operation_1.localOperationService, 'updateOperationStatuses')
                .mockResolvedValue();
            // 设置UnifiedSyncService为在线状态
            Object.defineProperty(unified_sync_service_1.unifiedSyncService, 'isOnline', { value: true });
            Object.defineProperty(unified_sync_service_1.unifiedSyncService, 'syncInProgress', { value: false });
            // 访问私有方法进行测试
            const processLocalSyncQueue = unified_sync_service_1.unifiedSyncService.processLocalSyncQueue.bind(unified_sync_service_1.unifiedSyncService);
            await processLocalSyncQueue();
            // 验证调用
            (0, globals_1.expect)(local_operation_1.localOperationService.getPendingSyncOperations).toHaveBeenCalled();
            (0, globals_1.expect)(local_operation_1.localOperationService.updateOperationStatuses).toHaveBeenCalled();
        });
        (0, globals_1.it)('应该在离线时跳过同步处理', async () => {
            // 设置UnifiedSyncService为离线状态
            Object.defineProperty(unified_sync_service_1.unifiedSyncService, 'isOnline', { value: false });
            // 访问私有方法进行测试
            const processLocalSyncQueue = unified_sync_service_1.unifiedSyncService.processLocalSyncQueue.bind(unified_sync_service_1.unifiedSyncService);
            await processLocalSyncQueue();
            // 验证没有调用LocalOperationService
            (0, globals_1.expect)(local_operation_1.localOperationService.getPendingSyncOperations).not.toHaveBeenCalled();
            (0, globals_1.expect)(local_operation_1.localOperationService.updateOperationStatuses).not.toHaveBeenCalled();
        });
    });
    (0, globals_1.describe)('网络状态处理验证', () => {
        (0, globals_1.it)('应该正确响应网络状态变化', async () => {
            // 模拟网络在线
            Object.defineProperty(navigator, 'onLine', { value: true, writable: true });
            // 触发网络事件
            const onlineEvent = new Event('online');
            window.dispatchEvent(onlineEvent);
            // 验证UnifiedSyncService能够检测到网络状态
            (0, globals_1.expect)(navigator.onLine).toBe(true);
        });
        (0, globals_1.it)('应该在同步进行中时避免重复处理', async () => {
            // 设置UnifiedSyncService为同步进行中状态
            Object.defineProperty(unified_sync_service_1.unifiedSyncService, 'isOnline', { value: true });
            Object.defineProperty(unified_sync_service_1.unifiedSyncService, 'syncInProgress', { value: true });
            // 尝试触发本地同步处理
            await unified_sync_service_1.unifiedSyncService.triggerLocalSyncProcessing();
            // 验证没有调用LocalOperationService
            (0, globals_1.expect)(local_operation_1.localOperationService.getPendingSyncOperations).not.toHaveBeenCalled();
        });
    });
    (0, globals_1.describe)('错误处理验证', () => {
        (0, globals_1.it)('应该正确处理获取待处理操作的错误', async () => {
            const mockDb = require('@/services/database').db;
            mockDb.syncQueue.toArray.mockRejectedValue(new Error('Database error'));
            const result = await local_operation_1.localOperationService.getPendingSyncOperations();
            (0, globals_1.expect)(result).toEqual([]);
            (0, globals_1.expect)(console.error).toHaveBeenCalledWith('Failed to get pending sync operations:', globals_1.expect.any(Error));
        });
        (0, globals_1.it)('应该正确处理更新操作状态的错误', async () => {
            const mockResults = [
                { operationId: 'op-1', success: true }
            ];
            const mockDb = require('@/services/database').db;
            mockDb.syncQueue.transaction.mockRejectedValue(new Error('Transaction error'));
            await local_operation_1.localOperationService.updateOperationStatuses(mockResults);
            (0, globals_1.expect)(console.error).toHaveBeenCalledWith('Failed to update operation statuses:', globals_1.expect.any(Error));
        });
    });
    (0, globals_1.describe)('性能和内存管理验证', () => {
        (0, globals_1.it)('应该限制获取的待处理操作数量', async () => {
            const mockOperations = Array.from({ length: 150 }, (_, i) => ({
                id: `op-${i}`,
                type: 'create',
                table: 'cards',
                data: { frontContent: `Q${i}`, backContent: `A${i}` },
                localId: `card-${i}`,
                timestamp: Date.now(),
                retryCount: 0,
                status: 'pending',
                localVersion: 1,
                priority: 'normal',
                dependencies: [],
                networkInfo: { isOnline: true, connectionType: 'wifi', bandwidth: 'high' }
            }));
            const mockDb = require('@/services/database').db;
            mockDb.syncQueue.toArray.mockResolvedValue(mockOperations);
            const result = await local_operation_1.localOperationService.getPendingSyncOperations();
            // 验证限制为100个操作
            (0, globals_1.expect)(mockDb.syncQueue.limit).toHaveBeenCalledWith(100);
        });
        (0, globals_1.it)('应该按优先级排序待处理操作', async () => {
            const mockDb = require('@/services/database').db;
            mockDb.syncQueue.toArray.mockResolvedValue([]);
            await local_operation_1.localOperationService.getPendingSyncOperations();
            // 验证按优先级排序（降序）
            (0, globals_1.expect)(mockDb.syncQueue.orderBy).toHaveBeenCalledWith('priority');
            (0, globals_1.expect)(mockDb.syncQueue.reverse).toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
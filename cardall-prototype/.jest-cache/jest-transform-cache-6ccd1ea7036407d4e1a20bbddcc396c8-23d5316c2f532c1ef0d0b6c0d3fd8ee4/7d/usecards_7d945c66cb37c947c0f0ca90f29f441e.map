{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\hooks\\use-cards.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\hooks\\use-cards.ts"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react'\r\nimport { Card, CardAction, CardFilter, ViewSettings } from '@/types/card'\r\n\r\n// Mock data for development\r\nconst mockCards: Card[] = [\r\n  {\r\n    id: '1',\r\n    frontContent: {\r\n      title: 'React Best Practices',\r\n      text: 'Key principles for writing maintainable React code including component composition, state management, and performance optimization.',\r\n      images: [],\r\n      tags: ['react', 'frontend', 'best-practices'],\r\n      lastModified: new Date()\r\n    },\r\n    backContent: {\r\n      title: 'Implementation Details',\r\n      text: 'Use functional components with hooks, implement proper error boundaries, optimize with React.memo and useMemo for expensive calculations.',\r\n      images: [],\r\n      tags: ['react', 'frontend', 'best-practices'],\r\n      lastModified: new Date()\r\n    },\r\n    style: {\r\n      type: 'solid',\r\n      backgroundColor: '#f8fafc',\r\n      fontFamily: 'system-ui',\r\n      fontSize: 'base',\r\n      fontWeight: 'normal',\r\n      textColor: '#1f2937',\r\n      borderRadius: 'xl',\r\n      shadow: 'md',\r\n      borderWidth: 0\r\n    },\r\n    isFlipped: false,\r\n    createdAt: new Date('2024-01-15'),\r\n    updatedAt: new Date('2024-01-15')\r\n  },\r\n  {\r\n    id: '2',\r\n    frontContent: {\r\n      title: 'TypeScript Tips',\r\n      text: 'Advanced TypeScript patterns for better type safety and developer experience in large applications.',\r\n      images: [],\r\n      tags: ['typescript', 'types', 'development'],\r\n      lastModified: new Date()\r\n    },\r\n    backContent: {\r\n      title: 'Advanced Patterns',\r\n      text: 'Utility types, conditional types, mapped types, and template literal types for complex type transformations.',\r\n      images: [],\r\n      tags: ['typescript', 'types', 'development'],\r\n      lastModified: new Date()\r\n    },\r\n    style: {\r\n      type: 'gradient',\r\n      gradientColors: ['#667eea', '#764ba2'],\r\n      gradientDirection: 'to-br',\r\n      fontFamily: 'system-ui',\r\n      fontSize: 'base',\r\n      fontWeight: 'medium',\r\n      textColor: '#ffffff',\r\n      borderRadius: 'xl',\r\n      shadow: 'lg',\r\n      borderWidth: 0\r\n    },\r\n    isFlipped: false,\r\n    createdAt: new Date('2024-01-16'),\r\n    updatedAt: new Date('2024-01-16')\r\n  }\r\n]\r\n\r\nexport function useCards() {\r\n  const [cards, setCards] = useState<Card[]>(mockCards)\r\n  const [filter, setFilter] = useState<CardFilter>({\r\n    searchTerm: '',\r\n    tags: []\r\n  })\r\n  const [viewSettings, setViewSettings] = useState<ViewSettings>({\r\n    layout: 'grid',\r\n    cardSize: 'medium',\r\n    showTags: true,\r\n    showDates: false,\r\n    sortBy: 'updated',\r\n    sortOrder: 'desc'\r\n  })\r\n  const [selectedCardIds, setSelectedCardIds] = useState<string[]>([])\r\n\r\n  // Filter and sort cards\r\n  const filteredCards = useCallback(() => {\r\n    let filtered = cards.filter(card => {\r\n      // Search term filter\r\n      if (filter.searchTerm) {\r\n        const searchLower = filter.searchTerm.toLowerCase()\r\n        const matchesTitle = card.frontContent.title.toLowerCase().includes(searchLower) ||\r\n                           card.backContent.title.toLowerCase().includes(searchLower)\r\n        const matchesText = card.frontContent.text.toLowerCase().includes(searchLower) ||\r\n                          card.backContent.text.toLowerCase().includes(searchLower)\r\n        const matchesTags = [...card.frontContent.tags, ...card.backContent.tags]\r\n                          .some(tag => tag.toLowerCase().includes(searchLower))\r\n        \r\n        if (!matchesTitle && !matchesText && !matchesTags) return false\r\n      }\r\n\r\n      // Tags filter\r\n      if (filter.tags.length > 0) {\r\n        const cardTags = [...card.frontContent.tags, ...card.backContent.tags]\r\n        if (!filter.tags.some(tag => cardTags.includes(tag))) return false\r\n      }\r\n\r\n      // Folder filter\r\n      if (filter.folderId && card.folderId !== filter.folderId) return false\r\n\r\n      // Date range filter\r\n      if (filter.dateRange) {\r\n        const cardDate = new Date(card.updatedAt)\r\n        if (cardDate < filter.dateRange.start || cardDate > filter.dateRange.end) return false\r\n      }\r\n\r\n      // Style type filter\r\n      if (filter.styleType && card.style.type !== filter.styleType) return false\r\n\r\n      // Has images filter\r\n      if (filter.hasImages !== undefined) {\r\n        const hasImages = card.frontContent.images.length > 0 || card.backContent.images.length > 0\r\n        if (hasImages !== filter.hasImages) return false\r\n      }\r\n\r\n      return true\r\n    })\r\n\r\n    // Sort cards\r\n    filtered.sort((a, b) => {\r\n      let comparison = 0\r\n      \r\n      switch (viewSettings.sortBy) {\r\n        case 'created':\r\n          comparison = new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\r\n          break\r\n        case 'updated':\r\n          comparison = new Date(a.updatedAt).getTime() - new Date(b.updatedAt).getTime()\r\n          break\r\n        case 'title':\r\n          comparison = a.frontContent.title.localeCompare(b.frontContent.title)\r\n          break\r\n        default:\r\n          comparison = 0\r\n      }\r\n\r\n      return viewSettings.sortOrder === 'desc' ? -comparison : comparison\r\n    })\r\n\r\n    return filtered\r\n  }, [cards, filter, viewSettings])\r\n\r\n  // Card actions\r\n  const dispatch = useCallback((action: CardAction) => {\r\n    setCards(prevCards => {\r\n      switch (action.type) {\r\n        case 'CREATE_CARD':\r\n          const newCard: Card = {\r\n            ...action.payload,\r\n            id: Date.now().toString(),\r\n            createdAt: new Date(),\r\n            updatedAt: new Date()\r\n          }\r\n          return [...prevCards, newCard]\r\n\r\n        case 'UPDATE_CARD':\r\n          return prevCards.map(card =>\r\n            card.id === action.payload.id\r\n              ? { ...card, ...action.payload.updates, updatedAt: new Date() }\r\n              : card\r\n          )\r\n\r\n        case 'DELETE_CARD':\r\n          return prevCards.filter(card => card.id !== action.payload)\r\n\r\n        case 'FLIP_CARD':\r\n          return prevCards.map(card =>\r\n            card.id === action.payload\r\n              ? { ...card, isFlipped: !card.isFlipped, updatedAt: new Date() }\r\n              : card\r\n          )\r\n\r\n        case 'SELECT_CARD':\r\n          setSelectedCardIds(prev => \r\n            prev.includes(action.payload) \r\n              ? prev.filter(id => id !== action.payload)\r\n              : [...prev, action.payload]\r\n          )\r\n          return prevCards\r\n\r\n        case 'DESELECT_ALL':\r\n          setSelectedCardIds([])\r\n          return prevCards\r\n\r\n        case 'DUPLICATE_CARD':\r\n          const cardToDuplicate = prevCards.find(card => card.id === action.payload)\r\n          if (!cardToDuplicate) return prevCards\r\n          \r\n          const duplicatedCard: Card = {\r\n            ...cardToDuplicate,\r\n            id: Date.now().toString(),\r\n            createdAt: new Date(),\r\n            updatedAt: new Date()\r\n          }\r\n          return [...prevCards, duplicatedCard]\r\n\r\n        case 'MOVE_TO_FOLDER':\r\n          return prevCards.map(card =>\r\n            card.id === action.payload.cardId\r\n              ? { ...card, folderId: action.payload.folderId, updatedAt: new Date() }\r\n              : card\r\n          )\r\n\r\n        default:\r\n          return prevCards\r\n      }\r\n    })\r\n  }, [])\r\n\r\n  // Utility functions\r\n  const getCardById = useCallback((id: string) => {\r\n    return cards.find(card => card.id === id)\r\n  }, [cards])\r\n\r\n  const getSelectedCards = useCallback(() => {\r\n    return cards.filter(card => selectedCardIds.includes(card.id))\r\n  }, [cards, selectedCardIds])\r\n\r\n  const getAllTags = useCallback(() => {\r\n    const tagSet = new Set<string>()\r\n    cards.forEach(card => {\r\n      card.frontContent.tags.forEach(tag => tagSet.add(tag))\r\n      card.backContent.tags.forEach(tag => tagSet.add(tag))\r\n    })\r\n    return Array.from(tagSet).sort()\r\n  }, [cards])\r\n\r\n  // Update tags across all cards (for rename/delete operations)\r\n  const updateTagsInAllCards = useCallback((oldTagName: string, newTagName?: string) => {\r\n    setCards(prevCards => {\r\n      return prevCards.map(card => {\r\n        const updateTags = (tags: string[]) => {\r\n          if (newTagName) {\r\n            // Rename tag\r\n            return tags.map(tag => tag === oldTagName ? newTagName : tag)\r\n          } else {\r\n            // Delete tag\r\n            return tags.filter(tag => tag !== oldTagName)\r\n          }\r\n        }\r\n\r\n        const frontTags = updateTags(card.frontContent.tags)\r\n        const backTags = updateTags(card.backContent.tags)\r\n\r\n        // Only update if tags actually changed\r\n        if (\r\n          JSON.stringify(frontTags) !== JSON.stringify(card.frontContent.tags) ||\r\n          JSON.stringify(backTags) !== JSON.stringify(card.backContent.tags)\r\n        ) {\r\n          return {\r\n            ...card,\r\n            frontContent: {\r\n              ...card.frontContent,\r\n              tags: frontTags,\r\n              lastModified: new Date()\r\n            },\r\n            backContent: {\r\n              ...card.backContent,\r\n              tags: backTags,\r\n              lastModified: new Date()\r\n            },\r\n            updatedAt: new Date()\r\n          }\r\n        }\r\n\r\n        return card\r\n      })\r\n    })\r\n  }, [])\r\n\r\n  // Get cards that use a specific tag\r\n  const getCardsWithTag = useCallback((tagName: string) => {\r\n    return cards.filter(card => \r\n      card.frontContent.tags.includes(tagName) || \r\n      card.backContent.tags.includes(tagName)\r\n    )\r\n  }, [cards])\r\n\r\n  // Auto-save to localStorage\r\n  useEffect(() => {\r\n    const saveTimer = setTimeout(() => {\r\n      localStorage.setItem('cardall-cards', JSON.stringify(cards))\r\n    }, 1000)\r\n\r\n    return () => clearTimeout(saveTimer)\r\n  }, [cards])\r\n\r\n  // Load from localStorage on mount\r\n  useEffect(() => {\r\n    const saved = localStorage.getItem('cardall-cards')\r\n    if (saved) {\r\n      try {\r\n        const parsedCards = JSON.parse(saved)\r\n        setCards(parsedCards)\r\n      } catch (error) {\r\n        console.error('Failed to load saved cards:', error)\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  return {\r\n    cards: filteredCards(),\r\n    allCards: cards,\r\n    filter,\r\n    setFilter,\r\n    viewSettings,\r\n    setViewSettings,\r\n    selectedCardIds,\r\n    dispatch,\r\n    getCardById,\r\n    getSelectedCards,\r\n    getAllTags,\r\n    updateTagsInAllCards,\r\n    getCardsWithTag\r\n  }\r\n}"],"version":3}
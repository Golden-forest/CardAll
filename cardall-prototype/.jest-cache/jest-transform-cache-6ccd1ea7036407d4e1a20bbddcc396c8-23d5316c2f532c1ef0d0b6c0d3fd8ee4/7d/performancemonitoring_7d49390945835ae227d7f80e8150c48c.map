{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\performance-monitoring.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\performance-monitoring.ts"],"sourcesContent":["/**\r\n * 性能监控和报告系统\r\n * \r\n * 提供全面的数据库性能监控、指标收集和报告生成功能\r\n * \r\n * @author Database-Architect智能体\r\n * @version 3.0.0\r\n */\r\n\r\nimport { CardAllUnifiedDatabase } from './database-unified';\r\nimport { EnhancedQueryPerformanceService } from './query-performance-enhanced';\r\nimport { DataConsistencyService } from './data-consistency';\r\nimport { DbCard, DbFolder, DbTag, DbImage } from './database-unified';\r\n\r\n/**\r\n * 性能指标接口\r\n */\r\nexport interface PerformanceMetrics {\r\n  timestamp: number;\r\n  databaseSize: number;\r\n  cardCount: number;\r\n  folderCount: number;\r\n  tagCount: number;\r\n  imageCount: number;\r\n  averageQueryTime: number;\r\n  cacheHitRate: number;\r\n  memoryUsage: number;\r\n  syncStatus: 'synced' | 'syncing' | 'error' | 'offline';\r\n  consistencyScore: number;\r\n  errorCount: number;\r\n  warningCount: number;\r\n}\r\n\r\n/**\r\n * 性能趋势数据\r\n */\r\nexport interface PerformanceTrend {\r\n  metric: string;\r\n  values: number[];\r\n  timestamps: number[];\r\n  trend: 'improving' | 'stable' | 'declining';\r\n  changeRate: number;\r\n}\r\n\r\n/**\r\n * 性能报告接口\r\n */\r\nexport interface PerformanceReport {\r\n  reportId: string;\r\n  generatedAt: number;\r\n  reportPeriod: {\r\n    start: number;\r\n    end: number;\r\n  };\r\n  overallScore: number;\r\n  metrics: PerformanceMetrics;\r\n  trends: PerformanceTrend[];\r\n  recommendations: string[];\r\n  issues: {\r\n    critical: string[];\r\n    warning: string[];\r\n    info: string[];\r\n  };\r\n  optimizations: {\r\n    implemented: string[];\r\n    suggested: string[];\r\n  };\r\n  summary: {\r\n    healthStatus: 'excellent' | 'good' | 'fair' | 'poor';\r\n    keyFindings: string[];\r\n    nextSteps: string[];\r\n  };\r\n}\r\n\r\n/**\r\n * 监控配置接口\r\n */\r\nexport interface MonitoringConfig {\r\n  collectionInterval: number; // 收集间隔（毫秒）\r\n  maxHistorySize: number; // 最大历史记录数\r\n  alertThresholds: {\r\n    queryTime: number;\r\n    memoryUsage: number;\r\n    errorRate: number;\r\n    cacheHitRate: number;\r\n  };\r\n  autoGenerateReport: boolean;\r\n  reportInterval: number; // 报告生成间隔（毫秒）\r\n}\r\n\r\n/**\r\n * 数据库健康状态\r\n */\r\nexport type DatabaseHealthStatus = 'healthy' | 'warning' | 'critical' | 'unknown';\r\n\r\n/**\r\n * 性能监控服务类\r\n */\r\nexport class PerformanceMonitoringService {\r\n  private static instance: PerformanceMonitoringService;\r\n  private db: CardAllUnifiedDatabase;\r\n  private queryPerformance: EnhancedQueryPerformanceService;\r\n  private dataConsistency: DataConsistencyService;\r\n  private config: MonitoringConfig;\r\n  private metricsHistory: PerformanceMetrics[] = [];\r\n  private monitoringInterval: number | null = null;\r\n  private reportInterval: number | null = null;\r\n  private isMonitoring = false;\r\n\r\n  private constructor(\r\n    db: CardAllUnifiedDatabase,\r\n    queryPerformance: EnhancedQueryPerformanceService,\r\n    dataConsistency: DataConsistencyService,\r\n    config: Partial<MonitoringConfig> = {}\r\n  ) {\r\n    this.db = db;\r\n    this.queryPerformance = queryPerformance;\r\n    this.dataConsistency = dataConsistency;\r\n    this.config = {\r\n      collectionInterval: 5000, // 5秒\r\n      maxHistorySize: 1000,\r\n      alertThresholds: {\r\n        queryTime: 1000, // 1秒\r\n        memoryUsage: 100 * 1024 * 1024, // 100MB\r\n        errorRate: 0.05, // 5%\r\n        cacheHitRate: 0.7, // 70%\r\n      },\r\n      autoGenerateReport: true,\r\n      reportInterval: 24 * 60 * 60 * 1000, // 24小时\r\n      ...config,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 获取单例实例\r\n   */\r\n  public static getInstance(\r\n    db: CardAllUnifiedDatabase,\r\n    queryPerformance: EnhancedQueryPerformanceService,\r\n    dataConsistency: DataConsistencyService,\r\n    config?: Partial<MonitoringConfig>\r\n  ): PerformanceMonitoringService {\r\n    if (!PerformanceMonitoringService.instance) {\r\n      PerformanceMonitoringService.instance = new PerformanceMonitoringService(\r\n        db,\r\n        queryPerformance,\r\n        dataConsistency,\r\n        config\r\n      );\r\n    }\r\n    return PerformanceMonitoringService.instance;\r\n  }\r\n\r\n  /**\r\n   * 开始监控\r\n   */\r\n  public startMonitoring(): void {\r\n    if (this.isMonitoring) {\r\n      return;\r\n    }\r\n\r\n    this.isMonitoring = true;\r\n    this.collectMetrics(); // 立即收集一次\r\n\r\n    // 定期收集指标\r\n    this.monitoringInterval = window.setInterval(() => {\r\n      this.collectMetrics();\r\n    }, this.config.collectionInterval);\r\n\r\n    // 定期生成报告\r\n    if (this.config.autoGenerateReport) {\r\n      this.reportInterval = window.setInterval(() => {\r\n        this.generateReport().catch(console.error);\r\n      }, this.config.reportInterval);\r\n    }\r\n\r\n    console.log('性能监控已启动');\r\n  }\r\n\r\n  /**\r\n   * 停止监控\r\n   */\r\n  public stopMonitoring(): void {\r\n    if (!this.isMonitoring) {\r\n      return;\r\n    }\r\n\r\n    this.isMonitoring = false;\r\n\r\n    if (this.monitoringInterval) {\r\n      clearInterval(this.monitoringInterval);\r\n      this.monitoringInterval = null;\r\n    }\r\n\r\n    if (this.reportInterval) {\r\n      clearInterval(this.reportInterval);\r\n      this.reportInterval = null;\r\n    }\r\n\r\n    console.log('性能监控已停止');\r\n  }\r\n\r\n  /**\r\n   * 收集性能指标\r\n   */\r\n  private async collectMetrics(): Promise<void> {\r\n    try {\r\n      const metrics: PerformanceMetrics = {\r\n        timestamp: Date.now(),\r\n        databaseSize: await this.getDatabaseSize(),\r\n        cardCount: await this.db.cards.count(),\r\n        folderCount: await this.db.folders.count(),\r\n        tagCount: await this.db.tags.count(),\r\n        imageCount: await this.db.images.count(),\r\n        averageQueryTime: await this.getAverageQueryTime(),\r\n        cacheHitRate: await this.getCacheHitRate(),\r\n        memoryUsage: this.getMemoryUsage(),\r\n        syncStatus: await this.getSyncStatus(),\r\n        consistencyScore: await this.getConsistencyScore(),\r\n        errorCount: await this.getErrorCount(),\r\n        warningCount: await this.getWarningCount(),\r\n      };\r\n\r\n      this.metricsHistory.push(metrics);\r\n\r\n      // 限制历史记录大小\r\n      if (this.metricsHistory.length > this.config.maxHistorySize) {\r\n        this.metricsHistory = this.metricsHistory.slice(-this.config.maxHistorySize);\r\n      }\r\n\r\n      // 检查告警条件\r\n      this.checkAlerts(metrics);\r\n\r\n      console.log('性能指标已更新:', metrics);\r\n    } catch (error) {\r\n      console.error('收集性能指标失败:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取数据库大小\r\n   */\r\n  private async getDatabaseSize(): Promise<number> {\r\n    try {\r\n      if ('storage' in navigator && 'estimate' in navigator.storage) {\r\n        const estimate = await navigator.storage.estimate();\r\n        return estimate.usage || 0;\r\n      }\r\n    } catch (error) {\r\n      console.warn('无法获取数据库大小:', error);\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * 获取平均查询时间\r\n   */\r\n  private async getAverageQueryTime(): Promise<number> {\r\n    try {\r\n      const stats = this.queryPerformance.getPerformanceStats();\r\n      return stats.averageQueryTime;\r\n    } catch (error) {\r\n      console.warn('无法获取平均查询时间:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取缓存命中率\r\n   */\r\n  private async getCacheHitRate(): Promise<number> {\r\n    try {\r\n      const stats = this.queryPerformance.getPerformanceStats();\r\n      return stats.cacheHitRate;\r\n    } catch (error) {\r\n      console.warn('无法获取缓存命中率:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取内存使用量\r\n   */\r\n  private getMemoryUsage(): number {\r\n    try {\r\n      if ('memory' in performance) {\r\n        const memory = (performance as any).memory;\r\n        return memory.usedJSHeapSize;\r\n      }\r\n    } catch (error) {\r\n      console.warn('无法获取内存使用量:', error);\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * 获取同步状态\r\n   */\r\n  private async getSyncStatus(): Promise<'synced' | 'syncing' | 'error' | 'offline'> {\r\n    try {\r\n      // 这里应该从同步服务获取状态\r\n      // 暂时返回默认值\r\n      return 'synced';\r\n    } catch (error) {\r\n      console.warn('无法获取同步状态:', error);\r\n      return 'error';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取一致性分数\r\n   */\r\n  private async getConsistencyScore(): Promise<number> {\r\n    try {\r\n      const report = await this.dataConsistency.runQuickCheck();\r\n      return report.overallScore;\r\n    } catch (error) {\r\n      console.warn('无法获取一致性分数:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取错误计数\r\n   */\r\n  private async getErrorCount(): Promise<number> {\r\n    try {\r\n      const stats = this.queryPerformance.getPerformanceStats();\r\n      return stats.errorCount;\r\n    } catch (error) {\r\n      console.warn('无法获取错误计数:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取警告计数\r\n   */\r\n  private async getWarningCount(): Promise<number> {\r\n    try {\r\n      const stats = this.queryPerformance.getPerformanceStats();\r\n      return stats.warningCount;\r\n    } catch (error) {\r\n      console.warn('无法获取警告计数:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查告警条件\r\n   */\r\n  private checkAlerts(metrics: PerformanceMetrics): void {\r\n    const alerts: string[] = [];\r\n\r\n    if (metrics.averageQueryTime > this.config.alertThresholds.queryTime) {\r\n      alerts.push(`查询时间过长: ${metrics.averageQueryTime}ms`);\r\n    }\r\n\r\n    if (metrics.memoryUsage > this.config.alertThresholds.memoryUsage) {\r\n      alerts.push(`内存使用量过高: ${this.formatBytes(metrics.memoryUsage)}`);\r\n    }\r\n\r\n    if (metrics.cacheHitRate < this.config.alertThresholds.cacheHitRate) {\r\n      alerts.push(`缓存命中率过低: ${(metrics.cacheHitRate * 100).toFixed(1)}%`);\r\n    }\r\n\r\n    if (alerts.length > 0) {\r\n      console.warn('性能告警:', alerts);\r\n      // 这里可以添加通知逻辑\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 生成性能报告\r\n   */\r\n  public async generateReport(): Promise<PerformanceReport> {\r\n    const reportId = this.generateReportId();\r\n    const now = Date.now();\r\n    const period = this.getReportPeriod();\r\n\r\n    const metrics = this.getCurrentMetrics();\r\n    const trends = this.calculateTrends();\r\n    const recommendations = this.generateRecommendations(metrics, trends);\r\n    const issues = this.analyzeIssues(metrics);\r\n    const optimizations = this.getOptimizations();\r\n    const summary = this.generateSummary(metrics, trends);\r\n\r\n    const report: PerformanceReport = {\r\n      reportId,\r\n      generatedAt: now,\r\n      reportPeriod: period,\r\n      overallScore: this.calculateOverallScore(metrics),\r\n      metrics,\r\n      trends,\r\n      recommendations,\r\n      issues,\r\n      optimizations,\r\n      summary,\r\n    };\r\n\r\n    // 保存报告\r\n    await this.saveReport(report);\r\n\r\n    return report;\r\n  }\r\n\r\n  /**\r\n   * 生成报告ID\r\n   */\r\n  private generateReportId(): string {\r\n    return `perf_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * 获取报告周期\r\n   */\r\n  private getReportPeriod(): { start: number; end: number } {\r\n    const end = Date.now();\r\n    const start = end - this.config.reportInterval;\r\n    return { start, end };\r\n  }\r\n\r\n  /**\r\n   * 获取当前指标\r\n   */\r\n  private getCurrentMetrics(): PerformanceMetrics {\r\n    if (this.metricsHistory.length === 0) {\r\n      return this.getEmptyMetrics();\r\n    }\r\n    return this.metricsHistory[this.metricsHistory.length - 1];\r\n  }\r\n\r\n  /**\r\n   * 获取空指标\r\n   */\r\n  private getEmptyMetrics(): PerformanceMetrics {\r\n    return {\r\n      timestamp: Date.now(),\r\n      databaseSize: 0,\r\n      cardCount: 0,\r\n      folderCount: 0,\r\n      tagCount: 0,\r\n      imageCount: 0,\r\n      averageQueryTime: 0,\r\n      cacheHitRate: 0,\r\n      memoryUsage: 0,\r\n      syncStatus: 'unknown',\r\n      consistencyScore: 0,\r\n      errorCount: 0,\r\n      warningCount: 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 计算趋势\r\n   */\r\n  private calculateTrends(): PerformanceTrend[] {\r\n    if (this.metricsHistory.length < 2) {\r\n      return [];\r\n    }\r\n\r\n    const trends: PerformanceTrend[] = [];\r\n    const metrics = Object.keys(this.metricsHistory[0]).filter(key => \r\n      typeof this.metricsHistory[0][key as keyof PerformanceMetrics] === 'number'\r\n    ) as (keyof PerformanceMetrics)[];\r\n\r\n    for (const metric of metrics) {\r\n      if (metric === 'timestamp') continue;\r\n\r\n      const values = this.metricsHistory.map(m => m[metric] as number);\r\n      const timestamps = this.metricsHistory.map(m => m.timestamp);\r\n      const trend = this.calculateTrendDirection(values);\r\n      const changeRate = this.calculateChangeRate(values);\r\n\r\n      trends.push({\r\n        metric,\r\n        values,\r\n        timestamps,\r\n        trend,\r\n        changeRate,\r\n      });\r\n    }\r\n\r\n    return trends;\r\n  }\r\n\r\n  /**\r\n   * 计算趋势方向\r\n   */\r\n  private calculateTrendDirection(values: number[]): 'improving' | 'stable' | 'declining' {\r\n    if (values.length < 2) return 'stable';\r\n\r\n    const recent = values.slice(-Math.min(5, values.length));\r\n    const change = recent[recent.length - 1] - recent[0];\r\n\r\n    if (Math.abs(change) < 0.01) return 'stable';\r\n    return change > 0 ? 'improving' : 'declining';\r\n  }\r\n\r\n  /**\r\n   * 计算变化率\r\n   */\r\n  private calculateChangeRate(values: number[]): number {\r\n    if (values.length < 2) return 0;\r\n\r\n    const recent = values.slice(-Math.min(5, values.length));\r\n    const change = recent[recent.length - 1] - recent[0];\r\n    const baseline = recent[0] || 1;\r\n\r\n    return change / baseline;\r\n  }\r\n\r\n  /**\r\n   * 生成建议\r\n   */\r\n  private generateRecommendations(metrics: PerformanceMetrics, trends: PerformanceTrend[]): string[] {\r\n    const recommendations: string[] = [];\r\n\r\n    // 基于当前指标的建议\r\n    if (metrics.averageQueryTime > 500) {\r\n      recommendations.push('考虑优化查询或增加索引以提高查询性能');\r\n    }\r\n\r\n    if (metrics.cacheHitRate < 0.7) {\r\n      recommendations.push('调整缓存策略以提高缓存命中率');\r\n    }\r\n\r\n    if (metrics.memoryUsage > 50 * 1024 * 1024) {\r\n      recommendations.push('考虑清理不必要的数据或优化内存使用');\r\n    }\r\n\r\n    if (metrics.consistencyScore < 0.9) {\r\n      recommendations.push('运行数据一致性检查以修复潜在问题');\r\n    }\r\n\r\n    // 基于趋势的建议\r\n    const decliningTrends = trends.filter(t => t.trend === 'declining');\r\n    if (decliningTrends.length > 2) {\r\n      recommendations.push('检测到多项指标下降，建议进行全面的性能分析');\r\n    }\r\n\r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * 分析问题\r\n   */\r\n  private analyzeIssues(metrics: PerformanceMetrics): {\r\n    critical: string[];\r\n    warning: string[];\r\n    info: string[];\r\n  } {\r\n    const critical: string[] = [];\r\n    const warning: string[] = [];\r\n    const info: string[] = [];\r\n\r\n    // 关键问题\r\n    if (metrics.averageQueryTime > 2000) {\r\n      critical.push('查询性能严重下降');\r\n    }\r\n\r\n    if (metrics.consistencyScore < 0.5) {\r\n      critical.push('数据一致性严重受损');\r\n    }\r\n\r\n    // 警告\r\n    if (metrics.averageQueryTime > 1000) {\r\n      warning.push('查询性能下降');\r\n    }\r\n\r\n    if (metrics.cacheHitRate < 0.5) {\r\n      warning.push('缓存命中率过低');\r\n    }\r\n\r\n    if (metrics.errorCount > 10) {\r\n      warning.push('错误数量过多');\r\n    }\r\n\r\n    // 信息\r\n    if (metrics.databaseSize > 100 * 1024 * 1024) {\r\n      info.push('数据库大小较大，建议定期清理');\r\n    }\r\n\r\n    return { critical, warning, info };\r\n  }\r\n\r\n  /**\r\n   * 获取优化信息\r\n   */\r\n  private getOptimizations(): {\r\n    implemented: string[];\r\n    suggested: string[];\r\n  } {\r\n    return {\r\n      implemented: [\r\n        '统一数据库接口',\r\n        '查询性能优化',\r\n        '数据一致性验证',\r\n        '智能缓存策略',\r\n      ],\r\n      suggested: [\r\n        '数据库索引优化',\r\n        '批量操作优化',\r\n        '离线同步改进',\r\n        '内存管理优化',\r\n      ],\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 生成摘要\r\n   */\r\n  private generateSummary(metrics: PerformanceMetrics, trends: PerformanceTrend[]): {\r\n    healthStatus: 'excellent' | 'good' | 'fair' | 'poor';\r\n    keyFindings: string[];\r\n    nextSteps: string[];\r\n  } {\r\n    const score = this.calculateOverallScore(metrics);\r\n    let healthStatus: 'excellent' | 'good' | 'fair' | 'poor';\r\n\r\n    if (score >= 0.9) healthStatus = 'excellent';\r\n    else if (score >= 0.7) healthStatus = 'good';\r\n    else if (score >= 0.5) healthStatus = 'fair';\r\n    else healthStatus = 'poor';\r\n\r\n    const keyFindings: string[] = [];\r\n    const nextSteps: string[] = [];\r\n\r\n    // 关键发现\r\n    keyFindings.push(`当前性能得分: ${(score * 100).toFixed(1)}%`);\r\n    keyFindings.push(`平均查询时间: ${metrics.averageQueryTime.toFixed(2)}ms`);\r\n    keyFindings.push(`缓存命中率: ${(metrics.cacheHitRate * 100).toFixed(1)}%`);\r\n    keyFindings.push(`数据一致性得分: ${(metrics.consistencyScore * 100).toFixed(1)}%`);\r\n\r\n    // 下一步行动\r\n    if (healthStatus === 'poor') {\r\n      nextSteps.push('立即进行性能优化');\r\n      nextSteps.push('运行数据一致性检查');\r\n    } else if (healthStatus === 'fair') {\r\n      nextSteps.push('优化查询性能');\r\n      nextSteps.push('改进缓存策略');\r\n    } else if (healthStatus === 'good') {\r\n      nextSteps.push('继续监控性能指标');\r\n      nextSteps.push('定期进行优化');\r\n    } else {\r\n      nextSteps.push('维持当前性能水平');\r\n      nextSteps.push('定期检查系统健康状态');\r\n    }\r\n\r\n    return { healthStatus, keyFindings, nextSteps };\r\n  }\r\n\r\n  /**\r\n   * 计算总体得分\r\n   */\r\n  private calculateOverallScore(metrics: PerformanceMetrics): number {\r\n    const weights = {\r\n      queryTime: 0.25,\r\n      cacheHitRate: 0.2,\r\n      consistencyScore: 0.2,\r\n      memoryUsage: 0.15,\r\n      errorRate: 0.1,\r\n      syncStatus: 0.1,\r\n    };\r\n\r\n    let score = 0;\r\n\r\n    // 查询时间得分（越低越好）\r\n    const queryTimeScore = Math.max(0, 1 - metrics.averageQueryTime / 2000);\r\n    score += queryTimeScore * weights.queryTime;\r\n\r\n    // 缓存命中率得分\r\n    score += metrics.cacheHitRate * weights.cacheHitRate;\r\n\r\n    // 一致性得分\r\n    score += metrics.consistencyScore * weights.consistencyScore;\r\n\r\n    // 内存使用得分（越低越好）\r\n    const memoryScore = Math.max(0, 1 - metrics.memoryUsage / (200 * 1024 * 1024));\r\n    score += memoryScore * weights.memoryUsage;\r\n\r\n    // 错误率得分（越低越好）\r\n    const errorScore = Math.max(0, 1 - metrics.errorCount / 100);\r\n    score += errorScore * weights.errorRate;\r\n\r\n    // 同步状态得分\r\n    const syncScore = metrics.syncStatus === 'synced' ? 1 : 0.5;\r\n    score += syncScore * weights.syncStatus;\r\n\r\n    return Math.min(1, Math.max(0, score));\r\n  }\r\n\r\n  /**\r\n   * 保存报告\r\n   */\r\n  private async saveReport(report: PerformanceReport): Promise<void> {\r\n    try {\r\n      // 这里可以保存到IndexedDB或发送到服务器\r\n      console.log('性能报告已生成:', report.reportId);\r\n    } catch (error) {\r\n      console.error('保存性能报告失败:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取性能趋势\r\n   */\r\n  public getPerformanceTrends(metric?: keyof PerformanceMetrics): PerformanceTrend[] {\r\n    const allTrends = this.calculateTrends();\r\n    if (metric) {\r\n      return allTrends.filter(t => t.metric === metric);\r\n    }\r\n    return allTrends;\r\n  }\r\n\r\n  /**\r\n   * 获取当前健康状态\r\n   */\r\n  public getHealthStatus(): DatabaseHealthStatus {\r\n    const metrics = this.getCurrentMetrics();\r\n    const score = this.calculateOverallScore(metrics);\r\n\r\n    if (score >= 0.9) return 'healthy';\r\n    if (score >= 0.7) return 'healthy';\r\n    if (score >= 0.5) return 'warning';\r\n    return 'critical';\r\n  }\r\n\r\n  /**\r\n   * 获取性能统计\r\n   */\r\n  public getPerformanceStats(): {\r\n    currentMetrics: PerformanceMetrics;\r\n    healthStatus: DatabaseHealthStatus;\r\n    trends: PerformanceTrend[];\r\n    alerts: string[];\r\n  } {\r\n    const currentMetrics = this.getCurrentMetrics();\r\n    const healthStatus = this.getHealthStatus();\r\n    const trends = this.getPerformanceTrends();\r\n    const alerts = this.generateAlerts(currentMetrics);\r\n\r\n    return {\r\n      currentMetrics,\r\n      healthStatus,\r\n      trends,\r\n      alerts,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 生成告警\r\n   */\r\n  private generateAlerts(metrics: PerformanceMetrics): string[] {\r\n    const alerts: string[] = [];\r\n\r\n    if (metrics.averageQueryTime > this.config.alertThresholds.queryTime) {\r\n      alerts.push(`查询时间超过阈值: ${metrics.averageQueryTime}ms`);\r\n    }\r\n\r\n    if (metrics.memoryUsage > this.config.alertThresholds.memoryUsage) {\r\n      alerts.push(`内存使用超过阈值: ${this.formatBytes(metrics.memoryUsage)}`);\r\n    }\r\n\r\n    if (metrics.cacheHitRate < this.config.alertThresholds.cacheHitRate) {\r\n      alerts.push(`缓存命中率低于阈值: ${(metrics.cacheHitRate * 100).toFixed(1)}%`);\r\n    }\r\n\r\n    return alerts;\r\n  }\r\n\r\n  /**\r\n   * 格式化字节数\r\n   */\r\n  private formatBytes(bytes: number): string {\r\n    if (bytes === 0) return '0 Bytes';\r\n    const k = 1024;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n  }\r\n\r\n  /**\r\n   * 获取历史指标\r\n   */\r\n  public getMetricsHistory(limit?: number): PerformanceMetrics[] {\r\n    if (limit) {\r\n      return this.metricsHistory.slice(-limit);\r\n    }\r\n    return [...this.metricsHistory];\r\n  }\r\n\r\n  /**\r\n   * 清理历史数据\r\n   */\r\n  public clearHistory(): void {\r\n    this.metricsHistory = [];\r\n    console.log('性能历史数据已清理');\r\n  }\r\n\r\n  /**\r\n   * 导出性能数据\r\n   */\r\n  public exportPerformanceData(): string {\r\n    const data = {\r\n      config: this.config,\r\n      metrics: this.metricsHistory,\r\n      exportTime: Date.now(),\r\n      version: '3.0.0',\r\n    };\r\n\r\n    return JSON.stringify(data, null, 2);\r\n  }\r\n\r\n  /**\r\n   * 更新配置\r\n   */\r\n  public updateConfig(newConfig: Partial<MonitoringConfig>): void {\r\n    this.config = { ...this.config, ...newConfig };\r\n    \r\n    // 如果正在监控，重启监控以应用新配置\r\n    if (this.isMonitoring) {\r\n      this.stopMonitoring();\r\n      this.startMonitoring();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 销毁实例\r\n   */\r\n  public destroy(): void {\r\n    this.stopMonitoring();\r\n    this.clearHistory();\r\n    PerformanceMonitoringService.instance = null as any;\r\n  }\r\n}\r\n\r\n// 导出工具函数\r\nexport const createPerformanceMonitoring = (\r\n  db: CardAllUnifiedDatabase,\r\n  queryPerformance: EnhancedQueryPerformanceService,\r\n  dataConsistency: DataConsistencyService,\r\n  config?: Partial<MonitoringConfig>\r\n): PerformanceMonitoringService => {\r\n  return PerformanceMonitoringService.getInstance(db, queryPerformance, dataConsistency, config);\r\n};\r\n\r\nexport default PerformanceMonitoringService;"],"version":3}
8ad77ec709a3395a398c1614e6616ece
"use strict";
/**
 * 性能监控和报告系统
 *
 * 提供全面的数据库性能监控、指标收集和报告生成功能
 *
 * @author Database-Architect智能体
 * @version 3.0.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPerformanceMonitoring = exports.PerformanceMonitoringService = void 0;
/**
 * 性能监控服务类
 */
class PerformanceMonitoringService {
    constructor(db, queryPerformance, dataConsistency, config = {}) {
        Object.defineProperty(this, "db", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "queryPerformance", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "dataConsistency", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "config", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "metricsHistory", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "monitoringInterval", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "reportInterval", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "isMonitoring", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        this.db = db;
        this.queryPerformance = queryPerformance;
        this.dataConsistency = dataConsistency;
        this.config = {
            collectionInterval: 5000, // 5秒
            maxHistorySize: 1000,
            alertThresholds: {
                queryTime: 1000, // 1秒
                memoryUsage: 100 * 1024 * 1024, // 100MB
                errorRate: 0.05, // 5%
                cacheHitRate: 0.7, // 70%
            },
            autoGenerateReport: true,
            reportInterval: 24 * 60 * 60 * 1000, // 24小时
            ...config,
        };
    }
    /**
     * 获取单例实例
     */
    static getInstance(db, queryPerformance, dataConsistency, config) {
        if (!PerformanceMonitoringService.instance) {
            PerformanceMonitoringService.instance = new PerformanceMonitoringService(db, queryPerformance, dataConsistency, config);
        }
        return PerformanceMonitoringService.instance;
    }
    /**
     * 开始监控
     */
    startMonitoring() {
        if (this.isMonitoring) {
            return;
        }
        this.isMonitoring = true;
        this.collectMetrics(); // 立即收集一次
        // 定期收集指标
        this.monitoringInterval = window.setInterval(() => {
            this.collectMetrics();
        }, this.config.collectionInterval);
        // 定期生成报告
        if (this.config.autoGenerateReport) {
            this.reportInterval = window.setInterval(() => {
                this.generateReport().catch(console.error);
            }, this.config.reportInterval);
        }
        console.log('性能监控已启动');
    }
    /**
     * 停止监控
     */
    stopMonitoring() {
        if (!this.isMonitoring) {
            return;
        }
        this.isMonitoring = false;
        if (this.monitoringInterval) {
            clearInterval(this.monitoringInterval);
            this.monitoringInterval = null;
        }
        if (this.reportInterval) {
            clearInterval(this.reportInterval);
            this.reportInterval = null;
        }
        console.log('性能监控已停止');
    }
    /**
     * 收集性能指标
     */
    async collectMetrics() {
        try {
            const metrics = {
                timestamp: Date.now(),
                databaseSize: await this.getDatabaseSize(),
                cardCount: await this.db.cards.count(),
                folderCount: await this.db.folders.count(),
                tagCount: await this.db.tags.count(),
                imageCount: await this.db.images.count(),
                averageQueryTime: await this.getAverageQueryTime(),
                cacheHitRate: await this.getCacheHitRate(),
                memoryUsage: this.getMemoryUsage(),
                syncStatus: await this.getSyncStatus(),
                consistencyScore: await this.getConsistencyScore(),
                errorCount: await this.getErrorCount(),
                warningCount: await this.getWarningCount(),
            };
            this.metricsHistory.push(metrics);
            // 限制历史记录大小
            if (this.metricsHistory.length > this.config.maxHistorySize) {
                this.metricsHistory = this.metricsHistory.slice(-this.config.maxHistorySize);
            }
            // 检查告警条件
            this.checkAlerts(metrics);
            console.log('性能指标已更新:', metrics);
        }
        catch (error) {
            console.error('收集性能指标失败:', error);
        }
    }
    /**
     * 获取数据库大小
     */
    async getDatabaseSize() {
        try {
            if ('storage' in navigator && 'estimate' in navigator.storage) {
                const estimate = await navigator.storage.estimate();
                return estimate.usage || 0;
            }
        }
        catch (error) {
            console.warn('无法获取数据库大小:', error);
        }
        return 0;
    }
    /**
     * 获取平均查询时间
     */
    async getAverageQueryTime() {
        try {
            const stats = this.queryPerformance.getPerformanceStats();
            return stats.averageQueryTime;
        }
        catch (error) {
            console.warn('无法获取平均查询时间:', error);
            return 0;
        }
    }
    /**
     * 获取缓存命中率
     */
    async getCacheHitRate() {
        try {
            const stats = this.queryPerformance.getPerformanceStats();
            return stats.cacheHitRate;
        }
        catch (error) {
            console.warn('无法获取缓存命中率:', error);
            return 0;
        }
    }
    /**
     * 获取内存使用量
     */
    getMemoryUsage() {
        try {
            if ('memory' in performance) {
                const memory = performance.memory;
                return memory.usedJSHeapSize;
            }
        }
        catch (error) {
            console.warn('无法获取内存使用量:', error);
        }
        return 0;
    }
    /**
     * 获取同步状态
     */
    async getSyncStatus() {
        try {
            // 这里应该从同步服务获取状态
            // 暂时返回默认值
            return 'synced';
        }
        catch (error) {
            console.warn('无法获取同步状态:', error);
            return 'error';
        }
    }
    /**
     * 获取一致性分数
     */
    async getConsistencyScore() {
        try {
            const report = await this.dataConsistency.runQuickCheck();
            return report.overallScore;
        }
        catch (error) {
            console.warn('无法获取一致性分数:', error);
            return 0;
        }
    }
    /**
     * 获取错误计数
     */
    async getErrorCount() {
        try {
            const stats = this.queryPerformance.getPerformanceStats();
            return stats.errorCount;
        }
        catch (error) {
            console.warn('无法获取错误计数:', error);
            return 0;
        }
    }
    /**
     * 获取警告计数
     */
    async getWarningCount() {
        try {
            const stats = this.queryPerformance.getPerformanceStats();
            return stats.warningCount;
        }
        catch (error) {
            console.warn('无法获取警告计数:', error);
            return 0;
        }
    }
    /**
     * 检查告警条件
     */
    checkAlerts(metrics) {
        const alerts = [];
        if (metrics.averageQueryTime > this.config.alertThresholds.queryTime) {
            alerts.push(`查询时间过长: ${metrics.averageQueryTime}ms`);
        }
        if (metrics.memoryUsage > this.config.alertThresholds.memoryUsage) {
            alerts.push(`内存使用量过高: ${this.formatBytes(metrics.memoryUsage)}`);
        }
        if (metrics.cacheHitRate < this.config.alertThresholds.cacheHitRate) {
            alerts.push(`缓存命中率过低: ${(metrics.cacheHitRate * 100).toFixed(1)}%`);
        }
        if (alerts.length > 0) {
            console.warn('性能告警:', alerts);
            // 这里可以添加通知逻辑
        }
    }
    /**
     * 生成性能报告
     */
    async generateReport() {
        const reportId = this.generateReportId();
        const now = Date.now();
        const period = this.getReportPeriod();
        const metrics = this.getCurrentMetrics();
        const trends = this.calculateTrends();
        const recommendations = this.generateRecommendations(metrics, trends);
        const issues = this.analyzeIssues(metrics);
        const optimizations = this.getOptimizations();
        const summary = this.generateSummary(metrics, trends);
        const report = {
            reportId,
            generatedAt: now,
            reportPeriod: period,
            overallScore: this.calculateOverallScore(metrics),
            metrics,
            trends,
            recommendations,
            issues,
            optimizations,
            summary,
        };
        // 保存报告
        await this.saveReport(report);
        return report;
    }
    /**
     * 生成报告ID
     */
    generateReportId() {
        return `perf_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    /**
     * 获取报告周期
     */
    getReportPeriod() {
        const end = Date.now();
        const start = end - this.config.reportInterval;
        return { start, end };
    }
    /**
     * 获取当前指标
     */
    getCurrentMetrics() {
        if (this.metricsHistory.length === 0) {
            return this.getEmptyMetrics();
        }
        return this.metricsHistory[this.metricsHistory.length - 1];
    }
    /**
     * 获取空指标
     */
    getEmptyMetrics() {
        return {
            timestamp: Date.now(),
            databaseSize: 0,
            cardCount: 0,
            folderCount: 0,
            tagCount: 0,
            imageCount: 0,
            averageQueryTime: 0,
            cacheHitRate: 0,
            memoryUsage: 0,
            syncStatus: 'unknown',
            consistencyScore: 0,
            errorCount: 0,
            warningCount: 0,
        };
    }
    /**
     * 计算趋势
     */
    calculateTrends() {
        if (this.metricsHistory.length < 2) {
            return [];
        }
        const trends = [];
        const metrics = Object.keys(this.metricsHistory[0]).filter(key => typeof this.metricsHistory[0][key] === 'number');
        for (const metric of metrics) {
            if (metric === 'timestamp')
                continue;
            const values = this.metricsHistory.map(m => m[metric]);
            const timestamps = this.metricsHistory.map(m => m.timestamp);
            const trend = this.calculateTrendDirection(values);
            const changeRate = this.calculateChangeRate(values);
            trends.push({
                metric,
                values,
                timestamps,
                trend,
                changeRate,
            });
        }
        return trends;
    }
    /**
     * 计算趋势方向
     */
    calculateTrendDirection(values) {
        if (values.length < 2)
            return 'stable';
        const recent = values.slice(-Math.min(5, values.length));
        const change = recent[recent.length - 1] - recent[0];
        if (Math.abs(change) < 0.01)
            return 'stable';
        return change > 0 ? 'improving' : 'declining';
    }
    /**
     * 计算变化率
     */
    calculateChangeRate(values) {
        if (values.length < 2)
            return 0;
        const recent = values.slice(-Math.min(5, values.length));
        const change = recent[recent.length - 1] - recent[0];
        const baseline = recent[0] || 1;
        return change / baseline;
    }
    /**
     * 生成建议
     */
    generateRecommendations(metrics, trends) {
        const recommendations = [];
        // 基于当前指标的建议
        if (metrics.averageQueryTime > 500) {
            recommendations.push('考虑优化查询或增加索引以提高查询性能');
        }
        if (metrics.cacheHitRate < 0.7) {
            recommendations.push('调整缓存策略以提高缓存命中率');
        }
        if (metrics.memoryUsage > 50 * 1024 * 1024) {
            recommendations.push('考虑清理不必要的数据或优化内存使用');
        }
        if (metrics.consistencyScore < 0.9) {
            recommendations.push('运行数据一致性检查以修复潜在问题');
        }
        // 基于趋势的建议
        const decliningTrends = trends.filter(t => t.trend === 'declining');
        if (decliningTrends.length > 2) {
            recommendations.push('检测到多项指标下降，建议进行全面的性能分析');
        }
        return recommendations;
    }
    /**
     * 分析问题
     */
    analyzeIssues(metrics) {
        const critical = [];
        const warning = [];
        const info = [];
        // 关键问题
        if (metrics.averageQueryTime > 2000) {
            critical.push('查询性能严重下降');
        }
        if (metrics.consistencyScore < 0.5) {
            critical.push('数据一致性严重受损');
        }
        // 警告
        if (metrics.averageQueryTime > 1000) {
            warning.push('查询性能下降');
        }
        if (metrics.cacheHitRate < 0.5) {
            warning.push('缓存命中率过低');
        }
        if (metrics.errorCount > 10) {
            warning.push('错误数量过多');
        }
        // 信息
        if (metrics.databaseSize > 100 * 1024 * 1024) {
            info.push('数据库大小较大，建议定期清理');
        }
        return { critical, warning, info };
    }
    /**
     * 获取优化信息
     */
    getOptimizations() {
        return {
            implemented: [
                '统一数据库接口',
                '查询性能优化',
                '数据一致性验证',
                '智能缓存策略',
            ],
            suggested: [
                '数据库索引优化',
                '批量操作优化',
                '离线同步改进',
                '内存管理优化',
            ],
        };
    }
    /**
     * 生成摘要
     */
    generateSummary(metrics, trends) {
        const score = this.calculateOverallScore(metrics);
        let healthStatus;
        if (score >= 0.9)
            healthStatus = 'excellent';
        else if (score >= 0.7)
            healthStatus = 'good';
        else if (score >= 0.5)
            healthStatus = 'fair';
        else
            healthStatus = 'poor';
        const keyFindings = [];
        const nextSteps = [];
        // 关键发现
        keyFindings.push(`当前性能得分: ${(score * 100).toFixed(1)}%`);
        keyFindings.push(`平均查询时间: ${metrics.averageQueryTime.toFixed(2)}ms`);
        keyFindings.push(`缓存命中率: ${(metrics.cacheHitRate * 100).toFixed(1)}%`);
        keyFindings.push(`数据一致性得分: ${(metrics.consistencyScore * 100).toFixed(1)}%`);
        // 下一步行动
        if (healthStatus === 'poor') {
            nextSteps.push('立即进行性能优化');
            nextSteps.push('运行数据一致性检查');
        }
        else if (healthStatus === 'fair') {
            nextSteps.push('优化查询性能');
            nextSteps.push('改进缓存策略');
        }
        else if (healthStatus === 'good') {
            nextSteps.push('继续监控性能指标');
            nextSteps.push('定期进行优化');
        }
        else {
            nextSteps.push('维持当前性能水平');
            nextSteps.push('定期检查系统健康状态');
        }
        return { healthStatus, keyFindings, nextSteps };
    }
    /**
     * 计算总体得分
     */
    calculateOverallScore(metrics) {
        const weights = {
            queryTime: 0.25,
            cacheHitRate: 0.2,
            consistencyScore: 0.2,
            memoryUsage: 0.15,
            errorRate: 0.1,
            syncStatus: 0.1,
        };
        let score = 0;
        // 查询时间得分（越低越好）
        const queryTimeScore = Math.max(0, 1 - metrics.averageQueryTime / 2000);
        score += queryTimeScore * weights.queryTime;
        // 缓存命中率得分
        score += metrics.cacheHitRate * weights.cacheHitRate;
        // 一致性得分
        score += metrics.consistencyScore * weights.consistencyScore;
        // 内存使用得分（越低越好）
        const memoryScore = Math.max(0, 1 - metrics.memoryUsage / (200 * 1024 * 1024));
        score += memoryScore * weights.memoryUsage;
        // 错误率得分（越低越好）
        const errorScore = Math.max(0, 1 - metrics.errorCount / 100);
        score += errorScore * weights.errorRate;
        // 同步状态得分
        const syncScore = metrics.syncStatus === 'synced' ? 1 : 0.5;
        score += syncScore * weights.syncStatus;
        return Math.min(1, Math.max(0, score));
    }
    /**
     * 保存报告
     */
    async saveReport(report) {
        try {
            // 这里可以保存到IndexedDB或发送到服务器
            console.log('性能报告已生成:', report.reportId);
        }
        catch (error) {
            console.error('保存性能报告失败:', error);
        }
    }
    /**
     * 获取性能趋势
     */
    getPerformanceTrends(metric) {
        const allTrends = this.calculateTrends();
        if (metric) {
            return allTrends.filter(t => t.metric === metric);
        }
        return allTrends;
    }
    /**
     * 获取当前健康状态
     */
    getHealthStatus() {
        const metrics = this.getCurrentMetrics();
        const score = this.calculateOverallScore(metrics);
        if (score >= 0.9)
            return 'healthy';
        if (score >= 0.7)
            return 'healthy';
        if (score >= 0.5)
            return 'warning';
        return 'critical';
    }
    /**
     * 获取性能统计
     */
    getPerformanceStats() {
        const currentMetrics = this.getCurrentMetrics();
        const healthStatus = this.getHealthStatus();
        const trends = this.getPerformanceTrends();
        const alerts = this.generateAlerts(currentMetrics);
        return {
            currentMetrics,
            healthStatus,
            trends,
            alerts,
        };
    }
    /**
     * 生成告警
     */
    generateAlerts(metrics) {
        const alerts = [];
        if (metrics.averageQueryTime > this.config.alertThresholds.queryTime) {
            alerts.push(`查询时间超过阈值: ${metrics.averageQueryTime}ms`);
        }
        if (metrics.memoryUsage > this.config.alertThresholds.memoryUsage) {
            alerts.push(`内存使用超过阈值: ${this.formatBytes(metrics.memoryUsage)}`);
        }
        if (metrics.cacheHitRate < this.config.alertThresholds.cacheHitRate) {
            alerts.push(`缓存命中率低于阈值: ${(metrics.cacheHitRate * 100).toFixed(1)}%`);
        }
        return alerts;
    }
    /**
     * 格式化字节数
     */
    formatBytes(bytes) {
        if (bytes === 0)
            return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    /**
     * 获取历史指标
     */
    getMetricsHistory(limit) {
        if (limit) {
            return this.metricsHistory.slice(-limit);
        }
        return [...this.metricsHistory];
    }
    /**
     * 清理历史数据
     */
    clearHistory() {
        this.metricsHistory = [];
        console.log('性能历史数据已清理');
    }
    /**
     * 导出性能数据
     */
    exportPerformanceData() {
        const data = {
            config: this.config,
            metrics: this.metricsHistory,
            exportTime: Date.now(),
            version: '3.0.0',
        };
        return JSON.stringify(data, null, 2);
    }
    /**
     * 更新配置
     */
    updateConfig(newConfig) {
        this.config = { ...this.config, ...newConfig };
        // 如果正在监控，重启监控以应用新配置
        if (this.isMonitoring) {
            this.stopMonitoring();
            this.startMonitoring();
        }
    }
    /**
     * 销毁实例
     */
    destroy() {
        this.stopMonitoring();
        this.clearHistory();
        PerformanceMonitoringService.instance = null;
    }
}
exports.PerformanceMonitoringService = PerformanceMonitoringService;
// 导出工具函数
const createPerformanceMonitoring = (db, queryPerformance, dataConsistency, config) => {
    return PerformanceMonitoringService.getInstance(db, queryPerformance, dataConsistency, config);
};
exports.createPerformanceMonitoring = createPerformanceMonitoring;
exports.default = PerformanceMonitoringService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXHNyY1xcc2VydmljZXNcXHBlcmZvcm1hbmNlLW1vbml0b3JpbmcudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7O0dBT0c7OztBQXdGSDs7R0FFRztBQUNILE1BQWEsNEJBQTRCO0lBV3ZDLFlBQ0UsRUFBMEIsRUFDMUIsZ0JBQWlELEVBQ2pELGVBQXVDLEVBQ3ZDLFNBQW9DLEVBQUU7UUFiaEM7Ozs7O1dBQTJCO1FBQzNCOzs7OztXQUFrRDtRQUNsRDs7Ozs7V0FBd0M7UUFDeEM7Ozs7O1dBQXlCO1FBQ3pCOzs7O21CQUF1QyxFQUFFO1dBQUM7UUFDMUM7Ozs7bUJBQW9DLElBQUk7V0FBQztRQUN6Qzs7OzttQkFBZ0MsSUFBSTtXQUFDO1FBQ3JDOzs7O21CQUFlLEtBQUs7V0FBQztRQVEzQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztRQUN6QyxJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztRQUN2QyxJQUFJLENBQUMsTUFBTSxHQUFHO1lBQ1osa0JBQWtCLEVBQUUsSUFBSSxFQUFFLEtBQUs7WUFDL0IsY0FBYyxFQUFFLElBQUk7WUFDcEIsZUFBZSxFQUFFO2dCQUNmLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSztnQkFDdEIsV0FBVyxFQUFFLEdBQUcsR0FBRyxJQUFJLEdBQUcsSUFBSSxFQUFFLFFBQVE7Z0JBQ3hDLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSztnQkFDdEIsWUFBWSxFQUFFLEdBQUcsRUFBRSxNQUFNO2FBQzFCO1lBQ0Qsa0JBQWtCLEVBQUUsSUFBSTtZQUN4QixjQUFjLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxFQUFFLE9BQU87WUFDNUMsR0FBRyxNQUFNO1NBQ1YsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxXQUFXLENBQ3ZC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TSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ25CLE9BQU8sRUFBRSxJQUFJLENBQUMsY0FBYztZQUM1QixVQUFVLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUN0QixPQUFPLEVBQUUsT0FBTztTQUNqQixDQUFDO1FBRUYsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVEOztPQUVHO0lBQ0ksWUFBWSxDQUFDLFNBQW9DO1FBQ3RELElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxTQUFTLEVBQUUsQ0FBQztRQUUvQyxvQkFBb0I7UUFDcEIsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDdEIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3RCLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN6QixDQUFDO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0ksT0FBTztRQUNaLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN0QixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDcEIsNEJBQTRCLENBQUMsUUFBUSxHQUFHLElBQVcsQ0FBQztJQUN0RCxDQUFDO0NBQ0Y7QUFqdUJELG9FQWl1QkM7QUFFRCxTQUFTO0FBQ0YsTUFBTSwyQkFBMkIsR0FBRyxDQUN6QyxFQUEwQixFQUMxQixnQkFBaUQsRUFDakQsZUFBdUMsRUFDdkMsTUFBa0MsRUFDSixFQUFFO0lBQ2hDLE9BQU8sNEJBQTRCLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxnQkFBZ0IsRUFBRSxlQUFlLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDakcsQ0FBQyxDQUFDO0FBUFcsUUFBQSwyQkFBMkIsK0JBT3RDO0FBRUYsa0JBQWUsNEJBQTRCLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXHNyY1xcc2VydmljZXNcXHBlcmZvcm1hbmNlLW1vbml0b3JpbmcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIOaAp+iDveebkeaOp+WSjOaKpeWRiuezu+e7n1xyXG4gKiBcclxuICog5o+Q5L6b5YWo6Z2i55qE5pWw5o2u5bqT5oCn6IO955uR5o6n44CB5oyH5qCH5pS26ZuG5ZKM5oql5ZGK55Sf5oiQ5Yqf6IO9XHJcbiAqIFxyXG4gKiBAYXV0aG9yIERhdGFiYXNlLUFyY2hpdGVjdOaZuuiDveS9k1xyXG4gKiBAdmVyc2lvbiAzLjAuMFxyXG4gKi9cclxuXHJcbmltcG9ydCB7IENhcmRBbGxVbmlmaWVkRGF0YWJhc2UgfSBmcm9tICcuL2RhdGFiYXNlLXVuaWZpZWQnO1xyXG5pbXBvcnQgeyBFbmhhbmNlZFF1ZXJ5UGVyZm9ybWFuY2VTZXJ2aWNlIH0gZnJvbSAnLi9xdWVyeS1wZXJmb3JtYW5jZS1lbmhhbmNlZCc7XHJcbmltcG9ydCB7IERhdGFDb25zaXN0ZW5jeVNlcnZpY2UgfSBmcm9tICcuL2RhdGEtY29uc2lzdGVuY3knO1xyXG5pbXBvcnQgeyBEYkNhcmQsIERiRm9sZGVyLCBEYlRhZywgRGJJbWFnZSB9IGZyb20gJy4vZGF0YWJhc2UtdW5pZmllZCc7XHJcblxyXG4vKipcclxuICog5oCn6IO95oyH5qCH5o6l5Y+jXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFBlcmZvcm1hbmNlTWV0cmljcyB7XHJcbiAgdGltZXN0YW1wOiBudW1iZXI7XHJcbiAgZGF0YWJhc2VTaXplOiBudW1iZXI7XHJcbiAgY2FyZENvdW50OiBudW1iZXI7XHJcbiAgZm9sZGVyQ291bnQ6IG51bWJlcjtcclxuICB0YWdDb3VudDogbnVtYmVyO1xyXG4gIGltYWdlQ291bnQ6IG51bWJlcjtcclxuICBhdmVyYWdlUXVlcnlUaW1lOiBudW1iZXI7XHJcbiAgY2FjaGVIaXRSYXRlOiBudW1iZXI7XHJcbiAgbWVtb3J5VXNhZ2U6IG51bWJlcjtcclxuICBzeW5jU3RhdHVzOiAnc3luY2VkJyB8ICdzeW5jaW5nJyB8ICdlcnJvcicgfCAnb2ZmbGluZSc7XHJcbiAgY29uc2lzdGVuY3lTY29yZTogbnVtYmVyO1xyXG4gIGVycm9yQ291bnQ6IG51bWJlcjtcclxuICB3YXJuaW5nQ291bnQ6IG51bWJlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIOaAp+iDvei2i+WKv+aVsOaNrlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBQZXJmb3JtYW5jZVRyZW5kIHtcclxuICBtZXRyaWM6IHN0cmluZztcclxuICB2YWx1ZXM6IG51bWJlcltdO1xyXG4gIHRpbWVzdGFtcHM6IG51bWJlcltdO1xyXG4gIHRyZW5kOiAnaW1wcm92aW5nJyB8ICdzdGFibGUnIHwgJ2RlY2xpbmluZyc7XHJcbiAgY2hhbmdlUmF0ZTogbnVtYmVyO1xyXG59XHJcblxyXG4vKipcclxuICog5oCn6IO95oql5ZGK5o6l5Y+jXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFBlcmZvcm1hbmNlUmVwb3J0IHtcclxuICByZXBvcnRJZDogc3RyaW5nO1xyXG4gIGdlbmVyYXRlZEF0OiBudW1iZXI7XHJcbiAgcmVwb3J0UGVyaW9kOiB7XHJcbiAgICBzdGFydDogbnVtYmVyO1xyXG4gICAgZW5kOiBudW1iZXI7XHJcbiAgfTtcclxuICBvdmVyYWxsU2NvcmU6IG51bWJlcjtcclxuICBtZXRyaWNzOiBQZXJmb3JtYW5jZU1ldHJpY3M7XHJcbiAgdHJlbmRzOiBQZXJmb3JtYW5jZVRyZW5kW107XHJcbiAgcmVjb21tZW5kYXRpb25zOiBzdHJpbmdbXTtcclxuICBpc3N1ZXM6IHtcclxuICAgIGNyaXRpY2FsOiBzdHJpbmdbXTtcclxuICAgIHdhcm5pbmc6IHN0cmluZ1tdO1xyXG4gICAgaW5mbzogc3RyaW5nW107XHJcbiAgfTtcclxuICBvcHRpbWl6YXRpb25zOiB7XHJcbiAgICBpbXBsZW1lbnRlZDogc3RyaW5nW107XHJcbiAgICBzdWdnZXN0ZWQ6IHN0cmluZ1tdO1xyXG4gIH07XHJcbiAgc3VtbWFyeToge1xyXG4gICAgaGVhbHRoU3RhdHVzOiAnZXhjZWxsZW50JyB8ICdnb29kJyB8ICdmYWlyJyB8ICdwb29yJztcclxuICAgIGtleUZpbmRpbmdzOiBzdHJpbmdbXTtcclxuICAgIG5leHRTdGVwczogc3RyaW5nW107XHJcbiAgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIOebkeaOp+mFjee9ruaOpeWPo1xyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBNb25pdG9yaW5nQ29uZmlnIHtcclxuICBjb2xsZWN0aW9uSW50ZXJ2YWw6IG51bWJlcjsgLy8g5pS26ZuG6Ze06ZqU77yI5q+r56eS77yJXHJcbiAgbWF4SGlzdG9yeVNpemU6IG51bWJlcjsgLy8g5pyA5aSn5Y6G5Y+y6K6w5b2V5pWwXHJcbiAgYWxlcnRUaHJlc2hvbGRzOiB7XHJcbiAgICBxdWVyeVRpbWU6IG51bWJlcjtcclxuICAgIG1lbW9yeVVzYWdlOiBudW1iZXI7XHJcbiAgICBlcnJvclJhdGU6IG51bWJlcjtcclxuICAgIGNhY2hlSGl0UmF0ZTogbnVtYmVyO1xyXG4gIH07XHJcbiAgYXV0b0dlbmVyYXRlUmVwb3J0OiBib29sZWFuO1xyXG4gIHJlcG9ydEludGVydmFsOiBudW1iZXI7IC8vIOaKpeWRiueUn+aIkOmXtOmalO+8iOavq+enku+8iVxyXG59XHJcblxyXG4vKipcclxuICog5pWw5o2u5bqT5YGl5bq354q25oCBXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBEYXRhYmFzZUhlYWx0aFN0YXR1cyA9ICdoZWFsdGh5JyB8ICd3YXJuaW5nJyB8ICdjcml0aWNhbCcgfCAndW5rbm93bic7XHJcblxyXG4vKipcclxuICog5oCn6IO955uR5o6n5pyN5Yqh57G7XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUGVyZm9ybWFuY2VNb25pdG9yaW5nU2VydmljZSB7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IFBlcmZvcm1hbmNlTW9uaXRvcmluZ1NlcnZpY2U7XHJcbiAgcHJpdmF0ZSBkYjogQ2FyZEFsbFVuaWZpZWREYXRhYmFzZTtcclxuICBwcml2YXRlIHF1ZXJ5UGVyZm9ybWFuY2U6IEVuaGFuY2VkUXVlcnlQZXJmb3JtYW5jZVNlcnZpY2U7XHJcbiAgcHJpdmF0ZSBkYXRhQ29uc2lzdGVuY3k6IERhdGFDb25zaXN0ZW5jeVNlcnZpY2U7XHJcbiAgcHJpdmF0ZSBjb25maWc6IE1vbml0b3JpbmdDb25maWc7XHJcbiAgcHJpdmF0ZSBtZXRyaWNzSGlzdG9yeTogUGVyZm9ybWFuY2VNZXRyaWNzW10gPSBbXTtcclxuICBwcml2YXRlIG1vbml0b3JpbmdJbnRlcnZhbDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XHJcbiAgcHJpdmF0ZSByZXBvcnRJbnRlcnZhbDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XHJcbiAgcHJpdmF0ZSBpc01vbml0b3JpbmcgPSBmYWxzZTtcclxuXHJcbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihcclxuICAgIGRiOiBDYXJkQWxsVW5pZmllZERhdGFiYXNlLFxyXG4gICAgcXVlcnlQZXJmb3JtYW5jZTogRW5oYW5jZWRRdWVyeVBlcmZvcm1hbmNlU2VydmljZSxcclxuICAgIGRhdGFDb25zaXN0ZW5jeTogRGF0YUNvbnNpc3RlbmN5U2VydmljZSxcclxuICAgIGNvbmZpZzogUGFydGlhbDxNb25pdG9yaW5nQ29uZmlnPiA9IHt9XHJcbiAgKSB7XHJcbiAgICB0aGlzLmRiID0gZGI7XHJcbiAgICB0aGlzLnF1ZXJ5UGVyZm9ybWFuY2UgPSBxdWVyeVBlcmZvcm1hbmNlO1xyXG4gICAgdGhpcy5kYXRhQ29uc2lzdGVuY3kgPSBkYXRhQ29uc2lzdGVuY3k7XHJcbiAgICB0aGlzLmNvbmZpZyA9IHtcclxuICAgICAgY29sbGVjdGlvbkludGVydmFsOiA1MDAwLCAvLyA156eSXHJcbiAgICAgIG1heEhpc3RvcnlTaXplOiAxMDAwLFxyXG4gICAgICBhbGVydFRocmVzaG9sZHM6IHtcclxuICAgICAgICBxdWVyeVRpbWU6IDEwMDAsIC8vIDHnp5JcclxuICAgICAgICBtZW1vcnlVc2FnZTogMTAwICogMTAyNCAqIDEwMjQsIC8vIDEwME1CXHJcbiAgICAgICAgZXJyb3JSYXRlOiAwLjA1LCAvLyA1JVxyXG4gICAgICAgIGNhY2hlSGl0UmF0ZTogMC43LCAvLyA3MCVcclxuICAgICAgfSxcclxuICAgICAgYXV0b0dlbmVyYXRlUmVwb3J0OiB0cnVlLFxyXG4gICAgICByZXBvcnRJbnRlcnZhbDogMjQgKiA2MCAqIDYwICogMTAwMCwgLy8gMjTlsI/ml7ZcclxuICAgICAgLi4uY29uZmlnLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluWNleS+i+WunuS+i1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoXHJcbiAgICBkYjogQ2FyZEFsbFVuaWZpZWREYXRhYmFzZSxcclxuICAgIHF1ZXJ5UGVyZm9ybWFuY2U6IEVuaGFuY2VkUXVlcnlQZXJmb3JtYW5jZVNlcnZpY2UsXHJcbiAgICBkYXRhQ29uc2lzdGVuY3k6IERhdGFDb25zaXN0ZW5jeVNlcnZpY2UsXHJcbiAgICBjb25maWc/OiBQYXJ0aWFsPE1vbml0b3JpbmdDb25maWc+XHJcbiAgKTogUGVyZm9ybWFuY2VNb25pdG9yaW5nU2VydmljZSB7XHJcbiAgICBpZiAoIVBlcmZvcm1hbmNlTW9uaXRvcmluZ1NlcnZpY2UuaW5zdGFuY2UpIHtcclxuICAgICAgUGVyZm9ybWFuY2VNb25pdG9yaW5nU2VydmljZS5pbnN0YW5jZSA9IG5ldyBQZXJmb3JtYW5jZU1vbml0b3JpbmdTZXJ2aWNlKFxyXG4gICAgICAgIGRiLFxyXG4gICAgICAgIHF1ZXJ5UGVyZm9ybWFuY2UsXHJcbiAgICAgICAgZGF0YUNvbnNpc3RlbmN5LFxyXG4gICAgICAgIGNvbmZpZ1xyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFBlcmZvcm1hbmNlTW9uaXRvcmluZ1NlcnZpY2UuaW5zdGFuY2U7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlvIDlp4vnm5HmjqdcclxuICAgKi9cclxuICBwdWJsaWMgc3RhcnRNb25pdG9yaW5nKCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuaXNNb25pdG9yaW5nKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmlzTW9uaXRvcmluZyA9IHRydWU7XHJcbiAgICB0aGlzLmNvbGxlY3RNZXRyaWNzKCk7IC8vIOeri+WNs+aUtumbhuS4gOasoVxyXG5cclxuICAgIC8vIOWumuacn+aUtumbhuaMh+agh1xyXG4gICAgdGhpcy5tb25pdG9yaW5nSW50ZXJ2YWwgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgICB0aGlzLmNvbGxlY3RNZXRyaWNzKCk7XHJcbiAgICB9LCB0aGlzLmNvbmZpZy5jb2xsZWN0aW9uSW50ZXJ2YWwpO1xyXG5cclxuICAgIC8vIOWumuacn+eUn+aIkOaKpeWRilxyXG4gICAgaWYgKHRoaXMuY29uZmlnLmF1dG9HZW5lcmF0ZVJlcG9ydCkge1xyXG4gICAgICB0aGlzLnJlcG9ydEludGVydmFsID0gd2luZG93LnNldEludGVydmFsKCgpID0+IHtcclxuICAgICAgICB0aGlzLmdlbmVyYXRlUmVwb3J0KCkuY2F0Y2goY29uc29sZS5lcnJvcik7XHJcbiAgICAgIH0sIHRoaXMuY29uZmlnLnJlcG9ydEludGVydmFsKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zb2xlLmxvZygn5oCn6IO955uR5o6n5bey5ZCv5YqoJyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlgZzmraLnm5HmjqdcclxuICAgKi9cclxuICBwdWJsaWMgc3RvcE1vbml0b3JpbmcoKTogdm9pZCB7XHJcbiAgICBpZiAoIXRoaXMuaXNNb25pdG9yaW5nKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmlzTW9uaXRvcmluZyA9IGZhbHNlO1xyXG5cclxuICAgIGlmICh0aGlzLm1vbml0b3JpbmdJbnRlcnZhbCkge1xyXG4gICAgICBjbGVhckludGVydmFsKHRoaXMubW9uaXRvcmluZ0ludGVydmFsKTtcclxuICAgICAgdGhpcy5tb25pdG9yaW5nSW50ZXJ2YWwgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLnJlcG9ydEludGVydmFsKSB7XHJcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5yZXBvcnRJbnRlcnZhbCk7XHJcbiAgICAgIHRoaXMucmVwb3J0SW50ZXJ2YWwgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnNvbGUubG9nKCfmgKfog73nm5Hmjqflt7LlgZzmraInKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaUtumbhuaAp+iDveaMh+agh1xyXG4gICAqL1xyXG4gIHByaXZhdGUgYXN5bmMgY29sbGVjdE1ldHJpY3MoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBtZXRyaWNzOiBQZXJmb3JtYW5jZU1ldHJpY3MgPSB7XHJcbiAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxyXG4gICAgICAgIGRhdGFiYXNlU2l6ZTogYXdhaXQgdGhpcy5nZXREYXRhYmFzZVNpemUoKSxcclxuICAgICAgICBjYXJkQ291bnQ6IGF3YWl0IHRoaXMuZGIuY2FyZHMuY291bnQoKSxcclxuICAgICAgICBmb2xkZXJDb3VudDogYXdhaXQgdGhpcy5kYi5mb2xkZXJzLmNvdW50KCksXHJcbiAgICAgICAgdGFnQ291bnQ6IGF3YWl0IHRoaXMuZGIudGFncy5jb3VudCgpLFxyXG4gICAgICAgIGltYWdlQ291bnQ6IGF3YWl0IHRoaXMuZGIuaW1hZ2VzLmNvdW50KCksXHJcbiAgICAgICAgYXZlcmFnZVF1ZXJ5VGltZTogYXdhaXQgdGhpcy5nZXRBdmVyYWdlUXVlcnlUaW1lKCksXHJcbiAgICAgICAgY2FjaGVIaXRSYXRlOiBhd2FpdCB0aGlzLmdldENhY2hlSGl0UmF0ZSgpLFxyXG4gICAgICAgIG1lbW9yeVVzYWdlOiB0aGlzLmdldE1lbW9yeVVzYWdlKCksXHJcbiAgICAgICAgc3luY1N0YXR1czogYXdhaXQgdGhpcy5nZXRTeW5jU3RhdHVzKCksXHJcbiAgICAgICAgY29uc2lzdGVuY3lTY29yZTogYXdhaXQgdGhpcy5nZXRDb25zaXN0ZW5jeVNjb3JlKCksXHJcbiAgICAgICAgZXJyb3JDb3VudDogYXdhaXQgdGhpcy5nZXRFcnJvckNvdW50KCksXHJcbiAgICAgICAgd2FybmluZ0NvdW50OiBhd2FpdCB0aGlzLmdldFdhcm5pbmdDb3VudCgpLFxyXG4gICAgICB9O1xyXG5cclxuICAgICAgdGhpcy5tZXRyaWNzSGlzdG9yeS5wdXNoKG1ldHJpY3MpO1xyXG5cclxuICAgICAgLy8g6ZmQ5Yi25Y6G5Y+y6K6w5b2V5aSn5bCPXHJcbiAgICAgIGlmICh0aGlzLm1ldHJpY3NIaXN0b3J5Lmxlbmd0aCA+IHRoaXMuY29uZmlnLm1heEhpc3RvcnlTaXplKSB7XHJcbiAgICAgICAgdGhpcy5tZXRyaWNzSGlzdG9yeSA9IHRoaXMubWV0cmljc0hpc3Rvcnkuc2xpY2UoLXRoaXMuY29uZmlnLm1heEhpc3RvcnlTaXplKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8g5qOA5p+l5ZGK6K2m5p2h5Lu2XHJcbiAgICAgIHRoaXMuY2hlY2tBbGVydHMobWV0cmljcyk7XHJcblxyXG4gICAgICBjb25zb2xlLmxvZygn5oCn6IO95oyH5qCH5bey5pu05pawOicsIG1ldHJpY3MpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcign5pS26ZuG5oCn6IO95oyH5qCH5aSx6LSlOicsIGVycm9yKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluaVsOaNruW6k+Wkp+Wwj1xyXG4gICAqL1xyXG4gIHByaXZhdGUgYXN5bmMgZ2V0RGF0YWJhc2VTaXplKCk6IFByb21pc2U8bnVtYmVyPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBpZiAoJ3N0b3JhZ2UnIGluIG5hdmlnYXRvciAmJiAnZXN0aW1hdGUnIGluIG5hdmlnYXRvci5zdG9yYWdlKSB7XHJcbiAgICAgICAgY29uc3QgZXN0aW1hdGUgPSBhd2FpdCBuYXZpZ2F0b3Iuc3RvcmFnZS5lc3RpbWF0ZSgpO1xyXG4gICAgICAgIHJldHVybiBlc3RpbWF0ZS51c2FnZSB8fCAwO1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLndhcm4oJ+aXoOazleiOt+WPluaVsOaNruW6k+Wkp+WwjzonLCBlcnJvcik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gMDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluW5s+Wdh+afpeivouaXtumXtFxyXG4gICAqL1xyXG4gIHByaXZhdGUgYXN5bmMgZ2V0QXZlcmFnZVF1ZXJ5VGltZSgpOiBQcm9taXNlPG51bWJlcj4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3Qgc3RhdHMgPSB0aGlzLnF1ZXJ5UGVyZm9ybWFuY2UuZ2V0UGVyZm9ybWFuY2VTdGF0cygpO1xyXG4gICAgICByZXR1cm4gc3RhdHMuYXZlcmFnZVF1ZXJ5VGltZTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUud2Fybign5peg5rOV6I635Y+W5bmz5Z2H5p+l6K+i5pe26Ze0OicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5bnvJPlrZjlkb3kuK3njodcclxuICAgKi9cclxuICBwcml2YXRlIGFzeW5jIGdldENhY2hlSGl0UmF0ZSgpOiBQcm9taXNlPG51bWJlcj4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3Qgc3RhdHMgPSB0aGlzLnF1ZXJ5UGVyZm9ybWFuY2UuZ2V0UGVyZm9ybWFuY2VTdGF0cygpO1xyXG4gICAgICByZXR1cm4gc3RhdHMuY2FjaGVIaXRSYXRlO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS53YXJuKCfml6Dms5Xojrflj5bnvJPlrZjlkb3kuK3njoc6JywgZXJyb3IpO1xyXG4gICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluWGheWtmOS9v+eUqOmHj1xyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0TWVtb3J5VXNhZ2UoKTogbnVtYmVyIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGlmICgnbWVtb3J5JyBpbiBwZXJmb3JtYW5jZSkge1xyXG4gICAgICAgIGNvbnN0IG1lbW9yeSA9IChwZXJmb3JtYW5jZSBhcyBhbnkpLm1lbW9yeTtcclxuICAgICAgICByZXR1cm4gbWVtb3J5LnVzZWRKU0hlYXBTaXplO1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLndhcm4oJ+aXoOazleiOt+WPluWGheWtmOS9v+eUqOmHjzonLCBlcnJvcik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gMDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluWQjOatpeeKtuaAgVxyXG4gICAqL1xyXG4gIHByaXZhdGUgYXN5bmMgZ2V0U3luY1N0YXR1cygpOiBQcm9taXNlPCdzeW5jZWQnIHwgJ3N5bmNpbmcnIHwgJ2Vycm9yJyB8ICdvZmZsaW5lJz4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgLy8g6L+Z6YeM5bqU6K+l5LuO5ZCM5q2l5pyN5Yqh6I635Y+W54q25oCBXHJcbiAgICAgIC8vIOaaguaXtui/lOWbnum7mOiupOWAvFxyXG4gICAgICByZXR1cm4gJ3N5bmNlZCc7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLndhcm4oJ+aXoOazleiOt+WPluWQjOatpeeKtuaAgTonLCBlcnJvcik7XHJcbiAgICAgIHJldHVybiAnZXJyb3InO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W5LiA6Ie05oCn5YiG5pWwXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBhc3luYyBnZXRDb25zaXN0ZW5jeVNjb3JlKCk6IFByb21pc2U8bnVtYmVyPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCByZXBvcnQgPSBhd2FpdCB0aGlzLmRhdGFDb25zaXN0ZW5jeS5ydW5RdWlja0NoZWNrKCk7XHJcbiAgICAgIHJldHVybiByZXBvcnQub3ZlcmFsbFNjb3JlO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS53YXJuKCfml6Dms5Xojrflj5bkuIDoh7TmgKfliIbmlbA6JywgZXJyb3IpO1xyXG4gICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPlumUmeivr+iuoeaVsFxyXG4gICAqL1xyXG4gIHByaXZhdGUgYXN5bmMgZ2V0RXJyb3JDb3VudCgpOiBQcm9taXNlPG51bWJlcj4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3Qgc3RhdHMgPSB0aGlzLnF1ZXJ5UGVyZm9ybWFuY2UuZ2V0UGVyZm9ybWFuY2VTdGF0cygpO1xyXG4gICAgICByZXR1cm4gc3RhdHMuZXJyb3JDb3VudDtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUud2Fybign5peg5rOV6I635Y+W6ZSZ6K+v6K6h5pWwOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5borablkYrorqHmlbBcclxuICAgKi9cclxuICBwcml2YXRlIGFzeW5jIGdldFdhcm5pbmdDb3VudCgpOiBQcm9taXNlPG51bWJlcj4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3Qgc3RhdHMgPSB0aGlzLnF1ZXJ5UGVyZm9ybWFuY2UuZ2V0UGVyZm9ybWFuY2VTdGF0cygpO1xyXG4gICAgICByZXR1cm4gc3RhdHMud2FybmluZ0NvdW50O1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS53YXJuKCfml6Dms5Xojrflj5borablkYrorqHmlbA6JywgZXJyb3IpO1xyXG4gICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOajgOafpeWRiuitpuadoeS7tlxyXG4gICAqL1xyXG4gIHByaXZhdGUgY2hlY2tBbGVydHMobWV0cmljczogUGVyZm9ybWFuY2VNZXRyaWNzKTogdm9pZCB7XHJcbiAgICBjb25zdCBhbGVydHM6IHN0cmluZ1tdID0gW107XHJcblxyXG4gICAgaWYgKG1ldHJpY3MuYXZlcmFnZVF1ZXJ5VGltZSA+IHRoaXMuY29uZmlnLmFsZXJ0VGhyZXNob2xkcy5xdWVyeVRpbWUpIHtcclxuICAgICAgYWxlcnRzLnB1c2goYOafpeivouaXtumXtOi/h+mVvzogJHttZXRyaWNzLmF2ZXJhZ2VRdWVyeVRpbWV9bXNgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobWV0cmljcy5tZW1vcnlVc2FnZSA+IHRoaXMuY29uZmlnLmFsZXJ0VGhyZXNob2xkcy5tZW1vcnlVc2FnZSkge1xyXG4gICAgICBhbGVydHMucHVzaChg5YaF5a2Y5L2/55So6YeP6L+H6auYOiAke3RoaXMuZm9ybWF0Qnl0ZXMobWV0cmljcy5tZW1vcnlVc2FnZSl9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG1ldHJpY3MuY2FjaGVIaXRSYXRlIDwgdGhpcy5jb25maWcuYWxlcnRUaHJlc2hvbGRzLmNhY2hlSGl0UmF0ZSkge1xyXG4gICAgICBhbGVydHMucHVzaChg57yT5a2Y5ZG95Lit546H6L+H5L2OOiAkeyhtZXRyaWNzLmNhY2hlSGl0UmF0ZSAqIDEwMCkudG9GaXhlZCgxKX0lYCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGFsZXJ0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGNvbnNvbGUud2Fybign5oCn6IO95ZGK6K2mOicsIGFsZXJ0cyk7XHJcbiAgICAgIC8vIOi/memHjOWPr+S7pea3u+WKoOmAmuefpemAu+i+kVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog55Sf5oiQ5oCn6IO95oql5ZGKXHJcbiAgICovXHJcbiAgcHVibGljIGFzeW5jIGdlbmVyYXRlUmVwb3J0KCk6IFByb21pc2U8UGVyZm9ybWFuY2VSZXBvcnQ+IHtcclxuICAgIGNvbnN0IHJlcG9ydElkID0gdGhpcy5nZW5lcmF0ZVJlcG9ydElkKCk7XHJcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xyXG4gICAgY29uc3QgcGVyaW9kID0gdGhpcy5nZXRSZXBvcnRQZXJpb2QoKTtcclxuXHJcbiAgICBjb25zdCBtZXRyaWNzID0gdGhpcy5nZXRDdXJyZW50TWV0cmljcygpO1xyXG4gICAgY29uc3QgdHJlbmRzID0gdGhpcy5jYWxjdWxhdGVUcmVuZHMoKTtcclxuICAgIGNvbnN0IHJlY29tbWVuZGF0aW9ucyA9IHRoaXMuZ2VuZXJhdGVSZWNvbW1lbmRhdGlvbnMobWV0cmljcywgdHJlbmRzKTtcclxuICAgIGNvbnN0IGlzc3VlcyA9IHRoaXMuYW5hbHl6ZUlzc3VlcyhtZXRyaWNzKTtcclxuICAgIGNvbnN0IG9wdGltaXphdGlvbnMgPSB0aGlzLmdldE9wdGltaXphdGlvbnMoKTtcclxuICAgIGNvbnN0IHN1bW1hcnkgPSB0aGlzLmdlbmVyYXRlU3VtbWFyeShtZXRyaWNzLCB0cmVuZHMpO1xyXG5cclxuICAgIGNvbnN0IHJlcG9ydDogUGVyZm9ybWFuY2VSZXBvcnQgPSB7XHJcbiAgICAgIHJlcG9ydElkLFxyXG4gICAgICBnZW5lcmF0ZWRBdDogbm93LFxyXG4gICAgICByZXBvcnRQZXJpb2Q6IHBlcmlvZCxcclxuICAgICAgb3ZlcmFsbFNjb3JlOiB0aGlzLmNhbGN1bGF0ZU92ZXJhbGxTY29yZShtZXRyaWNzKSxcclxuICAgICAgbWV0cmljcyxcclxuICAgICAgdHJlbmRzLFxyXG4gICAgICByZWNvbW1lbmRhdGlvbnMsXHJcbiAgICAgIGlzc3VlcyxcclxuICAgICAgb3B0aW1pemF0aW9ucyxcclxuICAgICAgc3VtbWFyeSxcclxuICAgIH07XHJcblxyXG4gICAgLy8g5L+d5a2Y5oql5ZGKXHJcbiAgICBhd2FpdCB0aGlzLnNhdmVSZXBvcnQocmVwb3J0KTtcclxuXHJcbiAgICByZXR1cm4gcmVwb3J0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog55Sf5oiQ5oql5ZGKSURcclxuICAgKi9cclxuICBwcml2YXRlIGdlbmVyYXRlUmVwb3J0SWQoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBgcGVyZl8ke0RhdGUubm93KCl9XyR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpfWA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5bmiqXlkYrlkajmnJ9cclxuICAgKi9cclxuICBwcml2YXRlIGdldFJlcG9ydFBlcmlvZCgpOiB7IHN0YXJ0OiBudW1iZXI7IGVuZDogbnVtYmVyIH0ge1xyXG4gICAgY29uc3QgZW5kID0gRGF0ZS5ub3coKTtcclxuICAgIGNvbnN0IHN0YXJ0ID0gZW5kIC0gdGhpcy5jb25maWcucmVwb3J0SW50ZXJ2YWw7XHJcbiAgICByZXR1cm4geyBzdGFydCwgZW5kIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5blvZPliY3mjIfmoIdcclxuICAgKi9cclxuICBwcml2YXRlIGdldEN1cnJlbnRNZXRyaWNzKCk6IFBlcmZvcm1hbmNlTWV0cmljcyB7XHJcbiAgICBpZiAodGhpcy5tZXRyaWNzSGlzdG9yeS5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuIHRoaXMuZ2V0RW1wdHlNZXRyaWNzKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5tZXRyaWNzSGlzdG9yeVt0aGlzLm1ldHJpY3NIaXN0b3J5Lmxlbmd0aCAtIDFdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W56m65oyH5qCHXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXRFbXB0eU1ldHJpY3MoKTogUGVyZm9ybWFuY2VNZXRyaWNzIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcclxuICAgICAgZGF0YWJhc2VTaXplOiAwLFxyXG4gICAgICBjYXJkQ291bnQ6IDAsXHJcbiAgICAgIGZvbGRlckNvdW50OiAwLFxyXG4gICAgICB0YWdDb3VudDogMCxcclxuICAgICAgaW1hZ2VDb3VudDogMCxcclxuICAgICAgYXZlcmFnZVF1ZXJ5VGltZTogMCxcclxuICAgICAgY2FjaGVIaXRSYXRlOiAwLFxyXG4gICAgICBtZW1vcnlVc2FnZTogMCxcclxuICAgICAgc3luY1N0YXR1czogJ3Vua25vd24nLFxyXG4gICAgICBjb25zaXN0ZW5jeVNjb3JlOiAwLFxyXG4gICAgICBlcnJvckNvdW50OiAwLFxyXG4gICAgICB3YXJuaW5nQ291bnQ6IDAsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6K6h566X6LaL5Yq/XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBjYWxjdWxhdGVUcmVuZHMoKTogUGVyZm9ybWFuY2VUcmVuZFtdIHtcclxuICAgIGlmICh0aGlzLm1ldHJpY3NIaXN0b3J5Lmxlbmd0aCA8IDIpIHtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHRyZW5kczogUGVyZm9ybWFuY2VUcmVuZFtdID0gW107XHJcbiAgICBjb25zdCBtZXRyaWNzID0gT2JqZWN0LmtleXModGhpcy5tZXRyaWNzSGlzdG9yeVswXSkuZmlsdGVyKGtleSA9PiBcclxuICAgICAgdHlwZW9mIHRoaXMubWV0cmljc0hpc3RvcnlbMF1ba2V5IGFzIGtleW9mIFBlcmZvcm1hbmNlTWV0cmljc10gPT09ICdudW1iZXInXHJcbiAgICApIGFzIChrZXlvZiBQZXJmb3JtYW5jZU1ldHJpY3MpW107XHJcblxyXG4gICAgZm9yIChjb25zdCBtZXRyaWMgb2YgbWV0cmljcykge1xyXG4gICAgICBpZiAobWV0cmljID09PSAndGltZXN0YW1wJykgY29udGludWU7XHJcblxyXG4gICAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLm1ldHJpY3NIaXN0b3J5Lm1hcChtID0+IG1bbWV0cmljXSBhcyBudW1iZXIpO1xyXG4gICAgICBjb25zdCB0aW1lc3RhbXBzID0gdGhpcy5tZXRyaWNzSGlzdG9yeS5tYXAobSA9PiBtLnRpbWVzdGFtcCk7XHJcbiAgICAgIGNvbnN0IHRyZW5kID0gdGhpcy5jYWxjdWxhdGVUcmVuZERpcmVjdGlvbih2YWx1ZXMpO1xyXG4gICAgICBjb25zdCBjaGFuZ2VSYXRlID0gdGhpcy5jYWxjdWxhdGVDaGFuZ2VSYXRlKHZhbHVlcyk7XHJcblxyXG4gICAgICB0cmVuZHMucHVzaCh7XHJcbiAgICAgICAgbWV0cmljLFxyXG4gICAgICAgIHZhbHVlcyxcclxuICAgICAgICB0aW1lc3RhbXBzLFxyXG4gICAgICAgIHRyZW5kLFxyXG4gICAgICAgIGNoYW5nZVJhdGUsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0cmVuZHM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDorqHnrpfotovlir/mlrnlkJFcclxuICAgKi9cclxuICBwcml2YXRlIGNhbGN1bGF0ZVRyZW5kRGlyZWN0aW9uKHZhbHVlczogbnVtYmVyW10pOiAnaW1wcm92aW5nJyB8ICdzdGFibGUnIHwgJ2RlY2xpbmluZycge1xyXG4gICAgaWYgKHZhbHVlcy5sZW5ndGggPCAyKSByZXR1cm4gJ3N0YWJsZSc7XHJcblxyXG4gICAgY29uc3QgcmVjZW50ID0gdmFsdWVzLnNsaWNlKC1NYXRoLm1pbig1LCB2YWx1ZXMubGVuZ3RoKSk7XHJcbiAgICBjb25zdCBjaGFuZ2UgPSByZWNlbnRbcmVjZW50Lmxlbmd0aCAtIDFdIC0gcmVjZW50WzBdO1xyXG5cclxuICAgIGlmIChNYXRoLmFicyhjaGFuZ2UpIDwgMC4wMSkgcmV0dXJuICdzdGFibGUnO1xyXG4gICAgcmV0dXJuIGNoYW5nZSA+IDAgPyAnaW1wcm92aW5nJyA6ICdkZWNsaW5pbmcnO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6K6h566X5Y+Y5YyW546HXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBjYWxjdWxhdGVDaGFuZ2VSYXRlKHZhbHVlczogbnVtYmVyW10pOiBudW1iZXIge1xyXG4gICAgaWYgKHZhbHVlcy5sZW5ndGggPCAyKSByZXR1cm4gMDtcclxuXHJcbiAgICBjb25zdCByZWNlbnQgPSB2YWx1ZXMuc2xpY2UoLU1hdGgubWluKDUsIHZhbHVlcy5sZW5ndGgpKTtcclxuICAgIGNvbnN0IGNoYW5nZSA9IHJlY2VudFtyZWNlbnQubGVuZ3RoIC0gMV0gLSByZWNlbnRbMF07XHJcbiAgICBjb25zdCBiYXNlbGluZSA9IHJlY2VudFswXSB8fCAxO1xyXG5cclxuICAgIHJldHVybiBjaGFuZ2UgLyBiYXNlbGluZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOeUn+aIkOW7uuiurlxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2VuZXJhdGVSZWNvbW1lbmRhdGlvbnMobWV0cmljczogUGVyZm9ybWFuY2VNZXRyaWNzLCB0cmVuZHM6IFBlcmZvcm1hbmNlVHJlbmRbXSk6IHN0cmluZ1tdIHtcclxuICAgIGNvbnN0IHJlY29tbWVuZGF0aW9uczogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICAvLyDln7rkuo7lvZPliY3mjIfmoIfnmoTlu7rorq5cclxuICAgIGlmIChtZXRyaWNzLmF2ZXJhZ2VRdWVyeVRpbWUgPiA1MDApIHtcclxuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goJ+iAg+iZkeS8mOWMluafpeivouaIluWinuWKoOe0ouW8leS7peaPkOmrmOafpeivouaAp+iDvScpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChtZXRyaWNzLmNhY2hlSGl0UmF0ZSA8IDAuNykge1xyXG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCgn6LCD5pW057yT5a2Y562W55Wl5Lul5o+Q6auY57yT5a2Y5ZG95Lit546HJyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG1ldHJpY3MubWVtb3J5VXNhZ2UgPiA1MCAqIDEwMjQgKiAxMDI0KSB7XHJcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKCfogIPomZHmuIXnkIbkuI3lv4XopoHnmoTmlbDmja7miJbkvJjljJblhoXlrZjkvb/nlKgnKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobWV0cmljcy5jb25zaXN0ZW5jeVNjb3JlIDwgMC45KSB7XHJcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKCfov5DooYzmlbDmja7kuIDoh7TmgKfmo4Dmn6Xku6Xkv67lpI3mvZzlnKjpl67popgnKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDln7rkuo7otovlir/nmoTlu7rorq5cclxuICAgIGNvbnN0IGRlY2xpbmluZ1RyZW5kcyA9IHRyZW5kcy5maWx0ZXIodCA9PiB0LnRyZW5kID09PSAnZGVjbGluaW5nJyk7XHJcbiAgICBpZiAoZGVjbGluaW5nVHJlbmRzLmxlbmd0aCA+IDIpIHtcclxuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goJ+ajgOa1i+WIsOWkmumhueaMh+agh+S4i+mZje+8jOW7uuiurui/m+ihjOWFqOmdoueahOaAp+iDveWIhuaekCcpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZWNvbW1lbmRhdGlvbnM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliIbmnpDpl67pophcclxuICAgKi9cclxuICBwcml2YXRlIGFuYWx5emVJc3N1ZXMobWV0cmljczogUGVyZm9ybWFuY2VNZXRyaWNzKToge1xyXG4gICAgY3JpdGljYWw6IHN0cmluZ1tdO1xyXG4gICAgd2FybmluZzogc3RyaW5nW107XHJcbiAgICBpbmZvOiBzdHJpbmdbXTtcclxuICB9IHtcclxuICAgIGNvbnN0IGNyaXRpY2FsOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgY29uc3Qgd2FybmluZzogc3RyaW5nW10gPSBbXTtcclxuICAgIGNvbnN0IGluZm86IHN0cmluZ1tdID0gW107XHJcblxyXG4gICAgLy8g5YWz6ZSu6Zeu6aKYXHJcbiAgICBpZiAobWV0cmljcy5hdmVyYWdlUXVlcnlUaW1lID4gMjAwMCkge1xyXG4gICAgICBjcml0aWNhbC5wdXNoKCfmn6Xor6LmgKfog73kuKXph43kuIvpmY0nKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobWV0cmljcy5jb25zaXN0ZW5jeVNjb3JlIDwgMC41KSB7XHJcbiAgICAgIGNyaXRpY2FsLnB1c2goJ+aVsOaNruS4gOiHtOaAp+S4pemHjeWPl+aNnycpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOitpuWRilxyXG4gICAgaWYgKG1ldHJpY3MuYXZlcmFnZVF1ZXJ5VGltZSA+IDEwMDApIHtcclxuICAgICAgd2FybmluZy5wdXNoKCfmn6Xor6LmgKfog73kuIvpmY0nKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobWV0cmljcy5jYWNoZUhpdFJhdGUgPCAwLjUpIHtcclxuICAgICAgd2FybmluZy5wdXNoKCfnvJPlrZjlkb3kuK3njofov4fkvY4nKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobWV0cmljcy5lcnJvckNvdW50ID4gMTApIHtcclxuICAgICAgd2FybmluZy5wdXNoKCfplJnor6/mlbDph4/ov4flpJonKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDkv6Hmga9cclxuICAgIGlmIChtZXRyaWNzLmRhdGFiYXNlU2l6ZSA+IDEwMCAqIDEwMjQgKiAxMDI0KSB7XHJcbiAgICAgIGluZm8ucHVzaCgn5pWw5o2u5bqT5aSn5bCP6L6D5aSn77yM5bu66K6u5a6a5pyf5riF55CGJyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHsgY3JpdGljYWwsIHdhcm5pbmcsIGluZm8gfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluS8mOWMluS/oeaBr1xyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0T3B0aW1pemF0aW9ucygpOiB7XHJcbiAgICBpbXBsZW1lbnRlZDogc3RyaW5nW107XHJcbiAgICBzdWdnZXN0ZWQ6IHN0cmluZ1tdO1xyXG4gIH0ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaW1wbGVtZW50ZWQ6IFtcclxuICAgICAgICAn57uf5LiA5pWw5o2u5bqT5o6l5Y+jJyxcclxuICAgICAgICAn5p+l6K+i5oCn6IO95LyY5YyWJyxcclxuICAgICAgICAn5pWw5o2u5LiA6Ie05oCn6aqM6K+BJyxcclxuICAgICAgICAn5pm66IO957yT5a2Y562W55WlJyxcclxuICAgICAgXSxcclxuICAgICAgc3VnZ2VzdGVkOiBbXHJcbiAgICAgICAgJ+aVsOaNruW6k+e0ouW8leS8mOWMlicsXHJcbiAgICAgICAgJ+aJuemHj+aTjeS9nOS8mOWMlicsXHJcbiAgICAgICAgJ+emu+e6v+WQjOatpeaUuei/mycsXHJcbiAgICAgICAgJ+WGheWtmOeuoeeQhuS8mOWMlicsXHJcbiAgICAgIF0sXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog55Sf5oiQ5pGY6KaBXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZW5lcmF0ZVN1bW1hcnkobWV0cmljczogUGVyZm9ybWFuY2VNZXRyaWNzLCB0cmVuZHM6IFBlcmZvcm1hbmNlVHJlbmRbXSk6IHtcclxuICAgIGhlYWx0aFN0YXR1czogJ2V4Y2VsbGVudCcgfCAnZ29vZCcgfCAnZmFpcicgfCAncG9vcic7XHJcbiAgICBrZXlGaW5kaW5nczogc3RyaW5nW107XHJcbiAgICBuZXh0U3RlcHM6IHN0cmluZ1tdO1xyXG4gIH0ge1xyXG4gICAgY29uc3Qgc2NvcmUgPSB0aGlzLmNhbGN1bGF0ZU92ZXJhbGxTY29yZShtZXRyaWNzKTtcclxuICAgIGxldCBoZWFsdGhTdGF0dXM6ICdleGNlbGxlbnQnIHwgJ2dvb2QnIHwgJ2ZhaXInIHwgJ3Bvb3InO1xyXG5cclxuICAgIGlmIChzY29yZSA+PSAwLjkpIGhlYWx0aFN0YXR1cyA9ICdleGNlbGxlbnQnO1xyXG4gICAgZWxzZSBpZiAoc2NvcmUgPj0gMC43KSBoZWFsdGhTdGF0dXMgPSAnZ29vZCc7XHJcbiAgICBlbHNlIGlmIChzY29yZSA+PSAwLjUpIGhlYWx0aFN0YXR1cyA9ICdmYWlyJztcclxuICAgIGVsc2UgaGVhbHRoU3RhdHVzID0gJ3Bvb3InO1xyXG5cclxuICAgIGNvbnN0IGtleUZpbmRpbmdzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgY29uc3QgbmV4dFN0ZXBzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgIC8vIOWFs+mUruWPkeeOsFxyXG4gICAga2V5RmluZGluZ3MucHVzaChg5b2T5YmN5oCn6IO95b6X5YiGOiAkeyhzY29yZSAqIDEwMCkudG9GaXhlZCgxKX0lYCk7XHJcbiAgICBrZXlGaW5kaW5ncy5wdXNoKGDlubPlnYfmn6Xor6Lml7bpl7Q6ICR7bWV0cmljcy5hdmVyYWdlUXVlcnlUaW1lLnRvRml4ZWQoMil9bXNgKTtcclxuICAgIGtleUZpbmRpbmdzLnB1c2goYOe8k+WtmOWRveS4reeOhzogJHsobWV0cmljcy5jYWNoZUhpdFJhdGUgKiAxMDApLnRvRml4ZWQoMSl9JWApO1xyXG4gICAga2V5RmluZGluZ3MucHVzaChg5pWw5o2u5LiA6Ie05oCn5b6X5YiGOiAkeyhtZXRyaWNzLmNvbnNpc3RlbmN5U2NvcmUgKiAxMDApLnRvRml4ZWQoMSl9JWApO1xyXG5cclxuICAgIC8vIOS4i+S4gOatpeihjOWKqFxyXG4gICAgaWYgKGhlYWx0aFN0YXR1cyA9PT0gJ3Bvb3InKSB7XHJcbiAgICAgIG5leHRTdGVwcy5wdXNoKCfnq4vljbPov5vooYzmgKfog73kvJjljJYnKTtcclxuICAgICAgbmV4dFN0ZXBzLnB1c2goJ+i/kOihjOaVsOaNruS4gOiHtOaAp+ajgOafpScpO1xyXG4gICAgfSBlbHNlIGlmIChoZWFsdGhTdGF0dXMgPT09ICdmYWlyJykge1xyXG4gICAgICBuZXh0U3RlcHMucHVzaCgn5LyY5YyW5p+l6K+i5oCn6IO9Jyk7XHJcbiAgICAgIG5leHRTdGVwcy5wdXNoKCfmlLnov5vnvJPlrZjnrZbnlaUnKTtcclxuICAgIH0gZWxzZSBpZiAoaGVhbHRoU3RhdHVzID09PSAnZ29vZCcpIHtcclxuICAgICAgbmV4dFN0ZXBzLnB1c2goJ+e7p+e7reebkeaOp+aAp+iDveaMh+aghycpO1xyXG4gICAgICBuZXh0U3RlcHMucHVzaCgn5a6a5pyf6L+b6KGM5LyY5YyWJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBuZXh0U3RlcHMucHVzaCgn57u05oyB5b2T5YmN5oCn6IO95rC05bmzJyk7XHJcbiAgICAgIG5leHRTdGVwcy5wdXNoKCflrprmnJ/mo4Dmn6Xns7vnu5/lgaXlurfnirbmgIEnKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4geyBoZWFsdGhTdGF0dXMsIGtleUZpbmRpbmdzLCBuZXh0U3RlcHMgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiuoeeul+aAu+S9k+W+l+WIhlxyXG4gICAqL1xyXG4gIHByaXZhdGUgY2FsY3VsYXRlT3ZlcmFsbFNjb3JlKG1ldHJpY3M6IFBlcmZvcm1hbmNlTWV0cmljcyk6IG51bWJlciB7XHJcbiAgICBjb25zdCB3ZWlnaHRzID0ge1xyXG4gICAgICBxdWVyeVRpbWU6IDAuMjUsXHJcbiAgICAgIGNhY2hlSGl0UmF0ZTogMC4yLFxyXG4gICAgICBjb25zaXN0ZW5jeVNjb3JlOiAwLjIsXHJcbiAgICAgIG1lbW9yeVVzYWdlOiAwLjE1LFxyXG4gICAgICBlcnJvclJhdGU6IDAuMSxcclxuICAgICAgc3luY1N0YXR1czogMC4xLFxyXG4gICAgfTtcclxuXHJcbiAgICBsZXQgc2NvcmUgPSAwO1xyXG5cclxuICAgIC8vIOafpeivouaXtumXtOW+l+WIhu+8iOi2iuS9jui2iuWlve+8iVxyXG4gICAgY29uc3QgcXVlcnlUaW1lU2NvcmUgPSBNYXRoLm1heCgwLCAxIC0gbWV0cmljcy5hdmVyYWdlUXVlcnlUaW1lIC8gMjAwMCk7XHJcbiAgICBzY29yZSArPSBxdWVyeVRpbWVTY29yZSAqIHdlaWdodHMucXVlcnlUaW1lO1xyXG5cclxuICAgIC8vIOe8k+WtmOWRveS4reeOh+W+l+WIhlxyXG4gICAgc2NvcmUgKz0gbWV0cmljcy5jYWNoZUhpdFJhdGUgKiB3ZWlnaHRzLmNhY2hlSGl0UmF0ZTtcclxuXHJcbiAgICAvLyDkuIDoh7TmgKflvpfliIZcclxuICAgIHNjb3JlICs9IG1ldHJpY3MuY29uc2lzdGVuY3lTY29yZSAqIHdlaWdodHMuY29uc2lzdGVuY3lTY29yZTtcclxuXHJcbiAgICAvLyDlhoXlrZjkvb/nlKjlvpfliIbvvIjotorkvY7otorlpb3vvIlcclxuICAgIGNvbnN0IG1lbW9yeVNjb3JlID0gTWF0aC5tYXgoMCwgMSAtIG1ldHJpY3MubWVtb3J5VXNhZ2UgLyAoMjAwICogMTAyNCAqIDEwMjQpKTtcclxuICAgIHNjb3JlICs9IG1lbW9yeVNjb3JlICogd2VpZ2h0cy5tZW1vcnlVc2FnZTtcclxuXHJcbiAgICAvLyDplJnor6/njoflvpfliIbvvIjotorkvY7otorlpb3vvIlcclxuICAgIGNvbnN0IGVycm9yU2NvcmUgPSBNYXRoLm1heCgwLCAxIC0gbWV0cmljcy5lcnJvckNvdW50IC8gMTAwKTtcclxuICAgIHNjb3JlICs9IGVycm9yU2NvcmUgKiB3ZWlnaHRzLmVycm9yUmF0ZTtcclxuXHJcbiAgICAvLyDlkIzmraXnirbmgIHlvpfliIZcclxuICAgIGNvbnN0IHN5bmNTY29yZSA9IG1ldHJpY3Muc3luY1N0YXR1cyA9PT0gJ3N5bmNlZCcgPyAxIDogMC41O1xyXG4gICAgc2NvcmUgKz0gc3luY1Njb3JlICogd2VpZ2h0cy5zeW5jU3RhdHVzO1xyXG5cclxuICAgIHJldHVybiBNYXRoLm1pbigxLCBNYXRoLm1heCgwLCBzY29yZSkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5L+d5a2Y5oql5ZGKXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBhc3luYyBzYXZlUmVwb3J0KHJlcG9ydDogUGVyZm9ybWFuY2VSZXBvcnQpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIOi/memHjOWPr+S7peS/neWtmOWIsEluZGV4ZWREQuaIluWPkemAgeWIsOacjeWKoeWZqFxyXG4gICAgICBjb25zb2xlLmxvZygn5oCn6IO95oql5ZGK5bey55Sf5oiQOicsIHJlcG9ydC5yZXBvcnRJZCk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCfkv53lrZjmgKfog73miqXlkYrlpLHotKU6JywgZXJyb3IpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W5oCn6IO96LaL5Yq/XHJcbiAgICovXHJcbiAgcHVibGljIGdldFBlcmZvcm1hbmNlVHJlbmRzKG1ldHJpYz86IGtleW9mIFBlcmZvcm1hbmNlTWV0cmljcyk6IFBlcmZvcm1hbmNlVHJlbmRbXSB7XHJcbiAgICBjb25zdCBhbGxUcmVuZHMgPSB0aGlzLmNhbGN1bGF0ZVRyZW5kcygpO1xyXG4gICAgaWYgKG1ldHJpYykge1xyXG4gICAgICByZXR1cm4gYWxsVHJlbmRzLmZpbHRlcih0ID0+IHQubWV0cmljID09PSBtZXRyaWMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFsbFRyZW5kcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluW9k+WJjeWBpeW6t+eKtuaAgVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRIZWFsdGhTdGF0dXMoKTogRGF0YWJhc2VIZWFsdGhTdGF0dXMge1xyXG4gICAgY29uc3QgbWV0cmljcyA9IHRoaXMuZ2V0Q3VycmVudE1ldHJpY3MoKTtcclxuICAgIGNvbnN0IHNjb3JlID0gdGhpcy5jYWxjdWxhdGVPdmVyYWxsU2NvcmUobWV0cmljcyk7XHJcblxyXG4gICAgaWYgKHNjb3JlID49IDAuOSkgcmV0dXJuICdoZWFsdGh5JztcclxuICAgIGlmIChzY29yZSA+PSAwLjcpIHJldHVybiAnaGVhbHRoeSc7XHJcbiAgICBpZiAoc2NvcmUgPj0gMC41KSByZXR1cm4gJ3dhcm5pbmcnO1xyXG4gICAgcmV0dXJuICdjcml0aWNhbCc7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5bmgKfog73nu5/orqFcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0UGVyZm9ybWFuY2VTdGF0cygpOiB7XHJcbiAgICBjdXJyZW50TWV0cmljczogUGVyZm9ybWFuY2VNZXRyaWNzO1xyXG4gICAgaGVhbHRoU3RhdHVzOiBEYXRhYmFzZUhlYWx0aFN0YXR1cztcclxuICAgIHRyZW5kczogUGVyZm9ybWFuY2VUcmVuZFtdO1xyXG4gICAgYWxlcnRzOiBzdHJpbmdbXTtcclxuICB9IHtcclxuICAgIGNvbnN0IGN1cnJlbnRNZXRyaWNzID0gdGhpcy5nZXRDdXJyZW50TWV0cmljcygpO1xyXG4gICAgY29uc3QgaGVhbHRoU3RhdHVzID0gdGhpcy5nZXRIZWFsdGhTdGF0dXMoKTtcclxuICAgIGNvbnN0IHRyZW5kcyA9IHRoaXMuZ2V0UGVyZm9ybWFuY2VUcmVuZHMoKTtcclxuICAgIGNvbnN0IGFsZXJ0cyA9IHRoaXMuZ2VuZXJhdGVBbGVydHMoY3VycmVudE1ldHJpY3MpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGN1cnJlbnRNZXRyaWNzLFxyXG4gICAgICBoZWFsdGhTdGF0dXMsXHJcbiAgICAgIHRyZW5kcyxcclxuICAgICAgYWxlcnRzLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOeUn+aIkOWRiuitplxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2VuZXJhdGVBbGVydHMobWV0cmljczogUGVyZm9ybWFuY2VNZXRyaWNzKTogc3RyaW5nW10ge1xyXG4gICAgY29uc3QgYWxlcnRzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgIGlmIChtZXRyaWNzLmF2ZXJhZ2VRdWVyeVRpbWUgPiB0aGlzLmNvbmZpZy5hbGVydFRocmVzaG9sZHMucXVlcnlUaW1lKSB7XHJcbiAgICAgIGFsZXJ0cy5wdXNoKGDmn6Xor6Lml7bpl7TotoXov4fpmIjlgLw6ICR7bWV0cmljcy5hdmVyYWdlUXVlcnlUaW1lfW1zYCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG1ldHJpY3MubWVtb3J5VXNhZ2UgPiB0aGlzLmNvbmZpZy5hbGVydFRocmVzaG9sZHMubWVtb3J5VXNhZ2UpIHtcclxuICAgICAgYWxlcnRzLnB1c2goYOWGheWtmOS9v+eUqOi2hei/h+mYiOWAvDogJHt0aGlzLmZvcm1hdEJ5dGVzKG1ldHJpY3MubWVtb3J5VXNhZ2UpfWApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChtZXRyaWNzLmNhY2hlSGl0UmF0ZSA8IHRoaXMuY29uZmlnLmFsZXJ0VGhyZXNob2xkcy5jYWNoZUhpdFJhdGUpIHtcclxuICAgICAgYWxlcnRzLnB1c2goYOe8k+WtmOWRveS4reeOh+S9juS6jumYiOWAvDogJHsobWV0cmljcy5jYWNoZUhpdFJhdGUgKiAxMDApLnRvRml4ZWQoMSl9JWApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhbGVydHM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmoLzlvI/ljJblrZfoioLmlbBcclxuICAgKi9cclxuICBwcml2YXRlIGZvcm1hdEJ5dGVzKGJ5dGVzOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgaWYgKGJ5dGVzID09PSAwKSByZXR1cm4gJzAgQnl0ZXMnO1xyXG4gICAgY29uc3QgayA9IDEwMjQ7XHJcbiAgICBjb25zdCBzaXplcyA9IFsnQnl0ZXMnLCAnS0InLCAnTUInLCAnR0InXTtcclxuICAgIGNvbnN0IGkgPSBNYXRoLmZsb29yKE1hdGgubG9nKGJ5dGVzKSAvIE1hdGgubG9nKGspKTtcclxuICAgIHJldHVybiBwYXJzZUZsb2F0KChieXRlcyAvIE1hdGgucG93KGssIGkpKS50b0ZpeGVkKDIpKSArICcgJyArIHNpemVzW2ldO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W5Y6G5Y+y5oyH5qCHXHJcbiAgICovXHJcbiAgcHVibGljIGdldE1ldHJpY3NIaXN0b3J5KGxpbWl0PzogbnVtYmVyKTogUGVyZm9ybWFuY2VNZXRyaWNzW10ge1xyXG4gICAgaWYgKGxpbWl0KSB7XHJcbiAgICAgIHJldHVybiB0aGlzLm1ldHJpY3NIaXN0b3J5LnNsaWNlKC1saW1pdCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gWy4uLnRoaXMubWV0cmljc0hpc3RvcnldO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5riF55CG5Y6G5Y+y5pWw5o2uXHJcbiAgICovXHJcbiAgcHVibGljIGNsZWFySGlzdG9yeSgpOiB2b2lkIHtcclxuICAgIHRoaXMubWV0cmljc0hpc3RvcnkgPSBbXTtcclxuICAgIGNvbnNvbGUubG9nKCfmgKfog73ljoblj7LmlbDmja7lt7LmuIXnkIYnKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWvvOWHuuaAp+iDveaVsOaNrlxyXG4gICAqL1xyXG4gIHB1YmxpYyBleHBvcnRQZXJmb3JtYW5jZURhdGEoKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IGRhdGEgPSB7XHJcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXHJcbiAgICAgIG1ldHJpY3M6IHRoaXMubWV0cmljc0hpc3RvcnksXHJcbiAgICAgIGV4cG9ydFRpbWU6IERhdGUubm93KCksXHJcbiAgICAgIHZlcnNpb246ICczLjAuMCcsXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCAyKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOabtOaWsOmFjee9rlxyXG4gICAqL1xyXG4gIHB1YmxpYyB1cGRhdGVDb25maWcobmV3Q29uZmlnOiBQYXJ0aWFsPE1vbml0b3JpbmdDb25maWc+KTogdm9pZCB7XHJcbiAgICB0aGlzLmNvbmZpZyA9IHsgLi4udGhpcy5jb25maWcsIC4uLm5ld0NvbmZpZyB9O1xyXG4gICAgXHJcbiAgICAvLyDlpoLmnpzmraPlnKjnm5HmjqfvvIzph43lkK/nm5Hmjqfku6XlupTnlKjmlrDphY3nva5cclxuICAgIGlmICh0aGlzLmlzTW9uaXRvcmluZykge1xyXG4gICAgICB0aGlzLnN0b3BNb25pdG9yaW5nKCk7XHJcbiAgICAgIHRoaXMuc3RhcnRNb25pdG9yaW5nKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDplIDmr4Hlrp7kvotcclxuICAgKi9cclxuICBwdWJsaWMgZGVzdHJveSgpOiB2b2lkIHtcclxuICAgIHRoaXMuc3RvcE1vbml0b3JpbmcoKTtcclxuICAgIHRoaXMuY2xlYXJIaXN0b3J5KCk7XHJcbiAgICBQZXJmb3JtYW5jZU1vbml0b3JpbmdTZXJ2aWNlLmluc3RhbmNlID0gbnVsbCBhcyBhbnk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyDlr7zlh7rlt6Xlhbflh73mlbBcclxuZXhwb3J0IGNvbnN0IGNyZWF0ZVBlcmZvcm1hbmNlTW9uaXRvcmluZyA9IChcclxuICBkYjogQ2FyZEFsbFVuaWZpZWREYXRhYmFzZSxcclxuICBxdWVyeVBlcmZvcm1hbmNlOiBFbmhhbmNlZFF1ZXJ5UGVyZm9ybWFuY2VTZXJ2aWNlLFxyXG4gIGRhdGFDb25zaXN0ZW5jeTogRGF0YUNvbnNpc3RlbmN5U2VydmljZSxcclxuICBjb25maWc/OiBQYXJ0aWFsPE1vbml0b3JpbmdDb25maWc+XHJcbik6IFBlcmZvcm1hbmNlTW9uaXRvcmluZ1NlcnZpY2UgPT4ge1xyXG4gIHJldHVybiBQZXJmb3JtYW5jZU1vbml0b3JpbmdTZXJ2aWNlLmdldEluc3RhbmNlKGRiLCBxdWVyeVBlcmZvcm1hbmNlLCBkYXRhQ29uc2lzdGVuY3ksIGNvbmZpZyk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQZXJmb3JtYW5jZU1vbml0b3JpbmdTZXJ2aWNlOyJdLCJ2ZXJzaW9uIjozfQ==
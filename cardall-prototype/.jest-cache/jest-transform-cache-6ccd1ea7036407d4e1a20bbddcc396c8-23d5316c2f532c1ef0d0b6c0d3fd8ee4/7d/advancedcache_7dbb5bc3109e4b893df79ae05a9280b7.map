{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\advanced-cache.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\advanced-cache.ts"],"sourcesContent":["import { db, type DbCard, DbFolder, DbTag, DbImage } from './database-unified'\nimport type { Card, Folder, Tag } from '@/types/card'\n\n// ============================================================================\n// 缓存策略枚举\n// ============================================================================\n\nexport enum CacheStrategy {\n  LRU = 'lru',           // 最近最少使用\n  LFU = 'lfu',           // 最不经常使用\n  FIFO = 'fifo',         // 先进先出\n  TTL = 'ttl',           // 基于时间\n  ADAPTIVE = 'adaptive'   // 自适应策略\n}\n\n// ============================================================================\n// 缓存配置接口\n// ============================================================================\n\nexport interface CacheConfig {\n  maxEntries: number\n  defaultTTL: number\n  strategy: CacheStrategy\n  enableCompression: boolean\n  enablePersistence: boolean\n  cleanupInterval: number\n  memoryLimit: number // MB\n}\n\n// ============================================================================\n// 缓存条目接口\n// ============================================================================\n\nexport interface CacheEntry<T> {\n  key: string\n  data: T\n  metadata: {\n    createdAt: Date\n    accessedAt: Date\n    accessCount: number\n    ttl: number\n    size: number\n    compressed: boolean\n    tags: string[]\n    priority: 'high' | 'normal' | 'low'\n  }\n}\n\n// ============================================================================\n// 缓存统计信息\n// ============================================================================\n\nexport interface CacheStats {\n  totalEntries: number\n  hitCount: number\n  missCount: number\n  evictionCount: number\n  compressionRatio: number\n  memoryUsage: number\n  hitRate: number\n  avgAccessTime: number\n  byStrategy: Record<CacheStrategy, {\n    hits: number\n    misses: number\n    evictions: number\n  }>\n  byEntityType: Record<string, {\n    entries: number\n    hits: number\n    misses: number\n  }>\n}\n\n// ============================================================================\n// 缓存预热策略\n// ============================================================================\n\nexport interface WarmupStrategy {\n  pattern: RegExp\n  query: () => Promise<any[]>\n  priority: number\n  ttl: number\n  batchSize?: number\n}\n\n// ============================================================================\n// 高级缓存管理器\n// ============================================================================\n\nexport class AdvancedCacheManager {\n  private cache: Map<string, CacheEntry<any>> = new Map()\n  private accessLog: Array<{ key: string; timestamp: Date; type: 'hit' | 'miss' }> = []\n  private compressionMap: Map<string, string> = new Map() // 压缩映射\n  private persistentStorage: Map<string, any> = new Map() // 持久化存储\n  \n  private config: CacheConfig\n  private stats: CacheStats\n  private cleanupTimer?: NodeJS.Timeout\n  private warmupStrategies: WarmupStrategy[] = []\n  \n  constructor(config: Partial<CacheConfig> = {}) {\n    this.config = {\n      maxEntries: 1000,\n      defaultTTL: 5 * 60 * 1000, // 5分钟\n      strategy: CacheStrategy.ADAPTIVE,\n      enableCompression: true,\n      enablePersistence: true,\n      cleanupInterval: 60 * 1000, // 1分钟\n      memoryLimit: 50, // 50MB\n      ...config\n    }\n    \n    this.initializeStats()\n    this.initializeCache()\n    this.startCleanupTimer()\n  }\n\n  // ============================================================================\n  // 核心缓存操作\n  // ============================================================================\n\n  /**\n   * 获取缓存值\n   */\n  async get<T>(key: string, options?: {\n    skipDecompression?: boolean\n    updateAccessTime?: boolean\n  }): Promise<T | null> {\n    const startTime = performance.now()\n    \n    try {\n      // 检查内存缓存\n      let entry = this.cache.get(key)\n      \n      // 如果内存中没有，检查持久化存储\n      if (!entry && this.config.enablePersistence) {\n        entry = await this.loadFromPersistentStorage(key)\n        if (entry) {\n          this.cache.set(key, entry)\n        }\n      }\n      \n      if (!entry) {\n        this.recordMiss(key, performance.now() - startTime)\n        return null\n      }\n\n      // 检查TTL\n      if (this.isExpired(entry)) {\n        this.evictEntry(key)\n        this.recordMiss(key, performance.now() - startTime)\n        return null\n      }\n\n      // 解压数据\n      let data = entry.data\n      if (entry.metadata.compressed && !options?.skipDecompression) {\n        data = await this.decompressData(data)\n      }\n\n      // 更新访问信息\n      if (options?.updateAccessTime !== false) {\n        this.updateAccessInfo(entry)\n      }\n\n      this.recordHit(key, performance.now() - startTime)\n      return data\n    } catch (error) {\n      console.error('Cache get error:', error)\n      this.recordMiss(key, performance.now() - startTime)\n      return null\n    }\n  }\n\n  /**\n   * 设置缓存值\n   */\n  async set<T>(\n    key: string, \n    data: T, \n    options?: {\n      ttl?: number\n      tags?: string[]\n      priority?: 'high' | 'normal' | 'low'\n      skipCompression?: boolean\n      persistOnly?: boolean\n    }\n  ): Promise<void> {\n    try {\n      // 计算数据大小\n      const dataSize = this.calculateDataSize(data)\n      \n      // 检查内存限制\n      if (this.getCurrentMemoryUsage() + dataSize > this.config.memoryLimit * 1024 * 1024) {\n        this.evictByMemoryPressure(dataSize)\n      }\n\n      // 检查条目限制\n      if (this.cache.size >= this.config.maxEntries) {\n        this.evictByStrategy()\n      }\n\n      // 压缩数据\n      let processedData = data\n      let compressed = false\n      \n      if (this.config.enableCompression && \n          dataSize > 1024 && // 大于1KB才压缩\n          !options?.skipCompression) {\n        processedData = await this.compressData(data)\n        compressed = true\n      }\n\n      const entry: CacheEntry<T> = {\n        key,\n        data: processedData,\n        metadata: {\n          createdAt: new Date(),\n          accessedAt: new Date(),\n          accessCount: 1,\n          ttl: options?.ttl || this.config.defaultTTL,\n          size: compressed ? this.calculateDataSize(processedData) : dataSize,\n          compressed,\n          tags: options?.tags || [],\n          priority: options?.priority || 'normal'\n        }\n      }\n\n      if (options?.persistOnly) {\n        // 仅持久化，不存入内存\n        await this.saveToPersistentStorage(key, entry)\n      } else {\n        // 存入内存\n        this.cache.set(key, entry)\n        \n        // 同时持久化\n        if (this.config.enablePersistence) {\n          await this.saveToPersistentStorage(key, entry)\n        }\n      }\n\n      this.updateStats()\n    } catch (error) {\n      console.error('Cache set error:', error)\n    }\n  }\n\n  /**\n   * 删除缓存项\n   */\n  async delete(key: string): Promise<boolean> {\n    try {\n      const deleted = this.cache.delete(key)\n      \n      if (this.config.enablePersistence) {\n        await this.deleteFromPersistentStorage(key)\n      }\n      \n      if (deleted) {\n        this.stats.totalEntries = this.cache.size\n      }\n      \n      return deleted\n    } catch (error) {\n      console.error('Cache delete error:', error)\n      return false\n    }\n  }\n\n  /**\n   * 批量删除缓存项\n   */\n  async deleteByPattern(pattern: RegExp): Promise<number> {\n    let deletedCount = 0\n    \n    const keysToDelete: string[] = []\n    this.cache.forEach((_, key) => {\n      if (pattern.test(key)) {\n        keysToDelete.push(key)\n      }\n    })\n    \n    for (const key of keysToDelete) {\n      if (await this.delete(key)) {\n        deletedCount++\n      }\n    }\n    \n    return deletedCount\n  }\n\n  /**\n   * 清空缓存\n   */\n  async clear(): Promise<void> {\n    this.cache.clear()\n    \n    if (this.config.enablePersistence) {\n      await this.clearPersistentStorage()\n    }\n    \n    this.initializeStats()\n  }\n\n  // ============================================================================\n  // 智能缓存策略\n  // ============================================================================\n\n  /**\n   * 预测性缓存预热\n   */\n  async predictiveWarmup(): Promise<void> {\n    const predictions = await this.generateAccessPredictions()\n    \n    for (const prediction of predictions) {\n      if (prediction.probability > 0.7) { // 70%以上概率才预热\n        try {\n          const data = await this.fetchDataForPrediction(prediction)\n          if (data) {\n            await this.set(\n              prediction.key,\n              data,\n              {\n                ttl: prediction.ttl,\n                priority: prediction.priority,\n                tags: ['predictive', prediction.entityType]\n              }\n            )\n          }\n        } catch (error) {\n          console.warn(`Failed to warmup cache for ${prediction.key}:`, error)\n        }\n      }\n    }\n  }\n\n  /**\n   * 自适应缓存策略\n   */\n  private evictByStrategy(): void {\n    switch (this.config.strategy) {\n      case CacheStrategy.LRU:\n        this.evictLRU()\n        break\n      case CacheStrategy.LFU:\n        this.evictLFU()\n        break\n      case CacheStrategy.FIFO:\n        this.evictFIFO()\n        break\n      case CacheStrategy.TTL:\n        this.evictByTTL()\n        break\n      case CacheStrategy.ADAPTIVE:\n        this.evictAdaptive()\n        break\n    }\n  }\n\n  private evictLRU(): void {\n    let oldestKey: string | null = null\n    let oldestTime = Date.now()\n    \n    this.cache.forEach((entry, key) => {\n      if (entry.metadata.accessedAt.getTime() < oldestTime) {\n        oldestTime = entry.metadata.accessedAt.getTime()\n        oldestKey = key\n      }\n    })\n    \n    if (oldestKey) {\n      this.evictEntry(oldestKey)\n    }\n  }\n\n  private evictLFU(): void {\n    let leastFrequentKey: string | null = null\n    let lowestCount = Infinity\n    \n    this.cache.forEach((entry, key) => {\n      if (entry.metadata.accessCount < lowestCount) {\n        lowestCount = entry.metadata.accessCount\n        leastFrequentKey = key\n      }\n    })\n    \n    if (leastFrequentKey) {\n      this.evictEntry(leastFrequentKey)\n    }\n  }\n\n  private evictFIFO(): void {\n    let oldestKey: string | null = null\n    let oldestTime = Date.now()\n    \n    this.cache.forEach((entry, key) => {\n      if (entry.metadata.createdAt.getTime() < oldestTime) {\n        oldestTime = entry.metadata.createdAt.getTime()\n        oldestKey = key\n      }\n    })\n    \n    if (oldestKey) {\n      this.evictEntry(oldestKey)\n    }\n  }\n\n  private evictByTTL(): void {\n    const now = Date.now()\n    const expiredKeys: string[] = []\n    \n    this.cache.forEach((entry, key) => {\n      if (now - entry.metadata.createdAt.getTime() > entry.metadata.ttl) {\n        expiredKeys.push(key)\n      }\n    })\n    \n    // 删除最旧的过期条目\n    if (expiredKeys.length > 0) {\n      const oldestExpiredKey = expiredKeys.reduce((oldest, current) => {\n        const oldestEntry = this.cache.get(oldest)!\n        const currentEntry = this.cache.get(current)!\n        return oldestEntry.metadata.createdAt.getTime() < currentEntry.metadata.createdAt.getTime() \n          ? oldest \n          : current\n      })\n      \n      this.evictEntry(oldestExpiredKey)\n    }\n  }\n\n  private evictAdaptive(): void {\n    // 基于命中率、访问频率、内存压力的混合策略\n    const entries = Array.from(this.cache.entries())\n    \n    // 计算每个条目的分数（分数越高越应该被保留）\n    const scoredEntries = entries.map(([key, entry]) => {\n      const age = Date.now() - entry.metadata.createdAt.getTime()\n      const accessFreq = entry.metadata.accessCount\n      const hitRate = this.calculateHitRate(key)\n      const priorityMultiplier = entry.metadata.priority === 'high' ? 2 : \n                               entry.metadata.priority === 'low' ? 0.5 : 1\n      \n      const score = (accessFreq * hitRate * priorityMultiplier) / (age / 1000)\n      return { key, score }\n    })\n    \n    // 删除分数最低的条目\n    scoredEntries.sort((a, b) => a.score - b.score)\n    if (scoredEntries.length > 0) {\n      this.evictEntry(scoredEntries[0].key)\n    }\n  }\n\n  /**\n   * 基于内存压力清理\n   */\n  private evictByMemoryPressure(requiredSize: number): void {\n    const entries = Array.from(this.cache.entries())\n    \n    // 按优先级和访问频率排序\n    entries.sort((a, b) => {\n      const entryA = a[1]\n      const entryB = b[1]\n      \n      // 优先级权重\n      const priorityWeight = {\n        high: 3,\n        normal: 2,\n        low: 1\n      }\n      \n      const scoreA = entryA.metadata.accessCount * priorityWeight[entryA.metadata.priority]\n      const scoreB = entryB.metadata.accessCount * priorityWeight[entryB.metadata.priority]\n      \n      return scoreA - scoreB\n    })\n    \n    // 逐个删除直到有足够空间\n    let freedSpace = 0\n    for (const [key, entry] of entries) {\n      if (freedSpace >= requiredSize) break\n      \n      this.evictEntry(key)\n      freedSpace += entry.metadata.size\n    }\n  }\n\n  // ============================================================================\n  // 数据压缩和解压缩\n  // ============================================================================\n\n  private async compressData<T>(data: T): Promise<any> {\n    if (!this.config.enableCompression) return data\n    \n    try {\n      // 简单的JSON压缩（实际项目中可以使用更复杂的压缩算法）\n      const jsonString = JSON.stringify(data)\n      \n      // 使用LZ-String压缩（如果可用）\n      if (typeof window !== 'undefined' && (window as any).LZString) {\n        return (window as any).LZString.compress(jsonString)\n      }\n      \n      // 降级到简单的Base64编码\n      return btoa(jsonString)\n    } catch (error) {\n      console.warn('Compression failed, using original data:', error)\n      return data\n    }\n  }\n\n  private async decompressData<T>(compressedData: any): Promise<T> {\n    try {\n      // 检查是否是LZString压缩\n      if (typeof compressedData === 'string' && compressedData.length < 1000) {\n        if (typeof window !== 'undefined' && (window as any).LZString) {\n          try {\n            const decompressed = (window as any).LZString.decompress(compressedData)\n            if (decompressed) {\n              return JSON.parse(decompressed)\n            }\n          } catch {\n            // 继续尝试Base64\n          }\n        }\n        \n        // 尝试Base64解码\n        try {\n          const jsonString = atob(compressedData)\n          return JSON.parse(jsonString)\n        } catch {\n          // 不是压缩数据，直接返回\n        }\n      }\n      \n      return compressedData\n    } catch (error) {\n      console.warn('Decompression failed:', error)\n      return compressedData\n    }\n  }\n\n  // ============================================================================\n  // 持久化存储\n  // ============================================================================\n\n  private async saveToPersistentStorage(key: string, entry: CacheEntry<any>): Promise<void> {\n    try {\n      if (!this.config.enablePersistence) return\n      \n      const storageKey = `cache_${key}`\n      const serialized = JSON.stringify({\n        ...entry,\n        // 转换Date对象为ISO字符串\n        metadata: {\n          ...entry.metadata,\n          createdAt: entry.metadata.createdAt.toISOString(),\n          accessedAt: entry.metadata.accessedAt.toISOString()\n        }\n      })\n      \n      // 使用localStorage或IndexedDB\n      if (typeof localStorage !== 'undefined') {\n        localStorage.setItem(storageKey, serialized)\n      } else {\n        // 降级到内存持久化\n        this.persistentStorage.set(storageKey, serialized)\n      }\n    } catch (error) {\n      console.warn('Failed to save to persistent storage:', error)\n    }\n  }\n\n  private async loadFromPersistentStorage<T>(key: string): Promise<CacheEntry<T> | null> {\n    try {\n      if (!this.config.enablePersistence) return null\n      \n      const storageKey = `cache_${key}`\n      let serialized: string | null\n      \n      if (typeof localStorage !== 'undefined') {\n        serialized = localStorage.getItem(storageKey)\n      } else {\n        serialized = this.persistentStorage.get(storageKey) || null\n      }\n      \n      if (!serialized) return null\n      \n      const parsed = JSON.parse(serialized)\n      \n      // 转换ISO字符串回Date对象\n      return {\n        ...parsed,\n        metadata: {\n          ...parsed.metadata,\n          createdAt: new Date(parsed.metadata.createdAt),\n          accessedAt: new Date(parsed.metadata.accessedAt)\n        }\n      }\n    } catch (error) {\n      console.warn('Failed to load from persistent storage:', error)\n      return null\n    }\n  }\n\n  private async deleteFromPersistentStorage(key: string): Promise<void> {\n    try {\n      if (!this.config.enablePersistence) return\n      \n      const storageKey = `cache_${key}`\n      \n      if (typeof localStorage !== 'undefined') {\n        localStorage.removeItem(storageKey)\n      } else {\n        this.persistentStorage.delete(storageKey)\n      }\n    } catch (error) {\n      console.warn('Failed to delete from persistent storage:', error)\n    }\n  }\n\n  private async clearPersistentStorage(): Promise<void> {\n    try {\n      if (typeof localStorage !== 'undefined') {\n        // 清除所有cache_前缀的项\n        for (let i = 0; i < localStorage.length; i++) {\n          const key = localStorage.key(i)\n          if (key?.startsWith('cache_')) {\n            localStorage.removeItem(key)\n          }\n        }\n      } else {\n        this.persistentStorage.clear()\n      }\n    } catch (error) {\n      console.warn('Failed to clear persistent storage:', error)\n    }\n  }\n\n  // ============================================================================\n  // 统计和监控\n  // ============================================================================\n\n  private initializeStats(): void {\n    this.stats = {\n      totalEntries: 0,\n      hitCount: 0,\n      missCount: 0,\n      evictionCount: 0,\n      compressionRatio: 0,\n      memoryUsage: 0,\n      hitRate: 0,\n      avgAccessTime: 0,\n      byStrategy: {\n        [CacheStrategy.LRU]: { hits: 0, misses: 0, evictions: 0 },\n        [CacheStrategy.LFU]: { hits: 0, misses: 0, evictions: 0 },\n        [CacheStrategy.FIFO]: { hits: 0, misses: 0, evictions: 0 },\n        [CacheStrategy.TTL]: { hits: 0, misses: 0, evictions: 0 },\n        [CacheStrategy.ADAPTIVE]: { hits: 0, misses: 0, evictions: 0 }\n      },\n      byEntityType: {}\n    }\n  }\n\n  private updateStats(): void {\n    this.stats.totalEntries = this.cache.size\n    this.stats.hitRate = this.calculateOverallHitRate()\n    this.stats.memoryUsage = this.getCurrentMemoryUsage()\n    this.stats.compressionRatio = this.calculateCompressionRatio()\n  }\n\n  private recordHit(key: string, accessTime: number): void {\n    this.stats.hitCount++\n    this.stats.byStrategy[this.config.strategy].hits++\n    \n    // 更新实体类型统计\n    const entityType = this.extractEntityType(key)\n    if (!this.stats.byEntityType[entityType]) {\n      this.stats.byEntityType[entityType] = { entries: 0, hits: 0, misses: 0 }\n    }\n    this.stats.byEntityType[entityType].hits++\n    \n    // 记录访问日志\n    this.accessLog.push({ key, timestamp: new Date(), type: 'hit' })\n    this.trimAccessLog()\n    \n    // 更新平均访问时间\n    this.updateAverageAccessTime(accessTime)\n    \n    this.updateStats()\n  }\n\n  private recordMiss(key: string, accessTime: number): void {\n    this.stats.missCount++\n    this.stats.byStrategy[this.config.strategy].misses++\n    \n    // 更新实体类型统计\n    const entityType = this.extractEntityType(key)\n    if (!this.stats.byEntityType[entityType]) {\n      this.stats.byEntityType[entityType] = { entries: 0, hits: 0, misses: 0 }\n    }\n    this.stats.byEntityType[entityType].misses++\n    \n    // 记录访问日志\n    this.accessLog.push({ key, timestamp: new Date(), type: 'miss' })\n    this.trimAccessLog()\n    \n    // 更新平均访问时间\n    this.updateAverageAccessTime(accessTime)\n    \n    this.updateStats()\n  }\n\n  private updateAverageAccessTime(accessTime: number): void {\n    const totalRequests = this.stats.hitCount + this.stats.missCount\n    const totalTime = this.stats.avgAccessTime * (totalRequests - 1) + accessTime\n    this.stats.avgAccessTime = totalTime / totalRequests\n  }\n\n  private trimAccessLog(): void {\n    // 保持最近1000条记录\n    if (this.accessLog.length > 1000) {\n      this.accessLog = this.accessLog.slice(-1000)\n    }\n  }\n\n  private calculateOverallHitRate(): number {\n    const total = this.stats.hitCount + this.stats.missCount\n    return total > 0 ? this.stats.hitCount / total : 0\n  }\n\n  private calculateHitRate(key: string): number {\n    const keyAccesses = this.accessLog.filter(log => log.key === key)\n    if (keyAccesses.length === 0) return 0\n    \n    const hits = keyAccesses.filter(log => log.type === 'hit').length\n    return hits / keyAccesses.length\n  }\n\n  private getCurrentMemoryUsage(): number {\n    let totalSize = 0\n    this.cache.forEach(entry => {\n      totalSize += entry.metadata.size\n    })\n    return totalSize\n  }\n\n  private calculateCompressionRatio(): number {\n    let compressedSize = 0\n    let originalSize = 0\n    \n    this.cache.forEach(entry => {\n      if (entry.metadata.compressed) {\n        compressedSize += entry.metadata.size\n        // 估算原始大小（压缩前的大小）\n        originalSize += entry.metadata.size * 2.5 // 假设压缩率为60%\n      }\n    })\n    \n    return originalSize > 0 ? compressedSize / originalSize : 0\n  }\n\n  private calculateDataSize(data: any): number {\n    try {\n      return JSON.stringify(data).length * 2 // 简化的字节估算\n    } catch {\n      return 1024 // 默认1KB\n    }\n  }\n\n  private extractEntityType(key: string): string {\n    const parts = key.split(':')\n    return parts[0] || 'unknown'\n  }\n\n  // ============================================================================\n  // 缓存预热和预测\n  // ============================================================================\n\n  private async generateAccessPredictions(): Promise<Array<{\n    key: string\n    probability: number\n    ttl: number\n    priority: 'high' | 'normal' | 'low'\n    entityType: string\n  }>> {\n    const predictions: Array<{\n      key: string\n      probability: number\n      ttl: number\n      priority: 'high' | 'normal' | 'low'\n      entityType: string\n    }> = []\n    \n    // 基于访问模式分析\n    const recentAccesses = this.accessLog\n      .filter(log => log.timestamp.getTime() > Date.now() - 24 * 60 * 60 * 1000) // 最近24小时\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\n    \n    // 分析高频访问的键\n    const keyFrequency = new Map<string, number>()\n    recentAccesses.forEach(access => {\n      keyFrequency.set(access.key, (keyFrequency.get(access.key) || 0) + 1)\n    })\n    \n    // 为高频键生成预测\n    keyFrequency.forEach((frequency, key) => {\n      if (frequency > 3) { // 访问次数超过3次\n        const probability = Math.min(frequency / 10, 0.9)\n        const entityType = this.extractEntityType(key)\n        \n        predictions.push({\n          key,\n          probability,\n          ttl: this.config.defaultTTL,\n          priority: frequency > 5 ? 'high' : 'normal',\n          entityType\n        })\n      }\n    })\n    \n    return predictions.sort((a, b) => b.probability - a.probability)\n  }\n\n  private async fetchDataForPrediction(prediction: any): Promise<any> {\n    // 这里应该根据预测的key获取实际数据\n    // 实现取决于具体的业务逻辑\n    return null\n  }\n\n  // ============================================================================\n  // 辅助方法\n  // ============================================================================\n\n  private isExpired(entry: CacheEntry<any>): boolean {\n    return Date.now() - entry.metadata.createdAt.getTime() > entry.metadata.ttl\n  }\n\n  private updateAccessInfo(entry: CacheEntry<any>): void {\n    entry.metadata.accessedAt = new Date()\n    entry.metadata.accessCount++\n  }\n\n  private evictEntry(key: string): void {\n    const entry = this.cache.get(key)\n    if (entry) {\n      this.cache.delete(key)\n      this.stats.evictionCount++\n      this.stats.byStrategy[this.config.strategy].evictions++\n      \n      // 从持久化存储中删除\n      if (this.config.enablePersistence) {\n        this.deleteFromPersistentStorage(key).catch(console.error)\n      }\n    }\n  }\n\n  private startCleanupTimer(): void {\n    this.cleanupTimer = setInterval(() => {\n      this.performCleanup()\n    }, this.config.cleanupInterval)\n  }\n\n  private async performCleanup(): Promise<void> {\n    try {\n      // 清理过期条目\n      const expiredKeys: string[] = []\n      this.cache.forEach((entry, key) => {\n        if (this.isExpired(entry)) {\n          expiredKeys.push(key)\n        }\n      })\n      \n      for (const key of expiredKeys) {\n        this.evictEntry(key)\n      }\n      \n      // 清理持久化存储中的过期条目\n      if (this.config.enablePersistence) {\n        await this.cleanupPersistentStorage()\n      }\n      \n      // 更新统计\n      this.updateStats()\n    } catch (error) {\n      console.error('Cache cleanup failed:', error)\n    }\n  }\n\n  private async cleanupPersistentStorage(): Promise<void> {\n    try {\n      if (typeof localStorage !== 'undefined') {\n        const keysToRemove: string[] = []\n        \n        for (let i = 0; i < localStorage.length; i++) {\n          const key = localStorage.key(i)\n          if (key?.startsWith('cache_')) {\n            try {\n              const serialized = localStorage.getItem(key)\n              if (serialized) {\n                const entry = JSON.parse(serialized)\n                const entryDate = new Date(entry.metadata.createdAt)\n                \n                if (Date.now() - entryDate.getTime() > entry.metadata.ttl) {\n                  keysToRemove.push(key)\n                }\n              }\n            } catch {\n              // 无效数据，删除\n              keysToRemove.push(key)\n            }\n          }\n        }\n        \n        keysToRemove.forEach(key => localStorage.removeItem(key))\n      }\n    } catch (error) {\n      console.warn('Persistent storage cleanup failed:', error)\n    }\n  }\n\n  private initializeCache(): void {\n    // 从持久化存储恢复缓存\n    if (this.config.enablePersistence) {\n      this.loadFromPersistentStorageAsync().catch(console.error)\n    }\n    \n    // 启动预测性预热\n    setTimeout(() => {\n      this.predictiveWarmup().catch(console.error)\n    }, 5000) // 5秒后开始预热\n  }\n\n  private async loadFromPersistentStorageAsync(): Promise<void> {\n    try {\n      if (typeof localStorage !== 'undefined') {\n        const keysToLoad: string[] = []\n        \n        for (let i = 0; i < localStorage.length; i++) {\n          const key = localStorage.key(i)\n          if (key?.startsWith('cache_')) {\n            keysToLoad.push(key)\n          }\n        }\n        \n        // 限制恢复的条目数量以避免内存溢出\n        const loadLimit = Math.min(keysToLoad.length, this.config.maxEntries / 2)\n        \n        for (let i = 0; i < loadLimit; i++) {\n          const storageKey = keysToLoad[i]\n          const cacheKey = storageKey.replace('cache_', '')\n          \n          try {\n            const entry = await this.loadFromPersistentStorage(cacheKey)\n            if (entry && !this.isExpired(entry)) {\n              this.cache.set(cacheKey, entry)\n            } else {\n              // 删除过期条目\n              localStorage.removeItem(storageKey)\n            }\n          } catch (error) {\n            console.warn(`Failed to load cache entry ${cacheKey}:`, error)\n            localStorage.removeItem(storageKey)\n          }\n        }\n      }\n    } catch (error) {\n      console.warn('Failed to load cache from persistent storage:', error)\n    }\n  }\n\n  // ============================================================================\n  // 公共API方法\n  // ============================================================================\n\n  /**\n   * 获取缓存统计信息\n   */\n  getStats(): CacheStats {\n    return { ...this.stats }\n  }\n\n  /**\n   * 获取缓存配置\n   */\n  getConfig(): CacheConfig {\n    return { ...this.config }\n  }\n\n  /**\n   * 更新缓存配置\n   */\n  updateConfig(newConfig: Partial<CacheConfig>): void {\n    this.config = { ...this.config, ...newConfig }\n    \n    // 如果清理间隔改变，重启定时器\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer)\n    }\n    this.startCleanupTimer()\n  }\n\n  /**\n   * 添加预热策略\n   */\n  addWarmupStrategy(strategy: WarmupStrategy): void {\n    this.warmupStrategies.push(strategy)\n    this.warmupStrategies.sort((a, b) => b.priority - a.priority)\n  }\n\n  /**\n   * 手动触发缓存预热\n   */\n  async warmup(): Promise<void> {\n    await this.predictiveWarmup()\n  }\n\n  /**\n   * 获取缓存中的所有键\n   */\n  getKeys(): string[] {\n    return Array.from(this.cache.keys())\n  }\n\n  /**\n   * 检查键是否存在\n   */\n  has(key: string): boolean {\n    return this.cache.has(key)\n  }\n\n  /**\n   * 获取缓存大小\n   */\n  size(): number {\n    return this.cache.size\n  }\n\n  /**\n   * 停止缓存管理器\n   */\n  stop(): void {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer)\n      this.cleanupTimer = undefined\n    }\n  }\n}\n\n// ============================================================================\n// 导出单例实例\n// ============================================================================\n\nexport const advancedCacheManager = new AdvancedCacheManager()\n\n// ============================================================================\n// 针对特定实体类型的缓存包装器\n// ============================================================================\n\nexport class CardCache {\n  constructor(private cacheManager: AdvancedCacheManager) {}\n\n  async getCard(cardId: string): Promise<Card | null> {\n    return this.cacheManager.get<Card>(`card:${cardId}`)\n  }\n\n  async setCard(cardId: string, card: Card): Promise<void> {\n    await this.cacheManager.set(`card:${cardId}`, card, {\n      tags: ['card', 'data'],\n      priority: 'normal',\n      ttl: 10 * 60 * 1000 // 10分钟\n    })\n  }\n\n  async getCardsByFolder(folderId: string): Promise<Card[]> {\n    return this.cacheManager.get<Card[]>(`cards:folder:${folderId}`)\n  }\n\n  async setCardsByFolder(folderId: string, cards: Card[]): Promise<void> {\n    await this.cacheManager.set(`cards:folder:${folderId}`, cards, {\n      tags: ['cards', 'folder', 'list'],\n      priority: 'normal',\n      ttl: 5 * 60 * 1000 // 5分钟\n    })\n  }\n\n  async invalidateCard(cardId: string): Promise<void> {\n    await this.cacheManager.delete(`card:${cardId}`)\n  }\n\n  async invalidateFolder(folderId: string): Promise<void> {\n    await this.cacheManager.delete(`cards:folder:${folderId}`)\n  }\n}\n\nexport const cardCache = new CardCache(advancedCacheManager)\n\n// ============================================================================\n// 便利方法导出\n// ============================================================================\n\nexport const cacheGet = <T>(key: string) => advancedCacheManager.get<T>(key)\nexport const cacheSet = <T>(key: string, data: T, options?: any) => \n  advancedCacheManager.set(key, data, options)\nexport const cacheDelete = (key: string) => advancedCacheManager.delete(key)\nexport const cacheClear = () => advancedCacheManager.clear()\nexport const cacheStats = () => advancedCacheManager.getStats()"],"version":3}
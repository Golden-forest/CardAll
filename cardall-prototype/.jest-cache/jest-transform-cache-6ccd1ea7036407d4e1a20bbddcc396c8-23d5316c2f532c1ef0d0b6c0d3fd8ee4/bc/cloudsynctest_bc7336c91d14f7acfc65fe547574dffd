1d632b49237a961c2b1474e7269749e2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// 云端同步服务单元测试
const cloud_sync_1 = require("../../../src/services/cloud-sync");
const mock_services_1 = require("../../fixtures/mock-services");
const test_utils_1 = require("../../test-utils");
// 设置测试环境
beforeAll(() => {
    mock_services_1.mockServer.listen();
});
afterEach(() => {
    mock_services_1.mockServer.resetHandlers();
});
afterAll(() => {
    mock_services_1.mockServer.close();
});
describe('CloudSyncService', () => {
    describe('基本同步功能', () => {
        it('应该能够成功同步卡片数据', async () => {
            const cardData = test_utils_1.mockDataUtils.generateTestCard();
            await expect(cloud_sync_1.cloudSyncService.syncCard(cardData)).resolves.not.toThrow();
        });
        it('应该能够同步文件夹数据', async () => {
            const folderData = test_utils_1.mockDataUtils.generateTestFolder();
            await expect(cloud_sync_1.cloudSyncService.syncFolder(folderData)).resolves.not.toThrow();
        });
        it('应该能够同步标签数据', async () => {
            const tagData = test_utils_1.mockDataUtils.generateTestTag();
            await expect(cloud_sync_1.cloudSyncService.syncTag(tagData)).resolves.not.toThrow();
        });
    });
    describe('队列管理', () => {
        it('应该能够添加操作到队列', async () => {
            const operation = {
                type: 'create',
                entityType: 'card',
                entityId: 'test-card-id',
                data: test_utils_1.mockDataUtils.generateTestCard(),
            };
            await cloud_sync_1.cloudSyncService.addToQueue(operation);
            const queue = await cloud_sync_1.cloudSyncService.getQueue();
            expect(queue).toHaveLength(1);
            expect(queue[0].entityId).toBe('test-card-id');
        });
        it('应该能够处理队列中的操作', async () => {
            const operation = {
                type: 'create',
                entityType: 'card',
                entityId: 'test-card-id',
                data: test_utils_1.mockDataUtils.generateTestCard(),
            };
            await cloud_sync_1.cloudSyncService.addToQueue(operation);
            await cloud_sync_1.cloudSyncService.processQueue();
            const queue = await cloud_sync_1.cloudSyncService.getQueue();
            expect(queue).toHaveLength(0);
        });
        it('应该能够清除队列', async () => {
            // 添加多个操作到队列
            for (let i = 0; i < 3; i++) {
                await cloud_sync_1.cloudSyncService.addToQueue({
                    type: 'create',
                    entityType: 'card',
                    entityId: `card-${i}`,
                    data: test_utils_1.mockDataUtils.generateTestCard(),
                });
            }
            await cloud_sync_1.cloudSyncService.clearQueue();
            const queue = await cloud_sync_1.cloudSyncService.getQueue();
            expect(queue).toHaveLength(0);
        });
    });
    describe('错误处理', () => {
        it('应该处理网络错误', async () => {
            // 模拟网络错误
            mock_services_1.mockServer.use(rest.post('/api/sync', (req, res) => {
                return res.networkError('Failed to connect');
            }));
            const cardData = test_utils_1.mockDataUtils.generateTestCard();
            await expect(cloud_sync_1.cloudSyncService.syncCard(cardData)).rejects.toThrow();
        });
        it('应该重试失败的操作', async () => {
            // 模拟服务器错误
            mock_services_1.mockServer.use(rest.post('/api/sync', (req, res, ctx) => {
                return res(ctx.status(500));
            }));
            const cardData = test_utils_1.mockDataUtils.generateTestCard();
            // 第一次尝试应该失败
            await expect(cloud_sync_1.cloudSyncService.syncCard(cardData)).rejects.toThrow();
            // 检查是否添加到重试队列
            const retryQueue = await cloud_sync_1.cloudSyncService.getRetryQueue();
            expect(retryQueue).toHaveLength(1);
        });
        it('应该处理认证错误', async () => {
            // 模拟认证错误
            mock_services_1.mockServer.use(rest.post('/api/sync', (req, res, ctx) => {
                return res(ctx.status(401));
            }));
            const cardData = test_utils_1.mockDataUtils.generateTestCard();
            await expect(cloud_sync_1.cloudSyncService.syncCard(cardData)).rejects.toThrow();
        });
    });
    describe('冲突解决', () => {
        it('应该检测数据冲突', async () => {
            const localCard = test_utils_1.mockDataUtils.generateTestCard({
                id: 'conflict-card',
                title: 'Local Version',
            });
            const remoteCard = test_utils_1.mockDataUtils.generateTestCard({
                id: 'conflict-card',
                title: 'Remote Version',
            });
            const hasConflict = await cloud_sync_1.cloudSyncService.checkConflict(localCard, remoteCard);
            expect(hasConflict).toBe(true);
        });
        it('应该能够合并冲突数据', async () => {
            const localCard = test_utils_1.mockDataUtils.generateTestCard({
                id: 'conflict-card',
                title: 'Local Version',
                content: 'Local content',
            });
            const remoteCard = test_utils_1.mockDataUtils.generateTestCard({
                id: 'conflict-card',
                title: 'Remote Version',
                tags: ['remote-tag'],
            });
            const mergedCard = await cloud_sync_1.cloudSyncService.mergeConflict(localCard, remoteCard);
            expect(mergedCard.title).toBe('Remote Version'); // 远程优先
            expect(mergedCard.content).toBe('Local content'); // 保留本地内容
            expect(mergedCard.tags).toContain('remote-tag');
        });
        it('应该处理冲突解决策略', async () => {
            const strategy = 'local';
            const localCard = test_utils_1.mockDataUtils.generateTestCard({
                title: 'Local Version',
            });
            const remoteCard = test_utils_1.mockDataUtils.generateTestCard({
                title: 'Remote Version',
            });
            const resolvedCard = await cloud_sync_1.cloudSyncService.resolveConflict(localCard, remoteCard, strategy);
            expect(resolvedCard.title).toBe('Local Version');
        });
    });
    describe('离线支持', () => {
        it('应该检测离线状态', async () => {
            test_utils_1.networkUtils.simulateOffline();
            const isOnline = await cloud_sync_1.cloudSyncService.checkOnlineStatus();
            expect(isOnline).toBe(false);
            test_utils_1.networkUtils.simulateOnline();
        });
        it('应该在离线时缓存操作', async () => {
            test_utils_1.networkUtils.simulateOffline();
            const cardData = test_utils_1.mockDataUtils.generateTestCard();
            await cloud_sync_1.cloudSyncService.syncCard(cardData);
            const cachedOperations = await cloud_sync_1.cloudSyncService.getCachedOperations();
            expect(cachedOperations).toHaveLength(1);
            test_utils_1.networkUtils.simulateOnline();
        });
        it('应该在恢复在线后同步缓存操作', async () => {
            // 模拟离线并缓存操作
            test_utils_1.networkUtils.simulateOffline();
            const cardData = test_utils_1.mockDataUtils.generateTestCard();
            await cloud_sync_1.cloudSyncService.syncCard(cardData);
            // 恢复在线
            test_utils_1.networkUtils.simulateOnline();
            // 触发同步
            await cloud_sync_1.cloudSyncService.syncCachedOperations();
            const cachedOperations = await cloud_sync_1.cloudSyncService.getCachedOperations();
            expect(cachedOperations).toHaveLength(0);
        });
    });
    describe('性能优化', () => {
        it('应该批量处理操作', async () => {
            const operations = [];
            for (let i = 0; i < 10; i++) {
                operations.push({
                    type: 'create',
                    entityType: 'card',
                    entityId: `card-${i}`,
                    data: test_utils_1.mockDataUtils.generateTestCard(),
                });
            }
            const startTime = performance.now();
            await cloud_sync_1.cloudSyncService.batchSync(operations);
            const endTime = performance.now();
            expect(endTime - startTime).toBeLessThan(1000); // 应该在1秒内完成
        });
        it('应该限制并发请求数量', async () => {
            const operations = [];
            for (let i = 0; i < 50; i++) {
                operations.push({
                    type: 'create',
                    entityType: 'card',
                    entityId: `card-${i}`,
                    data: test_utils_1.mockDataUtils.generateTestCard(),
                });
            }
            await cloud_sync_1.cloudSyncService.batchSync(operations);
            // 验证没有过多的并发请求
            const activeRequests = cloud_sync_1.cloudSyncService.getActiveRequestCount();
            expect(activeRequests).toBeLessThanOrEqual(5); // 假设最大并发数为5
        });
    });
    describe('数据完整性', () => {
        it('应该验证数据完整性', async () => {
            const cardData = test_utils_1.mockDataUtils.generateTestCard();
            const isValid = await cloud_sync_1.cloudSyncService.validateData(cardData);
            expect(isValid).toBe(true);
        });
        it('应该检测损坏的数据', async () => {
            const corruptedData = {
                ...test_utils_1.mockDataUtils.generateTestCard(),
                content: null, // 损坏的数据
            };
            const isValid = await cloud_sync_1.cloudSyncService.validateData(corruptedData);
            expect(isValid).toBe(false);
        });
        it('应该修复损坏的数据', async () => {
            const corruptedData = {
                ...test_utils_1.mockDataUtils.generateTestCard(),
                content: null,
            };
            const fixedData = await cloud_sync_1.cloudSyncService.repairData(corruptedData);
            expect(fixedData.content).toBeDefined();
        });
    });
    describe('状态管理', () => {
        it('应该正确报告同步状态', async () => {
            const status = await cloud_sync_1.cloudSyncService.getSyncStatus();
            expect(status).toHaveProperty('isSyncing');
            expect(status).toHaveProperty('queueLength');
            expect(status).toHaveProperty('lastSyncTime');
            expect(status).toHaveProperty('errorCount');
        });
        it('应该能够暂停和恢复同步', async () => {
            await cloud_sync_1.cloudSyncService.pauseSync();
            const status = await cloud_sync_1.cloudSyncService.getSyncStatus();
            expect(status.isSyncing).toBe(false);
            await cloud_sync_1.cloudSyncService.resumeSync();
            const resumedStatus = await cloud_sync_1.cloudSyncService.getSyncStatus();
            expect(resumedStatus.isSyncing).toBe(true);
        });
        it('应该能够取消正在进行的同步', async () => {
            // 开始一个长时间运行的同步
            const syncPromise = cloud_sync_1.cloudSyncService.syncLargeDataset();
            // 取消同步
            await cloud_sync_1.cloudSyncService.cancelSync();
            // 验证同步被取消
            const status = await cloud_sync_1.cloudSyncService.getSyncStatus();
            expect(status.isSyncing).toBe(false);
        });
    });
    describe('配置和选项', () => {
        it('应该允许配置同步间隔', async () => {
            await cloud_sync_1.cloudSyncService.configure({
                syncInterval: 5000, // 5秒
                maxRetries: 3,
                batchSize: 10,
            });
            const config = await cloud_sync_1.cloudSyncService.getConfiguration();
            expect(config.syncInterval).toBe(5000);
        });
        it('应该允许配置重试策略', async () => {
            await cloud_sync_1.cloudSyncService.configure({
                retryStrategy: 'exponential',
                initialDelay: 1000,
                maxDelay: 30000,
            });
            const config = await cloud_sync_1.cloudSyncService.getConfiguration();
            expect(config.retryStrategy).toBe('exponential');
        });
        it('应该允许配置数据压缩', async () => {
            await cloud_sync_1.cloudSyncService.configure({
                enableCompression: true,
                compressionThreshold: 1024, // 1KB
            });
            const config = await cloud_sync_1.cloudSyncService.getConfiguration();
            expect(config.enableCompression).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\hooks\\use-folders.ts","mappings":";;AAsCA,gCAsLC;AA5ND,iCAAwD;AAGxD,4BAA4B;AAC5B,MAAM,WAAW,GAAa;IAC5B;QACE,EAAE,EAAE,UAAU;QACd,IAAI,EAAE,aAAa;QACnB,KAAK,EAAE,SAAS;QAChB,IAAI,EAAE,MAAM;QACZ,OAAO,EAAE,CAAC,GAAG,CAAC;QACd,UAAU,EAAE,IAAI;QAChB,SAAS,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC;QACjC,SAAS,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC;KAClC;IACD;QACE,EAAE,EAAE,UAAU;QACd,IAAI,EAAE,kBAAkB;QACxB,KAAK,EAAE,SAAS;QAChB,IAAI,EAAE,SAAS;QACf,OAAO,EAAE,EAAE;QACX,UAAU,EAAE,KAAK;QACjB,SAAS,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC;QACjC,SAAS,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC;KAClC;IACD;QACE,EAAE,EAAE,UAAU;QACd,IAAI,EAAE,gBAAgB;QACtB,KAAK,EAAE,SAAS;QAChB,IAAI,EAAE,UAAU;QAChB,OAAO,EAAE,CAAC,GAAG,CAAC;QACd,QAAQ,EAAE,UAAU;QACpB,UAAU,EAAE,IAAI;QAChB,SAAS,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC;QACjC,SAAS,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC;KAClC;CACF,CAAA;AAED,SAAgB,UAAU;IACxB,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,IAAA,gBAAQ,EAAW,WAAW,CAAC,CAAA;IAC7D,MAAM,CAAC,gBAAgB,EAAE,mBAAmB,CAAC,GAAG,IAAA,gBAAQ,EAAgB,IAAI,CAAC,CAAA;IAE7E,4BAA4B;IAC5B,MAAM,aAAa,GAAG,IAAA,mBAAW,EAAC,GAAG,EAAE;QACrC,MAAM,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;QAE9D,MAAM,SAAS,GAAG,CAAC,aAAuB,EAAuC,EAAE;YACjF,OAAO,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;gBAClC,GAAG,MAAM;gBACT,QAAQ,EAAE,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,MAAM,CAAC,EAAE,CAAC,CAAC;aACnE,CAAC,CAAC,CAAA;QACL,CAAC,CAAA;QAED,OAAO,SAAS,CAAC,WAAW,CAAC,CAAA;IAC/B,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAA;IAEb,iBAAiB;IACjB,MAAM,QAAQ,GAAG,IAAA,mBAAW,EAAC,CAAC,MAAoB,EAAE,EAAE;QACpD,UAAU,CAAC,WAAW,CAAC,EAAE;YACvB,QAAQ,MAAM,CAAC,IAAI,EAAE,CAAC;gBACpB,KAAK,eAAe;oBAClB,MAAM,SAAS,GAAW;wBACxB,GAAG,MAAM,CAAC,OAAO;wBACjB,EAAE,EAAE,UAAU,IAAI,CAAC,GAAG,EAAE,EAAE;wBAC1B,OAAO,EAAE,EAAE;wBACX,SAAS,EAAE,IAAI,IAAI,EAAE;wBACrB,SAAS,EAAE,IAAI,IAAI,EAAE;qBACtB,CAAA;oBACD,OAAO,CAAC,GAAG,WAAW,EAAE,SAAS,CAAC,CAAA;gBAEpC,KAAK,eAAe;oBAClB,OAAO,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAC9B,MAAM,CAAC,EAAE,KAAK,MAAM,CAAC,OAAO,CAAC,EAAE;wBAC7B,CAAC,CAAC,EAAE,GAAG,MAAM,EAAE,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,SAAS,EAAE,IAAI,IAAI,EAAE,EAAE;wBACjE,CAAC,CAAC,MAAM,CACX,CAAA;gBAEH,KAAK,eAAe;oBAClB,MAAM,cAAc,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,MAAM,CAAC,OAAO,CAAC,CAAA;oBACrE,IAAI,cAAc,EAAE,CAAC;wBACnB,oCAAoC;wBACpC,MAAM,kBAAkB,GAAG,CAAC,QAAgB,EAAY,EAAE;4BACxD,MAAM,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAA;4BACjE,MAAM,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAA;4BACxC,MAAM,aAAa,GAAG,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAA;4BAC7E,OAAO,CAAC,GAAG,QAAQ,EAAE,GAAG,aAAa,CAAC,CAAA;wBACxC,CAAC,CAAA;wBAED,MAAM,iBAAiB,GAAG,kBAAkB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA;wBAC5D,MAAM,kBAAkB,GAAG,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,iBAAiB,CAAC,CAAA;wBAEjE,8CAA8C;wBAC9C,MAAM,kBAAkB,GAAG,WAAW;6BACnC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,kBAAkB,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;6BACxD,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA;wBAEpC,qDAAqD;wBACrD,IAAI,eAAe,IAAI,MAAM,IAAI,MAAM,CAAC,aAAa,IAAI,kBAAkB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;4BACvF,MAAM,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAA;wBAC1C,CAAC;wBAED,OAAO,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,kBAAkB,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAA;oBAC9E,CAAC;oBACD,OAAO,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,KAAK,MAAM,CAAC,OAAO,CAAC,CAAA;gBAEnE,KAAK,eAAe;oBAClB,OAAO,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAC9B,MAAM,CAAC,EAAE,KAAK,MAAM,CAAC,OAAO;wBAC1B,CAAC,CAAC,EAAE,GAAG,MAAM,EAAE,UAAU,EAAE,CAAC,MAAM,CAAC,UAAU,EAAE,SAAS,EAAE,IAAI,IAAI,EAAE,EAAE;wBACtE,CAAC,CAAC,MAAM,CACX,CAAA;gBAEH;oBACE,OAAO,WAAW,CAAA;YACtB,CAAC;QACH,CAAC,CAAC,CAAA;IACJ,CAAC,EAAE,EAAE,CAAC,CAAA;IAEN,oBAAoB;IACpB,MAAM,aAAa,GAAG,IAAA,mBAAW,EAAC,CAAC,EAAU,EAAE,EAAE;QAC/C,OAAO,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC,CAAA;IACjD,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAA;IAEb,MAAM,aAAa,GAAG,IAAA,mBAAW,EAAC,CAAC,QAAgB,EAAY,EAAE;QAC/D,MAAM,IAAI,GAAa,EAAE,CAAA;QACzB,IAAI,aAAa,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAA;QAE3C,OAAO,aAAa,EAAE,CAAC;YACrB,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAA;YAC3B,aAAa,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAA;QACvF,CAAC;QAED,OAAO,IAAI,CAAA;IACb,CAAC,EAAE,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC,CAAA;IAE5B,MAAM,eAAe,GAAG,IAAA,mBAAW,EAAC,CAAC,MAAc,EAAE,QAAgB,EAAE,EAAE;QACvE,QAAQ,CAAC;YACP,IAAI,EAAE,eAAe;YACrB,OAAO,EAAE;gBACP,EAAE,EAAE,QAAQ;gBACZ,OAAO,EAAE;oBACP,OAAO,EAAE,CAAC,GAAG,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,OAAO,IAAI,EAAE,CAAC,EAAE,MAAM,CAAC;iBAC/D;aACF;SACF,CAAC,CAAA;IACJ,CAAC,EAAE,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC,CAAA;IAE7B,MAAM,oBAAoB,GAAG,IAAA,mBAAW,EAAC,CAAC,MAAc,EAAE,QAAgB,EAAE,EAAE;QAC5E,MAAM,MAAM,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAA;QACtC,IAAI,MAAM,EAAE,CAAC;YACX,QAAQ,CAAC;gBACP,IAAI,EAAE,eAAe;gBACrB,OAAO,EAAE;oBACP,EAAE,EAAE,QAAQ;oBACZ,OAAO,EAAE;wBACP,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,MAAM,CAAC;qBACpD;iBACF;aACF,CAAC,CAAA;QACJ,CAAC;IACH,CAAC,EAAE,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC,CAAA;IAE7B,MAAM,sBAAsB,GAAG,IAAA,mBAAW,EAAC,CAAC,MAAc,EAAE,YAA2B,EAAE,UAAyB,EAAE,EAAE;QACpH,IAAI,YAAY,EAAE,CAAC;YACjB,oBAAoB,CAAC,MAAM,EAAE,YAAY,CAAC,CAAA;QAC5C,CAAC;QACD,IAAI,UAAU,EAAE,CAAC;YACf,eAAe,CAAC,MAAM,EAAE,UAAU,CAAC,CAAA;QACrC,CAAC;IACH,CAAC,EAAE,CAAC,eAAe,EAAE,oBAAoB,CAAC,CAAC,CAAA;IAE3C,MAAM,aAAa,GAAG,IAAA,mBAAW,EAAC,CAAC,QAAgB,EAAE,cAA6B,EAAW,EAAE;QAC7F,iDAAiD;QACjD,IAAI,QAAQ,KAAK,cAAc;YAAE,OAAO,KAAK,CAAA;QAE7C,IAAI,aAAa,GAAG,cAAc,CAAA;QAClC,OAAO,aAAa,EAAE,CAAC;YACrB,IAAI,aAAa,KAAK,QAAQ;gBAAE,OAAO,KAAK,CAAA;YAC5C,MAAM,YAAY,GAAG,aAAa,CAAC,aAAa,CAAC,CAAA;YACjD,aAAa,GAAG,YAAY,EAAE,QAAQ,IAAI,IAAI,CAAA;QAChD,CAAC;QAED,OAAO,IAAI,CAAA;IACb,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAA;IAEnB,4BAA4B;IAC5B,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,MAAM,SAAS,GAAG,UAAU,CAAC,GAAG,EAAE;YAChC,YAAY,CAAC,OAAO,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAA;QAClE,CAAC,EAAE,IAAI,CAAC,CAAA;QAER,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,CAAA;IACtC,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAA;IAEb,kCAAkC;IAClC,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,MAAM,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAA;QACrD,IAAI,KAAK,EAAE,CAAC;YACV,IAAI,CAAC;gBACH,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;gBACvC,UAAU,CAAC,aAAa,CAAC,CAAA;YAC3B,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAA;YACvD,CAAC;QACH,CAAC;IACH,CAAC,EAAE,EAAE,CAAC,CAAA;IAEN,OAAO;QACL,OAAO;QACP,UAAU,EAAE,aAAa,EAAE;QAC3B,gBAAgB;QAChB,mBAAmB;QACnB,QAAQ;QACR,aAAa;QACb,aAAa;QACb,eAAe;QACf,oBAAoB;QACpB,sBAAsB;QACtB,aAAa;KACd,CAAA;AACH,CAAC","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\hooks\\use-folders.ts"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react'\r\nimport { Folder, FolderAction } from '@/types/card'\r\n\r\n// Mock data for development\r\nconst mockFolders: Folder[] = [\r\n  {\r\n    id: 'folder-1',\r\n    name: 'Development',\r\n    color: '#3b82f6',\r\n    icon: 'Code',\r\n    cardIds: ['1'],\r\n    isExpanded: true,\r\n    createdAt: new Date('2024-01-10'),\r\n    updatedAt: new Date('2024-01-15')\r\n  },\r\n  {\r\n    id: 'folder-2',\r\n    name: 'Design Resources',\r\n    color: '#8b5cf6',\r\n    icon: 'Palette',\r\n    cardIds: [],\r\n    isExpanded: false,\r\n    createdAt: new Date('2024-01-12'),\r\n    updatedAt: new Date('2024-01-12')\r\n  },\r\n  {\r\n    id: 'folder-3',\r\n    name: 'Learning Notes',\r\n    color: '#10b981',\r\n    icon: 'BookOpen',\r\n    cardIds: ['2'],\r\n    parentId: 'folder-1',\r\n    isExpanded: true,\r\n    createdAt: new Date('2024-01-14'),\r\n    updatedAt: new Date('2024-01-16')\r\n  }\r\n]\r\n\r\nexport function useFolders() {\r\n  const [folders, setFolders] = useState<Folder[]>(mockFolders)\r\n  const [selectedFolderId, setSelectedFolderId] = useState<string | null>(null)\r\n\r\n  // Get folder tree structure\r\n  const getFolderTree = useCallback(() => {\r\n    const rootFolders = folders.filter(folder => !folder.parentId)\r\n    \r\n    const buildTree = (parentFolders: Folder[]): (Folder & { children: Folder[] })[] => {\r\n      return parentFolders.map(folder => ({\r\n        ...folder,\r\n        children: buildTree(folders.filter(f => f.parentId === folder.id))\r\n      }))\r\n    }\r\n\r\n    return buildTree(rootFolders)\r\n  }, [folders])\r\n\r\n  // Folder actions\r\n  const dispatch = useCallback((action: FolderAction) => {\r\n    setFolders(prevFolders => {\r\n      switch (action.type) {\r\n        case 'CREATE_FOLDER':\r\n          const newFolder: Folder = {\r\n            ...action.payload,\r\n            id: `folder-${Date.now()}`,\r\n            cardIds: [],\r\n            createdAt: new Date(),\r\n            updatedAt: new Date()\r\n          }\r\n          return [...prevFolders, newFolder]\r\n\r\n        case 'UPDATE_FOLDER':\r\n          return prevFolders.map(folder =>\r\n            folder.id === action.payload.id\r\n              ? { ...folder, ...action.payload.updates, updatedAt: new Date() }\r\n              : folder\r\n          )\r\n\r\n        case 'DELETE_FOLDER':\r\n          const folderToDelete = prevFolders.find(f => f.id === action.payload)\r\n          if (folderToDelete) {\r\n            // Get all child folders recursively\r\n            const getAllChildFolders = (parentId: string): string[] => {\r\n              const children = prevFolders.filter(f => f.parentId === parentId)\r\n              const childIds = children.map(f => f.id)\r\n              const grandChildIds = children.flatMap(child => getAllChildFolders(child.id))\r\n              return [...childIds, ...grandChildIds]\r\n            }\r\n            \r\n            const allChildFolderIds = getAllChildFolders(action.payload)\r\n            const allFoldersToDelete = [action.payload, ...allChildFolderIds]\r\n            \r\n            // Get all card IDs from folders to be deleted\r\n            const allCardIdsToDelete = prevFolders\r\n              .filter(folder => allFoldersToDelete.includes(folder.id))\r\n              .flatMap(folder => folder.cardIds)\r\n            \r\n            // Trigger card deletion through callback if provided\r\n            if ('onDeleteCards' in action && action.onDeleteCards && allCardIdsToDelete.length > 0) {\r\n              action.onDeleteCards(allCardIdsToDelete)\r\n            }\r\n            \r\n            return prevFolders.filter(folder => !allFoldersToDelete.includes(folder.id))\r\n          }\r\n          return prevFolders.filter(folder => folder.id !== action.payload)\r\n\r\n        case 'TOGGLE_FOLDER':\r\n          return prevFolders.map(folder =>\r\n            folder.id === action.payload\r\n              ? { ...folder, isExpanded: !folder.isExpanded, updatedAt: new Date() }\r\n              : folder\r\n          )\r\n\r\n        default:\r\n          return prevFolders\r\n      }\r\n    })\r\n  }, [])\r\n\r\n  // Utility functions\r\n  const getFolderById = useCallback((id: string) => {\r\n    return folders.find(folder => folder.id === id)\r\n  }, [folders])\r\n\r\n  const getFolderPath = useCallback((folderId: string): Folder[] => {\r\n    const path: Folder[] = []\r\n    let currentFolder = getFolderById(folderId)\r\n    \r\n    while (currentFolder) {\r\n      path.unshift(currentFolder)\r\n      currentFolder = currentFolder.parentId ? getFolderById(currentFolder.parentId) : null\r\n    }\r\n    \r\n    return path\r\n  }, [folders, getFolderById])\r\n\r\n  const addCardToFolder = useCallback((cardId: string, folderId: string) => {\r\n    dispatch({\r\n      type: 'UPDATE_FOLDER',\r\n      payload: {\r\n        id: folderId,\r\n        updates: {\r\n          cardIds: [...(getFolderById(folderId)?.cardIds || []), cardId]\r\n        }\r\n      }\r\n    })\r\n  }, [dispatch, getFolderById])\r\n\r\n  const removeCardFromFolder = useCallback((cardId: string, folderId: string) => {\r\n    const folder = getFolderById(folderId)\r\n    if (folder) {\r\n      dispatch({\r\n        type: 'UPDATE_FOLDER',\r\n        payload: {\r\n          id: folderId,\r\n          updates: {\r\n            cardIds: folder.cardIds.filter(id => id !== cardId)\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }, [dispatch, getFolderById])\r\n\r\n  const moveCardBetweenFolders = useCallback((cardId: string, fromFolderId: string | null, toFolderId: string | null) => {\r\n    if (fromFolderId) {\r\n      removeCardFromFolder(cardId, fromFolderId)\r\n    }\r\n    if (toFolderId) {\r\n      addCardToFolder(cardId, toFolderId)\r\n    }\r\n  }, [addCardToFolder, removeCardFromFolder])\r\n\r\n  const canMoveFolder = useCallback((folderId: string, targetParentId: string | null): boolean => {\r\n    // Can't move folder to itself or its descendants\r\n    if (folderId === targetParentId) return false\r\n    \r\n    let currentParent = targetParentId\r\n    while (currentParent) {\r\n      if (currentParent === folderId) return false\r\n      const parentFolder = getFolderById(currentParent)\r\n      currentParent = parentFolder?.parentId ?? null\r\n    }\r\n    \r\n    return true\r\n  }, [getFolderById])\r\n\r\n  // Auto-save to localStorage\r\n  useEffect(() => {\r\n    const saveTimer = setTimeout(() => {\r\n      localStorage.setItem('cardall-folders', JSON.stringify(folders))\r\n    }, 1000)\r\n\r\n    return () => clearTimeout(saveTimer)\r\n  }, [folders])\r\n\r\n  // Load from localStorage on mount\r\n  useEffect(() => {\r\n    const saved = localStorage.getItem('cardall-folders')\r\n    if (saved) {\r\n      try {\r\n        const parsedFolders = JSON.parse(saved)\r\n        setFolders(parsedFolders)\r\n      } catch (error) {\r\n        console.error('Failed to load saved folders:', error)\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  return {\r\n    folders,\r\n    folderTree: getFolderTree(),\r\n    selectedFolderId,\r\n    setSelectedFolderId,\r\n    dispatch,\r\n    getFolderById,\r\n    getFolderPath,\r\n    addCardToFolder,\r\n    removeCardFromFolder,\r\n    moveCardBetweenFolders,\r\n    canMoveFolder\r\n  }\r\n}"],"version":3}
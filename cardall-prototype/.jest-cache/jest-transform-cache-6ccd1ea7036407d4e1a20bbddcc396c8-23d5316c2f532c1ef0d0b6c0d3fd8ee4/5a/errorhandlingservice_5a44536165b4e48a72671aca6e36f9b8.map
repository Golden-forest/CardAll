{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\error-handling\\error-handling-service.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\error-handling\\error-handling-service.ts"],"sourcesContent":["/**\n * 错误处理服务\n * 统一错误处理机制的集成服务，为同步服务提供完整的错误处理能力\n */\n\nimport {\n  unifiedErrorHandler,\n  UnifiedError,\n  ErrorCategory,\n  ErrorSubCategory,\n  ErrorLevel,\n  ErrorContext,\n  ErrorHandlingResult,\n  handleError,\n  createErrorContext\n} from './unified-error-handler'\nimport { ErrorMonitoringService } from './error-monitoring-service'\nimport { RecoveryStrategyManager } from './recovery-strategy-manager'\nimport { SelfHealingFramework } from './self-healing-framework'\nimport { networkStateDetector } from '../network-state-detector'\n\n// 错误处理服务配置\nexport interface ErrorHandlingConfig {\n  // 启用的功能\n  enableMonitoring: boolean\n  enableRecovery: boolean\n  enableSelfHealing: boolean\n\n  // 监控配置\n  monitoring: {\n    bufferSize: number\n    historySize: number\n    sampleRate: number\n  }\n\n  // 恢复配置\n  recovery: {\n    maxRetries: number\n    baseDelay: number\n    maxDelay: number\n    enableCircuitBreaker: boolean\n  }\n\n  // 自愈配置\n  selfHealing: {\n    enabled: boolean\n    autoRepair: boolean\n    learningEnabled: boolean\n    maxApplications: number\n  }\n\n  // 告警配置\n  alerts: {\n    enabled: boolean\n    severity: 'low' | 'medium' | 'high' | 'critical'\n    channels: string[]\n  }\n}\n\n// 错误处理服务接口\nexport interface ErrorHandlingService {\n  // 核心错误处理\n  handleSyncError(error: any, context?: any): Promise<ErrorHandlingResult>\n  handleNetworkError(error: any, context?: any): Promise<ErrorHandlingResult>\n  handleDataError(error: any, context?: any): Promise<ErrorHandlingResult>\n  handleSystemError(error: any, context?: any): Promise<ErrorHandlingResult>\n\n  // 监控和统计\n  getErrorStatistics(): any\n  getHealthStatus(): any\n  getRecentErrors(limit?: number): UnifiedError[]\n\n  // 配置管理\n  updateConfig(config: Partial<ErrorHandlingConfig>): void\n  getConfig(): ErrorHandlingConfig\n\n  // 恢复和自愈\n  attemptRecovery(error: UnifiedError): Promise<boolean>\n  triggerSelfHealing(error: UnifiedError): Promise<boolean>\n}\n\n/**\n * 错误处理服务实现\n */\nexport class CardAllErrorHandlingService implements ErrorHandlingService {\n  private static instance: CardAllErrorHandlingService\n  private config: ErrorHandlingConfig\n  private monitoringService: ErrorMonitoringService\n  private recoveryManager: RecoveryStrategyManager\n  private selfHealingFramework: SelfHealingFramework\n\n  private constructor(config?: Partial<ErrorHandlingConfig>) {\n    this.config = this.mergeWithDefaultConfig(config)\n    this.initializeServices()\n  }\n\n  public static getInstance(config?: Partial<ErrorHandlingConfig>): ErrorHandlingService {\n    if (!CardAllErrorHandlingService.instance) {\n      CardAllErrorHandlingService.instance = new CardAllErrorHandlingService(config)\n    }\n    return CardAllErrorHandlingService.instance\n  }\n\n  /**\n   * 处理同步错误\n   */\n  public async handleSyncError(error: any, context?: any): Promise<ErrorHandlingResult> {\n    const errorContext = this.createContext('sync', context)\n    const result = await handleError(error, errorContext)\n\n    // 记录同步特定的错误信息\n    if (result.error) {\n      result.error.operation = 'sync'\n      result.error.entity = context?.entityType\n    }\n\n    return result\n  }\n\n  /**\n   * 处理网络错误\n   */\n  public async handleNetworkError(error: any, context?: any): Promise<ErrorHandlingResult> {\n    const errorContext = this.createContext('network', context)\n    const result = await handleError(error, errorContext)\n\n    // 网络错误特殊处理\n    if (result.error?.category === ErrorCategory.NETWORK) {\n      // 检查网络状态\n      const networkState = networkStateDetector.getCurrentState()\n      result.error.details = {\n        ...result.error.details,\n        networkState,\n        timestamp: new Date()\n      }\n    }\n\n    return result\n  }\n\n  /**\n   * 处理数据错误\n   */\n  public async handleDataError(error: any, context?: any): Promise<ErrorHandlingResult> {\n    const errorContext = this.createContext('data', context)\n    const result = await handleError(error, errorContext)\n\n    // 数据错误特殊处理\n    if (result.error?.category === ErrorCategory.DATA) {\n      result.error.entity = context?.entity\n      result.error.details = {\n        ...result.error.details,\n        dataType: context?.dataType,\n        operation: context?.operation\n      }\n    }\n\n    return result\n  }\n\n  /**\n   * 处理系统错误\n   */\n  public async handleSystemError(error: any, context?: any): Promise<ErrorHandlingResult> {\n    const errorContext = this.createContext('system', context)\n    const result = await handleError(error, errorContext)\n\n    // 系统错误特殊处理\n    if (result.error?.category === ErrorCategory.SYSTEM) {\n      result.error.level = ErrorLevel.CRITICAL\n      result.error.retryable = false\n    }\n\n    return result\n  }\n\n  /**\n   * 获取错误统计信息\n   */\n  public getErrorStatistics(): any {\n    if (!this.config.enableMonitoring) {\n      return null\n    }\n\n    return this.monitoringService.getMetrics()\n  }\n\n  /**\n   * 获取健康状态\n   */\n  public getHealthStatus(): any {\n    const stats = this.getErrorStatistics()\n    const metrics = stats?.metrics || {}\n\n    // 计算健康分数\n    let healthScore = 100\n\n    // 基于错误率调整健康分数\n    if (metrics.errorRate > 0.1) healthScore -= 20\n    if (metrics.errorRate > 0.05) healthScore -= 10\n\n    // 基于恢复率调整健康分数\n    if (metrics.recoveryRate < 0.8) healthScore -= 15\n    if (metrics.recoveryRate < 0.9) healthScore -= 5\n\n    // 确定健康状态\n    let status: 'healthy' | 'degraded' | 'unhealthy'\n    if (healthScore >= 90) status = 'healthy'\n    else if (healthScore >= 70) status = 'degraded'\n    else status = 'unhealthy'\n\n    return {\n      status,\n      score: Math.max(0, healthScore),\n      timestamp: new Date(),\n      metrics,\n      recommendations: this.generateRecommendations(status, metrics)\n    }\n  }\n\n  /**\n   * 获取最近的错误\n   */\n  public getRecentErrors(limit: number = 50): UnifiedError[] {\n    if (!this.config.enableMonitoring) {\n      return []\n    }\n\n    return this.monitoringService.getRecentErrors(limit)\n  }\n\n  /**\n   * 更新配置\n   */\n  public updateConfig(newConfig: Partial<ErrorHandlingConfig>): void {\n    this.config = { ...this.config, ...newConfig }\n    this.reconfigureServices()\n  }\n\n  /**\n   * 获取当前配置\n   */\n  public getConfig(): ErrorHandlingConfig {\n    return { ...this.config }\n  }\n\n  /**\n   * 尝试恢复错误\n   */\n  public async attemptRecovery(error: UnifiedError): Promise<boolean> {\n    if (!this.config.enableRecovery) {\n      return false\n    }\n\n    try {\n      const context = createErrorContext(\n        { operation: error.operation },\n        error.userId,\n        'production'\n      )\n\n      const result = await this.recoveryManager.attemptRecovery(error, context)\n      return result.success\n    } catch (recoveryError) {\n      console.error('Recovery attempt failed:', recoveryError)\n      return false\n    }\n  }\n\n  /**\n   * 触发自愈\n   */\n  public async triggerSelfHealing(error: UnifiedError): Promise<boolean> {\n    if (!this.config.enableSelfHealing) {\n      return false\n    }\n\n    try {\n      const context = createErrorContext(\n        { operation: error.operation },\n        error.userId,\n        'production'\n      )\n\n      return await this.selfHealingFramework.attemptHealing(error, context)\n    } catch (healingError) {\n      console.error('Self-healing attempt failed:', healingError)\n      return false\n    }\n  }\n\n  /**\n   * 初始化服务\n   */\n  private initializeServices(): void {\n    // 初始化监控服务\n    if (this.config.enableMonitoring) {\n      this.monitoringService = ErrorMonitoringService.getInstance()\n    }\n\n    // 初始化恢复管理器\n    if (this.config.enableRecovery) {\n      this.recoveryManager = RecoveryStrategyManager.getInstance({\n        maxAttempts: this.config.recovery.maxRetries,\n        baseDelay: this.config.recovery.baseDelay,\n        maxDelay: this.config.recovery.maxDelay\n      })\n    }\n\n    // 初始化自愈框架\n    if (this.config.enableSelfHealing) {\n      this.selfHealingFramework = SelfHealingFramework.getInstance({\n        autoRepair: this.config.selfHealing.autoRepair,\n        learningEnabled: this.config.selfHealing.learningEnabled,\n        maxApplications: this.config.selfHealing.maxApplications\n      })\n    }\n  }\n\n  /**\n   * 重新配置服务\n   */\n  private reconfigureServices(): void {\n    // 重新初始化服务以应用新配置\n    this.initializeServices()\n  }\n\n  /**\n   * 创建错误上下文\n   */\n  private createContext(operation: string, additionalContext?: any): ErrorContext {\n    return createErrorContext(\n      { operation, ...additionalContext },\n      additionalContext?.userId,\n      additionalContext?.environment || 'development'\n    )\n  }\n\n  /**\n   * 合并默认配置\n   */\n  private mergeWithDefaultConfig(config?: Partial<ErrorHandlingConfig>): ErrorHandlingConfig {\n    const defaultConfig: ErrorHandlingConfig = {\n      enableMonitoring: true,\n      enableRecovery: true,\n      enableSelfHealing: true,\n      monitoring: {\n        bufferSize: 1000,\n        historySize: 168,\n        sampleRate: 1.0\n      },\n      recovery: {\n        maxRetries: 3,\n        baseDelay: 1000,\n        maxDelay: 30000,\n        enableCircuitBreaker: true\n      },\n      selfHealing: {\n        enabled: true,\n        autoRepair: true,\n        learningEnabled: true,\n        maxApplications: 100\n      },\n      alerts: {\n        enabled: true,\n        severity: 'medium',\n        channels: ['console']\n      }\n    }\n\n    return { ...defaultConfig, ...config }\n  }\n\n  /**\n   * 生成健康建议\n   */\n  private generateRecommendations(status: string, metrics: any): string[] {\n    const recommendations: string[] = []\n\n    if (status === 'unhealthy') {\n      recommendations.push('系统健康状况不佳，建议立即检查错误日志')\n      recommendations.push('考虑启用自动恢复机制')\n      recommendations.push('检查网络连接和服务器状态')\n    } else if (status === 'degraded') {\n      if (metrics.errorRate > 0.05) {\n        recommendations.push('错误率较高，建议检查错误模式')\n      }\n      if (metrics.recoveryRate < 0.9) {\n        recommendations.push('恢复率偏低，建议优化恢复策略')\n      }\n    }\n\n    return recommendations\n  }\n}\n\n// 导出实例\nexport const errorHandlingService = CardAllErrorHandlingService.getInstance()\n\n// 导出便捷函数\nexport const handleSyncError = (error: any, context?: any) =>\n  errorHandlingService.handleSyncError(error, context)\n\nexport const handleNetworkError = (error: any, context?: any) =>\n  errorHandlingService.handleNetworkError(error, context)\n\nexport const handleDataError = (error: any, context?: any) =>\n  errorHandlingService.handleDataError(error, context)\n\nexport const handleSystemError = (error: any, context?: any) =>\n  errorHandlingService.handleSystemError(error, context)"],"version":3}
ffbe686951d9b845d16e26406e85b9fd
"use strict";
/**
 * 错误处理服务
 * 统一错误处理机制的集成服务，为同步服务提供完整的错误处理能力
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleSystemError = exports.handleDataError = exports.handleNetworkError = exports.handleSyncError = exports.errorHandlingService = exports.CardAllErrorHandlingService = void 0;
const unified_error_handler_1 = require("./unified-error-handler");
const error_monitoring_service_1 = require("./error-monitoring-service");
const recovery_strategy_manager_1 = require("./recovery-strategy-manager");
const self_healing_framework_1 = require("./self-healing-framework");
const network_state_detector_1 = require("../network-state-detector");
/**
 * 错误处理服务实现
 */
class CardAllErrorHandlingService {
    constructor(config) {
        Object.defineProperty(this, "config", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "monitoringService", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "recoveryManager", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "selfHealingFramework", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.config = this.mergeWithDefaultConfig(config);
        this.initializeServices();
    }
    static getInstance(config) {
        if (!CardAllErrorHandlingService.instance) {
            CardAllErrorHandlingService.instance = new CardAllErrorHandlingService(config);
        }
        return CardAllErrorHandlingService.instance;
    }
    /**
     * 处理同步错误
     */
    async handleSyncError(error, context) {
        const errorContext = this.createContext('sync', context);
        const result = await (0, unified_error_handler_1.handleError)(error, errorContext);
        // 记录同步特定的错误信息
        if (result.error) {
            result.error.operation = 'sync';
            result.error.entity = context?.entityType;
        }
        return result;
    }
    /**
     * 处理网络错误
     */
    async handleNetworkError(error, context) {
        const errorContext = this.createContext('network', context);
        const result = await (0, unified_error_handler_1.handleError)(error, errorContext);
        // 网络错误特殊处理
        if (result.error?.category === unified_error_handler_1.ErrorCategory.NETWORK) {
            // 检查网络状态
            const networkState = network_state_detector_1.networkStateDetector.getCurrentState();
            result.error.details = {
                ...result.error.details,
                networkState,
                timestamp: new Date()
            };
        }
        return result;
    }
    /**
     * 处理数据错误
     */
    async handleDataError(error, context) {
        const errorContext = this.createContext('data', context);
        const result = await (0, unified_error_handler_1.handleError)(error, errorContext);
        // 数据错误特殊处理
        if (result.error?.category === unified_error_handler_1.ErrorCategory.DATA) {
            result.error.entity = context?.entity;
            result.error.details = {
                ...result.error.details,
                dataType: context?.dataType,
                operation: context?.operation
            };
        }
        return result;
    }
    /**
     * 处理系统错误
     */
    async handleSystemError(error, context) {
        const errorContext = this.createContext('system', context);
        const result = await (0, unified_error_handler_1.handleError)(error, errorContext);
        // 系统错误特殊处理
        if (result.error?.category === unified_error_handler_1.ErrorCategory.SYSTEM) {
            result.error.level = unified_error_handler_1.ErrorLevel.CRITICAL;
            result.error.retryable = false;
        }
        return result;
    }
    /**
     * 获取错误统计信息
     */
    getErrorStatistics() {
        if (!this.config.enableMonitoring) {
            return null;
        }
        return this.monitoringService.getMetrics();
    }
    /**
     * 获取健康状态
     */
    getHealthStatus() {
        const stats = this.getErrorStatistics();
        const metrics = stats?.metrics || {};
        // 计算健康分数
        let healthScore = 100;
        // 基于错误率调整健康分数
        if (metrics.errorRate > 0.1)
            healthScore -= 20;
        if (metrics.errorRate > 0.05)
            healthScore -= 10;
        // 基于恢复率调整健康分数
        if (metrics.recoveryRate < 0.8)
            healthScore -= 15;
        if (metrics.recoveryRate < 0.9)
            healthScore -= 5;
        // 确定健康状态
        let status;
        if (healthScore >= 90)
            status = 'healthy';
        else if (healthScore >= 70)
            status = 'degraded';
        else
            status = 'unhealthy';
        return {
            status,
            score: Math.max(0, healthScore),
            timestamp: new Date(),
            metrics,
            recommendations: this.generateRecommendations(status, metrics)
        };
    }
    /**
     * 获取最近的错误
     */
    getRecentErrors(limit = 50) {
        if (!this.config.enableMonitoring) {
            return [];
        }
        return this.monitoringService.getRecentErrors(limit);
    }
    /**
     * 更新配置
     */
    updateConfig(newConfig) {
        this.config = { ...this.config, ...newConfig };
        this.reconfigureServices();
    }
    /**
     * 获取当前配置
     */
    getConfig() {
        return { ...this.config };
    }
    /**
     * 尝试恢复错误
     */
    async attemptRecovery(error) {
        if (!this.config.enableRecovery) {
            return false;
        }
        try {
            const context = (0, unified_error_handler_1.createErrorContext)({ operation: error.operation }, error.userId, 'production');
            const result = await this.recoveryManager.attemptRecovery(error, context);
            return result.success;
        }
        catch (recoveryError) {
            console.error('Recovery attempt failed:', recoveryError);
            return false;
        }
    }
    /**
     * 触发自愈
     */
    async triggerSelfHealing(error) {
        if (!this.config.enableSelfHealing) {
            return false;
        }
        try {
            const context = (0, unified_error_handler_1.createErrorContext)({ operation: error.operation }, error.userId, 'production');
            return await this.selfHealingFramework.attemptHealing(error, context);
        }
        catch (healingError) {
            console.error('Self-healing attempt failed:', healingError);
            return false;
        }
    }
    /**
     * 初始化服务
     */
    initializeServices() {
        // 初始化监控服务
        if (this.config.enableMonitoring) {
            this.monitoringService = error_monitoring_service_1.ErrorMonitoringService.getInstance();
        }
        // 初始化恢复管理器
        if (this.config.enableRecovery) {
            this.recoveryManager = recovery_strategy_manager_1.RecoveryStrategyManager.getInstance({
                maxAttempts: this.config.recovery.maxRetries,
                baseDelay: this.config.recovery.baseDelay,
                maxDelay: this.config.recovery.maxDelay
            });
        }
        // 初始化自愈框架
        if (this.config.enableSelfHealing) {
            this.selfHealingFramework = self_healing_framework_1.SelfHealingFramework.getInstance({
                autoRepair: this.config.selfHealing.autoRepair,
                learningEnabled: this.config.selfHealing.learningEnabled,
                maxApplications: this.config.selfHealing.maxApplications
            });
        }
    }
    /**
     * 重新配置服务
     */
    reconfigureServices() {
        // 重新初始化服务以应用新配置
        this.initializeServices();
    }
    /**
     * 创建错误上下文
     */
    createContext(operation, additionalContext) {
        return (0, unified_error_handler_1.createErrorContext)({ operation, ...additionalContext }, additionalContext?.userId, additionalContext?.environment || 'development');
    }
    /**
     * 合并默认配置
     */
    mergeWithDefaultConfig(config) {
        const defaultConfig = {
            enableMonitoring: true,
            enableRecovery: true,
            enableSelfHealing: true,
            monitoring: {
                bufferSize: 1000,
                historySize: 168,
                sampleRate: 1.0
            },
            recovery: {
                maxRetries: 3,
                baseDelay: 1000,
                maxDelay: 30000,
                enableCircuitBreaker: true
            },
            selfHealing: {
                enabled: true,
                autoRepair: true,
                learningEnabled: true,
                maxApplications: 100
            },
            alerts: {
                enabled: true,
                severity: 'medium',
                channels: ['console']
            }
        };
        return { ...defaultConfig, ...config };
    }
    /**
     * 生成健康建议
     */
    generateRecommendations(status, metrics) {
        const recommendations = [];
        if (status === 'unhealthy') {
            recommendations.push('系统健康状况不佳，建议立即检查错误日志');
            recommendations.push('考虑启用自动恢复机制');
            recommendations.push('检查网络连接和服务器状态');
        }
        else if (status === 'degraded') {
            if (metrics.errorRate > 0.05) {
                recommendations.push('错误率较高，建议检查错误模式');
            }
            if (metrics.recoveryRate < 0.9) {
                recommendations.push('恢复率偏低，建议优化恢复策略');
            }
        }
        return recommendations;
    }
}
exports.CardAllErrorHandlingService = CardAllErrorHandlingService;
// 导出实例
exports.errorHandlingService = CardAllErrorHandlingService.getInstance();
// 导出便捷函数
const handleSyncError = (error, context) => exports.errorHandlingService.handleSyncError(error, context);
exports.handleSyncError = handleSyncError;
const handleNetworkError = (error, context) => exports.errorHandlingService.handleNetworkError(error, context);
exports.handleNetworkError = handleNetworkError;
const handleDataError = (error, context) => exports.errorHandlingService.handleDataError(error, context);
exports.handleDataError = handleDataError;
const handleSystemError = (error, context) => exports.errorHandlingService.handleSystemError(error, context);
exports.handleSystemError = handleSystemError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\database.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\database.ts"],"sourcesContent":["import Dexie, { Table } from 'dexie'\r\nimport { Card, Folder, Tag, ImageData } from '@/types/card'\r\n\r\n// ============================================================================\r\n// 统一数据库类型定义 - 解决数据库架构统一\r\n// ============================================================================\r\n\r\n// 基础同步接口\r\nexport interface SyncableEntity {\r\n  id?: string\r\n  userId?: string\r\n  syncVersion: number\r\n  lastSyncAt?: Date\r\n  pendingSync: boolean\r\n  updatedAt: Date\r\n}\r\n\r\n// 扩展的数据库卡片实体\r\nexport interface DbCard extends Omit<Card, 'id'>, SyncableEntity {\r\n  id?: string\r\n  // 保持向后兼容的字段\r\n  folderId?: string\r\n  // 新增字段用于优化查询\r\n  searchVector?: string // 全文搜索优化\r\n  thumbnailUrl?: string // 卡片缩略图\r\n}\r\n\r\n// 扩展的数据库文件夹实体\r\nexport interface DbFolder extends Omit<Folder, 'id'>, SyncableEntity {\r\n  id?: string\r\n  // 新增字段用于优化查询\r\n  fullPath?: string // 完整路径用于快速查找\r\n  depth?: number // 文件夹深度\r\n}\r\n\r\n// 扩展的数据库标签实体\r\nexport interface DbTag extends Omit<Tag, 'id'>, SyncableEntity {\r\n  id?: string\r\n  // 保持向后兼容\r\n  count: number\r\n}\r\n\r\n// 图片存储实体 - 统一图片管理\r\nexport interface DbImage {\r\n  id?: string\r\n  cardId: string\r\n  userId?: string\r\n  fileName: string\r\n  filePath: string\r\n  cloudUrl?: string\r\n  thumbnailPath?: string\r\n  metadata: {\r\n    originalName: string\r\n    size: number\r\n    width: number\r\n    height: number\r\n    format: string\r\n    compressed: boolean\r\n    quality?: number\r\n  }\r\n  storageMode: 'indexeddb' | 'filesystem' | 'cloud'\r\n  createdAt: Date\r\n  updatedAt: Date\r\n  syncVersion: number\r\n  lastSyncAt?: Date\r\n  pendingSync: boolean\r\n}\r\n\r\n// 同步操作队列 - 统一同步逻辑\r\nexport interface SyncOperation {\r\n  id?: string\r\n  type: 'create' | 'update' | 'delete'\r\n  entity: 'card' | 'folder' | 'tag' | 'image'\r\n  entityId: string\r\n  userId?: string\r\n  data?: any\r\n  timestamp: Date\r\n  retryCount: number\r\n  maxRetries: number\r\n  error?: string\r\n  priority: 'high' | 'normal' | 'low'\r\n}\r\n\r\n// 应用设置 - 统一配置管理\r\nexport interface AppSettings {\r\n  id?: string\r\n  key: string\r\n  value: any\r\n  updatedAt: Date\r\n  scope: 'user' | 'global' // 设置作用域\r\n}\r\n\r\n// 用户会话信息\r\nexport interface UserSession {\r\n  id?: string\r\n  userId: string\r\n  deviceId: string\r\n  token?: string\r\n  expiresAt?: Date\r\n  lastActivity: Date\r\n  isActive: boolean\r\n}\r\n\r\n// 数据库统计信息\r\nexport interface DatabaseStats {\r\n  cards: number\r\n  folders: number\r\n  tags: number\r\n  images: number\r\n  pendingSync: number\r\n  totalSize: number\r\n  lastBackup?: Date\r\n  version: string\r\n}\r\n\r\n// 向后兼容的旧接口（保持现有代码不中断）\r\nexport interface LegacySyncOperation {\r\n  id?: string\r\n  type: 'create' | 'update' | 'delete'\r\n  table: 'cards' | 'folders' | 'tags' | 'images'\r\n  data?: any\r\n  localId: string\r\n  timestamp: Date\r\n  retryCount: number\r\n  maxRetries: number\r\n  error?: string\r\n}\r\n\r\n// ============================================================================\r\n// 统一数据库类\r\n// ============================================================================\r\n\r\nclass CardAllUnifiedDatabase extends Dexie {\r\n  // 数据表定义\r\n  cards!: Table<DbCard>\r\n  folders!: Table<DbFolder>\r\n  tags!: Table<DbTag>\r\n  images!: Table<DbImage>\r\n  syncQueue!: Table<SyncOperation>\r\n  settings!: Table<AppSettings>\r\n  sessions!: Table<UserSession>\r\n\r\n  constructor() {\r\n    super('CardAllUnifiedDatabase')\r\n    \r\n    // 版本 3: 完整的统一数据库架构\r\n    this.version(3).stores({\r\n      // 核心实体表 - 优化的索引设计\r\n      cards: '++id, userId, folderId, createdAt, updatedAt, syncVersion, pendingSync, [userId+folderId], searchVector',\r\n      folders: '++id, userId, parentId, createdAt, updatedAt, syncVersion, pendingSync, [userId+parentId], fullPath, depth',\r\n      tags: '++id, userId, name, createdAt, syncVersion, pendingSync, [userId+name]',\r\n      images: '++id, cardId, userId, createdAt, updatedAt, syncVersion, pendingSync, storageMode, [cardId+userId]',\r\n      \r\n      // 同步和设置表\r\n      syncQueue: '++id, type, entity, entityId, userId, timestamp, retryCount, priority, [userId+priority]',\r\n      settings: '++id, key, updatedAt, scope, [key+scope]',\r\n      sessions: '++id, userId, deviceId, lastActivity, isActive, [userId+deviceId]'\r\n    })\r\n\r\n    // 数据库升级逻辑 - 支持从旧版本迁移\r\n    this.upgradeDatabase()\r\n  }\r\n\r\n  private async upgradeDatabase(): Promise<void> {\r\n    // 版本 1 -> 2: 添加用户支持\r\n    this.version(2).upgrade(async (tx) => {\r\n      console.log('Upgrading to version 2: Adding user support...')\r\n      \r\n      // 检查是否需要从旧数据库迁移\r\n      const oldDb = new CardAllDatabase_v1()\r\n      try {\r\n        await oldDb.open()\r\n        console.log('Found old database, migrating data...')\r\n        \r\n        // 迁移卡片\r\n        const oldCards = await oldDb.cards.toArray()\r\n        const newCards = oldCards.map(card => ({\r\n          ...card,\r\n          userId: 'default', // 设置默认用户\r\n          updatedAt: new Date()\r\n        }))\r\n        await this.cards.bulkAdd(newCards)\r\n        \r\n        // 迁移文件夹\r\n        const oldFolders = await oldDb.folders.toArray()\r\n        const newFolders = oldFolders.map(folder => ({\r\n          ...folder,\r\n          userId: 'default',\r\n          updatedAt: new Date()\r\n        }))\r\n        await this.folders.bulkAdd(newFolders)\r\n        \r\n        // 迁移标签\r\n        const oldTags = await oldDb.tags.toArray()\r\n        const newTags = oldTags.map(tag => ({\r\n          ...tag,\r\n          userId: 'default',\r\n          updatedAt: new Date()\r\n        }))\r\n        await this.tags.bulkAdd(newTags)\r\n        \r\n        console.log('Migration completed successfully')\r\n      } catch (error) {\r\n        console.log('No old database found or migration failed:', error)\r\n      }\r\n    })\r\n\r\n    // 版本 2 -> 3: 优化索引和添加新功能\r\n    this.version(3).upgrade(async (tx) => {\r\n      console.log('Upgrading to version 3: Optimizing indexes and adding new features...')\r\n      \r\n      // 添加默认设置\r\n      await this.initializeDefaultSettings()\r\n      \r\n      // 重建搜索索引\r\n      await this.rebuildSearchIndexes()\r\n    })\r\n  }\r\n\r\n  private async initializeDefaultSettings(): Promise<void> {\r\n    const defaultSettings = [\r\n      {\r\n        key: 'storageMode',\r\n        value: 'hybrid',\r\n        scope: 'global' as const,\r\n        updatedAt: new Date()\r\n      },\r\n      {\r\n        key: 'syncEnabled',\r\n        value: true,\r\n        scope: 'global' as const,\r\n        updatedAt: new Date()\r\n      },\r\n      {\r\n        key: 'imageCompression',\r\n        value: {\r\n          enabled: true,\r\n          quality: 0.8,\r\n          maxWidth: 1920,\r\n          maxHeight: 1080,\r\n          format: 'webp'\r\n        },\r\n        scope: 'global' as const,\r\n        updatedAt: new Date()\r\n      },\r\n      {\r\n        key: 'databaseVersion',\r\n        value: '3.0.0',\r\n        scope: 'global' as const,\r\n        updatedAt: new Date()\r\n      }\r\n    ]\r\n\r\n    for (const setting of defaultSettings) {\r\n      const exists = await this.settings.where('key').equals(setting.key).first()\r\n      if (!exists) {\r\n        await this.settings.add(setting)\r\n      }\r\n    }\r\n  }\r\n\r\n  private async rebuildSearchIndexes(): Promise<void> {\r\n    console.log('Rebuilding search indexes...')\r\n    // 这里可以实现搜索索引的重建逻辑\r\n  }\r\n\r\n  // ============================================================================\r\n  // 统一的CRUD操作方法\r\n  // ============================================================================\r\n\r\n  // 获取设置 - 支持用户级和全局设置\r\n  async getSetting(key: string, userId?: string): Promise<any> {\r\n    // 优先返回用户级设置\r\n    if (userId) {\r\n      const userSetting = await this.settings\r\n        .where('[key+scope]')\r\n        .equals([key, 'user'])\r\n        .and(setting => !setting.userId || setting.userId === userId)\r\n        .first()\r\n      if (userSetting) return userSetting.value\r\n    }\r\n    \r\n    // 返回全局设置\r\n    const globalSetting = await this.settings\r\n      .where('[key+scope]')\r\n      .equals([key, 'global'])\r\n      .first()\r\n    return globalSetting?.value\r\n  }\r\n\r\n  // 更新设置\r\n  async updateSetting(key: string, value: any, scope: 'user' | 'global' = 'global', userId?: string): Promise<void> {\r\n    await this.settings.where('[key+scope]').equals([key, scope]).modify({\r\n      value,\r\n      userId,\r\n      updatedAt: new Date()\r\n    })\r\n  }\r\n\r\n  // 获取数据库统计信息\r\n  async getStats(): Promise<DatabaseStats> {\r\n    const [cards, folders, tags, images, pendingSync] = await Promise.all([\r\n      this.cards.count(),\r\n      this.folders.count(),\r\n      this.tags.count(),\r\n      this.images.count(),\r\n      this.syncQueue.count()\r\n    ])\r\n\r\n    // 计算总大小（简化版本）\r\n    const totalSize = await this.calculateTotalSize()\r\n\r\n    return {\r\n      cards,\r\n      folders,\r\n      tags,\r\n      images,\r\n      pendingSync,\r\n      totalSize,\r\n      version: '3.0.0'\r\n    }\r\n  }\r\n\r\n  private async calculateTotalSize(): Promise<number> {\r\n    // 计算所有图片的总大小\r\n    const images = await this.images.toArray()\r\n    return images.reduce((total, image) => total + image.metadata.size, 0)\r\n  }\r\n\r\n  // 统一的卡片操作\r\n  async createCard(cardData: Omit<DbCard, 'id' | 'syncVersion' | 'pendingSync' | 'updatedAt'>, userId?: string): Promise<string> {\r\n    const id = crypto.randomUUID()\r\n    const now = new Date()\r\n    \r\n    await this.cards.add({\r\n      ...cardData,\r\n      id,\r\n      userId,\r\n      syncVersion: 1,\r\n      pendingSync: true,\r\n      updatedAt: now\r\n    })\r\n    \r\n    return id\r\n  }\r\n\r\n  async updateCard(id: string, updates: Partial<DbCard>): Promise<number> {\r\n    const result = await this.cards.update(id, {\r\n      ...updates,\r\n      syncVersion: updates.syncVersion ? updates.syncVersion + 1 : undefined,\r\n      pendingSync: true,\r\n      updatedAt: new Date()\r\n    })\r\n    \r\n    return result\r\n  }\r\n\r\n  async deleteCard(id: string): Promise<void> {\r\n    await this.transaction('rw', [this.cards, this.images], async () => {\r\n      // 删除相关图片\r\n      await this.images.where('cardId').equals(id).delete()\r\n      // 删除卡片\r\n      await this.cards.delete(id)\r\n    })\r\n  }\r\n\r\n  // 批量操作支持\r\n  async bulkCreateCards(cardsData: Omit<DbCard, 'id' | 'syncVersion' | 'pendingSync' | 'updatedAt'>[], userId?: string): Promise<string[]> {\r\n    const now = new Date()\r\n    const cards = cardsData.map(cardData => ({\r\n      ...cardData,\r\n      id: crypto.randomUUID(),\r\n      userId,\r\n      syncVersion: 1,\r\n      pendingSync: true,\r\n      updatedAt: now\r\n    }))\r\n    \r\n    await this.cards.bulkAdd(cards)\r\n    return cards.map(card => card.id!)\r\n  }\r\n\r\n  // 性能优化的查询方法\r\n  async getCardsByFolder(folderId: string, userId?: string): Promise<DbCard[]> {\r\n    return await this.cards\r\n      .where('[userId+folderId]')\r\n      .equals([userId || 'default', folderId])\r\n      .toArray()\r\n  }\r\n\r\n  async searchCards(searchTerm: string, userId?: string): Promise<DbCard[]> {\r\n    const searchLower = searchTerm.toLowerCase()\r\n    return await this.cards\r\n      .filter(card => \r\n        card.searchVector?.includes(searchLower) ||\r\n        card.frontContent.title.toLowerCase().includes(searchLower) ||\r\n        card.frontContent.text.toLowerCase().includes(searchLower) ||\r\n        card.backContent.title.toLowerCase().includes(searchLower) ||\r\n        card.backContent.text.toLowerCase().includes(searchLower)\r\n      )\r\n      .toArray()\r\n  }\r\n\r\n  // 数据库清理和优化\r\n  async cleanup(): Promise<void> {\r\n    await this.transaction('rw', [this.cards, this.folders, this.tags, this.images, this.syncQueue], async () => {\r\n      // 清理过期的同步操作\r\n      const expiredDate = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // 7天前\r\n      await this.syncQueue.where('timestamp').below(expiredDate).delete()\r\n      \r\n      // 清理孤立图片（没有对应卡片的图片）\r\n      const cardIds = await this.cards.toCollection().primaryKeys()\r\n      await this.images.where('cardId').noneOf(cardIds as string[]).delete()\r\n      \r\n      console.log('Database cleanup completed')\r\n    })\r\n  }\r\n\r\n  // 数据库健康检查\r\n  async healthCheck(): Promise<{\r\n    isHealthy: boolean\r\n    issues: string[]\r\n    stats: DatabaseStats\r\n  }> {\r\n    const issues: string[] = []\r\n    \r\n    try {\r\n      // 检查数据库连接\r\n      await this.tables.toArray()\r\n      \r\n      // 检查数据一致性\r\n      const stats = await this.getStats()\r\n      \r\n      // 检查是否有大量待同步项目\r\n      if (stats.pendingSync > 1000) {\r\n        issues.push(`High number of pending sync operations: ${stats.pendingSync}`)\r\n      }\r\n      \r\n      // 检查数据库大小\r\n      if (stats.totalSize > 500 * 1024 * 1024) { // 500MB\r\n        issues.push(`Database size is large: ${(stats.totalSize / 1024 / 1024).toFixed(2)} MB`)\r\n      }\r\n      \r\n      return {\r\n        isHealthy: issues.length === 0,\r\n        issues,\r\n        stats\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        isHealthy: false,\r\n        issues: [`Database connection failed: ${error}`],\r\n        stats: { cards: 0, folders: 0, tags: 0, images: 0, pendingSync: 0, totalSize: 0, version: '3.0.0' }\r\n      }\r\n    }\r\n  }\r\n\r\n  // 完全清理数据库（谨慎使用）\r\n  async clearAll(): Promise<void> {\r\n    await this.transaction('rw', [this.cards, this.folders, this.tags, this.images, this.syncQueue, this.settings, this.sessions], async () => {\r\n      await this.cards.clear()\r\n      await this.folders.clear()\r\n      await this.tags.clear()\r\n      await this.images.clear()\r\n      await this.syncQueue.clear()\r\n      // 保留设置，只清除用户数据\r\n      await this.sessions.clear()\r\n    })\r\n  }\r\n\r\n  // ============================================================================\r\n  // 向后兼容的方法 - 保持现有代码不中断\r\n  // ============================================================================\r\n\r\n  // 旧版getSetting方法（保持兼容）\r\n  async getSettingLegacy(key: string): Promise<any> {\r\n    return await this.getSetting(key)\r\n  }\r\n\r\n  // 旧版updateSetting方法（保持兼容）\r\n  async updateSettingLegacy(key: string, value: any): Promise<void> {\r\n    await this.updateSetting(key, value)\r\n  }\r\n\r\n  // 旧版clearAll方法（保持兼容）\r\n  async clearAllLegacy(): Promise<void> {\r\n    await this.transaction('rw', this.cards, this.folders, this.tags, this.images, this.syncQueue, async () => {\r\n      await this.cards.clear()\r\n      await this.folders.clear()\r\n      await this.tags.clear()\r\n      await this.images.clear()\r\n      await this.syncQueue.clear()\r\n    })\r\n  }\r\n\r\n  // 旧版getStats方法（保持兼容）\r\n  async getStatsLegacy(): Promise<{\r\n    cards: number\r\n    folders: number\r\n    tags: number\r\n    images: number\r\n    pendingSync: number\r\n  }> {\r\n    const stats = await this.getStats()\r\n    return {\r\n      cards: stats.cards,\r\n      folders: stats.folders,\r\n      tags: stats.tags,\r\n      images: stats.images,\r\n      pendingSync: stats.pendingSync\r\n    }\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// 向后兼容支持\r\n// ============================================================================\r\n\r\n// 旧版本数据库类（用于迁移）\r\nclass CardAllDatabase_v1 extends Dexie {\r\n  cards!: Table<any>\r\n  folders!: Table<any>\r\n  tags!: Table<any>\r\n  images!: Table<any>\r\n  syncQueue!: Table<any>\r\n  settings!: Table<any>\r\n  \r\n  constructor() {\r\n    super('CardAllDatabase')\r\n    this.version(1).stores({\r\n      cards: '++id, folderId, createdAt, updatedAt, syncVersion, pendingSync',\r\n      folders: '++id, parentId, createdAt, updatedAt, syncVersion, pendingSync',\r\n      tags: '++id, name, createdAt, syncVersion, pendingSync',\r\n      images: '++id, cardId, filePath, createdAt, syncVersion, pendingSync',\r\n      syncQueue: '++id, type, entity, entityId, timestamp, retryCount',\r\n      settings: '++id, key, updatedAt'\r\n    })\r\n  }\r\n}\r\n\r\n// 创建数据库实例\r\nexport const db = new CardAllUnifiedDatabase()\r\n\r\n// 数据库初始化\r\nexport const initializeDatabase = async (): Promise<void> => {\r\n  try {\r\n    // 添加事件监听器\r\n    db.on('error', (error) => {\r\n      console.error('Database error:', error)\r\n    })\r\n\r\n    db.on('blocked', () => {\r\n      console.warn('Database operation blocked')\r\n    })\r\n\r\n    db.on('versionchange', () => {\r\n      console.warn('Database version changed, reloading page...')\r\n      window.location.reload()\r\n    })\r\n\r\n    db.on('ready', () => {\r\n      console.log('Database is ready')\r\n    })\r\n    \r\n    // 打开数据库连接\r\n    await db.open()\r\n    console.log('CardAll unified database initialized successfully')\r\n    \r\n    // 执行健康检查\r\n    const health = await db.healthCheck()\r\n    if (!health.isHealthy) {\r\n      console.warn('Database health issues detected:', health.issues)\r\n    }\r\n    \r\n    // 定期清理\r\n    setInterval(() => {\r\n      db.cleanup().catch(console.error)\r\n    }, 24 * 60 * 60 * 1000) // 每天清理一次\r\n    \r\n  } catch (error) {\r\n    console.error('Failed to initialize database:', error)\r\n    throw error\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// 导出工具函数\r\n// ============================================================================\r\n\r\n// 数据转换工具\r\nexport const convertToDbCard = (card: Card, userId?: string): DbCard => {\r\n  return {\r\n    ...card,\r\n    userId,\r\n    syncVersion: 1,\r\n    pendingSync: true,\r\n    updatedAt: new Date()\r\n  }\r\n}\r\n\r\nexport const convertFromDbCard = (dbCard: DbCard): Card => {\r\n  const { userId, syncVersion, lastSyncAt, pendingSync, ...card } = dbCard\r\n  return {\r\n    ...card,\r\n    id: card.id || '',\r\n    createdAt: new Date(card.createdAt),\r\n    updatedAt: new Date(card.updatedAt)\r\n  }\r\n}\r\n\r\n// 搜索优化工具\r\nexport const generateSearchVector = (card: Card): string => {\r\n  const searchableText = [\r\n    card.frontContent.title,\r\n    card.frontContent.text,\r\n    card.backContent.title,\r\n    card.backContent.text,\r\n    ...card.frontContent.tags,\r\n    ...card.backContent.tags\r\n  ].join(' ').toLowerCase()\r\n  \r\n  return searchableText\r\n}\r\n\r\n// 批量操作工具\r\nexport const batchOperation = async <T>(\r\n  items: T[],\r\n  batchSize: number = 100,\r\n  operation: (batch: T[]) => Promise<void>\r\n): Promise<void> => {\r\n  for (let i = 0; i < items.length; i += batchSize) {\r\n    const batch = items.slice(i, i + batchSize)\r\n    await operation(batch)\r\n  }\r\n}\r\n\r\n// 数据验证工具\r\nexport const validateCardData = (card: Partial<Card>): string[] => {\r\n  const errors: string[] = []\r\n  \r\n  if (!card.frontContent?.title) {\r\n    errors.push('Front content title is required')\r\n  }\r\n  \r\n  if (!card.backContent?.title) {\r\n    errors.push('Back content title is required')\r\n  }\r\n  \r\n  if (card.style && !['solid', 'gradient', 'glass'].includes(card.style.type)) {\r\n    errors.push('Invalid card style type')\r\n  }\r\n  \r\n  return errors\r\n}\r\n\r\n// ============================================================================\r\n// 性能优化和缓存\r\n// ============================================================================\r\n\r\n// 简单的查询缓存\r\nconst queryCache = new Map<string, { data: any; timestamp: number }>()\r\nconst CACHE_TTL = 5 * 60 * 1000 // 5分钟缓存\r\n\r\nexport const cachedQuery = async <T>(\r\n  key: string,\r\n  query: () => Promise<T>\r\n): Promise<T> => {\r\n  const cached = queryCache.get(key)\r\n  if (cached && Date.now() - cached.timestamp < CACHE_TTL) {\r\n    return cached.data\r\n  }\r\n  \r\n  const data = await query()\r\n  queryCache.set(key, { data, timestamp: Date.now() })\r\n  return data\r\n}\r\n\r\n// 清理缓存\r\nexport const clearQueryCache = (): void => {\r\n  queryCache.clear()\r\n}\r\n\r\n// 定期清理过期缓存\r\nsetInterval(() => {\r\n  const now = Date.now()\r\n  for (const [key, value] of queryCache.entries()) {\r\n    if (now - value.timestamp > CACHE_TTL) {\r\n      queryCache.delete(key)\r\n    }\r\n  }\r\n}, CACHE_TTL)"],"version":3}
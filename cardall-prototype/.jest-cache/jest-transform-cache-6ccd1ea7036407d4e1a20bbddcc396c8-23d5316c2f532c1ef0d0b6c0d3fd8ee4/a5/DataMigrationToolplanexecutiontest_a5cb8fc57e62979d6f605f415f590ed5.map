{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\services\\data-migration\\DataMigrationTool.plan-execution.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\services\\data-migration\\DataMigrationTool.plan-execution.test.ts"],"sourcesContent":["/**\n * 迁移计划创建和执行测试\n */\n\nimport { dataMigrationTool } from '@/services/data-migration-tool'\nimport { db } from '@/services/database-unified'\nimport { TestDataFactory, MigrationTestHelpers } from './test-utils'\nimport { setup } from './setup'\n\ndescribe('DataMigrationTool - 迁移计划创建和执行测试', () => {\n  const {\n    setupLocalStorageData,\n    cleanupLocalStorage,\n    mockIndexedDB,\n    restoreIndexedDB,\n    validateMigrationResult,\n    validateMigrationPlan,\n    createProgressListener\n  } = MigrationTestHelpers\n\n  describe('迁移计划创建', () => {\n    beforeEach(() => {\n      cleanupLocalStorage()\n    })\n\n    afterEach(() => {\n      cleanupLocalStorage()\n    })\n\n    test('应该为localStorage源创建迁移计划', async () => {\n      const testData = TestDataFactory.createBulkTestData(10, 3, 5)\n      setupLocalStorageData(testData)\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n\n      validateMigrationPlan(plan, {\n        sourceType: 'localStorage',\n        backupRequired: true,\n        rollbackEnabled: true,\n        minSteps: 5,\n        validationLevel: 'strict'\n      })\n\n      // 验证特定步骤存在\n      const stepIds = plan.steps.map(s => s.id)\n      expect(stepIds).toContain('validate-source')\n      expect(stepIds).toContain('create-backup')\n      expect(stepIds).toContain('migrate-cards')\n      expect(stepIds).toContain('migrate-folders')\n      expect(stepIds).toContain('migrate-tags')\n      expect(stepIds).toContain('transform-data')\n      expect(stepIds).toContain('validate-migration')\n      expect(stepIds).toContain('cleanup-source')\n\n      // 验证步骤优先级\n      const criticalSteps = plan.steps.filter(s => s.priority === 'critical')\n      expect(criticalSteps.length).toBeGreaterThan(0)\n\n      // 验证时间估计合理\n      expect(plan.estimatedTime).toBeGreaterThan(5000)\n    })\n\n    test('应该为简化版数据库创建迁移计划', async () => {\n      const mockDbData = TestDataFactory.createBulkTestData(15, 4, 6)\n      mockIndexedDB(mockDbData)\n\n      const source = {\n        type: 'database-simple' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n\n      validateMigrationPlan(plan, {\n        sourceType: 'database-simple',\n        backupRequired: true,\n        rollbackEnabled: true,\n        minSteps: 4,\n        validationLevel: 'comprehensive'\n      })\n\n      // 验证数据库特定步骤\n      const stepIds = plan.steps.map(s => s.id)\n      expect(stepIds).toContain('migrate-simple-db')\n\n      restoreIndexedDB()\n    })\n\n    test('应该为完整版数据库创建迁移计划', async () => {\n      const source = {\n        type: 'database-full' as const,\n        version: '3.0.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n\n      validateMigrationPlan(plan, {\n        sourceType: 'database-full',\n        backupRequired: false,\n        rollbackEnabled: true,\n        minSteps: 3,\n        validationLevel: 'basic'\n      })\n\n      // 验证升级步骤\n      const stepIds = plan.steps.map(s => s.id)\n      expect(stepIds).toContain('upgrade-schema')\n    })\n\n    test('应该根据数据量调整步骤时间估计', async () => {\n      // 小数据量\n      const smallData = TestDataFactory.createBulkTestData(5, 1, 2)\n      setupLocalStorageData(smallData)\n\n      const smallSource = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const smallPlan = await dataMigrationTool.analyzeAndCreatePlan(smallSource)\n\n      // 大数据量\n      cleanupLocalStorage()\n      const largeData = TestDataFactory.createBulkTestData(100, 20, 30)\n      setupLocalStorageData(largeData)\n\n      const largeSource = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const largePlan = await dataMigrationTool.analyzeAndCreatePlan(largeSource)\n\n      expect(largePlan.estimatedTime).toBeGreaterThan(smallPlan.estimatedTime)\n\n      cleanupLocalStorage()\n    })\n\n    test('应该处理空数据源的迁移计划', async () => {\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n\n      validateMigrationPlan(plan, {\n        sourceType: 'localStorage',\n        backupRequired: true,\n        rollbackEnabled: true,\n        minSteps: 1\n      })\n\n      // 空数据源可能没有数据迁移步骤，但应该有验证步骤\n      const stepIds = plan.steps.map(s => s.id)\n      expect(stepIds).toContain('validate-source')\n    })\n  })\n\n  describe('迁移执行', () => {\n    beforeEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    afterEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    test('应该成功执行localStorage迁移', async () => {\n      const testData = TestDataFactory.createBulkTestData(5, 2, 3)\n      setupLocalStorageData(testData)\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const progressListener = createProgressListener()\n\n      // 注册进度监听器\n      const unregisterProgress = dataMigrationTool.onProgress(progressListener.callback)\n\n      try {\n        const result = await dataMigrationTool.executeMigration(plan)\n\n        validateMigrationResult(result, {\n          success: true,\n          migratedCards: testData.cards.length,\n          migratedFolders: testData.folders.length,\n          migratedTags: testData.tags.length,\n          hasErrors: false\n        })\n\n        // 验证进度监听器被调用\n        expect(progressListener.callback).toHaveBeenCalled()\n        expect(progressListener.getEvents().length).toBeGreaterThan(0)\n\n        // 验证数据库中的数据\n        const dbCards = await db.cards.toArray()\n        const dbFolders = await db.folders.toArray()\n        const dbTags = await db.tags.toArray()\n\n        expect(dbCards.length).toBe(testData.cards.length)\n        expect(dbFolders.length).toBe(testData.folders.length)\n        expect(dbTags.length).toBe(testData.tags.length)\n\n        // 验证数据完整性\n        dbCards.forEach(card => {\n          expect(card.frontContent.title).toBeDefined()\n          expect(card.backContent.title).toBeDefined()\n          expect(card.userId).toBe('default')\n          expect(card.syncVersion).toBe(1)\n          expect(card.pendingSync).toBe(true)\n        })\n\n      } finally {\n        unregisterProgress()\n        cleanupLocalStorage()\n      }\n    })\n\n    test('应该处理迁移过程中的错误', async () => {\n      // 设置会失败的测试数据\n      const corruptedData = {\n        cards: [\n          TestDataFactory.createTestCard(),\n          { id: 'invalid-card', frontContent: null as any } // 无效数据\n        ]\n      }\n      setupLocalStorageData(corruptedData)\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n\n      // 应该处理错误而不完全失败\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      // 迁移可能部分成功\n      expect(result).toBeDefined()\n      expect(result.executedAt).toBeInstanceOf(Date)\n      expect(result.duration).toBeGreaterThan(0)\n\n      cleanupLocalStorage()\n    })\n\n    test('应该支持迁移取消', async () => {\n      const largeData = TestDataFactory.createBulkTestData(50, 10, 15)\n      setupLocalStorageData(largeData)\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n\n      // 开始迁移\n      const migrationPromise = dataMigrationTool.executeMigration(plan)\n\n      // 等待一小段时间后取消\n      await MigrationTestHelpers.waitFor(100)\n      const cancelResult = await dataMigrationTool.cancelMigration(plan.id)\n\n      expect(cancelResult).toBe(true)\n\n      // 等待迁移完成（可能是失败状态）\n      const result = await migrationPromise\n\n      // 验证迁移状态\n      const progress = dataMigrationTool.getMigrationProgress(plan.id)\n      expect(progress).toBeDefined()\n      expect(['paused', 'failed']).toContain(progress.status)\n\n      cleanupLocalStorage()\n    })\n\n    test('应该验证迁移后的数据', async () => {\n      const testData = TestDataFactory.createBulkTestData(3, 1, 2)\n      setupLocalStorageData(testData)\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      expect(result.validationPassed).toBe(true)\n\n      // 创建验证报告\n      const validationReport = await dataMigrationTool.createValidationReport()\n\n      expect(validationReport).toBeDefined()\n      expect(validationReport.success).toBe(true)\n      expect(validationReport.integrity.cardsValid).toBe(testData.cards.length)\n      expect(validationReport.integrity.foldersValid).toBe(testData.folders.length)\n      expect(validationReport.integrity.tagsValid).toBe(testData.tags.length)\n\n      cleanupLocalStorage()\n    })\n\n    test('应该清理源数据（可选）', async () => {\n      const testData = TestDataFactory.createBulkTestData(2, 1, 1)\n      setupLocalStorageData(testData)\n\n      // 确保数据存在\n      expect(localStorage.getItem('cardall-cards')).not.toBeNull()\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      await dataMigrationTool.executeMigration(plan)\n\n      // 验证源数据被清理\n      expect(localStorage.getItem('cardall-cards')).toBeNull()\n      expect(localStorage.getItem('cardall-folders')).toBeNull()\n      expect(localStorage.getItem('cardall-tags')).toBeNull()\n\n      cleanupLocalStorage()\n    })\n  })\n\n  describe('迁移重试机制', () => {\n    beforeEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    afterEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    test('应该重试失败的迁移步骤', async () => {\n      const testData = TestDataFactory.createBulkTestData(3, 1, 1)\n      setupLocalStorageData(testData)\n\n      // 模拟数据库操作偶尔失败\n      const originalBulkAdd = db.cards.bulkAdd\n      let attemptCount = 0\n      db.cards.bulkAdd = jest.fn().mockImplementation(async (items) => {\n        attemptCount++\n        if (attemptCount <= 2) {\n          throw new Error('Temporary database error')\n        }\n        return originalBulkAdd.call(db.cards, items)\n      })\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      // 最终应该成功\n      expect(result.success).toBe(true)\n      expect(attemptCount).toBeGreaterThan(1)\n\n      // 恢复原始方法\n      db.cards.bulkAdd = originalBulkAdd\n\n      cleanupLocalStorage()\n    })\n\n    test('应该限制重试次数', async () => {\n      const testData = TestDataFactory.createBulkTestData(1, 0, 0)\n      setupLocalStorageData(testData)\n\n      // 模拟持续失败的数据库操作\n      db.cards.bulkAdd = jest.fn().mockRejectedValue(new Error('Persistent error'))\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n      const result = await dataMigrationTool.executeMigration(plan)\n\n      // 应该在重试限制后失败\n      expect(result.success).toBe(false)\n      expect(result.errors.length).toBeGreaterThan(0)\n      expect(result.errors.some(error => error.includes('Persistent error'))).toBe(true)\n\n      // 恢复原始方法\n      jest.restoreAllMocks()\n\n      cleanupLocalStorage()\n    })\n  })\n\n  describe('并发和队列管理', () => {\n    beforeEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    afterEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    test('应该正确管理迁移队列', async () => {\n      const testData1 = TestDataFactory.createBulkTestData(2, 1, 1)\n      const testData2 = TestDataFactory.createBulkTestData(2, 1, 1)\n\n      setupLocalStorageData(testData1)\n\n      const source1 = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan1 = await dataMigrationTool.analyzeAndCreatePlan(source1)\n\n      // 执行第一个迁移\n      const migration1Promise = dataMigrationTool.executeMigration(plan1)\n\n      // 尝试同时执行第二个迁移（应该失败）\n      cleanupLocalStorage()\n      setupLocalStorageData(testData2)\n\n      const source2 = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan2 = await dataMigrationTool.analyzeAndCreatePlan(source2)\n\n      await expect(dataMigrationTool.executeMigration(plan2))\n        .rejects.toThrow('Migration already in progress')\n\n      // 等待第一个迁移完成\n      const result1 = await migration1Promise\n      expect(result1.success).toBe(true)\n\n      cleanupLocalStorage()\n    })\n\n    test('应该跟踪活动迁移', async () => {\n      const testData = TestDataFactory.createBulkTestData(1, 0, 0)\n      setupLocalStorageData(testData)\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n\n      // 开始迁移前应该没有活动迁移\n      const systemStatus = await dataMigrationTool.getSystemStatus()\n      expect(systemStatus.activeMigrations).toHaveLength(0)\n\n      // 开始迁移\n      const migrationPromise = dataMigrationTool.executeMigration(plan)\n\n      // 检查活动迁移\n      const inProgressStatus = await dataMigrationTool.getSystemStatus()\n      expect(inProgressStatus.activeMigrations).toContain(plan.id)\n      expect(inProgressStatus.isMigrating).toBe(true)\n\n      // 等待完成\n      const result = await migrationPromise\n      expect(result.success).toBe(true)\n\n      // 迁移完成后应该没有活动迁移\n      const completedStatus = await dataMigrationTool.getSystemStatus()\n      expect(completedStatus.activeMigrations).toHaveLength(0)\n      expect(completedStatus.isMigrating).toBe(false)\n\n      cleanupLocalStorage()\n    })\n  })\n\n  describe('性能和优化', () => {\n    beforeEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    afterEach(async () => {\n      cleanupLocalStorage()\n      await db.clearAll()\n    })\n\n    test('应该在合理时间内完成迁移', async () => {\n      const testData = TestDataFactory.createBulkTestData(20, 5, 8)\n      setupLocalStorageData(testData)\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n\n      const startTime = performance.now()\n      const result = await dataMigrationTool.executeMigration(plan)\n      const endTime = performance.now()\n\n      expect(result.success).toBe(true)\n      expect(result.duration).toBeGreaterThan(0)\n\n      const actualDuration = endTime - startTime\n      console.log(`迁移执行耗时: ${actualDuration.toFixed(2)}ms`)\n\n      // 应该在预期时间范围内\n      expect(actualDuration).toBeLessThan(10000)\n\n      cleanupLocalStorage()\n    })\n\n    test('应该优化大数据量迁移性能', async () => {\n      const largeData = TestDataFactory.createBulkTestData(100, 20, 30)\n      setupLocalStorageData(largeData)\n\n      const source = {\n        type: 'localStorage' as const,\n        version: '1.0'\n      }\n\n      const plan = await dataMigrationTool.analyzeAndCreatePlan(source)\n\n      const startTime = performance.now()\n      const result = await dataMigrationTool.executeMigration(plan)\n      const endTime = performance.now()\n\n      expect(result.success).toBe(true)\n      expect(result.migratedCards).toBe(largeData.cards.length)\n      expect(result.migratedFolders).toBe(largeData.folders.length)\n      expect(result.migratedTags).toBe(largeData.tags.length)\n\n      const actualDuration = endTime - startTime\n      const throughput = (largeData.cards.length + largeData.folders.length + largeData.tags.length) / (actualDuration / 1000)\n\n      console.log(`大数据量迁移耗时: ${actualDuration.toFixed(2)}ms`)\n      console.log(`迁移吞吐量: ${throughput.toFixed(2)} 记录/秒`)\n\n      // 性能应该合理（至少10记录/秒）\n      expect(throughput).toBeGreaterThan(10)\n\n      cleanupLocalStorage()\n    })\n  })\n})"],"version":3}
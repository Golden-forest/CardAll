{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\sync\\optimized-cloud-sync.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\sync\\optimized-cloud-sync.ts"],"sourcesContent":["// 重构后的云端同步服务\r\n// Week 3 Day 11-13 同步机制重构 - Project-Brainstormer\r\n\r\nimport { type SyncStatus } from '../supabase'\r\nimport { networkStateDetector } from '../network-state-detector'\r\nimport { errorRecoveryStrategy } from '../network-error-handler'\r\nimport { incrementalSyncAlgorithm } from './algorithms/incremental-sync-algorithm'\r\nimport { intelligentConflictResolver } from './conflict/intelligent-conflict-resolver'\r\nimport { type SyncOperation, type SyncResult, type ConflictInfo, type ConflictResolutionContext } from './types/sync-types'\r\nimport { db } from '../database-unified'\r\n\r\nexport interface OptimizedCloudSyncConfig {\r\n  enableIncrementalSync: boolean\r\n  enableConflictResolution: boolean\r\n  enablePerformanceOptimization: boolean\r\n  syncIntervals: {\r\n    excellent: number    // ms\r\n    good: number         // ms\r\n    fair: number        // ms\r\n    poor: number        // ms\r\n  }\r\n  batchSizes: {\r\n    cards: number\r\n    folders: number\r\n    tags: number\r\n    images: number\r\n  }\r\n  retryStrategies: {\r\n    maxRetries: number\r\n    backoffMultiplier: number\r\n    initialDelay: number\r\n  }\r\n}\r\n\r\nexport class OptimizedCloudSyncService {\r\n  private syncInProgress = false\r\n  private lastSyncTime: Date | null = null\r\n  private lastSyncResult: SyncResult | null = null\r\n  private listeners: ((status: SyncStatus) => void)[] = []\r\n  private authService: any = null\r\n  private networkInitialized = false\r\n  private syncInterval: NodeJS.Timeout | null = null\r\n  \r\n  private config: OptimizedCloudSyncConfig = {\r\n    enableIncrementalSync: true,\r\n    enableConflictResolution: true,\r\n    enablePerformanceOptimization: true,\r\n    syncIntervals: {\r\n      excellent: 60 * 1000,    // 1分钟\r\n      good: 2 * 60 * 1000,      // 2分钟\r\n      fair: 5 * 60 * 1000,      // 5分钟\r\n      poor: 10 * 60 * 1000      // 10分钟\r\n    },\r\n    batchSizes: {\r\n      cards: 20,\r\n      folders: 10,\r\n      tags: 50,\r\n      images: 5\r\n    },\r\n    retryStrategies: {\r\n      maxRetries: 3,\r\n      backoffMultiplier: 2,\r\n      initialDelay: 1000\r\n    }\r\n  }\r\n  \r\n  private syncMetrics = {\r\n    totalSyncs: 0,\r\n    successfulSyncs: 0,\r\n    failedSyncs: 0,\r\n    averageSyncTime: 0,\r\n    lastSyncDuration: 0,\r\n    conflictsResolved: 0,\r\n    operationsProcessed: 0,\r\n    bytesTransferred: 0\r\n  }\r\n  \r\n  constructor() {\r\n    this.initialize()\r\n  }\r\n  \r\n  /**\r\n   * 初始化同步服务\r\n   */\r\n  private initialize() {\r\n    console.log('🚀 初始化优化的云端同步服务')\r\n    \r\n    // 初始化网络集成\r\n    this.initializeNetworkIntegration()\r\n    \r\n    // 启动自适应同步\r\n    this.startAdaptiveSync()\r\n    \r\n    // 恢复同步状态\r\n    this.restoreSyncState()\r\n  }\r\n  \r\n  /**\r\n   * 初始化网络集成\r\n   */\r\n  private initializeNetworkIntegration() {\r\n    if (this.networkInitialized) return\r\n    \r\n    networkStateDetector.addListener({\r\n      onNetworkStateChanged: this.handleNetworkStateChange.bind(this),\r\n      onNetworkError: this.handleNetworkError.bind(this),\r\n      onSyncCompleted: this.handleSyncCompleted.bind(this),\r\n      onSyncStrategyChanged: this.handleSyncStrategyChanged.bind(this)\r\n    })\r\n    \r\n    this.networkInitialized = true\r\n    console.log('✅ 网络集成初始化完成')\r\n  }\r\n  \r\n  /**\r\n   * 处理网络状态变化\r\n   */\r\n  private handleNetworkStateChange(state: any): void {\r\n    console.log('📡 网络状态变化:', {\r\n      online: state.isOnline,\r\n      quality: state.quality,\r\n      reliable: state.isReliable,\r\n      canSync: state.canSync\r\n    })\r\n    \r\n    // 网络恢复且可靠时，立即尝试同步\r\n    if (state.isOnline && state.isReliable && state.canSync) {\r\n      this.debouncedSync()\r\n    }\r\n    \r\n    this.notifyStatusChange()\r\n  }\r\n  \r\n  /**\r\n   * 处理网络错误\r\n   */\r\n  private handleNetworkError(error: any, context?: string): void {\r\n    console.warn('⚠️ 网络错误:', error.message, context)\r\n    \r\n    // 根据错误类型调整策略\r\n    if (error.type === 'connection_lost' || error.type === 'network_slow') {\r\n      this.pauseSyncQueue()\r\n    }\r\n    \r\n    // 应用错误恢复策略\r\n    errorRecoveryStrategy.handle(error, {\r\n      context: context || 'sync_service',\r\n      retry: this.shouldRetryError(error),\r\n      onRecovery: () => {\r\n        console.log('🔄 网络错误已恢复，重新启动同步')\r\n        this.debouncedSync()\r\n      }\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * 处理同步完成\r\n   */\r\n  private handleSyncCompleted(request: any, response: any): void {\r\n    if (response.success) {\r\n      this.lastSyncTime = new Date()\r\n      this.updateSyncMetrics(true, response.duration || 0)\r\n    } else {\r\n      this.updateSyncMetrics(false, response.duration || 0)\r\n    }\r\n    \r\n    this.notifyStatusChange()\r\n  }\r\n  \r\n  /**\r\n   * 处理同步策略变化\r\n   */\r\n  private handleSyncStrategyChanged(strategy: any): void {\r\n    console.log('📋 同步策略变化:', strategy)\r\n    \r\n    if (strategy.backgroundSyncEnabled) {\r\n      this.startAdaptiveSync()\r\n    } else {\r\n      this.stopAdaptiveSync()\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 设置认证服务\r\n   */\r\n  setAuthService(authService: any) {\r\n    this.authService = authService\r\n    \r\n    // 监听认证状态变化\r\n    authService.onAuthStateChange(async (authState: any) => {\r\n      if (authState.user) {\r\n        console.log('🔐 用户已认证，准备同步')\r\n        const networkState = networkStateDetector.getCurrentState()\r\n        if (networkState.canSync) {\r\n          await this.performOptimizedSync()\r\n        }\r\n      } else {\r\n        console.log('🔓 用户已登出，停止同步')\r\n        this.stopAdaptiveSync()\r\n      }\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * 启动自适应同步\r\n   */\r\n  private startAdaptiveSync(): void {\r\n    this.stopAdaptiveSync()\r\n    \r\n    const networkState = networkStateDetector.getCurrentState()\r\n    const syncInterval = this.getSyncInterval(networkState.quality)\r\n    \r\n    this.syncInterval = setInterval(async () => {\r\n      const currentState = networkStateDetector.getCurrentState()\r\n      if (currentState.canSync && this.authService?.isAuthenticated()) {\r\n        await this.performOptimizedSync()\r\n      }\r\n    }, syncInterval)\r\n    \r\n    console.log(`🔄 自适应同步已启动，间隔: ${syncInterval / 1000}秒`)\r\n  }\r\n  \r\n  /**\r\n   * 停止自适应同步\r\n   */\r\n  private stopAdaptiveSync(): void {\r\n    if (this.syncInterval) {\r\n      clearInterval(this.syncInterval)\r\n      this.syncInterval = null\r\n      console.log('⏹️ 自适应同步已停止')\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 根据网络质量获取同步间隔\r\n   */\r\n  private getSyncInterval(networkQuality: string): number {\r\n    return this.config.syncIntervals[networkQuality as keyof typeof this.config.syncIntervals] || \r\n           this.config.syncIntervals.fair\r\n  }\r\n  \r\n  /**\r\n   * 防抖同步\r\n   */\r\n  private debounceTimeout: NodeJS.Timeout | null = null\r\n  private debouncedSync(): void {\r\n    if (this.debounceTimeout) {\r\n      clearTimeout(this.debounceTimeout)\r\n    }\r\n    \r\n    this.debounceTimeout = setTimeout(async () => {\r\n      if (this.authService?.isAuthenticated()) {\r\n        await this.performOptimizedSync()\r\n      }\r\n    }, 2000) // 2秒防抖\r\n  }\r\n  \r\n  /**\r\n   * 暂停同步队列\r\n   */\r\n  private pauseSyncQueue(): void {\r\n    // 实现同步队列暂停逻辑\r\n    console.log('⏸️ 同步队列已暂停')\r\n  }\r\n  \r\n  /**\r\n   * 判断是否应该重试错误\r\n   */\r\n  private shouldRetryError(error: any): boolean {\r\n    return error.type === 'network_error' || \r\n           error.type === 'timeout_error' || \r\n           error.type === 'server_error'\r\n  }\r\n  \r\n  /**\r\n   * 主要同步入口 - 优化的同步流程\r\n   */\r\n  async performOptimizedSync(): Promise<SyncResult> {\r\n    if (this.syncInProgress || !this.authService?.isAuthenticated()) {\r\n      return this.lastSyncResult || {\r\n        success: false,\r\n        processedCount: 0,\r\n        failedCount: 0,\r\n        conflicts: [],\r\n        errors: [],\r\n        duration: 0,\r\n        bytesTransferred: 0\r\n      }\r\n    }\r\n    \r\n    const networkState = networkStateDetector.getCurrentState()\r\n    if (!networkState.canSync) {\r\n      console.log('📡 网络状态不适合同步，跳过')\r\n      return {\r\n        success: false,\r\n        processedCount: 0,\r\n        failedCount: 0,\r\n        conflicts: [],\r\n        errors: [],\r\n        duration: 0,\r\n        bytesTransferred: 0\r\n      }\r\n    }\r\n    \r\n    this.syncInProgress = true\r\n    this.notifyStatusChange()\r\n    \r\n    try {\r\n      console.log('🚀 开始优化同步流程')\r\n      const startTime = performance.now()\r\n      \r\n      let result: SyncResult\r\n      \r\n      if (this.config.enableIncrementalSync) {\r\n        // 使用增量同步算法\r\n        const user = this.authService.getCurrentUser()\r\n        result = await incrementalSyncAlgorithm.performIncrementalSync(user.id)\r\n      } else {\r\n        // 使用传统全量同步\r\n        result = await this.performFullSyncOptimized()\r\n      }\r\n      \r\n      result.duration = performance.now() - startTime\r\n      \r\n      // 更新同步指标\r\n      this.updateSyncMetrics(result.success, result.duration)\r\n      this.lastSyncResult = result\r\n      \r\n      // 冲突解决（如果启用）\r\n      if (this.config.enableConflictResolution && result.conflicts.length > 0) {\r\n        await this.resolveConflicts(result.conflicts)\r\n      }\r\n      \r\n      console.log(`✅ 同步完成 - 成功: ${result.success}, 处理: ${result.processedCount}, 失败: ${result.failedCount}`)\r\n      \r\n      return result\r\n      \r\n    } catch (error) {\r\n      console.error('❌ 同步失败:', error)\r\n      \r\n      const errorResult: SyncResult = {\r\n        success: false,\r\n        processedCount: 0,\r\n        failedCount: 1,\r\n        conflicts: [],\r\n        errors: [{\r\n          id: crypto.randomUUID(),\r\n          operationId: 'main_sync',\r\n          errorType: 'server_error',\r\n          message: error instanceof Error ? error.message : 'Unknown error',\r\n          timestamp: new Date(),\r\n          retryable: this.shouldRetryError(error),\r\n          resolved: false\r\n        }],\r\n        duration: performance.now() - (performance.now() - 0),\r\n        bytesTransferred: 0\r\n      }\r\n      \r\n      this.updateSyncMetrics(false, errorResult.duration)\r\n      this.lastSyncResult = errorResult\r\n      \r\n      return errorResult\r\n      \r\n    } finally {\r\n      this.syncInProgress = false\r\n      this.notifyStatusChange()\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 优化的全量同步\r\n   */\r\n  private async performFullSyncOptimized(): Promise<SyncResult> {\r\n    const startTime = performance.now()\r\n    const result: SyncResult = {\r\n      success: true,\r\n      processedCount: 0,\r\n      failedCount: 0,\r\n      conflicts: [],\r\n      errors: [],\r\n      duration: 0,\r\n      bytesTransferred: 0\r\n    }\r\n    \r\n    try {\r\n      const user = this.authService.getCurrentUser()\r\n      \r\n      // 并行执行上下行同步\r\n      const [downsyncResult, upsyncResult] = await Promise.all([\r\n        this.performDownSyncOptimized(user.id),\r\n        this.performUpSyncOptimized(user.id)\r\n      ])\r\n      \r\n      // 合并结果\r\n      result.processedCount = downsyncResult.processed + upsyncResult.processed\r\n      result.failedCount = downsyncResult.failed + upsyncResult.failed\r\n      result.conflicts = [...downsyncResult.conflicts, ...upsyncResult.conflicts]\r\n      result.errors = [...downsyncResult.errors, ...upsyncResult.errors]\r\n      result.bytesTransferred = downsyncResult.bytesTransferred + upsyncResult.bytesTransferred\r\n      \r\n      result.success = result.failedCount === 0\r\n      result.duration = performance.now() - startTime\r\n      \r\n    } catch (error) {\r\n      result.success = false\r\n      result.errors.push({\r\n        id: crypto.randomUUID(),\r\n        operationId: 'full_sync',\r\n        errorType: 'server_error',\r\n        message: error instanceof Error ? error.message : 'Unknown error',\r\n        timestamp: new Date(),\r\n        retryable: true,\r\n        resolved: false\r\n      })\r\n      result.duration = performance.now() - startTime\r\n    }\r\n    \r\n    return result\r\n  }\r\n  \r\n  /**\r\n   * 优化的下行同步\r\n   */\r\n  private async performDownSyncOptimized(userId: string): Promise<{\r\n    processed: number\r\n    failed: number\r\n    conflicts: any[]\r\n    errors: any[]\r\n    bytesTransferred: number\r\n  }> {\r\n    // 实现优化的下行同步逻辑\r\n    // 这里简化实现，实际需要基于增量同步算法\r\n    \r\n    return {\r\n      processed: 0,\r\n      failed: 0,\r\n      conflicts: [],\r\n      errors: [],\r\n      bytesTransferred: 0\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 优化的上行同步\r\n   */\r\n  private async performUpSyncOptimized(userId: string): Promise<{\r\n    processed: number\r\n    failed: number\r\n    conflicts: any[]\r\n    errors: any[]\r\n    bytesTransferred: number\r\n  }> {\r\n    // 实现优化的上行同步逻辑\r\n    // 这里简化实现，实际需要基于增量同步算法\r\n    \r\n    return {\r\n      processed: 0,\r\n      failed: 0,\r\n      conflicts: [],\r\n      errors: [],\r\n      bytesTransferred: 0\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 智能冲突解决\r\n   */\r\n  private async resolveConflicts(conflicts: ConflictInfo[]): Promise<void> {\r\n    console.log(`🔍 开始解决 ${conflicts.length} 个冲突`)\r\n    \r\n    for (const conflict of conflicts) {\r\n      try {\r\n        const context = this.createConflictResolutionContext(conflict)\r\n        const resolution = await intelligentConflictResolver.resolveConflict(conflict, context)\r\n        \r\n        // 应用冲突解决结果\r\n        await this.applyConflictResolution(conflict, resolution)\r\n        \r\n        // 更新冲突历史\r\n        await intelligentConflictResolver.updateConflictHistory(conflict, resolution, 0)\r\n        \r\n        this.syncMetrics.conflictsResolved++\r\n        \r\n      } catch (error) {\r\n        console.error(`❌ 冲突解决失败: ${conflict.entityType}-${conflict.entityId}`, error)\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 创建冲突解决上下文\r\n   */\r\n  private createConflictResolutionContext(conflict: ConflictInfo): ConflictResolutionContext {\r\n    const networkState = networkStateDetector.getCurrentState()\r\n    \r\n    return {\r\n      localOperation: {\r\n        id: crypto.randomUUID(),\r\n        type: 'update',\r\n        entity: conflict.entityType as any,\r\n        entityId: conflict.entityId,\r\n        data: conflict.localData,\r\n        timestamp: new Date(),\r\n        retryCount: 0,\r\n        priority: 'medium',\r\n        syncVersion: 1\r\n      },\r\n      cloudOperation: {\r\n        id: crypto.randomUUID(),\r\n        type: 'update',\r\n        entity: conflict.entityType as any,\r\n        entityId: conflict.entityId,\r\n        data: conflict.cloudData,\r\n        timestamp: new Date(),\r\n        retryCount: 0,\r\n        priority: 'medium',\r\n        syncVersion: 1\r\n      },\r\n      userPreferences: intelligentConflictResolver['userPreferences'],\r\n      networkQuality: {\r\n        bandwidth: networkState.bandwidth || 10,\r\n        latency: networkState.latency || 50,\r\n        reliability: networkState.reliability || 0.9,\r\n        type: networkState.connectionType || 'unknown'\r\n      },\r\n      timeConstraints: {\r\n        urgency: 'medium',\r\n        userActive: document.visibilityState === 'visible'\r\n      },\r\n      historyData: intelligentConflictResolver['conflictHistory']\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 应用冲突解决结果\r\n   */\r\n  private async applyConflictResolution(conflict: ConflictInfo, resolution: any): Promise<void> {\r\n    console.log(`🔧 应用冲突解决: ${conflict.entityType}-${conflict.entityId} -> ${resolution.resolution}`)\r\n    \r\n    // 根据解决结果应用变更\r\n    switch (resolution.resolution) {\r\n      case 'local_wins':\r\n        await this.applyLocalWinsResolution(conflict, resolution)\r\n        break\r\n      case 'cloud_wins':\r\n        await this.applyCloudWinsResolution(conflict, resolution)\r\n        break\r\n      case 'merge':\r\n        await this.applyMergeResolution(conflict, resolution)\r\n        break\r\n      case 'manual':\r\n        // 手动解决，等待用户处理\r\n        break\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 应用本地获胜解决方案\r\n   */\r\n  private async applyLocalWinsResolution(conflict: ConflictInfo, resolution: any): Promise<void> {\r\n    // 实现本地获胜逻辑\r\n    console.log(`📤 本地获胜，上传到云端: ${conflict.entityType}-${conflict.entityId}`)\r\n  }\r\n  \r\n  /**\r\n   * 应用云端获胜解决方案\r\n   */\r\n  private async applyCloudWinsResolution(conflict: ConflictInfo, resolution: any): Promise<void> {\r\n    // 实现云端获胜逻辑\r\n    console.log(`📥 云端获胜，更新本地: ${conflict.entityType}-${conflict.entityId}`)\r\n  }\r\n  \r\n  /**\r\n   * 应用合并解决方案\r\n   */\r\n  private async applyMergeResolution(conflict: ConflictInfo, resolution: any): Promise<void> {\r\n    // 实现合并逻辑\r\n    console.log(`🔄 合并解决: ${conflict.entityType}-${conflict.entityId}`)\r\n  }\r\n  \r\n  /**\r\n   * 更新同步指标\r\n   */\r\n  private updateSyncMetrics(success: boolean, duration: number): void {\r\n    this.syncMetrics.totalSyncs++\r\n    \r\n    if (success) {\r\n      this.syncMetrics.successfulSyncs++\r\n    } else {\r\n      this.syncMetrics.failedSyncs++\r\n    }\r\n    \r\n    // 更新平均同步时间\r\n    const totalTime = this.syncMetrics.averageSyncTime * (this.syncMetrics.totalSyncs - 1) + duration\r\n    this.syncMetrics.averageSyncTime = totalTime / this.syncMetrics.totalSyncs\r\n    \r\n    this.syncMetrics.lastSyncDuration = duration\r\n    \r\n    console.log(`📊 同步指标更新: 成功率 ${((this.syncMetrics.successfulSyncs / this.syncMetrics.totalSyncs) * 100).toFixed(1)}%, 平均时长 ${this.syncMetrics.averageSyncTime.toFixed(0)}ms`)\r\n  }\r\n  \r\n  /**\r\n   * 恢复同步状态\r\n   */\r\n  private async restoreSyncState(): Promise<void> {\r\n    try {\r\n      // 恢复最后同步时间\r\n      const lastSyncTime = localStorage.getItem('cardall_last_sync_time')\r\n      if (lastSyncTime) {\r\n        this.lastSyncTime = new Date(lastSyncTime)\r\n      }\r\n      \r\n      // 恢复同步指标\r\n      const syncMetrics = localStorage.getItem('cardall_sync_metrics')\r\n      if (syncMetrics) {\r\n        this.syncMetrics = { ...this.syncMetrics, ...JSON.parse(syncMetrics) }\r\n      }\r\n      \r\n      console.log('🔄 同步状态恢复完成')\r\n      \r\n    } catch (error) {\r\n      console.error('❌ 同步状态恢复失败:', error)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 保存同步状态\r\n   */\r\n  private async saveSyncState(): Promise<void> {\r\n    try {\r\n      if (this.lastSyncTime) {\r\n        localStorage.setItem('cardall_last_sync_time', this.lastSyncTime.toISOString())\r\n      }\r\n      \r\n      localStorage.setItem('cardall_sync_metrics', JSON.stringify(this.syncMetrics))\r\n      \r\n    } catch (error) {\r\n      console.error('❌ 同步状态保存失败:', error)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 状态监听器\r\n   */\r\n  onStatusChange(callback: (status: SyncStatus) => void): () => void {\r\n    this.listeners.push(callback)\r\n    callback(this.getCurrentStatus())\r\n    \r\n    return () => {\r\n      const index = this.listeners.indexOf(callback)\r\n      if (index > -1) {\r\n        this.listeners.splice(index, 1)\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 通知状态变化\r\n   */\r\n  private notifyStatusChange(): void {\r\n    const status = this.getCurrentStatus()\r\n    this.listeners.forEach(listener => listener(status))\r\n  }\r\n  \r\n  /**\r\n   * 获取当前状态\r\n   */\r\n  getCurrentStatus(): SyncStatus {\r\n    const networkState = networkStateDetector.getCurrentState()\r\n    \r\n    return {\r\n      isOnline: networkState.isOnline,\r\n      lastSyncTime: this.lastSyncTime,\r\n      pendingOperations: 0, // 需要从数据库获取\r\n      syncInProgress: this.syncInProgress,\r\n      hasConflicts: this.lastSyncResult?.conflicts.length > 0\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 添加同步操作\r\n   */\r\n  async queueOperation(operation: Omit<SyncOperation, 'id' | 'timestamp' | 'retryCount'>): Promise<void> {\r\n    // 实现操作队列逻辑\r\n    console.log(`📝 添加同步操作: ${operation.entity}-${operation.entityId}`)\r\n    \r\n    // 如果在线且已认证，立即尝试同步\r\n    if (networkStateDetector.getCurrentState().canSync && this.authService?.isAuthenticated()) {\r\n      this.debouncedSync()\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 获取同步统计\r\n   */\r\n  getSyncStatistics() {\r\n    return {\r\n      ...this.syncMetrics,\r\n      successRate: this.syncMetrics.totalSyncs > 0 \r\n        ? (this.syncMetrics.successfulSyncs / this.syncMetrics.totalSyncs) * 100 \r\n        : 0,\r\n      conflictResolutionRate: intelligentConflictResolver.getConflictStatistics(),\r\n      lastSyncTime: this.lastSyncTime,\r\n      isOnline: networkStateDetector.getCurrentState().isOnline,\r\n      networkQuality: networkStateDetector.getCurrentState().quality\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 手动触发同步\r\n   */\r\n  async triggerManualSync(): Promise<SyncResult> {\r\n    console.log('👆 手动触发同步')\r\n    return await this.performOptimizedSync()\r\n  }\r\n  \r\n  /**\r\n   * 配置更新\r\n   */\r\n  updateConfig(newConfig: Partial<OptimizedCloudSyncConfig>): void {\r\n    this.config = { ...this.config, ...newConfig }\r\n    \r\n    // 如果同步间隔配置改变，重新启动自适应同步\r\n    if (newConfig.syncIntervals) {\r\n      this.startAdaptiveSync()\r\n    }\r\n    \r\n    console.log('⚙️ 同步配置已更新')\r\n  }\r\n\r\n  /**\r\n   * Week 4 Realtime事件处理\r\n   * 处理来自Supabase Realtime的实时变更事件\r\n   */\r\n  async handleRealtimeEvent(event: any): Promise<void> {\r\n    try {\r\n      console.log('📡 处理Realtime事件:', event)\r\n      \r\n      // 根据事件类型处理不同的Realtime变更\r\n      switch (event.eventType) {\r\n        case 'INSERT':\r\n          await this.handleRealtimeInsert(event)\r\n          break\r\n        case 'UPDATE':\r\n          await this.handleRealtimeUpdate(event)\r\n          break\r\n        case 'DELETE':\r\n          await this.handleRealtimeDelete(event)\r\n          break\r\n        default:\r\n          console.warn('未知的Realtime事件类型:', event.eventType)\r\n      }\r\n      \r\n      // 更新同步指标\r\n      this.syncMetrics.operationsProcessed++\r\n      \r\n    } catch (error) {\r\n      console.error('❌ 处理Realtime事件失败:', error)\r\n      \r\n      // 添加错误到同步结果\r\n      if (this.lastSyncResult) {\r\n        this.lastSyncResult.errors.push({\r\n          id: crypto.randomUUID(),\r\n          operationId: 'realtime_event',\r\n          errorType: 'realtime_error',\r\n          message: error instanceof Error ? error.message : 'Unknown realtime error',\r\n          timestamp: new Date(),\r\n          retryable: false,\r\n          resolved: false\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 处理Realtime插入事件\r\n   */\r\n  private async handleRealtimeInsert(event: any): Promise<void> {\r\n    const { table, record } = event.payload\r\n    \r\n    // 检查本地是否已存在该记录\r\n    const existingRecord = await this.getLocalRecord(table, record.id)\r\n    if (existingRecord) {\r\n      // 记录已存在，可能需要冲突解决\r\n      console.warn(`⚠️ Realtime插入冲突: ${table}-${record.id} 已存在`)\r\n      return\r\n    }\r\n    \r\n    // 将记录插入到本地数据库\r\n    await this.insertLocalRecord(table, record)\r\n    console.log(`✅ Realtime插入成功: ${table}-${record.id}`)\r\n  }\r\n\r\n  /**\r\n   * 处理Realtime更新事件\r\n   */\r\n  private async handleRealtimeUpdate(event: any): Promise<void> {\r\n    const { table, record, old_record } = event.payload\r\n    \r\n    // 检查本地记录状态\r\n    const localRecord = await this.getLocalRecord(table, record.id)\r\n    if (!localRecord) {\r\n      // 本地不存在该记录，可能是删除的记录或新记录\r\n      console.log(`📝 Realtime更新: ${table}-${record.id} 本地不存在，插入新记录`)\r\n      await this.insertLocalRecord(table, record)\r\n      return\r\n    }\r\n    \r\n    // 检查版本冲突\r\n    if (localRecord.sync_version > record.sync_version) {\r\n      console.warn(`⚠️ Realtime版本冲突: ${table}-${record.id} 本地版本更新`)\r\n      // 这里可以触发冲突解决流程\r\n      return\r\n    }\r\n    \r\n    // 更新本地记录\r\n    await this.updateLocalRecord(table, record)\r\n    console.log(`✅ Realtime更新成功: ${table}-${record.id}`)\r\n  }\r\n\r\n  /**\r\n   * 处理Realtime删除事件\r\n   */\r\n  private async handleRealtimeDelete(event: any): Promise<void> {\r\n    const { table, old_record } = event.payload\r\n    \r\n    // 检查本地是否存在该记录\r\n    const localRecord = await this.getLocalRecord(table, old_record.id)\r\n    if (!localRecord) {\r\n      console.log(`📝 Realtime删除: ${table}-${old_record.id} 本地不存在`)\r\n      return\r\n    }\r\n    \r\n    // 删除本地记录\r\n    await this.deleteLocalRecord(table, old_record.id)\r\n    console.log(`✅ Realtime删除成功: ${table}-${old_record.id}`)\r\n  }\r\n\r\n  /**\r\n   * 获取本地记录\r\n   */\r\n  private async getLocalRecord(table: string, id: string): Promise<any> {\r\n    try {\r\n      switch (table) {\r\n        case 'cards':\r\n          return await db.cards.get(id)\r\n        case 'folders':\r\n          return await db.folders.get(id)\r\n        case 'tags':\r\n          return await db.tags.get(id)\r\n        case 'images':\r\n          return await db.images.get(id)\r\n        default:\r\n          console.warn(`未知的表类型: ${table}`)\r\n          return null\r\n      }\r\n    } catch (error) {\r\n      console.error(`获取本地记录失败: ${table}-${id}`, error)\r\n      return null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 插入本地记录\r\n   */\r\n  private async insertLocalRecord(table: string, record: any): Promise<void> {\r\n    try {\r\n      switch (table) {\r\n        case 'cards':\r\n          await db.cards.add(record)\r\n          break\r\n        case 'folders':\r\n          await db.folders.add(record)\r\n          break\r\n        case 'tags':\r\n          await db.tags.add(record)\r\n          break\r\n        case 'images':\r\n          await db.images.add(record)\r\n          break\r\n        default:\r\n          console.warn(`未知的表类型: ${table}`)\r\n      }\r\n    } catch (error) {\r\n      console.error(`插入本地记录失败: ${table}-${record.id}`, error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新本地记录\r\n   */\r\n  private async updateLocalRecord(table: string, record: any): Promise<void> {\r\n    try {\r\n      switch (table) {\r\n        case 'cards':\r\n          await db.cards.put(record)\r\n          break\r\n        case 'folders':\r\n          await db.folders.put(record)\r\n          break\r\n        case 'tags':\r\n          await db.tags.put(record)\r\n          break\r\n        case 'images':\r\n          await db.images.put(record)\r\n          break\r\n        default:\r\n          console.warn(`未知的表类型: ${table}`)\r\n      }\r\n    } catch (error) {\r\n      console.error(`更新本地记录失败: ${table}-${record.id}`, error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 删除本地记录\r\n   */\r\n  private async deleteLocalRecord(table: string, id: string): Promise<void> {\r\n    try {\r\n      switch (table) {\r\n        case 'cards':\r\n          await db.cards.delete(id)\r\n          break\r\n        case 'folders':\r\n          await db.folders.delete(id)\r\n          break\r\n        case 'tags':\r\n          await db.tags.delete(id)\r\n          break\r\n        case 'images':\r\n          await db.images.delete(id)\r\n          break\r\n        default:\r\n          console.warn(`未知的表类型: ${table}`)\r\n      }\r\n    } catch (error) {\r\n      console.error(`删除本地记录失败: ${table}-${id}`, error)\r\n      throw error\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 销毁服务\r\n   */\r\n  destroy(): void {\r\n    this.stopAdaptiveSync()\r\n    this.listeners = []\r\n    \r\n    if (this.debounceTimeout) {\r\n      clearTimeout(this.debounceTimeout)\r\n    }\r\n    \r\n    console.log('🧹 优化同步服务已销毁')\r\n  }\r\n}\r\n\r\n// 导出单例实例\r\nexport const optimizedCloudSyncService = new OptimizedCloudSyncService()"],"version":3}
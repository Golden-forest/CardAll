{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\utils\\performance-benchmark.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\utils\\performance-benchmark.ts"],"sourcesContent":["/**\n * CardAll性能基准测试工具\n * 用于建立当前性能基准和设定优化目标\n */\n\nexport interface PerformanceMetrics {\n  // 加载性能\n  firstContentfulPaint: number\n  largestContentfulPaint: number\n  timeToInteractive: number\n  totalBlockingTime: number\n  cumulativeLayoutShift: number\n\n  // 运行时性能\n  jsHeapSizeLimit: number\n  totalJSHeapSize: number\n  usedJSHeapSize: number\n\n  // 同步性能\n  syncOperationTime: number\n  syncSuccessRate: number\n  conflictResolutionTime: number\n\n  // 数据库性能\n  dbQueryTime: number\n  dbWriteTime: number\n  dbReadTime: number\n\n  // 组件性能\n  componentRenderTime: number\n  stateUpdateTime: number\n  virtualScrollPerformance: number\n\n  // 网络性能\n  apiResponseTime: number\n  networkLatency: number\n  bundleLoadTime: number\n}\n\nexport interface PerformanceBenchmark {\n  name: string\n  currentValue: number\n  targetValue: number\n  unit: string\n  improvementTarget: number // 百分比\n  category: 'loading' | 'runtime' | 'sync' | 'database' | 'component' | 'network'\n}\n\nexport class PerformanceBenchmarkSuite {\n  private metrics: PerformanceMetrics = {\n    firstContentfulPaint: 0,\n    largestContentfulPaint: 0,\n    timeToInteractive: 0,\n    totalBlockingTime: 0,\n    cumulativeLayoutShift: 0,\n    jsHeapSizeLimit: 0,\n    totalJSHeapSize: 0,\n    usedJSHeapSize: 0,\n    syncOperationTime: 0,\n    syncSuccessRate: 0,\n    conflictResolutionTime: 0,\n    dbQueryTime: 0,\n    dbWriteTime: 0,\n    dbReadTime: 0,\n    componentRenderTime: 0,\n    stateUpdateTime: 0,\n    virtualScrollPerformance: 0,\n    apiResponseTime: 0,\n    networkLatency: 0,\n    bundleLoadTime: 0\n  }\n\n  private benchmarks: PerformanceBenchmark[] = [\n    // 加载性能基准\n    {\n      name: '首次内容绘制时间',\n      currentValue: 0,\n      targetValue: 800,\n      unit: 'ms',\n      improvementTarget: 70,\n      category: 'loading'\n    },\n    {\n      name: '最大内容绘制时间',\n      currentValue: 0,\n      targetValue: 1200,\n      unit: 'ms',\n      improvementTarget: 75,\n      category: 'loading'\n    },\n    {\n      name: '可交互时间',\n      currentValue: 0,\n      targetValue: 1500,\n      unit: 'ms',\n      improvementTarget: 80,\n      category: 'loading'\n    },\n    {\n      name: '总阻塞时间',\n      currentValue: 0,\n      targetValue: 150,\n      unit: 'ms',\n      improvementTarget: 85,\n      category: 'loading'\n    },\n    {\n      name: '累积布局偏移',\n      currentValue: 0,\n      targetValue: 0.1,\n      unit: '',\n      improvementTarget: 80,\n      category: 'loading'\n    },\n\n    // 运行时性能基准\n    {\n      name: 'JS堆内存使用',\n      currentValue: 0,\n      targetValue: 50,\n      unit: 'MB',\n      improvementTarget: 60,\n      category: 'runtime'\n    },\n    {\n      name: '组件渲染时间',\n      currentValue: 0,\n      targetValue: 16,\n      unit: 'ms',\n      improvementTarget: 75,\n      category: 'component'\n    },\n    {\n      name: '状态更新时间',\n      currentValue: 0,\n      targetValue: 8,\n      unit: 'ms',\n      improvementTarget: 80,\n      category: 'component'\n    },\n    {\n      name: '虚拟滚动性能',\n      currentValue: 0,\n      targetValue: 60,\n      unit: 'FPS',\n      improvementTarget: 70,\n      category: 'component'\n    },\n\n    // 同步性能基准\n    {\n      name: '同步操作时间',\n      currentValue: 0,\n      targetValue: 200,\n      unit: 'ms',\n      improvementTarget: 85,\n      category: 'sync'\n    },\n    {\n      name: '同步成功率',\n      currentValue: 0,\n      targetValue: 99,\n      unit: '%',\n      improvementTarget: 15,\n      category: 'sync'\n    },\n    {\n      name: '冲突解决时间',\n      currentValue: 0,\n      targetValue: 50,\n      unit: 'ms',\n      improvementTarget: 80,\n      category: 'sync'\n    },\n\n    // 数据库性能基准\n    {\n      name: '数据库查询时间',\n      currentValue: 0,\n      targetValue: 10,\n      unit: 'ms',\n      improvementTarget: 90,\n      category: 'database'\n    },\n    {\n      name: '数据库写入时间',\n      currentValue: 0,\n      targetValue: 5,\n      unit: 'ms',\n      improvementTarget: 85,\n      category: 'database'\n    },\n    {\n      name: '数据库读取时间',\n      currentValue: 0,\n      targetValue: 2,\n      unit: 'ms',\n      improvementTarget: 90,\n      category: 'database'\n    },\n\n    // 网络性能基准\n    {\n      name: 'API响应时间',\n      currentValue: 0,\n      targetValue: 300,\n      unit: 'ms',\n      improvementTarget: 70,\n      category: 'network'\n    },\n    {\n      name: '网络延迟',\n      currentValue: 0,\n      targetValue: 100,\n      unit: 'ms',\n      improvementTarget: 75,\n      category: 'network'\n    },\n    {\n      name: 'Bundle加载时间',\n      currentValue: 0,\n      targetValue: 1000,\n      unit: 'ms',\n      improvementTarget: 80,\n      category: 'network'\n    }\n  ]\n\n  // 测量Web Vitals\n  async measureWebVitals(): Promise<void> {\n    if (typeof window !== 'undefined' && 'performance' in window) {\n      // 首次内容绘制\n      const paintEntries = performance.getEntriesByType('paint')\n      const fcpEntry = paintEntries.find(entry => entry.name === 'first-contentful-paint')\n      if (fcpEntry) {\n        this.metrics.firstContentfulPaint = fcpEntry.startTime\n        this.updateBenchmark('首次内容绘制时间', fcpEntry.startTime)\n      }\n\n      // 最大内容绘制\n      const lcpObserver = new PerformanceObserver((entryList) => {\n        const entries = entryList.getEntries()\n        const lastEntry = entries[entries.length - 1]\n        this.metrics.largestContentfulPaint = lastEntry.startTime\n        this.updateBenchmark('最大内容绘制时间', lastEntry.startTime)\n      })\n      lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] })\n\n      // 总阻塞时间\n      const tbt = this.calculateTotalBlockingTime()\n      this.metrics.totalBlockingTime = tbt\n      this.updateBenchmark('总阻塞时间', tbt)\n\n      // 累积布局偏移\n      const clsObserver = new PerformanceObserver((entryList) => {\n        let clsValue = 0\n        for (const entry of entryList.getEntries()) {\n          if (!(entry as any).hadRecentInput) {\n            clsValue += (entry as any).value\n          }\n        }\n        this.metrics.cumulativeLayoutShift = clsValue\n        this.updateBenchmark('累积布局偏移', clsValue)\n      })\n      clsObserver.observe({ entryTypes: ['layout-shift'] })\n    }\n  }\n\n  // 测量内存使用\n  measureMemoryUsage(): void {\n    if (typeof window !== 'undefined' && 'performance' in window && 'memory' in performance) {\n      const memory = (performance as any).memory\n      this.metrics.jsHeapSizeLimit = memory.jsHeapSizeLimit / (1024 * 1024)\n      this.metrics.totalJSHeapSize = memory.totalJSHeapSize / (1024 * 1024)\n      this.metrics.usedJSHeapSize = memory.usedJSHeapSize / (1024 * 1024)\n      this.updateBenchmark('JS堆内存使用', this.metrics.usedJSHeapSize)\n    }\n  }\n\n  // 测量组件渲染性能\n  measureComponentRenderTime(componentName: string, renderFunction: () => void): number {\n    const start = performance.now()\n    renderFunction()\n    const end = performance.now()\n    const renderTime = end - start\n    this.metrics.componentRenderTime = renderTime\n    this.updateBenchmark('组件渲染时间', renderTime)\n    return renderTime\n  }\n\n  // 测量同步性能\n  async measureSyncPerformance(syncOperation: () => Promise<any>): Promise<void> {\n    const start = performance.now()\n    try {\n      const result = await syncOperation()\n      const end = performance.now()\n      this.metrics.syncOperationTime = end - start\n      this.metrics.syncSuccessRate = 100\n      this.updateBenchmark('同步操作时间', this.metrics.syncOperationTime)\n      this.updateBenchmark('同步成功率', this.metrics.syncSuccessRate)\n    } catch (error) {\n      const end = performance.now()\n      this.metrics.syncOperationTime = end - start\n      this.metrics.syncSuccessRate = 0\n      this.updateBenchmark('同步操作时间', this.metrics.syncOperationTime)\n      this.updateBenchmark('同步成功率', this.metrics.syncSuccessRate)\n    }\n  }\n\n  // 测量数据库性能\n  async measureDatabasePerformance(dbOperation: () => Promise<any>, operationType: 'query' | 'write' | 'read'): Promise<void> {\n    const start = performance.now()\n    try {\n      await dbOperation()\n      const end = performance.now()\n      const duration = end - start\n\n      switch (operationType) {\n        case 'query':\n          this.metrics.dbQueryTime = duration\n          this.updateBenchmark('数据库查询时间', duration)\n          break\n        case 'write':\n          this.metrics.dbWriteTime = duration\n          this.updateBenchmark('数据库写入时间', duration)\n          break\n        case 'read':\n          this.metrics.dbReadTime = duration\n          this.updateBenchmark('数据库读取时间', duration)\n          break\n      }\n    } catch (error) {\n      console.error('Database performance measurement failed:', error)\n    }\n  }\n\n  // 计算总阻塞时间\n  private calculateTotalBlockingTime(): number {\n    const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming\n    const tbt = this.metrics.totalBlockingTime || 0\n    return tbt\n  }\n\n  // 更新基准值\n  private updateBenchmark(name: string, value: number): void {\n    const benchmark = this.benchmarks.find(b => b.name === name)\n    if (benchmark) {\n      benchmark.currentValue = value\n    }\n  }\n\n  // 获取性能报告\n  getPerformanceReport(): PerformanceReport {\n    const overallProgress = this.calculateOverallProgress()\n    const categoryProgress = this.calculateCategoryProgress()\n\n    return {\n      timestamp: new Date().toISOString(),\n      metrics: this.metrics,\n      benchmarks: this.benchmarks,\n      overallProgress,\n      categoryProgress,\n      recommendations: this.generateRecommendations()\n    }\n  }\n\n  // 计算总体进度\n  private calculateOverallProgress(): number {\n    let totalProgress = 0\n    let count = 0\n\n    this.benchmarks.forEach(benchmark => {\n      if (benchmark.currentValue > 0 && benchmark.targetValue > 0) {\n        const progress = Math.min(100, (benchmark.currentValue / benchmark.targetValue) * 100)\n        totalProgress += progress\n        count++\n      }\n    })\n\n    return count > 0 ? totalProgress / count : 0\n  }\n\n  // 计算分类进度\n  private calculateCategoryProgress(): Record<string, number> {\n    const categories = ['loading', 'runtime', 'sync', 'database', 'component', 'network']\n    const progress: Record<string, number> = {}\n\n    categories.forEach(category => {\n      let totalProgress = 0\n      let count = 0\n\n      this.benchmarks.filter(b => b.category === category).forEach(benchmark => {\n        if (benchmark.currentValue > 0 && benchmark.targetValue > 0) {\n          const progress = Math.min(100, (benchmark.currentValue / benchmark.targetValue) * 100)\n          totalProgress += progress\n          count++\n        }\n      })\n\n      progress[category] = count > 0 ? totalProgress / count : 0\n    })\n\n    return progress\n  }\n\n  // 生成优化建议\n  private generateRecommendations(): string[] {\n    const recommendations: string[] = []\n\n    this.benchmarks.forEach(benchmark => {\n      if (benchmark.currentValue > 0) {\n        const ratio = benchmark.currentValue / benchmark.targetValue\n\n        if (ratio > 2) {\n          recommendations.push(`${benchmark.name}严重超标(${benchmark.currentValue}${benchmark.unit}，目标${benchmark.targetValue}${benchmark.unit})，需要立即优化`)\n        } else if (ratio > 1.5) {\n          recommendations.push(`${benchmark.name}超出预期(${benchmark.currentValue}${benchmark.unit}，目标${benchmark.targetValue}${benchmark.unit})，建议优先优化`)\n        } else if (ratio > 1.2) {\n          recommendations.push(`${benchmark.name}略高于目标(${benchmark.currentValue}${benchmark.unit}，目标${benchmark.targetValue}${benchmark.unit})，可以进一步优化`)\n        }\n      }\n    })\n\n    return recommendations\n  }\n\n  // 设置性能目标\n  setPerformanceTargets(targets: Partial<Record<string, number>>): void {\n    Object.entries(targets).forEach(([name, targetValue]) => {\n      const benchmark = this.benchmarks.find(b => b.name === name)\n      if (benchmark) {\n        benchmark.targetValue = targetValue\n      }\n    })\n  }\n\n  // 获取当前基准值\n  getCurrentMetrics(): PerformanceMetrics {\n    return { ...this.metrics }\n  }\n\n  // 重置基准\n  reset(): void {\n    this.metrics = {\n      firstContentfulPaint: 0,\n      largestContentfulPaint: 0,\n      timeToInteractive: 0,\n      totalBlockingTime: 0,\n      cumulativeLayoutShift: 0,\n      jsHeapSizeLimit: 0,\n      totalJSHeapSize: 0,\n      usedJSHeapSize: 0,\n      syncOperationTime: 0,\n      syncSuccessRate: 0,\n      conflictResolutionTime: 0,\n      dbQueryTime: 0,\n      dbWriteTime: 0,\n      dbReadTime: 0,\n      componentRenderTime: 0,\n      stateUpdateTime: 0,\n      virtualScrollPerformance: 0,\n      apiResponseTime: 0,\n      networkLatency: 0,\n      bundleLoadTime: 0\n    }\n\n    this.benchmarks.forEach(benchmark => {\n      benchmark.currentValue = 0\n    })\n  }\n}\n\nexport interface PerformanceReport {\n  timestamp: string\n  metrics: PerformanceMetrics\n  benchmarks: PerformanceBenchmark[]\n  overallProgress: number\n  categoryProgress: Record<string, number>\n  recommendations: string[]\n}\n\n// 创建全局性能基准实例\nexport const performanceBenchmark = new PerformanceBenchmarkSuite()"],"version":3}
2f4a412fd35d56daa2d6cc93abd6bab5
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RichTextEditor = RichTextEditor;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const react_2 = require("@tiptap/react");
const starter_kit_1 = __importDefault(require("@tiptap/starter-kit"));
const extension_image_1 = __importDefault(require("@tiptap/extension-image"));
const extension_placeholder_1 = __importDefault(require("@tiptap/extension-placeholder"));
const extension_task_list_1 = __importDefault(require("@tiptap/extension-task-list"));
const extension_task_item_1 = __importDefault(require("@tiptap/extension-task-item"));
const extension_link_1 = __importDefault(require("@tiptap/extension-link"));
const extension_blockquote_1 = __importDefault(require("@tiptap/extension-blockquote"));
const extension_code_1 = __importDefault(require("@tiptap/extension-code"));
const extension_code_block_1 = __importDefault(require("@tiptap/extension-code-block"));
const extension_strike_1 = __importDefault(require("@tiptap/extension-strike"));
const tiptap_markdown_3_1 = require("tiptap-markdown-3");
const button_1 = require("@/components/ui/button");
const lucide_react_1 = require("lucide-react");
const utils_1 = require("@/lib/utils");
const emoji_picker_1 = require("./emoji-picker");
require("./editor-styles.css");
function RichTextEditor({ content, placeholder = "Start typing...", onUpdate, onSave, onCancel, className, autoFocus = false }) {
    const [showEmojiPicker, setShowEmojiPicker] = (0, react_1.useState)(false);
    const [emojiQuery, setEmojiQuery] = (0, react_1.useState)('');
    const [emojiPosition, setEmojiPosition] = (0, react_1.useState)(null);
    const editorRef = (0, react_1.useRef)(null);
    const editor = (0, react_2.useEditor)({
        extensions: [
            starter_kit_1.default.configure({
                // 禁用默认的一些扩展，因为我们要单独配置
                strike: false,
                code: false,
                blockquote: false,
            }),
            // Markdown 支持
            tiptap_markdown_3_1.Markdown.configure({
                html: true, // 允许HTML输出
                transformPastedText: true, // 自动转换粘贴的Markdown
                transformCopiedText: false, // 复制时保持HTML格式
            }),
            // 任务列表支持 (复选框)
            extension_task_list_1.default,
            extension_task_item_1.default.configure({
                nested: true,
            }),
            // 链接支持
            extension_link_1.default.configure({
                openOnClick: false, // 在编辑模式下禁用自动打开，由我们手动处理
                HTMLAttributes: {
                    class: 'text-blue-600 underline hover:text-blue-800 cursor-pointer',
                    target: '_blank', // 新窗口打开
                    rel: 'noopener noreferrer', // 安全性
                },
                protocols: ['http', 'https', 'ftp', 'mailto'], // 支持的协议
                validate: href => /^https?:\/\//.test(href), // 验证链接格式
            }),
            // 引用块
            extension_blockquote_1.default.configure({
                HTMLAttributes: {
                    class: 'border-l-4 border-gray-300 pl-4 italic',
                },
            }),
            // 行内代码
            extension_code_1.default.configure({
                HTMLAttributes: {
                    class: 'inline-code',
                },
            }),
            // 代码块
            extension_code_block_1.default.configure({
                HTMLAttributes: {
                    class: 'code-block',
                },
            }),
            // 删除线
            extension_strike_1.default.configure({
                HTMLAttributes: {
                    class: 'line-through',
                },
            }),
            // 图片
            extension_image_1.default.configure({
                inline: true,
                allowBase64: true,
                HTMLAttributes: {
                    class: 'rounded-md max-w-full h-auto',
                },
            }),
            // 占位符
            extension_placeholder_1.default.configure({
                placeholder,
            }),
        ],
        content,
        onUpdate: ({ editor }) => {
            onUpdate(editor.getHTML());
        },
        editorProps: {
            attributes: {
                class: 'tiptap-editor text-sm leading-relaxed focus:outline-none min-h-[100px] w-full',
            },
            handleKeyDown: (view, event) => {
                // 只有在行首或空白处按 "/" 才触发 emoji 选择器
                if (event.key === '/' && !showEmojiPicker) {
                    const { selection } = view.state;
                    const { from } = selection;
                    const $pos = view.state.doc.resolve(from);
                    // 检查光标前的文本，如果前面有非空白字符，则不触发emoji选择器
                    const textBefore = $pos.parent.textBetween(0, $pos.parentOffset);
                    const isAtStartOrAfterSpace = !textBefore.trim() || textBefore.endsWith(' ');
                    if (isAtStartOrAfterSpace) {
                        const coords = view.coordsAtPos(from);
                        setEmojiPosition({
                            x: coords.left,
                            y: coords.bottom + 5
                        });
                        setShowEmojiPicker(true);
                        setEmojiQuery('');
                        // 阻止默认的 "/" 输入
                        event.preventDefault();
                        return true;
                    }
                }
                // 如果emoji选择器打开，处理查询输入
                if (showEmojiPicker) {
                    if (event.key === 'Escape') {
                        setShowEmojiPicker(false);
                        setEmojiQuery('');
                        return true;
                    }
                    if (event.key === 'Backspace') {
                        if (emojiQuery.length > 0) {
                            setEmojiQuery(prev => prev.slice(0, -1));
                        }
                        else {
                            setShowEmojiPicker(false);
                        }
                        return true;
                    }
                    // 添加字符到查询
                    if (event.key.length === 1 && !event.ctrlKey && !event.metaKey && event.key !== ' ') {
                        setEmojiQuery(prev => prev + event.key);
                        return true;
                    }
                    // 空格键选择第一个emoji或关闭选择器
                    if (event.key === ' ') {
                        setShowEmojiPicker(false);
                        setEmojiQuery('');
                        return true;
                    }
                }
                return false;
            },
        },
    });
    // Handle image upload
    const handleImageUpload = (0, react_1.useCallback)(() => {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = 'image/*';
        input.onchange = (e) => {
            const file = e.target.files?.[0];
            if (file && editor) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const base64 = e.target?.result;
                    editor.chain().focus().setImage({ src: base64 }).run();
                };
                reader.readAsDataURL(file);
            }
        };
        input.click();
    }, [editor]);
    // Handle paste images
    (0, react_1.useEffect)(() => {
        if (!editor)
            return;
        const handlePaste = (event) => {
            const items = event.clipboardData?.items;
            if (!items)
                return;
            for (let i = 0; i < items.length; i++) {
                const item = items[i];
                if (item.type.indexOf('image') !== -1) {
                    event.preventDefault();
                    const file = item.getAsFile();
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            const base64 = e.target?.result;
                            editor.chain().focus().setImage({ src: base64 }).run();
                        };
                        reader.readAsDataURL(file);
                    }
                }
            }
        };
        const editorElement = editor.view.dom;
        editorElement.addEventListener('paste', handlePaste);
        return () => {
            editorElement.removeEventListener('paste', handlePaste);
        };
    }, [editor]);
    // Handle emoji selection
    const handleEmojiSelect = (0, react_1.useCallback)((emoji) => {
        if (editor) {
            editor.chain().focus().insertContent(emoji).run();
        }
        setShowEmojiPicker(false);
        setEmojiQuery('');
    }, [editor]);
    // Handle emoji picker close
    const handleEmojiPickerClose = (0, react_1.useCallback)(() => {
        setShowEmojiPicker(false);
        setEmojiQuery('');
    }, []);
    // Handle keyboard shortcuts
    (0, react_1.useEffect)(() => {
        if (!editor)
            return;
        const handleKeyDown = (event) => {
            if (event.key === 'Escape') {
                if (showEmojiPicker) {
                    setShowEmojiPicker(false);
                    setEmojiQuery('');
                }
                else {
                    onCancel();
                }
            }
            else if (event.key === 'Enter' && (event.ctrlKey || event.metaKey)) {
                onSave();
            }
        };
        const editorElement = editor.view.dom;
        editorElement.addEventListener('keydown', handleKeyDown);
        return () => {
            editorElement.removeEventListener('keydown', handleKeyDown);
        };
    }, [editor, onSave, onCancel, showEmojiPicker]);
    // Auto focus
    (0, react_1.useEffect)(() => {
        if (editor && autoFocus) {
            editor.commands.focus();
        }
    }, [editor, autoFocus]);
    if (!editor) {
        return null;
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: (0, utils_1.cn)("relative z-20", className), ref: editorRef, children: [(0, jsx_runtime_1.jsxs)("div", { className: "relative p-2 -m-2", children: [(0, jsx_runtime_1.jsx)(react_2.EditorContent, { editor: editor, className: "min-h-[100px]" }), (0, jsx_runtime_1.jsxs)("div", { className: "absolute top-0 right-0 flex gap-1 opacity-60 hover:opacity-100 transition-opacity", children: [(0, jsx_runtime_1.jsx)(button_1.Button, { size: "sm", variant: "ghost", className: "h-6 w-6 p-0 bg-white/90 hover:bg-white shadow-sm rounded", onClick: () => setShowEmojiPicker(!showEmojiPicker), title: "Insert Emoji (Press / to open)", children: (0, jsx_runtime_1.jsx)(lucide_react_1.Smile, { className: "h-3 w-3" }) }), (0, jsx_runtime_1.jsx)(button_1.Button, { size: "sm", variant: "ghost", className: "h-6 w-6 p-0 bg-white/90 hover:bg-white shadow-sm rounded", onClick: handleImageUpload, title: "Insert Image", children: (0, jsx_runtime_1.jsx)(lucide_react_1.ImageIcon, { className: "h-3 w-3" }) })] })] }), showEmojiPicker && ((0, jsx_runtime_1.jsx)(emoji_picker_1.EmojiPicker, { onEmojiSelect: handleEmojiSelect, onClose: handleEmojiPickerClose, query: emojiQuery, position: emojiPosition || undefined })), (0, jsx_runtime_1.jsxs)("div", { className: "flex justify-end gap-2 mt-2 pt-2 border-t border-border/30", children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { size: "sm", variant: "ghost", onClick: onCancel, className: "h-7 px-3 text-xs", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.X, { className: "h-3 w-3 mr-1" }), "Cancel"] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { size: "sm", onClick: onSave, className: "h-7 px-3 text-xs", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Check, { className: "h-3 w-3 mr-1" }), "Accept"] })] }), editor && ((0, jsx_runtime_1.jsxs)("div", { className: "absolute top-0 right-0 text-xs text-muted-foreground bg-white/90 px-2 py-1 rounded shadow-sm opacity-0 hover:opacity-100 transition-opacity pointer-events-none z-10 max-w-xs", children: ["**bold** *italic* # heading - list ", '>', " quote `code` ~~strike~~ [link](url) [] task / emoji"] }))] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
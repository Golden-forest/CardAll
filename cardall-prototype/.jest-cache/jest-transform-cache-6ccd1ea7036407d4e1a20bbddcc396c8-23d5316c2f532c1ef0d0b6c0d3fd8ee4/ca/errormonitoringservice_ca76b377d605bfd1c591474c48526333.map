{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\error-handling\\error-monitoring-service.ts","mappings":";AAAA,SAAS;AACT,qBAAqB;;;AAErB,mCAWgB;AAiBhB,SAAS;AACT,MAAa,sBAAsB;IAcjC;QAZQ;;;;;WAA0B;QAC1B;;;;mBAAqC,IAAI,GAAG,EAAE;WAAA;QAC9C;;;;mBAAuC,IAAI,GAAG,EAAE;WAAA;QAChD;;;;mBAA8B,EAAE;WAAA;QAChC;;;;mBAGH,EAAE;WAAA;QAEU;;;;mBAAgB,IAAI;WAAA;QACpB;;;;mBAAiB,GAAG;WAAA,CAAC,YAAY;QAGhD,IAAI,CAAC,iBAAiB,EAAE,CAAA;QACxB,IAAI,CAAC,2BAA2B,EAAE,CAAA;QAClC,IAAI,CAAC,eAAe,EAAE,CAAA;IACxB,CAAC;IAEM,MAAM,CAAC,WAAW;QACvB,IAAI,CAAC,sBAAsB,CAAC,QAAQ,EAAE,CAAC;YACrC,sBAAsB,CAAC,QAAQ,GAAG,IAAI,sBAAsB,EAAE,CAAA;QAChE,CAAC;QACD,OAAO,sBAAsB,CAAC,QAAQ,CAAA;IACxC,CAAC;IAED;;OAEG;IACI,WAAW,CAAC,KAAmB,EAAE,MAA2B;QACjE,WAAW;QACX,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAE5B,YAAY;QACZ,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;YACjD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA;QAChE,CAAC;QAED,OAAO;QACP,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,MAAM,CAAC,CAAA;QAEjC,OAAO;QACP,IAAI,CAAC,WAAW,EAAE,CAAA;IACpB,CAAC;IAED;;OAEG;IACI,iBAAiB;QACtB,OAAO,EAAE,GAAG,IAAI,CAAC,OAAO,EAAE,CAAA;IAC5B,CAAC;IAED;;OAEG;IACI,iBAAiB,CAAC,QAAgB,EAAE;QAIzC,MAAM,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAA;QAC5D,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,MAAM,CAAC,CAAA;IAC/D,CAAC;IAED;;OAEG;IACI,YAAY,CAAC,IAAe;QACjC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;QAClC,OAAO,CAAC,GAAG,CAAC,qBAAqB,IAAI,CAAC,IAAI,EAAE,CAAC,CAAA;IAC/C,CAAC;IAED;;OAEG;IACI,eAAe,CAAC,MAAc;QACnC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;QAC9B,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;QAC/B,OAAO,CAAC,GAAG,CAAC,uBAAuB,MAAM,EAAE,CAAC,CAAA;IAC9C,CAAC;IAED;;OAEG;IACI,cAAc;QACnB,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAA;IAC9C,CAAC;IAED;;OAEG;IACI,kBAAkB,CAAC,QAAgB,EAAE;QAe1C,MAAM,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAA;QAC5D,MAAM,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,MAAM,CAAC,CAAA;QAExE,MAAM,WAAW,GAAG,YAAY,CAAC,MAAM,CAAA;QACvC,MAAM,iBAAiB,GAAkC,EAAS,CAAA;QAElE,UAAU;QACV,MAAM,CAAC,MAAM,CAAC,qBAAa,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YAC9C,iBAAiB,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAA;QACjC,CAAC,CAAC,CAAA;QAEF,SAAS;QACT,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YAC3B,iBAAiB,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAA;QACrC,CAAC,CAAC,CAAA;QAEF,UAAU;QACV,MAAM,WAAW,GAAG,IAAI,GAAG,EAAkB,CAAA;QAC7C,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YAC3B,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;QACrE,CAAC,CAAC,CAAA;QAEF,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;aAChD,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;YACvB,IAAI;YACJ,KAAK;YACL,UAAU,EAAE,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,WAAW,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;SAC9D,CAAC,CAAC;aACF,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;aACjC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;QAEf,OAAO;QACP,MAAM,iBAAiB,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAA;QAC/D,MAAM,cAAc,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAC7C,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,QAAQ,KAAK,QAAQ,CACtC,CAAC,MAAM,CAAA;QAER,OAAO;YACL,WAAW;YACX,iBAAiB;YACjB,SAAS;YACT,aAAa,EAAE;gBACb,gBAAgB,EAAE,iBAAiB,CAAC,MAAM;gBAC1C,cAAc;gBACd,YAAY,EAAE,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;oBAC1C,cAAc,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC/C,mBAAmB,EAAE,IAAI,CAAC,OAAO,CAAC,mBAAmB;aACtD;SACF,CAAA;IACH,CAAC;IAED;;OAEG;IACI,oBAAoB;QAOzB,MAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAA;QAExC,iBAAiB;QACjB,IAAI,KAAK,GAAG,GAAG,CAAA;QAEf,QAAQ;QACR,IAAI,OAAO,CAAC,SAAS,GAAG,GAAG;YAAE,KAAK,IAAI,EAAE,CAAA;aACnC,IAAI,OAAO,CAAC,SAAS,GAAG,IAAI;YAAE,KAAK,IAAI,EAAE,CAAA;aACzC,IAAI,OAAO,CAAC,SAAS,GAAG,IAAI;YAAE,KAAK,IAAI,CAAC,CAAA;QAE7C,QAAQ;QACR,IAAI,OAAO,CAAC,YAAY,GAAG,GAAG;YAAE,KAAK,IAAI,EAAE,CAAA;aACtC,IAAI,OAAO,CAAC,YAAY,GAAG,GAAG;YAAE,KAAK,IAAI,EAAE,CAAA;QAEhD,UAAU;QACV,IAAI,OAAO,CAAC,gBAAgB,GAAG,GAAG;YAAE,KAAK,IAAI,EAAE,CAAA;aAC1C,IAAI,OAAO,CAAC,gBAAgB,GAAG,IAAI;YAAE,KAAK,IAAI,CAAC,CAAA;QAEpD,UAAU;QACV,IAAI,OAAO,CAAC,aAAa,GAAG,GAAG;YAAE,KAAK,IAAI,EAAE,CAAA;aACvC,IAAI,OAAO,CAAC,aAAa,GAAG,EAAE;YAAE,KAAK,IAAI,EAAE,CAAA;aAC3C,IAAI,OAAO,CAAC,aAAa,GAAG,EAAE;YAAE,KAAK,IAAI,CAAC,CAAA;QAE/C,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAA;QAEzC,SAAS;QACT,IAAI,aAAqD,CAAA;QACzD,IAAI,KAAK,IAAI,EAAE;YAAE,aAAa,GAAG,WAAW,CAAA;aACvC,IAAI,KAAK,IAAI,EAAE;YAAE,aAAa,GAAG,MAAM,CAAA;aACvC,IAAI,KAAK,IAAI,EAAE;YAAE,aAAa,GAAG,MAAM,CAAA;;YACvC,aAAa,GAAG,MAAM,CAAA;QAE3B,SAAS;QACT,MAAM,MAAM,GAAa,EAAE,CAAA;QAC3B,IAAI,OAAO,CAAC,SAAS,GAAG,IAAI,EAAE,CAAC;YAC7B,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,SAAS,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;QAC1E,CAAC;QACD,IAAI,OAAO,CAAC,YAAY,GAAG,GAAG,EAAE,CAAC;YAC/B,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,YAAY,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;QAC/E,CAAC;QACD,IAAI,OAAO,CAAC,gBAAgB,GAAG,GAAG,EAAE,CAAC;YACnC,MAAM,CAAC,IAAI,CAAC,2BAA2B,CAAC,OAAO,CAAC,gBAAgB,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QACzF,CAAC;QAED,OAAO;QACP,MAAM,eAAe,GAAa,EAAE,CAAA;QACpC,IAAI,OAAO,CAAC,SAAS,GAAG,IAAI,EAAE,CAAC;YAC7B,eAAe,CAAC,IAAI,CAAC,yDAAyD,CAAC,CAAA;QACjF,CAAC;QACD,IAAI,OAAO,CAAC,YAAY,GAAG,GAAG,EAAE,CAAC;YAC/B,eAAe,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAA;QAC3D,CAAC;QACD,IAAI,OAAO,CAAC,gBAAgB,GAAG,GAAG,EAAE,CAAC;YACnC,eAAe,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAA;QAClE,CAAC;QAED,OAAO;YACL,aAAa;YACb,KAAK;YACL,MAAM;YACN,eAAe;YACf,OAAO;SACR,CAAA;IACH,CAAC;IAED;;OAEG;IACK,iBAAiB;QACvB,IAAI,CAAC,OAAO,GAAG;YACb,WAAW,EAAE,CAAC;YACd,SAAS,EAAE,CAAC;YACZ,YAAY,EAAE,CAAC;YACf,eAAe,EAAE,EAAS;YAC1B,YAAY,EAAE,EAAS;YACvB,WAAW,EAAE,EAAS;YACtB,UAAU,EAAE,EAAE;YACd,YAAY,EAAE,CAAC;YACf,mBAAmB,EAAE,CAAC;YACtB,gBAAgB,EAAE,CAAC;YACnB,aAAa,EAAE,CAAC;YAChB,kBAAkB,EAAE,CAAC;SACtB,CAAA;QAED,UAAU;QACV,MAAM,CAAC,MAAM,CAAC,qBAAa,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YAC9C,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAA;QAC5C,CAAC,CAAC,CAAA;QAEF,MAAM,CAAC,MAAM,CAAC,kBAAU,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACxC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QACtC,CAAC,CAAC,CAAA;IACJ,CAAC;IAED;;OAEG;IACK,2BAA2B;QACjC,SAAS;QACT,IAAI,CAAC,YAAY,CAAC;YAChB,EAAE,EAAE,iBAAiB;YACrB,IAAI,EAAE,iBAAiB;YACvB,WAAW,EAAE,8BAA8B;YAC3C,SAAS,EAAE;gBACT,MAAM,EAAE,WAAW;gBACnB,QAAQ,EAAE,IAAI;gBACd,KAAK,EAAE,IAAI,EAAE,KAAK;gBAClB,WAAW,EAAE,MAAM;gBACnB,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM;aAC7B;YACD,SAAS,EAAE,IAAI;YACf,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE,MAAM;YAC/B,QAAQ,EAAE,MAAM;YAChB,OAAO,EAAE,IAAI;YACb,QAAQ,EAAE;gBACR,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,EAAE,EAAE;gBAC/B,EAAE,IAAI,EAAE,cAAc,EAAE,MAAM,EAAE,EAAE,EAAE;aACrC;YACD,OAAO,EAAE;gBACP,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,OAAO,EAAE,0BAA0B,EAAE,EAAE;aACpE;YACD,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,SAAS;SACnC,CAAC,CAAA;QAEF,SAAS;QACT,IAAI,CAAC,YAAY,CAAC;YAChB,EAAE,EAAE,cAAc;YAClB,IAAI,EAAE,cAAc;YACpB,WAAW,EAAE,gCAAgC;YAC7C,SAAS,EAAE;gBACT,MAAM,EAAE,oBAAoB;gBAC5B,QAAQ,EAAE,IAAI;gBACd,KAAK,EAAE,CAAC;gBACR,WAAW,EAAE,OAAO;gBACpB,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM;aAC7B;YACD,SAAS,EAAE,CAAC;YACZ,QAAQ,EAAE,CAAC;YACX,QAAQ,EAAE,UAAU;YACpB,OAAO,EAAE,IAAI;YACb,QAAQ,EAAE;gBACR,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,EAAE,EAAE;gBAC/B,EAAE,IAAI,EAAE,cAAc,EAAE,MAAM,EAAE,EAAE,EAAE;aACrC;YACD,OAAO,EAAE;gBACP,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,OAAO,EAAE,gCAAgC,EAAE,EAAE;aAC1E;YACD,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,QAAQ;SACjC,CAAC,CAAA;QAEF,SAAS;QACT,IAAI,CAAC,YAAY,CAAC;YAChB,EAAE,EAAE,eAAe;YACnB,IAAI,EAAE,eAAe;YACrB,WAAW,EAAE,iCAAiC;YAC9C,SAAS,EAAE;gBACT,MAAM,EAAE,qBAAqB;gBAC7B,QAAQ,EAAE,IAAI;gBACd,KAAK,EAAE,EAAE;gBACT,WAAW,EAAE,OAAO;gBACpB,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM;aAC7B;YACD,SAAS,EAAE,EAAE;YACb,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE,MAAM;YAC/B,QAAQ,EAAE,QAAQ;YAClB,OAAO,EAAE,IAAI;YACb,QAAQ,EAAE;gBACR,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,EAAE,EAAE;aAChC;YACD,OAAO,EAAE;gBACP,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,OAAO,EAAE,mCAAmC,EAAE,EAAE;aAC7E;YACD,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,QAAQ;SACjC,CAAC,CAAA;IACJ,CAAC;IAED;;OAEG;IACK,eAAe;QACrB,UAAU;QACV,WAAW,CAAC,GAAG,EAAE;YACf,IAAI,CAAC,uBAAuB,EAAE,CAAA;QAChC,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAA;QAEb,aAAa;QACb,WAAW,CAAC,GAAG,EAAE;YACf,IAAI,CAAC,kBAAkB,EAAE,CAAA;QAC3B,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAA;QAEjB,YAAY;QACZ,WAAW,CAAC,GAAG,EAAE;YACf,IAAI,CAAC,cAAc,EAAE,CAAA;QACvB,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAA;QAElB,OAAO,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAA;IACjD,CAAC;IAED;;OAEG;IACK,aAAa,CAAC,KAAmB,EAAE,MAA2B;QACpE,SAAS;QACT,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAA;QAE1B,SAAS;QACT,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAA;QAC9C,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAA;QACxC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC;YAClC,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;QAEjD,UAAU;QACV,MAAM,WAAW,GAAG,IAAI,GAAG,CACzB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAClC,CAAA;QACD,IAAI,CAAC,OAAO,CAAC,YAAY,GAAG,WAAW,CAAC,IAAI,CAAA;QAE5C,UAAU;QACV,IAAI,KAAK,CAAC,MAAM,EAAE,CAAC;YACjB,MAAM,aAAa,GAAG,IAAI,GAAG,CAC3B,IAAI,CAAC,WAAW;iBACb,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;iBACrB,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CACtB,CAAA;YACD,IAAI,CAAC,OAAO,CAAC,aAAa,GAAG,aAAa,CAAC,IAAI,CAAA;QACjD,CAAC;QAED,WAAW;QACX,IAAI,KAAK,CAAC,SAAS,EAAE,CAAC;YACpB,MAAM,kBAAkB,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,MAAM,CAAA;YAC3E,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,kBAAkB,CAAA;QACtD,CAAC;QAED,SAAS;QACT,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;YACnB,MAAM,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,MAAM,CAAA;YAC1E,MAAM,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAClD,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,QAAQ,KAAK,QAAQ,CACtC,CAAC,MAAM,CAAA;YAER,IAAI,CAAC,OAAO,CAAC,YAAY,GAAG,iBAAiB,GAAG,CAAC,CAAC,CAAC;gBACjD,eAAe,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAA;QAC3C,CAAC;QAED,SAAS;QACT,IAAI,CAAC,gBAAgB,EAAE,CAAA;IACzB,CAAC;IAED;;OAEG;IACK,uBAAuB;QAC7B,iBAAiB;QACjB,MAAM,YAAY,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAA;QAClC,MAAM,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,YAAY,CAAC,CAAA;QAClD,MAAM,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,MAAM,CAAC,CAAA;QAExE,kBAAkB;QAClB,MAAM,kBAAkB,GAAG,GAAG,CAAA;QAC9B,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,YAAY,CAAC,MAAM,GAAG,kBAAkB,CAAA;QAEjE,SAAS;QACT,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;YACvB,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,OAAO,EAAE,EAAE,GAAG,IAAI,CAAC,OAAO,EAAE;SAC7B,CAAC,CAAA;QAEF,aAAa;QACb,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;YACrD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAA;QACvE,CAAC;IACH,CAAC;IAED;;OAEG;IACK,gBAAgB;QACtB,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAA;QACtB,MAAM,YAAY,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAA;QAC5D,MAAM,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,YAAY,CAAC,CAAA;QAE9E,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC;YAC3B,SAAS,EAAE,GAAG;YACd,KAAK,EAAE,YAAY,CAAC,MAAM;YAC1B,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS;SAC7B,CAAC,CAAA;QAEF,aAAa;QACb,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC;YACzC,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAA;QAC/D,CAAC;IACH,CAAC;IAED;;OAEG;IACK,WAAW;QACjB,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;QAEtB,KAAK,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YAC7C,IAAI,CAAC,IAAI,CAAC,OAAO;gBAAE,SAAQ;YAE3B,SAAS;YACT,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;YAC/C,IAAI,UAAU,IAAI,UAAU,CAAC,aAAa,IAAI,GAAG,GAAG,UAAU,CAAC,aAAa,CAAC,OAAO,EAAE,EAAE,CAAC;gBACvF,SAAQ;YACV,CAAC;YAED,SAAS;YACT,MAAM,SAAS,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAA;YAEnD,IAAI,SAAS,EAAE,CAAC;gBACd,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;YACzB,CAAC;iBAAM,IAAI,UAAU,IAAI,UAAU,CAAC,SAAS,EAAE,CAAC;gBAC9C,OAAO;gBACP,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAA;YAC3B,CAAC;QACH,CAAC;IACH,CAAC;IAED;;OAEG;IACK,sBAAsB,CAAC,IAAe;QAC5C,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,WAAW,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,SAAS,CAAA;QACvE,MAAM,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,MAAM,CAAC,CAAA;QAC5C,MAAM,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,MAAM,CAAC,CAAA;QAE1E,IAAI,YAAoB,CAAA;QAExB,QAAQ,WAAW,EAAE,CAAC;YACpB,KAAK,OAAO;gBACV,YAAY,GAAG,cAAc,CAAC,MAAM,CAAA;gBACpC,MAAK;YACP,KAAK,KAAK;gBACR,iBAAiB;gBACjB,YAAY,GAAG,cAAc,CAAC,MAAM,CAAA;gBACpC,MAAK;YACP,KAAK,KAAK;gBACR,kBAAkB;gBAClB,YAAY,GAAG,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;oBACxC,cAAc,CAAC,MAAM,GAAG,CAAC,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;gBAClD,MAAK;YACP,KAAK,MAAM;gBACT,QAAQ;gBACR,MAAM,kBAAkB,GAAG,MAAM,GAAG,IAAI,GAAG,EAAE,GAAG,GAAG,CAAA,CAAC,cAAc;gBAClE,YAAY,GAAG,cAAc,CAAC,MAAM,GAAG,kBAAkB,CAAA;gBACzD,MAAK;YACP;gBACE,YAAY,GAAG,cAAc,CAAC,MAAM,CAAA;QACxC,CAAC;QAED,YAAY;QACZ,IAAI,MAAM,KAAK,WAAW,EAAE,CAAC;YAC3B,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAA;QACvC,CAAC;aAAM,IAAI,MAAM,KAAK,oBAAoB,EAAE,CAAC;YAC3C,YAAY,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,qBAAa,CAAC,MAAM,CAAC,CAAC,MAAM,CAAA;QACvF,CAAC;aAAM,IAAI,MAAM,KAAK,qBAAqB,EAAE,CAAC;YAC5C,YAAY,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,qBAAa,CAAC,OAAO,CAAC,CAAC,MAAM,CAAA;QACxF,CAAC;QAED,OAAO;QACP,QAAQ,QAAQ,EAAE,CAAC;YACjB,KAAK,IAAI,CAAC,CAAC,OAAO,YAAY,GAAG,KAAK,CAAA;YACtC,KAAK,IAAI,CAAC,CAAC,OAAO,YAAY,GAAG,KAAK,CAAA;YACtC,KAAK,IAAI,CAAC,CAAC,OAAO,YAAY,KAAK,KAAK,CAAA;YACxC,KAAK,KAAK,CAAC,CAAC,OAAO,YAAY,IAAI,KAAK,CAAA;YACxC,KAAK,KAAK,CAAC,CAAC,OAAO,YAAY,IAAI,KAAK,CAAA;YACxC,OAAO,CAAC,CAAC,OAAO,KAAK,CAAA;QACvB,CAAC;IACH,CAAC;IAED;;OAEG;IACK,YAAY,CAAC,IAAe;QAClC,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAA;QACtB,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;QAE9C,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,UAAU,GAAG;gBACX,EAAE,EAAE,MAAM,CAAC,UAAU,EAAE;gBACvB,MAAM,EAAE,IAAI,CAAC,EAAE;gBACf,SAAS,EAAE,KAAK;gBAChB,WAAW,EAAE,GAAG;gBAChB,YAAY,EAAE,CAAC;gBACf,SAAS,EAAE,IAAI,CAAC,SAAS;aAC1B,CAAA;YACD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,UAAU,CAAC,CAAA;QAC3C,CAAC;QAED,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC;YAC1B,UAAU,CAAC,SAAS,GAAG,IAAI,CAAA;YAC3B,UAAU,CAAC,WAAW,GAAG,GAAG,CAAA;YAC5B,UAAU,CAAC,aAAa,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAA;YAElE,QAAQ;YACR,UAAU,CAAC,YAAY,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAA;YAEzD,OAAO;YACP,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAA;YAE5C,SAAS;YACT,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAA;YAE9B,OAAO,CAAC,IAAI,CAAC,oBAAoB,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAA;QAClE,CAAC;IACH,CAAC;IAED;;OAEG;IACK,YAAY,CAAC,MAAc;QACjC,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;QAC/C,IAAI,UAAU,EAAE,CAAC;YACf,UAAU,CAAC,SAAS,GAAG,KAAK,CAAA;YAC5B,OAAO,CAAC,GAAG,CAAC,mBAAmB,MAAM,EAAE,CAAC,CAAA;QAC1C,CAAC;IACH,CAAC;IAED;;OAEG;IACK,oBAAoB,CAAC,IAAe;QAC1C,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,SAAS,CAAA;QACtD,MAAM,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,MAAM,CAAC,CAAA;QAC5C,MAAM,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,MAAM,CAAC,CAAA;QAE1E,QAAQ,WAAW,EAAE,CAAC;YACpB,KAAK,OAAO;gBACV,OAAO,cAAc,CAAC,MAAM,CAAA;YAC9B,KAAK,MAAM;gBACT,MAAM,kBAAkB,GAAG,MAAM,GAAG,IAAI,GAAG,EAAE,GAAG,GAAG,CAAA;gBACnD,OAAO,cAAc,CAAC,MAAM,GAAG,kBAAkB,CAAA;YACnD;gBACE,OAAO,cAAc,CAAC,MAAM,CAAA;QAChC,CAAC;IACH,CAAC;IAED;;OAEG;IACK,qBAAqB,CAAC,IAAe,EAAE,UAAsB;QACnE,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YACpC,IAAI,CAAC;gBACH,QAAQ,OAAO,CAAC,IAAI,EAAE,CAAC;oBACrB,KAAK,SAAS;wBACZ,OAAO,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,WAAW,EAAE,CAAC,CAAA;wBACnF,MAAK;oBACP,KAAK,cAAc;wBACjB,cAAc;wBACd,IAAI,cAAc,IAAI,MAAM,EAAE,CAAC;4BAC7B,IAAI,YAAY,CAAC,yBAAyB,IAAI,CAAC,IAAI,EAAE,EAAE;gCACrD,IAAI,EAAE,IAAI,CAAC,WAAW;gCACtB,IAAI,EAAE,cAAc;6BACrB,CAAC,CAAA;wBACJ,CAAC;wBACD,MAAK;oBACP,KAAK,OAAO;wBACV,aAAa;wBACb,OAAO,CAAC,GAAG,CAAC,+CAA+C,IAAI,CAAC,IAAI,EAAE,CAAC,CAAA;wBACvE,MAAK;oBACP,KAAK,SAAS;wBACZ,gBAAgB;wBAChB,OAAO,CAAC,GAAG,CAAC,sCAAsC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAA;wBAC9D,MAAK;gBACT,CAAC;YACH,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,mCAAmC,OAAO,CAAC,IAAI,GAAG,EAAE,KAAK,CAAC,CAAA;YAC1E,CAAC;QACH,CAAC;IACH,CAAC;IAED;;OAEG;IACK,mBAAmB,CAAC,IAAe;QACzC,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YAClC,IAAI,CAAC;gBACH,QAAQ,MAAM,CAAC,IAAI,EAAE,CAAC;oBACpB,KAAK,SAAS;wBACZ,OAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAA;wBAC9C,MAAK;oBACP,KAAK,UAAU;wBACb,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAA;wBACxC,MAAK;oBACP,KAAK,UAAU;wBACb,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAA;wBAC1C,MAAK;oBACP,KAAK,QAAQ;wBACX,gCAAgC;wBAChC,MAAK;gBACT,CAAC;YACH,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,kCAAkC,MAAM,CAAC,IAAI,GAAG,EAAE,KAAK,CAAC,CAAA;YACxE,CAAC;QACH,CAAC;IACH,CAAC;IAED;;OAEG;IACK,kBAAkB;QACxB,MAAM,YAAY,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAA;QAEhD,eAAe;QACf,IAAI,YAAY,CAAC,aAAa,KAAK,MAAM,EAAE,CAAC;YAC1C,OAAO,CAAC,IAAI,CAAC,6BAA6B,EAAE,YAAY,CAAC,MAAM,CAAC,CAAA;YAEhE,oBAAoB;QACtB,CAAC;QAED,WAAW;QACX,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC,UAAU;YACrD,OAAO,CAAC,GAAG,CAAC,yBAAyB,YAAY,CAAC,KAAK,aAAa,YAAY,CAAC,aAAa,EAAE,CAAC,CAAA;QACnG,CAAC;IACH,CAAC;IAED;;OAEG;IACK,cAAc;QACpB,MAAM,UAAU,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAA;QAEjE,UAAU;QACV,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,UAAU,CAAC,CAAA;QAE1E,SAAS;QACT,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,UAAU,CAAC,CAAA;QAEhF,aAAa;QACb,MAAM,gBAAgB,GAAa,EAAE,CAAA;QACrC,KAAK,MAAM,CAAC,MAAM,EAAE,UAAU,CAAC,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACpD,IAAI,CAAC,UAAU,CAAC,SAAS;gBACrB,UAAU,CAAC,WAAW,GAAG,UAAU,EAAE,CAAC;gBACxC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;YAC/B,CAAC;QACH,CAAC;QAED,gBAAgB,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YAChC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;QACjC,CAAC,CAAC,CAAA;QAEF,OAAO,CAAC,GAAG,CAAC,cAAc,gBAAgB,CAAC,MAAM,qBAAqB,CAAC,CAAA;IACzE,CAAC;CACF;AAxsBD,wDAwsBC;AAED,OAAO;AACM,QAAA,sBAAsB,GAAG,sBAAsB,CAAC,WAAW,EAAE,CAAA;AAE1E,WAAW;AACJ,MAAM,YAAY,GAAG,CAAC,KAAmB,EAAE,MAA2B,EAAQ,EAAE;IACrF,8BAAsB,CAAC,WAAW,CAAC,KAAK,EAAE,MAAM,CAAC,CAAA;AACnD,CAAC,CAAA;AAFY,QAAA,YAAY,gBAExB;AAEM,MAAM,eAAe,GAAG,GAAG,EAAE;IAClC,OAAO,8BAAsB,CAAC,oBAAoB,EAAE,CAAA;AACtD,CAAC,CAAA;AAFY,QAAA,eAAe,mBAE3B;AAEM,MAAM,aAAa,GAAG,CAAC,KAAc,EAAE,EAAE;IAC9C,OAAO,8BAAsB,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAA;AACzD,CAAC,CAAA;AAFY,QAAA,aAAa,iBAEzB","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\error-handling\\error-monitoring-service.ts"],"sourcesContent":["// 错误监控服务\n// 提供实时错误监控、告警和统计分析功能\n\nimport {\n  UnifiedError,\n  ErrorLevel,\n  ErrorCategory,\n  ErrorHandlingResult,\n  MonitoringMetrics,\n  AlertRule,\n  AlertCondition,\n  AlertSeverity,\n  AlertChannel,\n  AlertAction\n} from './types'\nimport { networkStateDetector } from '../network-state-detector'\nimport { unifiedErrorHandler } from './unified-error-handler'\n\n\n// 告警状态\nexport interface AlertState {\n  id: string\n  ruleId: string\n  triggered: boolean\n  triggerTime: Date\n  lastNotified?: Date\n  cooldownUntil?: Date\n  currentValue: number\n  threshold: number\n}\n\n// 错误监控服务\nexport class ErrorMonitoringService {\n  private static instance: ErrorMonitoringService\n  private metrics: MonitoringMetrics\n  private alertRules: Map<string, AlertRule> = new Map()\n  private alertStates: Map<string, AlertState> = new Map()\n  private errorBuffer: UnifiedError[] = []\n  private metricsHistory: Array<{\n    timestamp: Date\n    metrics: MonitoringMetrics\n  }> = []\n\n  private readonly maxBufferSize = 1000\n  private readonly maxHistorySize = 168 // 保留7天的历史数据\n\n  private constructor() {\n    this.initializeMetrics()\n    this.initializeDefaultAlertRules()\n    this.startMonitoring()\n  }\n\n  public static getInstance(): ErrorMonitoringService {\n    if (!ErrorMonitoringService.instance) {\n      ErrorMonitoringService.instance = new ErrorMonitoringService()\n    }\n    return ErrorMonitoringService.instance\n  }\n\n  /**\n   * 记录错误\n   */\n  public recordError(error: UnifiedError, result: ErrorHandlingResult): void {\n    // 添加到错误缓冲区\n    this.errorBuffer.push(error)\n\n    // 保持缓冲区大小限制\n    if (this.errorBuffer.length > this.maxBufferSize) {\n      this.errorBuffer = this.errorBuffer.slice(-this.maxBufferSize)\n    }\n\n    // 更新指标\n    this.updateMetrics(error, result)\n\n    // 检查告警\n    this.checkAlerts()\n  }\n\n  /**\n   * 获取当前指标\n   */\n  public getCurrentMetrics(): MonitoringMetrics {\n    return { ...this.metrics }\n  }\n\n  /**\n   * 获取指标历史\n   */\n  public getMetricsHistory(hours: number = 24): Array<{\n    timestamp: Date\n    metrics: MonitoringMetrics\n  }> {\n    const cutoff = new Date(Date.now() - hours * 60 * 60 * 1000)\n    return this.metricsHistory.filter(h => h.timestamp >= cutoff)\n  }\n\n  /**\n   * 添加告警规则\n   */\n  public addAlertRule(rule: AlertRule): void {\n    this.alertRules.set(rule.id, rule)\n    console.log(`Alert rule added: ${rule.name}`)\n  }\n\n  /**\n   * 移除告警规则\n   */\n  public removeAlertRule(ruleId: string): void {\n    this.alertRules.delete(ruleId)\n    this.alertStates.delete(ruleId)\n    console.log(`Alert rule removed: ${ruleId}`)\n  }\n\n  /**\n   * 获取当前告警状态\n   */\n  public getAlertStates(): AlertState[] {\n    return Array.from(this.alertStates.values())\n  }\n\n  /**\n   * 获取错误统计\n   */\n  public getErrorStatistics(hours: number = 24): {\n    totalErrors: number\n    errorDistribution: Record<ErrorCategory, number>\n    topErrors: Array<{\n      code: string\n      count: number\n      percentage: number\n    }>\n    recoveryStats: {\n      totalRecoverable: number\n      recoveredCount: number\n      recoveryRate: number\n      averageRecoveryTime: number\n    }\n  } {\n    const cutoff = new Date(Date.now() - hours * 60 * 60 * 1000)\n    const recentErrors = this.errorBuffer.filter(e => e.timestamp >= cutoff)\n\n    const totalErrors = recentErrors.length\n    const errorDistribution: Record<ErrorCategory, number> = {} as any\n\n    // 初始化分布统计\n    Object.values(ErrorCategory).forEach(category => {\n      errorDistribution[category] = 0\n    })\n\n    // 统计错误分布\n    recentErrors.forEach(error => {\n      errorDistribution[error.category]++\n    })\n\n    // 统计top错误\n    const errorCounts = new Map<string, number>()\n    recentErrors.forEach(error => {\n      errorCounts.set(error.code, (errorCounts.get(error.code) || 0) + 1)\n    })\n\n    const topErrors = Array.from(errorCounts.entries())\n      .map(([code, count]) => ({\n        code,\n        count,\n        percentage: totalErrors > 0 ? (count / totalErrors) * 100 : 0\n      }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 10)\n\n    // 恢复统计\n    const recoverableErrors = recentErrors.filter(e => e.retryable)\n    const recoveredCount = recentErrors.filter(e =>\n      e.recovery && e.recovery !== 'manual'\n    ).length\n\n    return {\n      totalErrors,\n      errorDistribution,\n      topErrors,\n      recoveryStats: {\n        totalRecoverable: recoverableErrors.length,\n        recoveredCount,\n        recoveryRate: recoverableErrors.length > 0 ?\n          recoveredCount / recoverableErrors.length : 0,\n        averageRecoveryTime: this.metrics.averageRecoveryTime\n      }\n    }\n  }\n\n  /**\n   * 生成健康报告\n   */\n  public generateHealthReport(): {\n    overallHealth: 'excellent' | 'good' | 'fair' | 'poor'\n    score: number\n    issues: string[]\n    recommendations: string[]\n    metrics: MonitoringMetrics\n  } {\n    const metrics = this.getCurrentMetrics()\n\n    // 计算健康分数 (0-100)\n    let score = 100\n\n    // 错误率影响\n    if (metrics.errorRate > 0.1) score -= 20\n    else if (metrics.errorRate > 0.05) score -= 10\n    else if (metrics.errorRate > 0.02) score -= 5\n\n    // 恢复率影响\n    if (metrics.recoveryRate < 0.8) score -= 20\n    else if (metrics.recoveryRate < 0.9) score -= 10\n\n    // 重试成功率影响\n    if (metrics.retrySuccessRate < 0.7) score -= 15\n    else if (metrics.retrySuccessRate < 0.85) score -= 8\n\n    // 影响用户数影响\n    if (metrics.affectedUsers > 100) score -= 25\n    else if (metrics.affectedUsers > 50) score -= 15\n    else if (metrics.affectedUsers > 20) score -= 8\n\n    score = Math.max(0, Math.min(100, score))\n\n    // 确定健康等级\n    let overallHealth: 'excellent' | 'good' | 'fair' | 'poor'\n    if (score >= 90) overallHealth = 'excellent'\n    else if (score >= 75) overallHealth = 'good'\n    else if (score >= 60) overallHealth = 'fair'\n    else overallHealth = 'poor'\n\n    // 生成问题列表\n    const issues: string[] = []\n    if (metrics.errorRate > 0.05) {\n      issues.push(`High error rate: ${(metrics.errorRate * 100).toFixed(2)}%`)\n    }\n    if (metrics.recoveryRate < 0.8) {\n      issues.push(`Low recovery rate: ${(metrics.recoveryRate * 100).toFixed(2)}%`)\n    }\n    if (metrics.retrySuccessRate < 0.7) {\n      issues.push(`Low retry success rate: ${(metrics.retrySuccessRate * 100).toFixed(2)}%`);\n    }\n\n    // 生成建议\n    const recommendations: string[] = []\n    if (metrics.errorRate > 0.05) {\n      recommendations.push('Review error patterns and implement preventive measures')\n    }\n    if (metrics.recoveryRate < 0.8) {\n      recommendations.push('Improve error recovery strategies')\n    }\n    if (metrics.retrySuccessRate < 0.7) {\n      recommendations.push('Optimize retry mechanisms and thresholds')\n    }\n\n    return {\n      overallHealth,\n      score,\n      issues,\n      recommendations,\n      metrics\n    }\n  }\n\n  /**\n   * 初始化指标\n   */\n  private initializeMetrics(): void {\n    this.metrics = {\n      totalErrors: 0,\n      errorRate: 0,\n      uniqueErrors: 0,\n      errorByCategory: {} as any,\n      errorByLevel: {} as any,\n      errorByCode: {} as any,\n      errorTrend: [],\n      recoveryRate: 0,\n      averageRecoveryTime: 0,\n      retrySuccessRate: 0,\n      affectedUsers: 0,\n      affectedOperations: 0\n    }\n\n    // 初始化分类统计\n    Object.values(ErrorCategory).forEach(category => {\n      this.metrics.errorByCategory[category] = 0\n    })\n\n    Object.values(ErrorLevel).forEach(level => {\n      this.metrics.errorByLevel[level] = 0\n    })\n  }\n\n  /**\n   * 初始化默认告警规则\n   */\n  private initializeDefaultAlertRules(): void {\n    // 高错误率告警\n    this.addAlertRule({\n      id: 'high_error_rate',\n      name: 'High Error Rate',\n      description: 'Error rate exceeds threshold',\n      condition: {\n        metric: 'errorRate',\n        operator: 'gt',\n        value: 0.05, // 5%\n        aggregation: 'rate',\n        window: 5 * 60 * 1000 // 5分钟\n      },\n      threshold: 0.05,\n      duration: 2 * 60 * 1000, // 2分钟\n      severity: 'high',\n      enabled: true,\n      channels: [\n        { type: 'console', config: {} },\n        { type: 'notification', config: {} }\n      ],\n      actions: [\n        { type: 'notify', params: { message: 'High error rate detected' } }\n      ],\n      cooldown: 10 * 60 * 1000 // 10分钟冷却\n    })\n\n    // 系统错误告警\n    this.addAlertRule({\n      id: 'system_error',\n      name: 'System Error',\n      description: 'Critical system error occurred',\n      condition: {\n        metric: 'system_error_count',\n        operator: 'gt',\n        value: 0,\n        aggregation: 'count',\n        window: 1 * 60 * 1000 // 1分钟\n      },\n      threshold: 0,\n      duration: 0,\n      severity: 'critical',\n      enabled: true,\n      channels: [\n        { type: 'console', config: {} },\n        { type: 'notification', config: {} }\n      ],\n      actions: [\n        { type: 'notify', params: { message: 'Critical system error detected' } }\n      ],\n      cooldown: 5 * 60 * 1000 // 5分钟冷却\n    })\n\n    // 网络错误告警\n    this.addAlertRule({\n      id: 'network_error',\n      name: 'Network Error',\n      description: 'Network errors exceed threshold',\n      condition: {\n        metric: 'network_error_count',\n        operator: 'gt',\n        value: 10,\n        aggregation: 'count',\n        window: 5 * 60 * 1000 // 5分钟\n      },\n      threshold: 10,\n      duration: 1 * 60 * 1000, // 1分钟\n      severity: 'medium',\n      enabled: true,\n      channels: [\n        { type: 'console', config: {} }\n      ],\n      actions: [\n        { type: 'notify', params: { message: 'Network errors threshold exceeded' } }\n      ],\n      cooldown: 5 * 60 * 1000 // 5分钟冷却\n    })\n  }\n\n  /**\n   * 开始监控\n   */\n  private startMonitoring(): void {\n    // 每分钟更新指标\n    setInterval(() => {\n      this.updateAggregatedMetrics()\n    }, 60 * 1000)\n\n    // 每5分钟检查系统健康\n    setInterval(() => {\n      this.performHealthCheck()\n    }, 5 * 60 * 1000)\n\n    // 每小时清理过期数据\n    setInterval(() => {\n      this.cleanupOldData()\n    }, 60 * 60 * 1000)\n\n    console.log('Error monitoring service started')\n  }\n\n  /**\n   * 更新指标\n   */\n  private updateMetrics(error: UnifiedError, result: ErrorHandlingResult): void {\n    // 更新基础指标\n    this.metrics.totalErrors++\n\n    // 更新分类指标\n    this.metrics.errorByCategory[error.category]++\n    this.metrics.errorByLevel[error.level]++\n    this.metrics.errorByCode[error.code] =\n      (this.metrics.errorByCode[error.code] || 0) + 1\n\n    // 更新唯一错误数\n    const uniqueCodes = new Set(\n      this.errorBuffer.map(e => e.code)\n    )\n    this.metrics.uniqueErrors = uniqueCodes.size\n\n    // 更新影响用户数\n    if (error.userId) {\n      const affectedUsers = new Set(\n        this.errorBuffer\n          .filter(e => e.userId)\n          .map(e => e.userId)\n      )\n      this.metrics.affectedUsers = affectedUsers.size\n    }\n\n    // 更新受影响操作数\n    if (error.operation) {\n      const affectedOperations = this.errorBuffer.filter(e => e.operation).length\n      this.metrics.affectedOperations = affectedOperations\n    }\n\n    // 更新恢复指标\n    if (result.handled) {\n      const recoverableErrors = this.errorBuffer.filter(e => e.retryable).length\n      const recoveredErrors = this.errorBuffer.filter(e =>\n        e.recovery && e.recovery !== 'manual'\n      ).length\n\n      this.metrics.recoveryRate = recoverableErrors > 0 ?\n        recoveredErrors / recoverableErrors : 0\n    }\n\n    // 更新趋势数据\n    this.updateErrorTrend()\n  }\n\n  /**\n   * 更新聚合指标\n   */\n  private updateAggregatedMetrics(): void {\n    // 计算错误率（基于最近5分钟）\n    const recentWindow = 5 * 60 * 1000\n    const cutoff = new Date(Date.now() - recentWindow)\n    const recentErrors = this.errorBuffer.filter(e => e.timestamp >= cutoff)\n\n    // 假设每分钟100个操作作为基准\n    const baselineOperations = 500\n    this.metrics.errorRate = recentErrors.length / baselineOperations\n\n    // 保存历史指标\n    this.metricsHistory.push({\n      timestamp: new Date(),\n      metrics: { ...this.metrics }\n    })\n\n    // 保持历史数据大小限制\n    if (this.metricsHistory.length > this.maxHistorySize) {\n      this.metricsHistory = this.metricsHistory.slice(-this.maxHistorySize)\n    }\n  }\n\n  /**\n   * 更新错误趋势\n   */\n  private updateErrorTrend(): void {\n    const now = new Date()\n    const last5Minutes = new Date(now.getTime() - 5 * 60 * 1000)\n    const recentErrors = this.errorBuffer.filter(e => e.timestamp >= last5Minutes)\n\n    this.metrics.errorTrend.push({\n      timestamp: now,\n      count: recentErrors.length,\n      rate: this.metrics.errorRate\n    })\n\n    // 保持趋势数据大小限制\n    if (this.metrics.errorTrend.length > 100) {\n      this.metrics.errorTrend = this.metrics.errorTrend.slice(-100)\n    }\n  }\n\n  /**\n   * 检查告警\n   */\n  private checkAlerts(): void {\n    const now = Date.now()\n\n    for (const [ruleId, rule] of this.alertRules) {\n      if (!rule.enabled) continue\n\n      // 检查冷却时间\n      const alertState = this.alertStates.get(ruleId)\n      if (alertState && alertState.cooldownUntil && now < alertState.cooldownUntil.getTime()) {\n        continue\n      }\n\n      // 检查告警条件\n      const triggered = this.evaluateAlertCondition(rule)\n\n      if (triggered) {\n        this.triggerAlert(rule)\n      } else if (alertState && alertState.triggered) {\n        // 告警解除\n        this.resolveAlert(ruleId)\n      }\n    }\n  }\n\n  /**\n   * 评估告警条件\n   */\n  private evaluateAlertCondition(rule: AlertRule): boolean {\n    const { metric, operator, value, aggregation, window } = rule.condition\n    const cutoff = new Date(Date.now() - window)\n    const relevantErrors = this.errorBuffer.filter(e => e.timestamp >= cutoff)\n\n    let currentValue: number\n\n    switch (aggregation) {\n      case 'count':\n        currentValue = relevantErrors.length\n        break\n      case 'sum':\n        // 这里可以根据具体指标进行求和\n        currentValue = relevantErrors.length\n        break\n      case 'avg':\n        // 这里可以根据具体指标计算平均值\n        currentValue = relevantErrors.length > 0 ?\n          relevantErrors.length / (window / 1000 / 60) : 0\n        break\n      case 'rate':\n        // 计算错误率\n        const baselineOperations = window / 1000 / 60 * 100 // 假设每分钟100个操作\n        currentValue = relevantErrors.length / baselineOperations\n        break\n      default:\n        currentValue = relevantErrors.length\n    }\n\n    // 根据指标类型调整值\n    if (metric === 'errorRate') {\n      currentValue = this.metrics.errorRate\n    } else if (metric === 'system_error_count') {\n      currentValue = relevantErrors.filter(e => e.category === ErrorCategory.SYSTEM).length\n    } else if (metric === 'network_error_count') {\n      currentValue = relevantErrors.filter(e => e.category === ErrorCategory.NETWORK).length\n    }\n\n    // 评估条件\n    switch (operator) {\n      case 'gt': return currentValue > value\n      case 'lt': return currentValue < value\n      case 'eq': return currentValue === value\n      case 'gte': return currentValue >= value\n      case 'lte': return currentValue <= value\n      default: return false\n    }\n  }\n\n  /**\n   * 触发告警\n   */\n  private triggerAlert(rule: AlertRule): void {\n    const now = new Date()\n    let alertState = this.alertStates.get(rule.id)\n\n    if (!alertState) {\n      alertState = {\n        id: crypto.randomUUID(),\n        ruleId: rule.id,\n        triggered: false,\n        triggerTime: now,\n        currentValue: 0,\n        threshold: rule.threshold\n      }\n      this.alertStates.set(rule.id, alertState)\n    }\n\n    if (!alertState.triggered) {\n      alertState.triggered = true\n      alertState.triggerTime = now\n      alertState.cooldownUntil = new Date(now.getTime() + rule.cooldown)\n\n      // 更新当前值\n      alertState.currentValue = this.getCurrentAlertValue(rule)\n\n      // 发送通知\n      this.sendAlertNotification(rule, alertState)\n\n      // 执行告警动作\n      this.executeAlertActions(rule)\n\n      console.warn(`Alert triggered: ${rule.name} (${rule.severity})`)\n    }\n  }\n\n  /**\n   * 解除告警\n   */\n  private resolveAlert(ruleId: string): void {\n    const alertState = this.alertStates.get(ruleId)\n    if (alertState) {\n      alertState.triggered = false\n      console.log(`Alert resolved: ${ruleId}`)\n    }\n  }\n\n  /**\n   * 获取当前告警值\n   */\n  private getCurrentAlertValue(rule: AlertRule): number {\n    const { metric, aggregation, window } = rule.condition\n    const cutoff = new Date(Date.now() - window)\n    const relevantErrors = this.errorBuffer.filter(e => e.timestamp >= cutoff)\n\n    switch (aggregation) {\n      case 'count':\n        return relevantErrors.length\n      case 'rate':\n        const baselineOperations = window / 1000 / 60 * 100\n        return relevantErrors.length / baselineOperations\n      default:\n        return relevantErrors.length\n    }\n  }\n\n  /**\n   * 发送告警通知\n   */\n  private sendAlertNotification(rule: AlertRule, alertState: AlertState): void {\n    for (const channel of rule.channels) {\n      try {\n        switch (channel.type) {\n          case 'console':\n            console.error(`[${rule.severity.toUpperCase()}] ${rule.name}: ${rule.description}`)\n            break\n          case 'notification':\n            // 这里可以发送浏览器通知\n            if ('Notification' in window) {\n              new Notification(`CardEverything Alert: ${rule.name}`, {\n                body: rule.description,\n                icon: '/favicon.ico'\n              })\n            }\n            break\n          case 'email':\n            // 这里可以发送邮件通知\n            console.log(`Email notification would be sent for alert: ${rule.name}`)\n            break\n          case 'webhook':\n            // 这里可以调用webhook\n            console.log(`Webhook would be called for alert: ${rule.name}`)\n            break\n        }\n      } catch (error) {\n        console.error(`Failed to send notification via ${channel.type}:`, error)\n      }\n    }\n  }\n\n  /**\n   * 执行告警动作\n   */\n  private executeAlertActions(rule: AlertRule): void {\n    for (const action of rule.actions) {\n      try {\n        switch (action.type) {\n          case 'restart':\n            console.log('System restart action triggered')\n            break\n          case 'rollback':\n            console.log('Rollback action triggered')\n            break\n          case 'throttle':\n            console.log('Throttling action triggered')\n            break\n          case 'notify':\n            // 通知已经在sendAlertNotification中处理\n            break\n        }\n      } catch (error) {\n        console.error(`Failed to execute alert action ${action.type}:`, error)\n      }\n    }\n  }\n\n  /**\n   * 执行健康检查\n   */\n  private performHealthCheck(): void {\n    const healthReport = this.generateHealthReport()\n\n    // 如果健康状况差，记录告警\n    if (healthReport.overallHealth === 'poor') {\n      console.warn('System health check failed:', healthReport.issues)\n\n      // 可以在这里触发额外的告警或修复动作\n    }\n\n    // 定期输出健康状态\n    if (Date.now() % (30 * 60 * 1000) < 60000) { // 每30分钟左右\n      console.log(`Health Check - Score: ${healthReport.score}, Status: ${healthReport.overallHealth}`)\n    }\n  }\n\n  /**\n   * 清理过期数据\n   */\n  private cleanupOldData(): void {\n    const oneWeekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)\n\n    // 清理错误缓冲区\n    this.errorBuffer = this.errorBuffer.filter(e => e.timestamp >= oneWeekAgo)\n\n    // 清理指标历史\n    this.metricsHistory = this.metricsHistory.filter(h => h.timestamp >= oneWeekAgo)\n\n    // 清理已解决的告警状态\n    const staleAlertStates: string[] = []\n    for (const [ruleId, alertState] of this.alertStates) {\n      if (!alertState.triggered &&\n          alertState.triggerTime < oneWeekAgo) {\n        staleAlertStates.push(ruleId)\n      }\n    }\n\n    staleAlertStates.forEach(ruleId => {\n      this.alertStates.delete(ruleId)\n    })\n\n    console.log(`Cleaned up ${staleAlertStates.length} stale alert states`)\n  }\n}\n\n// 导出实例\nexport const errorMonitoringService = ErrorMonitoringService.getInstance()\n\n// 导出监控工具函数\nexport const monitorError = (error: UnifiedError, result: ErrorHandlingResult): void => {\n  errorMonitoringService.recordError(error, result)\n}\n\nexport const getSystemHealth = () => {\n  return errorMonitoringService.generateHealthReport()\n}\n\nexport const getErrorStats = (hours?: number) => {\n  return errorMonitoringService.getErrorStatistics(hours)\n}"],"version":3}
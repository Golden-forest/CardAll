{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\error-handling\\unified-error-handler.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\error-handling\\unified-error-handler.ts"],"sourcesContent":["// 统一错误处理器\n// CardEverything 错误处理和恢复机制核心实现\n\nimport { networkStateDetector } from '../network-state-detector'\nimport { errorRecoveryStrategy } from '../network-error-handler'\nimport { intelligentConflictResolver } from '../sync/conflict/intelligent-conflict-resolver'\nimport { db } from '../database-unified'\n\n// 导入统一类型定义\nexport * from './types'\n\n// 错误分类器\nexport class ErrorClassifier {\n  private static instance: ErrorClassifier\n  private patterns: Map<string, (error: any) => UnifiedError | null> = new Map()\n\n  private constructor() {\n    this.initializePatterns()\n  }\n\n  public static getInstance(): ErrorClassifier {\n    if (!ErrorClassifier.instance) {\n      ErrorClassifier.instance = new ErrorClassifier()\n    }\n    return ErrorClassifier.instance\n  }\n\n  /**\n   * 分类错误\n   */\n  public classify(error: any, context?: ErrorContext): UnifiedError {\n    // 如果已经是统一错误，直接返回\n    if (this.isUnifiedError(error)) {\n      return error\n    }\n\n    // 尝试匹配已知模式\n    for (const [name, pattern] of this.patterns) {\n      const classified = pattern(error)\n      if (classified) {\n        return this.enrichWithContext(classified, context)\n      }\n    }\n\n    // 默认分类\n    return this.createDefaultError(error, context)\n  }\n\n  /**\n   * 初始化错误模式\n   */\n  private initializePatterns(): void {\n    // 网络错误模式\n    this.patterns.set('network', (error: any) => {\n      if (this.isNetworkError(error)) {\n        return this.createNetworkError(error)\n      }\n      return null\n    })\n\n    // 协议错误模式\n    this.patterns.set('protocol', (error: any) => {\n      if (this.isProtocolError(error)) {\n        return this.createProtocolError(error)\n      }\n      return null\n    })\n\n    // 数据错误模式\n    this.patterns.set('data', (error: any) => {\n      if (this.isDataError(error)) {\n        return this.createDataError(error)\n      }\n      return null\n    })\n\n    // 系统错误模式\n    this.patterns.set('system', (error: any) => {\n      if (this.isSystemError(error)) {\n        return this.createSystemError(error)\n      }\n      return null\n    })\n  }\n\n  /**\n   * 判断是否为网络错误\n   */\n  private isNetworkError(error: any): boolean {\n    return error?.name?.includes('Network') ||\n           error?.message?.includes('network') ||\n           error?.message?.includes('connection') ||\n           error?.message?.includes('offline') ||\n           error?.code === 'NETWORK_ERROR'\n  }\n\n  /**\n   * 判断是否为协议错误\n   */\n  private isProtocolError(error: any): boolean {\n    return error?.status >= 400 ||\n           error?.name?.includes('HTTP') ||\n           error?.message?.includes('http') ||\n           error?.code === 'HTTP_ERROR'\n  }\n\n  /**\n   * 判断是否为数据错误\n   */\n  private isDataError(error: any): boolean {\n    return error?.name?.includes('Data') ||\n           error?.message?.includes('data') ||\n           error?.message?.includes('validation') ||\n           error?.message?.includes('conflict') ||\n           error?.code === 'DATA_ERROR'\n  }\n\n  /**\n   * 判断是否为系统错误\n   */\n  private isSystemError(error: any): boolean {\n    return error?.name?.includes('System') ||\n           error?.message?.includes('system') ||\n           error?.message?.includes('memory') ||\n           error?.message?.includes('resource') ||\n           error?.code === 'SYSTEM_ERROR'\n  }\n\n  /**\n   * 判断是否为统一错误\n   */\n  private isUnifiedError(error: any): error is UnifiedError {\n    return error &&\n           typeof error.id === 'string' &&\n           typeof error.code === 'string' &&\n           Object.values(ErrorLevel).includes(error.level) &&\n           Object.values(ErrorCategory).includes(error.category)\n  }\n\n  /**\n   * 创建网络错误\n   */\n  private createNetworkError(error: any): UnifiedError {\n    const subCategory = this.determineNetworkSubCategory(error)\n\n    return {\n      id: crypto.randomUUID(),\n      code: `SYNC_NET_${this.generateErrorCode(subCategory)}`,\n      level: ErrorLevel.ERROR,\n      category: ErrorCategory.NETWORK,\n      subCategory,\n      message: error.message || 'Network error occurred',\n      details: error,\n      stack: error.stack,\n      timestamp: new Date(),\n      retryable: this.isNetworkErrorRetryable(subCategory),\n      maxRetries: 3\n    }\n  }\n\n  /**\n   * 创建协议错误\n   */\n  private createProtocolError(error: any): UnifiedError {\n    const subCategory = this.determineProtocolSubCategory(error)\n\n    return {\n      id: crypto.randomUUID(),\n      code: `SYNC_PROTO_${this.generateErrorCode(subCategory)}`,\n      level: ErrorLevel.ERROR,\n      category: ErrorCategory.PROTOCOL,\n      subCategory,\n      message: error.message || 'Protocol error occurred',\n      details: error,\n      stack: error.stack,\n      timestamp: new Date(),\n      retryable: this.isProtocolErrorRetryable(subCategory),\n      maxRetries: 2\n    }\n  }\n\n  /**\n   * 创建数据错误\n   */\n  private createDataError(error: any): UnifiedError {\n    const subCategory = this.determineDataSubCategory(error)\n\n    return {\n      id: crypto.randomUUID(),\n      code: `SYNC_DATA_${this.generateErrorCode(subCategory)}`,\n      level: ErrorLevel.ERROR,\n      category: ErrorCategory.DATA,\n      subCategory,\n      message: error.message || 'Data error occurred',\n      details: error,\n      stack: error.stack,\n      timestamp: new Date(),\n      retryable: this.isDataErrorRetryable(subCategory),\n      maxRetries: 1\n    }\n  }\n\n  /**\n   * 创建系统错误\n   */\n  private createSystemError(error: any): UnifiedError {\n    const subCategory = this.determineSystemSubCategory(error)\n\n    return {\n      id: crypto.randomUUID(),\n      code: `SYNC_SYS_${this.generateErrorCode(subCategory)}`,\n      level: ErrorLevel.CRITICAL,\n      category: ErrorCategory.SYSTEM,\n      subCategory,\n      message: error.message || 'System error occurred',\n      details: error,\n      stack: error.stack,\n      timestamp: new Date(),\n      retryable: false,\n      maxRetries: 0\n    }\n  }\n\n  /**\n   * 创建默认错误\n   */\n  private createDefaultError(error: any, context?: ErrorContext): UnifiedError {\n    return {\n      id: crypto.randomUUID(),\n      code: 'SYNC_UNKNOWN_001',\n      level: ErrorLevel.WARNING,\n      category: ErrorCategory.APPLICATION,\n      subCategory: ErrorSubCategory.BUSINESS_LOGIC_ERROR,\n      message: error.message || 'Unknown error occurred',\n      details: error,\n      stack: error.stack,\n      timestamp: new Date(),\n      retryable: true,\n      maxRetries: 1\n    }\n  }\n\n  /**\n   * 确定网络错误子类别\n   */\n  private determineNetworkSubCategory(error: any): ErrorSubCategory {\n    if (error.message?.includes('timeout')) {\n      return ErrorSubCategory.NETWORK_TIMEOUT\n    }\n    if (error.message?.includes('connection') || error.message?.includes('offline')) {\n      return ErrorSubCategory.CONNECTION_LOST\n    }\n    if (error.message?.includes('bandwidth') || error.message?.includes('limit')) {\n      return ErrorSubCategory.BANDWIDTH_LIMIT\n    }\n    if (error.message?.includes('dns') || error.message?.includes('resolve')) {\n      return ErrorSubCategory.DNS_FAILURE\n    }\n    return ErrorSubCategory.CONNECTION_LOST\n  }\n\n  /**\n   * 确定协议错误子类别\n   */\n  private determineProtocolSubCategory(error: any): ErrorSubCategory {\n    if (error.status === 401 || error.status === 403) {\n      return ErrorSubCategory.AUTH_ERROR\n    }\n    if (error.message?.includes('ssl') || error.message?.includes('tls') || error.message?.includes('certificate')) {\n      return ErrorSubCategory.SSL_ERROR\n    }\n    return ErrorSubCategory.HTTP_ERROR\n  }\n\n  /**\n   * 确定数据错误子类别\n   */\n  private determineDataSubCategory(error: any): ErrorSubCategory {\n    if (error.message?.includes('conflict') || error.message?.includes('concurrent')) {\n      return ErrorSubCategory.DATA_CONFLICT\n    }\n    if (error.message?.includes('corruption') || error.message?.includes('corrupt')) {\n      return ErrorSubCategory.DATA_CORRUPTION\n    }\n    if (error.message?.includes('loss') || error.message?.includes('missing')) {\n      return ErrorSubCategory.DATA_LOSS\n    }\n    return ErrorSubCategory.VALIDATION_ERROR\n  }\n\n  /**\n   * 确定系统错误子类别\n   */\n  private determineSystemSubCategory(error: any): ErrorSubCategory {\n    if (error.message?.includes('overload') || error.message?.includes('overloaded')) {\n      return ErrorSubCategory.SYSTEM_OVERLOAD\n    }\n    if (error.message?.includes('memory') || error.message?.includes('resource')) {\n      return ErrorSubCategory.RESOURCE_EXHAUSTED\n    }\n    if (error.message?.includes('config') || error.message?.includes('configuration')) {\n      return ErrorSubCategory.CONFIGURATION_ERROR\n    }\n    return ErrorSubCategory.SYSTEM_OVERLOAD\n  }\n\n  /**\n   * 生成错误代码\n   */\n  private generateErrorCode(subCategory: ErrorSubCategory): string {\n    const codeMap: Record<ErrorSubCategory, string> = {\n      [ErrorSubCategory.CONNECTION_LOST]: 'CONN_001',\n      [ErrorSubCategory.NETWORK_TIMEOUT]: 'TIME_001',\n      [ErrorSubCategory.BANDWIDTH_LIMIT]: 'BAND_001',\n      [ErrorSubCategory.DNS_FAILURE]: 'DNS_001',\n      [ErrorSubCategory.HTTP_ERROR]: 'HTTP_001',\n      [ErrorSubCategory.SSL_ERROR]: 'SSL_001',\n      [ErrorSubCategory.AUTH_ERROR]: 'AUTH_001',\n      [ErrorSubCategory.VALIDATION_ERROR]: 'VAL_001',\n      [ErrorSubCategory.BUSINESS_LOGIC_ERROR]: 'LOGIC_001',\n      [ErrorSubCategory.PERMISSION_ERROR]: 'PERM_001',\n      [ErrorSubCategory.DATA_CONFLICT]: 'CONF_001',\n      [ErrorSubCategory.DATA_CORRUPTION]: 'CORR_001',\n      [ErrorSubCategory.DATA_LOSS]: 'LOSS_001',\n      [ErrorSubCategory.SYSTEM_OVERLOAD]: 'OVER_001',\n      [ErrorSubCategory.RESOURCE_EXHAUSTED]: 'RES_001',\n      [ErrorSubCategory.CONFIGURATION_ERROR]: 'CONF_001'\n    }\n\n    return codeMap[subCategory] || 'UNKN_001'\n  }\n\n  /**\n   * 判断网络错误是否可重试\n   */\n  private isNetworkErrorRetryable(subCategory: ErrorSubCategory): boolean {\n    return [\n      ErrorSubCategory.CONNECTION_LOST,\n      ErrorSubCategory.NETWORK_TIMEOUT,\n      ErrorSubCategory.BANDWIDTH_LIMIT\n    ].includes(subCategory)\n  }\n\n  /**\n   * 判断协议错误是否可重试\n   */\n  private isProtocolErrorRetryable(subCategory: ErrorSubCategory): boolean {\n    return subCategory === ErrorSubCategory.HTTP_ERROR\n  }\n\n  /**\n   * 判断数据错误是否可重试\n   */\n  private isDataErrorRetryable(subCategory: ErrorSubCategory): boolean {\n    return subCategory === ErrorSubCategory.DATA_CONFLICT\n  }\n\n  /**\n   * 使用上下文信息丰富错误\n   */\n  private enrichWithContext(error: UnifiedError, context?: ErrorContext): UnifiedError {\n    if (!context) return error\n\n    return {\n      ...error,\n      userId: context.userId,\n      operation: context.request?.operation,\n      details: {\n        ...error.details,\n        context: {\n          environment: context.environment,\n          deviceInfo: context.deviceInfo,\n          networkState: context.networkState\n        }\n      }\n    }\n  }\n}\n\n// 统一错误处理器\nexport class UnifiedErrorHandler {\n  private static instance: UnifiedErrorHandler\n  private handlers: ErrorHandler[] = []\n  private classifier: ErrorClassifier\n  private logger: ErrorLogger\n  private recoveryManager: RecoveryManager\n\n  private constructor() {\n    this.classifier = ErrorClassifier.getInstance()\n    this.logger = ErrorLogger.getInstance()\n    this.recoveryManager = RecoveryManager.getInstance()\n    this.initializeHandlers()\n  }\n\n  public static getInstance(): UnifiedErrorHandler {\n    if (!UnifiedErrorHandler.instance) {\n      UnifiedErrorHandler.instance = new UnifiedErrorHandler()\n    }\n    return UnifiedErrorHandler.instance\n  }\n\n  /**\n   * 处理错误\n   */\n  public async handleError(\n    error: any,\n    context: ErrorContext\n  ): Promise<ErrorHandlingResult> {\n    const startTime = performance.now()\n\n    try {\n      // 1. 分类错误\n      const unifiedError = this.classifier.classify(error, context)\n\n      // 2. 记录错误日志\n      await this.logger.logError(unifiedError, context)\n\n      // 3. 查找合适的处理器\n      const handler = this.findHandler(unifiedError)\n\n      if (handler) {\n        // 4. 执行错误处理\n        const result = await handler.handle(unifiedError, context)\n\n        // 5. 记录处理结果\n        await this.logger.logHandlingResult(unifiedError, result)\n\n        return {\n          ...result,\n          metrics: {\n            handlingTime: performance.now() - startTime,\n            attempts: result.metrics?.attempts || 1,\n            memoryUsage: this.getMemoryUsage()\n          }\n        }\n      }\n\n      // 6. 默认处理\n      return await this.defaultHandle(unifiedError, context)\n\n    } catch (handlingError) {\n      // 处理错误本身出现异常\n      console.error('Error handling failed:', handlingError)\n\n      return {\n        handled: false,\n        error: this.classifier.classify(handlingError, context),\n        metrics: {\n          handlingTime: performance.now() - startTime,\n          attempts: 1,\n          memoryUsage: this.getMemoryUsage()\n        }\n      }\n    }\n  }\n\n  /**\n   * 注册错误处理器\n   */\n  public registerHandler(handler: ErrorHandler): void {\n    this.handlers.push(handler)\n    this.handlers.sort((a, b) => b.priority - a.priority)\n  }\n\n  /**\n   * 查找合适的错误处理器\n   */\n  private findHandler(error: UnifiedError): ErrorHandler | null {\n    return this.handlers.find(handler => handler.canHandle(error))\n  }\n\n  /**\n   * 默认错误处理\n   */\n  private async defaultHandle(\n    error: UnifiedError,\n    context: ErrorContext\n  ): Promise<ErrorHandlingResult> {\n    try {\n      // 尝试恢复\n      const recoveryResult = await this.recoveryManager.attemptRecovery(error, context)\n\n      if (recoveryResult.success) {\n        return {\n          handled: true,\n          error,\n          action: recoveryResult.action,\n          resolution: recoveryResult.message\n        }\n      }\n\n      // 无法恢复\n      return {\n        handled: false,\n        error,\n        action: 'manual',\n        resolution: 'Manual intervention required'\n      }\n\n    } catch (recoveryError) {\n      return {\n        handled: false,\n        error,\n        action: 'skip',\n        resolution: 'Recovery failed'\n      }\n    }\n  }\n\n  /**\n   * 初始化错误处理器\n   */\n  private initializeHandlers(): void {\n    // 网络错误处理器\n    this.registerHandler(new NetworkErrorHandler())\n\n    // 数据错误处理器\n    this.registerHandler(new DataErrorHandler())\n\n    // 系统错误处理器\n    this.registerHandler(new SystemErrorHandler())\n\n    // 默认错误处理器\n    this.registerHandler(new DefaultErrorHandler())\n  }\n\n  /**\n   * 获取内存使用情况\n   */\n  private getMemoryUsage(): number {\n    if (typeof performance !== 'undefined' && (performance as any).memory) {\n      const memory = (performance as any).memory\n      return memory.usedJSHeapSize\n    }\n    return 0\n  }\n}\n\n// 错误日志器\nclass ErrorLogger {\n  private static instance: ErrorLogger\n  private logs: ErrorLog[] = []\n  private maxLogEntries = 1000\n\n  private constructor() {}\n\n  public static getInstance(): ErrorLogger {\n    if (!ErrorLogger.instance) {\n      ErrorLogger.instance = new ErrorLogger()\n    }\n    return ErrorLogger.instance\n  }\n\n  /**\n   * 记录错误日志\n   */\n  public async logError(error: UnifiedError, context: ErrorContext): Promise<void> {\n    const log: ErrorLog = {\n      id: crypto.randomUUID(),\n      timestamp: error.timestamp,\n      level: error.level,\n      category: error.category,\n      code: error.code,\n      message: error.message,\n      stack: error.stack,\n      details: error.details,\n      userId: context.userId,\n      sessionId: context.sessionId,\n      operation: context.request?.operation,\n      entityId: context.request?.entityId,\n      environment: context.environment,\n      deviceInfo: context.deviceInfo,\n      networkInfo: context.networkState,\n      resolved: false\n    }\n\n    this.logs.push(log)\n\n    // 保持日志数量限制\n    if (this.logs.length > this.maxLogEntries) {\n      this.logs = this.logs.slice(-this.maxLogEntries)\n    }\n\n    // 持久化到本地存储\n    await this.persistLog(log)\n\n    // 实时上报关键错误\n    if (error.level === ErrorLevel.CRITICAL || error.level === ErrorLevel.ERROR) {\n      await this.reportError(log)\n    }\n  }\n\n  /**\n   * 记录处理结果\n   */\n  public async logHandlingResult(error: UnifiedError, result: ErrorHandlingResult): Promise<void> {\n    const log = this.logs.find(l => l.code === error.code)\n    if (log) {\n      log.handled = result.handled\n      log.recoveryAction = result.action\n      log.resolutionTime = new Date()\n      log.resolution = result.resolution\n      await this.persistLog(log)\n    }\n  }\n\n  /**\n   * 持久化日志\n   */\n  private async persistLog(log: ErrorLog): Promise<void> {\n    try {\n      const logs = this.getStoredLogs()\n      logs.push(log)\n\n      // 限制本地存储的日志数量\n      if (logs.length > 500) {\n        logs.splice(0, logs.length - 500)\n      }\n\n      localStorage.setItem('cardall_error_logs', JSON.stringify(logs))\n    } catch (error) {\n      console.error('Failed to persist error log:', error)\n    }\n  }\n\n  /**\n   * 获取存储的日志\n   */\n  private getStoredLogs(): ErrorLog[] {\n    try {\n      const stored = localStorage.getItem('cardall_error_logs')\n      return stored ? JSON.parse(stored) : []\n    } catch {\n      return []\n    }\n  }\n\n  /**\n   * 上报错误\n   */\n  private async reportError(log: ErrorLog): Promise<void> {\n    try {\n      // 这里可以实现错误上报到服务器的逻辑\n      console.log('Reporting error:', log)\n    } catch (error) {\n      console.error('Failed to report error:', error)\n    }\n  }\n\n  /**\n   * 获取错误统计\n   */\n  public getErrorStatistics(): {\n    totalErrors: number\n    errorByLevel: Record<ErrorLevel, number>\n    errorByCategory: Record<ErrorCategory, number>\n    recoveryRate: number\n  } {\n    const totalErrors = this.logs.length\n    const errorByLevel: Record<ErrorLevel, number> = {} as any\n    const errorByCategory: Record<ErrorCategory, number> = {} as any\n\n    // 初始化统计\n    Object.values(ErrorLevel).forEach(level => {\n      errorByLevel[level] = 0\n    })\n    Object.values(ErrorCategory).forEach(category => {\n      errorByCategory[category] = 0\n    })\n\n    // 统计错误\n    this.logs.forEach(log => {\n      errorByLevel[log.level]++\n      errorByCategory[log.category]++\n    })\n\n    // 计算恢复率\n    const resolvedErrors = this.logs.filter(log => log.resolved).length\n    const recoveryRate = totalErrors > 0 ? resolvedErrors / totalErrors : 0\n\n    return {\n      totalErrors,\n      errorByLevel,\n      errorByCategory,\n      recoveryRate\n    }\n  }\n}\n\n// 恢复管理器\nclass RecoveryManager {\n  private static instance: RecoveryManager\n\n  private constructor() {}\n\n  public static getInstance(): RecoveryManager {\n    if (!RecoveryManager.instance) {\n      RecoveryManager.instance = new RecoveryManager()\n    }\n    return RecoveryManager.instance\n  }\n\n  /**\n   * 尝试恢复\n   */\n  public async attemptRecovery(\n    error: UnifiedError,\n    context: ErrorContext\n  ): Promise<{\n    success: boolean\n    action?: RecoveryAction\n    message: string\n  }> {\n    if (!error.retryable) {\n      return {\n        success: false,\n        message: 'Error is not retryable'\n      }\n    }\n\n    // 根据错误类型选择恢复策略\n    switch (error.category) {\n      case ErrorCategory.NETWORK:\n        return await this.recoverNetworkError(error, context)\n\n      case ErrorCategory.PROTOCOL:\n        return await this.recoverProtocolError(error, context)\n\n      case ErrorCategory.DATA:\n        return await this.recoverDataError(error, context)\n\n      default:\n        return await this.recoverDefaultError(error, context)\n    }\n  }\n\n  /**\n   * 恢复网络错误\n   */\n  private async recoverNetworkError(\n    error: UnifiedError,\n    context: ErrorContext\n  ): Promise<{\n    success: boolean\n    action?: RecoveryAction\n    message: string\n  }> {\n    // 检查网络状态\n    const networkState = networkStateDetector.getCurrentState()\n\n    if (!networkState.isOnline) {\n      return {\n        success: false,\n        action: 'manual',\n        message: 'Network is offline, please check connection'\n      }\n    }\n\n    // 尝试重试\n    if (error.retryCount < (error.maxRetries || 3)) {\n      return {\n        success: true,\n        action: 'retry',\n        message: 'Will retry network operation'\n      }\n    }\n\n    return {\n      success: false,\n      action: 'fallback',\n      message: 'Network retry limit exceeded, falling back to local data'\n    }\n  }\n\n  /**\n   * 恢复协议错误\n   */\n  private async recoverProtocolError(\n    error: UnifiedError,\n    context: ErrorContext\n  ): Promise<{\n    success: boolean\n    action?: RecoveryAction\n    message: string\n  }> {\n    // 认证错误需要重新登录\n    if (error.subCategory === ErrorSubCategory.AUTH_ERROR) {\n      return {\n        success: false,\n        action: 'manual',\n        message: 'Authentication failed, please re-login'\n      }\n    }\n\n    // 其他协议错误尝试重试\n    if (error.retryCount < (error.maxRetries || 2)) {\n      return {\n        success: true,\n        action: 'retry',\n        message: 'Will retry protocol operation'\n      }\n    }\n\n    return {\n      success: false,\n      action: 'skip',\n      message: 'Protocol error recovery failed'\n    }\n  }\n\n  /**\n   * 恢复数据错误\n   */\n  private async recoverDataError(\n    error: UnifiedError,\n    context: ErrorContext\n  ): Promise<{\n    success: boolean\n    action?: RecoveryAction\n    message: string\n  }> {\n    // 数据冲突尝试智能解决\n    if (error.subCategory === ErrorSubCategory.DATA_CONFLICT) {\n      try {\n        // 这里可以调用智能冲突解决器\n        return {\n          success: true,\n          action: 'repair',\n          message: 'Attempting intelligent conflict resolution'\n        }\n      } catch {\n        return {\n          success: false,\n          action: 'manual',\n          message: 'Conflict resolution failed, manual intervention required'\n        }\n      }\n    }\n\n    // 数据损坏尝试回滚\n    if (error.subCategory === ErrorSubCategory.DATA_CORRUPTION) {\n      return {\n        success: true,\n        action: 'rollback',\n        message: 'Attempting data rollback'\n      }\n    }\n\n    return {\n      success: false,\n      action: 'skip',\n      message: 'Data error recovery failed'\n    }\n  }\n\n  /**\n   * 默认恢复\n   */\n  private async recoverDefaultError(\n    error: UnifiedError,\n    context: ErrorContext\n  ): Promise<{\n    success: boolean\n    action?: RecoveryAction\n    message: string\n  }> {\n    if (error.retryable && error.retryCount < (error.maxRetries || 1)) {\n      return {\n        success: true,\n        action: 'retry',\n        message: 'Will retry operation'\n      }\n    }\n\n    return {\n      success: false,\n      action: 'skip',\n      message: 'Default recovery failed'\n    }\n  }\n}\n\n// 错误日志接口\ninterface ErrorLog {\n  id: string\n  timestamp: Date\n  level: ErrorLevel\n  category: ErrorCategory\n  code: string\n  message: string\n  stack?: string\n  details?: any\n  userId?: string\n  sessionId?: string\n  operation?: string\n  entityId?: string\n  environment: 'development' | 'staging' | 'production'\n  deviceInfo?: any\n  networkInfo?: any\n  handled?: boolean\n  recoveryAction?: RecoveryAction\n  resolution?: string\n  resolutionTime?: Date\n}\n\n// 具体错误处理器实现\n\n// 网络错误处理器\nclass NetworkErrorHandler implements ErrorHandler {\n  priority = 100\n\n  canHandle(error: UnifiedError): boolean {\n    return error.category === ErrorCategory.NETWORK\n  }\n\n  async handle(error: UnifiedError, context: ErrorContext): Promise<ErrorHandlingResult> {\n    // 更新重试计数\n    error.retryCount = (error.retryCount || 0) + 1\n\n    // 检查是否超过重试限制\n    if (error.retryCount >= (error.maxRetries || 3)) {\n      return {\n        handled: false,\n        error,\n        action: 'fallback',\n        resolution: 'Network retry limit exceeded'\n      }\n    }\n\n    // 计算重试延迟\n    const delay = this.calculateRetryDelay(error.retryCount)\n\n    return {\n      handled: true,\n      error,\n      action: 'retry',\n      resolution: `Network error, will retry after ${delay}ms`,\n      metrics: {\n        handlingTime: 10,\n        attempts: error.retryCount,\n        memoryUsage: 0\n      }\n    }\n  }\n\n  private calculateRetryDelay(attempt: number): number {\n    return Math.min(1000 * Math.pow(2, attempt), 30000)\n  }\n}\n\n// 数据错误处理器\nclass DataErrorHandler implements ErrorHandler {\n  priority = 90\n\n  canHandle(error: UnifiedError): boolean {\n    return error.category === ErrorCategory.DATA\n  }\n\n  async handle(error: UnifiedError, context: ErrorContext): Promise<ErrorHandlingResult> {\n    // 数据冲突处理\n    if (error.subCategory === ErrorSubCategory.DATA_CONFLICT) {\n      return {\n        handled: true,\n        error,\n        action: 'repair',\n        resolution: 'Data conflict detected, attempting resolution',\n        metrics: {\n          handlingTime: 50,\n          attempts: 1,\n          memoryUsage: 0\n        }\n      }\n    }\n\n    // 数据损坏处理\n    if (error.subCategory === ErrorSubCategory.DATA_CORRUPTION) {\n      return {\n        handled: true,\n        error,\n        action: 'rollback',\n        resolution: 'Data corruption detected, attempting rollback',\n        metrics: {\n          handlingTime: 100,\n          attempts: 1,\n          memoryUsage: 0\n        }\n      }\n    }\n\n    return {\n      handled: false,\n      error,\n      action: 'manual',\n      resolution: 'Data error requires manual intervention',\n      metrics: {\n        handlingTime: 20,\n        attempts: 1,\n        memoryUsage: 0\n      }\n    }\n  }\n}\n\n// 系统错误处理器\nclass SystemErrorHandler implements ErrorHandler {\n  priority = 80\n\n  canHandle(error: UnifiedError): boolean {\n    return error.category === ErrorCategory.SYSTEM\n  }\n\n  async handle(error: UnifiedError, context: ErrorContext): Promise<ErrorHandlingResult> {\n    // 系统错误通常需要重启或降级\n    return {\n      handled: false,\n      error,\n      action: 'manual',\n      resolution: 'System error requires manual intervention',\n      metrics: {\n        handlingTime: 5,\n        attempts: 1,\n        memoryUsage: 0\n      }\n    }\n  }\n}\n\n// 默认错误处理器\nclass DefaultErrorHandler implements ErrorHandler {\n  priority = 10\n\n  canHandle(error: UnifiedError): boolean {\n    return true // 处理所有错误\n  }\n\n  async handle(error: UnifiedError, context: ErrorContext): Promise<ErrorHandlingResult> {\n    return {\n      handled: false,\n      error,\n      action: 'skip',\n      resolution: 'No specific handler found for this error',\n      metrics: {\n        handlingTime: 5,\n        attempts: 1,\n        memoryUsage: 0\n      }\n    }\n  }\n}\n\n// 导出实例\nexport const unifiedErrorHandler = UnifiedErrorHandler.getInstance()\n\n// 导出工具函数\nexport const createErrorContext = (\n  request?: any,\n  userId?: string,\n  environment: 'development' | 'staging' | 'production' = 'development'\n): ErrorContext => ({\n  request,\n  userId,\n  environment,\n  deviceInfo: getDeviceInfo(),\n  networkState: networkStateDetector.getCurrentState()\n})\n\nfunction getDeviceInfo(): any {\n  if (typeof navigator !== 'undefined') {\n    return {\n      userAgent: navigator.userAgent,\n      platform: navigator.platform,\n      language: navigator.language\n    }\n  }\n  return {}\n}\n\nexport const handleError = async (\n  error: any,\n  context?: Partial<ErrorContext>\n): Promise<ErrorHandlingResult> => {\n  const fullContext: ErrorContext = {\n    environment: 'development',\n    ...context\n  }\n\n  return unifiedErrorHandler.handleError(error, fullContext)\n}"],"version":3}
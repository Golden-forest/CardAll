ae1142a5b60febbda186bc04c48276ef
"use strict";
/**
 * IndexedDB Mock for Testing
 * 提供完整的IndexedDB API模拟用于单元测试
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.resetMockIndexedDB = resetMockIndexedDB;
exports.createMockIDBFactory = createMockIDBFactory;
// 模拟实现
class MockIDBObjectStoreImpl {
    constructor(name, keyPath = null, autoIncrement = false) {
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        Object.defineProperty(this, "indexes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "keyPath", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "autoIncrement", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "indexNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.name = name;
        this.keyPath = keyPath;
        this.autoIncrement = autoIncrement;
        this.indexNames = [];
    }
    async add(data, key) {
        return this._executeOperation(() => {
            const actualKey = key || this._generateKey(data);
            if (this.data.has(actualKey)) {
                throw new DOMException('Key already exists', 'ConstraintError');
            }
            this.data.set(actualKey, data);
            return actualKey;
        });
    }
    async put(data, key) {
        return this._executeOperation(() => {
            const actualKey = key || this._generateKey(data);
            this.data.set(actualKey, data);
            return actualKey;
        });
    }
    async delete(key) {
        return this._executeOperation(() => {
            if (!this.data.has(key)) {
                throw new DOMException('Key not found', 'NotFoundError');
            }
            this.data.delete(key);
            return undefined;
        });
    }
    async get(key) {
        return this._executeOperation(() => {
            return this.data.get(key);
        });
    }
    async getAll(query, count) {
        return this._executeOperation(() => {
            let results = [];
            if (query === undefined) {
                results = Array.from(this.data.values());
            }
            else {
                // 简单的查询处理
                results = Array.from(this.data.values()).filter(item => {
                    if (typeof query === 'string') {
                        return JSON.stringify(item).includes(query);
                    }
                    return true;
                });
            }
            if (count !== undefined) {
                results = results.slice(0, count);
            }
            return results;
        });
    }
    async clear() {
        return this._executeOperation(() => {
            this.data.clear();
            return undefined;
        });
    }
    index(name) {
        const index = this.indexes.get(name);
        if (!index) {
            throw new DOMException('Index not found', 'NotFoundError');
        }
        return index;
    }
    createIndex(name, keyPath, options = {}) {
        const index = new MockIDBIndexImpl(name, this, keyPath, options.multiEntry || false, options.unique || false);
        this.indexes.set(name, index);
        this.indexNames.push(name);
        return index;
    }
    deleteIndex(name) {
        this.indexes.delete(name);
        this.indexNames = this.indexNames.filter(n => n !== name);
    }
    async openCursor(query, direction) {
        return this._executeOperation(() => {
            return {
                continue: jest.fn(),
                advance: jest.fn(),
                delete: jest.fn(),
                update: jest.fn(),
            };
        });
    }
    _generateKey(data) {
        if (this.keyPath) {
            if (typeof this.keyPath === 'string') {
                return data[this.keyPath];
            }
            else {
                // 处理复合键路径
                return this.keyPath.map(key => data[key]);
            }
        }
        return crypto.randomUUID();
    }
    async _executeOperation(operation) {
        try {
            const result = operation();
            await new Promise(resolve => setTimeout(resolve, 0)); // 模拟异步操作
            return result;
        }
        catch (error) {
            throw error;
        }
    }
}
class MockIDBIndexImpl {
    constructor(name, objectStore, keyPath, multiEntry, unique) {
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "objectStore", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "keyPath", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "multiEntry", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "unique", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.name = name;
        this.objectStore = objectStore;
        this.keyPath = keyPath;
        this.multiEntry = multiEntry;
        this.unique = unique;
    }
    async get(key) {
        return this._executeOperation(() => {
            // 简化实现
            return null;
        });
    }
    async getKey(key) {
        return this._executeOperation(() => {
            return null;
        });
    }
    async getAll(query, count) {
        return this._executeOperation(() => {
            return [];
        });
    }
    async getAllKeys(query, count) {
        return this._executeOperation(() => {
            return [];
        });
    }
    async count(query) {
        return this._executeOperation(() => {
            return 0;
        });
    }
    async openCursor(query, direction) {
        return this._executeOperation(() => {
            return null;
        });
    }
    async openKeyCursor(query, direction) {
        return this._executeOperation(() => {
            return null;
        });
    }
    async _executeOperation(operation) {
        try {
            const result = operation();
            await new Promise(resolve => setTimeout(resolve, 0));
            return result;
        }
        catch (error) {
            throw error;
        }
    }
}
class MockIDBDatabaseImpl {
    constructor(name, version) {
        Object.defineProperty(this, "objectStores", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "objectStoreNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.name = name;
        this.version = version;
        this.objectStoreNames = [];
    }
    createObjectStore(name, options = {}) {
        if (this.objectStores.has(name)) {
            throw new DOMException('Object store already exists', 'ConstraintError');
        }
        const store = new MockIDBObjectStoreImpl(name, options.keyPath || null, options.autoIncrement || false);
        this.objectStores.set(name, store);
        this.objectStoreNames.push(name);
        return store;
    }
    deleteObjectStore(name) {
        if (!this.objectStores.has(name)) {
            throw new DOMException('Object store not found', 'NotFoundError');
        }
        this.objectStores.delete(name);
        this.objectStoreNames = this.objectStoreNames.filter(n => n !== name);
    }
    transaction(storeNames, mode = 'readonly') {
        const stores = Array.isArray(storeNames) ? storeNames : [storeNames];
        const transaction = new MockIDBTransactionImpl(this, mode, stores);
        return transaction;
    }
    close() {
        // 清理资源
        this.objectStores.clear();
    }
}
class MockIDBTransactionImpl {
    constructor(db, mode, storeNames) {
        Object.defineProperty(this, "db", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "mode", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "objectStoreNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "error", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "onabort", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "oncomplete", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "onerror", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "committed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "aborted", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        this.db = db;
        this.mode = mode;
        this.objectStoreNames = storeNames;
    }
    objectStore(name) {
        // 这里应该返回一个在事务上下文中的对象存储
        return this.db.objectStores.get(name);
    }
    abort() {
        if (this.committed) {
            throw new DOMException('Transaction already committed', 'InvalidStateError');
        }
        this.aborted = true;
        if (this.onabort) {
            this.onabort(new Event('abort'));
        }
    }
    commit() {
        if (this.aborted) {
            throw new DOMException('Transaction already aborted', 'InvalidStateError');
        }
        this.committed = true;
        if (this.oncomplete) {
            this.oncomplete(new Event('complete'));
        }
    }
}
// 全局IndexedDB工厂函数
let databases = new Map();
function resetMockIndexedDB() {
    databases.clear();
}
function createMockIDBFactory() {
    return {
        open: (name, version) => {
            return new Promise((resolve, reject) => {
                const request = {
                    source: null,
                    readyState: 'pending',
                    result: null,
                    error: null,
                    onupgradeneeded: null,
                    onblocked: null,
                    onsuccess: null,
                    onerror: null,
                };
                setTimeout(() => {
                    try {
                        let db = databases.get(name);
                        if (!db) {
                            db = new MockIDBDatabaseImpl(name, version || 1);
                            databases.set(name, db);
                            if (request.onupgradeneeded) {
                                request.onupgradeneeded({
                                    type: 'upgradeneeded',
                                    oldVersion: 0,
                                    newVersion: version || 1,
                                    target: request,
                                });
                            }
                        }
                        else if (version && db.version !== version) {
                            throw new DOMException('Version mismatch', 'VersionError');
                        }
                        request.result = db;
                        request.readyState = 'done';
                        if (request.onsuccess) {
                            request.onsuccess(new Event('success'));
                        }
                        resolve(request);
                    }
                    catch (error) {
                        request.error = error;
                        request.readyState = 'done';
                        if (request.onerror) {
                            request.onerror(new Event('error'));
                        }
                        reject(error);
                    }
                }, 10);
            });
        },
        deleteDatabase: (name) => {
            return new Promise((resolve, reject) => {
                const request = {
                    source: null,
                    readyState: 'pending',
                    result: undefined,
                    error: null,
                    onsuccess: null,
                    onerror: null,
                };
                setTimeout(() => {
                    try {
                        databases.delete(name);
                        request.readyState = 'done';
                        if (request.onsuccess) {
                            request.onsuccess(new Event('success'));
                        }
                        resolve(request);
                    }
                    catch (error) {
                        request.error = error;
                        request.readyState = 'done';
                        if (request.onerror) {
                            request.onerror(new Event('error'));
                        }
                        reject(error);
                    }
                }, 10);
            });
        },
        cmp: (first, second) => {
            if (first < second)
                return -1;
            if (first > second)
                return 1;
            return 0;
        },
    };
}
// 设置全局IndexedDB
Object.defineProperty(window, 'indexedDB', {
    value: createMockIDBFactory(),
    writable: true,
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\mocks\\indexeddb.mock.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\mocks\\indexeddb.mock.ts"],"sourcesContent":["/**\n * IndexedDB Mock for Testing\n * 提供完整的IndexedDB API模拟用于单元测试\n */\n\nexport interface MockIndexedDBEventTarget extends EventTarget {\n  result?: any\n  error?: any\n  transaction?: MockIDBTransaction\n}\n\nexport interface MockIDBObjectStore {\n  name: string\n  keyPath: string | string[] | null\n  autoIncrement: boolean\n  indexNames: DOMStringList\n\n  // 数据操作方法\n  add(data: any, key?: any): Promise<IDBRequest>\n  put(data: any, key?: any): Promise<IDBRequest>\n  delete(key: any): Promise<IDBRequest>\n  get(key: any): Promise<IDBRequest>\n  getAll(query?: any, count?: number): Promise<IDBRequest>\n  clear(): Promise<IDBRequest>\n\n  // 索引方法\n  index(name: string): MockIDBIndex\n  createIndex(name: string, keyPath: string | string[], options?: IDBIndexParameters): MockIDBIndex\n  deleteIndex(name: string): void\n\n  // 游标方法\n  openCursor(query?: any, direction?: IDBCursorDirection): Promise<IDBRequest>\n}\n\nexport interface MockIDBIndex {\n  name: string\n  objectStore: MockIDBObjectStore\n  keyPath: string | string[]\n  multiEntry: boolean\n  unique: boolean\n\n  get(key: any): Promise<IDBRequest>\n  getKey(key: any): Promise<IDBRequest>\n  getAll(query?: any, count?: number): Promise<IDBRequest>\n  getAllKeys(query?: any, count?: number): Promise<IDBRequest>\n  count(query?: any): Promise<IDBRequest>\n  openCursor(query?: any, direction?: IDBCursorDirection): Promise<IDBRequest>\n  openKeyCursor(query?: any, direction?: IDBCursorDirection): Promise<IDBRequest>\n}\n\nexport interface MockIDBTransaction {\n  db: MockIDBDatabase\n  mode: IDBTransactionMode\n  objectStoreNames: DOMStringList\n  error: DOMException | null\n  onabort: ((this: IDBTransaction, ev: Event) => any) | null\n  oncomplete: ((this: IDBTransaction, ev: Event) => any) | null\n  onerror: ((this: IDBTransaction, ev: Event) => any) | null\n\n  objectStore(name: string): MockIDBObjectStore\n  abort(): void\n  commit(): void\n}\n\nexport interface MockIDBDatabase {\n  name: string\n  version: number\n  objectStoreNames: DOMStringList\n\n  createObjectStore(name: string, options?: IDBObjectStoreParameters): MockIDBObjectStore\n  deleteObjectStore(name: string): void\n  transaction(storeNames: string | string[], mode?: IDBTransactionMode): MockIDBTransaction\n  close(): void\n}\n\nexport interface MockIDBOpenDBRequest extends MockIndexedDBEventTarget {\n  source: null\n  readyState: IDBRequestReadyState\n  onupgradeneeded: ((this: IDBOpenDBRequest, ev: IDBVersionChangeEvent) => any) | null\n  onblocked: ((this: IDBOpenDBRequest, ev: Event) => any) | null\n}\n\nexport interface MockIDBRequest extends MockIndexedDBEventTarget {\n  source: any\n  readyState: IDBRequestReadyState\n  result: any\n  error: any\n  onsuccess: ((this: IDBRequest, ev: Event) => any) | null\n  onerror: ((this: IDBRequest, ev: Event) => any) | null\n}\n\n// 模拟实现\nclass MockIDBObjectStoreImpl implements MockIDBObjectStore {\n  private data: Map<any, any> = new Map()\n  private indexes: Map<string, MockIDBIndex> = new Map()\n\n  name: string\n  keyPath: string | string[] | null\n  autoIncrement: boolean\n  indexNames: DOMStringList\n\n  constructor(name: string, keyPath: string | string[] | null = null, autoIncrement: boolean = false) {\n    this.name = name\n    this.keyPath = keyPath\n    this.autoIncrement = autoIncrement\n    this.indexNames = [] as any\n  }\n\n  async add(data: any, key?: any): Promise<IDBRequest> {\n    return this._executeOperation(() => {\n      const actualKey = key || this._generateKey(data)\n      if (this.data.has(actualKey)) {\n        throw new DOMException('Key already exists', 'ConstraintError')\n      }\n      this.data.set(actualKey, data)\n      return actualKey\n    })\n  }\n\n  async put(data: any, key?: any): Promise<IDBRequest> {\n    return this._executeOperation(() => {\n      const actualKey = key || this._generateKey(data)\n      this.data.set(actualKey, data)\n      return actualKey\n    })\n  }\n\n  async delete(key: any): Promise<IDBRequest> {\n    return this._executeOperation(() => {\n      if (!this.data.has(key)) {\n        throw new DOMException('Key not found', 'NotFoundError')\n      }\n      this.data.delete(key)\n      return undefined\n    })\n  }\n\n  async get(key: any): Promise<IDBRequest> {\n    return this._executeOperation(() => {\n      return this.data.get(key)\n    })\n  }\n\n  async getAll(query?: any, count?: number): Promise<IDBRequest> {\n    return this._executeOperation(() => {\n      let results: any[] = []\n\n      if (query === undefined) {\n        results = Array.from(this.data.values())\n      } else {\n        // 简单的查询处理\n        results = Array.from(this.data.values()).filter(item => {\n          if (typeof query === 'string') {\n            return JSON.stringify(item).includes(query)\n          }\n          return true\n        })\n      }\n\n      if (count !== undefined) {\n        results = results.slice(0, count)\n      }\n\n      return results\n    })\n  }\n\n  async clear(): Promise<IDBRequest> {\n    return this._executeOperation(() => {\n      this.data.clear()\n      return undefined\n    })\n  }\n\n  index(name: string): MockIDBIndex {\n    const index = this.indexes.get(name)\n    if (!index) {\n      throw new DOMException('Index not found', 'NotFoundError')\n    }\n    return index\n  }\n\n  createIndex(name: string, keyPath: string | string[], options: IDBIndexParameters = {}): MockIDBIndex {\n    const index = new MockIDBIndexImpl(name, this, keyPath, options.multiEntry || false, options.unique || false)\n    this.indexes.set(name, index)\n    this.indexNames.push(name)\n    return index\n  }\n\n  deleteIndex(name: string): void {\n    this.indexes.delete(name)\n    this.indexNames = this.indexNames.filter(n => n !== name) as any\n  }\n\n  async openCursor(query?: any, direction?: IDBCursorDirection): Promise<IDBRequest> {\n    return this._executeOperation(() => {\n      return {\n        continue: jest.fn(),\n        advance: jest.fn(),\n        delete: jest.fn(),\n        update: jest.fn(),\n      }\n    })\n  }\n\n  private _generateKey(data: any): any {\n    if (this.keyPath) {\n      if (typeof this.keyPath === 'string') {\n        return data[this.keyPath]\n      } else {\n        // 处理复合键路径\n        return this.keyPath.map(key => data[key])\n      }\n    }\n    return crypto.randomUUID()\n  }\n\n  private async _executeOperation(operation: () => any): Promise<any> {\n    try {\n      const result = operation()\n      await new Promise(resolve => setTimeout(resolve, 0)) // 模拟异步操作\n      return result\n    } catch (error) {\n      throw error\n    }\n  }\n}\n\nclass MockIDBIndexImpl implements MockIDBIndex {\n  name: string\n  objectStore: MockIDBObjectStore\n  keyPath: string | string[]\n  multiEntry: boolean\n  unique: boolean\n\n  constructor(name: string, objectStore: MockIDBObjectStore, keyPath: string | string[], multiEntry: boolean, unique: boolean) {\n    this.name = name\n    this.objectStore = objectStore\n    this.keyPath = keyPath\n    this.multiEntry = multiEntry\n    this.unique = unique\n  }\n\n  async get(key: any): Promise<IDBRequest> {\n    return this._executeOperation(() => {\n      // 简化实现\n      return null\n    })\n  }\n\n  async getKey(key: any): Promise<IDBRequest> {\n    return this._executeOperation(() => {\n      return null\n    })\n  }\n\n  async getAll(query?: any, count?: number): Promise<IDBRequest> {\n    return this._executeOperation(() => {\n      return []\n    })\n  }\n\n  async getAllKeys(query?: any, count?: number): Promise<IDBRequest> {\n    return this._executeOperation(() => {\n      return []\n    })\n  }\n\n  async count(query?: any): Promise<IDBRequest> {\n    return this._executeOperation(() => {\n      return 0\n    })\n  }\n\n  async openCursor(query?: any, direction?: IDBCursorDirection): Promise<IDBRequest> {\n    return this._executeOperation(() => {\n      return null\n    })\n  }\n\n  async openKeyCursor(query?: any, direction?: IDBCursorDirection): Promise<IDBRequest> {\n    return this._executeOperation(() => {\n      return null\n    })\n  }\n\n  private async _executeOperation(operation: () => any): Promise<any> {\n    try {\n      const result = operation()\n      await new Promise(resolve => setTimeout(resolve, 0))\n      return result\n    } catch (error) {\n      throw error\n    }\n  }\n}\n\nclass MockIDBDatabaseImpl implements MockIDBDatabase {\n  private objectStores: Map<string, MockIDBObjectStore> = new Map()\n\n  name: string\n  version: number\n  objectStoreNames: DOMStringList\n\n  constructor(name: string, version: number) {\n    this.name = name\n    this.version = version\n    this.objectStoreNames = [] as any\n  }\n\n  createObjectStore(name: string, options: IDBObjectStoreParameters = {}): MockIDBObjectStore {\n    if (this.objectStores.has(name)) {\n      throw new DOMException('Object store already exists', 'ConstraintError')\n    }\n\n    const store = new MockIDBObjectStoreImpl(\n      name,\n      options.keyPath || null,\n      options.autoIncrement || false\n    )\n\n    this.objectStores.set(name, store)\n    this.objectStoreNames.push(name)\n\n    return store\n  }\n\n  deleteObjectStore(name: string): void {\n    if (!this.objectStores.has(name)) {\n      throw new DOMException('Object store not found', 'NotFoundError')\n    }\n\n    this.objectStores.delete(name)\n    this.objectStoreNames = this.objectStoreNames.filter(n => n !== name) as any\n  }\n\n  transaction(storeNames: string | string[], mode: IDBTransactionMode = 'readonly'): MockIDBTransaction {\n    const stores = Array.isArray(storeNames) ? storeNames : [storeNames]\n    const transaction = new MockIDBTransactionImpl(this, mode, stores)\n    return transaction\n  }\n\n  close(): void {\n    // 清理资源\n    this.objectStores.clear()\n  }\n}\n\nclass MockIDBTransactionImpl implements MockIDBTransaction {\n  db: MockIDBDatabase\n  mode: IDBTransactionMode\n  objectStoreNames: DOMStringList\n  error: DOMException | null = null\n  onabort: ((this: IDBTransaction, ev: Event) => any) | null = null\n  oncomplete: ((this: IDBTransaction, ev: Event) => any) | null = null\n  onerror: ((this: IDBTransaction, ev: Event) => any) | null = null\n\n  private committed = false\n  private aborted = false\n\n  constructor(db: MockIDBDatabase, mode: IDBTransactionMode, storeNames: string[]) {\n    this.db = db\n    this.mode = mode\n    this.objectStoreNames = storeNames as any\n  }\n\n  objectStore(name: string): MockIDBObjectStore {\n    // 这里应该返回一个在事务上下文中的对象存储\n    return (this.db as any).objectStores.get(name)\n  }\n\n  abort(): void {\n    if (this.committed) {\n      throw new DOMException('Transaction already committed', 'InvalidStateError')\n    }\n    this.aborted = true\n\n    if (this.onabort) {\n      this.onabort(new Event('abort'))\n    }\n  }\n\n  commit(): void {\n    if (this.aborted) {\n      throw new DOMException('Transaction already aborted', 'InvalidStateError')\n    }\n    this.committed = true\n\n    if (this.oncomplete) {\n      this.oncomplete(new Event('complete'))\n    }\n  }\n}\n\n// 全局IndexedDB工厂函数\nlet databases: Map<string, MockIDBDatabase> = new Map()\n\nexport function resetMockIndexedDB(): void {\n  databases.clear()\n}\n\nexport function createMockIDBFactory(): any {\n  return {\n    open: (name: string, version?: number): Promise<MockIDBOpenDBRequest> => {\n      return new Promise((resolve, reject) => {\n        const request = {\n          source: null,\n          readyState: 'pending',\n          result: null,\n          error: null,\n          onupgradeneeded: null,\n          onblocked: null,\n          onsuccess: null,\n          onerror: null,\n        } as MockIDBOpenDBRequest\n\n        setTimeout(() => {\n          try {\n            let db = databases.get(name)\n\n            if (!db) {\n              db = new MockIDBDatabaseImpl(name, version || 1)\n              databases.set(name, db)\n\n              if (request.onupgradeneeded) {\n                request.onupgradeneeded({\n                  type: 'upgradeneeded',\n                  oldVersion: 0,\n                  newVersion: version || 1,\n                  target: request,\n                } as any)\n              }\n            } else if (version && db.version !== version) {\n              throw new DOMException('Version mismatch', 'VersionError')\n            }\n\n            request.result = db\n            request.readyState = 'done'\n\n            if (request.onsuccess) {\n              request.onsuccess(new Event('success'))\n            }\n\n            resolve(request)\n          } catch (error) {\n            request.error = error\n            request.readyState = 'done'\n\n            if (request.onerror) {\n              request.onerror(new Event('error'))\n            }\n\n            reject(error)\n          }\n        }, 10)\n      })\n    },\n\n    deleteDatabase: (name: string): Promise<MockIDBOpenDBRequest> => {\n      return new Promise((resolve, reject) => {\n        const request = {\n          source: null,\n          readyState: 'pending',\n          result: undefined,\n          error: null,\n          onsuccess: null,\n          onerror: null,\n        } as MockIDBOpenDBRequest\n\n        setTimeout(() => {\n          try {\n            databases.delete(name)\n            request.readyState = 'done'\n\n            if (request.onsuccess) {\n              request.onsuccess(new Event('success'))\n            }\n\n            resolve(request)\n          } catch (error) {\n            request.error = error\n            request.readyState = 'done'\n\n            if (request.onerror) {\n              request.onerror(new Event('error'))\n            }\n\n            reject(error)\n          }\n        }, 10)\n      })\n    },\n\n    cmp: (first: any, second: any): number => {\n      if (first < second) return -1\n      if (first > second) return 1\n      return 0\n    },\n  }\n}\n\n// 设置全局IndexedDB\nObject.defineProperty(window, 'indexedDB', {\n  value: createMockIDBFactory(),\n  writable: true,\n})"],"version":3}
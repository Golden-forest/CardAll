{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\services\\multilevel-cache-service.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\__tests__\\services\\multilevel-cache-service.test.ts"],"sourcesContent":["/**\r\n * MultilevelCacheService 单元测试\r\n * 测试多级缓存系统的核心功能\r\n */\r\n\r\nimport { describe, test, expect, jest, beforeEach, afterEach } from '@jest/globals'\r\nimport { MultilevelCacheService, CacheLevel, CardCacheEnhanced } from '../../services/multilevel-cache-service'\r\nimport { AdvancedCacheManager, CacheStrategy } from '../../services/advanced-cache'\r\nimport { performanceTester, memoryLeakDetector, mockFactories } from '../utils/test-utils'\r\n\r\n// 模拟 AdvancedCacheManager\r\njest.mock('../../services/advanced-cache', () => {\r\n  return {\r\n    AdvancedCacheManager: jest.fn().mockImplementation(() => ({\r\n      get: jest.fn(),\r\n      set: jest.fn(),\r\n      delete: jest.fn(),\r\n      clear: jest.fn(),\r\n      getStats: jest.fn(() => ({\r\n        memoryUsage: 1024 * 1024, // 1MB\r\n        compressionRatio: 0.7\r\n      })),\r\n      stop: jest.fn()\r\n    })),\r\n    CacheConfig: {},\r\n    CacheStrategy: {\r\n      LRU: 'lru',\r\n      LFU: 'lfu', \r\n      ADAPTIVE: 'adaptive'\r\n    },\r\n    CacheStats: {}\r\n  }\r\n})\r\n\r\ndescribe('MultilevelCacheService', () => {\r\n  let cacheService: MultilevelCacheService\r\n  let mockAdvancedCache: jest.Mocked<AdvancedCacheManager>\r\n\r\n  beforeEach(() => {\r\n    // 创建新的缓存服务实例\r\n    cacheService = new MultilevelCacheService({\r\n      l1: { maxSize: 100, ttl: 5000, strategy: CacheStrategy.LRU },\r\n      l2: { maxSize: 1000, ttl: 30000, compressionEnabled: true },\r\n      l3: { enabled: true, predictionWindow: 60, warmupThreshold: 0.8 },\r\n      adaptive: { learningRate: 0.1, predictionAccuracy: 0.7, autoOptimization: true, memoryPressureThreshold: 0.8 }\r\n    })\r\n\r\n    // 获取模拟的 AdvancedCacheManager\r\n    mockAdvancedCache = (cacheService as any).l2Cache as jest.Mocked<AdvancedCacheManager>\r\n\r\n    // 重置测试工具\r\n    performanceTester.reset()\r\n    memoryLeakDetector.clearSnapshots()\r\n\r\n    // 清理所有模拟\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  afterEach(() => {\r\n    // 停止缓存服务\r\n    cacheService.stop()\r\n  })\r\n\r\n  // ============================================================================\r\n  // 基础功能测试\r\n  // ============================================================================\r\n\r\n  describe('基础缓存操作', () => {\r\n    test('应该能够设置和获取数据', async () => {\r\n      const key = 'test-key'\r\n      const data = { value: 'test-data', timestamp: Date.now() }\r\n\r\n      // 设置数据\r\n      await performanceTester.measure('cache_set', () =>\r\n        cacheService.set(key, data)\r\n      )\r\n\r\n      // 获取数据\r\n      const result = await performanceTester.measure('cache_get', () =>\r\n        cacheService.get(key)\r\n      )\r\n\r\n      expect(result).toEqual(data)\r\n    })\r\n\r\n    test('应该能够删除数据', async () => {\r\n      const key = 'test-key'\r\n      const data = { value: 'test-data' }\r\n\r\n      // 设置数据\r\n      await cacheService.set(key, data)\r\n\r\n      // 删除数据\r\n      const deleted = await performanceTester.measure('cache_delete', () =>\r\n        cacheService.delete(key)\r\n      )\r\n\r\n      expect(deleted).toBe(true)\r\n\r\n      // 验证数据已删除\r\n      const result = await cacheService.get(key)\r\n      expect(result).toBeNull()\r\n    })\r\n\r\n    test('应该能够批量获取数据', async () => {\r\n      const entries = new Map([\r\n        ['key1', { value: 'data1' }],\r\n        ['key2', { value: 'data2' }],\r\n        ['key3', { value: 'data3' }]\r\n      ])\r\n\r\n      // 批量设置\r\n      await cacheService.setBatch(entries)\r\n\r\n      // 批量获取\r\n      const results = await performanceTester.measure('cache_batch_get', () =>\r\n        cacheService.getBatch(['key1', 'key2', 'key3'])\r\n      )\r\n\r\n      expect(results.size).toBe(3)\r\n      expect(results.get('key1')).toEqual({ value: 'data1' })\r\n      expect(results.get('key2')).toEqual({ value: 'data2' })\r\n      expect(results.get('key3')).toEqual({ value: 'data3' })\r\n    })\r\n\r\n    test('应该能够批量设置数据', async () => {\r\n      const entries = new Map([\r\n        ['batch1', { value: 'batch-data-1' }],\r\n        ['batch2', { value: 'batch-data-2' }]\r\n      ])\r\n\r\n      await performanceTester.measure('cache_batch_set', () =>\r\n        cacheService.setBatch(entries)\r\n      )\r\n\r\n      // 验证数据已设置\r\n      const result1 = await cacheService.get('batch1')\r\n      const result2 = await cacheService.get('batch2')\r\n\r\n      expect(result1).toEqual({ value: 'batch-data-1' })\r\n      expect(result2).toEqual({ value: 'batch-data-2' })\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 多级缓存测试\r\n  // ============================================================================\r\n\r\n  describe('多级缓存层次', () => {\r\n    test('应该正确使用L1缓存', async () => {\r\n      const key = 'l1-test-key'\r\n      const data = { level: 'l1', value: 'data' }\r\n\r\n      // 设置数据到L1缓存\r\n      await cacheService.set(key, data, { level: CacheLevel.L1_MEMORY })\r\n\r\n      // 获取数据（应该从L1缓存）\r\n      const result = await cacheService.get(key, { level: CacheLevel.L1_MEMORY })\r\n\r\n      expect(result).toEqual(data)\r\n\r\n      // 验证性能指标\r\n      const metrics = cacheService.getMetrics()\r\n      expect(metrics.byLevel[CacheLevel.L1_MEMORY].hits).toBeGreaterThan(0)\r\n    })\r\n\r\n    test('应该正确使用L2缓存', async () => {\r\n      const key = 'l2-test-key'\r\n      const data = { level: 'l2', value: 'data' }\r\n\r\n      // 模拟L2缓存行为\r\n      mockAdvancedCache.get.mockResolvedValue(data)\r\n      mockAdvancedCache.set.mockResolvedValue()\r\n\r\n      // 设置数据到L2缓存\r\n      await cacheService.set(key, data, { level: CacheLevel.L2_PERSISTENT })\r\n\r\n      // 获取数据（应该从L2缓存）\r\n      const result = await cacheService.get(key, { level: CacheLevel.L2_PERSISTENT })\r\n\r\n      expect(result).toEqual(data)\r\n      expect(mockAdvancedCache.get).toHaveBeenCalledWith(key)\r\n    })\r\n\r\n    test('应该正确使用L3缓存', async () => {\r\n      const key = 'l3-test-key'\r\n      const data = { level: 'l3', value: 'data' }\r\n\r\n      // 设置数据到L3缓存\r\n      await cacheService.set(key, data, { level: CacheLevel.L3_PREDICTIVE })\r\n\r\n      // 获取数据（应该从L3缓存）\r\n      const result = await cacheService.get(key, { level: CacheLevel.L3_PREDICTIVE })\r\n\r\n      expect(result).toEqual(data)\r\n\r\n      // 验证L3缓存指标\r\n      const metrics = cacheService.getMetrics()\r\n      expect(metrics.byLevel[CacheLevel.L3_PREDICTIVE].hits).toBeGreaterThan(0)\r\n    })\r\n\r\n    test('应该支持多级缓存查找', async () => {\r\n      const key = 'multi-level-key'\r\n      const data = { value: 'multi-level-data' }\r\n\r\n      // 模拟数据只存在于L2缓存\r\n      mockAdvancedCache.get.mockResolvedValue(data)\r\n\r\n      // 从L1查找，应该自动降级到L2\r\n      const result = await cacheService.get(key)\r\n\r\n      expect(result).toEqual(data)\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 缓存策略测试\r\n  // ============================================================================\r\n\r\n  describe('缓存策略', () => {\r\n    test('应该智能确定最佳缓存级别', async () => {\r\n      // 关键数据应该放在L1\r\n      const criticalData = { type: 'critical', value: 'important' }\r\n      await cacheService.set('critical-key', criticalData)\r\n\r\n      // 大数据应该放在L2\r\n      const largeData = { type: 'large', data: 'x'.repeat(2 * 1024 * 1024) } // 2MB\r\n      await cacheService.set('large-key', largeData)\r\n\r\n      // 验证策略选择\r\n      const metrics = cacheService.getMetrics()\r\n      expect(metrics.totalHits).toBeGreaterThanOrEqual(0)\r\n    })\r\n\r\n    test('应该处理TTL过期', async () => {\r\n      const key = 'ttl-test-key'\r\n      const data = { value: 'ttl-data' }\r\n\r\n      // 设置很短的TTL\r\n      await cacheService.set(key, data, { ttl: 100 }) // 100ms\r\n\r\n      // 立即获取，应该存在\r\n      const result1 = await cacheService.get(key)\r\n      expect(result1).toEqual(data)\r\n\r\n      // 等待过期\r\n      await new Promise(resolve => setTimeout(resolve, 150))\r\n\r\n      // 过期后应该返回null\r\n      const result2 = await cacheService.get(key)\r\n      expect(result2).toBeNull()\r\n    })\r\n\r\n    test('应该处理缓存淘汰', async () => {\r\n      // 填满L1缓存\r\n      const l1Config = (cacheService as any).config.l1\r\n      for (let i = 0; i < l1Config.maxSize + 10; i++) {\r\n        await cacheService.set(`key-${i}`, { value: `data-${i}` })\r\n      }\r\n\r\n      // 验证缓存大小受到限制\r\n      const stats = cacheService.getStats()\r\n      expect(stats.l1.size).toBeLessThanOrEqual(l1Config.maxSize)\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 批量操作测试\r\n  // ============================================================================\r\n\r\n  describe('批量操作优化', () => {\r\n    test('应该高效处理批量操作', async () => {\r\n      const batchSize = 100\r\n      const entries = new Map()\r\n\r\n      for (let i = 0; i < batchSize; i++) {\r\n        entries.set(`batch-key-${i}`, { value: `batch-value-${i}` })\r\n      }\r\n\r\n      // 批量设置性能测试\r\n      const setResult = await performanceTester.measure('large_batch_set', () =>\r\n        cacheService.setBatch(entries)\r\n      )\r\n\r\n      // 批量获取性能测试\r\n      const getResult = await performanceTester.measure('large_batch_get', () =>\r\n        cacheService.getBatch(Array.from(entries.keys()))\r\n      )\r\n\r\n      expect(getResult.size).toBe(batchSize)\r\n      \r\n      // 验证性能\r\n      const setStats = performanceTester.getStats('large_batch_set')\r\n      const getStats = performanceTester.getStats('large_batch_get')\r\n      \r\n      expect(setStats!.avg).toBeLessThan(1000) // 1秒内\r\n      expect(getStats!.avg).toBeLessThan(500)  // 500ms内\r\n    })\r\n\r\n    test('应该正确处理部分失败的批量操作', async () => {\r\n      const entries = new Map([\r\n        ['valid-key', { value: 'valid-data' }],\r\n        ['error-key', null as any] // 故意提供无效数据\r\n      ])\r\n\r\n      // 应该不会抛出错误\r\n      await expect(cacheService.setBatch(entries)).resolves.not.toThrow()\r\n\r\n      // 有效数据应该被设置\r\n      const validResult = await cacheService.get('valid-key')\r\n      expect(validResult).toEqual({ value: 'valid-data' })\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 访问模式分析测试\r\n  // ============================================================================\r\n\r\n  describe('访问模式分析', () => {\r\n    test('应该分析访问模式', async () => {\r\n      const key = 'pattern-test-key'\r\n      const data = { value: 'pattern-data' }\r\n\r\n      // 模拟频繁访问\r\n      for (let i = 0; i < 10; i++) {\r\n        await cacheService.get(key)\r\n        await new Promise(resolve => setTimeout(resolve, 50))\r\n      }\r\n\r\n      // 验证模式分析\r\n      const metrics = cacheService.getMetrics()\r\n      expect(metrics.totalHits).toBeGreaterThan(0)\r\n    })\r\n\r\n    test('应该预测访问模式', async () => {\r\n      const key = 'predictive-key'\r\n      const data = { value: 'predictive-data' }\r\n\r\n      // 设置数据\r\n      await cacheService.set(key, data)\r\n\r\n      // 模拟顺序访问模式\r\n      for (let i = 0; i < 5; i++) {\r\n        await cacheService.get(key)\r\n        await new Promise(resolve => setTimeout(resolve, 100))\r\n      }\r\n\r\n      // 验证预测功能（内部状态检查）\r\n      const stats = cacheService.getStats()\r\n      expect(stats.overall.totalHits).toBeGreaterThanOrEqual(0)\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 性能监控测试\r\n  // ============================================================================\r\n\r\n  describe('性能监控', () => {\r\n    test('应该跟踪缓存命中率', async () => {\r\n      const key = 'hitrate-test-key'\r\n      const data = { value: 'hitrate-data' }\r\n\r\n      // 缓存未命中\r\n      await cacheService.get(key)\r\n      \r\n      // 设置数据\r\n      await cacheService.set(key, data)\r\n\r\n      // 缓存命中\r\n      await cacheService.get(key)\r\n\r\n      // 验证命中率\r\n      const metrics = cacheService.getMetrics()\r\n      expect(metrics.hitRate).toBeGreaterThan(0)\r\n      expect(metrics.totalHits).toBe(1)\r\n      expect(metrics.totalMisses).toBe(1)\r\n    })\r\n\r\n    test('应该监控访问时间', async () => {\r\n      const key = 'timing-test-key'\r\n      const data = { value: 'timing-data' }\r\n\r\n      await cacheService.set(key, data)\r\n\r\n      // 多次访问以收集统计数据\r\n      for (let i = 0; i < 5; i++) {\r\n        await cacheService.get(key)\r\n      }\r\n\r\n      const metrics = cacheService.getMetrics()\r\n      expect(metrics.averageAccessTime).toBeGreaterThan(0)\r\n    })\r\n\r\n    test('应该按实体类型统计', async () => {\r\n      // 测试不同类型的缓存访问\r\n      await cacheService.get('card:123')\r\n      await cacheService.get('folder:456')\r\n      await cacheService.get('tag:789')\r\n      await cacheService.get('search:query')\r\n\r\n      const metrics = cacheService.getMetrics()\r\n      \r\n      expect(metrics.byEntity.cards).toBeDefined()\r\n      expect(metrics.byEntity.folders).toBeDefined()\r\n      expect(metrics.byEntity.tags).toBeDefined()\r\n      expect(metrics.byEntity.queries).toBeDefined()\r\n    })\r\n\r\n    test('应该提供详细的统计信息', async () => {\r\n      // 执行一些操作\r\n      await cacheService.set('stats-key', { value: 'stats-data' })\r\n      await cacheService.get('stats-key')\r\n\r\n      const stats = cacheService.getStats()\r\n      \r\n      expect(stats.l1).toBeDefined()\r\n      expect(stats.l2).toBeDefined()\r\n      expect(stats.l3).toBeDefined()\r\n      expect(stats.overall).toBeDefined()\r\n      \r\n      expect(stats.l1.size).toBeGreaterThanOrEqual(0)\r\n      expect(stats.l1.maxSize).toBeGreaterThan(0)\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 预测性加载测试\r\n  // ============================================================================\r\n\r\n  describe('预测性加载', () => {\r\n    test('应该支持预测性预加载', async () => {\r\n      const key = 'predictive-key'\r\n      const data = { value: 'predictive-data' }\r\n\r\n      // 设置数据并启用预测性加载\r\n      await cacheService.set(key, data, { skipPredictiveLoad: false })\r\n\r\n      // 验证预测性加载被触发（通过内部状态）\r\n      const metrics = cacheService.getMetrics()\r\n      expect(metrics.totalHits).toBeGreaterThanOrEqual(0)\r\n    })\r\n\r\n    test('应该支持缓存预热', async () => {\r\n      // 模拟数据提供者\r\n      const dataProvider = jest.fn()\r\n        .mockResolvedValueOnce({ value: 'warmup-data-1' })\r\n        .mockResolvedValueOnce({ value: 'warmup-data-2' })\r\n\r\n      // 执行缓存预热\r\n      await cacheService.warmup(dataProvider)\r\n\r\n      // 验证预热调用\r\n      expect(dataProvider).toHaveBeenCalled()\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 内存管理测试\r\n  // ============================================================================\r\n\r\n  describe('内存管理', () => {\r\n    test('应该监控内存使用', async () => {\r\n      // 设置一些数据\r\n      for (let i = 0; i < 50; i++) {\r\n        await cacheService.set(`memory-key-${i}`, { value: `data-${i}` })\r\n      }\r\n\r\n      const metrics = cacheService.getMetrics()\r\n      expect(metrics.memoryUsage).toBeGreaterThan(0)\r\n    })\r\n\r\n    test('应该处理内存压力', async () => {\r\n      // 模拟大量数据以触发内存压力\r\n      const largeDataSets = []\r\n      for (let i = 0; i < 200; i++) {\r\n        largeDataSets.push({\r\n          key: `pressure-key-${i}`,\r\n          data: { value: 'x'.repeat(1024) } // 1KB 数据\r\n        })\r\n      }\r\n\r\n      const entries = new Map(largeDataSets.map(item => [item.key, item.data]))\r\n      await cacheService.setBatch(entries)\r\n\r\n      // 验证服务仍然正常工作\r\n      const result = await cacheService.get('pressure-key-0')\r\n      expect(result).toEqual({ value: 'x'.repeat(1024) })\r\n    })\r\n\r\n    test('应该自动清理过期缓存', async () => {\r\n      const key = 'cleanup-key'\r\n      const data = { value: 'cleanup-data' }\r\n\r\n      // 设置很短的TTL\r\n      await cacheService.set(key, data, { ttl: 50 })\r\n\r\n      // 等待过期并触发清理\r\n      await new Promise(resolve => setTimeout(resolve, 100))\r\n\r\n      // 手动触发清理\r\n      await cacheService.clear()\r\n\r\n      // 验证清理效果\r\n      const result = await cacheService.get(key)\r\n      expect(result).toBeNull()\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 错误处理测试\r\n  // ============================================================================\r\n\r\n  describe('错误处理', () => {\r\n    test('应该优雅处理缓存错误', async () => {\r\n      // 模拟L2缓存错误\r\n      mockAdvancedCache.get.mockRejectedValueOnce(new Error('Cache error'))\r\n\r\n      const key = 'error-test-key'\r\n      const data = { value: 'error-data' }\r\n\r\n      // 设置数据\r\n      await cacheService.set(key, data)\r\n\r\n      // 获取数据（应该降级处理）\r\n      const result = await cacheService.get(key)\r\n      \r\n      // 根据实现，可能返回数据或null，但不应抛出错误\r\n      expect(result).toBeDefined()\r\n    })\r\n\r\n    test('应该处理无效输入', async () => {\r\n      // 测试空键\r\n      await expect(cacheService.set('', { value: 'data' })).resolves.not.toThrow()\r\n\r\n      // 测试空数据\r\n      await expect(cacheService.set('key', null as any)).resolves.not.toThrow()\r\n\r\n      // 测试获取空键\r\n      const result = await cacheService.get('')\r\n      expect(result).toBeNull()\r\n    })\r\n\r\n    test('应该处理并发访问', async () => {\r\n      const key = 'concurrent-key'\r\n      const data = { value: 'concurrent-data' }\r\n\r\n      // 并发设置和获取\r\n      const promises = []\r\n      for (let i = 0; i < 10; i++) {\r\n        promises.push(cacheService.set(`${key}-${i}`, { ...data, id: i }))\r\n        promises.push(cacheService.get(key))\r\n      }\r\n\r\n      await expect(Promise.all(promises)).resolves.not.toThrow()\r\n    })\r\n  })\r\n\r\n  // ============================================================================\r\n  // 资源清理测试\r\n  // ============================================================================\r\n\r\n  describe('资源清理', () => {\r\n    test('应该正确清理资源', () => {\r\n      // 设置一些数据\r\n      cacheService.stop()\r\n\r\n      // 验证定时器已停止\r\n      const service = cacheService as any\r\n      expect(service.cleanupTimer).toBeUndefined()\r\n      expect(service.predictionTimer).toBeUndefined()\r\n    })\r\n\r\n    test('应该能够清空所有缓存', async () => {\r\n      // 设置一些数据\r\n      await cacheService.set('clear-test-1', { value: 'data1' })\r\n      await cacheService.set('clear-test-2', { value: 'data2' })\r\n\r\n      // 清空缓存\r\n      await cacheService.clear()\r\n\r\n      // 验证数据已清空\r\n      const result1 = await cacheService.get('clear-test-1')\r\n      const result2 = await cacheService.get('clear-test-2')\r\n\r\n      expect(result1).toBeNull()\r\n      expect(result2).toBeNull()\r\n    })\r\n\r\n    test('应该重置性能指标', async () => {\r\n      // 执行一些操作\r\n      await cacheService.set('reset-test', { value: 'data' })\r\n      await cacheService.get('reset-test')\r\n\r\n      // 清空缓存（应该重置指标）\r\n      await cacheService.clear()\r\n\r\n      const metrics = cacheService.getMetrics()\r\n      expect(metrics.totalHits).toBe(0)\r\n      expect(metrics.totalMisses).toBe(0)\r\n    })\r\n  })\r\n})\r\n\r\n// ============================================================================\r\n// CardCacheEnhanced 测试\r\n// ============================================================================\r\n\r\ndescribe('CardCacheEnhanced', () => {\r\n  let cardCache: CardCacheEnhanced\r\n  let mockCacheService: MultilevelCacheService\r\n\r\n  beforeEach(() => {\r\n    mockCacheService = new MultilevelCacheService()\r\n    cardCache = new CardCacheEnhanced(mockCacheService)\r\n  })\r\n\r\n  afterEach(() => {\r\n    mockCacheService.stop()\r\n  })\r\n\r\n  test('应该提供卡片专用的缓存方法', async () => {\r\n    const cardId = 'test-card-id'\r\n    const cardData = mockFactories.createMockCard({ id: cardId })\r\n\r\n    // 测试设置和获取卡片\r\n    await cardCache.setCard(cardId, cardData)\r\n    const result = await cardCache.getCard(cardId)\r\n\r\n    expect(result).toEqual(cardData)\r\n  })\r\n\r\n  test('应该管理文件夹卡片缓存', async () => {\r\n    const folderId = 'test-folder-id'\r\n    const cards = [\r\n      mockFactories.createMockCard(),\r\n      mockFactories.createMockCard()\r\n    ]\r\n\r\n    // 设置文件夹卡片缓存\r\n    await cardCache.setCardsByFolder(folderId, cards)\r\n    const result = await cardCache.getCardsByFolder(folderId)\r\n\r\n    expect(result).toEqual(cards)\r\n  })\r\n\r\n  test('应该管理搜索结果缓存', async () => {\r\n    const query = 'test query'\r\n    const searchResults = [\r\n      mockFactories.createMockCard(),\r\n      mockFactories.createMockCard()\r\n    ]\r\n\r\n    // 缓存搜索结果\r\n    await cardCache.cacheSearchResults(query, searchResults)\r\n    const result = await cardCache.searchCards(query)\r\n\r\n    expect(result).toEqual(searchResults)\r\n  })\r\n\r\n  test('应该提供缓存失效方法', async () => {\r\n    const cardId = 'test-card-id'\r\n    const cardData = mockFactories.createMockCard({ id: cardId })\r\n\r\n    // 设置卡片缓存\r\n    await cardCache.setCard(cardId, cardData)\r\n\r\n    // 失效缓存\r\n    await cardCache.invalidateCard(cardId)\r\n\r\n    // 验证缓存已失效\r\n    const result = await cardCache.getCard(cardId)\r\n    expect(result).toBeNull()\r\n  })\r\n\r\n  test('应该支持批量失效', async () => {\r\n    const folderId = 'test-folder-id'\r\n\r\n    // 设置文件夹缓存\r\n    await cardCache.setCardsByFolder(folderId, [mockFactories.createMockCard()])\r\n\r\n    // 失效文件夹缓存\r\n    await cardCache.invalidateFolder(folderId)\r\n\r\n    // 验证缓存已失效\r\n    const result = await cardCache.getCardsByFolder(folderId)\r\n    expect(result).toBeNull()\r\n  })\r\n})"],"version":3}
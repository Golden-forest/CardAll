58c41af33959b23c6c7ca091cd9ec2c9
"use strict";

// Jest ÂÖ®Â±ÄÊµãËØïËÆæÁΩÆ

// Ê®°Êãü import.meta.env
Object.defineProperty(global, 'import', {
  value: {
    meta: {
      env: {
        VITE_SUPABASE_URL: 'https://test-project.supabase.co',
        VITE_SUPABASE_ANON_KEY: 'test-anon-key',
        NODE_ENV: 'test'
      }
    }
  },
  writable: true
});

// Ê®°Êãü localStorage
const localStorageMock = (() => {
  let store = {};
  return {
    getItem(key) {
      return store[key] || null;
    },
    setItem(key, value) {
      store[key] = String(value);
    },
    removeItem(key) {
      delete store[key];
    },
    clear() {
      store = {};
    },
    length: 0,
    key(index) {
      return Object.keys(store)[index] || null;
    }
  };
})();
Object.defineProperty(window, 'localStorage', {
  value: localStorageMock
});

// ‰ΩøÁî® fake-indexeddb Ê®°Êãü IndexedDB
const FIDB = require('fake-indexeddb');
const FDBKeyRange = require('fake-indexeddb/lib/FDBKeyRange');

// ËÆæÁΩÆÂÖ®Â±Ä IndexedDB
global.indexedDB = FIDB;
global.IDBKeyRange = FDBKeyRange;
global.IDBTransaction = FIDB.IDBTransaction;
global.IDBDatabase = FIDB.IDBDatabase;
global.IDBObjectStore = FIDB.IDBObjectStore;
global.IDBCursor = FIDB.IDBCursor;
global.IDBCursorWithValue = FIDB.IDBCursorWithValue;
global.IDBOpenDBRequest = FIDB.IDBOpenDBRequest;
global.IDBRequest = FIDB.IDBRequest;
global.IDBFactory = FIDB.IDBFactory;
Object.defineProperty(window, 'indexedDB', {
  value: FIDB
});

// Ê®°Êãü crypto.randomUUID
Object.defineProperty(crypto, 'randomUUID', {
  value: () => {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {
      const r = Math.random() * 16 | 0;
      const v = c === 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  }
});

// Ê®°Êãü performance API
Object.defineProperty(window, 'performance', {
  value: {
    now: () => Date.now(),
    mark: name => {},
    measure: (name, startMark, endMark) => {},
    clearMarks: name => {},
    clearMeasures: name => {},
    getEntriesByType: type => [],
    getEntriesByName: (name, type) => [],
    toJSON: () => ({})
  }
});

// Ê®°Êãü requestAnimationFrame
Object.defineProperty(window, 'requestAnimationFrame', {
  value: callback => {
    return setTimeout(callback, 16);
  }
});
Object.defineProperty(window, 'cancelAnimationFrame', {
  value: id => {
    clearTimeout(id);
  }
});

// ÂÖ®Â±ÄÊµãËØïËæÖÂä©ÂáΩÊï∞
global.testHelpers = {
  wait: ms => new Promise(resolve => setTimeout(resolve, ms)),
  createEvent: (type, data = {}) => {
    return new Event(type, data);
  },
  createError: (message, code = 'UNKNOWN') => {
    const error = new Error(message);
    Object.assign(error, {
      code
    });
    return error;
  },
  clearAllMocks: () => {
    jest.clearAllMocks();
  },
  resetAllMocks: () => {
    jest.resetAllMocks();
  }
};

// ÂÖ®Â±ÄÊµãËØïÂâçËÆæÁΩÆ
beforeAll(() => {
  console.log('üß™ Jest ÊµãËØïÁéØÂ¢ÉÂ∑≤ÂàùÂßãÂåñ');
});

// ÊØè‰∏™ÊµãËØïÂâçÁöÑËÆæÁΩÆ
beforeEach(() => {
  localStorage.clear();
  jest.clearAllMocks();
});

// ÊâÄÊúâÊµãËØïÂêéÁöÑÊ∏ÖÁêÜ
afterAll(() => {
  console.log('üß™ Jest ÊµãËØïÁéØÂ¢ÉÂ∑≤Ê∏ÖÁêÜ');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdsb2JhbCIsInZhbHVlIiwibWV0YSIsImVudiIsIlZJVEVfU1VQQUJBU0VfVVJMIiwiVklURV9TVVBBQkFTRV9BTk9OX0tFWSIsIk5PREVfRU5WIiwid3JpdGFibGUiLCJsb2NhbFN0b3JhZ2VNb2NrIiwic3RvcmUiLCJnZXRJdGVtIiwia2V5Iiwic2V0SXRlbSIsIlN0cmluZyIsInJlbW92ZUl0ZW0iLCJjbGVhciIsImxlbmd0aCIsImluZGV4Iiwia2V5cyIsIndpbmRvdyIsIkZJREIiLCJyZXF1aXJlIiwiRkRCS2V5UmFuZ2UiLCJpbmRleGVkREIiLCJJREJLZXlSYW5nZSIsIklEQlRyYW5zYWN0aW9uIiwiSURCRGF0YWJhc2UiLCJJREJPYmplY3RTdG9yZSIsIklEQkN1cnNvciIsIklEQkN1cnNvcldpdGhWYWx1ZSIsIklEQk9wZW5EQlJlcXVlc3QiLCJJREJSZXF1ZXN0IiwiSURCRmFjdG9yeSIsImNyeXB0byIsInJlcGxhY2UiLCJjIiwiciIsIk1hdGgiLCJyYW5kb20iLCJ2IiwidG9TdHJpbmciLCJub3ciLCJEYXRlIiwibWFyayIsIm5hbWUiLCJtZWFzdXJlIiwic3RhcnRNYXJrIiwiZW5kTWFyayIsImNsZWFyTWFya3MiLCJjbGVhck1lYXN1cmVzIiwiZ2V0RW50cmllc0J5VHlwZSIsInR5cGUiLCJnZXRFbnRyaWVzQnlOYW1lIiwidG9KU09OIiwiY2FsbGJhY2siLCJzZXRUaW1lb3V0IiwiaWQiLCJjbGVhclRpbWVvdXQiLCJ0ZXN0SGVscGVycyIsIndhaXQiLCJtcyIsIlByb21pc2UiLCJyZXNvbHZlIiwiY3JlYXRlRXZlbnQiLCJkYXRhIiwiRXZlbnQiLCJjcmVhdGVFcnJvciIsIm1lc3NhZ2UiLCJjb2RlIiwiZXJyb3IiLCJFcnJvciIsImFzc2lnbiIsImNsZWFyQWxsTW9ja3MiLCJqZXN0IiwicmVzZXRBbGxNb2NrcyIsImJlZm9yZUFsbCIsImNvbnNvbGUiLCJsb2ciLCJiZWZvcmVFYWNoIiwibG9jYWxTdG9yYWdlIiwiYWZ0ZXJBbGwiXSwic291cmNlcyI6WyJqZXN0LnNldHVwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEplc3Qg5YWo5bGA5rWL6K+V6K6+572uXHJcblxyXG4vLyDmqKHmi58gaW1wb3J0Lm1ldGEuZW52XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShnbG9iYWwsICdpbXBvcnQnLCB7XHJcbiAgdmFsdWU6IHtcclxuICAgIG1ldGE6IHtcclxuICAgICAgZW52OiB7XHJcbiAgICAgICAgVklURV9TVVBBQkFTRV9VUkw6ICdodHRwczovL3Rlc3QtcHJvamVjdC5zdXBhYmFzZS5jbycsXHJcbiAgICAgICAgVklURV9TVVBBQkFTRV9BTk9OX0tFWTogJ3Rlc3QtYW5vbi1rZXknLFxyXG4gICAgICAgIE5PREVfRU5WOiAndGVzdCdcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0sXHJcbiAgd3JpdGFibGU6IHRydWVcclxufSlcclxuXHJcbi8vIOaooeaLnyBsb2NhbFN0b3JhZ2VcclxuY29uc3QgbG9jYWxTdG9yYWdlTW9jayA9ICgoKSA9PiB7XHJcbiAgbGV0IHN0b3JlID0ge31cclxuICByZXR1cm4ge1xyXG4gICAgZ2V0SXRlbShrZXkpIHtcclxuICAgICAgcmV0dXJuIHN0b3JlW2tleV0gfHwgbnVsbFxyXG4gICAgfSxcclxuICAgIHNldEl0ZW0oa2V5LCB2YWx1ZSkge1xyXG4gICAgICBzdG9yZVtrZXldID0gU3RyaW5nKHZhbHVlKVxyXG4gICAgfSxcclxuICAgIHJlbW92ZUl0ZW0oa2V5KSB7XHJcbiAgICAgIGRlbGV0ZSBzdG9yZVtrZXldXHJcbiAgICB9LFxyXG4gICAgY2xlYXIoKSB7XHJcbiAgICAgIHN0b3JlID0ge31cclxuICAgIH0sXHJcbiAgICBsZW5ndGg6IDAsXHJcbiAgICBrZXkoaW5kZXgpIHtcclxuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHN0b3JlKVtpbmRleF0gfHwgbnVsbFxyXG4gICAgfVxyXG4gIH1cclxufSkoKVxyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2xvY2FsU3RvcmFnZScsIHtcclxuICB2YWx1ZTogbG9jYWxTdG9yYWdlTW9ja1xyXG59KVxyXG5cclxuLy8g5L2/55SoIGZha2UtaW5kZXhlZGRiIOaooeaLnyBJbmRleGVkREJcclxuY29uc3QgRklEQiA9IHJlcXVpcmUoJ2Zha2UtaW5kZXhlZGRiJylcclxuY29uc3QgRkRCS2V5UmFuZ2UgPSByZXF1aXJlKCdmYWtlLWluZGV4ZWRkYi9saWIvRkRCS2V5UmFuZ2UnKVxyXG5cclxuLy8g6K6+572u5YWo5bGAIEluZGV4ZWREQlxyXG5nbG9iYWwuaW5kZXhlZERCID0gRklEQlxyXG5nbG9iYWwuSURCS2V5UmFuZ2UgPSBGREJLZXlSYW5nZVxyXG5nbG9iYWwuSURCVHJhbnNhY3Rpb24gPSBGSURCLklEQlRyYW5zYWN0aW9uXHJcbmdsb2JhbC5JREJEYXRhYmFzZSA9IEZJREIuSURCRGF0YWJhc2VcclxuZ2xvYmFsLklEQk9iamVjdFN0b3JlID0gRklEQi5JREJPYmplY3RTdG9yZVxyXG5nbG9iYWwuSURCQ3Vyc29yID0gRklEQi5JREJDdXJzb3JcclxuZ2xvYmFsLklEQkN1cnNvcldpdGhWYWx1ZSA9IEZJREIuSURCQ3Vyc29yV2l0aFZhbHVlXHJcbmdsb2JhbC5JREJPcGVuREJSZXF1ZXN0ID0gRklEQi5JREJPcGVuREJSZXF1ZXN0XHJcbmdsb2JhbC5JREJSZXF1ZXN0ID0gRklEQi5JREJSZXF1ZXN0XHJcbmdsb2JhbC5JREJGYWN0b3J5ID0gRklEQi5JREJGYWN0b3J5XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnaW5kZXhlZERCJywge1xyXG4gIHZhbHVlOiBGSURCXHJcbn0pXHJcblxyXG4vLyDmqKHmi58gY3J5cHRvLnJhbmRvbVVVSURcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyeXB0bywgJ3JhbmRvbVVVSUQnLCB7XHJcbiAgdmFsdWU6ICgpID0+IHtcclxuICAgIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIChjKSA9PiB7XHJcbiAgICAgIGNvbnN0IHIgPSAoTWF0aC5yYW5kb20oKSAqIDE2KSB8IDBcclxuICAgICAgY29uc3QgdiA9IGMgPT09ICd4JyA/IHIgOiAociAmIDB4MykgfCAweDhcclxuICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpXHJcbiAgICB9KVxyXG4gIH1cclxufSlcclxuXHJcbi8vIOaooeaLnyBwZXJmb3JtYW5jZSBBUElcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ3BlcmZvcm1hbmNlJywge1xyXG4gIHZhbHVlOiB7XHJcbiAgICBub3c6ICgpID0+IERhdGUubm93KCksXHJcbiAgICBtYXJrOiAobmFtZSkgPT4ge30sXHJcbiAgICBtZWFzdXJlOiAobmFtZSwgc3RhcnRNYXJrLCBlbmRNYXJrKSA9PiB7fSxcclxuICAgIGNsZWFyTWFya3M6IChuYW1lKSA9PiB7fSxcclxuICAgIGNsZWFyTWVhc3VyZXM6IChuYW1lKSA9PiB7fSxcclxuICAgIGdldEVudHJpZXNCeVR5cGU6ICh0eXBlKSA9PiBbXSxcclxuICAgIGdldEVudHJpZXNCeU5hbWU6IChuYW1lLCB0eXBlKSA9PiBbXSxcclxuICAgIHRvSlNPTjogKCkgPT4gKHt9KVxyXG4gIH1cclxufSlcclxuXHJcbi8vIOaooeaLnyByZXF1ZXN0QW5pbWF0aW9uRnJhbWVcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ3JlcXVlc3RBbmltYXRpb25GcmFtZScsIHtcclxuICB2YWx1ZTogKGNhbGxiYWNrKSA9PiB7XHJcbiAgICByZXR1cm4gc2V0VGltZW91dChjYWxsYmFjaywgMTYpXHJcbiAgfVxyXG59KVxyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2NhbmNlbEFuaW1hdGlvbkZyYW1lJywge1xyXG4gIHZhbHVlOiAoaWQpID0+IHtcclxuICAgIGNsZWFyVGltZW91dChpZClcclxuICB9XHJcbn0pXHJcblxyXG4vLyDlhajlsYDmtYvor5XovoXliqnlh73mlbBcclxuZ2xvYmFsLnRlc3RIZWxwZXJzID0ge1xyXG4gIHdhaXQ6IChtcykgPT4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSksXHJcbiAgY3JlYXRlRXZlbnQ6ICh0eXBlLCBkYXRhID0ge30pID0+IHtcclxuICAgIHJldHVybiBuZXcgRXZlbnQodHlwZSwgZGF0YSlcclxuICB9LFxyXG4gIGNyZWF0ZUVycm9yOiAobWVzc2FnZSwgY29kZSA9ICdVTktOT1dOJykgPT4ge1xyXG4gICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSlcclxuICAgIE9iamVjdC5hc3NpZ24oZXJyb3IsIHsgY29kZSB9KVxyXG4gICAgcmV0dXJuIGVycm9yXHJcbiAgfSxcclxuICBjbGVhckFsbE1vY2tzOiAoKSA9PiB7XHJcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKVxyXG4gIH0sXHJcbiAgcmVzZXRBbGxNb2NrczogKCkgPT4ge1xyXG4gICAgamVzdC5yZXNldEFsbE1vY2tzKClcclxuICB9XHJcbn1cclxuXHJcbi8vIOWFqOWxgOa1i+ivleWJjeiuvue9rlxyXG5iZWZvcmVBbGwoKCkgPT4ge1xyXG4gIGNvbnNvbGUubG9nKCfwn6eqIEplc3Qg5rWL6K+V546v5aKD5bey5Yid5aeL5YyWJylcclxufSlcclxuXHJcbi8vIOavj+S4qua1i+ivleWJjeeahOiuvue9rlxyXG5iZWZvcmVFYWNoKCgpID0+IHtcclxuICBsb2NhbFN0b3JhZ2UuY2xlYXIoKVxyXG4gIGplc3QuY2xlYXJBbGxNb2NrcygpXHJcbn0pXHJcblxyXG4vLyDmiYDmnInmtYvor5XlkI7nmoTmuIXnkIZcclxuYWZ0ZXJBbGwoKCkgPT4ge1xyXG4gIGNvbnNvbGUubG9nKCfwn6eqIEplc3Qg5rWL6K+V546v5aKD5bey5riF55CGJylcclxufSkiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUE7QUFDQUEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE1BQU0sRUFBRSxR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
{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\tests\\e2e\\sync-workflows\\sync-workflow.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\tests\\e2e\\sync-workflows\\sync-workflow.test.ts"],"sourcesContent":["// 同步工作流端到端测试\r\nimport { test, expect } from '@playwright/test'\r\n\r\ntest.describe('Sync Workflows', () => {\r\n  test.beforeEach(async ({ page, context }) => {\r\n    // 登录\r\n    await page.goto('/login')\r\n    await page.fill('[data-testid=\"email-input\"]', 'test@example.com')\r\n    await page.fill('[data-testid=\"password-input\"]', 'password123')\r\n    await page.click('[data-testid=\"login-button\"]')\r\n    await page.waitForURL('/dashboard')\r\n    \r\n    // 启用离线模式模拟\r\n    await context.setOffline(true)\r\n  })\r\n\r\n  test.afterEach(async ({ context }) => {\r\n    // 恢复在线模式\r\n    await context.setOffline(false)\r\n  })\r\n\r\n  test.describe('离线同步', () => {\r\n    test('应该能够在离线时创建卡片', async ({ page }) => {\r\n      // 创建卡片\r\n      await page.click('[data-testid=\"create-card-button\"]')\r\n      await page.waitForSelector('[data-testid=\"card-modal\"]')\r\n      \r\n      await page.fill('[data-testid=\"card-title\"]', '离线卡片')\r\n      await page.fill('[data-testid=\"card-content\"]', '这是在离线时创建的卡片')\r\n      await page.click('[data-testid=\"save-card-button\"]')\r\n      \r\n      // 验证卡片创建成功（本地）\r\n      await page.waitForSelector('[data-testid=\"card-title\"]:has-text(\"离线卡片\")')\r\n      \r\n      // 验证离线状态指示器\r\n      const offlineIndicator = await page.locator('[data-testid=\"offline-indicator\"]')\r\n      await expect(offlineIndicator).toBeVisible()\r\n      \r\n      // 验证同步队列状态\r\n      const syncQueue = await page.locator('[data-testid=\"sync-queue-count\"]')\r\n      await expect(syncQueue).toHaveText('1')\r\n    })\r\n\r\n    test('应该能够在离线时编辑卡片', async ({ page }) => {\r\n      // 先创建一个卡片\r\n      await createTestCard(page)\r\n      \r\n      // 进入离线模式\r\n      await page.click('[data-testid=\"offline-toggle\"]')\r\n      \r\n      // 编辑卡片\r\n      await page.dblclick('[data-testid=\"card-title\"]')\r\n      await page.waitForSelector('[data-testid=\"card-modal\"]')\r\n      \r\n      await page.fill('[data-testid=\"card-title\"]', '离线编辑的卡片')\r\n      await page.click('[data-testid=\"save-card-button\"]')\r\n      \r\n      // 验证编辑成功\r\n      await page.waitForSelector('[data-testid=\"card-title\"]:has-text(\"离线编辑的卡片\")')\r\n      \r\n      // 验证同步队列\r\n      const syncQueue = await page.locator('[data-testid=\"sync-queue-count\"]')\r\n      await expect(syncQueue).toHaveText('1')\r\n    })\r\n\r\n    test('应该能够在离线时删除卡片', async ({ page }) => {\r\n      // 先创建一个卡片\r\n      await createTestCard(page)\r\n      \r\n      // 进入离线模式\r\n      await page.click('[data-testid=\"offline-toggle\"]')\r\n      \r\n      // 删除卡片\r\n      await page.click('[data-testid=\"delete-card-button\"]')\r\n      await page.click('[data-testid=\"confirm-delete-button\"]')\r\n      \r\n      // 验证卡片删除成功\r\n      await expect(page.locator('[data-testid=\"card-title\"]')).not.toBeVisible()\r\n      \r\n      // 验证同步队列\r\n      const syncQueue = await page.locator('[data-testid=\"sync-queue-count\"]')\r\n      await expect(syncQueue).toHaveText('1')\r\n    })\r\n  })\r\n\r\n  test.describe('在线同步', () => {\r\n    test('应该能够在恢复在线后自动同步', async ({ page, context }) => {\r\n      // 在离线时创建卡片\r\n      await createTestCard(page, { title: '离线卡片' })\r\n      \r\n      // 恢复在线\r\n      await context.setOffline(false)\r\n      \r\n      // 等待自动同步\r\n      await page.waitForSelector('[data-testid=\"sync-complete-toast\"]')\r\n      \r\n      // 验证同步成功\r\n      const syncStatus = await page.locator('[data-testid=\"sync-status\"]')\r\n      await expect(syncStatus).toHaveText('Synced')\r\n      \r\n      // 验证同步队列清空\r\n      const syncQueue = await page.locator('[data-testid=\"sync-queue-count\"]')\r\n      await expect(syncQueue).toHaveText('0')\r\n    })\r\n\r\n    test('应该能够手动触发同步', async ({ page }) => {\r\n      // 创建一些操作\r\n      await createTestCard(page)\r\n      await createTestCard(page, { title: '第二个卡片' })\r\n      \r\n      // 手动同步\r\n      await page.click('[data-testid=\"manual-sync-button\"]')\r\n      \r\n      // 等待同步完成\r\n      await page.waitForSelector('[data-testid=\"sync-complete-toast\"]')\r\n      \r\n      // 验证同步状态\r\n      const syncStatus = await page.locator('[data-testid=\"sync-status\"]')\r\n      await expect(syncStatus).toHaveText('Synced')\r\n    })\r\n\r\n    test('应该能够处理同步冲突', async ({ page }) => {\r\n      // 创建卡片\r\n      await createTestCard(page)\r\n      \r\n      // 模拟云端冲突（通过设置不同的同步时间）\r\n      await page.evaluate(() => {\r\n        // 模拟云端版本冲突\r\n        localStorage.setItem('cloud_version_conflict', 'true')\r\n      })\r\n      \r\n      // 触发同步\r\n      await page.click('[data-testid=\"manual-sync-button\"]')\r\n      \r\n      // 等待冲突解决对话框\r\n      await page.waitForSelector('[data-testid=\"conflict-resolution-modal\"]')\r\n      \r\n      // 选择解决方案（保留本地版本）\r\n      await page.click('[data-testid=\"resolve-keep-local\"]')\r\n      \r\n      // 验证冲突解决\r\n      await expect(page.locator('[data-testid=\"conflict-resolved-toast\"]')).toBeVisible()\r\n    })\r\n  })\r\n\r\n  test.describe('批量同步', () => {\r\n    test('应该能够批量同步多个操作', async ({ page }) => {\r\n      // 创建多个操作\r\n      for (let i = 0; i < 5; i++) {\r\n        await createTestCard(page, { title: `卡片 ${i + 1}` })\r\n      }\r\n      \r\n      // 验证同步队列\r\n      const syncQueue = await page.locator('[data-testid=\"sync-queue-count\"]')\r\n      await expect(syncQueue).toHaveText('5')\r\n      \r\n      // 批量同步\r\n      await page.click('[data-testid=\"batch-sync-button\"]')\r\n      \r\n      // 等待同步完成\r\n      await page.waitForSelector('[data-testid=\"sync-complete-toast\"]')\r\n      \r\n      // 验证所有操作已同步\r\n      await expect(syncQueue).toHaveText('0')\r\n    })\r\n\r\n    test('应该能够暂停和恢复同步', async ({ page }) => {\r\n      // 创建多个操作\r\n      for (let i = 0; i < 3; i++) {\r\n        await createTestCard(page, { title: `卡片 ${i + 1}` })\r\n      }\r\n      \r\n      // 暂停同步\r\n      await page.click('[data-testid=\"pause-sync-button\"]')\r\n      \r\n      // 验证同步已暂停\r\n      const syncStatus = await page.locator('[data-testid=\"sync-status\"]')\r\n      await expect(syncStatus).toHaveText('Paused')\r\n      \r\n      // 尝试同步（应该失败）\r\n      await page.click('[data-testid=\"manual-sync-button\"]')\r\n      await expect(page.locator('[data-testid=\"sync-paused-toast\"]')).toBeVisible()\r\n      \r\n      // 恢复同步\r\n      await page.click('[data-testid=\"resume-sync-button\"]')\r\n      \r\n      // 等待同步完成\r\n      await page.waitForSelector('[data-testid=\"sync-complete-toast\"]')\r\n      \r\n      // 验证同步恢复\r\n      await expect(syncStatus).toHaveText('Synced')\r\n    })\r\n  })\r\n\r\n  test.describe('错误处理', () => {\r\n    test('应该能够处理网络错误', async ({ page, context }) => {\r\n      // 模拟网络错误\r\n      await context.route('**/api/sync', route => route.abort('failed'))\r\n      \r\n      // 尝试同步\r\n      await createTestCard(page)\r\n      await page.click('[data-testid=\"manual-sync-button\"]')\r\n      \r\n      // 等待错误提示\r\n      await page.waitForSelector('[data-testid=\"sync-error-toast\"]')\r\n      \r\n      // 验证错误信息\r\n      const errorMessage = await page.locator('[data-testid=\"sync-error-toast\"]').textContent()\r\n      expect(errorMessage).toContain('Network error')\r\n      \r\n      // 验证重试按钮\r\n      await expect(page.locator('[data-testid=\"retry-sync-button\"]')).toBeVisible()\r\n    })\r\n\r\n    test('应该能够处理服务器错误', async ({ page, context }) => {\r\n      // 模拟服务器错误\r\n      await context.route('**/api/sync', route => route.fulfill({\r\n        status: 500,\r\n        body: JSON.stringify({ error: 'Server error' })\r\n      }))\r\n      \r\n      // 尝试同步\r\n      await createTestCard(page)\r\n      await page.click('[data-testid=\"manual-sync-button\"]')\r\n      \r\n      // 等待错误提示\r\n      await page.waitForSelector('[data-testid=\"sync-error-toast\"]')\r\n      \r\n      // 验证错误信息\r\n      const errorMessage = await page.locator('[data-testid=\"sync-error-toast\"]').textContent()\r\n      expect(errorMessage).toContain('Server error')\r\n    })\r\n\r\n    test('应该能够处理认证错误', async ({ page, context }) => {\r\n      // 模拟认证错误\r\n      await context.route('**/api/sync', route => route.fulfill({\r\n        status: 401,\r\n        body: JSON.stringify({ error: 'Unauthorized' })\r\n      }))\r\n      \r\n      // 尝试同步\r\n      await createTestCard(page)\r\n      await page.click('[data-testid=\"manual-sync-button\"]')\r\n      \r\n      // 等待重新登录提示\r\n      await page.waitForSelector('[data-testid=\"reauth-modal\"]')\r\n      \r\n      // 重新登录\r\n      await page.fill('[data-testid=\"reauth-email\"]', 'test@example.com')\r\n      await page.fill('[data-testid=\"reauth-password\"]', 'password123')\r\n      await page.click('[data-testid=\"reauth-submit\"]')\r\n      \r\n      // 等待重新认证成功\r\n      await page.waitForSelector('[data-testid=\"reauth-success-toast\"]')\r\n    })\r\n  })\r\n\r\n  test.describe('同步性能', () => {\r\n    test('应该能够高效同步大量数据', async ({ page }) => {\r\n      // 创建大量卡片\r\n      for (let i = 0; i < 20; i++) {\r\n        await createTestCard(page, { title: `批量卡片 ${i + 1}` })\r\n      }\r\n      \r\n      // 记录同步开始时间\r\n      const startTime = Date.now()\r\n      \r\n      // 批量同步\r\n      await page.click('[data-testid=\"batch-sync-button\"]')\r\n      \r\n      // 等待同步完成\r\n      await page.waitForSelector('[data-testid=\"sync-complete-toast\"]')\r\n      \r\n      // 计算同步时间\r\n      const syncTime = Date.now() - startTime\r\n      \r\n      // 验证同步性能（应该在30秒内完成）\r\n      expect(syncTime).toBeLessThan(30000)\r\n      \r\n      // 验证所有数据已同步\r\n      const syncQueue = await page.locator('[data-testid=\"sync-queue-count\"]')\r\n      await expect(syncQueue).toHaveText('0')\r\n    })\r\n\r\n    test('应该能够优化并发同步', async ({ page }) => {\r\n      // 配置并发限制\r\n      await page.click('[data-testid=\"sync-settings\"]')\r\n      await page.fill('[data-testid=\"max-concurrent-requests\"]', '3')\r\n      await page.click('[data-testid=\"save-settings\"]')\r\n      \r\n      // 创建多个操作\r\n      for (let i = 0; i < 10; i++) {\r\n        await createTestCard(page, { title: `并发测试卡片 ${i + 1}` })\r\n      }\r\n      \r\n      // 开始同步\r\n      await page.click('[data-testid=\"batch-sync-button\"]')\r\n      \r\n      // 监控并发请求数\r\n      const activeRequests = await page.locator('[data-testid=\"active-requests\"]')\r\n      await expect(activeRequests).toHaveText('3')\r\n      \r\n      // 等待同步完成\r\n      await page.waitForSelector('[data-testid=\"sync-complete-toast\"]')\r\n    })\r\n  })\r\n\r\n  test.describe('数据一致性', () => {\r\n    test('应该保证数据同步后的一致性', async ({ page }) => {\r\n      // 创建卡片\r\n      await createTestCard(page, { title: '一致性测试卡片' })\r\n      \r\n      // 同步到云端\r\n      await page.click('[data-testid=\"manual-sync-button\"]')\r\n      await page.waitForSelector('[data-testid=\"sync-complete-toast\"]')\r\n      \r\n      // 刷新页面\r\n      await page.reload()\r\n      \r\n      // 验证数据仍然存在\r\n      await expect(page.locator('[data-testid=\"card-title\"]:has-text(\"一致性测试卡片\")')).toBeVisible()\r\n      \r\n      // 验证云端状态\r\n      const cloudStatus = await page.locator('[data-testid=\"cloud-status\"]')\r\n      await expect(cloudStatus).toHaveText('Synced')\r\n    })\r\n\r\n    test('应该能够处理数据损坏', async ({ page }) => {\r\n      // 模拟数据损坏\r\n      await page.evaluate(() => {\r\n        const cards = JSON.parse(localStorage.getItem('cards') || '[]')\r\n        cards[0] = { ...cards[0], content: null } // 损坏的数据\r\n        localStorage.setItem('cards', JSON.stringify(cards))\r\n      })\r\n      \r\n      // 尝试同步\r\n      await page.click('[data-testid=\"manual-sync-button\"]')\r\n      \r\n      // 等待数据修复提示\r\n      await page.waitForSelector('[data-testid=\"data-repair-toast\"]')\r\n      \r\n      // 验证数据修复成功\r\n      const repairMessage = await page.locator('[data-testid=\"data-repair-toast\"]').textContent()\r\n      expect(repairMessage).toContain('Data repaired')\r\n    })\r\n  })\r\n\r\n  test.describe('同步设置', () => {\r\n    test('应该能够配置同步间隔', async ({ page }) => {\r\n      // 打开设置\r\n      await page.click('[data-testid=\"sync-settings\"]')\r\n      \r\n      // 设置同步间隔\r\n      await page.fill('[data-testid=\"sync-interval\"]', '30')\r\n      await page.click('[data-testid=\"save-settings\"]')\r\n      \r\n      // 验证设置保存\r\n      await page.waitForSelector('[data-testid=\"settings-saved-toast\"]')\r\n      \r\n      // 验证同步定时器\r\n      const nextSync = await page.locator('[data-testid=\"next-sync-time\"]')\r\n      await expect(nextSync).toBeVisible()\r\n    })\r\n\r\n    test('应该能够配置重试策略', async ({ page }) => {\r\n      // 打开设置\r\n      await page.click('[data-testid=\"sync-settings\"]')\r\n      \r\n      // 配置重试策略\r\n      await page.selectOption('[data-testid=\"retry-strategy\"]', 'exponential')\r\n      await page.fill('[data-testid=\"max-retries\"]', '5')\r\n      await page.click('[data-testid=\"save-settings\"]')\r\n      \r\n      // 验证设置保存\r\n      await page.waitForSelector('[data-testid=\"settings-saved-toast\"]')\r\n    })\r\n\r\n    test('应该能够启用数据压缩', async ({ page }) => {\r\n      // 打开设置\r\n      await page.click('[data-testid=\"sync-settings\"]')\r\n      \r\n      // 启用数据压缩\r\n      await page.check('[data-testid=\"enable-compression\"]')\r\n      await page.click('[data-testid=\"save-settings\"]')\r\n      \r\n      // 验证设置保存\r\n      await page.waitForSelector('[data-testid=\"settings-saved-toast\"]')\r\n      \r\n      // 验证压缩状态\r\n      const compressionStatus = await page.locator('[data-testid=\"compression-status\"]')\r\n      await expect(compressionStatus).toHaveText('Enabled')\r\n    })\r\n  })\r\n})\r\n\r\n// 辅助函数：创建测试卡片\r\nasync function createTestCard(page, options = {}) {\r\n  const defaultOptions = {\r\n    title: '测试卡片',\r\n    content: '这是一个测试卡片'\r\n  }\r\n  \r\n  const finalOptions = { ...defaultOptions, ...options }\r\n  \r\n  await page.click('[data-testid=\"create-card-button\"]')\r\n  await page.waitForSelector('[data-testid=\"card-modal\"]')\r\n  \r\n  await page.fill('[data-testid=\"card-title\"]', finalOptions.title)\r\n  await page.fill('[data-testid=\"card-content\"]', finalOptions.content)\r\n  \r\n  await page.click('[data-testid=\"save-card-button\"]')\r\n  await page.waitForSelector('[data-testid=\"card-title\"]:has-text(\"' + finalOptions.title + '\")')\r\n}"],"version":3}
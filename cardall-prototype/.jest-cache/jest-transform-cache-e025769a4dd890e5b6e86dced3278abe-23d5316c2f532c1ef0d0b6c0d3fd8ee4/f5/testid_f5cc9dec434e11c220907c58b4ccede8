17cd3fdf6e73122ce8a5e811efcc61e7
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.queryByTestId = exports.queryAllByTestId = exports.getByTestId = exports.getAllByTestId = exports.findByTestId = exports.findAllByTestId = void 0;
var _helpers = require("../helpers");
var _queryHelpers = require("../query-helpers");
var _allUtils = require("./all-utils");
const getTestIdAttribute = () => (0, _allUtils.getConfig)().testIdAttribute;
const queryAllByTestId = (...args) => {
    (0, _helpers.checkContainerType)(args[0]);
    return (0, _allUtils.queryAllByAttribute)(getTestIdAttribute(), ...args);
};
const getMultipleError = (c, id) => `Found multiple elements by: [${getTestIdAttribute()}="${id}"]`;
const getMissingError = (c, id) => `Unable to find an element by: [${getTestIdAttribute()}="${id}"]`;
const queryAllByTestIdWithSuggestions = exports.queryAllByTestId = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByTestId, queryAllByTestId.name, 'queryAll');
const [queryByTestId, getAllByTestId, getByTestId, findAllByTestId, findByTestId] = (0, _allUtils.buildQueries)(queryAllByTestId, getMultipleError, getMissingError);
exports.findByTestId = findByTestId;
exports.findAllByTestId = findAllByTestId;
exports.getByTestId = getByTestId;
exports.getAllByTestId = getAllByTestId;
exports.queryByTestId = queryByTestId;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXG5vZGVfbW9kdWxlc1xcQHRlc3RpbmctbGlicmFyeVxcZG9tXFxkaXN0XFxxdWVyaWVzXFx0ZXN0LWlkLmpzIiwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRTtJQUMzQyxLQUFLLEVBQUUsSUFBSTtDQUNaLENBQUMsQ0FBQztBQUNILE9BQU8sQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLGNBQWMsR0FBRyxPQUFPLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDMUosSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3JDLElBQUksYUFBYSxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQ2hELElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN2QyxNQUFNLGtCQUFrQixHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQztBQUM1RSxNQUFNLGdCQUFnQixHQUFHLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRTtJQUNuQyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQyxPQUFPLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLGtCQUFrQixFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUMzRSxDQUFDLENBQUM7QUFDRixNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsZ0NBQWdDLGtCQUFrQixFQUFFLEtBQUssRUFBRSxJQUFJLENBQUM7QUFDcEcsTUFBTSxlQUFlLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxrQ0FBa0Msa0JBQWtCLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQztBQUNyRyxNQUFNLCtCQUErQixHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLENBQUMsRUFBRSxhQUFhLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDeEssTUFBTSxDQUFDLGFBQWEsRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFFLGVBQWUsRUFBRSxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxDQUFDLENBQUM7QUFDckssT0FBTyxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7QUFDcEMsT0FBTyxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7QUFDMUMsT0FBTyxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7QUFDbEMsT0FBTyxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7QUFDeEMsT0FBTyxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXG5vZGVfbW9kdWxlc1xcQHRlc3RpbmctbGlicmFyeVxcZG9tXFxkaXN0XFxxdWVyaWVzXFx0ZXN0LWlkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5xdWVyeUJ5VGVzdElkID0gZXhwb3J0cy5xdWVyeUFsbEJ5VGVzdElkID0gZXhwb3J0cy5nZXRCeVRlc3RJZCA9IGV4cG9ydHMuZ2V0QWxsQnlUZXN0SWQgPSBleHBvcnRzLmZpbmRCeVRlc3RJZCA9IGV4cG9ydHMuZmluZEFsbEJ5VGVzdElkID0gdm9pZCAwO1xudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL2hlbHBlcnNcIik7XG52YXIgX3F1ZXJ5SGVscGVycyA9IHJlcXVpcmUoXCIuLi9xdWVyeS1oZWxwZXJzXCIpO1xudmFyIF9hbGxVdGlscyA9IHJlcXVpcmUoXCIuL2FsbC11dGlsc1wiKTtcbmNvbnN0IGdldFRlc3RJZEF0dHJpYnV0ZSA9ICgpID0+ICgwLCBfYWxsVXRpbHMuZ2V0Q29uZmlnKSgpLnRlc3RJZEF0dHJpYnV0ZTtcbmNvbnN0IHF1ZXJ5QWxsQnlUZXN0SWQgPSAoLi4uYXJncykgPT4ge1xuICAoMCwgX2hlbHBlcnMuY2hlY2tDb250YWluZXJUeXBlKShhcmdzWzBdKTtcbiAgcmV0dXJuICgwLCBfYWxsVXRpbHMucXVlcnlBbGxCeUF0dHJpYnV0ZSkoZ2V0VGVzdElkQXR0cmlidXRlKCksIC4uLmFyZ3MpO1xufTtcbmNvbnN0IGdldE11bHRpcGxlRXJyb3IgPSAoYywgaWQpID0+IGBGb3VuZCBtdWx0aXBsZSBlbGVtZW50cyBieTogWyR7Z2V0VGVzdElkQXR0cmlidXRlKCl9PVwiJHtpZH1cIl1gO1xuY29uc3QgZ2V0TWlzc2luZ0Vycm9yID0gKGMsIGlkKSA9PiBgVW5hYmxlIHRvIGZpbmQgYW4gZWxlbWVudCBieTogWyR7Z2V0VGVzdElkQXR0cmlidXRlKCl9PVwiJHtpZH1cIl1gO1xuY29uc3QgcXVlcnlBbGxCeVRlc3RJZFdpdGhTdWdnZXN0aW9ucyA9IGV4cG9ydHMucXVlcnlBbGxCeVRlc3RJZCA9ICgwLCBfcXVlcnlIZWxwZXJzLndyYXBBbGxCeVF1ZXJ5V2l0aFN1Z2dlc3Rpb24pKHF1ZXJ5QWxsQnlUZXN0SWQsIHF1ZXJ5QWxsQnlUZXN0SWQubmFtZSwgJ3F1ZXJ5QWxsJyk7XG5jb25zdCBbcXVlcnlCeVRlc3RJZCwgZ2V0QWxsQnlUZXN0SWQsIGdldEJ5VGVzdElkLCBmaW5kQWxsQnlUZXN0SWQsIGZpbmRCeVRlc3RJZF0gPSAoMCwgX2FsbFV0aWxzLmJ1aWxkUXVlcmllcykocXVlcnlBbGxCeVRlc3RJZCwgZ2V0TXVsdGlwbGVFcnJvciwgZ2V0TWlzc2luZ0Vycm9yKTtcbmV4cG9ydHMuZmluZEJ5VGVzdElkID0gZmluZEJ5VGVzdElkO1xuZXhwb3J0cy5maW5kQWxsQnlUZXN0SWQgPSBmaW5kQWxsQnlUZXN0SWQ7XG5leHBvcnRzLmdldEJ5VGVzdElkID0gZ2V0QnlUZXN0SWQ7XG5leHBvcnRzLmdldEFsbEJ5VGVzdElkID0gZ2V0QWxsQnlUZXN0SWQ7XG5leHBvcnRzLnF1ZXJ5QnlUZXN0SWQgPSBxdWVyeUJ5VGVzdElkOyJdLCJ2ZXJzaW9uIjozfQ==
f412503e2b303ab8de066388ba07784f
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.queryByText = exports.queryAllByText = exports.getByText = exports.getAllByText = exports.findByText = exports.findAllByText = void 0;
var _queryHelpers = require("../query-helpers");
var _helpers = require("../helpers");
var _allUtils = require("./all-utils");
const queryAllByText = (container, text, { selector = '*', exact = true, collapseWhitespace, trim, ignore = (0, _allUtils.getConfig)().defaultIgnore, normalizer } = {}) => {
    (0, _helpers.checkContainerType)(container);
    const matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;
    const matchNormalizer = (0, _allUtils.makeNormalizer)({
        collapseWhitespace,
        trim,
        normalizer
    });
    let baseArray = [];
    if (typeof container.matches === 'function' && container.matches(selector)) {
        baseArray = [container];
    }
    return [...baseArray, ...Array.from(container.querySelectorAll(selector))]
        // TODO: `matches` according lib.dom.d.ts can get only `string` but according our code it can handle also boolean :)
        .filter(node => !ignore || !node.matches(ignore)).filter(node => matcher((0, _allUtils.getNodeText)(node), node, text, matchNormalizer));
};
const getMultipleError = (c, text) => `Found multiple elements with the text: ${text}`;
const getMissingError = (c, text, options = {}) => {
    const { collapseWhitespace, trim, normalizer, selector } = options;
    const matchNormalizer = (0, _allUtils.makeNormalizer)({
        collapseWhitespace,
        trim,
        normalizer
    });
    const normalizedText = matchNormalizer(text.toString());
    const isNormalizedDifferent = normalizedText !== text.toString();
    const isCustomSelector = (selector ?? '*') !== '*';
    return `Unable to find an element with the text: ${isNormalizedDifferent ? `${normalizedText} (normalized from '${text}')` : text}${isCustomSelector ? `, which matches selector '${selector}'` : ''}. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.`;
};
const queryAllByTextWithSuggestions = exports.queryAllByText = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByText, queryAllByText.name, 'queryAll');
const [queryByText, getAllByText, getByText, findAllByText, findByText] = (0, _allUtils.buildQueries)(queryAllByText, getMultipleError, getMissingError);
exports.findByText = findByText;
exports.findAllByText = findAllByText;
exports.getByText = getByText;
exports.getAllByText = getAllByText;
exports.queryByText = queryByText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXG5vZGVfbW9kdWxlc1xcQHRlc3RpbmctbGlicmFyeVxcZG9tXFxkaXN0XFxxdWVyaWVzXFx0ZXh0LmpzIiwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRTtJQUMzQyxLQUFLLEVBQUUsSUFBSTtDQUNaLENBQUMsQ0FBQztBQUNILE9BQU8sQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLGNBQWMsR0FBRyxPQUFPLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQzlJLElBQUksYUFBYSxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQ2hELElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNyQyxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDdkMsTUFBTSxjQUFjLEdBQUcsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQ3ZDLFFBQVEsR0FBRyxHQUFHLEVBQ2QsS0FBSyxHQUFHLElBQUksRUFDWixrQkFBa0IsRUFDbEIsSUFBSSxFQUNKLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQ2pELFVBQVUsRUFDWCxHQUFHLEVBQUUsRUFBRSxFQUFFO0lBQ1IsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLGtCQUFrQixDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDNUMsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDO0lBQ25FLE1BQU0sZUFBZSxHQUFHLENBQUMsQ0FB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aW5nXFxjYXJkYWxsLXByb3RvdHlwZVxcbm9kZV9tb2R1bGVzXFxAdGVzdGluZy1saWJyYXJ5XFxkb21cXGRpc3RcXHF1ZXJpZXNcXHRleHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnF1ZXJ5QnlUZXh0ID0gZXhwb3J0cy5xdWVyeUFsbEJ5VGV4dCA9IGV4cG9ydHMuZ2V0QnlUZXh0ID0gZXhwb3J0cy5nZXRBbGxCeVRleHQgPSBleHBvcnRzLmZpbmRCeVRleHQgPSBleHBvcnRzLmZpbmRBbGxCeVRleHQgPSB2b2lkIDA7XG52YXIgX3F1ZXJ5SGVscGVycyA9IHJlcXVpcmUoXCIuLi9xdWVyeS1oZWxwZXJzXCIpO1xudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL2hlbHBlcnNcIik7XG52YXIgX2FsbFV0aWxzID0gcmVxdWlyZShcIi4vYWxsLXV0aWxzXCIpO1xuY29uc3QgcXVlcnlBbGxCeVRleHQgPSAoY29udGFpbmVyLCB0ZXh0LCB7XG4gIHNlbGVjdG9yID0gJyonLFxuICBleGFjdCA9IHRydWUsXG4gIGNvbGxhcHNlV2hpdGVzcGFjZSxcbiAgdHJpbSxcbiAgaWdub3JlID0gKDAsIF9hbGxVdGlscy5nZXRDb25maWcpKCkuZGVmYXVsdElnbm9yZSxcbiAgbm9ybWFsaXplclxufSA9IHt9KSA9PiB7XG4gICgwLCBfaGVscGVycy5jaGVja0NvbnRhaW5lclR5cGUpKGNvbnRhaW5lcik7XG4gIGNvbnN0IG1hdGNoZXIgPSBleGFjdCA/IF9hbGxVdGlscy5tYXRjaGVzIDogX2FsbFV0aWxzLmZ1enp5TWF0Y2hlcztcbiAgY29uc3QgbWF0Y2hOb3JtYWxpemVyID0gKDAsIF9hbGxVdGlscy5tYWtlTm9ybWFsaXplcikoe1xuICAgIGNvbGxhcHNlV2hpdGVzcGFjZSxcbiAgICB0cmltLFxuICAgIG5vcm1hbGl6ZXJcbiAgfSk7XG4gIGxldCBiYXNlQXJyYXkgPSBbXTtcbiAgaWYgKHR5cGVvZiBjb250YWluZXIubWF0Y2hlcyA9PT0gJ2Z1bmN0aW9uJyAmJiBjb250YWluZXIubWF0Y2hlcyhzZWxlY3RvcikpIHtcbiAgICBiYXNlQXJyYXkgPSBbY29udGFpbmVyXTtcbiAgfVxuICByZXR1cm4gWy4uLmJhc2VBcnJheSwgLi4uQXJyYXkuZnJvbShjb250YWluZXIucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpXVxuICAvLyBUT0RPOiBgbWF0Y2hlc2AgYWNjb3JkaW5nIGxpYi5kb20uZC50cyBjYW4gZ2V0IG9ubHkgYHN0cmluZ2AgYnV0IGFjY29yZGluZyBvdXIgY29kZSBpdCBjYW4gaGFuZGxlIGFsc28gYm9vbGVhbiA6KVxuICAuZmlsdGVyKG5vZGUgPT4gIWlnbm9yZSB8fCAhbm9kZS5tYXRjaGVzKGlnbm9yZSkpLmZpbHRlcihub2RlID0+IG1hdGNoZXIoKDAsIF9hbGxVdGlscy5nZXROb2RlVGV4dCkobm9kZSksIG5vZGUsIHRleHQsIG1hdGNoTm9ybWFsaXplcikpO1xufTtcbmNvbnN0IGdldE11bHRpcGxlRXJyb3IgPSAoYywgdGV4dCkgPT4gYEZvdW5kIG11bHRpcGxlIGVsZW1lbnRzIHdpdGggdGhlIHRleHQ6ICR7dGV4dH1gO1xuY29uc3QgZ2V0TWlzc2luZ0Vycm9yID0gKGMsIHRleHQsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCB7XG4gICAgY29sbGFwc2VXaGl0ZXNwYWNlLFxuICAgIHRyaW0sXG4gICAgbm9ybWFsaXplcixcbiAgICBzZWxlY3RvclxuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgbWF0Y2hOb3JtYWxpemVyID0gKDAsIF9hbGxVdGlscy5tYWtlTm9ybWFsaXplcikoe1xuICAgIGNvbGxhcHNlV2hpdGVzcGFjZSxcbiAgICB0cmltLFxuICAgIG5vcm1hbGl6ZXJcbiAgfSk7XG4gIGNvbnN0IG5vcm1hbGl6ZWRUZXh0ID0gbWF0Y2hOb3JtYWxpemVyKHRleHQudG9TdHJpbmcoKSk7XG4gIGNvbnN0IGlzTm9ybWFsaXplZERpZmZlcmVudCA9IG5vcm1hbGl6ZWRUZXh0ICE9PSB0ZXh0LnRvU3RyaW5nKCk7XG4gIGNvbnN0IGlzQ3VzdG9tU2VsZWN0b3IgPSAoc2VsZWN0b3IgPz8gJyonKSAhPT0gJyonO1xuICByZXR1cm4gYFVuYWJsZSB0byBmaW5kIGFuIGVsZW1lbnQgd2l0aCB0aGUgdGV4dDogJHtpc05vcm1hbGl6ZWREaWZmZXJlbnQgPyBgJHtub3JtYWxpemVkVGV4dH0gKG5vcm1hbGl6ZWQgZnJvbSAnJHt0ZXh0fScpYCA6IHRleHR9JHtpc0N1c3RvbVNlbGVjdG9yID8gYCwgd2hpY2ggbWF0Y2hlcyBzZWxlY3RvciAnJHtzZWxlY3Rvcn0nYCA6ICcnfS4gVGhpcyBjb3VsZCBiZSBiZWNhdXNlIHRoZSB0ZXh0IGlzIGJyb2tlbiB1cCBieSBtdWx0aXBsZSBlbGVtZW50cy4gSW4gdGhpcyBjYXNlLCB5b3UgY2FuIHByb3ZpZGUgYSBmdW5jdGlvbiBmb3IgeW91ciB0ZXh0IG1hdGNoZXIgdG8gbWFrZSB5b3VyIG1hdGNoZXIgbW9yZSBmbGV4aWJsZS5gO1xufTtcbmNvbnN0IHF1ZXJ5QWxsQnlUZXh0V2l0aFN1Z2dlc3Rpb25zID0gZXhwb3J0cy5xdWVyeUFsbEJ5VGV4dCA9ICgwLCBfcXVlcnlIZWxwZXJzLndyYXBBbGxCeVF1ZXJ5V2l0aFN1Z2dlc3Rpb24pKHF1ZXJ5QWxsQnlUZXh0LCBxdWVyeUFsbEJ5VGV4dC5uYW1lLCAncXVlcnlBbGwnKTtcbmNvbnN0IFtxdWVyeUJ5VGV4dCwgZ2V0QWxsQnlUZXh0LCBnZXRCeVRleHQsIGZpbmRBbGxCeVRleHQsIGZpbmRCeVRleHRdID0gKDAsIF9hbGxVdGlscy5idWlsZFF1ZXJpZXMpKHF1ZXJ5QWxsQnlUZXh0LCBnZXRNdWx0aXBsZUVycm9yLCBnZXRNaXNzaW5nRXJyb3IpO1xuZXhwb3J0cy5maW5kQnlUZXh0ID0gZmluZEJ5VGV4dDtcbmV4cG9ydHMuZmluZEFsbEJ5VGV4dCA9IGZpbmRBbGxCeVRleHQ7XG5leHBvcnRzLmdldEJ5VGV4dCA9IGdldEJ5VGV4dDtcbmV4cG9ydHMuZ2V0QWxsQnlUZXh0ID0gZ2V0QWxsQnlUZXh0O1xuZXhwb3J0cy5xdWVyeUJ5VGV4dCA9IHF1ZXJ5QnlUZXh0OyJdLCJ2ZXJzaW9uIjozfQ==
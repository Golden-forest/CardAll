e2e728aa025173cb8198a3f0e8603bc2
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.queryByLabelText = exports.queryAllByLabelText = exports.getByLabelText = exports.getAllByLabelText = exports.findByLabelText = exports.findAllByLabelText = void 0;
var _config = require("../config");
var _helpers = require("../helpers");
var _labelHelpers = require("../label-helpers");
var _allUtils = require("./all-utils");
function queryAllLabels(container) {
    return Array.from(container.querySelectorAll('label,input')).map(node => {
        return {
            node,
            textToMatch: (0, _labelHelpers.getLabelContent)(node)
        };
    }).filter(({ textToMatch }) => textToMatch !== null);
}
const queryAllLabelsByText = (container, text, { exact = true, trim, collapseWhitespace, normalizer } = {}) => {
    const matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;
    const matchNormalizer = (0, _allUtils.makeNormalizer)({
        collapseWhitespace,
        trim,
        normalizer
    });
    const textToMatchByLabels = queryAllLabels(container);
    return textToMatchByLabels.filter(({ node, textToMatch }) => matcher(textToMatch, node, text, matchNormalizer)).map(({ node }) => node);
};
const queryAllByLabelText = (container, text, { selector = '*', exact = true, collapseWhitespace, trim, normalizer } = {}) => {
    (0, _helpers.checkContainerType)(container);
    const matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;
    const matchNormalizer = (0, _allUtils.makeNormalizer)({
        collapseWhitespace,
        trim,
        normalizer
    });
    const matchingLabelledElements = Array.from(container.querySelectorAll('*')).filter(element => {
        return (0, _labelHelpers.getRealLabels)(element).length || element.hasAttribute('aria-labelledby');
    }).reduce((labelledElements, labelledElement) => {
        const labelList = (0, _labelHelpers.getLabels)(container, labelledElement, {
            selector
        });
        labelList.filter(label => Boolean(label.formControl)).forEach(label => {
            if (matcher(label.content, label.formControl, text, matchNormalizer) && label.formControl) {
                labelledElements.push(label.formControl);
            }
        });
        const labelsValue = labelList.filter(label => Boolean(label.content)).map(label => label.content);
        if (matcher(labelsValue.join(' '), labelledElement, text, matchNormalizer)) {
            labelledElements.push(labelledElement);
        }
        if (labelsValue.length > 1) {
            labelsValue.forEach((labelValue, index) => {
                if (matcher(labelValue, labelledElement, text, matchNormalizer)) {
                    labelledElements.push(labelledElement);
                }
                const labelsFiltered = [...labelsValue];
                labelsFiltered.splice(index, 1);
                if (labelsFiltered.length > 1) {
                    if (matcher(labelsFiltered.join(' '), labelledElement, text, matchNormalizer)) {
                        labelledElements.push(labelledElement);
                    }
                }
            });
        }
        return labelledElements;
    }, []).concat((0, _allUtils.queryAllByAttribute)('aria-label', container, text, {
        exact,
        normalizer: matchNormalizer
    }));
    return Array.from(new Set(matchingLabelledElements)).filter(element => element.matches(selector));
};
// the getAll* query would normally look like this:
// const getAllByLabelText = makeGetAllQuery(
//   queryAllByLabelText,
//   (c, text) => `Unable to find a label with the text of: ${text}`,
// )
// however, we can give a more helpful error message than the generic one,
// so we're writing this one out by hand.
const getAllByLabelText = (container, text, ...rest) => {
    const els = queryAllByLabelText(container, text, ...rest);
    if (!els.length) {
        const labels = queryAllLabelsByText(container, text, ...rest);
        if (labels.length) {
            const tagNames = labels.map(label => getTagNameOfElementAssociatedWithLabelViaFor(container, label)).filter(tagName => !!tagName);
            if (tagNames.length) {
                throw (0, _config.getConfig)().getElementError(tagNames.map(tagName => `Found a label with the text of: ${text}, however the element associated with this label (<${tagName} />) is non-labellable [https://html.spec.whatwg.org/multipage/forms.html#category-label]. If you really need to label a <${tagName} />, you can use aria-label or aria-labelledby instead.`).join('\n\n'), container);
            }
            else {
                throw (0, _config.getConfig)().getElementError(`Found a label with the text of: ${text}, however no form control was found associated to that label. Make sure you're using the "for" attribute or "aria-labelledby" attribute correctly.`, container);
            }
        }
        else {
            throw (0, _config.getConfig)().getElementError(`Unable to find a label with the text of: ${text}`, container);
        }
    }
    return els;
};
function getTagNameOfElementAssociatedWithLabelViaFor(container, label) {
    const htmlFor = label.getAttribute('for');
    if (!htmlFor) {
        return null;
    }
    const element = container.querySelector(`[id="${htmlFor}"]`);
    return element ? element.tagName.toLowerCase() : null;
}
// the reason mentioned above is the same reason we're not using buildQueries
const getMultipleError = (c, text) => `Found multiple elements with the text of: ${text}`;
const queryByLabelText = exports.queryByLabelText = (0, _allUtils.wrapSingleQueryWithSuggestion)((0, _allUtils.makeSingleQuery)(queryAllByLabelText, getMultipleError), queryAllByLabelText.name, 'query');
const getByLabelText = (0, _allUtils.makeSingleQuery)(getAllByLabelText, getMultipleError);
const findAllByLabelText = exports.findAllByLabelText = (0, _allUtils.makeFindQuery)((0, _allUtils.wrapAllByQueryWithSuggestion)(getAllByLabelText, getAllByLabelText.name, 'findAll'));
const findByLabelText = exports.findByLabelText = (0, _allUtils.makeFindQuery)((0, _allUtils.wrapSingleQueryWithSuggestion)(getByLabelText, getAllByLabelText.name, 'find'));
const getAllByLabelTextWithSuggestions = exports.getAllByLabelText = (0, _allUtils.wrapAllByQueryWithSuggestion)(getAllByLabelText, getAllByLabelText.name, 'getAll');
const getByLabelTextWithSuggestions = exports.getByLabelText = (0, _allUtils.wrapSingleQueryWithSuggestion)(getByLabelText, getAllByLabelText.name, 'get');
const queryAllByLabelTextWithSuggestions = exports.queryAllByLabelText = (0, _allUtils.wrapAllByQueryWithSuggestion)(queryAllByLabelText, queryAllByLabelText.name, 'queryAll');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXG5vZGVfbW9kdWxlc1xcQHRlc3RpbmctbGlicmFyeVxcZG9tXFxkaXN0XFxxdWVyaWVzXFxsYWJlbC10ZXh0LmpzIiwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRTtJQUMzQyxLQUFLLEVBQUUsSUFBSTtDQUNaLENBQUMsQ0FBQztBQUNILE9BQU8sQ0FBQyxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsbUJBQW1CLEdBQUcsT0FBTyxDQUFDLGNBQWMsR0FBRyxPQUFPLENBQUMsaUJBQWlCLEdBQUcsT0FBTyxDQUFDLGVBQWUsR0FBRyxPQUFPLENBQUMsa0JBQWtCLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDNUssSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ25DLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNyQyxJQUFJLGFBQWEsR0FBRyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUNoRCxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDdkMsU0FBUyxjQUFjLENBQUMsU0FBUztJQUMvQixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3RFLE9BQU87WUFDTCxJQUFJO1lBQ0osV0FBVyxFQUFFLENBQUMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxlQUFlLENBQUMsQ0FBQyxJQUFJLENBQUM7U0FDdEQsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQ1QsV0FBVyxFQUNaLEVBQUUsRUFBRSxDQUFDLFdBQVcsS0FBSyxJQUFJLENBQUMsQ0FBQztBQUM5QixDQUFDO0FBQ0QsTUFBTSxv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QkFBbUIsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXG5vZGVfbW9kdWxlc1xcQHRlc3RpbmctbGlicmFyeVxcZG9tXFxkaXN0XFxxdWVyaWVzXFxsYWJlbC10ZXh0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5xdWVyeUJ5TGFiZWxUZXh0ID0gZXhwb3J0cy5xdWVyeUFsbEJ5TGFiZWxUZXh0ID0gZXhwb3J0cy5nZXRCeUxhYmVsVGV4dCA9IGV4cG9ydHMuZ2V0QWxsQnlMYWJlbFRleHQgPSBleHBvcnRzLmZpbmRCeUxhYmVsVGV4dCA9IGV4cG9ydHMuZmluZEFsbEJ5TGFiZWxUZXh0ID0gdm9pZCAwO1xudmFyIF9jb25maWcgPSByZXF1aXJlKFwiLi4vY29uZmlnXCIpO1xudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL2hlbHBlcnNcIik7XG52YXIgX2xhYmVsSGVscGVycyA9IHJlcXVpcmUoXCIuLi9sYWJlbC1oZWxwZXJzXCIpO1xudmFyIF9hbGxVdGlscyA9IHJlcXVpcmUoXCIuL2FsbC11dGlsc1wiKTtcbmZ1bmN0aW9uIHF1ZXJ5QWxsTGFiZWxzKGNvbnRhaW5lcikge1xuICByZXR1cm4gQXJyYXkuZnJvbShjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnbGFiZWwsaW5wdXQnKSkubWFwKG5vZGUgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBub2RlLFxuICAgICAgdGV4dFRvTWF0Y2g6ICgwLCBfbGFiZWxIZWxwZXJzLmdldExhYmVsQ29udGVudCkobm9kZSlcbiAgICB9O1xuICB9KS5maWx0ZXIoKHtcbiAgICB0ZXh0VG9NYXRjaFxuICB9KSA9PiB0ZXh0VG9NYXRjaCAhPT0gbnVsbCk7XG59XG5jb25zdCBxdWVyeUFsbExhYmVsc0J5VGV4dCA9IChjb250YWluZXIsIHRleHQsIHtcbiAgZXhhY3QgPSB0cnVlLFxuICB0cmltLFxuICBjb2xsYXBzZVdoaXRlc3BhY2UsXG4gIG5vcm1hbGl6ZXJcbn0gPSB7fSkgPT4ge1xuICBjb25zdCBtYXRjaGVyID0gZXhhY3QgPyBfYWxsVXRpbHMubWF0Y2hlcyA6IF9hbGxVdGlscy5mdXp6eU1hdGNoZXM7XG4gIGNvbnN0IG1hdGNoTm9ybWFsaXplciA9ICgwLCBfYWxsVXRpbHMubWFrZU5vcm1hbGl6ZXIpKHtcbiAgICBjb2xsYXBzZVdoaXRlc3BhY2UsXG4gICAgdHJpbSxcbiAgICBub3JtYWxpemVyXG4gIH0pO1xuICBjb25zdCB0ZXh0VG9NYXRjaEJ5TGFiZWxzID0gcXVlcnlBbGxMYWJlbHMoY29udGFpbmVyKTtcbiAgcmV0dXJuIHRleHRUb01hdGNoQnlMYWJlbHMuZmlsdGVyKCh7XG4gICAgbm9kZSxcbiAgICB0ZXh0VG9NYXRjaFxuICB9KSA9PiBtYXRjaGVyKHRleHRUb01hdGNoLCBub2RlLCB0ZXh0LCBtYXRjaE5vcm1hbGl6ZXIpKS5tYXAoKHtcbiAgICBub2RlXG4gIH0pID0+IG5vZGUpO1xufTtcbmNvbnN0IHF1ZXJ5QWxsQnlMYWJlbFRleHQgPSAoY29udGFpbmVyLCB0ZXh0LCB7XG4gIHNlbGVjdG9yID0gJyonLFxuICBleGFjdCA9IHRydWUsXG4gIGNvbGxhcHNlV2hpdGVzcGFjZSxcbiAgdHJpbSxcbiAgbm9ybWFsaXplclxufSA9IHt9KSA9PiB7XG4gICgwLCBfaGVscGVycy5jaGVja0NvbnRhaW5lclR5cGUpKGNvbnRhaW5lcik7XG4gIGNvbnN0IG1hdGNoZXIgPSBleGFjdCA/IF9hbGxVdGlscy5tYXRjaGVzIDogX2FsbFV0aWxzLmZ1enp5TWF0Y2hlcztcbiAgY29uc3QgbWF0Y2hOb3JtYWxpemVyID0gKDAsIF9hbGxVdGlscy5tYWtlTm9ybWFsaXplcikoe1xuICAgIGNvbGxhcHNlV2hpdGVzcGFjZSxcbiAgICB0cmltLFxuICAgIG5vcm1hbGl6ZXJcbiAgfSk7XG4gIGNvbnN0IG1hdGNoaW5nTGFiZWxsZWRFbGVtZW50cyA9IEFycmF5LmZyb20oY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJyonKSkuZmlsdGVyKGVsZW1lbnQgPT4ge1xuICAgIHJldHVybiAoMCwgX2xhYmVsSGVscGVycy5nZXRSZWFsTGFiZWxzKShlbGVtZW50KS5sZW5ndGggfHwgZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2FyaWEtbGFiZWxsZWRieScpO1xuICB9KS5yZWR1Y2UoKGxhYmVsbGVkRWxlbWVudHMsIGxhYmVsbGVkRWxlbWVudCkgPT4ge1xuICAgIGNvbnN0IGxhYmVsTGlzdCA9ICgwLCBfbGFiZWxIZWxwZXJzLmdldExhYmVscykoY29udGFpbmVyLCBsYWJlbGxlZEVsZW1lbnQsIHtcbiAgICAgIHNlbGVjdG9yXG4gICAgfSk7XG4gICAgbGFiZWxMaXN0LmZpbHRlcihsYWJlbCA9PiBCb29sZWFuKGxhYmVsLmZvcm1Db250cm9sKSkuZm9yRWFjaChsYWJlbCA9PiB7XG4gICAgICBpZiAobWF0Y2hlcihsYWJlbC5jb250ZW50LCBsYWJlbC5mb3JtQ29udHJvbCwgdGV4dCwgbWF0Y2hOb3JtYWxpemVyKSAmJiBsYWJlbC5mb3JtQ29udHJvbCkge1xuICAgICAgICBsYWJlbGxlZEVsZW1lbnRzLnB1c2gobGFiZWwuZm9ybUNvbnRyb2wpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IGxhYmVsc1ZhbHVlID0gbGFiZWxMaXN0LmZpbHRlcihsYWJlbCA9PiBCb29sZWFuKGxhYmVsLmNvbnRlbnQpKS5tYXAobGFiZWwgPT4gbGFiZWwuY29udGVudCk7XG4gICAgaWYgKG1hdGNoZXIobGFiZWxzVmFsdWUuam9pbignICcpLCBsYWJlbGxlZEVsZW1lbnQsIHRleHQsIG1hdGNoTm9ybWFsaXplcikpIHtcbiAgICAgIGxhYmVsbGVkRWxlbWVudHMucHVzaChsYWJlbGxlZEVsZW1lbnQpO1xuICAgIH1cbiAgICBpZiAobGFiZWxzVmFsdWUubGVuZ3RoID4gMSkge1xuICAgICAgbGFiZWxzVmFsdWUuZm9yRWFjaCgobGFiZWxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgaWYgKG1hdGNoZXIobGFiZWxWYWx1ZSwgbGFiZWxsZWRFbGVtZW50LCB0ZXh0LCBtYXRjaE5vcm1hbGl6ZXIpKSB7XG4gICAgICAgICAgbGFiZWxsZWRFbGVtZW50cy5wdXNoKGxhYmVsbGVkRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGFiZWxzRmlsdGVyZWQgPSBbLi4ubGFiZWxzVmFsdWVdO1xuICAgICAgICBsYWJlbHNGaWx0ZXJlZC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBpZiAobGFiZWxzRmlsdGVyZWQubGVuZ3RoID4gMSkge1xuICAgICAgICAgIGlmIChtYXRjaGVyKGxhYmVsc0ZpbHRlcmVkLmpvaW4oJyAnKSwgbGFiZWxsZWRFbGVtZW50LCB0ZXh0LCBtYXRjaE5vcm1hbGl6ZXIpKSB7XG4gICAgICAgICAgICBsYWJlbGxlZEVsZW1lbnRzLnB1c2gobGFiZWxsZWRFbGVtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbGFiZWxsZWRFbGVtZW50cztcbiAgfSwgW10pLmNvbmNhdCgoMCwgX2FsbFV0aWxzLnF1ZXJ5QWxsQnlBdHRyaWJ1dGUpKCdhcmlhLWxhYmVsJywgY29udGFpbmVyLCB0ZXh0LCB7XG4gICAgZXhhY3QsXG4gICAgbm9ybWFsaXplcjogbWF0Y2hOb3JtYWxpemVyXG4gIH0pKTtcbiAgcmV0dXJuIEFycmF5LmZyb20obmV3IFNldChtYXRjaGluZ0xhYmVsbGVkRWxlbWVudHMpKS5maWx0ZXIoZWxlbWVudCA9PiBlbGVtZW50Lm1hdGNoZXMoc2VsZWN0b3IpKTtcbn07XG5cbi8vIHRoZSBnZXRBbGwqIHF1ZXJ5IHdvdWxkIG5vcm1hbGx5IGxvb2sgbGlrZSB0aGlzOlxuLy8gY29uc3QgZ2V0QWxsQnlMYWJlbFRleHQgPSBtYWtlR2V0QWxsUXVlcnkoXG4vLyAgIHF1ZXJ5QWxsQnlMYWJlbFRleHQsXG4vLyAgIChjLCB0ZXh0KSA9PiBgVW5hYmxlIHRvIGZpbmQgYSBsYWJlbCB3aXRoIHRoZSB0ZXh0IG9mOiAke3RleHR9YCxcbi8vIClcbi8vIGhvd2V2ZXIsIHdlIGNhbiBnaXZlIGEgbW9yZSBoZWxwZnVsIGVycm9yIG1lc3NhZ2UgdGhhbiB0aGUgZ2VuZXJpYyBvbmUsXG4vLyBzbyB3ZSdyZSB3cml0aW5nIHRoaXMgb25lIG91dCBieSBoYW5kLlxuY29uc3QgZ2V0QWxsQnlMYWJlbFRleHQgPSAoY29udGFpbmVyLCB0ZXh0LCAuLi5yZXN0KSA9PiB7XG4gIGNvbnN0IGVscyA9IHF1ZXJ5QWxsQnlMYWJlbFRleHQoY29udGFpbmVyLCB0ZXh0LCAuLi5yZXN0KTtcbiAgaWYgKCFlbHMubGVuZ3RoKSB7XG4gICAgY29uc3QgbGFiZWxzID0gcXVlcnlBbGxMYWJlbHNCeVRleHQoY29udGFpbmVyLCB0ZXh0LCAuLi5yZXN0KTtcbiAgICBpZiAobGFiZWxzLmxlbmd0aCkge1xuICAgICAgY29uc3QgdGFnTmFtZXMgPSBsYWJlbHMubWFwKGxhYmVsID0+IGdldFRhZ05hbWVPZkVsZW1lbnRBc3NvY2lhdGVkV2l0aExhYmVsVmlhRm9yKGNvbnRhaW5lciwgbGFiZWwpKS5maWx0ZXIodGFnTmFtZSA9PiAhIXRhZ05hbWUpO1xuICAgICAgaWYgKHRhZ05hbWVzLmxlbmd0aCkge1xuICAgICAgICB0aHJvdyAoMCwgX2NvbmZpZy5nZXRDb25maWcpKCkuZ2V0RWxlbWVudEVycm9yKHRhZ05hbWVzLm1hcCh0YWdOYW1lID0+IGBGb3VuZCBhIGxhYmVsIHdpdGggdGhlIHRleHQgb2Y6ICR7dGV4dH0sIGhvd2V2ZXIgdGhlIGVsZW1lbnQgYXNzb2NpYXRlZCB3aXRoIHRoaXMgbGFiZWwgKDwke3RhZ05hbWV9IC8+KSBpcyBub24tbGFiZWxsYWJsZSBbaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1sYWJlbF0uIElmIHlvdSByZWFsbHkgbmVlZCB0byBsYWJlbCBhIDwke3RhZ05hbWV9IC8+LCB5b3UgY2FuIHVzZSBhcmlhLWxhYmVsIG9yIGFyaWEtbGFiZWxsZWRieSBpbnN0ZWFkLmApLmpvaW4oJ1xcblxcbicpLCBjb250YWluZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgKDAsIF9jb25maWcuZ2V0Q29uZmlnKSgpLmdldEVsZW1lbnRFcnJvcihgRm91bmQgYSBsYWJlbCB3aXRoIHRoZSB0ZXh0IG9mOiAke3RleHR9LCBob3dldmVyIG5vIGZvcm0gY29udHJvbCB3YXMgZm91bmQgYXNzb2NpYXRlZCB0byB0aGF0IGxhYmVsLiBNYWtlIHN1cmUgeW91J3JlIHVzaW5nIHRoZSBcImZvclwiIGF0dHJpYnV0ZSBvciBcImFyaWEtbGFiZWxsZWRieVwiIGF0dHJpYnV0ZSBjb3JyZWN0bHkuYCwgY29udGFpbmVyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgKDAsIF9jb25maWcuZ2V0Q29uZmlnKSgpLmdldEVsZW1lbnRFcnJvcihgVW5hYmxlIHRvIGZpbmQgYSBsYWJlbCB3aXRoIHRoZSB0ZXh0IG9mOiAke3RleHR9YCwgY29udGFpbmVyKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGVscztcbn07XG5mdW5jdGlvbiBnZXRUYWdOYW1lT2ZFbGVtZW50QXNzb2NpYXRlZFdpdGhMYWJlbFZpYUZvcihjb250YWluZXIsIGxhYmVsKSB7XG4gIGNvbnN0IGh0bWxGb3IgPSBsYWJlbC5nZXRBdHRyaWJ1dGUoJ2ZvcicpO1xuICBpZiAoIWh0bWxGb3IpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBlbGVtZW50ID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoYFtpZD1cIiR7aHRtbEZvcn1cIl1gKTtcbiAgcmV0dXJuIGVsZW1lbnQgPyBlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA6IG51bGw7XG59XG5cbi8vIHRoZSByZWFzb24gbWVudGlvbmVkIGFib3ZlIGlzIHRoZSBzYW1lIHJlYXNvbiB3ZSdyZSBub3QgdXNpbmcgYnVpbGRRdWVyaWVzXG5jb25zdCBnZXRNdWx0aXBsZUVycm9yID0gKGMsIHRleHQpID0+IGBGb3VuZCBtdWx0aXBsZSBlbGVtZW50cyB3aXRoIHRoZSB0ZXh0IG9mOiAke3RleHR9YDtcbmNvbnN0IHF1ZXJ5QnlMYWJlbFRleHQgPSBleHBvcnRzLnF1ZXJ5QnlMYWJlbFRleHQgPSAoMCwgX2FsbFV0aWxzLndyYXBTaW5nbGVRdWVyeVdpdGhTdWdnZXN0aW9uKSgoMCwgX2FsbFV0aWxzLm1ha2VTaW5nbGVRdWVyeSkocXVlcnlBbGxCeUxhYmVsVGV4dCwgZ2V0TXVsdGlwbGVFcnJvciksIHF1ZXJ5QWxsQnlMYWJlbFRleHQubmFtZSwgJ3F1ZXJ5Jyk7XG5jb25zdCBnZXRCeUxhYmVsVGV4dCA9ICgwLCBfYWxsVXRpbHMubWFrZVNpbmdsZVF1ZXJ5KShnZXRBbGxCeUxhYmVsVGV4dCwgZ2V0TXVsdGlwbGVFcnJvcik7XG5jb25zdCBmaW5kQWxsQnlMYWJlbFRleHQgPSBleHBvcnRzLmZpbmRBbGxCeUxhYmVsVGV4dCA9ICgwLCBfYWxsVXRpbHMubWFrZUZpbmRRdWVyeSkoKDAsIF9hbGxVdGlscy53cmFwQWxsQnlRdWVyeVdpdGhTdWdnZXN0aW9uKShnZXRBbGxCeUxhYmVsVGV4dCwgZ2V0QWxsQnlMYWJlbFRleHQubmFtZSwgJ2ZpbmRBbGwnKSk7XG5jb25zdCBmaW5kQnlMYWJlbFRleHQgPSBleHBvcnRzLmZpbmRCeUxhYmVsVGV4dCA9ICgwLCBfYWxsVXRpbHMubWFrZUZpbmRRdWVyeSkoKDAsIF9hbGxVdGlscy53cmFwU2luZ2xlUXVlcnlXaXRoU3VnZ2VzdGlvbikoZ2V0QnlMYWJlbFRleHQsIGdldEFsbEJ5TGFiZWxUZXh0Lm5hbWUsICdmaW5kJykpO1xuY29uc3QgZ2V0QWxsQnlMYWJlbFRleHRXaXRoU3VnZ2VzdGlvbnMgPSBleHBvcnRzLmdldEFsbEJ5TGFiZWxUZXh0ID0gKDAsIF9hbGxVdGlscy53cmFwQWxsQnlRdWVyeVdpdGhTdWdnZXN0aW9uKShnZXRBbGxCeUxhYmVsVGV4dCwgZ2V0QWxsQnlMYWJlbFRleHQubmFtZSwgJ2dldEFsbCcpO1xuY29uc3QgZ2V0QnlMYWJlbFRleHRXaXRoU3VnZ2VzdGlvbnMgPSBleHBvcnRzLmdldEJ5TGFiZWxUZXh0ID0gKDAsIF9hbGxVdGlscy53cmFwU2luZ2xlUXVlcnlXaXRoU3VnZ2VzdGlvbikoZ2V0QnlMYWJlbFRleHQsIGdldEFsbEJ5TGFiZWxUZXh0Lm5hbWUsICdnZXQnKTtcbmNvbnN0IHF1ZXJ5QWxsQnlMYWJlbFRleHRXaXRoU3VnZ2VzdGlvbnMgPSBleHBvcnRzLnF1ZXJ5QWxsQnlMYWJlbFRleHQgPSAoMCwgX2FsbFV0aWxzLndyYXBBbGxCeVF1ZXJ5V2l0aFN1Z2dlc3Rpb24pKHF1ZXJ5QWxsQnlMYWJlbFRleHQsIHF1ZXJ5QWxsQnlMYWJlbFRleHQubmFtZSwgJ3F1ZXJ5QWxsJyk7Il0sInZlcnNpb24iOjN9
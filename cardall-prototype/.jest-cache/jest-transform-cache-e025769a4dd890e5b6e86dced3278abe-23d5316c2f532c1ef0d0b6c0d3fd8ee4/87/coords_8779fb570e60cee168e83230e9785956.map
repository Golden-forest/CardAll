{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\node_modules\\dnd-core\\dist\\utils\\coords.js","mappings":";;AAII,kBAKH;AAKG,4BAKH;AAQG,sDAMH;AAKG,wEAMH;AA5CD;;;;GAIG,CAAC,SAAgB,GAAG,CAAC,CAAC,EAAE,CAAC;IACxB,OAAO;QACH,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACZ,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;KACf,CAAC;AACN,CAAC;AACD;;;;GAIG,CAAC,SAAgB,QAAQ,CAAC,CAAC,EAAE,CAAC;IAC7B,OAAO;QACH,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACZ,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;KACf,CAAC;AACN,CAAC;AACD;;;;;;;GAOG,CAAC,SAAgB,qBAAqB,CAAC,KAAK;IAC3C,MAAM,EAAE,YAAY,EAAG,mBAAmB,EAAG,yBAAyB,EAAG,GAAG,KAAK,CAAC;IAClF,IAAI,CAAC,YAAY,IAAI,CAAC,mBAAmB,IAAI,CAAC,yBAAyB,EAAE,CAAC;QACtE,OAAO,IAAI,CAAC;IAChB,CAAC;IACD,OAAO,QAAQ,CAAC,GAAG,CAAC,YAAY,EAAE,yBAAyB,CAAC,EAAE,mBAAmB,CAAC,CAAC;AACvF,CAAC;AACD;;;;GAIG,CAAC,SAAgB,8BAA8B,CAAC,KAAK;IACpD,MAAM,EAAE,YAAY,EAAG,mBAAmB,EAAG,GAAG,KAAK,CAAC;IACtD,IAAI,CAAC,YAAY,IAAI,CAAC,mBAAmB,EAAE,CAAC;QACxC,OAAO,IAAI,CAAC;IAChB,CAAC;IACD,OAAO,QAAQ,CAAC,YAAY,EAAE,mBAAmB,CAAC,CAAC;AACvD,CAAC;AAED,kCAAkC","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\node_modules\\dnd-core\\dist\\utils\\coords.js"],"sourcesContent":["/**\n * Coordinate addition\n * @param a The first coordinate\n * @param b The second coordinate\n */ export function add(a, b) {\n    return {\n        x: a.x + b.x,\n        y: a.y + b.y\n    };\n}\n/**\n * Coordinate subtraction\n * @param a The first coordinate\n * @param b The second coordinate\n */ export function subtract(a, b) {\n    return {\n        x: a.x - b.x,\n        y: a.y - b.y\n    };\n}\n/**\n * Returns the cartesian distance of the drag source component's position, based on its position\n * at the time when the current drag operation has started, and the movement difference.\n *\n * Returns null if no item is being dragged.\n *\n * @param state The offset state to compute from\n */ export function getSourceClientOffset(state) {\n    const { clientOffset , initialClientOffset , initialSourceClientOffset  } = state;\n    if (!clientOffset || !initialClientOffset || !initialSourceClientOffset) {\n        return null;\n    }\n    return subtract(add(clientOffset, initialSourceClientOffset), initialClientOffset);\n}\n/**\n * Determines the x,y offset between the client offset and the initial client offset\n *\n * @param state The offset state to compute from\n */ export function getDifferenceFromInitialOffset(state) {\n    const { clientOffset , initialClientOffset  } = state;\n    if (!clientOffset || !initialClientOffset) {\n        return null;\n    }\n    return subtract(clientOffset, initialClientOffset);\n}\n\n//# sourceMappingURL=coords.js.map"],"version":3}
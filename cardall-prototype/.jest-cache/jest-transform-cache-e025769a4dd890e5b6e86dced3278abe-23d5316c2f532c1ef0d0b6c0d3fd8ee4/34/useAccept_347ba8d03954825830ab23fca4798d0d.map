{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\node_modules\\react-dnd\\dist\\hooks\\useDrop\\useAccept.js","mappings":";;AAMI,8BAUH;AAhBD,oDAAiD;AACjD,iCAAgC;AAChC;;;;GAIG,CAAC,SAAgB,SAAS,CAAC,IAAI;IAC9B,MAAM,EAAE,MAAM,EAAG,GAAG,IAAI,CAAC;IACzB,OAAO,IAAA,eAAO,EAAC,GAAE,EAAE;QACf,IAAA,qBAAS,EAAC,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE,wBAAwB,CAAC,CAAC;QACzD,OAAO,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACpC,MAAM;SACT,CAAC;IACN,CAAC,EAAE;QACC,MAAM;KACT,CAAC,CAAC;AACP,CAAC;AAED,qCAAqC","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\node_modules\\react-dnd\\dist\\hooks\\useDrop\\useAccept.js"],"sourcesContent":["import { invariant } from '@react-dnd/invariant';\nimport { useMemo } from 'react';\n/**\n * Internal utility hook to get an array-version of spec.accept.\n * The main utility here is that we aren't creating a new array on every render if a non-array spec.accept is passed in.\n * @param spec\n */ export function useAccept(spec) {\n    const { accept  } = spec;\n    return useMemo(()=>{\n        invariant(spec.accept != null, 'accept must be defined');\n        return Array.isArray(accept) ? accept : [\n            accept\n        ];\n    }, [\n        accept\n    ]);\n}\n\n//# sourceMappingURL=useAccept.js.map"],"version":3}
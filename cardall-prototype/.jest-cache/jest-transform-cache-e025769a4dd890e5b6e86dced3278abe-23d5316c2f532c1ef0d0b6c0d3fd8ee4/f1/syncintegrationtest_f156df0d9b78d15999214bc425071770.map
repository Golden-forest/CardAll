{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\tests\\unit\\services\\sync-integration.test.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\tests\\unit\\services\\sync-integration.test.ts"],"sourcesContent":["import { SyncIntegrationService, type SyncSystemConfig, type SyncSystemStatus, type SyncEvent } from '@/services/sync-integration'\nimport { LocalOperationService } from '@/services/local-operation'\nimport { NetworkMonitorService } from '@/services/network-monitor'\nimport { SyncStrategyService } from '@/services/sync-strategy'\nimport { SyncPerformanceOptimizer } from '@/services/sync-performance'\n\n// 模拟所有服务\njest.mock('@/services/local-operation')\njest.mock('@/services/network-monitor')\njest.mock('@/services/sync-strategy')\njest.mock('@/services/sync-performance')\n\ndescribe('SyncIntegrationService', () => {\n  let service: SyncIntegrationService\n  let mockLocalOperation: jest.Mocked<LocalOperationService>\n  let mockNetworkMonitor: jest.Mocked<NetworkMonitorService>\n  let mockSyncStrategy: jest.Mocked<SyncStrategyService>\n  let mockPerformanceOptimizer: jest.Mocked<SyncPerformanceOptimizer>\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n    \n    // 创建模拟实例\n    mockLocalOperation = new LocalOperationService() as any\n    mockNetworkMonitor = new NetworkMonitorService() as any\n    mockSyncStrategy = new SyncStrategyService() as any\n    mockPerformanceOptimizer = new SyncPerformanceOptimizer() as any\n\n    service = new SyncIntegrationService()\n  })\n\n  describe('初始化', () => {\n    it('应该正确初始化集成服务', async () => {\n      mockLocalOperation.initialize.mockResolvedValue(undefined)\n      mockNetworkMonitor.initialize.mockResolvedValue(undefined)\n      mockSyncStrategy.initialize.mockResolvedValue(undefined)\n      mockPerformanceOptimizer.initialize.mockResolvedValue(undefined)\n\n      await service.initialize()\n\n      expect(mockLocalOperation.initialize).toHaveBeenCalled()\n      expect(mockNetworkMonitor.initialize).toHaveBeenCalled()\n      expect(mockSyncStrategy.initialize).toHaveBeenCalled()\n      expect(mockPerformanceOptimizer.initialize).toHaveBeenCalled()\n    })\n\n    it('应该处理初始化失败', async () => {\n      mockLocalOperation.initialize.mockRejectedValue(new Error('Local operation init failed'))\n\n      await expect(service.initialize()).rejects.toThrow('Local operation init failed')\n    })\n\n    it('应该等待所有组件准备就绪', async () => {\n      mockLocalOperation.initialize.mockResolvedValue(undefined)\n      mockNetworkMonitor.initialize.mockResolvedValue(undefined)\n      mockSyncStrategy.initialize.mockResolvedValue(undefined)\n      mockPerformanceOptimizer.initialize.mockResolvedValue(undefined)\n\n      await service.initialize()\n\n      const status = service.getSystemStatus()\n      expect(status.componentsReady.localQueue).toBe(true)\n      expect(status.componentsReady.networkMonitor).toBe(true)\n      expect(status.componentsReady.syncStrategy).toBe(true)\n      expect(status.componentsReady.performanceOptimizer).toBe(true)\n      expect(status.isInitialized).toBe(true)\n    })\n  })\n\n  describe('同步触发', () => {\n    beforeEach(async () => {\n      // 初始化服务\n      mockLocalOperation.initialize.mockResolvedValue(undefined)\n      mockNetworkMonitor.initialize.mockResolvedValue(undefined)\n      mockSyncStrategy.initialize.mockResolvedValue(undefined)\n      mockPerformanceOptimizer.initialize.mockResolvedValue(undefined)\n      await service.initialize()\n    })\n\n    it('应该触发增量同步', async () => {\n      const userId = 'user-123'\n      const lastSyncTime = new Date(Date.now() - 86400000)\n\n      mockNetworkMonitor.getCurrentState.mockReturnValue({\n        isOnline: true,\n        connectionType: '4g',\n        quality: { level: 'excellent', score: 90, stability: 0.95 }\n      })\n\n      mockSyncStrategy.performIncrementalSync.mockResolvedValue({\n        total: 10,\n        processed: 10,\n        downloaded: 7,\n        uploaded: 3,\n        conflicts: 0,\n        isComplete: true,\n        isSuccessful: true,\n        startTime: new Date(),\n        endTime: new Date(),\n        duration: 5000\n      })\n\n      await service.triggerSync({ forceFullSync: false })\n\n      expect(mockSyncStrategy.performIncrementalSync).toHaveBeenCalledWith(userId, expect.any(Date))\n    })\n\n    it('应该触发完整同步', async () => {\n      const userId = 'user-123'\n\n      mockNetworkMonitor.getCurrentState.mockReturnValue({\n        isOnline: true,\n        connectionType: '4g',\n        quality: { level: 'excellent', score: 90, stability: 0.95 }\n      })\n\n      mockSyncStrategy.performFullSync.mockResolvedValue({\n        total: 50,\n        processed: 50,\n        downloaded: 30,\n        uploaded: 20,\n        conflicts: 2,\n        isComplete: true,\n        isSuccessful: true,\n        startTime: new Date(),\n        endTime: new Date(),\n        duration: 15000\n      })\n\n      await service.triggerSync({ forceFullSync: true })\n\n      expect(mockSyncStrategy.performFullSync).toHaveBeenCalledWith(userId)\n    })\n\n    it('应该在网络离线时跳过同步', async () => {\n      mockNetworkMonitor.getCurrentState.mockReturnValue({\n        isOnline: false,\n        connectionType: 'none',\n        quality: { level: 'offline', score: 0, stability: 0 }\n      })\n\n      await service.triggerSync()\n\n      expect(mockSyncStrategy.performIncrementalSync).not.toHaveBeenCalled()\n    })\n\n    it('应该在网络质量差时调整同步策略', async () => {\n      const userId = 'user-123'\n\n      mockNetworkMonitor.getCurrentState.mockReturnValue({\n        isOnline: true,\n        connectionType: '2g',\n        quality: { level: 'poor', score: 30, stability: 0.5 }\n      })\n\n      mockNetworkMonitor.getSyncRecommendations.mockReturnValue({\n        batchSize: 5,\n        maxConcurrentOperations: 1,\n        enableBackgroundSync: false,\n        enableCompression: true,\n        recommendedSyncType: 'incremental'\n      })\n\n      mockSyncStrategy.performIncrementalSync.mockResolvedValue({\n        total: 5,\n        processed: 5,\n        downloaded: 3,\n        uploaded: 2,\n        conflicts: 0,\n        isComplete: true,\n        isSuccessful: true,\n        startTime: new Date(),\n        endTime: new Date(),\n        duration: 8000\n      })\n\n      await service.triggerSync()\n\n      expect(mockSyncStrategy.performIncrementalSync).toHaveBeenCalled()\n    })\n\n    it('应该处理同步过程中的错误', async () => {\n      const userId = 'user-123'\n\n      mockNetworkMonitor.getCurrentState.mockReturnValue({\n        isOnline: true,\n        connectionType: '4g',\n        quality: { level: 'excellent', score: 90, stability: 0.95 }\n      })\n\n      mockSyncStrategy.performIncrementalSync.mockRejectedValue(new Error('Sync failed'))\n\n      await expect(service.triggerSync()).rejects.toThrow('Sync failed')\n    })\n  })\n\n  describe('操作管理', () => {\n    beforeEach(async () => {\n      mockLocalOperation.initialize.mockResolvedValue(undefined)\n      mockNetworkMonitor.initialize.mockResolvedValue(undefined)\n      mockSyncStrategy.initialize.mockResolvedValue(undefined)\n      mockPerformanceOptimizer.initialize.mockResolvedValue(undefined)\n      await service.initialize()\n    })\n\n    it('应该添加同步操作', async () => {\n      const operation = {\n        type: 'create' as const,\n        table: 'cards' as const,\n        data: { frontContent: 'test', backContent: 'answer' },\n        localId: 'card-1'\n      }\n\n      mockLocalOperation.addOperation.mockResolvedValue('op-123')\n\n      const operationId = await service.addSyncOperation(operation)\n\n      expect(mockLocalOperation.addOperation).toHaveBeenCalledWith(operation)\n      expect(operationId).toBe('op-123')\n    })\n\n    it('应该获取队列状态', async () => {\n      const mockStats = {\n        totalOperations: 5,\n        byType: { create: 2, update: 3 },\n        byStatus: { pending: 3, processing: 1, completed: 1 },\n        averageRetryCount: 0.5\n      }\n\n      mockLocalOperation.getQueueStats.mockResolvedValue(mockStats)\n\n      const stats = await service.getQueueStatus()\n\n      expect(stats).toBe(mockStats)\n    })\n\n    it('应该清空同步队列', async () => {\n      await service.clearSyncQueue()\n\n      expect(mockLocalOperation.clearQueue).toHaveBeenCalled()\n    })\n  })\n\n  describe('网络状态管理', () => {\n    beforeEach(async () => {\n      mockLocalOperation.initialize.mockResolvedValue(undefined)\n      mockNetworkMonitor.initialize.mockResolvedValue(undefined)\n      mockSyncStrategy.initialize.mockResolvedValue(undefined)\n      mockPerformanceOptimizer.initialize.mockResolvedValue(undefined)\n      await service.initialize()\n    })\n\n    it('应该监听网络状态变化', () => {\n      const mockListener = jest.fn()\n      service.onNetworkChange(mockListener)\n\n      // 模拟网络状态变化\n      const networkEvent = {\n        type: 'status_change' as const,\n        isOnline: false,\n        connectionType: 'none',\n        timestamp: new Date(),\n        quality: { level: 'offline', score: 0, stability: 0 }\n      }\n\n      // 触发网络状态变化回调\n      service['handleNetworkChange'](networkEvent)\n\n      expect(mockListener).toHaveBeenCalledWith(networkEvent)\n    })\n\n    it('应该在网络恢复时自动触发同步', async () => {\n      const userId = 'user-123'\n\n      mockNetworkMonitor.getCurrentState.mockReturnValue({\n        isOnline: true,\n        connectionType: '4g',\n        quality: { level: 'excellent', score: 90, stability: 0.95 }\n      })\n\n      mockSyncStrategy.performIncrementalSync.mockResolvedValue({\n        total: 10,\n        processed: 10,\n        downloaded: 7,\n        uploaded: 3,\n        conflicts: 0,\n        isComplete: true,\n        isSuccessful: true,\n        startTime: new Date(),\n        endTime: new Date(),\n        duration: 5000\n      })\n\n      // 模拟网络恢复事件\n      const networkEvent = {\n        type: 'status_change' as const,\n        isOnline: true,\n        connectionType: '4g',\n        timestamp: new Date(),\n        quality: { level: 'excellent', score: 90, stability: 0.95 }\n      }\n\n      await service['handleNetworkChange'](networkEvent)\n\n      expect(mockSyncStrategy.performIncrementalSync).toHaveBeenCalled()\n    })\n  })\n\n  describe('性能优化集成', () => {\n    beforeEach(async () => {\n      mockLocalOperation.initialize.mockResolvedValue(undefined)\n      mockNetworkMonitor.initialize.mockResolvedValue(undefined)\n      mockSyncStrategy.initialize.mockResolvedValue(undefined)\n      mockPerformanceOptimizer.initialize.mockResolvedValue(undefined)\n      await service.initialize()\n    })\n\n    it('应该使用性能优化器执行操作', async () => {\n      const mockOperation = {\n        id: 'op-1',\n        type: 'create' as const,\n        table: 'cards' as const,\n        data: { frontContent: 'test' },\n        localId: 'card-1',\n        timestamp: new Date().toISOString(),\n        retryCount: 0,\n        status: 'pending' as const,\n        localVersion: 1,\n        priority: 'normal' as const\n      }\n\n      mockLocalOperation.getPendingOperations.mockResolvedValue([mockOperation])\n      mockPerformanceOptimizer.executeOptimizedOperation.mockResolvedValue({\n        success: true,\n        operationId: 'op-1',\n        latency: 100\n      })\n\n      await service['processOptimizedQueue']()\n\n      expect(mockPerformanceOptimizer.executeOptimizedOperation).toHaveBeenCalledWith(\n        mockOperation,\n        expect.any(Function)\n      )\n    })\n\n    it('应该根据网络质量调整性能参数', async () => {\n      mockNetworkMonitor.getCurrentState.mockReturnValue({\n        isOnline: true,\n        connectionType: '2g',\n        quality: { level: 'poor', score: 30, stability: 0.5 }\n      })\n\n      mockNetworkMonitor.getSyncRecommendations.mockReturnValue({\n        batchSize: 5,\n        maxConcurrentOperations: 1,\n        enableBackgroundSync: false,\n        enableCompression: true,\n        recommendedSyncType: 'incremental'\n      })\n\n      await service['adaptToNetworkConditions']()\n\n      expect(mockPerformanceOptimizer.updateConfig).toHaveBeenCalledWith(\n        expect.objectContaining({\n          throttle: expect.objectContaining({\n            maxConcurrentOperations: 1\n          })\n        })\n      )\n    })\n  })\n\n  describe('健康检查', () => {\n    beforeEach(async () => {\n      mockLocalOperation.initialize.mockResolvedValue(undefined)\n      mockNetworkMonitor.initialize.mockResolvedValue(undefined)\n      mockSyncStrategy.initialize.mockResolvedValue(undefined)\n      mockPerformanceOptimizer.initialize.mockResolvedValue(undefined)\n      await service.initialize()\n    })\n\n    it('应该执行系统健康检查', async () => {\n      mockLocalOperation.getQueueStats.mockResolvedValue({\n        totalOperations: 0,\n        byType: {},\n        byStatus: {},\n        averageRetryCount: 0\n      })\n\n      mockNetworkMonitor.getCurrentState.mockReturnValue({\n        isOnline: true,\n        connectionType: '4g',\n        quality: { level: 'excellent', score: 90, stability: 0.95 }\n      })\n\n      mockSyncStrategy.getSyncStats.mockResolvedValue({\n        totalSyncs: 10,\n        successfulSyncs: 9,\n        failedSyncs: 1,\n        successRate: 90\n      })\n\n      mockPerformanceOptimizer.getCurrentMetrics.mockReturnValue({\n        totalOperations: 100,\n        successfulOperations: 95,\n        failedOperations: 5,\n        successRate: 95,\n        averageResponseTime: 150\n      })\n\n      const health = await service.performHealthCheck()\n\n      expect(health.overallHealth).toBe('good')\n      expect(health.components.localQueue.health).toBe('good')\n      expect(health.components.networkMonitor.health).toBe('excellent')\n      expect(health.components.syncStrategy.health).toBe('good')\n      expect(health.components.performanceOptimizer.health).toBe('excellent')\n    })\n\n    it('应该检测不健康的组件', async () => {\n      mockLocalOperation.getQueueStats.mockResolvedValue({\n        totalOperations: 50,\n        byType: {},\n        byStatus: { failed: 30 },\n        averageRetryCount: 5\n      })\n\n      const health = await service.performHealthCheck()\n\n      expect(health.components.localQueue.health).toBe('poor')\n      expect(health.overallHealth).toBe('warning')\n    })\n  })\n\n  describe('配置管理', () => {\n    it('应该更新系统配置', async () => {\n      const newConfig: SyncSystemConfig = {\n        enableAutoSync: true,\n        syncInterval: 300000,\n        enableBackgroundSync: true,\n        enableCompression: true,\n        enableConflictResolution: true,\n        enablePerformanceOptimization: true,\n        enableNetworkAdaptation: true,\n        enableHealthMonitoring: true,\n        maxQueueSize: 1000,\n        maxRetryCount: 5,\n        syncTimeout: 30000\n      }\n\n      await service.updateConfig(newConfig)\n\n      expect(service.getSystemConfig()).toMatchObject(newConfig)\n    })\n\n    it('应该验证配置参数', () => {\n      const invalidConfig = {\n        syncInterval: -1000,\n        maxQueueSize: -1\n      }\n\n      expect(() => service.updateConfig(invalidConfig as any)).toThrow()\n    })\n  })\n\n  describe('事件处理', () => {\n    beforeEach(async () => {\n      mockLocalOperation.initialize.mockResolvedValue(undefined)\n      mockNetworkMonitor.initialize.mockResolvedValue(undefined)\n      mockSyncStrategy.initialize.mockResolvedValue(undefined)\n      mockPerformanceOptimizer.initialize.mockResolvedValue(undefined)\n      await service.initialize()\n    })\n\n    it('应该能够添加和移除系统事件监听器', () => {\n      const mockListener = jest.fn()\n      const unsubscribe = service.onSystemEvent(mockListener)\n\n      expect(typeof unsubscribe).toBe('function')\n\n      // 触发事件\n      const event: SyncEvent = {\n        type: 'sync_started',\n        timestamp: new Date(),\n        data: { syncType: 'incremental' }\n      }\n\n      service['notifySystemEvent'](event)\n      expect(mockListener).toHaveBeenCalledWith(event)\n\n      // 移除监听器\n      unsubscribe()\n      service['notifySystemEvent'](event)\n      expect(mockListener).toHaveBeenCalledTimes(1)\n    })\n\n    it('应该正确通知所有监听器', () => {\n      const mockListener1 = jest.fn()\n      const mockListener2 = jest.fn()\n\n      service.onSystemEvent(mockListener1)\n      service.onSystemEvent(mockListener2)\n\n      const event: SyncEvent = {\n        type: 'sync_completed',\n        timestamp: new Date(),\n        data: { \n          syncType: 'full',\n          duration: 15000,\n          success: true,\n          downloaded: 30,\n          uploaded: 20,\n          conflicts: 2\n        }\n      }\n\n      service['notifySystemEvent'](event)\n\n      expect(mockListener1).toHaveBeenCalledWith(event)\n      expect(mockListener2).toHaveBeenCalledWith(event)\n    })\n  })\n\n  describe('定时同步', () => {\n    beforeEach(async () => {\n      mockLocalOperation.initialize.mockResolvedValue(undefined)\n      mockNetworkMonitor.initialize.mockResolvedValue(undefined)\n      mockSyncStrategy.initialize.mockResolvedValue(undefined)\n      mockPerformanceOptimizer.initialize.mockResolvedValue(undefined)\n      await service.initialize()\n    })\n\n    it('应该启动定时同步', () => {\n      jest.useFakeTimers()\n      \n      service.startScheduledSync()\n      \n      expect((service as any).syncTimer).toBeDefined()\n      \n      // 清理\n      service.stopScheduledSync()\n      jest.useRealTimers()\n    })\n\n    it('应该停止定时同步', () => {\n      jest.useFakeTimers()\n      \n      service.startScheduledSync()\n      expect((service as any).syncTimer).toBeDefined()\n      \n      service.stopScheduledSync()\n      expect((service as any).syncTimer).toBeNull()\n      \n      jest.useRealTimers()\n    })\n\n    it('应该按配置的间隔执行同步', async () => {\n      jest.useFakeTimers()\n      \n      const userId = 'user-123'\n      \n      mockNetworkMonitor.getCurrentState.mockReturnValue({\n        isOnline: true,\n        connectionType: '4g',\n        quality: { level: 'excellent', score: 90, stability: 0.95 }\n      })\n\n      mockSyncStrategy.performIncrementalSync.mockResolvedValue({\n        total: 5,\n        processed: 5,\n        downloaded: 3,\n        uploaded: 2,\n        conflicts: 0,\n        isComplete: true,\n        isSuccessful: true,\n        startTime: new Date(),\n        endTime: new Date(),\n        duration: 3000\n      })\n\n      // 设置5分钟间隔\n      service.updateConfig({ syncInterval: 300000 })\n      service.startScheduledSync()\n\n      // 快进时间\n      jest.advanceTimersByTime(300000)\n\n      expect(mockSyncStrategy.performIncrementalSync).toHaveBeenCalled()\n      \n      // 清理\n      service.stopScheduledSync()\n      jest.useRealTimers()\n    })\n  })\n\n  describe('系统状态', () => {\n    beforeEach(async () => {\n      mockLocalOperation.initialize.mockResolvedValue(undefined)\n      mockNetworkMonitor.initialize.mockResolvedValue(undefined)\n      mockSyncStrategy.initialize.mockResolvedValue(undefined)\n      mockPerformanceOptimizer.initialize.mockResolvedValue(undefined)\n      await service.initialize()\n    })\n\n    it('应该提供完整的系统状态', () => {\n      const status = service.getSystemStatus()\n\n      expect(status.isInitialized).toBe(true)\n      expect(status.componentsReady.localQueue).toBe(true)\n      expect(status.componentsReady.networkMonitor).toBe(true)\n      expect(status.componentsReady.syncStrategy).toBe(true)\n      expect(status.componentsReady.performanceOptimizer).toBe(true)\n      expect(status.lastSyncTime).toBeDefined()\n      expect(status.currentSyncActivity).toBeDefined()\n    })\n\n    it('应该追踪同步活动', () => {\n      const activity = service.getCurrentSyncActivity()\n\n      expect(activity.isActive).toBeDefined()\n      expect(activity.currentSyncType).toBeDefined()\n      expect(activity.startTime).toBeDefined()\n      expect(activity.progress).toBeDefined()\n    })\n  })\n\n  describe('清理和资源管理', () => {\n    beforeEach(async () => {\n      mockLocalOperation.initialize.mockResolvedValue(undefined)\n      mockNetworkMonitor.initialize.mockResolvedValue(undefined)\n      mockSyncStrategy.initialize.mockResolvedValue(undefined)\n      mockPerformanceOptimizer.initialize.mockResolvedValue(undefined)\n      await service.initialize()\n    })\n\n    it('应该正确清理资源', () => {\n      service.startScheduledSync()\n      expect((service as any).syncTimer).toBeDefined()\n\n      service.cleanup()\n      expect((service as any).syncTimer).toBeNull()\n    })\n\n    it('应该在组件销毁时清理事件监听器', () => {\n      const mockUnsubscribe = jest.fn()\n      \n      // 模拟添加事件监听器\n      ;(service as any).eventUnsubscribers.push(mockUnsubscribe)\n      \n      service.cleanup()\n      \n      expect(mockUnsubscribe).toHaveBeenCalled()\n    })\n  })\n\n  describe('错误处理', () => {\n    it('应该处理组件初始化错误', async () => {\n      mockLocalOperation.initialize.mockRejectedValue(new Error('Component init failed'))\n\n      await expect(service.initialize()).rejects.toThrow('Component init failed')\n\n      const status = service.getSystemStatus()\n      expect(status.isInitialized).toBe(false)\n    })\n\n    it('应该处理健康检查中的错误', async () => {\n      mockLocalOperation.getQueueStats.mockRejectedValue(new Error('Health check failed'))\n\n      const health = await service.performHealthCheck()\n\n      expect(health.overallHealth).toBe('critical')\n      expect(health.components.localQueue.health).toBe('unknown')\n      expect(health.components.localQueue.error).toBe('Health check failed')\n    })\n\n    it('应该处理同步触发中的异常', async () => {\n      const userId = 'user-123'\n\n      mockNetworkMonitor.getCurrentState.mockImplementation(() => {\n        throw new Error('Network monitor error')\n      })\n\n      await service.triggerSync()\n\n      // 应该优雅地处理错误而不抛出异常\n      expect(true).toBe(true)\n    })\n  })\n})"],"version":3}
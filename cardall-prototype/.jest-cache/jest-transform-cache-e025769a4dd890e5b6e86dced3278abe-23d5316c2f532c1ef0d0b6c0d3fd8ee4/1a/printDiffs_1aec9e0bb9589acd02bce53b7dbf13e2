4fab903dc57d9e584c4562f5c3b834e3
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
exports.diffStringsUnified = exports.diffStringsRaw = void 0;
var _cleanupSemantic = require('./cleanupSemantic');
var _diffLines = require('./diffLines');
var _diffStrings = _interopRequireDefault(require('./diffStrings'));
var _getAlignedDiffs = _interopRequireDefault(require('./getAlignedDiffs'));
var _normalizeDiffOptions = require('./normalizeDiffOptions');
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
const hasCommonDiff = (diffs, isMultiline) => {
    if (isMultiline) {
        // Important: Ignore common newline that was appended to multiline strings!
        const iLast = diffs.length - 1;
        return diffs.some((diff, i) => diff[0] === _cleanupSemantic.DIFF_EQUAL &&
            (i !== iLast || diff[1] !== '\n'));
    }
    return diffs.some(diff => diff[0] === _cleanupSemantic.DIFF_EQUAL);
};
// Compare two strings character-by-character.
// Format as comparison lines in which changed substrings have inverse colors.
const diffStringsUnified = (a, b, options) => {
    if (a !== b && a.length !== 0 && b.length !== 0) {
        const isMultiline = a.includes('\n') || b.includes('\n');
        // getAlignedDiffs assumes that a newline was appended to the strings.
        const diffs = diffStringsRaw(isMultiline ? `${a}\n` : a, isMultiline ? `${b}\n` : b, true // cleanupSemantic
        );
        if (hasCommonDiff(diffs, isMultiline)) {
            const optionsNormalized = (0, _normalizeDiffOptions.normalizeDiffOptions)(options);
            const lines = (0, _getAlignedDiffs.default)(diffs, optionsNormalized.changeColor);
            return (0, _diffLines.printDiffLines)(lines, optionsNormalized);
        }
    }
    // Fall back to line-by-line diff.
    return (0, _diffLines.diffLinesUnified)(a.split('\n'), b.split('\n'), options);
};
// Compare two strings character-by-character.
// Optionally clean up small common substrings, also known as chaff.
exports.diffStringsUnified = diffStringsUnified;
const diffStringsRaw = (a, b, cleanup) => {
    const diffs = (0, _diffStrings.default)(a, b);
    if (cleanup) {
        (0, _cleanupSemantic.cleanupSemantic)(diffs); // impure function
    }
    return diffs;
};
exports.diffStringsRaw = diffStringsRaw;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXG5vZGVfbW9kdWxlc1xcamVzdC1heGVcXG5vZGVfbW9kdWxlc1xcamVzdC1kaWZmXFxidWlsZFxccHJpbnREaWZmcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUU7SUFDM0MsS0FBSyxFQUFFLElBQUk7Q0FDWixDQUFDLENBQUM7QUFDSCxPQUFPLENBQUMsa0JBQWtCLEdBQUcsT0FBTyxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUM3RCxJQUFJLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBQ3BELElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN4QyxJQUFJLFlBQVksR0FBRyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztBQUNwRSxJQUFJLGdCQUFnQixHQUFHLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7QUFDNUUsSUFBSSxxQkFBcUIsR0FBRyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQztBQUM5RCxTQUFTLHNCQUFzQixDQUFDLEdBQUc7SUFDakMsT0FBTyxHQUFHLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0Q7Ozs7O0dBS0c7QUFFSCxNQUFNLGFBQWEsR0FBRyxDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUUsRUFBRTtJQUMzQyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQ2hCLDJFQUEyRTtRQUMzRSxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUMvQixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQ2YsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FDVixJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssZ0JBQWdCLENBQUMsVUFBVTtZQUN2QyxDQUFDLENBQUMsS0FBSyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUNwQyxDQUFDO0lBQ0osQ0FBQztJQUNELE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNyRSxDQUFDLENBQUM7QUFFRiw4Q0FBOEM7QUFDOUMsOEVBQThFO0FBQzlFLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxFQUFFO0lBQzNDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQ2hELE1BQU0sV0FBVyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV6RCxzRUFBc0U7UUFDdEUsTUFBTSxLQUFLLEdBQUcsY0FBYyxDQUMxQixXQUFXLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDMUIsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQzFCLElBQUksQ0FBQyxrQkFBa0I7U0FDeEIsQ0FBQztRQUVGLElBQUksYUFBYSxDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsRUFBRSxDQUFDO1lBQ3RDLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxDQUFDLEVBQUUscUJBQXFCLENBQUMsb0JBQW9CLENBQUMsQ0FDdkUsT0FBTyxDQUNSLENBQUM7WUFDRixNQUFNLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRSxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FDekMsS0FBSyxFQUNMLGlCQUFpQixDQUFDLFdBQVcsQ0FDOUIsQ0FBQztZQUNGLE9BQU8sQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEtBQUssRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2xFLENBQUM7SUFDSCxDQUFDO0lBRUQsa0NBQWtDO0lBQ2xDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLGdCQUFnQixDQUFDLENBQ3JDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQ2IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFDYixPQUFPLENBQ1IsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLDhDQUE4QztBQUM5QyxvRUFBb0U7QUFDcEUsT0FBTyxDQUFDLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDO0FBQ2hELE1BQU0sY0FBYyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsRUFBRTtJQUN2QyxNQUFNLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzlDLElBQUksT0FBTyxFQUFFLENBQUM7UUFDWixDQUFDLENBQUMsRUFBRSxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGtCQUFrQjtJQUNsRSxDQUFDO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDLENBQUM7QUFDRixPQUFPLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJEOlxcUHJvamVjdHNcXENhcmRFdmVyeXRoaW5nXFxjYXJkYWxsLXByb3RvdHlwZVxcbm9kZV9tb2R1bGVzXFxqZXN0LWF4ZVxcbm9kZV9tb2R1bGVzXFxqZXN0LWRpZmZcXGJ1aWxkXFxwcmludERpZmZzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRpZmZTdHJpbmdzVW5pZmllZCA9IGV4cG9ydHMuZGlmZlN0cmluZ3NSYXcgPSB2b2lkIDA7XG52YXIgX2NsZWFudXBTZW1hbnRpYyA9IHJlcXVpcmUoJy4vY2xlYW51cFNlbWFudGljJyk7XG52YXIgX2RpZmZMaW5lcyA9IHJlcXVpcmUoJy4vZGlmZkxpbmVzJyk7XG52YXIgX2RpZmZTdHJpbmdzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCcuL2RpZmZTdHJpbmdzJykpO1xudmFyIF9nZXRBbGlnbmVkRGlmZnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoJy4vZ2V0QWxpZ25lZERpZmZzJykpO1xudmFyIF9ub3JtYWxpemVEaWZmT3B0aW9ucyA9IHJlcXVpcmUoJy4vbm9ybWFsaXplRGlmZk9wdGlvbnMnKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ZGVmYXVsdDogb2JqfTtcbn1cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5jb25zdCBoYXNDb21tb25EaWZmID0gKGRpZmZzLCBpc011bHRpbGluZSkgPT4ge1xuICBpZiAoaXNNdWx0aWxpbmUpIHtcbiAgICAvLyBJbXBvcnRhbnQ6IElnbm9yZSBjb21tb24gbmV3bGluZSB0aGF0IHdhcyBhcHBlbmRlZCB0byBtdWx0aWxpbmUgc3RyaW5ncyFcbiAgICBjb25zdCBpTGFzdCA9IGRpZmZzLmxlbmd0aCAtIDE7XG4gICAgcmV0dXJuIGRpZmZzLnNvbWUoXG4gICAgICAoZGlmZiwgaSkgPT5cbiAgICAgICAgZGlmZlswXSA9PT0gX2NsZWFudXBTZW1hbnRpYy5ESUZGX0VRVUFMICYmXG4gICAgICAgIChpICE9PSBpTGFzdCB8fCBkaWZmWzFdICE9PSAnXFxuJylcbiAgICApO1xuICB9XG4gIHJldHVybiBkaWZmcy5zb21lKGRpZmYgPT4gZGlmZlswXSA9PT0gX2NsZWFudXBTZW1hbnRpYy5ESUZGX0VRVUFMKTtcbn07XG5cbi8vIENvbXBhcmUgdHdvIHN0cmluZ3MgY2hhcmFjdGVyLWJ5LWNoYXJhY3Rlci5cbi8vIEZvcm1hdCBhcyBjb21wYXJpc29uIGxpbmVzIGluIHdoaWNoIGNoYW5nZWQgc3Vic3RyaW5ncyBoYXZlIGludmVyc2UgY29sb3JzLlxuY29uc3QgZGlmZlN0cmluZ3NVbmlmaWVkID0gKGEsIGIsIG9wdGlvbnMpID0+IHtcbiAgaWYgKGEgIT09IGIgJiYgYS5sZW5ndGggIT09IDAgJiYgYi5sZW5ndGggIT09IDApIHtcbiAgICBjb25zdCBpc011bHRpbGluZSA9IGEuaW5jbHVkZXMoJ1xcbicpIHx8IGIuaW5jbHVkZXMoJ1xcbicpO1xuXG4gICAgLy8gZ2V0QWxpZ25lZERpZmZzIGFzc3VtZXMgdGhhdCBhIG5ld2xpbmUgd2FzIGFwcGVuZGVkIHRvIHRoZSBzdHJpbmdzLlxuICAgIGNvbnN0IGRpZmZzID0gZGlmZlN0cmluZ3NSYXcoXG4gICAgICBpc011bHRpbGluZSA/IGAke2F9XFxuYCA6IGEsXG4gICAgICBpc011bHRpbGluZSA/IGAke2J9XFxuYCA6IGIsXG4gICAgICB0cnVlIC8vIGNsZWFudXBTZW1hbnRpY1xuICAgICk7XG5cbiAgICBpZiAoaGFzQ29tbW9uRGlmZihkaWZmcywgaXNNdWx0aWxpbmUpKSB7XG4gICAgICBjb25zdCBvcHRpb25zTm9ybWFsaXplZCA9ICgwLCBfbm9ybWFsaXplRGlmZk9wdGlvbnMubm9ybWFsaXplRGlmZk9wdGlvbnMpKFxuICAgICAgICBvcHRpb25zXG4gICAgICApO1xuICAgICAgY29uc3QgbGluZXMgPSAoMCwgX2dldEFsaWduZWREaWZmcy5kZWZhdWx0KShcbiAgICAgICAgZGlmZnMsXG4gICAgICAgIG9wdGlvbnNOb3JtYWxpemVkLmNoYW5nZUNvbG9yXG4gICAgICApO1xuICAgICAgcmV0dXJuICgwLCBfZGlmZkxpbmVzLnByaW50RGlmZkxpbmVzKShsaW5lcywgb3B0aW9uc05vcm1hbGl6ZWQpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEZhbGwgYmFjayB0byBsaW5lLWJ5LWxpbmUgZGlmZi5cbiAgcmV0dXJuICgwLCBfZGlmZkxpbmVzLmRpZmZMaW5lc1VuaWZpZWQpKFxuICAgIGEuc3BsaXQoJ1xcbicpLFxuICAgIGIuc3BsaXQoJ1xcbicpLFxuICAgIG9wdGlvbnNcbiAgKTtcbn07XG5cbi8vIENvbXBhcmUgdHdvIHN0cmluZ3MgY2hhcmFjdGVyLWJ5LWNoYXJhY3Rlci5cbi8vIE9wdGlvbmFsbHkgY2xlYW4gdXAgc21hbGwgY29tbW9uIHN1YnN0cmluZ3MsIGFsc28ga25vd24gYXMgY2hhZmYuXG5leHBvcnRzLmRpZmZTdHJpbmdzVW5pZmllZCA9IGRpZmZTdHJpbmdzVW5pZmllZDtcbmNvbnN0IGRpZmZTdHJpbmdzUmF3ID0gKGEsIGIsIGNsZWFudXApID0+IHtcbiAgY29uc3QgZGlmZnMgPSAoMCwgX2RpZmZTdHJpbmdzLmRlZmF1bHQpKGEsIGIpO1xuICBpZiAoY2xlYW51cCkge1xuICAgICgwLCBfY2xlYW51cFNlbWFudGljLmNsZWFudXBTZW1hbnRpYykoZGlmZnMpOyAvLyBpbXB1cmUgZnVuY3Rpb25cbiAgfVxuXG4gIHJldHVybiBkaWZmcztcbn07XG5leHBvcnRzLmRpZmZTdHJpbmdzUmF3ID0gZGlmZlN0cmluZ3NSYXc7XG4iXSwidmVyc2lvbiI6M30=
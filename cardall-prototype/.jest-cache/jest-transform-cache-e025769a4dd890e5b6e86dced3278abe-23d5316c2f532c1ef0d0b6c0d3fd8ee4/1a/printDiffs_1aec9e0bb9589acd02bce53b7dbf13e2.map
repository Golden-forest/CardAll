{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\node_modules\\jest-axe\\node_modules\\jest-diff\\build\\printDiffs.js","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\node_modules\\jest-axe\\node_modules\\jest-diff\\build\\printDiffs.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.diffStringsUnified = exports.diffStringsRaw = void 0;\nvar _cleanupSemantic = require('./cleanupSemantic');\nvar _diffLines = require('./diffLines');\nvar _diffStrings = _interopRequireDefault(require('./diffStrings'));\nvar _getAlignedDiffs = _interopRequireDefault(require('./getAlignedDiffs'));\nvar _normalizeDiffOptions = require('./normalizeDiffOptions');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst hasCommonDiff = (diffs, isMultiline) => {\n  if (isMultiline) {\n    // Important: Ignore common newline that was appended to multiline strings!\n    const iLast = diffs.length - 1;\n    return diffs.some(\n      (diff, i) =>\n        diff[0] === _cleanupSemantic.DIFF_EQUAL &&\n        (i !== iLast || diff[1] !== '\\n')\n    );\n  }\n  return diffs.some(diff => diff[0] === _cleanupSemantic.DIFF_EQUAL);\n};\n\n// Compare two strings character-by-character.\n// Format as comparison lines in which changed substrings have inverse colors.\nconst diffStringsUnified = (a, b, options) => {\n  if (a !== b && a.length !== 0 && b.length !== 0) {\n    const isMultiline = a.includes('\\n') || b.includes('\\n');\n\n    // getAlignedDiffs assumes that a newline was appended to the strings.\n    const diffs = diffStringsRaw(\n      isMultiline ? `${a}\\n` : a,\n      isMultiline ? `${b}\\n` : b,\n      true // cleanupSemantic\n    );\n\n    if (hasCommonDiff(diffs, isMultiline)) {\n      const optionsNormalized = (0, _normalizeDiffOptions.normalizeDiffOptions)(\n        options\n      );\n      const lines = (0, _getAlignedDiffs.default)(\n        diffs,\n        optionsNormalized.changeColor\n      );\n      return (0, _diffLines.printDiffLines)(lines, optionsNormalized);\n    }\n  }\n\n  // Fall back to line-by-line diff.\n  return (0, _diffLines.diffLinesUnified)(\n    a.split('\\n'),\n    b.split('\\n'),\n    options\n  );\n};\n\n// Compare two strings character-by-character.\n// Optionally clean up small common substrings, also known as chaff.\nexports.diffStringsUnified = diffStringsUnified;\nconst diffStringsRaw = (a, b, cleanup) => {\n  const diffs = (0, _diffStrings.default)(a, b);\n  if (cleanup) {\n    (0, _cleanupSemantic.cleanupSemantic)(diffs); // impure function\n  }\n\n  return diffs;\n};\nexports.diffStringsRaw = diffStringsRaw;\n"],"version":3}
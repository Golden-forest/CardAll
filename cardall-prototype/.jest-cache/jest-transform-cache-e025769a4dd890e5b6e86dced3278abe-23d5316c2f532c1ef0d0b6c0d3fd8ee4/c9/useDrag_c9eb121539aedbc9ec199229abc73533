08a777198c7b09a1a7d2301ce2042d6c
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useDrag = useDrag;
const invariant_1 = require("@react-dnd/invariant");
const useCollectedProps_js_1 = require("../useCollectedProps.js");
const useOptionalFactory_js_1 = require("../useOptionalFactory.js");
const connectors_js_1 = require("./connectors.js");
const useDragSourceConnector_js_1 = require("./useDragSourceConnector.js");
const useDragSourceMonitor_js_1 = require("./useDragSourceMonitor.js");
const useRegisteredDragSource_js_1 = require("./useRegisteredDragSource.js");
/**
 * useDragSource hook
 * @param sourceSpec The drag source specification (object or function, function preferred)
 * @param deps The memoization deps array to use when evaluating spec changes
 */ function useDrag(specArg, deps) {
    const spec = (0, useOptionalFactory_js_1.useOptionalFactory)(specArg, deps);
    (0, invariant_1.invariant)(!spec.begin, `useDrag::spec.begin was deprecated in v14. Replace spec.begin() with spec.item(). (see more here - https://react-dnd.github.io/react-dnd/docs/api/use-drag)`);
    const monitor = (0, useDragSourceMonitor_js_1.useDragSourceMonitor)();
    const connector = (0, useDragSourceConnector_js_1.useDragSourceConnector)(spec.options, spec.previewOptions);
    (0, useRegisteredDragSource_js_1.useRegisteredDragSource)(spec, monitor, connector);
    return [
        (0, useCollectedProps_js_1.useCollectedProps)(spec.collect, monitor, connector),
        (0, connectors_js_1.useConnectDragSource)(connector),
        (0, connectors_js_1.useConnectDragPreview)(connector),
    ];
}
//# sourceMappingURL=useDrag.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXG5vZGVfbW9kdWxlc1xccmVhY3QtZG5kXFxkaXN0XFxob29rc1xcdXNlRHJhZ1xcdXNlRHJhZy5qcyIsIm1hcHBpbmdzIjoiOztBQVdJLDBCQVdIO0FBdEJELG9EQUFpRDtBQUNqRCxrRUFBNEQ7QUFDNUQsb0VBQThEO0FBQzlELG1EQUE4RTtBQUM5RSwyRUFBcUU7QUFDckUsdUVBQWlFO0FBQ2pFLDZFQUF1RTtBQUN2RTs7OztHQUlHLENBQUMsU0FBZ0IsT0FBTyxDQUFDLE9BQU8sRUFBRSxJQUFJO0lBQ3JDLE1BQU0sSUFBSSxHQUFHLElBQUEsMENBQWtCLEVBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLElBQUEscUJBQVMsRUFBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsNkpBQTZKLENBQUMsQ0FBQztJQUN0TCxNQUFNLE9BQU8sR0FBRyxJQUFBLDhDQUFvQixHQUFFLENBQUM7SUFDdkMsTUFBTSxTQUFTLEdBQUcsSUFBQSxrREFBc0IsRUFBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUM1RSxJQUFBLG9EQUF1QixFQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDbEQsT0FBTztRQUNILElBQUEsd0NBQWlCLEVBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsU0FBUyxDQUFDO1FBQ25ELElBQUEsb0NBQW9CLEVBQUMsU0FBUyxDQUFDO1FBQy9CLElBQUEscUNBQXFCLEVBQUMsU0FBUyxDQUFDO0tBQ25DLENBQUM7QUFDTixDQUFDO0FBRUQsbUNBQW1DIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkQ6XFxQcm9qZWN0c1xcQ2FyZEV2ZXJ5dGhpbmdcXGNhcmRhbGwtcHJvdG90eXBlXFxub2RlX21vZHVsZXNcXHJlYWN0LWRuZFxcZGlzdFxcaG9va3NcXHVzZURyYWdcXHVzZURyYWcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnQHJlYWN0LWRuZC9pbnZhcmlhbnQnO1xuaW1wb3J0IHsgdXNlQ29sbGVjdGVkUHJvcHMgfSBmcm9tICcuLi91c2VDb2xsZWN0ZWRQcm9wcy5qcyc7XG5pbXBvcnQgeyB1c2VPcHRpb25hbEZhY3RvcnkgfSBmcm9tICcuLi91c2VPcHRpb25hbEZhY3RvcnkuanMnO1xuaW1wb3J0IHsgdXNlQ29ubmVjdERyYWdQcmV2aWV3LCB1c2VDb25uZWN0RHJhZ1NvdXJjZSB9IGZyb20gJy4vY29ubmVjdG9ycy5qcyc7XG5pbXBvcnQgeyB1c2VEcmFnU291cmNlQ29ubmVjdG9yIH0gZnJvbSAnLi91c2VEcmFnU291cmNlQ29ubmVjdG9yLmpzJztcbmltcG9ydCB7IHVzZURyYWdTb3VyY2VNb25pdG9yIH0gZnJvbSAnLi91c2VEcmFnU291cmNlTW9uaXRvci5qcyc7XG5pbXBvcnQgeyB1c2VSZWdpc3RlcmVkRHJhZ1NvdXJjZSB9IGZyb20gJy4vdXNlUmVnaXN0ZXJlZERyYWdTb3VyY2UuanMnO1xuLyoqXG4gKiB1c2VEcmFnU291cmNlIGhvb2tcbiAqIEBwYXJhbSBzb3VyY2VTcGVjIFRoZSBkcmFnIHNvdXJjZSBzcGVjaWZpY2F0aW9uIChvYmplY3Qgb3IgZnVuY3Rpb24sIGZ1bmN0aW9uIHByZWZlcnJlZClcbiAqIEBwYXJhbSBkZXBzIFRoZSBtZW1vaXphdGlvbiBkZXBzIGFycmF5IHRvIHVzZSB3aGVuIGV2YWx1YXRpbmcgc3BlYyBjaGFuZ2VzXG4gKi8gZXhwb3J0IGZ1bmN0aW9uIHVzZURyYWcoc3BlY0FyZywgZGVwcykge1xuICAgIGNvbnN0IHNwZWMgPSB1c2VPcHRpb25hbEZhY3Rvcnkoc3BlY0FyZywgZGVwcyk7XG4gICAgaW52YXJpYW50KCFzcGVjLmJlZ2luLCBgdXNlRHJhZzo6c3BlYy5iZWdpbiB3YXMgZGVwcmVjYXRlZCBpbiB2MTQuIFJlcGxhY2Ugc3BlYy5iZWdpbigpIHdpdGggc3BlYy5pdGVtKCkuIChzZWUgbW9yZSBoZXJlIC0gaHR0cHM6Ly9yZWFjdC1kbmQuZ2l0aHViLmlvL3JlYWN0LWRuZC9kb2NzL2FwaS91c2UtZHJhZylgKTtcbiAgICBjb25zdCBtb25pdG9yID0gdXNlRHJhZ1NvdXJjZU1vbml0b3IoKTtcbiAgICBjb25zdCBjb25uZWN0b3IgPSB1c2VEcmFnU291cmNlQ29ubmVjdG9yKHNwZWMub3B0aW9ucywgc3BlYy5wcmV2aWV3T3B0aW9ucyk7XG4gICAgdXNlUmVnaXN0ZXJlZERyYWdTb3VyY2Uoc3BlYywgbW9uaXRvciwgY29ubmVjdG9yKTtcbiAgICByZXR1cm4gW1xuICAgICAgICB1c2VDb2xsZWN0ZWRQcm9wcyhzcGVjLmNvbGxlY3QsIG1vbml0b3IsIGNvbm5lY3RvciksXG4gICAgICAgIHVzZUNvbm5lY3REcmFnU291cmNlKGNvbm5lY3RvciksXG4gICAgICAgIHVzZUNvbm5lY3REcmFnUHJldmlldyhjb25uZWN0b3IpLCBcbiAgICBdO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VEcmFnLmpzLm1hcCJdLCJ2ZXJzaW9uIjozfQ==
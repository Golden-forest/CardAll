{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\node_modules\\dnd-core\\dist\\actions\\dragDrop\\hover.js","mappings":";;AAGA,kCAkBC;AArBD,oDAAiD;AACjD,+DAAyD;AACzD,yCAAmC;AACnC,SAAgB,WAAW,CAAC,OAAO;IAC/B,OAAO,SAAS,KAAK,CAAC,YAAY,EAAE,EAAE,YAAY,EAAG,GAAG,EAAE;QACtD,sBAAsB,CAAC,YAAY,CAAC,CAAC;QACrC,MAAM,SAAS,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,OAAO,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;QACrC,MAAM,QAAQ,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;QACvC,MAAM,eAAe,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;QAC9C,0BAA0B,CAAC,SAAS,EAAE,QAAQ,EAAE,eAAe,CAAC,CAAC;QACjE,eAAe,CAAC,SAAS,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QAC9C,eAAe,CAAC,SAAS,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QAC9C,OAAO;YACH,IAAI,EAAE,gBAAK;YACX,OAAO,EAAE;gBACL,SAAS;gBACT,YAAY,EAAE,YAAY,IAAI,IAAI;aACrC;SACJ,CAAC;IACN,CAAC,CAAC;AACN,CAAC;AACD,SAAS,sBAAsB,CAAC,YAAY;IACxC,IAAA,qBAAS,EAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,oCAAoC,CAAC,CAAC;AACjF,CAAC;AACD,SAAS,eAAe,CAAC,SAAS,EAAE,OAAO,EAAE,QAAQ;IACjD,IAAA,qBAAS,EAAC,OAAO,CAAC,UAAU,EAAE,EAAE,uCAAuC,CAAC,CAAC;IACzE,IAAA,qBAAS,EAAC,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,+BAA+B,CAAC,CAAC;IAC/D,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC,CAAC;QACtC,MAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;QAC9B,IAAA,qBAAS,EAAC,SAAS,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,sDAAsD,CAAC,CAAC;QACzG,MAAM,MAAM,GAAG,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAC5C,IAAA,qBAAS,EAAC,MAAM,EAAE,sCAAsC,CAAC,CAAC;IAC9D,CAAC;AACL,CAAC;AACD,SAAS,0BAA0B,CAAC,SAAS,EAAE,QAAQ,EAAE,eAAe;IACpE,gEAAgE;IAChE,kEAAkE;IAClE,wBAAwB;IACxB,KAAI,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAC,CAAC;QAC3C,MAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;QAC9B,MAAM,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACpD,IAAI,CAAC,IAAA,4BAAW,EAAC,UAAU,EAAE,eAAe,CAAC,EAAE,CAAC;YAC5C,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3B,CAAC;IACL,CAAC;AACL,CAAC;AACD,SAAS,eAAe,CAAC,SAAS,EAAE,OAAO,EAAE,QAAQ;IACjD,8CAA8C;IAC9C,SAAS,CAAC,OAAO,CAAC,UAAS,QAAQ;QAC/B,MAAM,MAAM,GAAG,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAC5C,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;AACP,CAAC;AAED,iCAAiC","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\node_modules\\dnd-core\\dist\\actions\\dragDrop\\hover.js"],"sourcesContent":["import { invariant } from '@react-dnd/invariant';\nimport { matchesType } from '../../utils/matchesType.js';\nimport { HOVER } from './types.js';\nexport function createHover(manager) {\n    return function hover(targetIdsArg, { clientOffset  } = {}) {\n        verifyTargetIdsIsArray(targetIdsArg);\n        const targetIds = targetIdsArg.slice(0);\n        const monitor = manager.getMonitor();\n        const registry = manager.getRegistry();\n        const draggedItemType = monitor.getItemType();\n        removeNonMatchingTargetIds(targetIds, registry, draggedItemType);\n        checkInvariants(targetIds, monitor, registry);\n        hoverAllTargets(targetIds, monitor, registry);\n        return {\n            type: HOVER,\n            payload: {\n                targetIds,\n                clientOffset: clientOffset || null\n            }\n        };\n    };\n}\nfunction verifyTargetIdsIsArray(targetIdsArg) {\n    invariant(Array.isArray(targetIdsArg), 'Expected targetIds to be an array.');\n}\nfunction checkInvariants(targetIds, monitor, registry) {\n    invariant(monitor.isDragging(), 'Cannot call hover while not dragging.');\n    invariant(!monitor.didDrop(), 'Cannot call hover after drop.');\n    for(let i = 0; i < targetIds.length; i++){\n        const targetId = targetIds[i];\n        invariant(targetIds.lastIndexOf(targetId) === i, 'Expected targetIds to be unique in the passed array.');\n        const target = registry.getTarget(targetId);\n        invariant(target, 'Expected targetIds to be registered.');\n    }\n}\nfunction removeNonMatchingTargetIds(targetIds, registry, draggedItemType) {\n    // Remove those targetIds that don't match the targetType.  This\n    // fixes shallow isOver which would only be non-shallow because of\n    // non-matching targets.\n    for(let i = targetIds.length - 1; i >= 0; i--){\n        const targetId = targetIds[i];\n        const targetType = registry.getTargetType(targetId);\n        if (!matchesType(targetType, draggedItemType)) {\n            targetIds.splice(i, 1);\n        }\n    }\n}\nfunction hoverAllTargets(targetIds, monitor, registry) {\n    // Finally call hover on all matching targets.\n    targetIds.forEach(function(targetId) {\n        const target = registry.getTarget(targetId);\n        target.hover(monitor, targetId);\n    });\n}\n\n//# sourceMappingURL=hover.js.map"],"version":3}
a71917769d3360dd463261938a5d4781
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DndProvider = void 0;
function _objectWithoutProperties(source, excluded) {
    if (source == null)
        return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0)
                continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
                continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
        return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
            continue;
        target[key] = source[key];
    }
    return target;
}
const jsx_runtime_1 = require("react/jsx-runtime");
const dnd_core_1 = require("dnd-core");
const react_1 = require("react");
const DndContext_js_1 = require("./DndContext.js");
let refCount = 0;
const INSTANCE_SYM = Symbol.for('__REACT_DND_CONTEXT_INSTANCE__');
var DndProvider = /*#__PURE__*/ (0, react_1.memo)(function DndProvider(_param) {
    var { children } = _param, props = _objectWithoutProperties(_param, [
        "children"
    ]);
    const [manager, isGlobalInstance] = getDndContextValue(props) // memoized from props
    ;
    /**
         * If the global context was used to store the DND context
         * then where theres no more references to it we should
         * clean it up to avoid memory leaks
         */ (0, react_1.useEffect)(() => {
        if (isGlobalInstance) {
            const context = getGlobalContext();
            ++refCount;
            return () => {
                if (--refCount === 0) {
                    context[INSTANCE_SYM] = null;
                }
            };
        }
        return;
    }, []);
    return /*#__PURE__*/ (0, jsx_runtime_1.jsx)(DndContext_js_1.DndContext.Provider, {
        value: manager,
        children: children
    });
});
exports.DndProvider = DndProvider;
function getDndContextValue(props) {
    if ('manager' in props) {
        const manager = {
            dragDropManager: props.manager
        };
        return [
            manager,
            false
        ];
    }
    const manager = createSingletonDndContext(props.backend, props.context, props.options, props.debugMode);
    const isGlobalInstance = !props.context;
    return [
        manager,
        isGlobalInstance
    ];
}
function createSingletonDndContext(backend, context = getGlobalContext(), options, debugMode) {
    const ctx = context;
    if (!ctx[INSTANCE_SYM]) {
        ctx[INSTANCE_SYM] = {
            dragDropManager: (0, dnd_core_1.createDragDropManager)(backend, context, options, debugMode)
        };
    }
    return ctx[INSTANCE_SYM];
}
function getGlobalContext() {
    return typeof global !== 'undefined' ? global : window;
}
//# sourceMappingURL=DndProvider.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
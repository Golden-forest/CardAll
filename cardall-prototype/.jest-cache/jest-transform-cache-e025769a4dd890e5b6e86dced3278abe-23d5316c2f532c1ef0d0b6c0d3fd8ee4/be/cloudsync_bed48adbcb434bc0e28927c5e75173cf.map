{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\cloud-sync.ts","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\src\\services\\cloud-sync.ts"],"sourcesContent":["import { supabase, type SyncStatus } from './supabase'\nimport { db } from './database'\nimport type { DbCard, DbFolder, DbTag } from './database'\n\nexport interface SyncOperation {\n  id: string\n  type: 'create' | 'update' | 'delete'\n  table: 'cards' | 'folders' | 'tags' | 'images'\n  data: any\n  localId: string\n  timestamp: Date\n  retryCount: number\n}\n\nexport interface ConflictResolution {\n  id: string\n  table: string\n  localData: any\n  cloudData: any\n  resolution: 'local' | 'cloud' | 'merge' | 'manual'\n  timestamp: Date\n}\n\nclass CloudSyncService {\n  private syncQueue: SyncOperation[] = []\n  private isOnline = navigator.onLine\n  private syncInProgress = false\n  private lastSyncTime: Date | null = null\n  private conflicts: ConflictResolution[] = []\n  private listeners: ((status: SyncStatus) => void)[] = []\n  private authService: any = null // 延迟初始化\n\n  constructor() {\n    this.initialize()\n  }\n\n  // 初始化同步服务\n  private initialize() {\n    // 监听网络状态\n    window.addEventListener('online', () => {\n      this.isOnline = true\n      this.notifyStatusChange()\n      this.processSyncQueue()\n    })\n\n    window.addEventListener('offline', () => {\n      this.isOnline = false\n      this.notifyStatusChange()\n    })\n\n    // 定期同步（每5分钟）\n    setInterval(() => {\n      if (this.isOnline && this.authService?.isAuthenticated()) {\n        this.processSyncQueue()\n      }\n    }, 5 * 60 * 1000)\n  }\n\n  // 设置认证服务（解决循环依赖）\n  setAuthService(authService: any) {\n    this.authService = authService\n    \n    // 监听认证状态变化\n    authService.onAuthStateChange((authState: any) => {\n      if (authState.user && this.isOnline) {\n        this.performFullSync()\n      }\n    })\n  }\n\n  // 添加状态监听器\n  onStatusChange(callback: (status: SyncStatus) => void): () => void {\n    this.listeners.push(callback)\n    callback(this.getCurrentStatus())\n    \n    return () => {\n      const index = this.listeners.indexOf(callback)\n      if (index > -1) {\n        this.listeners.splice(index, 1)\n      }\n    }\n  }\n\n  // 通知状态变化\n  private notifyStatusChange() {\n    const status = this.getCurrentStatus()\n    this.listeners.forEach(listener => listener(status))\n  }\n\n  // 获取当前同步状态\n  getCurrentStatus(): SyncStatus {\n    return {\n      isOnline: this.isOnline,\n      lastSyncTime: this.lastSyncTime,\n      pendingOperations: this.syncQueue.length,\n      syncInProgress: this.syncInProgress,\n      hasConflicts: this.conflicts.length > 0\n    }\n  }\n\n  // 添加同步操作到队列\n  async queueOperation(operation: Omit<SyncOperation, 'id' | 'timestamp' | 'retryCount'>) {\n    const syncOp: SyncOperation = {\n      ...operation,\n      id: crypto.randomUUID(),\n      timestamp: new Date(),\n      retryCount: 0\n    }\n\n    this.syncQueue.push(syncOp)\n    \n    // 保存到本地存储\n    await this.persistSyncQueue()\n    \n    // 如果在线且已认证，立即尝试同步\n    if (this.isOnline && this.authService?.isAuthenticated()) {\n      this.processSyncQueue()\n    }\n\n    this.notifyStatusChange()\n  }\n\n  // 处理同步队列\n  private async processSyncQueue() {\n    if (this.syncInProgress || !this.isOnline || !this.authService?.isAuthenticated()) {\n      return\n    }\n\n    this.syncInProgress = true\n    this.notifyStatusChange()\n\n    try {\n      const operations = [...this.syncQueue]\n      \n      for (const operation of operations) {\n        try {\n          await this.executeOperation(operation)\n          \n          // 成功后从队列中移除\n          const index = this.syncQueue.findIndex(op => op.id === operation.id)\n          if (index > -1) {\n            this.syncQueue.splice(index, 1)\n          }\n        } catch (error) {\n          console.error('Sync operation failed:', error)\n          \n          // 增加重试次数\n          operation.retryCount++\n          \n          // 如果重试次数过多，移除操作\n          if (operation.retryCount > 3) {\n            const index = this.syncQueue.findIndex(op => op.id === operation.id)\n            if (index > -1) {\n              this.syncQueue.splice(index, 1)\n            }\n          }\n        }\n      }\n\n      await this.persistSyncQueue()\n      this.lastSyncTime = new Date()\n      \n    } finally {\n      this.syncInProgress = false\n      this.notifyStatusChange()\n    }\n  }\n\n  // 执行单个同步操作\n  private async executeOperation(operation: SyncOperation) {\n    const user = this.authService?.getCurrentUser()\n    if (!user) throw new Error('User not authenticated')\n\n    switch (operation.table) {\n      case 'cards':\n        await this.syncCard(operation, user.id)\n        break\n      case 'folders':\n        await this.syncFolder(operation, user.id)\n        break\n      case 'tags':\n        await this.syncTag(operation, user.id)\n        break\n      case 'images':\n        await this.syncImage(operation, user.id)\n        break\n    }\n  }\n\n  // 同步卡片\n  private async syncCard(operation: SyncOperation, userId: string) {\n    const { type, data, localId } = operation\n\n    switch (type) {\n      case 'create':\n      case 'update':\n        const { error } = await supabase\n          .from('cards')\n          .upsert({\n            id: localId,\n            user_id: userId,\n            front_content: data.frontContent,\n            back_content: data.backContent,\n            style: data.style,\n            folder_id: data.folderId,\n            updated_at: new Date().toISOString(),\n            sync_version: data.syncVersion + 1\n          })\n        \n        if (error) throw error\n        break\n\n      case 'delete':\n        const { error: deleteError } = await supabase\n          .from('cards')\n          .update({ \n            is_deleted: true,\n            updated_at: new Date().toISOString()\n          })\n          .eq('id', localId)\n          .eq('user_id', userId)\n        \n        if (deleteError) throw deleteError\n        break\n    }\n  }\n\n  // 同步文件夹\n  private async syncFolder(operation: SyncOperation, userId: string) {\n    const { type, data, localId } = operation\n\n    switch (type) {\n      case 'create':\n      case 'update':\n        const { error } = await supabase\n          .from('folders')\n          .upsert({\n            id: localId,\n            user_id: userId,\n            name: data.name,\n            parent_id: data.parentId,\n            updated_at: new Date().toISOString(),\n            sync_version: data.syncVersion + 1\n          })\n        \n        if (error) throw error\n        break\n\n      case 'delete':\n        const { error: deleteError } = await supabase\n          .from('folders')\n          .update({ \n            is_deleted: true,\n            updated_at: new Date().toISOString()\n          })\n          .eq('id', localId)\n          .eq('user_id', userId)\n        \n        if (deleteError) throw deleteError\n        break\n    }\n  }\n\n  // 同步标签\n  private async syncTag(operation: SyncOperation, userId: string) {\n    const { type, data, localId } = operation\n\n    switch (type) {\n      case 'create':\n      case 'update':\n        const { error } = await supabase\n          .from('tags')\n          .upsert({\n            id: localId,\n            user_id: userId,\n            name: data.name,\n            color: data.color,\n            updated_at: new Date().toISOString(),\n            sync_version: data.syncVersion + 1\n          })\n        \n        if (error) throw error\n        break\n\n      case 'delete':\n        const { error: deleteError } = await supabase\n          .from('tags')\n          .update({ \n            is_deleted: true,\n            updated_at: new Date().toISOString()\n          })\n          .eq('id', localId)\n          .eq('user_id', userId)\n        \n        if (deleteError) throw deleteError\n        break\n    }\n  }\n\n  // 同步图片\n  private async syncImage(operation: SyncOperation, userId: string) {\n    const { type, data, localId } = operation\n\n    switch (type) {\n      case 'create':\n      case 'update':\n        const { error } = await supabase\n          .from('images')\n          .upsert({\n            id: localId,\n            user_id: userId,\n            card_id: data.cardId,\n            file_name: data.fileName,\n            file_path: data.filePath,\n            cloud_url: data.cloudUrl,\n            metadata: data.metadata,\n            updated_at: new Date().toISOString(),\n            sync_version: data.syncVersion + 1\n          })\n        \n        if (error) throw error\n        break\n\n      case 'delete':\n        const { error: deleteError } = await supabase\n          .from('images')\n          .update({ \n            is_deleted: true,\n            updated_at: new Date().toISOString()\n          })\n          .eq('id', localId)\n          .eq('user_id', userId)\n        \n        if (deleteError) throw deleteError\n        break\n    }\n  }\n\n  // 执行完整同步\n  async performFullSync(): Promise<void> {\n    if (!this.authService?.isAuthenticated() || !this.isOnline) {\n      return\n    }\n\n    try {\n      this.syncInProgress = true\n      this.notifyStatusChange()\n\n      const user = this.authService.getCurrentUser()!\n      \n      // 下行同步：从云端获取数据\n      await this.syncFromCloud(user.id)\n      \n      // 上行同步：处理本地队列\n      await this.processSyncQueue()\n      \n      this.lastSyncTime = new Date()\n      console.log('Full sync completed successfully')\n      \n    } catch (error) {\n      console.error('Full sync failed:', error)\n    } finally {\n      this.syncInProgress = false\n      this.notifyStatusChange()\n    }\n  }\n\n  // 从云端同步数据\n  private async syncFromCloud(userId: string) {\n    // 获取本地最后同步时间\n    const lastSync = this.lastSyncTime || new Date(0)\n    \n    // 同步卡片\n    const { data: cards } = await supabase\n      .from('cards')\n      .select('*')\n      .eq('user_id', userId)\n      .gte('updated_at', lastSync.toISOString())\n    \n    if (cards) {\n      for (const card of cards) {\n        await this.mergeCloudCard(card)\n      }\n    }\n\n    // 同步文件夹\n    const { data: folders } = await supabase\n      .from('folders')\n      .select('*')\n      .eq('user_id', userId)\n      .gte('updated_at', lastSync.toISOString())\n    \n    if (folders) {\n      for (const folder of folders) {\n        await this.mergeCloudFolder(folder)\n      }\n    }\n\n    // 同步标签\n    const { data: tags } = await supabase\n      .from('tags')\n      .select('*')\n      .eq('user_id', userId)\n      .gte('updated_at', lastSync.toISOString())\n    \n    if (tags) {\n      for (const tag of tags) {\n        await this.mergeCloudTag(tag)\n      }\n    }\n  }\n\n  // 合并云端卡片数据 - 使用\"最后写入获胜\"策略\n  private async mergeCloudCard(cloudCard: any) {\n    const localCard = await db.cards?.get(cloudCard.id)\n    \n    if (!localCard) {\n      // 本地不存在，直接插入\n      await db.cards?.add({\n        id: cloudCard.id,\n        frontContent: cloudCard.front_content,\n        backContent: cloudCard.back_content,\n        style: cloudCard.style,\n        folderId: cloudCard.folder_id || undefined,\n        isFlipped: false,\n        createdAt: new Date(cloudCard.created_at),\n        updatedAt: new Date(cloudCard.updated_at),\n        syncVersion: cloudCard.sync_version,\n        pendingSync: false\n      } as DbCard)\n    } else {\n      // 比较更新时间，采用\"最后写入获胜\"策略\n      const localUpdateTime = new Date(localCard.updatedAt).getTime()\n      const cloudUpdateTime = new Date(cloudCard.updated_at).getTime()\n      \n      if (cloudUpdateTime > localUpdateTime) {\n        // 云端数据更新，使用云端数据\n        await db.cards?.update(cloudCard.id, {\n          frontContent: cloudCard.front_content,\n          backContent: cloudCard.back_content,\n          style: cloudCard.style,\n          folderId: cloudCard.folder_id || undefined,\n          updatedAt: new Date(cloudCard.updated_at),\n          syncVersion: cloudCard.sync_version,\n          pendingSync: false\n        })\n      } else if (localUpdateTime > cloudUpdateTime && localCard.pendingSync) {\n        // 本地数据更新，上传到云端\n        await this.queueOperation({\n          type: 'update',\n          table: 'cards',\n          data: localCard,\n          localId: localCard.id\n        })\n      }\n      // 如果时间相同，认为是同步的，不做任何操作\n    }\n  }\n\n  // 合并云端文件夹数据 - 使用\"最后写入获胜\"策略\n  private async mergeCloudFolder(cloudFolder: any) {\n    const localFolder = await db.folders?.get(cloudFolder.id)\n    \n    if (!localFolder) {\n      await db.folders?.add({\n        id: cloudFolder.id,\n        name: cloudFolder.name,\n        color: '#3b82f6',\n        icon: 'Folder',\n        cardIds: [],\n        parentId: cloudFolder.parent_id || undefined,\n        isExpanded: true,\n        createdAt: new Date(cloudFolder.created_at),\n        updatedAt: new Date(cloudFolder.updated_at),\n        syncVersion: cloudFolder.sync_version,\n        pendingSync: false\n      } as DbFolder)\n    } else {\n      // 比较更新时间，采用\"最后写入获胜\"策略\n      const localUpdateTime = new Date(localFolder.updatedAt).getTime()\n      const cloudUpdateTime = new Date(cloudFolder.updated_at).getTime()\n      \n      if (cloudUpdateTime > localUpdateTime) {\n        await db.folders?.update(cloudFolder.id, {\n          name: cloudFolder.name,\n          parentId: cloudFolder.parent_id || undefined,\n          updatedAt: new Date(cloudFolder.updated_at),\n          syncVersion: cloudFolder.sync_version,\n          pendingSync: false\n        })\n      } else if (localUpdateTime > cloudUpdateTime && localFolder.pendingSync) {\n        // 本地数据更新，上传到云端\n        await this.queueOperation({\n          type: 'update',\n          table: 'folders',\n          data: localFolder,\n          localId: localFolder.id\n        })\n      }\n    }\n  }\n\n  // 合并云端标签数据 - 使用\"最后写入获胜\"策略\n  private async mergeCloudTag(cloudTag: any) {\n    const localTag = await db.tags?.get(cloudTag.id)\n    \n    if (!localTag) {\n      await db.tags?.add({\n        id: cloudTag.id,\n        name: cloudTag.name,\n        color: cloudTag.color,\n        count: 0, // 云端同步下来的标签初始计数为0，后续会通过syncTagsWithCards更新\n        createdAt: new Date(cloudTag.created_at),\n        updatedAt: new Date(cloudTag.updated_at),\n        syncVersion: cloudTag.sync_version,\n        pendingSync: false\n      } as DbTag)\n    } else {\n      // 比较更新时间，采用\"最后写入获胜\"策略\n      const localUpdateTime = new Date(localTag.updatedAt).getTime()\n      const cloudUpdateTime = new Date(cloudTag.updatedAt).getTime()\n      \n      if (cloudUpdateTime > localUpdateTime) {\n        await db.tags?.update(cloudTag.id, {\n          name: cloudTag.name,\n          color: cloudTag.color,\n          updatedAt: new Date(cloudTag.updated_at),\n          syncVersion: cloudTag.sync_version,\n          pendingSync: false\n        })\n      } else if (localUpdateTime > cloudUpdateTime && localTag.pendingSync) {\n        // 本地数据更新，上传到云端\n        await this.queueOperation({\n          type: 'update',\n          table: 'tags',\n          data: localTag,\n          localId: localTag.id\n        })\n      }\n    }\n  }\n\n  // 持久化同步队列\n  private async persistSyncQueue() {\n    try {\n      localStorage.setItem('cardall_sync_queue', JSON.stringify(this.syncQueue))\n    } catch (error) {\n      console.error('Failed to persist sync queue:', error)\n    }\n  }\n\n  // 恢复同步队列\n  async restoreSyncQueue() {\n    try {\n      const stored = localStorage.getItem('cardall_sync_queue')\n      if (stored) {\n        this.syncQueue = JSON.parse(stored)\n        this.notifyStatusChange()\n      }\n    } catch (error) {\n      console.error('Failed to restore sync queue:', error)\n    }\n  }\n\n  // 清除同步队列\n  async clearSyncQueue() {\n    this.syncQueue = []\n    await this.persistSyncQueue()\n    this.notifyStatusChange()\n  }\n\n  // 获取冲突列表\n  getConflicts(): ConflictResolution[] {\n    return [...this.conflicts]\n  }\n\n  // 解决冲突\n  async resolveConflict(conflictId: string, resolution: 'local' | 'cloud' | 'merge') {\n    const conflict = this.conflicts.find(c => c.id === conflictId)\n    if (!conflict) return\n\n    // 根据解决方案处理冲突\n    switch (resolution) {\n      case 'local':\n        // 使用本地数据，上传到云端\n        await this.queueOperation({\n          type: 'update',\n          table: conflict.table as any,\n          data: conflict.localData,\n          localId: conflict.localData.id\n        })\n        break\n      \n      case 'cloud':\n        // 使用云端数据，更新本地\n        // 这里需要根据具体表类型处理\n        break\n      \n      case 'merge':\n        // 合并数据（需要具体实现）\n        break\n    }\n\n    // 移除已解决的冲突\n    const index = this.conflicts.findIndex(c => c.id === conflictId)\n    if (index > -1) {\n      this.conflicts.splice(index, 1)\n      this.notifyStatusChange()\n    }\n  }\n}\n\n// 导出单例实例\nexport const cloudSyncService = new CloudSyncService()"],"version":3}
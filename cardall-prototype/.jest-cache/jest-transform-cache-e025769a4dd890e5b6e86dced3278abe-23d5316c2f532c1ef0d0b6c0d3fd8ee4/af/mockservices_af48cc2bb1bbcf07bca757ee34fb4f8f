29b114d285a84d6d1bda5af5d66cec30
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceFactory = exports.MockSyncService = exports.MockDatabaseService = exports.MockSupabaseService = void 0;
// 模拟服务 - 为测试提供完整的服务层模拟
const advanced_test_utils_1 = require("./advanced-test-utils");
// ============================================================================
// Supabase 服务模拟
// ============================================================================
class MockSupabaseService {
    constructor() {
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "authState", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {
                user: null,
                session: null,
                isLoading: false,
            }
        });
        // 认证服务
        Object.defineProperty(this, "auth", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {
                signUp: jest.fn(async ({ email, password }) => {
                    this.authState.isLoading = true;
                    await new Promise(resolve => setTimeout(resolve, 100));
                    const user = {
                        id: crypto.randomUUID(),
                        email,
                        created_at: new Date().toISOString(),
                    };
                    this.authState.user = user;
                    this.authState.isLoading = false;
                    return {
                        user,
                        session: { access_token: 'mock-token', user },
                        error: null,
                    };
                }),
                signIn: jest.fn(async ({ email, password }) => {
                    this.authState.isLoading = true;
                    await new Promise(resolve => setTimeout(resolve, 100));
                    if (email === 'error@example.com') {
                        this.authState.isLoading = false;
                        return {
                            user: null,
                            session: null,
                            error: { message: 'Invalid credentials' },
                        };
                    }
                    const user = {
                        id: 'mock-user-id',
                        email,
                        created_at: new Date().toISOString(),
                    };
                    this.authState.user = user;
                    this.authState.isLoading = false;
                    return {
                        user,
                        session: { access_token: 'mock-token', user },
                        error: null,
                    };
                }),
                signOut: jest.fn(async () => {
                    this.authState.isLoading = true;
                    await new Promise(resolve => setTimeout(resolve, 50));
                    this.authState.user = null;
                    this.authState.session = null;
                    this.authState.isLoading = false;
                    return { error: null };
                }),
                getCurrentUser: jest.fn(() => {
                    return this.authState.user;
                }),
                onAuthStateChange: jest.fn((callback) => {
                    // 返回一个取消订阅函数
                    return {
                        data: {
                            subscription: {
                                unsubscribe: jest.fn(),
                            },
                        },
                    };
                }),
                resetPasswordForEmail: jest.fn(async (email) => {
                    await new Promise(resolve => setTimeout(resolve, 100));
                    return { error: null };
                }),
                updateUser: jest.fn(async (attributes) => {
                    await new Promise(resolve => setTimeout(resolve, 100));
                    if (this.authState.user) {
                        this.authState.user = { ...this.authState.user, ...attributes };
                    }
                    return {
                        user: this.authState.user,
                        error: null,
                    };
                }),
            }
        });
        // 数据库服务
        Object.defineProperty(this, "from", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: jest.fn((table) => {
                switch (table) {
                    case 'cards':
                        return this.client.cards;
                    case 'folders':
                        return this.client.folders;
                    case 'tags':
                        return this.client.tags;
                    default:
                        return {
                            select: jest.fn(() => ({ data: [], error: null })),
                            insert: jest.fn(() => ({ data: [], error: null })),
                            update: jest.fn(() => ({ data: [], error: null })),
                            delete: jest.fn(() => ({ data: null, error: null })),
                        };
                }
            })
        });
        // 实时服务
        Object.defineProperty(this, "channel", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: jest.fn((channelName) => {
                return {
                    on: jest.fn((event, callback) => {
                        return this;
                    }),
                    subscribe: jest.fn(() => {
                        return {
                            unsubscribe: jest.fn(),
                        };
                    }),
                    send: jest.fn((payload) => {
                        return Promise.resolve();
                    }),
                };
            })
        });
        // 存储服务
        Object.defineProperty(this, "storage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {
                from: jest.fn((bucket) => ({
                    upload: jest.fn(async (path, file) => {
                        await new Promise(resolve => setTimeout(resolve, 200));
                        return {
                            data: { path: `${bucket}/${path}` },
                            error: null,
                        };
                    }),
                    getPublicUrl: jest.fn((path) => ({
                        data: { publicUrl: `https://example.com/${bucket}/${path}` },
                    })),
                    remove: jest.fn(async (paths) => {
                        await new Promise(resolve => setTimeout(resolve, 100));
                        return { error: null };
                    }),
                    list: jest.fn(() => ({
                        data: [],
                        error: null,
                    })),
                })),
            }
        });
        // 辅助方法
        Object.defineProperty(this, "getClient", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: () => this.client
        });
        Object.defineProperty(this, "getAuthState", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: () => this.authState
        });
        Object.defineProperty(this, "setAuthState", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (state) => {
                this.authState = { ...this.authState, ...state };
            }
        });
        Object.defineProperty(this, "reset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: () => {
                this.client.reset();
                this.authState = {
                    user: null,
                    session: null,
                    isLoading: false,
                };
            }
        });
        this.client = new advanced_test_utils_1.MockSupabaseClient();
    }
}
exports.MockSupabaseService = MockSupabaseService;
// ============================================================================
// 数据库服务模拟
// ============================================================================
class MockDatabaseService {
    constructor() {
        Object.defineProperty(this, "db", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "syncOperations", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        // 卡片操作
        Object.defineProperty(this, "cards", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {
                add: jest.fn(async (card) => {
                    const result = await this.db.table('cards').add(card);
                    return result;
                }),
                get: jest.fn(async (id) => {
                    return await this.db.table('cards').get(id);
                }),
                getAll: jest.fn(async () => {
                    return await this.db.table('cards').toArray();
                }),
                update: jest.fn(async (id, updates) => {
                    await this.db.table('cards').where('id').equals(id).modify(updates);
                    return true;
                }),
                delete: jest.fn(async (id) => {
                    const deleted = await this.db.table('cards').where('id').equals(id).delete();
                    return deleted > 0;
                }),
                bulkAdd: jest.fn(async (cards) => {
                    const results = await this.db.table('cards').bulkAdd(cards);
                    return results;
                }),
                clear: jest.fn(async () => {
                    await this.db.table('cards').clear();
                }),
                findByFolder: jest.fn(async (folderId) => {
                    return await this.db.table('cards').where('folderId').equals(folderId).toArray();
                }),
                findByTag: jest.fn(async (tag) => {
                    const allCards = await this.db.table('cards').toArray();
                    return allCards.filter(card => card.frontContent.tags.includes(tag) || card.backContent.tags.includes(tag));
                }),
                search: jest.fn(async (searchTerm) => {
                    const allCards = await this.db.table('cards').toArray();
                    const term = searchTerm.toLowerCase();
                    return allCards.filter(card => card.frontContent.title.toLowerCase().includes(term) ||
                        card.frontContent.text.toLowerCase().includes(term) ||
                        card.backContent.title.toLowerCase().includes(term) ||
                        card.backContent.text.toLowerCase().includes(term));
                }),
            }
        });
        // 文件夹操作
        Object.defineProperty(this, "folders", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {
                add: jest.fn(async (folder) => {
                    const result = await this.db.table('folders').add(folder);
                    return result;
                }),
                get: jest.fn(async (id) => {
                    return await this.db.table('folders').get(id);
                }),
                getAll: jest.fn(async () => {
                    return await this.db.table('folders').toArray();
                }),
                update: jest.fn(async (id, updates) => {
                    await this.db.table('folders').where('id').equals(id).modify(updates);
                    return true;
                }),
                delete: jest.fn(async (id) => {
                    const deleted = await this.db.table('folders').where('id').equals(id).delete();
                    return deleted > 0;
                }),
                bulkAdd: jest.fn(async (folders) => {
                    const results = await this.db.table('folders').bulkAdd(folders);
                    return results;
                }),
                clear: jest.fn(async () => {
                    await this.db.table('folders').clear();
                }),
                getChildren: jest.fn(async (parentId) => {
                    return await this.db.table('folders').where('parentId').equals(parentId).toArray();
                }),
                getRoot: jest.fn(async () => {
                    return await this.db.table('folders').where('parentId').equals(undefined).toArray();
                }),
            }
        });
        // 标签操作
        Object.defineProperty(this, "tags", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {
                add: jest.fn(async (tag) => {
                    const result = await this.db.table('tags').add(tag);
                    return result;
                }),
                get: jest.fn(async (id) => {
                    return await this.db.table('tags').get(id);
                }),
                getAll: jest.fn(async () => {
                    return await this.db.table('tags').toArray();
                }),
                update: jest.fn(async (id, updates) => {
                    await this.db.table('tags').where('id').equals(id).modify(updates);
                    return true;
                }),
                delete: jest.fn(async (id) => {
                    const deleted = await this.db.table('tags').where('id').equals(id).delete();
                    return deleted > 0;
                }),
                bulkAdd: jest.fn(async (tags) => {
                    const results = await this.db.table('tags').bulkAdd(tags);
                    return results;
                }),
                clear: jest.fn(async () => {
                    await this.db.table('tags').clear();
                }),
                getVisible: jest.fn(async () => {
                    const allTags = await this.db.table('tags').toArray();
                    return allTags.filter(tag => !tag.isHidden);
                }),
                getHidden: jest.fn(async () => {
                    const allTags = await this.db.table('tags').toArray();
                    return allTags.filter(tag => tag.isHidden);
                }),
            }
        });
        // 同步队列操作
        Object.defineProperty(this, "syncQueue", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {
                add: jest.fn(async (operation) => {
                    const result = await this.db.table('syncQueue').add(operation);
                    this.syncOperations.push(operation);
                    return result;
                }),
                get: jest.fn(async (id) => {
                    return await this.db.table('syncQueue').get(id);
                }),
                getAll: jest.fn(async () => {
                    return await this.db.table('syncQueue').toArray();
                }),
                getPending: jest.fn(async () => {
                    return await this.db.table('syncQueue').where('status').equals('pending').toArray();
                }),
                getFailed: jest.fn(async () => {
                    return await this.db.table('syncQueue').where('status').equals('failed').toArray();
                }),
                update: jest.fn(async (id, updates) => {
                    await this.db.table('syncQueue').where('id').equals(id).modify(updates);
                    return true;
                }),
                delete: jest.fn(async (id) => {
                    const deleted = await this.db.table('syncQueue').where('id').equals(id).delete();
                    this.syncOperations = this.syncOperations.filter(op => op.id !== id);
                    return deleted > 0;
                }),
                clear: jest.fn(async () => {
                    await this.db.table('syncQueue').clear();
                    this.syncOperations = [];
                }),
                getStats: jest.fn(() => {
                    const pending = this.syncOperations.filter(op => op.status === 'pending').length;
                    const processing = this.syncOperations.filter(op => op.status === 'processing').length;
                    const completed = this.syncOperations.filter(op => op.status === 'completed').length;
                    const failed = this.syncOperations.filter(op => op.status === 'failed').length;
                    return {
                        total: this.syncOperations.length,
                        pending,
                        processing,
                        completed,
                        failed,
                    };
                }),
            }
        });
        // 数据库管理
        Object.defineProperty(this, "clearAll", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: jest.fn(async () => {
                await this.cards.clear();
                await this.folders.clear();
                await this.tags.clear();
                await this.syncQueue.clear();
                this.syncOperations = [];
            })
        });
        Object.defineProperty(this, "exportData", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: jest.fn(async () => {
                const [cards, folders, tags, syncQueue] = await Promise.all([
                    this.cards.getAll(),
                    this.folders.getAll(),
                    this.tags.getAll(),
                    this.syncQueue.getAll(),
                ]);
                return {
                    cards,
                    folders,
                    tags,
                    syncQueue,
                    exportedAt: new Date(),
                };
            })
        });
        Object.defineProperty(this, "importData", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: jest.fn(async (data) => {
                await this.clearAll();
                await Promise.all([
                    this.cards.bulkAdd(data.cards || []),
                    this.folders.bulkAdd(data.folders || []),
                    this.tags.bulkAdd(data.tags || []),
                    this.syncQueue.bulkAdd(data.syncQueue || []),
                ]);
            })
        });
        // 辅助方法
        Object.defineProperty(this, "getDB", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: () => this.db
        });
        Object.defineProperty(this, "reset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: () => {
                this.db.reset();
                this.syncOperations = [];
            }
        });
        this.db = new advanced_test_utils_1.MockIndexedDB();
    }
}
exports.MockDatabaseService = MockDatabaseService;
// ============================================================================
// 同步服务模拟
// ============================================================================
class MockSyncService {
    constructor(supabaseService, databaseService) {
        Object.defineProperty(this, "supabaseService", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "databaseService", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "isOnline", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "syncInProgress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "lastSyncTime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "syncErrors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        // 同步状态
        Object.defineProperty(this, "isOnline", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: jest.fn(() => this.isOnline)
        });
        Object.defineProperty(this, "isSyncing", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: jest.fn(() => this.syncInProgress)
        });
        Object.defineProperty(this, "getLastSyncTime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: jest.fn(() => this.lastSyncTime)
        });
        Object.defineProperty(this, "getSyncErrors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: jest.fn(() => [...this.syncErrors])
        });
        // 网络状态管理
        Object.defineProperty(this, "setOnline", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: jest.fn((online) => {
                this.isOnline = online;
            })
        });
        // 手动同步
        Object.defineProperty(this, "syncNow", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: jest.fn(async () => {
                if (this.syncInProgress) {
                    throw new Error('Sync already in progress');
                }
                this.syncInProgress = true;
                this.syncErrors = [];
                try {
                    // 获取待同步的操作
                    const pendingOperations = await this.databaseService.syncQueue.getPending();
                    if (pendingOperations.length === 0) {
                        this.lastSyncTime = new Date();
                        this.syncInProgress = false;
                        return { success: true, syncedCount: 0 };
                    }
                    // 处理每个操作
                    let syncedCount = 0;
                    const errors = [];
                    for (const operation of pendingOperations) {
                        try {
                            await this.executeSyncOperation(operation);
                            syncedCount++;
                            // 标记操作为已完成
                            await this.databaseService.syncQueue.update(operation.id, {
                                status: 'completed',
                                error: null,
                            });
                        }
                        catch (error) {
                            const errorMsg = `Failed to sync operation ${operation.id}: ${error}`;
                            errors.push(errorMsg);
                            this.syncErrors.push(errorMsg);
                            // 标记操作为失败
                            await this.databaseService.syncQueue.update(operation.id, {
                                status: 'failed',
                                error: errorMsg,
                            });
                        }
                    }
                    this.lastSyncTime = new Date();
                    this.syncInProgress = false;
                    return {
                        success: errors.length === 0,
                        syncedCount,
                        errors: errors.length,
                        errorDetails: errors,
                    };
                }
                catch (error) {
                    this.syncInProgress = false;
                    const errorMsg = `Sync failed: ${error}`;
                    this.syncErrors.push(errorMsg);
                    return {
                        success: false,
                        syncedCount: 0,
                        errors: 1,
                        errorDetails: [errorMsg],
                    };
                }
            })
        });
        // 自动同步
        Object.defineProperty(this, "startAutoSync", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: jest.fn((interval = 30000) => {
                const intervalId = setInterval(async () => {
                    if (this.isOnline && !this.syncInProgress) {
                        await this.syncNow();
                    }
                }, interval);
                return () => clearInterval(intervalId);
            })
        });
        // 执行同步操作
        Object.defineProperty(this, "executeSyncOperation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (operation) => {
                // 模拟网络延迟
                await new Promise(resolve => setTimeout(resolve, Math.random() * 100 + 50));
                switch (operation.entity) {
                    case 'card':
                        return await this.syncCard(operation);
                    case 'folder':
                        return await this.syncFolder(operation);
                    case 'tag':
                        return await this.syncTag(operation);
                    default:
                        throw new Error(`Unknown entity type: ${operation.entity}`);
                }
            }
        });
        Object.defineProperty(this, "syncCard", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (operation) => {
                switch (operation.type) {
                    case 'create':
                        await this.supabaseService.from('cards').insert(operation.data);
                        break;
                    case 'update':
                        await this.supabaseService.from('cards').update(operation.data).eq('id', operation.entityId);
                        break;
                    case 'delete':
                        await this.supabaseService.from('cards').delete().eq('id', operation.entityId);
                        break;
                }
            }
        });
        Object.defineProperty(this, "syncFolder", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (operation) => {
                switch (operation.type) {
                    case 'create':
                        await this.supabaseService.from('folders').insert(operation.data);
                        break;
                    case 'update':
                        await this.supabaseService.from('folders').update(operation.data).eq('id', operation.entityId);
                        break;
                    case 'delete':
                        await this.supabaseService.from('folders').delete().eq('id', operation.entityId);
                        break;
                }
            }
        });
        Object.defineProperty(this, "syncTag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (operation) => {
                switch (operation.type) {
                    case 'create':
                        await this.supabaseService.from('tags').insert(operation.data);
                        break;
                    case 'update':
                        await this.supabaseService.from('tags').update(operation.data).eq('id', operation.entityId);
                        break;
                    case 'delete':
                        await this.supabaseService.from('tags').delete().eq('id', operation.entityId);
                        break;
                }
            }
        });
        // 冲突解决
        Object.defineProperty(this, "resolveConflicts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: jest.fn(async (conflicts) => {
                // 模拟冲突解决逻辑
                const resolvedConflicts = conflicts.map(conflict => ({
                    ...conflict,
                    resolved: true,
                    resolution: 'local-wins',
                }));
                return resolvedConflicts;
            })
        });
        // 辅助方法
        Object.defineProperty(this, "clearErrors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: jest.fn(() => {
                this.syncErrors = [];
            })
        });
        Object.defineProperty(this, "reset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: jest.fn(() => {
                this.isOnline = true;
                this.syncInProgress = false;
                this.lastSyncTime = null;
                this.syncErrors = [];
            })
        });
        this.supabaseService = supabaseService;
        this.databaseService = databaseService;
    }
}
exports.MockSyncService = MockSyncService;
// ============================================================================
// 服务工厂
// ============================================================================
class ServiceFactory {
    static createSupabaseService() {
        if (!this.supabaseService) {
            this.supabaseService = new MockSupabaseService();
        }
        return this.supabaseService;
    }
    static createDatabaseService() {
        if (!this.databaseService) {
            this.databaseService = new MockDatabaseService();
        }
        return this.databaseService;
    }
    static createSyncService(supabaseService, databaseService) {
        if (!this.syncService) {
            const supa = supabaseService || this.createSupabaseService();
            const db = databaseService || this.createDatabaseService();
            this.syncService = new MockSyncService(supa, db);
        }
        return this.syncService;
    }
    static resetAll() {
        this.supabaseService?.reset();
        this.databaseService?.reset();
        this.syncService?.reset();
        this.supabaseService = null;
        this.databaseService = null;
        this.syncService = null;
    }
}
exports.ServiceFactory = ServiceFactory;
Object.defineProperty(ServiceFactory, "supabaseService", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: null
});
Object.defineProperty(ServiceFactory, "databaseService", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: null
});
Object.defineProperty(ServiceFactory, "syncService", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: null
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\node_modules\\jest-axe\\node_modules\\jest-matcher-utils\\build\\deepCyclicCopyReplaceable.js","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\node_modules\\jest-axe\\node_modules\\jest-matcher-utils\\build\\deepCyclicCopyReplaceable.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = deepCyclicCopyReplaceable;\nvar _prettyFormat = require('pretty-format');\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst builtInObject = [\n  Array,\n  Date,\n  Float32Array,\n  Float64Array,\n  Int16Array,\n  Int32Array,\n  Int8Array,\n  Map,\n  Set,\n  RegExp,\n  Uint16Array,\n  Uint32Array,\n  Uint8Array,\n  Uint8ClampedArray\n];\nif (typeof Buffer !== 'undefined') {\n  builtInObject.push(Buffer);\n}\nconst isBuiltInObject = object => builtInObject.includes(object.constructor);\nconst isMap = value => value.constructor === Map;\nfunction deepCyclicCopyReplaceable(value, cycles = new WeakMap()) {\n  if (typeof value !== 'object' || value === null) {\n    return value;\n  } else if (cycles.has(value)) {\n    return cycles.get(value);\n  } else if (Array.isArray(value)) {\n    return deepCyclicCopyArray(value, cycles);\n  } else if (isMap(value)) {\n    return deepCyclicCopyMap(value, cycles);\n  } else if (isBuiltInObject(value)) {\n    return value;\n  } else if (_prettyFormat.plugins.DOMElement.test(value)) {\n    return value.cloneNode(true);\n  } else {\n    return deepCyclicCopyObject(value, cycles);\n  }\n}\nfunction deepCyclicCopyObject(object, cycles) {\n  const newObject = Object.create(Object.getPrototypeOf(object));\n  const descriptors = Object.getOwnPropertyDescriptors(object);\n  cycles.set(object, newObject);\n  const newDescriptors = [\n    ...Object.keys(descriptors),\n    ...Object.getOwnPropertySymbols(descriptors)\n  ].reduce(\n    //@ts-expect-error because typescript do not support symbol key in object\n    //https://github.com/microsoft/TypeScript/issues/1863\n    (newDescriptors, key) => {\n      const enumerable = descriptors[key].enumerable;\n      newDescriptors[key] = {\n        configurable: true,\n        enumerable,\n        value: deepCyclicCopyReplaceable(\n          // this accesses the value or getter, depending. We just care about the value anyways, and this allows us to not mess with accessors\n          // it has the side effect of invoking the getter here though, rather than copying it over\n          object[key],\n          cycles\n        ),\n        writable: true\n      };\n      return newDescriptors;\n    },\n    {}\n  );\n  //@ts-expect-error because typescript do not support symbol key in object\n  //https://github.com/microsoft/TypeScript/issues/1863\n  return Object.defineProperties(newObject, newDescriptors);\n}\nfunction deepCyclicCopyArray(array, cycles) {\n  const newArray = new (Object.getPrototypeOf(array).constructor)(array.length);\n  const length = array.length;\n  cycles.set(array, newArray);\n  for (let i = 0; i < length; i++) {\n    newArray[i] = deepCyclicCopyReplaceable(array[i], cycles);\n  }\n  return newArray;\n}\nfunction deepCyclicCopyMap(map, cycles) {\n  const newMap = new Map();\n  cycles.set(map, newMap);\n  map.forEach((value, key) => {\n    newMap.set(key, deepCyclicCopyReplaceable(value, cycles));\n  });\n  return newMap;\n}\n"],"version":3}
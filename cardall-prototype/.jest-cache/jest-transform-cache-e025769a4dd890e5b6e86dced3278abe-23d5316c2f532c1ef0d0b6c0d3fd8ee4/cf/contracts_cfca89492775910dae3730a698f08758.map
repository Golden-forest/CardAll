{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\node_modules\\dnd-core\\dist\\contracts.js","mappings":";;AACA,wDAIC;AACD,wDAIC;AACD,oCAOC;AAlBD,oDAAiD;AACjD,SAAgB,sBAAsB,CAAC,MAAM;IACzC,IAAA,qBAAS,EAAC,OAAO,MAAM,CAAC,OAAO,KAAK,UAAU,EAAE,oCAAoC,CAAC,CAAC;IACtF,IAAA,qBAAS,EAAC,OAAO,MAAM,CAAC,SAAS,KAAK,UAAU,EAAE,sCAAsC,CAAC,CAAC;IAC1F,IAAA,qBAAS,EAAC,OAAO,MAAM,CAAC,OAAO,KAAK,UAAU,EAAE,oCAAoC,CAAC,CAAC;AAC1F,CAAC;AACD,SAAgB,sBAAsB,CAAC,MAAM;IACzC,IAAA,qBAAS,EAAC,OAAO,MAAM,CAAC,OAAO,KAAK,UAAU,EAAE,oCAAoC,CAAC,CAAC;IACtF,IAAA,qBAAS,EAAC,OAAO,MAAM,CAAC,KAAK,KAAK,UAAU,EAAE,kCAAkC,CAAC,CAAC;IAClF,IAAA,qBAAS,EAAC,OAAO,MAAM,CAAC,IAAI,KAAK,UAAU,EAAE,sCAAsC,CAAC,CAAC;AACzF,CAAC;AACD,SAAgB,YAAY,CAAC,IAAI,EAAE,UAAU;IACzC,IAAI,UAAU,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;QACpC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAC,EAAE,CAAA,YAAY,CAAC,CAAC,EAAE,KAAK,CAAC,CACvC,CAAC;QACF,OAAO;IACX,CAAC;IACD,IAAA,qBAAS,EAAC,OAAO,IAAI,KAAK,QAAQ,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC,6DAA6D,CAAC,CAAC,CAAC,wCAAwC,CAAC,CAAC;AAC3L,CAAC;AAED,qCAAqC","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\node_modules\\dnd-core\\dist\\contracts.js"],"sourcesContent":["import { invariant } from '@react-dnd/invariant';\nexport function validateSourceContract(source) {\n    invariant(typeof source.canDrag === 'function', 'Expected canDrag to be a function.');\n    invariant(typeof source.beginDrag === 'function', 'Expected beginDrag to be a function.');\n    invariant(typeof source.endDrag === 'function', 'Expected endDrag to be a function.');\n}\nexport function validateTargetContract(target) {\n    invariant(typeof target.canDrop === 'function', 'Expected canDrop to be a function.');\n    invariant(typeof target.hover === 'function', 'Expected hover to be a function.');\n    invariant(typeof target.drop === 'function', 'Expected beginDrag to be a function.');\n}\nexport function validateType(type, allowArray) {\n    if (allowArray && Array.isArray(type)) {\n        type.forEach((t)=>validateType(t, false)\n        );\n        return;\n    }\n    invariant(typeof type === 'string' || typeof type === 'symbol', allowArray ? 'Type can only be a string, a symbol, or an array of either.' : 'Type can only be a string or a symbol.');\n}\n\n//# sourceMappingURL=contracts.js.map"],"version":3}
92a81ec66066e3a11d10ed1e05908061
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateSourceContract = validateSourceContract;
exports.validateTargetContract = validateTargetContract;
exports.validateType = validateType;
const invariant_1 = require("@react-dnd/invariant");
function validateSourceContract(source) {
    (0, invariant_1.invariant)(typeof source.canDrag === 'function', 'Expected canDrag to be a function.');
    (0, invariant_1.invariant)(typeof source.beginDrag === 'function', 'Expected beginDrag to be a function.');
    (0, invariant_1.invariant)(typeof source.endDrag === 'function', 'Expected endDrag to be a function.');
}
function validateTargetContract(target) {
    (0, invariant_1.invariant)(typeof target.canDrop === 'function', 'Expected canDrop to be a function.');
    (0, invariant_1.invariant)(typeof target.hover === 'function', 'Expected hover to be a function.');
    (0, invariant_1.invariant)(typeof target.drop === 'function', 'Expected beginDrag to be a function.');
}
function validateType(type, allowArray) {
    if (allowArray && Array.isArray(type)) {
        type.forEach((t) => validateType(t, false));
        return;
    }
    (0, invariant_1.invariant)(typeof type === 'string' || typeof type === 'symbol', allowArray ? 'Type can only be a string, a symbol, or an array of either.' : 'Type can only be a string or a symbol.');
}
//# sourceMappingURL=contracts.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXG5vZGVfbW9kdWxlc1xcZG5kLWNvcmVcXGRpc3RcXGNvbnRyYWN0cy5qcyIsIm1hcHBpbmdzIjoiOztBQUNBLHdEQUlDO0FBQ0Qsd0RBSUM7QUFDRCxvQ0FPQztBQWxCRCxvREFBaUQ7QUFDakQsU0FBZ0Isc0JBQXNCLENBQUMsTUFBTTtJQUN6QyxJQUFBLHFCQUFTLEVBQUMsT0FBTyxNQUFNLENBQUMsT0FBTyxLQUFLLFVBQVUsRUFBRSxvQ0FBb0MsQ0FBQyxDQUFDO0lBQ3RGLElBQUEscUJBQVMsRUFBQyxPQUFPLE1BQU0sQ0FBQyxTQUFTLEtBQUssVUFBVSxFQUFFLHNDQUFzQyxDQUFDLENBQUM7SUFDMUYsSUFBQSxxQkFBUyxFQUFDLE9BQU8sTUFBTSxDQUFDLE9BQU8sS0FBSyxVQUFVLEVBQUUsb0NBQW9DLENBQUMsQ0FBQztBQUMxRixDQUFDO0FBQ0QsU0FBZ0Isc0JBQXNCLENBQUMsTUFBTTtJQUN6QyxJQUFBLHFCQUFTLEVBQUMsT0FBTyxNQUFNLENBQUMsT0FBTyxLQUFLLFVBQVUsRUFBRSxvQ0FBb0MsQ0FBQyxDQUFDO0lBQ3RGLElBQUEscUJBQVMsRUFBQyxPQUFPLE1BQU0sQ0FBQyxLQUFLLEtBQUssVUFBVSxFQUFFLGtDQUFrQyxDQUFDLENBQUM7SUFDbEYsSUFBQSxxQkFBUyxFQUFDLE9BQU8sTUFBTSxDQUFDLElBQUksS0FBSyxVQUFVLEVBQUUsc0NBQXNDLENBQUMsQ0FBQztBQUN6RixDQUFDO0FBQ0QsU0FBZ0IsWUFBWSxDQUFDLElBQUksRUFBRSxVQUFVO0lBQ3pDLElBQUksVUFBVSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUNwQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQSxZQUFZLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUN2QyxDQUFDO1FBQ0YsT0FBTztJQUNYLENBQUM7SUFDRCxJQUFBLHFCQUFTLEVBQUMsT0FBTyxJQUFJLEtBQUssUUFBUSxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLDZEQUE2RCxDQUFDLENBQUMsQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0FBQzNMLENBQUM7QUFFRCxxQ0FBcUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXG5vZGVfbW9kdWxlc1xcZG5kLWNvcmVcXGRpc3RcXGNvbnRyYWN0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tICdAcmVhY3QtZG5kL2ludmFyaWFudCc7XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVTb3VyY2VDb250cmFjdChzb3VyY2UpIHtcbiAgICBpbnZhcmlhbnQodHlwZW9mIHNvdXJjZS5jYW5EcmFnID09PSAnZnVuY3Rpb24nLCAnRXhwZWN0ZWQgY2FuRHJhZyB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIGludmFyaWFudCh0eXBlb2Ygc291cmNlLmJlZ2luRHJhZyA9PT0gJ2Z1bmN0aW9uJywgJ0V4cGVjdGVkIGJlZ2luRHJhZyB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIGludmFyaWFudCh0eXBlb2Ygc291cmNlLmVuZERyYWcgPT09ICdmdW5jdGlvbicsICdFeHBlY3RlZCBlbmREcmFnIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG59XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVUYXJnZXRDb250cmFjdCh0YXJnZXQpIHtcbiAgICBpbnZhcmlhbnQodHlwZW9mIHRhcmdldC5jYW5Ecm9wID09PSAnZnVuY3Rpb24nLCAnRXhwZWN0ZWQgY2FuRHJvcCB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIGludmFyaWFudCh0eXBlb2YgdGFyZ2V0LmhvdmVyID09PSAnZnVuY3Rpb24nLCAnRXhwZWN0ZWQgaG92ZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICBpbnZhcmlhbnQodHlwZW9mIHRhcmdldC5kcm9wID09PSAnZnVuY3Rpb24nLCAnRXhwZWN0ZWQgYmVnaW5EcmFnIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG59XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVUeXBlKHR5cGUsIGFsbG93QXJyYXkpIHtcbiAgICBpZiAoYWxsb3dBcnJheSAmJiBBcnJheS5pc0FycmF5KHR5cGUpKSB7XG4gICAgICAgIHR5cGUuZm9yRWFjaCgodCk9PnZhbGlkYXRlVHlwZSh0LCBmYWxzZSlcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnZhcmlhbnQodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB0eXBlID09PSAnc3ltYm9sJywgYWxsb3dBcnJheSA/ICdUeXBlIGNhbiBvbmx5IGJlIGEgc3RyaW5nLCBhIHN5bWJvbCwgb3IgYW4gYXJyYXkgb2YgZWl0aGVyLicgOiAnVHlwZSBjYW4gb25seSBiZSBhIHN0cmluZyBvciBhIHN5bWJvbC4nKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udHJhY3RzLmpzLm1hcCJdLCJ2ZXJzaW9uIjozfQ==
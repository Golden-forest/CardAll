64319f2e602c8798349e5e56b1a0b8d4
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDragDropManager = createDragDropManager;
const redux_1 = require("redux");
const DragDropManagerImpl_js_1 = require("./classes/DragDropManagerImpl.js");
const DragDropMonitorImpl_js_1 = require("./classes/DragDropMonitorImpl.js");
const HandlerRegistryImpl_js_1 = require("./classes/HandlerRegistryImpl.js");
const index_js_1 = require("./reducers/index.js");
function createDragDropManager(backendFactory, globalContext = undefined, backendOptions = {}, debugMode = false) {
    const store = makeStoreInstance(debugMode);
    const monitor = new DragDropMonitorImpl_js_1.DragDropMonitorImpl(store, new HandlerRegistryImpl_js_1.HandlerRegistryImpl(store));
    const manager = new DragDropManagerImpl_js_1.DragDropManagerImpl(store, monitor);
    const backend = backendFactory(manager, globalContext, backendOptions);
    manager.receiveBackend(backend);
    return manager;
}
function makeStoreInstance(debugMode) {
    // TODO: if we ever make a react-native version of this,
    // we'll need to consider how to pull off dev-tooling
    const reduxDevTools = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__;
    return (0, redux_1.createStore)(index_js_1.reduce, debugMode && reduxDevTools && reduxDevTools({
        name: 'dnd-core',
        instanceId: 'dnd-core'
    }));
}
//# sourceMappingURL=createDragDropManager.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXG5vZGVfbW9kdWxlc1xcZG5kLWNvcmVcXGRpc3RcXGNyZWF0ZURyYWdEcm9wTWFuYWdlci5qcyIsIm1hcHBpbmdzIjoiOztBQUtBLHNEQU9DO0FBWkQsaUNBQW9DO0FBQ3BDLDZFQUF1RTtBQUN2RSw2RUFBdUU7QUFDdkUsNkVBQXVFO0FBQ3ZFLGtEQUE2QztBQUM3QyxTQUFnQixxQkFBcUIsQ0FBQyxjQUFjLEVBQUUsYUFBYSxHQUFHLFNBQVMsRUFBRSxjQUFjLEdBQUcsRUFBRSxFQUFFLFNBQVMsR0FBRyxLQUFLO0lBQ25ILE1BQU0sS0FBSyxHQUFHLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzNDLE1BQU0sT0FBTyxHQUFHLElBQUksNENBQW1CLENBQUMsS0FBSyxFQUFFLElBQUksNENBQW1CLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUMvRSxNQUFNLE9BQU8sR0FBRyxJQUFJLDRDQUFtQixDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN4RCxNQUFNLE9BQU8sR0FBRyxjQUFjLENBQUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUN2RSxPQUFPLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2hDLE9BQU8sT0FBTyxDQUFDO0FBQ25CLENBQUM7QUFDRCxTQUFTLGlCQUFpQixDQUFDLFNBQVM7SUFDaEMsd0RBQXdEO0lBQ3hELHFEQUFxRDtJQUNyRCxNQUFNLGFBQWEsR0FBRyxPQUFPLE1BQU0sS0FBSyxXQUFXLElBQUksTUFBTSxDQUFDLDRCQUE0QixDQUFDO0lBQzNGLE9BQU8sSUFBQSxtQkFBVyxFQUFDLGlCQUFNLEVBQUUsU0FBUyxJQUFJLGFBQWEsSUFBSSxhQUFhLENBQUM7UUFDbkUsSUFBSSxFQUFFLFVBQVU7UUFDaEIsVUFBVSxFQUFFLFVBQVU7S0FDekIsQ0FBQyxDQUFDLENBQUM7QUFDUixDQUFDO0FBRUQsaURBQWlEIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkQ6XFxQcm9qZWN0c1xcQ2FyZEV2ZXJ5dGhpbmdcXGNhcmRhbGwtcHJvdG90eXBlXFxub2RlX21vZHVsZXNcXGRuZC1jb3JlXFxkaXN0XFxjcmVhdGVEcmFnRHJvcE1hbmFnZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU3RvcmUgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyBEcmFnRHJvcE1hbmFnZXJJbXBsIH0gZnJvbSAnLi9jbGFzc2VzL0RyYWdEcm9wTWFuYWdlckltcGwuanMnO1xuaW1wb3J0IHsgRHJhZ0Ryb3BNb25pdG9ySW1wbCB9IGZyb20gJy4vY2xhc3Nlcy9EcmFnRHJvcE1vbml0b3JJbXBsLmpzJztcbmltcG9ydCB7IEhhbmRsZXJSZWdpc3RyeUltcGwgfSBmcm9tICcuL2NsYXNzZXMvSGFuZGxlclJlZ2lzdHJ5SW1wbC5qcyc7XG5pbXBvcnQgeyByZWR1Y2UgfSBmcm9tICcuL3JlZHVjZXJzL2luZGV4LmpzJztcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEcmFnRHJvcE1hbmFnZXIoYmFja2VuZEZhY3RvcnksIGdsb2JhbENvbnRleHQgPSB1bmRlZmluZWQsIGJhY2tlbmRPcHRpb25zID0ge30sIGRlYnVnTW9kZSA9IGZhbHNlKSB7XG4gICAgY29uc3Qgc3RvcmUgPSBtYWtlU3RvcmVJbnN0YW5jZShkZWJ1Z01vZGUpO1xuICAgIGNvbnN0IG1vbml0b3IgPSBuZXcgRHJhZ0Ryb3BNb25pdG9ySW1wbChzdG9yZSwgbmV3IEhhbmRsZXJSZWdpc3RyeUltcGwoc3RvcmUpKTtcbiAgICBjb25zdCBtYW5hZ2VyID0gbmV3IERyYWdEcm9wTWFuYWdlckltcGwoc3RvcmUsIG1vbml0b3IpO1xuICAgIGNvbnN0IGJhY2tlbmQgPSBiYWNrZW5kRmFjdG9yeShtYW5hZ2VyLCBnbG9iYWxDb250ZXh0LCBiYWNrZW5kT3B0aW9ucyk7XG4gICAgbWFuYWdlci5yZWNlaXZlQmFja2VuZChiYWNrZW5kKTtcbiAgICByZXR1cm4gbWFuYWdlcjtcbn1cbmZ1bmN0aW9uIG1ha2VTdG9yZUluc3RhbmNlKGRlYnVnTW9kZSkge1xuICAgIC8vIFRPRE86IGlmIHdlIGV2ZXIgbWFrZSBhIHJlYWN0LW5hdGl2ZSB2ZXJzaW9uIG9mIHRoaXMsXG4gICAgLy8gd2UnbGwgbmVlZCB0byBjb25zaWRlciBob3cgdG8gcHVsbCBvZmYgZGV2LXRvb2xpbmdcbiAgICBjb25zdCByZWR1eERldlRvb2xzID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX187XG4gICAgcmV0dXJuIGNyZWF0ZVN0b3JlKHJlZHVjZSwgZGVidWdNb2RlICYmIHJlZHV4RGV2VG9vbHMgJiYgcmVkdXhEZXZUb29scyh7XG4gICAgICAgIG5hbWU6ICdkbmQtY29yZScsXG4gICAgICAgIGluc3RhbmNlSWQ6ICdkbmQtY29yZSdcbiAgICB9KSk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZURyYWdEcm9wTWFuYWdlci5qcy5tYXAiXSwidmVyc2lvbiI6M30=
551d3579f3e6cc023b93a04f275a3fc9
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
exports.default = void 0;
var _diffSequences = _interopRequireDefault(require('diff-sequences'));
var _cleanupSemantic = require('./cleanupSemantic');
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
const diffStrings = (a, b) => {
    const isCommon = (aIndex, bIndex) => a[aIndex] === b[bIndex];
    let aIndex = 0;
    let bIndex = 0;
    const diffs = [];
    const foundSubsequence = (nCommon, aCommon, bCommon) => {
        if (aIndex !== aCommon) {
            diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_DELETE, a.slice(aIndex, aCommon)));
        }
        if (bIndex !== bCommon) {
            diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_INSERT, b.slice(bIndex, bCommon)));
        }
        aIndex = aCommon + nCommon; // number of characters compared in a
        bIndex = bCommon + nCommon; // number of characters compared in b
        diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_EQUAL, b.slice(bCommon, bIndex)));
    };
    (0, _diffSequences.default)(a.length, b.length, isCommon, foundSubsequence);
    // After the last common subsequence, push remaining change items.
    if (aIndex !== a.length) {
        diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_DELETE, a.slice(aIndex)));
    }
    if (bIndex !== b.length) {
        diffs.push(new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_INSERT, b.slice(bIndex)));
    }
    return diffs;
};
var _default = diffStrings;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXG5vZGVfbW9kdWxlc1xcamVzdC1heGVcXG5vZGVfbW9kdWxlc1xcamVzdC1kaWZmXFxidWlsZFxcZGlmZlN0cmluZ3MuanMiLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBRWIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0lBQzNDLEtBQUssRUFBRSxJQUFJO0NBQ1osQ0FBQyxDQUFDO0FBQ0gsT0FBTyxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsQ0FBQztBQUN6QixJQUFJLGNBQWMsR0FBRyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0FBQ3ZFLElBQUksZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDcEQsU0FBUyxzQkFBc0IsQ0FBQyxHQUFHO0lBQ2pDLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBQyxPQUFPLEVBQUUsR0FBRyxFQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNEOzs7OztHQUtHO0FBRUgsTUFBTSxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDM0IsTUFBTSxRQUFRLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzdELElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNmLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNmLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUNqQixNQUFNLGdCQUFnQixHQUFHLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRTtRQUNyRCxJQUFJLE1BQU0sS0FBSyxPQUFPLEVBQUUsQ0FBQztZQUN2QixLQUFLLENBQUMsSUFBSSxDQUNSLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUN2QixnQkFBZ0IsQ0FBQyxXQUFXLEVBQzVCLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUN6QixDQUNGLENBQUM7UUFDSixDQUFDO1FBQ0QsSUFBSSxNQUFNLEtBQUssT0FBTyxFQUFFLENBQUM7WUFDdkIsS0FBSyxDQUFDLElBQUksQ0FDUixJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FDdkIsZ0JBQWdCLENBQUMsV0FBVyxFQUM1QixDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FDekIsQ0FDRixDQUFDO1FBQ0osQ0FBQztRQUNELE1BQU0sR0FBRyxPQUFPLEdBQUcsT0FBTyxDQUFDLENBQUMscUNBQXFDO1FBQ2pFLE1BQU0sR0FBRyxPQUFPLEdBQUcsT0FBTyxDQUFDLENBQUMscUNBQXFDO1FBQ2pFLEtBQUssQ0FBQyxJQUFJLENBQ1IsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQ3ZCLGdCQUFnQixDQUFDLFVBQVUsRUFDM0IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQ3pCLENBQ0YsQ0FBQztJQUNKLENBQUMsQ0FBQztJQUNGLENBQUMsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFFNUUsa0VBQWtFO0lBQ2xFLElBQUksTUFBTSxLQUFLLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUN4QixLQUFLLENBQUMsSUFBSSxDQUNSLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQ3pFLENBQUM7SUFDSixDQUFDO0lBQ0QsSUFBSSxNQUFNLEtBQUssQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3hCLEtBQUssQ0FBQyxJQUFJLENBQ1IsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FDekUsQ0FBQztJQUNKLENBQUM7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMsQ0FBQztBQUNGLElBQUksUUFBUSxHQUFHLFdBQVcsQ0FBQztBQUMzQixPQUFPLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJEOlxcUHJvamVjdHNcXENhcmRFdmVyeXRoaW5nXFxjYXJkYWxsLXByb3RvdHlwZVxcbm9kZV9tb2R1bGVzXFxqZXN0LWF4ZVxcbm9kZV9tb2R1bGVzXFxqZXN0LWRpZmZcXGJ1aWxkXFxkaWZmU3RyaW5ncy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9kaWZmU2VxdWVuY2VzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCdkaWZmLXNlcXVlbmNlcycpKTtcbnZhciBfY2xlYW51cFNlbWFudGljID0gcmVxdWlyZSgnLi9jbGVhbnVwU2VtYW50aWMnKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ZGVmYXVsdDogb2JqfTtcbn1cbi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5jb25zdCBkaWZmU3RyaW5ncyA9IChhLCBiKSA9PiB7XG4gIGNvbnN0IGlzQ29tbW9uID0gKGFJbmRleCwgYkluZGV4KSA9PiBhW2FJbmRleF0gPT09IGJbYkluZGV4XTtcbiAgbGV0IGFJbmRleCA9IDA7XG4gIGxldCBiSW5kZXggPSAwO1xuICBjb25zdCBkaWZmcyA9IFtdO1xuICBjb25zdCBmb3VuZFN1YnNlcXVlbmNlID0gKG5Db21tb24sIGFDb21tb24sIGJDb21tb24pID0+IHtcbiAgICBpZiAoYUluZGV4ICE9PSBhQ29tbW9uKSB7XG4gICAgICBkaWZmcy5wdXNoKFxuICAgICAgICBuZXcgX2NsZWFudXBTZW1hbnRpYy5EaWZmKFxuICAgICAgICAgIF9jbGVhbnVwU2VtYW50aWMuRElGRl9ERUxFVEUsXG4gICAgICAgICAgYS5zbGljZShhSW5kZXgsIGFDb21tb24pXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChiSW5kZXggIT09IGJDb21tb24pIHtcbiAgICAgIGRpZmZzLnB1c2goXG4gICAgICAgIG5ldyBfY2xlYW51cFNlbWFudGljLkRpZmYoXG4gICAgICAgICAgX2NsZWFudXBTZW1hbnRpYy5ESUZGX0lOU0VSVCxcbiAgICAgICAgICBiLnNsaWNlKGJJbmRleCwgYkNvbW1vbilcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gICAgYUluZGV4ID0gYUNvbW1vbiArIG5Db21tb247IC8vIG51bWJlciBvZiBjaGFyYWN0ZXJzIGNvbXBhcmVkIGluIGFcbiAgICBiSW5kZXggPSBiQ29tbW9uICsgbkNvbW1vbjsgLy8gbnVtYmVyIG9mIGNoYXJhY3RlcnMgY29tcGFyZWQgaW4gYlxuICAgIGRpZmZzLnB1c2goXG4gICAgICBuZXcgX2NsZWFudXBTZW1hbnRpYy5EaWZmKFxuICAgICAgICBfY2xlYW51cFNlbWFudGljLkRJRkZfRVFVQUwsXG4gICAgICAgIGIuc2xpY2UoYkNvbW1vbiwgYkluZGV4KVxuICAgICAgKVxuICAgICk7XG4gIH07XG4gICgwLCBfZGlmZlNlcXVlbmNlcy5kZWZhdWx0KShhLmxlbmd0aCwgYi5sZW5ndGgsIGlzQ29tbW9uLCBmb3VuZFN1YnNlcXVlbmNlKTtcblxuICAvLyBBZnRlciB0aGUgbGFzdCBjb21tb24gc3Vic2VxdWVuY2UsIHB1c2ggcmVtYWluaW5nIGNoYW5nZSBpdGVtcy5cbiAgaWYgKGFJbmRleCAhPT0gYS5sZW5ndGgpIHtcbiAgICBkaWZmcy5wdXNoKFxuICAgICAgbmV3IF9jbGVhbnVwU2VtYW50aWMuRGlmZihfY2xlYW51cFNlbWFudGljLkRJRkZfREVMRVRFLCBhLnNsaWNlKGFJbmRleCkpXG4gICAgKTtcbiAgfVxuICBpZiAoYkluZGV4ICE9PSBiLmxlbmd0aCkge1xuICAgIGRpZmZzLnB1c2goXG4gICAgICBuZXcgX2NsZWFudXBTZW1hbnRpYy5EaWZmKF9jbGVhbnVwU2VtYW50aWMuRElGRl9JTlNFUlQsIGIuc2xpY2UoYkluZGV4KSlcbiAgICApO1xuICB9XG4gIHJldHVybiBkaWZmcztcbn07XG52YXIgX2RlZmF1bHQgPSBkaWZmU3RyaW5ncztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuIl0sInZlcnNpb24iOjN9
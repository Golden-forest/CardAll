{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\tests\\integration\\card-management.test.tsx","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\tests\\integration\\card-management.test.tsx"],"sourcesContent":["// 卡片管理集成测试\nimport { describe, it, expect, beforeEach, afterEach } from '@jest/globals'\nimport { render, screen, fireEvent, waitFor, act } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport { MockDatabaseService, MockSupabaseService, MockSyncService } from '../mock-services'\nimport { CardFixture, FolderFixture, TagFixture } from '../data-fixtures'\nimport { PerformanceTester } from '../advanced-test-utils'\nimport type { TestCardData, TestFolderData, TestTagData } from '../advanced-test-utils'\n\n// 模拟组件\nconst CardGrid = ({ cards, onCardClick, onCardDelete, onCardFlip }: {\n  cards: TestCardData[]\n  onCardClick: (card: TestCardData) => void\n  onCardDelete: (cardId: string) => void\n  onCardFlip: (cardId: string) => void\n}) => (\n  <div data-testid=\"card-grid\">\n    {cards.map(card => (\n      <div key={card.id} data-testid={`card-${card.id}`} data-card-id={card.id}>\n        <div data-testid={`card-title-${card.id}`}>{card.frontContent.title}</div>\n        <div data-testid={`card-content-${card.id}`}>{card.frontContent.text}</div>\n        <button \n          data-testid={`card-flip-${card.id}`}\n          onClick={() => onCardFlip(card.id)}\n        >\n          翻转\n        </button>\n        <button \n          data-testid={`card-delete-${card.id}`}\n          onClick={() => onCardDelete(card.id)}\n        >\n          删除\n        </button>\n        <div \n          data-testid={`card-click-${card.id}`}\n          onClick={() => onCardClick(card)}\n        >\n          点击区域\n        </div>\n      </div>\n    ))}\n  </div>\n)\n\nconst CardForm = ({ onSubmit, onCancel }: {\n  onSubmit: (card: Partial<TestCardData>) => void\n  onCancel: () => void\n}) => {\n  const [title, setTitle] = useState('')\n  const [content, setContent] = useState('')\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n    onSubmit({\n      frontContent: {\n        title,\n        text: content,\n        images: [],\n        tags: [],\n        lastModified: new Date(),\n      },\n      backContent: {\n        title: '',\n        text: '',\n        images: [],\n        tags: [],\n        lastModified: new Date(),\n      },\n      style: {\n        type: 'solid',\n        backgroundColor: '#ffffff',\n        fontFamily: 'system-ui',\n        fontSize: 'base',\n        fontWeight: 'normal',\n        textColor: '#1f2937',\n        borderRadius: 'xl',\n        shadow: 'md',\n        borderWidth: 0,\n      },\n      isFlipped: false,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    })\n  }\n\n  return (\n    <form data-testid=\"card-form\" onSubmit={handleSubmit}>\n      <input\n        data-testid=\"card-title-input\"\n        value={title}\n        onChange={(e) => setTitle(e.target.value)}\n        placeholder=\"卡片标题\"\n        required\n      />\n      <textarea\n        data-testid=\"card-content-input\"\n        value={content}\n        onChange={(e) => setContent(e.target.value)}\n        placeholder=\"卡片内容\"\n        required\n      />\n      <button type=\"submit\" data-testid=\"card-submit-button\">创建卡片</button>\n      <button type=\"button\" data-testid=\"card-cancel-button\" onClick={onCancel}>取消</button>\n    </form>\n  )\n}\n\nconst CardSearch = ({ onSearch }: {\n  onSearch: (searchTerm: string) => void\n}) => {\n  const [searchTerm, setSearchTerm] = useState('')\n\n  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const term = e.target.value\n    setSearchTerm(term)\n    onSearch(term)\n  }\n\n  return (\n    <div data-testid=\"card-search\">\n      <input\n        data-testid=\"search-input\"\n        value={searchTerm}\n        onChange={handleSearch}\n        placeholder=\"搜索卡片...\"\n      />\n    </div>\n  )\n}\n\n// 模拟状态管理\nfunction useState<T>(initial: T): [T, (value: T) => void] {\n  let state = initial\n  return [\n    state,\n    (value: T) => {\n      state = value\n    }\n  ] as const\n}\n\ndescribe('CardManagementIntegration', () => {\n  let databaseService: MockDatabaseService\n  let supabaseService: MockSupabaseService\n  let syncService: MockSyncService\n  let performanceTester: PerformanceTester\n  let user: ReturnType<typeof userEvent.setup>\n\n  beforeEach(() => {\n    // 创建模拟服务\n    databaseService = new MockDatabaseService()\n    supabaseService = new MockSupabaseService()\n    syncService = new MockSyncService(supabaseService, databaseService)\n    performanceTester = new PerformanceTester()\n    user = userEvent.setup()\n  })\n\n  afterEach(() => {\n    // 清理\n    databaseService.reset()\n    supabaseService.reset()\n    syncService.reset()\n    performanceTester.clear()\n  })\n\n  describe('卡片创建和显示', () => {\n    it('应该能够创建新卡片并显示在网格中', async () => {\n      const mockCards: TestCardData[] = []\n      const mockOnCardClick = jest.fn()\n      const mockOnCardDelete = jest.fn()\n      const mockOnCardFlip = jest.fn()\n\n      const { rerender } = render(\n        <CardGrid \n          cards={mockCards}\n          onCardClick={mockOnCardClick}\n          onCardDelete={mockOnCardDelete}\n          onCardFlip={mockOnCardFlip}\n        />\n      )\n\n      // 初始状态应该没有卡片\n      expect(screen.queryByTestId('card-grid')).toBeInTheDocument()\n      expect(screen.queryAllByTestId(/^card-/)).toHaveLength(0)\n\n      // 创建新卡片\n      const newCard = CardFixture.basic()\n      mockCards.push(newCard)\n\n      // 重新渲染\n      rerender(\n        <CardGrid \n          cards={mockCards}\n          onCardClick={mockOnCardClick}\n          onCardDelete={mockOnCardDelete}\n          onCardFlip={mockOnCardFlip}\n        />\n      )\n\n      // 新卡片应该显示在网格中\n      expect(screen.getByTestId(`card-${newCard.id}`)).toBeInTheDocument()\n      expect(screen.getByTestId(`card-title-${newCard.id}`)).toHaveText(newCard.frontContent.title)\n      expect(screen.getByTestId(`card-content-${newCard.id}`)).toHaveText(newCard.frontContent.text)\n    })\n\n    it('应该能够通过表单创建卡片', async () => {\n      const mockOnSubmit = jest.fn()\n      const mockOnCancel = jest.fn()\n\n      render(<CardForm onSubmit={mockOnSubmit} onCancel={mockOnCancel} />)\n\n      // 填写表单\n      const titleInput = screen.getByTestId('card-title-input')\n      const contentInput = screen.getByTestId('card-content-input')\n      const submitButton = screen.getByTestId('card-submit-button')\n\n      await user.type(titleInput, '测试卡片标题')\n      await user.type(contentInput, '测试卡片内容')\n\n      // 提交表单\n      await user.click(submitButton)\n\n      // 应该调用onSubmit回调\n      expect(mockOnSubmit).toHaveBeenCalledTimes(1)\n      expect(mockOnSubmit).toHaveBeenCalledWith(expect.objectContaining({\n        frontContent: expect.objectContaining({\n          title: '测试卡片标题',\n          text: '测试卡片内容',\n        }),\n      }))\n    })\n\n    it('应该验证表单输入', async () => {\n      const mockOnSubmit = jest.fn()\n      const mockOnCancel = jest.fn()\n\n      render(<CardForm onSubmit={mockOnSubmit} onCancel={mockOnCancel} />)\n\n      const submitButton = screen.getByTestId('card-submit-button')\n\n      // 尝试提交空表单\n      await user.click(submitButton)\n\n      // 不应该调用onSubmit（HTML5验证会阻止提交）\n      expect(mockOnSubmit).not.toHaveBeenCalled()\n\n      // 填写标题但不填写内容\n      const titleInput = screen.getByTestId('card-title-input')\n      await user.type(titleInput, '只有标题')\n      await user.click(submitButton)\n\n      // 仍然不应该调用onSubmit（内容是必需的）\n      expect(mockOnSubmit).not.toHaveBeenCalled()\n    })\n  })\n\n  describe('卡片操作', () => {\n    it('应该能够删除卡片', async () => {\n      const testCard = CardFixture.basic()\n      const mockCards = [testCard]\n      const mockOnCardDelete = jest.fn()\n\n      render(\n        <CardGrid \n          cards={mockCards}\n          onCardClick={jest.fn()}\n          onCardDelete={mockOnCardDelete}\n          onCardFlip={jest.fn()}\n        />\n      )\n\n      // 点击删除按钮\n      const deleteButton = screen.getByTestId(`card-delete-${testCard.id}`)\n      await user.click(deleteButton)\n\n      // 应该调用删除回调\n      expect(mockOnCardDelete).toHaveBeenCalledTimes(1)\n      expect(mockOnCardDelete).toHaveBeenCalledWith(testCard.id)\n    })\n\n    it('应该能够翻转卡片', async () => {\n      const testCard = CardFixture.basic()\n      const mockCards = [testCard]\n      const mockOnCardFlip = jest.fn()\n\n      render(\n        <CardGrid \n          cards={mockCards}\n          onCardClick={jest.fn()}\n          onCardDelete={jest.fn()}\n          onCardFlip={mockOnCardFlip}\n        />\n      )\n\n      // 点击翻转按钮\n      const flipButton = screen.getByTestId(`card-flip-${testCard.id}`)\n      await user.click(flipButton)\n\n      // 应该调用翻转回调\n      expect(mockOnCardFlip).toHaveBeenCalledTimes(1)\n      expect(mockOnCardFlip).toHaveBeenCalledWith(testCard.id)\n    })\n\n    it('应该能够点击卡片查看详情', async () => {\n      const testCard = CardFixture.basic()\n      const mockCards = [testCard]\n      const mockOnCardClick = jest.fn()\n\n      render(\n        <CardGrid \n          cards={mockCards}\n          onCardClick={mockOnCardClick}\n          onCardDelete={jest.fn()}\n          onCardFlip={jest.fn()}\n        />\n      )\n\n      // 点击卡片\n      const clickArea = screen.getByTestId(`card-click-${testCard.id}`)\n      await user.click(clickArea)\n\n      // 应该调用点击回调\n      expect(mockOnCardClick).toHaveBeenCalledTimes(1)\n      expect(mockOnCardClick).toHaveBeenCalledWith(testCard)\n    })\n  })\n\n  describe('卡片搜索', () => {\n    it('应该能够搜索卡片', async () => {\n      const mockOnSearch = jest.fn()\n\n      render(<CardSearch onSearch={mockOnSearch} />)\n\n      const searchInput = screen.getByTestId('search-input')\n\n      // 输入搜索词\n      await user.type(searchInput, '搜索关键词')\n\n      // 应该调用搜索回调\n      expect(mockOnSearch).toHaveBeenCalledTimes(5) // 每个字符触发一次\n      expect(mockOnSearch).toHaveBeenLastCalledWith('搜索关键词')\n    })\n\n    it('应该处理搜索输入的防抖', async () => {\n      const mockOnSearch = jest.fn()\n\n      render(<CardSearch onSearch={mockOnSearch} />)\n\n      const searchInput = screen.getByTestId('search-input')\n\n      // 快速输入多个字符\n      await user.type(searchInput, '快速搜索测试')\n\n      // 在实际应用中，这里应该有防抖逻辑\n      // 在这个测试中，我们验证每次输入都会触发搜索\n      expect(mockOnSearch).toHaveBeenCalledTimes(6)\n    })\n  })\n\n  describe('数据库集成', () => {\n    it('应该能够将卡片保存到数据库', async () => {\n      const cardData = CardFixture.basic()\n\n      // 性能测试\n      const addTime = await performanceTester.measure('add-card', async () => {\n        const result = await databaseService.cards.add(cardData)\n        return result\n      })\n\n      // 验证卡片已保存\n      const savedCard = await databaseService.cards.get(cardData.id)\n      expect(savedCard).toBeDefined()\n      expect(savedCard?.frontContent.title).toBe(cardData.frontContent.title)\n\n      // 验证性能\n      expect(addTime).toBeLessThan(100) // 应该在100ms内完成\n    })\n\n    it('应该能够从数据库获取卡片列表', async () => {\n      const cards = CardFixture.list(10)\n\n      // 批量添加卡片\n      const bulkAddTime = await performanceTester.measure('bulk-add-cards', async () => {\n        await databaseService.cards.bulkAdd(cards)\n      })\n\n      // 获取所有卡片\n      const allCards = await databaseService.cards.getAll()\n      expect(allCards).toHaveLength(10)\n\n      // 验证性能\n      expect(bulkAddTime).toBeLessThan(200) // 应该在200ms内完成\n    })\n\n    it('应该能够更新卡片', async () => {\n      const cardData = CardFixture.basic()\n      await databaseService.cards.add(cardData)\n\n      const updates = {\n        frontContent: {\n          ...cardData.frontContent,\n          title: '更新后的标题',\n        },\n      }\n\n      const updateTime = await performanceTester.measure('update-card', async () => {\n        await databaseService.cards.update(cardData.id, updates)\n      })\n\n      // 验证更新\n      const updatedCard = await databaseService.cards.get(cardData.id)\n      expect(updatedCard?.frontContent.title).toBe('更新后的标题')\n\n      // 验证性能\n      expect(updateTime).toBeLessThan(50) // 应该在50ms内完成\n    })\n\n    it('应该能够删除卡片', async () => {\n      const cardData = CardFixture.basic()\n      await databaseService.cards.add(cardData)\n\n      const deleteTime = await performanceTester.measure('delete-card', async () => {\n        await databaseService.cards.delete(cardData.id)\n      })\n\n      // 验证删除\n      const deletedCard = await databaseService.cards.get(cardData.id)\n      expect(deletedCard).toBeUndefined()\n\n      // 验证性能\n      expect(deleteTime).toBeLessThan(50) // 应该在50ms内完成\n    })\n  })\n\n  describe('同步集成', () => {\n    it('应该能够同步卡片到云端', async () => {\n      // 创建本地卡片\n      const cardData = CardFixture.basic()\n      await databaseService.cards.add(cardData)\n\n      // 创建同步操作\n      const syncOperation = {\n        id: 'sync-op-1',\n        type: 'create' as const,\n        entity: 'card' as const,\n        entityId: cardData.id,\n        data: cardData,\n        priority: 'normal' as const,\n        timestamp: new Date(),\n        retryCount: 0,\n        maxRetries: 3,\n        status: 'pending' as const,\n      }\n\n      await databaseService.syncQueue.add(syncOperation)\n\n      // 执行同步\n      const syncTime = await performanceTester.measure('sync-card', async () => {\n        const result = await syncService.syncNow()\n        return result\n      })\n\n      // 验证同步结果\n      expect(syncTime).toBeLessThan(1000) // 应该在1秒内完成\n\n      // 验证同步队列状态\n      const syncStats = await databaseService.syncQueue.getStats()\n      expect(syncStats.completed).toBe(1)\n      expect(syncStats.pending).toBe(0)\n    })\n\n    it('应该处理同步错误', async () => {\n      // 设置离线状态\n      syncService.setOnline(false)\n\n      // 创建卡片并尝试同步\n      const cardData = CardFixture.basic()\n      await databaseService.cards.add(cardData)\n\n      const syncOperation = {\n        id: 'sync-op-2',\n        type: 'create' as const,\n        entity: 'card' as const,\n        entityId: cardData.id,\n        data: cardData,\n        priority: 'normal' as const,\n        timestamp: new Date(),\n        retryCount: 0,\n        maxRetries: 3,\n        status: 'pending' as const,\n      }\n\n      await databaseService.syncQueue.add(syncOperation)\n\n      // 尝试同步\n      const result = await syncService.syncNow()\n\n      // 应该失败\n      expect(result.success).toBe(false)\n      expect(result.errors).toBeGreaterThan(0)\n\n      // 验证同步队列状态\n      const syncStats = await databaseService.syncQueue.getStats()\n      expect(syncStats.failed).toBe(1)\n    })\n  })\n\n  describe('文件夹集成', () => {\n    it('应该能够创建文件夹并将卡片移动到文件夹', async () => {\n      // 创建文件夹\n      const folderData = FolderFixture.basic()\n      await databaseService.folders.add(folderData)\n\n      // 创建卡片\n      const cardData = CardFixture.inFolder(folderData.id)\n      await databaseService.cards.add(cardData)\n\n      // 验证文件夹包含卡片\n      const folderCards = await databaseService.cards.findByFolder(folderData.id)\n      expect(folderCards).toHaveLength(1)\n      expect(folderCards[0].id).toBe(cardData.id)\n    })\n\n    it('应该能够获取文件夹层级结构', async () => {\n      // 创建文件夹层级\n      const rootFolder = FolderFixture.basic({ id: 'root' })\n      const childFolder1 = FolderFixture.nested('root', { id: 'child1' })\n      const childFolder2 = FolderFixture.nested('root', { id: 'child2' })\n\n      await Promise.all([\n        databaseService.folders.add(rootFolder),\n        databaseService.folders.add(childFolder1),\n        databaseService.folders.add(childFolder2),\n      ])\n\n      // 获取根文件夹\n      const rootFolders = await databaseService.folders.getRoot()\n      expect(rootFolders).toHaveLength(1)\n      expect(rootFolders[0].id).toBe('root')\n\n      // 获取子文件夹\n      const childFolders = await databaseService.folders.getChildren('root')\n      expect(childFolders).toHaveLength(2)\n      expect(childFolders.map(f => f.id)).toEqual(['child1', 'child2'])\n    })\n  })\n\n  describe('标签集成', () => {\n    it('应该能够为卡片添加标签', async () => {\n      // 创建标签\n      const tagData = TagFixture.basic()\n      await databaseService.tags.add(tagData)\n\n      // 创建带标签的卡片\n      const cardData = CardFixture.basic({\n        frontContent: {\n          ...CardFixture.basic().frontContent,\n          tags: [tagData.name],\n        },\n      })\n      await databaseService.cards.add(cardData)\n\n      // 通过标签查找卡片\n      const taggedCards = await databaseService.cards.findByTag(tagData.name)\n      expect(taggedCards).toHaveLength(1)\n      expect(taggedCards[0].id).toBe(cardData.id)\n    })\n\n    it('应该能够获取标签统计信息', async () => {\n      // 创建多个标签和卡片\n      const tags = TagFixture.list().slice(0, 3)\n      await Promise.all(tags.map(tag => databaseService.tags.add(tag)))\n\n      const cards = [\n        CardFixture.basic({\n          frontContent: {\n            ...CardFixture.basic().frontContent,\n            tags: [tags[0].name, tags[1].name],\n          },\n        }),\n        CardFixture.basic({\n          frontContent: {\n            ...CardFixture.basic().frontContent,\n            tags: [tags[0].name],\n          },\n        }),\n      ]\n\n      await Promise.all(cards.map(card => databaseService.cards.add(card)))\n\n      // 获取所有标签（应该更新计数）\n      const allTags = await databaseService.tags.getAll()\n      expect(allTags).toHaveLength(3)\n    })\n  })\n\n  describe('性能测试', () => {\n    it('应该能够处理大量卡片', async () => {\n      // 创建大量卡片\n      const largeCardCount = 100\n      const cards = CardFixture.list(largeCardCount)\n\n      const bulkAddTime = await performanceTester.measure('bulk-add-large-cards', async () => {\n        await databaseService.cards.bulkAdd(cards)\n      })\n\n      // 验证所有卡片都已保存\n      const allCards = await databaseService.cards.getAll()\n      expect(allCards).toHaveLength(largeCardCount)\n\n      // 验证性能\n      expect(bulkAddTime).toBeLessThan(1000) // 应该在1秒内完成\n\n      // 测试获取性能\n      const getAllTime = await performanceTester.measure('get-all-cards', async () => {\n        return await databaseService.cards.getAll()\n      })\n\n      expect(getAllTime).toBeLessThan(100) // 应该在100ms内完成\n    })\n\n    it('应该能够处理快速连续操作', async () => {\n      // 快速连续创建卡片\n      const operations = []\n      for (let i = 0; i < 10; i++) {\n        operations.push(\n          performanceTester.measure(`create-card-${i}`, async () => {\n            const card = CardFixture.basic()\n            await databaseService.cards.add(card)\n            return card\n          })\n        )\n      }\n\n      // 并行执行所有操作\n      const results = await Promise.all(operations)\n\n      // 验证所有操作都成功\n      expect(results).toHaveLength(10)\n      \n      // 验证性能（每个操作都应该很快）\n      results.forEach((time, index) => {\n        expect(time).toBeLessThan(100) // 每个操作应该在100ms内完成\n      })\n    })\n  })\n\n  describe('错误处理', () => {\n    it('应该处理数据库操作失败', async () => {\n      // 模拟数据库错误\n      jest.spyOn(databaseService.cards, 'add').mockRejectedValueOnce(new Error('Database error'))\n\n      // 尝试添加卡片\n      await expect(databaseService.cards.add(CardFixture.basic())).rejects.toThrow('Database error')\n    })\n\n    it('应该处理同步失败', async () => {\n      // 模拟网络错误\n      jest.spyOn(supabaseService.from('cards'), 'insert').mockRejectedValueOnce(new Error('Network error'))\n\n      // 创建卡片并尝试同步\n      const cardData = CardFixture.basic()\n      await databaseService.cards.add(cardData)\n\n      const syncOperation = {\n        id: 'sync-op-error',\n        type: 'create' as const,\n        entity: 'card' as const,\n        entityId: cardData.id,\n        data: cardData,\n        priority: 'normal' as const,\n        timestamp: new Date(),\n        retryCount: 0,\n        maxRetries: 3,\n        status: 'pending' as const,\n      }\n\n      await databaseService.syncQueue.add(syncOperation)\n\n      // 尝试同步\n      const result = await syncService.syncNow()\n\n      // 应该失败\n      expect(result.success).toBe(false)\n      expect(result.errors).toBeGreaterThan(0)\n\n      // 应该记录错误\n      const syncErrors = syncService.getSyncErrors()\n      expect(syncErrors.length).toBeGreaterThan(0)\n    })\n  })\n})"],"version":3}
e30303ae826c639d2be56ecbb12a7e42
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// 数据库操作单元测试
const globals_1 = require("@jest/globals");
const mock_services_1 = require("../mock-services");
const data_fixtures_1 = require("../data-fixtures");
const advanced_test_utils_1 = require("../advanced-test-utils");
(0, globals_1.describe)('DatabaseOperations', () => {
    let databaseService;
    (0, globals_1.beforeEach)(() => {
        databaseService = new mock_services_1.MockDatabaseService();
    });
    (0, globals_1.afterEach)(() => {
        databaseService.reset();
    });
    (0, globals_1.describe)('卡片操作', () => {
        (0, globals_1.it)('应该能够添加卡片', async () => {
            const cardData = data_fixtures_1.CardFixture.basic();
            const result = await databaseService.cards.add(cardData);
            (0, globals_1.expect)(result).toBeDefined();
            (0, globals_1.expect)(typeof result).toBe('string');
            (0, globals_1.expect)(databaseService.cards.add).toHaveBeenCalledWith(cardData);
        });
        (0, globals_1.it)('应该能够获取卡片', async () => {
            const cardData = data_fixtures_1.CardFixture.basic();
            const cardId = await databaseService.cards.add(cardData);
            const retrievedCard = await databaseService.cards.get(cardId);
            (0, globals_1.expect)(retrievedCard).toBeDefined();
            (0, globals_1.expect)(retrievedCard?.id).toBe(cardId);
            (0, globals_1.expect)(retrievedCard?.frontContent.title).toBe(cardData.frontContent.title);
        });
        (0, globals_1.it)('应该能够获取所有卡片', async () => {
            const cards = data_fixtures_1.CardFixture.list(3);
            await Promise.all(cards.map(card => databaseService.cards.add(card)));
            const allCards = await databaseService.cards.getAll();
            (0, globals_1.expect)(allCards).toHaveLength(3);
            (0, globals_1.expect)(allCards.every(card => card.frontContent.title.includes('测试卡片'))).toBe(true);
        });
        (0, globals_1.it)('应该能够更新卡片', async () => {
            const cardData = data_fixtures_1.CardFixture.basic();
            const cardId = await databaseService.cards.add(cardData);
            const updates = {
                frontContent: {
                    ...cardData.frontContent,
                    title: '更新后的标题',
                },
                isFlipped: true,
            };
            const success = await databaseService.cards.update(cardId, updates);
            (0, globals_1.expect)(success).toBe(true);
            const updatedCard = await databaseService.cards.get(cardId);
            (0, globals_1.expect)(updatedCard?.frontContent.title).toBe('更新后的标题');
            (0, globals_1.expect)(updatedCard?.isFlipped).toBe(true);
        });
        (0, globals_1.it)('应该能够删除卡片', async () => {
            const cardData = data_fixtures_1.CardFixture.basic();
            const cardId = await databaseService.cards.add(cardData);
            const deleted = await databaseService.cards.delete(cardId);
            (0, globals_1.expect)(deleted).toBe(true);
            const retrievedCard = await databaseService.cards.get(cardId);
            (0, globals_1.expect)(retrievedCard).toBeUndefined();
        });
        (0, globals_1.it)('应该能够批量添加卡片', async () => {
            const cards = data_fixtures_1.CardFixture.list(5);
            const results = await databaseService.cards.bulkAdd(cards);
            (0, globals_1.expect)(results).toHaveLength(5);
            (0, globals_1.expect)(results.every(id => typeof id === 'string')).toBe(true);
            const allCards = await databaseService.cards.getAll();
            (0, globals_1.expect)(allCards).toHaveLength(5);
        });
        (0, globals_1.it)('应该能够清空卡片表', async () => {
            await databaseService.cards.bulkAdd(data_fixtures_1.CardFixture.list(3));
            await databaseService.cards.clear();
            const allCards = await databaseService.cards.getAll();
            (0, globals_1.expect)(allCards).toHaveLength(0);
        });
        (0, globals_1.it)('应该能够按文件夹查找卡片', async () => {
            const folderId = 'test-folder';
            const cardsInFolder = data_fixtures_1.CardFixture.list(2).map(card => data_fixtures_1.CardFixture.inFolder(folderId, card));
            const otherCards = data_fixtures_1.CardFixture.list(2);
            await databaseService.cards.bulkAdd([...cardsInFolder, ...otherCards]);
            const folderCards = await databaseService.cards.findByFolder(folderId);
            (0, globals_1.expect)(folderCards).toHaveLength(2);
            (0, globals_1.expect)(folderCards.every(card => card.folderId === folderId)).toBe(true);
        });
        (0, globals_1.it)('应该能够按标签查找卡片', async () => {
            const cardsWithTag = data_fixtures_1.CardFixture.list(2).map(card => ({
                ...card,
                frontContent: {
                    ...card.frontContent,
                    tags: ['特殊标签'],
                },
            }));
            const otherCards = data_fixtures_1.CardFixture.list(2);
            await databaseService.cards.bulkAdd([...cardsWithTag, ...otherCards]);
            const taggedCards = await databaseService.cards.findByTag('特殊标签');
            (0, globals_1.expect)(taggedCards).toHaveLength(2);
            (0, globals_1.expect)(taggedCards.every(card => card.frontContent.tags.includes('特殊标签') ||
                card.backContent.tags.includes('特殊标签'))).toBe(true);
        });
        (0, globals_1.it)('应该能够搜索卡片', async () => {
            const searchCard = data_fixtures_1.CardFixture.basic({
                frontContent: {
                    ...data_fixtures_1.CardFixture.basic().frontContent,
                    title: '搜索目标卡片',
                    text: '这是一个包含搜索关键词的卡片内容',
                },
            });
            const otherCards = data_fixtures_1.CardFixture.list(2);
            await databaseService.cards.bulkAdd([searchCard, ...otherCards]);
            const searchResults = await databaseService.cards.search('搜索');
            (0, globals_1.expect)(searchResults).toHaveLength(1);
            (0, globals_1.expect)(searchResults[0].frontContent.title).toBe('搜索目标卡片');
        });
        (0, globals_1.it)('应该能够搜索卡片内容', async () => {
            const searchCard = data_fixtures_1.CardFixture.basic({
                frontContent: {
                    ...data_fixtures_1.CardFixture.basic().frontContent,
                    text: '这是一个包含特殊关键词的描述',
                },
            });
            const otherCards = data_fixtures_1.CardFixture.list(2);
            await databaseService.cards.bulkAdd([searchCard, ...otherCards]);
            const searchResults = await databaseService.cards.search('特殊关键词');
            (0, globals_1.expect)(searchResults).toHaveLength(1);
            (0, globals_1.expect)(searchResults[0].frontContent.text).toContain('特殊关键词');
        });
    });
    (0, globals_1.describe)('文件夹操作', () => {
        (0, globals_1.it)('应该能够添加文件夹', async () => {
            const folderData = data_fixtures_1.FolderFixture.basic();
            const result = await databaseService.folders.add(folderData);
            (0, globals_1.expect)(result).toBeDefined();
            (0, globals_1.expect)(typeof result).toBe('string');
            (0, globals_1.expect)(databaseService.folders.add).toHaveBeenCalledWith(folderData);
        });
        (0, globals_1.it)('应该能够获取文件夹', async () => {
            const folderData = data_fixtures_1.FolderFixture.basic();
            const folderId = await databaseService.folders.add(folderData);
            const retrievedFolder = await databaseService.folders.get(folderId);
            (0, globals_1.expect)(retrievedFolder).toBeDefined();
            (0, globals_1.expect)(retrievedFolder?.id).toBe(folderId);
            (0, globals_1.expect)(retrievedFolder?.name).toBe(folderData.name);
        });
        (0, globals_1.it)('应该能够获取所有文件夹', async () => {
            const folders = data_fixtures_1.FolderFixture.list(3);
            await Promise.all(folders.map(folder => databaseService.folders.add(folder)));
            const allFolders = await databaseService.folders.getAll();
            (0, globals_1.expect)(allFolders).toHaveLength(3);
            (0, globals_1.expect)(allFolders.every(folder => folder.name.includes('测试文件夹'))).toBe(true);
        });
        (0, globals_1.it)('应该能够更新文件夹', async () => {
            const folderData = data_fixtures_1.FolderFixture.basic();
            const folderId = await databaseService.folders.add(folderData);
            const updates = {
                name: '更新后的文件夹名称',
                color: '#ef4444',
                isExpanded: true,
            };
            const success = await databaseService.folders.update(folderId, updates);
            (0, globals_1.expect)(success).toBe(true);
            const updatedFolder = await databaseService.folders.get(folderId);
            (0, globals_1.expect)(updatedFolder?.name).toBe('更新后的文件夹名称');
            (0, globals_1.expect)(updatedFolder?.color).toBe('#ef4444');
            (0, globals_1.expect)(updatedFolder?.isExpanded).toBe(true);
        });
        (0, globals_1.it)('应该能够删除文件夹', async () => {
            const folderData = data_fixtures_1.FolderFixture.basic();
            const folderId = await databaseService.folders.add(folderData);
            const deleted = await databaseService.folders.delete(folderId);
            (0, globals_1.expect)(deleted).toBe(true);
            const retrievedFolder = await databaseService.folders.get(folderId);
            (0, globals_1.expect)(retrievedFolder).toBeUndefined();
        });
        (0, globals_1.it)('应该能够获取子文件夹', async () => {
            const parentFolder = data_fixtures_1.FolderFixture.basic({ id: 'parent-folder' });
            const childFolders = [
                data_fixtures_1.FolderFixture.nested('parent-folder'),
                data_fixtures_1.FolderFixture.nested('parent-folder'),
            ];
            await databaseService.folders.add(parentFolder);
            await Promise.all(childFolders.map(folder => databaseService.folders.add(folder)));
            const children = await databaseService.folders.getChildren('parent-folder');
            (0, globals_1.expect)(children).toHaveLength(2);
            (0, globals_1.expect)(children.every(child => child.parentId === 'parent-folder')).toBe(true);
        });
        (0, globals_1.it)('应该能够获取根文件夹', async () => {
            const rootFolders = [
                data_fixtures_1.FolderFixture.basic(),
                data_fixtures_1.FolderFixture.basic(),
            ];
            const childFolder = data_fixtures_1.FolderFixture.nested('some-parent');
            await Promise.all([...rootFolders, childFolder].map(folder => databaseService.folders.add(folder)));
            const rootFoldersResult = await databaseService.folders.getRoot();
            (0, globals_1.expect)(rootFoldersResult).toHaveLength(2);
            (0, globals_1.expect)(rootFoldersResult.every(folder => !folder.parentId)).toBe(true);
        });
    });
    (0, globals_1.describe)('标签操作', () => {
        (0, globals_1.it)('应该能够添加标签', async () => {
            const tagData = data_fixtures_1.TagFixture.basic();
            const result = await databaseService.tags.add(tagData);
            (0, globals_1.expect)(result).toBeDefined();
            (0, globals_1.expect)(typeof result).toBe('string');
            (0, globals_1.expect)(databaseService.tags.add).toHaveBeenCalledWith(tagData);
        });
        (0, globals_1.it)('应该能够获取标签', async () => {
            const tagData = data_fixtures_1.TagFixture.basic();
            const tagId = await databaseService.tags.add(tagData);
            const retrievedTag = await databaseService.tags.get(tagId);
            (0, globals_1.expect)(retrievedTag).toBeDefined();
            (0, globals_1.expect)(retrievedTag?.id).toBe(tagId);
            (0, globals_1.expect)(retrievedTag?.name).toBe(tagData.name);
        });
        (0, globals_1.it)('应该能够获取所有标签', async () => {
            const tags = data_fixtures_1.TagFixture.list().slice(0, 3);
            await Promise.all(tags.map(tag => databaseService.tags.add(tag)));
            const allTags = await databaseService.tags.getAll();
            (0, globals_1.expect)(allTags).toHaveLength(3);
        });
        (0, globals_1.it)('应该能够更新标签', async () => {
            const tagData = data_fixtures_1.TagFixture.basic();
            const tagId = await databaseService.tags.add(tagData);
            const updates = {
                name: '更新后的标签名称',
                color: '#ef4444',
                count: 5,
            };
            const success = await databaseService.tags.update(tagId, updates);
            (0, globals_1.expect)(success).toBe(true);
            const updatedTag = await databaseService.tags.get(tagId);
            (0, globals_1.expect)(updatedTag?.name).toBe('更新后的标签名称');
            (0, globals_1.expect)(updatedTag?.color).toBe('#ef4444');
            (0, globals_1.expect)(updatedTag?.count).toBe(5);
        });
        (0, globals_1.it)('应该能够删除标签', async () => {
            const tagData = data_fixtures_1.TagFixture.basic();
            const tagId = await databaseService.tags.add(tagData);
            const deleted = await databaseService.tags.delete(tagId);
            (0, globals_1.expect)(deleted).toBe(true);
            const retrievedTag = await databaseService.tags.get(tagId);
            (0, globals_1.expect)(retrievedTag).toBeUndefined();
        });
        (0, globals_1.it)('应该能够获取可见标签', async () => {
            const visibleTag = data_fixtures_1.TagFixture.basic();
            const hiddenTag = data_fixtures_1.TagFixture.hidden();
            await Promise.all([visibleTag, hiddenTag].map(tag => databaseService.tags.add(tag)));
            const visibleTags = await databaseService.tags.getVisible();
            (0, globals_1.expect)(visibleTags).toHaveLength(1);
            (0, globals_1.expect)(visibleTags[0].name).toBe(visibleTag.name);
            (0, globals_1.expect)(visibleTags[0].isHidden).toBeUndefined();
        });
        (0, globals_1.it)('应该能够获取隐藏标签', async () => {
            const visibleTag = data_fixtures_1.TagFixture.basic();
            const hiddenTag = data_fixtures_1.TagFixture.hidden();
            await Promise.all([visibleTag, hiddenTag].map(tag => databaseService.tags.add(tag)));
            const hiddenTags = await databaseService.tags.getHidden();
            (0, globals_1.expect)(hiddenTags).toHaveLength(1);
            (0, globals_1.expect)(hiddenTags[0].name).toBe(hiddenTag.name);
            (0, globals_1.expect)(hiddenTags[0].isHidden).toBe(true);
        });
    });
    (0, globals_1.describe)('同步队列操作', () => {
        (0, globals_1.it)('应该能够添加同步操作', async () => {
            const operation = advanced_test_utils_1.TestDataGenerator.generateSyncOperation();
            const result = await databaseService.syncQueue.add(operation);
            (0, globals_1.expect)(result).toBeDefined();
            (0, globals_1.expect)(typeof result).toBe('string');
            (0, globals_1.expect)(databaseService.syncQueue.add).toHaveBeenCalledWith(operation);
        });
        (0, globals_1.it)('应该能够获取同步操作', async () => {
            const operation = advanced_test_utils_1.TestDataGenerator.generateSyncOperation();
            const operationId = await databaseService.syncQueue.add(operation);
            const retrievedOperation = await databaseService.syncQueue.get(operationId);
            (0, globals_1.expect)(retrievedOperation).toBeDefined();
            (0, globals_1.expect)(retrievedOperation?.id).toBe(operationId);
        });
        (0, globals_1.it)('应该能够获取待处理的操作', async () => {
            const pendingOps = [
                advanced_test_utils_1.TestDataGenerator.generateSyncOperation({ status: 'pending' }),
                advanced_test_utils_1.TestDataGenerator.generateSyncOperation({ status: 'pending' }),
            ];
            const completedOp = advanced_test_utils_1.TestDataGenerator.generateSyncOperation({ status: 'completed' });
            await Promise.all([...pendingOps, completedOp].map(op => databaseService.syncQueue.add(op)));
            const pendingOperations = await databaseService.syncQueue.getPending();
            (0, globals_1.expect)(pendingOperations).toHaveLength(2);
            (0, globals_1.expect)(pendingOperations.every(op => op.status === 'pending')).toBe(true);
        });
        (0, globals_1.it)('应该能够获取失败的操作', async () => {
            const failedOps = [
                advanced_test_utils_1.TestDataGenerator.generateSyncOperation({ status: 'failed' }),
                advanced_test_utils_1.TestDataGenerator.generateSyncOperation({ status: 'failed' }),
            ];
            const otherOps = [
                advanced_test_utils_1.TestDataGenerator.generateSyncOperation({ status: 'completed' }),
                advanced_test_utils_1.TestDataGenerator.generateSyncOperation({ status: 'pending' }),
            ];
            await Promise.all([...failedOps, ...otherOps].map(op => databaseService.syncQueue.add(op)));
            const failedOperations = await databaseService.syncQueue.getFailed();
            (0, globals_1.expect)(failedOperations).toHaveLength(2);
            (0, globals_1.expect)(failedOperations.every(op => op.status === 'failed')).toBe(true);
        });
        (0, globals_1.it)('应该能够更新同步操作状态', async () => {
            const operation = advanced_test_utils_1.TestDataGenerator.generateSyncOperation({ status: 'pending' });
            const operationId = await databaseService.syncQueue.add(operation);
            const updates = {
                status: 'completed',
                error: null,
            };
            const success = await databaseService.syncQueue.update(operationId, updates);
            (0, globals_1.expect)(success).toBe(true);
            const updatedOperation = await databaseService.syncQueue.get(operationId);
            (0, globals_1.expect)(updatedOperation?.status).toBe('completed');
        });
        (0, globals_1.it)('应该能够删除同步操作', async () => {
            const operation = advanced_test_utils_1.TestDataGenerator.generateSyncOperation();
            const operationId = await databaseService.syncQueue.add(operation);
            const deleted = await databaseService.syncQueue.delete(operationId);
            (0, globals_1.expect)(deleted).toBe(true);
            const retrievedOperation = await databaseService.syncQueue.get(operationId);
            (0, globals_1.expect)(retrievedOperation).toBeUndefined();
        });
        (0, globals_1.it)('应该能够获取同步队列统计信息', async () => {
            const operations = [
                advanced_test_utils_1.TestDataGenerator.generateSyncOperation({ status: 'pending' }),
                advanced_test_utils_1.TestDataGenerator.generateSyncOperation({ status: 'pending' }),
                advanced_test_utils_1.TestDataGenerator.generateSyncOperation({ status: 'processing' }),
                advanced_test_utils_1.TestDataGenerator.generateSyncOperation({ status: 'completed' }),
                advanced_test_utils_1.TestDataGenerator.generateSyncOperation({ status: 'failed' }),
            ];
            await Promise.all(operations.map(op => databaseService.syncQueue.add(op)));
            const stats = await databaseService.syncQueue.getStats();
            (0, globals_1.expect)(stats.total).toBe(5);
            (0, globals_1.expect)(stats.pending).toBe(2);
            (0, globals_1.expect)(stats.processing).toBe(1);
            (0, globals_1.expect)(stats.completed).toBe(1);
            (0, globals_1.expect)(stats.failed).toBe(1);
        });
    });
    (0, globals_1.describe)('数据库管理', () => {
        (0, globals_1.it)('应该能够清空所有数据', async () => {
            // 添加各种数据
            await databaseService.cards.bulkAdd(data_fixtures_1.CardFixture.list(2));
            await databaseService.folders.bulkAdd(data_fixtures_1.FolderFixture.list(2));
            await databaseService.tags.bulkAdd(data_fixtures_1.TagFixture.list().slice(0, 2));
            await databaseService.syncQueue.add(advanced_test_utils_1.TestDataGenerator.generateSyncOperation());
            // 清空所有数据
            await databaseService.clearAll();
            // 验证所有表都已清空
            (0, globals_1.expect)(await databaseService.cards.getAll()).toHaveLength(0);
            (0, globals_1.expect)(await databaseService.folders.getAll()).toHaveLength(0);
            (0, globals_1.expect)(await databaseService.tags.getAll()).toHaveLength(0);
            (0, globals_1.expect)(await databaseService.syncQueue.getAll()).toHaveLength(0);
        });
        (0, globals_1.it)('应该能够导出数据', async () => {
            const cards = data_fixtures_1.CardFixture.list(2);
            const folders = data_fixtures_1.FolderFixture.list(1);
            const tags = data_fixtures_1.TagFixture.list().slice(0, 2);
            await Promise.all([
                databaseService.cards.bulkAdd(cards),
                databaseService.folders.bulkAdd(folders),
                databaseService.tags.bulkAdd(tags),
            ]);
            const exportedData = await databaseService.exportData();
            (0, globals_1.expect)(exportedData.cards).toHaveLength(2);
            (0, globals_1.expect)(exportedData.folders).toHaveLength(1);
            (0, globals_1.expect)(exportedData.tags).toHaveLength(2);
            (0, globals_1.expect)(exportedData.syncQueue).toHaveLength(0);
            (0, globals_1.expect)(exportedData.exportedAt).toBeInstanceOf(Date);
        });
        (0, globals_1.it)('应该能够导入数据', async () => {
            const importData = {
                cards: data_fixtures_1.CardFixture.list(2),
                folders: data_fixtures_1.FolderFixture.list(1),
                tags: data_fixtures_1.TagFixture.list().slice(0, 2),
                syncQueue: [advanced_test_utils_1.TestDataGenerator.generateSyncOperation()],
            };
            await databaseService.importData(importData);
            (0, globals_1.expect)(await databaseService.cards.getAll()).toHaveLength(2);
            (0, globals_1.expect)(await databaseService.folders.getAll()).toHaveLength(1);
            (0, globals_1.expect)(await databaseService.tags.getAll()).toHaveLength(2);
            (0, globals_1.expect)(await databaseService.syncQueue.getAll()).toHaveLength(1);
        });
        (0, globals_1.it)('导入数据时应该清空现有数据', async () => {
            // 先添加一些数据
            await databaseService.cards.bulkAdd(data_fixtures_1.CardFixture.list(3));
            const importData = {
                cards: data_fixtures_1.CardFixture.list(1),
                folders: [],
                tags: [],
                syncQueue: [],
            };
            await databaseService.importData(importData);
            // 应该只有导入的数据
            (0, globals_1.expect)(await databaseService.cards.getAll()).toHaveLength(1);
            (0, globals_1.expect)(await databaseService.cards.getAll()[0].frontContent.title).toBe(importData.cards[0].frontContent.title);
        });
    });
    (0, globals_1.describe)('边界情况测试', () => {
        (0, globals_1.it)('应该处理不存在的卡片ID', async () => {
            const nonExistentCard = await databaseService.cards.get('non-existent-id');
            (0, globals_1.expect)(nonExistentCard).toBeUndefined();
        });
        (0, globals_1.it)('应该处理不存在的文件夹ID', async () => {
            const nonExistentFolder = await databaseService.folders.get('non-existent-id');
            (0, globals_1.expect)(nonExistentFolder).toBeUndefined();
        });
        (0, globals_1.it)('应该处理不存在的标签ID', async () => {
            const nonExistentTag = await databaseService.tags.get('non-existent-id');
            (0, globals_1.expect)(nonExistentTag).toBeUndefined();
        });
        (0, globals_1.it)('应该处理空数据集的搜索', async () => {
            const searchResults = await databaseService.cards.search('任何关键词');
            (0, globals_1.expect)(searchResults).toHaveLength(0);
        });
        (0, globals_1.it)('应该处理空数据集的标签查找', async () => {
            const taggedCards = await databaseService.cards.findByTag('任何标签');
            (0, globals_1.expect)(taggedCards).toHaveLength(0);
        });
        (0, globals_1.it)('应该处理空数据集的文件夹查找', async () => {
            const folderCards = await databaseService.cards.findByFolder('任何文件夹');
            (0, globals_1.expect)(folderCards).toHaveLength(0);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
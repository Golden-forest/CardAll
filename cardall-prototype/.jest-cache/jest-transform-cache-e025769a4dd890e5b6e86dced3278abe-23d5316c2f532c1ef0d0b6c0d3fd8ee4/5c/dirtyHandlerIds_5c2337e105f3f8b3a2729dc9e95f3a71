2fc82a009340840bb59441a75a4195e4
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reduce = reduce;
const index_js_1 = require("../actions/dragDrop/index.js");
const registry_js_1 = require("../actions/registry.js");
const dirtiness_js_1 = require("../utils/dirtiness.js");
const equality_js_1 = require("../utils/equality.js");
const js_utils_js_1 = require("../utils/js_utils.js");
function reduce(// eslint-disable-next-line @typescript-eslint/no-unused-vars
_state = dirtiness_js_1.NONE, action) {
    switch (action.type) {
        case index_js_1.HOVER:
            break;
        case registry_js_1.ADD_SOURCE:
        case registry_js_1.ADD_TARGET:
        case registry_js_1.REMOVE_TARGET:
        case registry_js_1.REMOVE_SOURCE:
            return dirtiness_js_1.NONE;
        case index_js_1.BEGIN_DRAG:
        case index_js_1.PUBLISH_DRAG_SOURCE:
        case index_js_1.END_DRAG:
        case index_js_1.DROP:
        default:
            return dirtiness_js_1.ALL;
    }
    const { targetIds = [], prevTargetIds = [] } = action.payload;
    const result = (0, js_utils_js_1.xor)(targetIds, prevTargetIds);
    const didChange = result.length > 0 || !(0, equality_js_1.areArraysEqual)(targetIds, prevTargetIds);
    if (!didChange) {
        return dirtiness_js_1.NONE;
    }
    // Check the target ids at the innermost position. If they are valid, add them
    // to the result
    const prevInnermostTargetId = prevTargetIds[prevTargetIds.length - 1];
    const innermostTargetId = targetIds[targetIds.length - 1];
    if (prevInnermostTargetId !== innermostTargetId) {
        if (prevInnermostTargetId) {
            result.push(prevInnermostTargetId);
        }
        if (innermostTargetId) {
            result.push(innermostTargetId);
        }
    }
    return result;
}
//# sourceMappingURL=dirtyHandlerIds.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXG5vZGVfbW9kdWxlc1xcZG5kLWNvcmVcXGRpc3RcXHJlZHVjZXJzXFxkaXJ0eUhhbmRsZXJJZHMuanMiLCJtYXBwaW5ncyI6Ijs7QUFLQSx3QkFvQ0M7QUF6Q0QsMkRBQXNHO0FBQ3RHLHdEQUE4RjtBQUM5Rix3REFBa0Q7QUFDbEQsc0RBQXNEO0FBQ3RELHNEQUEyQztBQUMzQyxTQUFnQixNQUFNLENBQUMsNkRBQTZEO0FBQ3BGLE1BQU0sR0FBRyxtQkFBSSxFQUFFLE1BQU07SUFDakIsUUFBTyxNQUFNLENBQUMsSUFBSSxFQUFDLENBQUM7UUFDaEIsS0FBSyxnQkFBSztZQUNOLE1BQU07UUFDVixLQUFLLHdCQUFVLENBQUM7UUFDaEIsS0FBSyx3QkFBVSxDQUFDO1FBQ2hCLEtBQUssMkJBQWEsQ0FBQztRQUNuQixLQUFLLDJCQUFhO1lBQ2QsT0FBTyxtQkFBSSxDQUFDO1FBQ2hCLEtBQUsscUJBQVUsQ0FBQztRQUNoQixLQUFLLDhCQUFtQixDQUFDO1FBQ3pCLEtBQUssbUJBQVEsQ0FBQztRQUNkLEtBQUssZUFBSSxDQUFDO1FBQ1Y7WUFDSSxPQUFPLGtCQUFHLENBQUM7SUFDbkIsQ0FBQztJQUNELE1BQU0sRUFBRSxTQUFTLEdBQUUsRUFBRSxFQUFHLGFBQWEsR0FBRSxFQUFFLEVBQUcsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO0lBQzlELE1BQU0sTUFBTSxHQUFHLElBQUEsaUJBQUcsRUFBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDN0MsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFBLDRCQUFjLEVBQUMsU0FBUyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ2pGLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNiLE9BQU8sbUJBQUksQ0FBQztJQUNoQixDQUFDO0lBQ0QsOEVBQThFO0lBQzlFLGdCQUFnQjtJQUNoQixNQUFNLHFCQUFxQixHQUFHLGFBQWEsQ0FBQyxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3RFLE1BQU0saUJBQWlCLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDMUQsSUFBSSxxQkFBcUIsS0FBSyxpQkFBaUIsRUFBRSxDQUFDO1FBQzlDLElBQUkscUJBQXFCLEVBQUUsQ0FBQztZQUN4QixNQUFNLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDdkMsQ0FBQztRQUNELElBQUksaUJBQWlCLEVBQUUsQ0FBQztZQUNwQixNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDbkMsQ0FBQztJQUNMLENBQUM7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDO0FBRUQsMkNBQTJDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkQ6XFxQcm9qZWN0c1xcQ2FyZEV2ZXJ5dGhpbmdcXGNhcmRhbGwtcHJvdG90eXBlXFxub2RlX21vZHVsZXNcXGRuZC1jb3JlXFxkaXN0XFxyZWR1Y2Vyc1xcZGlydHlIYW5kbGVySWRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJFR0lOX0RSQUcsIERST1AsIEVORF9EUkFHLCBIT1ZFUiwgUFVCTElTSF9EUkFHX1NPVVJDRSB9IGZyb20gJy4uL2FjdGlvbnMvZHJhZ0Ryb3AvaW5kZXguanMnO1xuaW1wb3J0IHsgQUREX1NPVVJDRSwgQUREX1RBUkdFVCwgUkVNT1ZFX1NPVVJDRSwgUkVNT1ZFX1RBUkdFVCB9IGZyb20gJy4uL2FjdGlvbnMvcmVnaXN0cnkuanMnO1xuaW1wb3J0IHsgQUxMLCBOT05FIH0gZnJvbSAnLi4vdXRpbHMvZGlydGluZXNzLmpzJztcbmltcG9ydCB7IGFyZUFycmF5c0VxdWFsIH0gZnJvbSAnLi4vdXRpbHMvZXF1YWxpdHkuanMnO1xuaW1wb3J0IHsgeG9yIH0gZnJvbSAnLi4vdXRpbHMvanNfdXRpbHMuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHJlZHVjZSgvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG5fc3RhdGUgPSBOT05FLCBhY3Rpb24pIHtcbiAgICBzd2l0Y2goYWN0aW9uLnR5cGUpe1xuICAgICAgICBjYXNlIEhPVkVSOlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQUREX1NPVVJDRTpcbiAgICAgICAgY2FzZSBBRERfVEFSR0VUOlxuICAgICAgICBjYXNlIFJFTU9WRV9UQVJHRVQ6XG4gICAgICAgIGNhc2UgUkVNT1ZFX1NPVVJDRTpcbiAgICAgICAgICAgIHJldHVybiBOT05FO1xuICAgICAgICBjYXNlIEJFR0lOX0RSQUc6XG4gICAgICAgIGNhc2UgUFVCTElTSF9EUkFHX1NPVVJDRTpcbiAgICAgICAgY2FzZSBFTkRfRFJBRzpcbiAgICAgICAgY2FzZSBEUk9QOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIEFMTDtcbiAgICB9XG4gICAgY29uc3QgeyB0YXJnZXRJZHMgPVtdICwgcHJldlRhcmdldElkcyA9W10gIH0gPSBhY3Rpb24ucGF5bG9hZDtcbiAgICBjb25zdCByZXN1bHQgPSB4b3IodGFyZ2V0SWRzLCBwcmV2VGFyZ2V0SWRzKTtcbiAgICBjb25zdCBkaWRDaGFuZ2UgPSByZXN1bHQubGVuZ3RoID4gMCB8fCAhYXJlQXJyYXlzRXF1YWwodGFyZ2V0SWRzLCBwcmV2VGFyZ2V0SWRzKTtcbiAgICBpZiAoIWRpZENoYW5nZSkge1xuICAgICAgICByZXR1cm4gTk9ORTtcbiAgICB9XG4gICAgLy8gQ2hlY2sgdGhlIHRhcmdldCBpZHMgYXQgdGhlIGlubmVybW9zdCBwb3NpdGlvbi4gSWYgdGhleSBhcmUgdmFsaWQsIGFkZCB0aGVtXG4gICAgLy8gdG8gdGhlIHJlc3VsdFxuICAgIGNvbnN0IHByZXZJbm5lcm1vc3RUYXJnZXRJZCA9IHByZXZUYXJnZXRJZHNbcHJldlRhcmdldElkcy5sZW5ndGggLSAxXTtcbiAgICBjb25zdCBpbm5lcm1vc3RUYXJnZXRJZCA9IHRhcmdldElkc1t0YXJnZXRJZHMubGVuZ3RoIC0gMV07XG4gICAgaWYgKHByZXZJbm5lcm1vc3RUYXJnZXRJZCAhPT0gaW5uZXJtb3N0VGFyZ2V0SWQpIHtcbiAgICAgICAgaWYgKHByZXZJbm5lcm1vc3RUYXJnZXRJZCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gocHJldklubmVybW9zdFRhcmdldElkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5uZXJtb3N0VGFyZ2V0SWQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGlubmVybW9zdFRhcmdldElkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXJ0eUhhbmRsZXJJZHMuanMubWFwIl0sInZlcnNpb24iOjN9
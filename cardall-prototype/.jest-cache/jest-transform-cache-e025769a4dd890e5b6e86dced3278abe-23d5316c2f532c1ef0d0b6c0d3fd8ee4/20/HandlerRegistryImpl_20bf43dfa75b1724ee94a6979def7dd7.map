{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\node_modules\\dnd-core\\dist\\classes\\HandlerRegistryImpl.js","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\node_modules\\dnd-core\\dist\\classes\\HandlerRegistryImpl.js"],"sourcesContent":["import { asap } from '@react-dnd/asap';\nimport { invariant } from '@react-dnd/invariant';\nimport { addSource, addTarget, removeSource, removeTarget } from '../actions/registry.js';\nimport { validateSourceContract, validateTargetContract, validateType } from '../contracts.js';\nimport { HandlerRole } from '../interfaces.js';\nimport { getNextUniqueId } from '../utils/getNextUniqueId.js';\nfunction getNextHandlerId(role) {\n    const id = getNextUniqueId().toString();\n    switch(role){\n        case HandlerRole.SOURCE:\n            return `S${id}`;\n        case HandlerRole.TARGET:\n            return `T${id}`;\n        default:\n            throw new Error(`Unknown Handler Role: ${role}`);\n    }\n}\nfunction parseRoleFromHandlerId(handlerId) {\n    switch(handlerId[0]){\n        case 'S':\n            return HandlerRole.SOURCE;\n        case 'T':\n            return HandlerRole.TARGET;\n        default:\n            throw new Error(`Cannot parse handler ID: ${handlerId}`);\n    }\n}\nfunction mapContainsValue(map, searchValue) {\n    const entries = map.entries();\n    let isDone = false;\n    do {\n        const { done , value: [, value] ,  } = entries.next();\n        if (value === searchValue) {\n            return true;\n        }\n        isDone = !!done;\n    }while (!isDone)\n    return false;\n}\nexport class HandlerRegistryImpl {\n    addSource(type, source) {\n        validateType(type);\n        validateSourceContract(source);\n        const sourceId = this.addHandler(HandlerRole.SOURCE, type, source);\n        this.store.dispatch(addSource(sourceId));\n        return sourceId;\n    }\n    addTarget(type, target) {\n        validateType(type, true);\n        validateTargetContract(target);\n        const targetId = this.addHandler(HandlerRole.TARGET, type, target);\n        this.store.dispatch(addTarget(targetId));\n        return targetId;\n    }\n    containsHandler(handler) {\n        return mapContainsValue(this.dragSources, handler) || mapContainsValue(this.dropTargets, handler);\n    }\n    getSource(sourceId, includePinned = false) {\n        invariant(this.isSourceId(sourceId), 'Expected a valid source ID.');\n        const isPinned = includePinned && sourceId === this.pinnedSourceId;\n        const source = isPinned ? this.pinnedSource : this.dragSources.get(sourceId);\n        return source;\n    }\n    getTarget(targetId) {\n        invariant(this.isTargetId(targetId), 'Expected a valid target ID.');\n        return this.dropTargets.get(targetId);\n    }\n    getSourceType(sourceId) {\n        invariant(this.isSourceId(sourceId), 'Expected a valid source ID.');\n        return this.types.get(sourceId);\n    }\n    getTargetType(targetId) {\n        invariant(this.isTargetId(targetId), 'Expected a valid target ID.');\n        return this.types.get(targetId);\n    }\n    isSourceId(handlerId) {\n        const role = parseRoleFromHandlerId(handlerId);\n        return role === HandlerRole.SOURCE;\n    }\n    isTargetId(handlerId) {\n        const role = parseRoleFromHandlerId(handlerId);\n        return role === HandlerRole.TARGET;\n    }\n    removeSource(sourceId) {\n        invariant(this.getSource(sourceId), 'Expected an existing source.');\n        this.store.dispatch(removeSource(sourceId));\n        asap(()=>{\n            this.dragSources.delete(sourceId);\n            this.types.delete(sourceId);\n        });\n    }\n    removeTarget(targetId) {\n        invariant(this.getTarget(targetId), 'Expected an existing target.');\n        this.store.dispatch(removeTarget(targetId));\n        this.dropTargets.delete(targetId);\n        this.types.delete(targetId);\n    }\n    pinSource(sourceId) {\n        const source = this.getSource(sourceId);\n        invariant(source, 'Expected an existing source.');\n        this.pinnedSourceId = sourceId;\n        this.pinnedSource = source;\n    }\n    unpinSource() {\n        invariant(this.pinnedSource, 'No source is pinned at the time.');\n        this.pinnedSourceId = null;\n        this.pinnedSource = null;\n    }\n    addHandler(role, type, handler) {\n        const id = getNextHandlerId(role);\n        this.types.set(id, type);\n        if (role === HandlerRole.SOURCE) {\n            this.dragSources.set(id, handler);\n        } else if (role === HandlerRole.TARGET) {\n            this.dropTargets.set(id, handler);\n        }\n        return id;\n    }\n    constructor(store){\n        this.types = new Map();\n        this.dragSources = new Map();\n        this.dropTargets = new Map();\n        this.pinnedSourceId = null;\n        this.pinnedSource = null;\n        this.store = store;\n    }\n}\n\n//# sourceMappingURL=HandlerRegistryImpl.js.map"],"version":3}
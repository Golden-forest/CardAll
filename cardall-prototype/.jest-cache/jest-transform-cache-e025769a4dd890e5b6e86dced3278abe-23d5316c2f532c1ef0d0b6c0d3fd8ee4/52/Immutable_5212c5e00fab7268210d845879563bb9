a337cf6ec81c42c079f5ebf803590604
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
exports.test = exports.serialize = exports.default = void 0;
var _collections = require('../collections');
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
// SENTINEL constants are from https://github.com/facebook/immutable-js
const IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
const IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';
const IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
const IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';
const IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';
const IS_RECORD_SENTINEL = '@@__IMMUTABLE_RECORD__@@'; // immutable v4
const IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';
const IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';
const IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';
const getImmutableName = name => 'Immutable.' + name;
const printAsLeaf = name => '[' + name + ']';
const SPACE = ' ';
const LAZY = 'â€¦'; // Seq is lazy if it calls a method like filter
const printImmutableEntries = (val, config, indentation, depth, refs, printer, type) => ++depth > config.maxDepth
    ? printAsLeaf(getImmutableName(type))
    : getImmutableName(type) +
        SPACE +
        '{' +
        (0, _collections.printIteratorEntries)(val.entries(), config, indentation, depth, refs, printer) +
        '}'; // Record has an entries method because it is a collection in immutable v3.
// Return an iterator for Immutable Record from version v3 or v4.
function getRecordEntries(val) {
    let i = 0;
    return {
        next() {
            if (i < val._keys.length) {
                const key = val._keys[i++];
                return {
                    done: false,
                    value: [key, val.get(key)]
                };
            }
            return {
                done: true,
                value: undefined
            };
        }
    };
}
const printImmutableRecord = (val, config, indentation, depth, refs, printer) => {
    // _name property is defined only for an Immutable Record instance
    // which was constructed with a second optional descriptive name arg
    const name = getImmutableName(val._name || 'Record');
    return ++depth > config.maxDepth
        ? printAsLeaf(name)
        : name +
            SPACE +
            '{' +
            (0, _collections.printIteratorEntries)(getRecordEntries(val), config, indentation, depth, refs, printer) +
            '}';
};
const printImmutableSeq = (val, config, indentation, depth, refs, printer) => {
    const name = getImmutableName('Seq');
    if (++depth > config.maxDepth) {
        return printAsLeaf(name);
    }
    if (val[IS_KEYED_SENTINEL]) {
        return (name +
            SPACE +
            '{' + // from Immutable collection of entries or from ECMAScript object
            (val._iter || val._object
                ? (0, _collections.printIteratorEntries)(val.entries(), config, indentation, depth, refs, printer)
                : LAZY) +
            '}');
    }
    return (name +
        SPACE +
        '[' +
        (val._iter || // from Immutable collection of values
            val._array || // from ECMAScript array
            val._collection || // from ECMAScript collection in immutable v4
            val._iterable // from ECMAScript collection in immutable v3
            ? (0, _collections.printIteratorValues)(val.values(), config, indentation, depth, refs, printer)
            : LAZY) +
        ']');
};
const printImmutableValues = (val, config, indentation, depth, refs, printer, type) => ++depth > config.maxDepth
    ? printAsLeaf(getImmutableName(type))
    : getImmutableName(type) +
        SPACE +
        '[' +
        (0, _collections.printIteratorValues)(val.values(), config, indentation, depth, refs, printer) +
        ']';
const serialize = (val, config, indentation, depth, refs, printer) => {
    if (val[IS_MAP_SENTINEL]) {
        return printImmutableEntries(val, config, indentation, depth, refs, printer, val[IS_ORDERED_SENTINEL] ? 'OrderedMap' : 'Map');
    }
    if (val[IS_LIST_SENTINEL]) {
        return printImmutableValues(val, config, indentation, depth, refs, printer, 'List');
    }
    if (val[IS_SET_SENTINEL]) {
        return printImmutableValues(val, config, indentation, depth, refs, printer, val[IS_ORDERED_SENTINEL] ? 'OrderedSet' : 'Set');
    }
    if (val[IS_STACK_SENTINEL]) {
        return printImmutableValues(val, config, indentation, depth, refs, printer, 'Stack');
    }
    if (val[IS_SEQ_SENTINEL]) {
        return printImmutableSeq(val, config, indentation, depth, refs, printer);
    } // For compatibility with immutable v3 and v4, let record be the default.
    return printImmutableRecord(val, config, indentation, depth, refs, printer);
}; // Explicitly comparing sentinel properties to true avoids false positive
// when mock identity-obj-proxy returns the key as the value for any key.
exports.serialize = serialize;
const test = val => val &&
    (val[IS_ITERABLE_SENTINEL] === true || val[IS_RECORD_SENTINEL] === true);
exports.test = test;
const plugin = {
    serialize,
    test
};
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXG5vZGVfbW9kdWxlc1xccHJldHR5LWZvcm1hdFxcYnVpbGRcXHBsdWdpbnNcXEltbXV0YWJsZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUU7SUFDM0MsS0FBSyxFQUFFLElBQUk7Q0FDWixDQUFDLENBQUM7QUFDSCxPQUFPLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsQ0FBQztBQUU1RCxJQUFJLFlBQVksR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUU3Qzs7Ozs7R0FLRztBQUNILHVFQUF1RTtBQUN2RSxNQUFNLG9CQUFvQixHQUFHLDRCQUE0QixDQUFDO0FBQzFELE1BQU0sZ0JBQWdCLEdBQUcsd0JBQXdCLENBQUM7QUFDbEQsTUFBTSxpQkFBaUIsR0FBRyx5QkFBeUIsQ0FBQztBQUNwRCxNQUFNLGVBQWUsR0FBRyx1QkFBdUIsQ0FBQztBQUNoRCxNQUFNLG1CQUFtQixHQUFHLDJCQUEyQixDQUFDO0FBQ3hELE1BQU0sa0JBQWtCLEdBQUcsMEJBQTBCLENBQUMsQ0FBQyxlQUFlO0FBRXRFLE1BQU0sZUFBZSxHQUFHLHVCQUF1QixDQUFDO0FBQ2hELE1BQU0sZUFBZSxHQUFHLHVCQUF1QixDQUFDO0FBQ2hELE1BQU0saUJBQWlCLEdBQUcseUJBQXlCLENBQUM7QUFFcEQsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7QUFFckQsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQztBQUU3QyxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUM7QUFDbEIsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMs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R0FBRyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztBQUM5RSxDQUFDLENBQUMsQ0FBQyx5RUFBeUU7QUFDNUUseUVBQXlFO0FBRXpFLE9BQU8sQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0FBRTlCLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQ2pCLEdBQUc7SUFDSCxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLElBQUksSUFBSSxHQUFHLENBQUMsa0JBQWtCLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQztBQUUzRSxPQUFPLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztBQUNwQixNQUFNLE1BQU0sR0FBRztJQUNiLFNBQVM7SUFDVCxJQUFJO0NBQ0wsQ0FBQztBQUNGLElBQUksUUFBUSxHQUFHLE1BQU0sQ0FBQztBQUN0QixPQUFPLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJEOlxcUHJvamVjdHNcXENhcmRFdmVyeXRoaW5nXFxjYXJkYWxsLXByb3RvdHlwZVxcbm9kZV9tb2R1bGVzXFxwcmV0dHktZm9ybWF0XFxidWlsZFxccGx1Z2luc1xcSW1tdXRhYmxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnRlc3QgPSBleHBvcnRzLnNlcmlhbGl6ZSA9IGV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9jb2xsZWN0aW9ucyA9IHJlcXVpcmUoJy4uL2NvbGxlY3Rpb25zJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8vIFNFTlRJTkVMIGNvbnN0YW50cyBhcmUgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svaW1tdXRhYmxlLWpzXG5jb25zdCBJU19JVEVSQUJMRV9TRU5USU5FTCA9ICdAQF9fSU1NVVRBQkxFX0lURVJBQkxFX19AQCc7XG5jb25zdCBJU19MSVNUX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfTElTVF9fQEAnO1xuY29uc3QgSVNfS0VZRURfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9LRVlFRF9fQEAnO1xuY29uc3QgSVNfTUFQX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfTUFQX19AQCc7XG5jb25zdCBJU19PUkRFUkVEX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfT1JERVJFRF9fQEAnO1xuY29uc3QgSVNfUkVDT1JEX1NFTlRJTkVMID0gJ0BAX19JTU1VVEFCTEVfUkVDT1JEX19AQCc7IC8vIGltbXV0YWJsZSB2NFxuXG5jb25zdCBJU19TRVFfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9TRVFfX0BAJztcbmNvbnN0IElTX1NFVF9TRU5USU5FTCA9ICdAQF9fSU1NVVRBQkxFX1NFVF9fQEAnO1xuY29uc3QgSVNfU1RBQ0tfU0VOVElORUwgPSAnQEBfX0lNTVVUQUJMRV9TVEFDS19fQEAnO1xuXG5jb25zdCBnZXRJbW11dGFibGVOYW1lID0gbmFtZSA9PiAnSW1tdXRhYmxlLicgKyBuYW1lO1xuXG5jb25zdCBwcmludEFzTGVhZiA9IG5hbWUgPT4gJ1snICsgbmFtZSArICddJztcblxuY29uc3QgU1BBQ0UgPSAnICc7XG5jb25zdCBMQVpZID0gJ+KApic7IC8vIFNlcSBpcyBsYXp5IGlmIGl0IGNhbGxzIGEgbWV0aG9kIGxpa2UgZmlsdGVyXG5cbmNvbnN0IHByaW50SW1tdXRhYmxlRW50cmllcyA9IChcbiAgdmFsLFxuICBjb25maWcsXG4gIGluZGVudGF0aW9uLFxuICBkZXB0aCxcbiAgcmVmcyxcbiAgcHJpbnRlcixcbiAgdHlwZVxuKSA9PlxuICArK2RlcHRoID4gY29uZmlnLm1heERlcHRoXG4gICAgPyBwcmludEFzTGVhZihnZXRJbW11dGFibGVOYW1lKHR5cGUpKVxuICAgIDogZ2V0SW1tdXRhYmxlTmFtZSh0eXBlKSArXG4gICAgICBTUEFDRSArXG4gICAgICAneycgK1xuICAgICAgKDAsIF9jb2xsZWN0aW9ucy5wcmludEl0ZXJhdG9yRW50cmllcykoXG4gICAgICAgIHZhbC5lbnRyaWVzKCksXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgaW5kZW50YXRpb24sXG4gICAgICAgIGRlcHRoLFxuICAgICAgICByZWZzLFxuICAgICAgICBwcmludGVyXG4gICAgICApICtcbiAgICAgICd9JzsgLy8gUmVjb3JkIGhhcyBhbiBlbnRyaWVzIG1ldGhvZCBiZWNhdXNlIGl0IGlzIGEgY29sbGVjdGlvbiBpbiBpbW11dGFibGUgdjMuXG4vLyBSZXR1cm4gYW4gaXRlcmF0b3IgZm9yIEltbXV0YWJsZSBSZWNvcmQgZnJvbSB2ZXJzaW9uIHYzIG9yIHY0LlxuXG5mdW5jdGlvbiBnZXRSZWNvcmRFbnRyaWVzKHZhbCkge1xuICBsZXQgaSA9IDA7XG4gIHJldHVybiB7XG4gICAgbmV4dCgpIHtcbiAgICAgIGlmIChpIDwgdmFsLl9rZXlzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBrZXkgPSB2YWwuX2tleXNbaSsrXTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgICB2YWx1ZTogW2tleSwgdmFsLmdldChrZXkpXVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkb25lOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cblxuY29uc3QgcHJpbnRJbW11dGFibGVSZWNvcmQgPSAoXG4gIHZhbCxcbiAgY29uZmlnLFxuICBpbmRlbnRhdGlvbixcbiAgZGVwdGgsXG4gIHJlZnMsXG4gIHByaW50ZXJcbikgPT4ge1xuICAvLyBfbmFtZSBwcm9wZXJ0eSBpcyBkZWZpbmVkIG9ubHkgZm9yIGFuIEltbXV0YWJsZSBSZWNvcmQgaW5zdGFuY2VcbiAgLy8gd2hpY2ggd2FzIGNvbnN0cnVjdGVkIHdpdGggYSBzZWNvbmQgb3B0aW9uYWwgZGVzY3JpcHRpdmUgbmFtZSBhcmdcbiAgY29uc3QgbmFtZSA9IGdldEltbXV0YWJsZU5hbWUodmFsLl9uYW1lIHx8ICdSZWNvcmQnKTtcbiAgcmV0dXJuICsrZGVwdGggPiBjb25maWcubWF4RGVwdGhcbiAgICA/IHByaW50QXNMZWFmKG5hbWUpXG4gICAgOiBuYW1lICtcbiAgICAgICAgU1BBQ0UgK1xuICAgICAgICAneycgK1xuICAgICAgICAoMCwgX2NvbGxlY3Rpb25zLnByaW50SXRlcmF0b3JFbnRyaWVzKShcbiAgICAgICAgICBnZXRSZWNvcmRFbnRyaWVzKHZhbCksXG4gICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIGluZGVudGF0aW9uLFxuICAgICAgICAgIGRlcHRoLFxuICAgICAgICAgIHJlZnMsXG4gICAgICAgICAgcHJpbnRlclxuICAgICAgICApICtcbiAgICAgICAgJ30nO1xufTtcblxuY29uc3QgcHJpbnRJbW11dGFibGVTZXEgPSAodmFsLCBjb25maWcsIGluZGVudGF0aW9uLCBkZXB0aCwgcmVmcywgcHJpbnRlcikgPT4ge1xuICBjb25zdCBuYW1lID0gZ2V0SW1tdXRhYmxlTmFtZSgnU2VxJyk7XG5cbiAgaWYgKCsrZGVwdGggPiBjb25maWcubWF4RGVwdGgpIHtcbiAgICByZXR1cm4gcHJpbnRBc0xlYWYobmFtZSk7XG4gIH1cblxuICBpZiAodmFsW0lTX0tFWUVEX1NFTlRJTkVMXSkge1xuICAgIHJldHVybiAoXG4gICAgICBuYW1lICtcbiAgICAgIFNQQUNFICtcbiAgICAgICd7JyArIC8vIGZyb20gSW1tdXRhYmxlIGNvbGxlY3Rpb24gb2YgZW50cmllcyBvciBmcm9tIEVDTUFTY3JpcHQgb2JqZWN0XG4gICAgICAodmFsLl9pdGVyIHx8IHZhbC5fb2JqZWN0XG4gICAgICAgID8gKDAsIF9jb2xsZWN0aW9ucy5wcmludEl0ZXJhdG9yRW50cmllcykoXG4gICAgICAgICAgICB2YWwuZW50cmllcygpLFxuICAgICAgICAgICAgY29uZmlnLFxuICAgICAgICAgICAgaW5kZW50YXRpb24sXG4gICAgICAgICAgICBkZXB0aCxcbiAgICAgICAgICAgIHJlZnMsXG4gICAgICAgICAgICBwcmludGVyXG4gICAgICAgICAgKVxuICAgICAgICA6IExBWlkpICtcbiAgICAgICd9J1xuICAgICk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIG5hbWUgK1xuICAgIFNQQUNFICtcbiAgICAnWycgK1xuICAgICh2YWwuX2l0ZXIgfHwgLy8gZnJvbSBJbW11dGFibGUgY29sbGVjdGlvbiBvZiB2YWx1ZXNcbiAgICB2YWwuX2FycmF5IHx8IC8vIGZyb20gRUNNQVNjcmlwdCBhcnJheVxuICAgIHZhbC5fY29sbGVjdGlvbiB8fCAvLyBmcm9tIEVDTUFTY3JpcHQgY29sbGVjdGlvbiBpbiBpbW11dGFibGUgdjRcbiAgICB2YWwuX2l0ZXJhYmxlIC8vIGZyb20gRUNNQVNjcmlwdCBjb2xsZWN0aW9uIGluIGltbXV0YWJsZSB2M1xuICAgICAgPyAoMCwgX2NvbGxlY3Rpb25zLnByaW50SXRlcmF0b3JWYWx1ZXMpKFxuICAgICAgICAgIHZhbC52YWx1ZXMoKSxcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgaW5kZW50YXRpb24sXG4gICAgICAgICAgZGVwdGgsXG4gICAgICAgICAgcmVmcyxcbiAgICAgICAgICBwcmludGVyXG4gICAgICAgIClcbiAgICAgIDogTEFaWSkgK1xuICAgICddJ1xuICApO1xufTtcblxuY29uc3QgcHJpbnRJbW11dGFibGVWYWx1ZXMgPSAoXG4gIHZhbCxcbiAgY29uZmlnLFxuICBpbmRlbnRhdGlvbixcbiAgZGVwdGgsXG4gIHJlZnMsXG4gIHByaW50ZXIsXG4gIHR5cGVcbikgPT5cbiAgKytkZXB0aCA+IGNvbmZpZy5tYXhEZXB0aFxuICAgID8gcHJpbnRBc0xlYWYoZ2V0SW1tdXRhYmxlTmFtZSh0eXBlKSlcbiAgICA6IGdldEltbXV0YWJsZU5hbWUodHlwZSkgK1xuICAgICAgU1BBQ0UgK1xuICAgICAgJ1snICtcbiAgICAgICgwLCBfY29sbGVjdGlvbnMucHJpbnRJdGVyYXRvclZhbHVlcykoXG4gICAgICAgIHZhbC52YWx1ZXMoKSxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICBpbmRlbnRhdGlvbixcbiAgICAgICAgZGVwdGgsXG4gICAgICAgIHJlZnMsXG4gICAgICAgIHByaW50ZXJcbiAgICAgICkgK1xuICAgICAgJ10nO1xuXG5jb25zdCBzZXJpYWxpemUgPSAodmFsLCBjb25maWcsIGluZGVudGF0aW9uLCBkZXB0aCwgcmVmcywgcHJpbnRlcikgPT4ge1xuICBpZiAodmFsW0lTX01BUF9TRU5USU5FTF0pIHtcbiAgICByZXR1cm4gcHJpbnRJbW11dGFibGVFbnRyaWVzKFxuICAgICAgdmFsLFxuICAgICAgY29uZmlnLFxuICAgICAgaW5kZW50YXRpb24sXG4gICAgICBkZXB0aCxcbiAgICAgIHJlZnMsXG4gICAgICBwcmludGVyLFxuICAgICAgdmFsW0lTX09SREVSRURfU0VOVElORUxdID8gJ09yZGVyZWRNYXAnIDogJ01hcCdcbiAgICApO1xuICB9XG5cbiAgaWYgKHZhbFtJU19MSVNUX1NFTlRJTkVMXSkge1xuICAgIHJldHVybiBwcmludEltbXV0YWJsZVZhbHVlcyhcbiAgICAgIHZhbCxcbiAgICAgIGNvbmZpZyxcbiAgICAgIGluZGVudGF0aW9uLFxuICAgICAgZGVwdGgsXG4gICAgICByZWZzLFxuICAgICAgcHJpbnRlcixcbiAgICAgICdMaXN0J1xuICAgICk7XG4gIH1cblxuICBpZiAodmFsW0lTX1NFVF9TRU5USU5FTF0pIHtcbiAgICByZXR1cm4gcHJpbnRJbW11dGFibGVWYWx1ZXMoXG4gICAgICB2YWwsXG4gICAgICBjb25maWcsXG4gICAgICBpbmRlbnRhdGlvbixcbiAgICAgIGRlcHRoLFxuICAgICAgcmVmcyxcbiAgICAgIHByaW50ZXIsXG4gICAgICB2YWxbSVNfT1JERVJFRF9TRU5USU5FTF0gPyAnT3JkZXJlZFNldCcgOiAnU2V0J1xuICAgICk7XG4gIH1cblxuICBpZiAodmFsW0lTX1NUQUNLX1NFTlRJTkVMXSkge1xuICAgIHJldHVybiBwcmludEltbXV0YWJsZVZhbHVlcyhcbiAgICAgIHZhbCxcbiAgICAgIGNvbmZpZyxcbiAgICAgIGluZGVudGF0aW9uLFxuICAgICAgZGVwdGgsXG4gICAgICByZWZzLFxuICAgICAgcHJpbnRlcixcbiAgICAgICdTdGFjaydcbiAgICApO1xuICB9XG5cbiAgaWYgKHZhbFtJU19TRVFfU0VOVElORUxdKSB7XG4gICAgcmV0dXJuIHByaW50SW1tdXRhYmxlU2VxKHZhbCwgY29uZmlnLCBpbmRlbnRhdGlvbiwgZGVwdGgsIHJlZnMsIHByaW50ZXIpO1xuICB9IC8vIEZvciBjb21wYXRpYmlsaXR5IHdpdGggaW1tdXRhYmxlIHYzIGFuZCB2NCwgbGV0IHJlY29yZCBiZSB0aGUgZGVmYXVsdC5cblxuICByZXR1cm4gcHJpbnRJbW11dGFibGVSZWNvcmQodmFsLCBjb25maWcsIGluZGVudGF0aW9uLCBkZXB0aCwgcmVmcywgcHJpbnRlcik7XG59OyAvLyBFeHBsaWNpdGx5IGNvbXBhcmluZyBzZW50aW5lbCBwcm9wZXJ0aWVzIHRvIHRydWUgYXZvaWRzIGZhbHNlIHBvc2l0aXZlXG4vLyB3aGVuIG1vY2sgaWRlbnRpdHktb2JqLXByb3h5IHJldHVybnMgdGhlIGtleSBhcyB0aGUgdmFsdWUgZm9yIGFueSBrZXkuXG5cbmV4cG9ydHMuc2VyaWFsaXplID0gc2VyaWFsaXplO1xuXG5jb25zdCB0ZXN0ID0gdmFsID0+XG4gIHZhbCAmJlxuICAodmFsW0lTX0lURVJBQkxFX1NFTlRJTkVMXSA9PT0gdHJ1ZSB8fCB2YWxbSVNfUkVDT1JEX1NFTlRJTkVMXSA9PT0gdHJ1ZSk7XG5cbmV4cG9ydHMudGVzdCA9IHRlc3Q7XG5jb25zdCBwbHVnaW4gPSB7XG4gIHNlcmlhbGl6ZSxcbiAgdGVzdFxufTtcbnZhciBfZGVmYXVsdCA9IHBsdWdpbjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuIl0sInZlcnNpb24iOjN9
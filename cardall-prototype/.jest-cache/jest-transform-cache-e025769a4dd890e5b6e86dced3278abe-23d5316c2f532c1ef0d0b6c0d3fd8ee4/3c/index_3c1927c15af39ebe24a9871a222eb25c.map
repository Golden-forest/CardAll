{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\node_modules\\jest-axe\\index.js","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\node_modules\\jest-axe\\index.js"],"sourcesContent":["\"use strict\";\nconst axeCore = require(\"axe-core\");\nconst merge = require(\"lodash.merge\");\nconst chalk = require(\"chalk\");\nconst { printReceived, matcherHint } = require(\"jest-matcher-utils\");\n\nconst AXE_RULES_COLOR = axeCore.getRules([\"cat.color\"]);\n\n/**\n * Converts a HTML string or HTML element to a mounted HTML element.\n * @param {Element | string} a HTML element or a HTML string\n * @returns {[Element, function]} a HTML element and a function to restore the document\n */\nfunction mount(html) {\n  if (isHTMLElement(html)) {\n    if (document.body.contains(html)) {\n      return [html, () => undefined];\n    }\n\n    html = html.outerHTML;\n  }\n\n  if (isHTMLString(html)) {\n    const originalHTML = document.body.innerHTML;\n    const restore = () => {\n      document.body.innerHTML = originalHTML;\n    };\n\n    document.body.innerHTML = html;\n    return [document.body, restore];\n  }\n\n  if (typeof html === \"string\") {\n    throw new Error(`html parameter (\"${html}\") has no elements`);\n  }\n\n  throw new Error(`html parameter should be an HTML string or an HTML element`);\n}\n\n/**\n * Small wrapper for axe-core#run that enables promises (required for Jest),\n * default options and injects html to be tested\n * @param {object} [options] default options to use in all instances\n * @param {object} [options.globalOptions] Global axe-core configuration (See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#api-name-axeconfigure)\n * @param {object} [options.*] Any other property will be passed as the runner configuration (See https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#options-parameter)\n * @returns {function} returns instance of axe\n */\nfunction configureAxe(options = {}) {\n  const { globalOptions = {}, ...runnerOptions } = options;\n\n  // Set the global configuration for axe-core\n  // https://github.com/dequelabs/axe-core/blob/develop/doc/API.md#api-name-axeconfigure\n  const { rules = [], ...otherGlobalOptions } = globalOptions;\n\n  // Color contrast checking doesnt work in a jsdom environment.\n  // So we need to identify them and disable them by default.\n  const defaultRules = AXE_RULES_COLOR.map(({ ruleId: id }) => ({\n    id,\n    enabled: false,\n  }));\n\n  axeCore.configure({\n    rules: [...defaultRules, ...rules],\n    ...otherGlobalOptions,\n  });\n\n  /**\n   * Small wrapper for axe-core#run that enables promises (required for Jest),\n   * default options and injects html to be tested\n   * @param {string} html requires a html string to be injected into the body\n   * @param {object} [additionalOptions] aXe options to merge with default options\n   * @returns {promise} returns promise that will resolve with axe-core#run results object\n   */\n  return function axe(html, additionalOptions = {}) {\n    const [element, restore] = mount(html);\n    const options = merge({}, runnerOptions, additionalOptions);\n\n    return new Promise((resolve, reject) => {\n      axeCore.run(element, options, (err, results) => {\n        restore();\n        if (err) reject(err);\n        resolve(results);\n      });\n    });\n  };\n}\n\n/**\n * Checks if the HTML parameter provided is a HTML element.\n * @param {Element} a HTML element or a HTML string\n * @returns {boolean} true or false\n */\nfunction isHTMLElement(html) {\n  return !!html && typeof html === \"object\" && typeof html.tagName === \"string\";\n}\n\n/**\n * Checks that the HTML parameter provided is a string that contains HTML.\n * @param {string} a HTML element or a HTML string\n * @returns {boolean} true or false\n */\nfunction isHTMLString(html) {\n  return typeof html === \"string\" && /(<([^>]+)>)/i.test(html);\n}\n\n/**\n * Filters all violations by user impact\n * @param {object} violations result of the accessibilty check by axe\n * @param {array} impactLevels defines which impact level should be considered (e.g ['critical'])\n * The level of impact can be \"minor\", \"moderate\", \"serious\", or \"critical\".\n * @returns {object} violations filtered by impact level\n */\nfunction filterViolations(violations, impactLevels) {\n  if (impactLevels && impactLevels.length > 0) {\n    return violations.filter((v) => impactLevels.includes(v.impact));\n  }\n  return violations;\n}\n\n/**\n * Custom Jest expect matcher, that can check aXe results for violations.\n * @param {object} object requires an instance of aXe's results object\n * (https://github.com/dequelabs/axe-core/blob/develop-2x/doc/API.md#results-object)\n * @returns {object} returns Jest matcher object\n */\nconst toHaveNoViolations = {\n  toHaveNoViolations(results) {\n    if (typeof results.violations === \"undefined\") {\n      throw new Error(\n        \"Unexpected aXe results object. No violations property found.\\nDid you change the `reporter` in your aXe configuration?\"\n      );\n    }\n\n    const violations = filterViolations(\n      results.violations,\n      results.toolOptions ? results.toolOptions.impactLevels : []\n    );\n\n    const reporter = (violations) => {\n      if (violations.length === 0) {\n        return [];\n      }\n\n      const lineBreak = \"\\n\\n\";\n      const horizontalLine = \"\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\";\n\n      return violations\n        .map((violation) => {\n          const errorBody = violation.nodes\n            .map((node) => {\n              const selector = node.target.join(\", \");\n              const expectedText =\n                `Expected the HTML found at $('${selector}') to have no violations:` +\n                lineBreak;\n              return (\n                expectedText +\n                chalk.grey(node.html) +\n                lineBreak +\n                `Received:` +\n                lineBreak +\n                printReceived(`${violation.help} (${violation.id})`) +\n                lineBreak +\n                chalk.yellow(node.failureSummary) +\n                lineBreak +\n                (violation.helpUrl\n                  ? `You can find more information on this issue here: \\n${chalk.blue(\n                      violation.helpUrl\n                    )}`\n                  : \"\")\n              );\n            })\n            .join(lineBreak);\n\n          return errorBody;\n        })\n        .join(lineBreak + horizontalLine + lineBreak);\n    };\n\n    const formatedViolations = reporter(violations);\n    const pass = formatedViolations.length === 0;\n\n    const message = () => {\n      if (pass) {\n        return;\n      }\n      return (\n        matcherHint(\".toHaveNoViolations\") + \"\\n\\n\" + `${formatedViolations}`\n      );\n    };\n\n    return { actual: violations, message, pass };\n  },\n};\n\nmodule.exports = {\n  configureAxe,\n  axe: configureAxe(),\n  toHaveNoViolations,\n};\n"],"version":3}
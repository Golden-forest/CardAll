{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\node_modules\\jest-axe\\node_modules\\jest-diff\\build\\joinAlignedDiffs.js","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\node_modules\\jest-axe\\node_modules\\jest-diff\\build\\joinAlignedDiffs.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.joinAlignedDiffsNoExpand = exports.joinAlignedDiffsExpand = void 0;\nvar _cleanupSemantic = require('./cleanupSemantic');\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst formatTrailingSpaces = (line, trailingSpaceFormatter) =>\n  line.replace(/\\s+$/, match => trailingSpaceFormatter(match));\nconst printDiffLine = (\n  line,\n  isFirstOrLast,\n  color,\n  indicator,\n  trailingSpaceFormatter,\n  emptyFirstOrLastLinePlaceholder\n) =>\n  line.length !== 0\n    ? color(\n        `${indicator} ${formatTrailingSpaces(line, trailingSpaceFormatter)}`\n      )\n    : indicator !== ' '\n    ? color(indicator)\n    : isFirstOrLast && emptyFirstOrLastLinePlaceholder.length !== 0\n    ? color(`${indicator} ${emptyFirstOrLastLinePlaceholder}`)\n    : '';\nconst printDeleteLine = (\n  line,\n  isFirstOrLast,\n  {\n    aColor,\n    aIndicator,\n    changeLineTrailingSpaceColor,\n    emptyFirstOrLastLinePlaceholder\n  }\n) =>\n  printDiffLine(\n    line,\n    isFirstOrLast,\n    aColor,\n    aIndicator,\n    changeLineTrailingSpaceColor,\n    emptyFirstOrLastLinePlaceholder\n  );\nconst printInsertLine = (\n  line,\n  isFirstOrLast,\n  {\n    bColor,\n    bIndicator,\n    changeLineTrailingSpaceColor,\n    emptyFirstOrLastLinePlaceholder\n  }\n) =>\n  printDiffLine(\n    line,\n    isFirstOrLast,\n    bColor,\n    bIndicator,\n    changeLineTrailingSpaceColor,\n    emptyFirstOrLastLinePlaceholder\n  );\nconst printCommonLine = (\n  line,\n  isFirstOrLast,\n  {\n    commonColor,\n    commonIndicator,\n    commonLineTrailingSpaceColor,\n    emptyFirstOrLastLinePlaceholder\n  }\n) =>\n  printDiffLine(\n    line,\n    isFirstOrLast,\n    commonColor,\n    commonIndicator,\n    commonLineTrailingSpaceColor,\n    emptyFirstOrLastLinePlaceholder\n  );\n\n// In GNU diff format, indexes are one-based instead of zero-based.\nconst createPatchMark = (aStart, aEnd, bStart, bEnd, {patchColor}) =>\n  patchColor(\n    `@@ -${aStart + 1},${aEnd - aStart} +${bStart + 1},${bEnd - bStart} @@`\n  );\n\n// jest --no-expand\n//\n// Given array of aligned strings with inverse highlight formatting,\n// return joined lines with diff formatting (and patch marks, if needed).\nconst joinAlignedDiffsNoExpand = (diffs, options) => {\n  const iLength = diffs.length;\n  const nContextLines = options.contextLines;\n  const nContextLines2 = nContextLines + nContextLines;\n\n  // First pass: count output lines and see if it has patches.\n  let jLength = iLength;\n  let hasExcessAtStartOrEnd = false;\n  let nExcessesBetweenChanges = 0;\n  let i = 0;\n  while (i !== iLength) {\n    const iStart = i;\n    while (i !== iLength && diffs[i][0] === _cleanupSemantic.DIFF_EQUAL) {\n      i += 1;\n    }\n    if (iStart !== i) {\n      if (iStart === 0) {\n        // at start\n        if (i > nContextLines) {\n          jLength -= i - nContextLines; // subtract excess common lines\n          hasExcessAtStartOrEnd = true;\n        }\n      } else if (i === iLength) {\n        // at end\n        const n = i - iStart;\n        if (n > nContextLines) {\n          jLength -= n - nContextLines; // subtract excess common lines\n          hasExcessAtStartOrEnd = true;\n        }\n      } else {\n        // between changes\n        const n = i - iStart;\n        if (n > nContextLines2) {\n          jLength -= n - nContextLines2; // subtract excess common lines\n          nExcessesBetweenChanges += 1;\n        }\n      }\n    }\n    while (i !== iLength && diffs[i][0] !== _cleanupSemantic.DIFF_EQUAL) {\n      i += 1;\n    }\n  }\n  const hasPatch = nExcessesBetweenChanges !== 0 || hasExcessAtStartOrEnd;\n  if (nExcessesBetweenChanges !== 0) {\n    jLength += nExcessesBetweenChanges + 1; // add patch lines\n  } else if (hasExcessAtStartOrEnd) {\n    jLength += 1; // add patch line\n  }\n\n  const jLast = jLength - 1;\n  const lines = [];\n  let jPatchMark = 0; // index of placeholder line for current patch mark\n  if (hasPatch) {\n    lines.push(''); // placeholder line for first patch mark\n  }\n\n  // Indexes of expected or received lines in current patch:\n  let aStart = 0;\n  let bStart = 0;\n  let aEnd = 0;\n  let bEnd = 0;\n  const pushCommonLine = line => {\n    const j = lines.length;\n    lines.push(printCommonLine(line, j === 0 || j === jLast, options));\n    aEnd += 1;\n    bEnd += 1;\n  };\n  const pushDeleteLine = line => {\n    const j = lines.length;\n    lines.push(printDeleteLine(line, j === 0 || j === jLast, options));\n    aEnd += 1;\n  };\n  const pushInsertLine = line => {\n    const j = lines.length;\n    lines.push(printInsertLine(line, j === 0 || j === jLast, options));\n    bEnd += 1;\n  };\n\n  // Second pass: push lines with diff formatting (and patch marks, if needed).\n  i = 0;\n  while (i !== iLength) {\n    let iStart = i;\n    while (i !== iLength && diffs[i][0] === _cleanupSemantic.DIFF_EQUAL) {\n      i += 1;\n    }\n    if (iStart !== i) {\n      if (iStart === 0) {\n        // at beginning\n        if (i > nContextLines) {\n          iStart = i - nContextLines;\n          aStart = iStart;\n          bStart = iStart;\n          aEnd = aStart;\n          bEnd = bStart;\n        }\n        for (let iCommon = iStart; iCommon !== i; iCommon += 1) {\n          pushCommonLine(diffs[iCommon][1]);\n        }\n      } else if (i === iLength) {\n        // at end\n        const iEnd = i - iStart > nContextLines ? iStart + nContextLines : i;\n        for (let iCommon = iStart; iCommon !== iEnd; iCommon += 1) {\n          pushCommonLine(diffs[iCommon][1]);\n        }\n      } else {\n        // between changes\n        const nCommon = i - iStart;\n        if (nCommon > nContextLines2) {\n          const iEnd = iStart + nContextLines;\n          for (let iCommon = iStart; iCommon !== iEnd; iCommon += 1) {\n            pushCommonLine(diffs[iCommon][1]);\n          }\n          lines[jPatchMark] = createPatchMark(\n            aStart,\n            aEnd,\n            bStart,\n            bEnd,\n            options\n          );\n          jPatchMark = lines.length;\n          lines.push(''); // placeholder line for next patch mark\n\n          const nOmit = nCommon - nContextLines2;\n          aStart = aEnd + nOmit;\n          bStart = bEnd + nOmit;\n          aEnd = aStart;\n          bEnd = bStart;\n          for (let iCommon = i - nContextLines; iCommon !== i; iCommon += 1) {\n            pushCommonLine(diffs[iCommon][1]);\n          }\n        } else {\n          for (let iCommon = iStart; iCommon !== i; iCommon += 1) {\n            pushCommonLine(diffs[iCommon][1]);\n          }\n        }\n      }\n    }\n    while (i !== iLength && diffs[i][0] === _cleanupSemantic.DIFF_DELETE) {\n      pushDeleteLine(diffs[i][1]);\n      i += 1;\n    }\n    while (i !== iLength && diffs[i][0] === _cleanupSemantic.DIFF_INSERT) {\n      pushInsertLine(diffs[i][1]);\n      i += 1;\n    }\n  }\n  if (hasPatch) {\n    lines[jPatchMark] = createPatchMark(aStart, aEnd, bStart, bEnd, options);\n  }\n  return lines.join('\\n');\n};\n\n// jest --expand\n//\n// Given array of aligned strings with inverse highlight formatting,\n// return joined lines with diff formatting.\nexports.joinAlignedDiffsNoExpand = joinAlignedDiffsNoExpand;\nconst joinAlignedDiffsExpand = (diffs, options) =>\n  diffs\n    .map((diff, i, diffs) => {\n      const line = diff[1];\n      const isFirstOrLast = i === 0 || i === diffs.length - 1;\n      switch (diff[0]) {\n        case _cleanupSemantic.DIFF_DELETE:\n          return printDeleteLine(line, isFirstOrLast, options);\n        case _cleanupSemantic.DIFF_INSERT:\n          return printInsertLine(line, isFirstOrLast, options);\n        default:\n          return printCommonLine(line, isFirstOrLast, options);\n      }\n    })\n    .join('\\n');\nexports.joinAlignedDiffsExpand = joinAlignedDiffsExpand;\n"],"version":3}
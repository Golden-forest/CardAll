{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\node_modules\\dnd-core\\dist\\actions\\dragDrop\\beginDrag.js","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\node_modules\\dnd-core\\dist\\actions\\dragDrop\\beginDrag.js"],"sourcesContent":["import { invariant } from '@react-dnd/invariant';\nimport { isObject } from '../../utils/js_utils.js';\nimport { setClientOffset } from './local/setClientOffset.js';\nimport { BEGIN_DRAG, INIT_COORDS } from './types.js';\nconst ResetCoordinatesAction = {\n    type: INIT_COORDS,\n    payload: {\n        clientOffset: null,\n        sourceClientOffset: null\n    }\n};\nexport function createBeginDrag(manager) {\n    return function beginDrag(sourceIds = [], options = {\n        publishSource: true\n    }) {\n        const { publishSource =true , clientOffset , getSourceClientOffset ,  } = options;\n        const monitor = manager.getMonitor();\n        const registry = manager.getRegistry();\n        // Initialize the coordinates using the client offset\n        manager.dispatch(setClientOffset(clientOffset));\n        verifyInvariants(sourceIds, monitor, registry);\n        // Get the draggable source\n        const sourceId = getDraggableSource(sourceIds, monitor);\n        if (sourceId == null) {\n            manager.dispatch(ResetCoordinatesAction);\n            return;\n        }\n        // Get the source client offset\n        let sourceClientOffset = null;\n        if (clientOffset) {\n            if (!getSourceClientOffset) {\n                throw new Error('getSourceClientOffset must be defined');\n            }\n            verifyGetSourceClientOffsetIsFunction(getSourceClientOffset);\n            sourceClientOffset = getSourceClientOffset(sourceId);\n        }\n        // Initialize the full coordinates\n        manager.dispatch(setClientOffset(clientOffset, sourceClientOffset));\n        const source = registry.getSource(sourceId);\n        const item = source.beginDrag(monitor, sourceId);\n        // If source.beginDrag returns null, this is an indicator to cancel the drag\n        if (item == null) {\n            return undefined;\n        }\n        verifyItemIsObject(item);\n        registry.pinSource(sourceId);\n        const itemType = registry.getSourceType(sourceId);\n        return {\n            type: BEGIN_DRAG,\n            payload: {\n                itemType,\n                item,\n                sourceId,\n                clientOffset: clientOffset || null,\n                sourceClientOffset: sourceClientOffset || null,\n                isSourcePublic: !!publishSource\n            }\n        };\n    };\n}\nfunction verifyInvariants(sourceIds, monitor, registry) {\n    invariant(!monitor.isDragging(), 'Cannot call beginDrag while dragging.');\n    sourceIds.forEach(function(sourceId) {\n        invariant(registry.getSource(sourceId), 'Expected sourceIds to be registered.');\n    });\n}\nfunction verifyGetSourceClientOffsetIsFunction(getSourceClientOffset) {\n    invariant(typeof getSourceClientOffset === 'function', 'When clientOffset is provided, getSourceClientOffset must be a function.');\n}\nfunction verifyItemIsObject(item) {\n    invariant(isObject(item), 'Item must be an object.');\n}\nfunction getDraggableSource(sourceIds, monitor) {\n    let sourceId = null;\n    for(let i = sourceIds.length - 1; i >= 0; i--){\n        if (monitor.canDragSource(sourceIds[i])) {\n            sourceId = sourceIds[i];\n            break;\n        }\n    }\n    return sourceId;\n}\n\n//# sourceMappingURL=beginDrag.js.map"],"version":3}
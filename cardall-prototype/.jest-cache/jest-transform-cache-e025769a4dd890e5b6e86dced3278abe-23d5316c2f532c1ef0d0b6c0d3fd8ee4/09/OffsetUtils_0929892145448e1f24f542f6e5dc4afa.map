{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\node_modules\\react-dnd-html5-backend\\dist\\OffsetUtils.js","mappings":"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","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\node_modules\\react-dnd-html5-backend\\dist\\OffsetUtils.js"],"sourcesContent":["import { isFirefox, isSafari } from './BrowserDetector.js';\nimport { MonotonicInterpolant } from './MonotonicInterpolant.js';\nconst ELEMENT_NODE = 1;\nexport function getNodeClientOffset(node) {\n    const el = node.nodeType === ELEMENT_NODE ? node : node.parentElement;\n    if (!el) {\n        return null;\n    }\n    const { top , left  } = el.getBoundingClientRect();\n    return {\n        x: left,\n        y: top\n    };\n}\nexport function getEventClientOffset(e) {\n    return {\n        x: e.clientX,\n        y: e.clientY\n    };\n}\nfunction isImageNode(node) {\n    var ref;\n    return node.nodeName === 'IMG' && (isFirefox() || !((ref = document.documentElement) === null || ref === void 0 ? void 0 : ref.contains(node)));\n}\nfunction getDragPreviewSize(isImage, dragPreview, sourceWidth, sourceHeight) {\n    let dragPreviewWidth = isImage ? dragPreview.width : sourceWidth;\n    let dragPreviewHeight = isImage ? dragPreview.height : sourceHeight;\n    // Work around @2x coordinate discrepancies in browsers\n    if (isSafari() && isImage) {\n        dragPreviewHeight /= window.devicePixelRatio;\n        dragPreviewWidth /= window.devicePixelRatio;\n    }\n    return {\n        dragPreviewWidth,\n        dragPreviewHeight\n    };\n}\nexport function getDragPreviewOffset(sourceNode, dragPreview, clientOffset, anchorPoint, offsetPoint) {\n    // The browsers will use the image intrinsic size under different conditions.\n    // Firefox only cares if it's an image, but WebKit also wants it to be detached.\n    const isImage = isImageNode(dragPreview);\n    const dragPreviewNode = isImage ? sourceNode : dragPreview;\n    const dragPreviewNodeOffsetFromClient = getNodeClientOffset(dragPreviewNode);\n    const offsetFromDragPreview = {\n        x: clientOffset.x - dragPreviewNodeOffsetFromClient.x,\n        y: clientOffset.y - dragPreviewNodeOffsetFromClient.y\n    };\n    const { offsetWidth: sourceWidth , offsetHeight: sourceHeight  } = sourceNode;\n    const { anchorX , anchorY  } = anchorPoint;\n    const { dragPreviewWidth , dragPreviewHeight  } = getDragPreviewSize(isImage, dragPreview, sourceWidth, sourceHeight);\n    const calculateYOffset = ()=>{\n        const interpolantY = new MonotonicInterpolant([\n            0,\n            0.5,\n            1\n        ], [\n            // Dock to the top\n            offsetFromDragPreview.y,\n            // Align at the center\n            (offsetFromDragPreview.y / sourceHeight) * dragPreviewHeight,\n            // Dock to the bottom\n            offsetFromDragPreview.y + dragPreviewHeight - sourceHeight, \n        ]);\n        let y = interpolantY.interpolate(anchorY);\n        // Work around Safari 8 positioning bug\n        if (isSafari() && isImage) {\n            // We'll have to wait for @3x to see if this is entirely correct\n            y += (window.devicePixelRatio - 1) * dragPreviewHeight;\n        }\n        return y;\n    };\n    const calculateXOffset = ()=>{\n        // Interpolate coordinates depending on anchor point\n        // If you know a simpler way to do this, let me know\n        const interpolantX = new MonotonicInterpolant([\n            0,\n            0.5,\n            1\n        ], [\n            // Dock to the left\n            offsetFromDragPreview.x,\n            // Align at the center\n            (offsetFromDragPreview.x / sourceWidth) * dragPreviewWidth,\n            // Dock to the right\n            offsetFromDragPreview.x + dragPreviewWidth - sourceWidth, \n        ]);\n        return interpolantX.interpolate(anchorX);\n    };\n    // Force offsets if specified in the options.\n    const { offsetX , offsetY  } = offsetPoint;\n    const isManualOffsetX = offsetX === 0 || offsetX;\n    const isManualOffsetY = offsetY === 0 || offsetY;\n    return {\n        x: isManualOffsetX ? offsetX : calculateXOffset(),\n        y: isManualOffsetY ? offsetY : calculateYOffset()\n    };\n}\n\n//# sourceMappingURL=OffsetUtils.js.map"],"version":3}
{"file":"D:\\Projects\\CardEverything\\cardall-prototype\\node_modules\\@react-dnd\\invariant\\dist\\index.js","mappings":";;AASI,8BAqBH;AA9BD;;;;;;;;;GASG,CAAC,SAAgB,SAAS,CAAC,SAAS,EAAE,MAAM,EAAE,GAAG,IAAI;IACpD,IAAI,YAAY,EAAE,EAAE,CAAC;QACjB,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC;YACvB,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;QACpE,CAAC;IACL,CAAC;IACD,IAAI,CAAC,SAAS,EAAE,CAAC;QACb,IAAI,KAAK,CAAC;QACV,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC;YACvB,KAAK,GAAG,IAAI,KAAK,CAAC,oEAAoE,GAAG,6DAA6D,CAAC,CAAC;QAC5J,CAAC;aAAM,CAAC;YACJ,IAAI,QAAQ,GAAG,CAAC,CAAC;YACjB,KAAK,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE;gBACpC,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC,CAAC;YACJ,KAAK,CAAC,IAAI,GAAG,qBAAqB,CAAC;QACvC,CAAC;QACD,KAAK,CAAC,WAAW,GAAG,CAAC,CAAC,4CAA4C;SACjE;QACD,MAAM,KAAK,CAAC;IAChB,CAAC;AACL,CAAC;AACD,SAAS,YAAY;IACjB,OAAO,OAAO,OAAO,KAAK,WAAW,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,YAAY,CAAC;AACtF,CAAC;AAED,iCAAiC","names":[],"sources":["D:\\Projects\\CardEverything\\cardall-prototype\\node_modules\\@react-dnd\\invariant\\dist\\index.js"],"sourcesContent":["/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */ export function invariant(condition, format, ...args) {\n    if (isProduction()) {\n        if (format === undefined) {\n            throw new Error('invariant requires an error message argument');\n        }\n    }\n    if (!condition) {\n        let error;\n        if (format === undefined) {\n            error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n        } else {\n            let argIndex = 0;\n            error = new Error(format.replace(/%s/g, function() {\n                return args[argIndex++];\n            }));\n            error.name = 'Invariant Violation';\n        }\n        error.framesToPop = 1 // we don't care about invariant's own frame\n        ;\n        throw error;\n    }\n}\nfunction isProduction() {\n    return typeof process !== 'undefined' && process.env['NODE_ENV'] === 'production';\n}\n\n//# sourceMappingURL=index.js.map"],"version":3}
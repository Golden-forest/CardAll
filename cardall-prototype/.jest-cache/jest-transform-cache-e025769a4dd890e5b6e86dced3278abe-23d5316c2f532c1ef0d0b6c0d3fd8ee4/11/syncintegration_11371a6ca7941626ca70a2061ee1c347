0331cecc78e59a1be05f9ee388ad03ed
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addImageSyncOperation = exports.addTagSyncOperation = exports.addFolderSyncOperation = exports.addCardSyncOperation = exports.initializeSyncSystem = exports.syncIntegrationService = exports.SyncIntegrationService = exports.DEFAULT_SYNC_CONFIG = void 0;
const cloud_sync_1 = require("./cloud-sync");
const local_operation_1 = require("./local-operation");
const sync_strategy_1 = require("./sync-strategy");
const sync_performance_1 = require("./sync-performance");
const network_monitor_1 = require("./network-monitor");
const auth_1 = require("./auth");
// 默认配置
exports.DEFAULT_SYNC_CONFIG = {
    components: {
        localQueue: true,
        networkMonitor: true,
        syncStrategy: true,
        performanceOptimizer: true,
        conflictResolution: true
    },
    strategy: {
        autoSync: true,
        syncInterval: 300000, // 5分钟
        fullSyncThreshold: 1000,
        conflictResolution: 'hybrid'
    },
    performance: {
        adaptiveBatching: true,
        networkAware: true,
        compressionEnabled: true,
        maxConcurrentOperations: 50
    },
    offline: {
        enabled: true,
        maxOfflineOperations: 5000,
        autoSyncOnReconnect: true
    }
};
// ============================================================================
// 同步系统集成服务
// ============================================================================
class SyncIntegrationService {
    constructor(config = {}) {
        Object.defineProperty(this, "config", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "isInitialized", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "isRunning", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        // 事件监听器
        Object.defineProperty(this, "listeners", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Set()
        });
        // 定时器
        Object.defineProperty(this, "syncTimer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "statusUpdateTimer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        // 组件集成状态
        Object.defineProperty(this, "componentsReady", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {
                localQueue: false,
                networkMonitor: false,
                syncStrategy: false,
                performanceOptimizer: false
            }
        });
        this.config = { ...exports.DEFAULT_SYNC_CONFIG, ...config };
        this.initialize();
    }
    // 初始化服务
    async initialize() {
        try {
            console.log('Initializing SyncIntegrationService...');
            // 初始化各个组件
            await this.initializeComponents();
            // 设置组件间的事件监听
            this.setupComponentIntegration();
            // 启动定时任务
            this.startScheduledTasks();
            this.isInitialized = true;
            console.log('SyncIntegrationService initialized successfully');
            this.emitEvent({
                type: 'sync-completed',
                timestamp: new Date(),
                data: { message: 'Sync system initialized' }
            });
        }
        catch (error) {
            console.error('Failed to initialize SyncIntegrationService:', error);
            this.emitEvent({
                type: 'sync-failed',
                timestamp: new Date(),
                data: { error: error instanceof Error ? error.message : 'Initialization failed' }
            });
        }
    }
    // 初始化各个组件
    async initializeComponents() {
        const initPromises = [];
        // 初始化本地队列
        if (this.config.components.localQueue) {
            initPromises.push(this.initializeLocalQueue());
        }
        // 初始化网络监控
        if (this.config.components.networkMonitor) {
            initPromises.push(this.initializeNetworkMonitor());
        }
        // 初始化同步策略
        if (this.config.components.syncStrategy) {
            initPromises.push(this.initializeSyncStrategy());
        }
        // 初始化性能优化器
        if (this.config.components.performanceOptimizer) {
            initPromises.push(this.initializePerformanceOptimizer());
        }
        await Promise.allSettled(initPromises);
    }
    // 初始化本地队列
    async initializeLocalQueue() {
        try {
            // 设置本地队列事件监听
            local_operation_1.localOperationService.addEventListener('operationAdded', (operation) => {
                this.emitEvent({
                    type: 'operation-queued',
                    timestamp: new Date(),
                    data: { operation, queueSize: this.getQueueSize() }
                });
            });
            local_operation_1.localOperationService.addEventListener('operationCompleted', (operation) => {
                this.emitEvent({
                    type: 'operation-completed',
                    timestamp: new Date(),
                    data: { operation, queueSize: this.getQueueSize() }
                });
            });
            local_operation_1.localOperationService.addEventListener('operationFailed', (operation, error) => {
                this.emitEvent({
                    type: 'operation-failed',
                    timestamp: new Date(),
                    data: { operation, error: error.message, queueSize: this.getQueueSize() }
                });
            });
            this.componentsReady.localQueue = true;
            console.log('Local queue initialized');
        }
        catch (error) {
            console.error('Failed to initialize local queue:', error);
        }
    }
    // 初始化网络监控
    async initializeNetworkMonitor() {
        try {
            // 设置网络监控事件监听
            network_monitor_1.networkMonitorService.addEventListener((event) => {
                this.emitEvent({
                    type: 'network-changed',
                    timestamp: new Date(),
                    data: { event, networkInfo: event.currentState }
                });
                // 网络恢复时自动同步
                if (event.type === 'online' && this.config.offline.autoSyncOnReconnect) {
                    this.triggerSync();
                }
            });
            // 启动网络监控
            network_monitor_1.networkMonitorService.startMonitoring();
            this.componentsReady.networkMonitor = true;
            console.log('Network monitor initialized');
        }
        catch (error) {
            console.error('Failed to initialize network monitor:', error);
        }
    }
    // 初始化同步策略
    async initializeSyncStrategy() {
        try {
            // 设置同步策略事件监听
            sync_strategy_1.syncStrategyService.addEventListener('conflictDetected', (conflict) => {
                this.emitEvent({
                    type: 'conflict-detected',
                    timestamp: new Date(),
                    data: { conflict }
                });
            });
            sync_strategy_1.syncStrategyService.addEventListener('conflictResolved', (conflict) => {
                this.emitEvent({
                    type: 'conflict-resolved',
                    timestamp: new Date(),
                    data: { conflict }
                });
            });
            sync_strategy_1.syncStrategyService.addEventListener('syncProgress', (progress) => {
                this.emitEvent({
                    type: 'sync-progress',
                    timestamp: new Date(),
                    data: { progress }
                });
            });
            this.componentsReady.syncStrategy = true;
            console.log('Sync strategy initialized');
        }
        catch (error) {
            console.error('Failed to initialize sync strategy:', error);
        }
    }
    // 初始化性能优化器
    async initializePerformanceOptimizer() {
        try {
            // 性能优化器内部有自己的事件系统
            // 这里主要确保它已正确初始化
            this.componentsReady.performanceOptimizer = true;
            console.log('Performance optimizer initialized');
        }
        catch (error) {
            console.error('Failed to initialize performance optimizer:', error);
        }
    }
    // 设置组件间集成
    setupComponentIntegration() {
        // 本地队列与性能优化器的集成
        if (this.config.components.localQueue && this.config.components.performanceOptimizer) {
            this.setupLocalQueuePerformanceIntegration();
        }
        // 网络监控与性能优化器的集成
        if (this.config.components.networkMonitor && this.config.components.performanceOptimizer) {
            this.setupNetworkPerformanceIntegration();
        }
        // 同步策略与本地队列的集成
        if (this.config.components.syncStrategy && this.config.components.localQueue) {
            this.setupSyncQueueIntegration();
        }
    }
    // 设置本地队列与性能优化器的集成
    setupLocalQueuePerformanceIntegration() {
        // 拦截本地队列的操作，通过性能优化器执行
        const originalAddOperation = local_operation_1.localOperationService.addOperation.bind(local_operation_1.localOperationService);
        local_operation_1.localOperationService.addOperation = async (operation) => {
            try {
                // 通过性能优化器执行操作
                return await sync_performance_1.syncPerformanceOptimizer.executeOptimizedOperation(operation);
            }
            catch (error) {
                // 如果性能优化器拒绝，回退到原始方法
                console.warn('Performance optimization failed, falling back to direct execution');
                return await originalAddOperation(operation);
            }
        };
    }
    // 设置网络监控与性能优化器的集成
    setupNetworkPerformanceIntegration() {
        // 网络监控已经会通知性能优化器
        // 这里主要确保信息流通
    }
    // 设置同步策略与本地队列的集成
    setupSyncQueueIntegration() {
        // 同步策略会使用本地队列管理操作
        // 这里确保数据流向正确
    }
    // 启动定时任务
    startScheduledTasks() {
        // 自动同步
        if (this.config.strategy.autoSync) {
            this.syncTimer = setInterval(() => {
                if (this.shouldAutoSync()) {
                    this.triggerSync();
                }
            }, this.config.strategy.syncInterval);
        }
        // 状态更新
        this.statusUpdateTimer = setInterval(() => {
            this.updateSystemStatus();
        }, 30000); // 每30秒更新一次状态
    }
    // ============================================================================
    // 公共方法
    // ============================================================================
    // 启动同步系统
    async start() {
        if (this.isRunning) {
            console.warn('Sync system is already running');
            return;
        }
        if (!this.isInitialized) {
            throw new Error('Sync system is not initialized');
        }
        try {
            this.isRunning = true;
            // 恢复本地队列
            await local_operation_1.localOperationService.retryFailedOperations();
            // 触发初始同步
            if (this.shouldAutoSync()) {
                await this.triggerSync();
            }
            this.emitEvent({
                type: 'sync-started',
                timestamp: new Date(),
                data: { message: 'Sync system started' }
            });
            console.log('Sync system started successfully');
        }
        catch (error) {
            this.isRunning = false;
            throw error;
        }
    }
    // 停止同步系统
    async stop() {
        if (!this.isRunning) {
            console.warn('Sync system is not running');
            return;
        }
        try {
            this.isRunning = false;
            // 停止定时器
            if (this.syncTimer) {
                clearInterval(this.syncTimer);
                this.syncTimer = null;
            }
            if (this.statusUpdateTimer) {
                clearInterval(this.statusUpdateTimer);
                this.statusUpdateTimer = null;
            }
            // 停止网络监控
            if (this.config.components.networkMonitor) {
                network_monitor_1.networkMonitorService.stopMonitoring();
            }
            this.emitEvent({
                type: 'sync-completed',
                timestamp: new Date(),
                data: { message: 'Sync system stopped' }
            });
            console.log('Sync system stopped successfully');
        }
        catch (error) {
            console.error('Failed to stop sync system:', error);
            throw error;
        }
    }
    // 触发同步
    async triggerSync(options) {
        if (!this.isRunning) {
            throw new Error('Sync system is not running');
        }
        try {
            const userId = options?.userId || auth_1.authService.getCurrentUser()?.id;
            if (!userId) {
                throw new Error('No authenticated user');
            }
            this.emitEvent({
                type: 'sync-started',
                timestamp: new Date(),
                data: { options }
            });
            // 使用同步策略服务执行同步
            const lastSyncTime = this.getLastSyncTime();
            await sync_strategy_1.syncStrategyService.performIncrementalSync(userId, lastSyncTime || new Date(0), {
                forceFullSync: options?.forceFullSync,
                entityTypes: options?.entityTypes
            });
            this.emitEvent({
                type: 'sync-completed',
                timestamp: new Date(),
                data: {
                    message: 'Sync completed successfully',
                    lastSyncTime: new Date()
                }
            });
        }
        catch (error) {
            this.emitEvent({
                type: 'sync-failed',
                timestamp: new Date(),
                data: {
                    error: error instanceof Error ? error.message : 'Sync failed',
                    options
                }
            });
            throw error;
        }
    }
    // 添加同步操作
    async addSyncOperation(entityType, operationType, data, options) {
        const userId = options?.userId || auth_1.authService.getCurrentUser()?.id;
        if (!userId) {
            throw new Error('No authenticated user');
        }
        let operation;
        switch (entityType) {
            case 'card':
                operation = {
                    entityType: 'card',
                    operationType,
                    entityId: data.id,
                    data,
                    previousData: options?.previousData,
                    userId,
                    priority: options?.priority || (operationType === 'delete' ? 'high' : 'normal')
                };
                break;
            case 'folder':
                operation = {
                    entityType: 'folder',
                    operationType,
                    entityId: data.id,
                    data,
                    previousData: options?.previousData,
                    userId,
                    priority: options?.priority || (operationType === 'delete' ? 'high' : 'normal')
                };
                break;
            case 'tag':
                operation = {
                    entityType: 'tag',
                    operationType,
                    entityId: data.id,
                    data,
                    previousData: options?.previousData,
                    userId,
                    priority: options?.priority || 'normal'
                };
                break;
            case 'image':
                operation = {
                    entityType: 'image',
                    operationType,
                    entityId: data.id,
                    data,
                    previousData: options?.previousData,
                    userId,
                    priority: options?.priority || (operationType === 'delete' ? 'high' : 'low')
                };
                break;
        }
        return await local_operation_1.localOperationService.addOperation(operation);
    }
    // 获取系统状态
    getSystemStatus() {
        const networkInfo = network_monitor_1.networkMonitorService.getCurrentState();
        const performanceMetrics = sync_performance_1.syncPerformanceOptimizer.getCurrentMetrics();
        const queueStats = local_operation_1.localOperationService.getQueueStats();
        // 确定系统健康状态
        let health = 'healthy';
        const issues = [];
        if (performanceMetrics.errorRate > 0.1) {
            health = 'critical';
            issues.push('High error rate');
        }
        else if (performanceMetrics.successRate < 0.9) {
            health = 'degraded';
            issues.push('Low success rate');
        }
        if (queueStats.failedOperations > 10) {
            health = health === 'healthy' ? 'degraded' : 'critical';
            issues.push('Multiple failed operations');
        }
        if (!networkInfo.online) {
            health = 'degraded';
            issues.push('Offline');
        }
        return {
            isOnline: networkInfo.online,
            isSyncing: this.isSyncing(),
            lastSyncTime: this.getLastSyncTime(),
            queueSize: queueStats.totalOperations,
            processingQueueSize: queueStats.byStatus.processing,
            failedOperations: queueStats.byStatus.failed,
            performance: {
                throughput: performanceMetrics.operationsPerSecond,
                latency: performanceMetrics.averageLatency,
                successRate: performanceMetrics.successRate,
                memoryUsage: performanceMetrics.memoryUsage
            },
            network: {
                quality: network_monitor_1.networkMonitorService.getNetworkQuality(),
                latency: networkInfo.rtt || 0,
                bandwidth: (networkInfo.downlink || 0) * 1024 * 1024
            },
            hasConflicts: false, // TODO: 实现冲突检测
            conflictCount: 0,
            health,
            issues
        };
    }
    // 获取队列大小
    getQueueSize() {
        try {
            return local_operation_1.localOperationService.getQueueStats().then(stats => stats.totalOperations);
        }
        catch {
            return 0;
        }
    }
    // 获取最后同步时间
    getLastSyncTime() {
        try {
            return cloud_sync_1.cloudSyncService.getCurrentStatus().lastSyncTime;
        }
        catch {
            return null;
        }
    }
    // 检查是否应该自动同步
    shouldAutoSync() {
        if (!this.config.strategy.autoSync)
            return false;
        if (!this.isRunning)
            return false;
        if (!auth_1.authService.isAuthenticated())
            return false;
        const networkInfo = network_monitor_1.networkMonitorService.getCurrentState();
        if (!networkInfo.online)
            return false;
        const queueStats = local_operation_1.localOperationService.getQueueStats();
        if (queueStats.totalOperations < this.config.strategy.fullSyncThreshold)
            return false;
        return true;
    }
    // 检查是否正在同步
    isSyncing() {
        try {
            return cloud_sync_1.cloudSyncService.getCurrentStatus().syncInProgress;
        }
        catch {
            return false;
        }
    }
    // 更新系统状态
    updateSystemStatus() {
        const status = this.getSystemStatus();
        // 检查性能警报
        if (status.health === 'critical') {
            this.emitEvent({
                type: 'performance-alert',
                timestamp: new Date(),
                data: { status, message: 'System health is critical' }
            });
        }
    }
    // ============================================================================
    // 事件系统
    // ============================================================================
    // 添加事件监听器
    addEventListener(callback) {
        this.listeners.add(callback);
    }
    // 移除事件监听器
    removeEventListener(callback) {
        this.listeners.delete(callback);
    }
    // 发送事件
    emitEvent(event) {
        this.listeners.forEach(listener => {
            try {
                listener(event);
            }
            catch (error) {
                console.error('Error in sync event listener:', error);
            }
        });
    }
    // ============================================================================
    // 配置管理
    // ============================================================================
    // 更新配置
    updateConfig(config) {
        this.config = { ...this.config, ...config };
        // 重新启动定时任务（如果需要）
        if (config.strategy?.syncInterval !== undefined && this.syncTimer) {
            clearInterval(this.syncTimer);
            this.syncTimer = setInterval(() => {
                if (this.shouldAutoSync()) {
                    this.triggerSync();
                }
            }, this.config.strategy.syncInterval);
        }
    }
    // 获取配置
    getConfig() {
        return { ...this.config };
    }
    // ============================================================================
    // 工具方法
    // ============================================================================
    // 获取冲突历史
    async getConflictHistory(userId) {
        try {
            const effectiveUserId = userId || auth_1.authService.getCurrentUser()?.id;
            if (!effectiveUserId) {
                return [];
            }
            return await sync_strategy_1.syncStrategyService.getConflictHistory(effectiveUserId);
        }
        catch (error) {
            console.error('Failed to get conflict history:', error);
            return [];
        }
    }
    // 手动解决冲突
    async resolveConflict(conflictId, resolution, customData) {
        try {
            await sync_strategy_1.syncStrategyService.manuallyResolveConflict(conflictId, resolution, customData);
        }
        catch (error) {
            console.error('Failed to resolve conflict:', error);
            throw error;
        }
    }
    // 重试失败的操作
    async retryFailedOperations() {
        try {
            return await local_operation_1.localOperationService.retryFailedOperations();
        }
        catch (error) {
            console.error('Failed to retry failed operations:', error);
            return 0;
        }
    }
    // 清空队列
    async clearQueue() {
        try {
            await local_operation_1.localOperationService.clearQueue();
        }
        catch (error) {
            console.error('Failed to clear queue:', error);
            throw error;
        }
    }
    // 获取详细统计
    async getDetailedStats() {
        try {
            const userId = auth_1.authService.getCurrentUser()?.id;
            const syncStats = userId ? await sync_strategy_1.syncStrategyService.getSyncStats(userId) : null;
            return {
                sync: syncStats,
                performance: sync_performance_1.syncPerformanceOptimizer.getCurrentMetrics(),
                network: network_monitor_1.networkMonitorService.getCurrentState(),
                queue: await local_operation_1.localOperationService.getQueueStats()
            };
        }
        catch (error) {
            console.error('Failed to get detailed stats:', error);
            throw error;
        }
    }
    // 健康检查
    async healthCheck() {
        const components = { ...this.componentsReady };
        const issues = [];
        const recommendations = [];
        let isHealthy = true;
        // 检查组件状态
        for (const [component, ready] of Object.entries(components)) {
            if (!ready) {
                isHealthy = false;
                issues.push(`${component} is not ready`);
                recommendations.push(`Check ${component} initialization`);
            }
        }
        // 检查网络状态
        const networkInfo = network_monitor_1.networkMonitorService.getCurrentState();
        if (!networkInfo.online) {
            issues.push('Network is offline');
            recommendations.push('Check network connection');
        }
        // 检查认证状态
        if (!auth_1.authService.isAuthenticated()) {
            issues.push('User is not authenticated');
            recommendations.push('Please login to enable sync');
        }
        // 检查队列状态
        try {
            const queueStats = await local_operation_1.localOperationService.getQueueStats();
            if (queueStats.failedOperations > 50) {
                issues.push('High number of failed operations');
                recommendations.push('Retry failed operations or check network connectivity');
            }
        }
        catch (error) {
            issues.push('Cannot access queue status');
            recommendations.push('Check local operation service');
        }
        return {
            isHealthy,
            components,
            issues,
            recommendations
        };
    }
    // 执行健康检查（简化版）
    async performHealthCheck() {
        const systemHealth = await this.performSystemHealthCheck();
        // 计算健康分数 (0-100)
        let score = 100;
        const issues = [];
        // 基于组件状态计算分数
        const componentWeights = {
            localQueue: 0.3,
            networkMonitor: 0.2,
            syncStrategy: 0.3,
            performanceOptimizer: 0.2
        };
        Object.entries(systemHealth.components).forEach(([component, health]) => {
            if (health.status === 'critical') {
                score -= componentWeights[component] * 50;
                issues.push(`${component}: ${health.message}`);
            }
            else if (health.status === 'warning') {
                score -= componentWeights[component] * 20;
                issues.push(`${component}: ${health.message}`);
            }
            else if (health.status === 'healthy') {
                // 无扣分
            }
        });
        // 基于问题数量额外扣分
        score -= systemHealth.issues.length * 5;
        // 确保分数在0-100范围内
        score = Math.max(0, Math.min(100, score));
        const isHealthy = score >= 70 && systemHealth.isHealthy;
        if (!isHealthy) {
            console.warn(`System health check failed: score ${score}, issues: ${issues.join(', ')}`);
        }
        return {
            isHealthy,
            score,
            issues: issues.length > 0 ? issues : ['System is healthy'],
            timestamp: new Date()
        };
    }
    // 销毁服务
    async destroy() {
        try {
            await this.stop();
            // 销毁各个组件
            if (this.config.components.localQueue) {
                local_operation_1.localOperationService.destroy();
            }
            if (this.config.components.networkMonitor) {
                network_monitor_1.networkMonitorService.destroy();
            }
            if (this.config.components.performanceOptimizer) {
                sync_performance_1.syncPerformanceOptimizer.destroy();
            }
            this.listeners.clear();
            console.log('SyncIntegrationService destroyed');
        }
        catch (error) {
            console.error('Failed to destroy SyncIntegrationService:', error);
        }
    }
}
exports.SyncIntegrationService = SyncIntegrationService;
// 导出单例实例
exports.syncIntegrationService = new SyncIntegrationService();
// ============================================================================
// 便利函数
// ============================================================================
// 初始化同步系统
const initializeSyncSystem = async (config) => {
    const service = new SyncIntegrationService(config);
    await service.start();
    return service;
};
exports.initializeSyncSystem = initializeSyncSystem;
// 添加卡片同步操作
const addCardSyncOperation = async (operationType, card, options) => {
    return await exports.syncIntegrationService.addSyncOperation('card', operationType, card, options);
};
exports.addCardSyncOperation = addCardSyncOperation;
// 添加文件夹同步操作
const addFolderSyncOperation = async (operationType, folder, options) => {
    return await exports.syncIntegrationService.addSyncOperation('folder', operationType, folder, options);
};
exports.addFolderSyncOperation = addFolderSyncOperation;
// 添加标签同步操作
const addTagSyncOperation = async (operationType, tag, options) => {
    return await exports.syncIntegrationService.addSyncOperation('tag', operationType, tag, options);
};
exports.addTagSyncOperation = addTagSyncOperation;
// 添加图片同步操作
const addImageSyncOperation = async (operationType, image, options) => {
    return await exports.syncIntegrationService.addSyncOperation('image', operationType, image, options);
};
exports.addImageSyncOperation = addImageSyncOperation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
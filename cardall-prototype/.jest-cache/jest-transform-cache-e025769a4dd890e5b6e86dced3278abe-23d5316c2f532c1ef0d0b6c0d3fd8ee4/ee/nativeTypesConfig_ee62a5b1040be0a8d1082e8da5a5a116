ad12e4706af937e16fd96a857e9a6f45
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nativeTypesConfig = void 0;
const NativeTypes = require("../NativeTypes.js");
const getDataFromDataTransfer_js_1 = require("./getDataFromDataTransfer.js");
exports.nativeTypesConfig = {
    [NativeTypes.FILE]: {
        exposeProperties: {
            files: (dataTransfer) => Array.prototype.slice.call(dataTransfer.files),
            items: (dataTransfer) => dataTransfer.items,
            dataTransfer: (dataTransfer) => dataTransfer
        },
        matchesTypes: [
            'Files'
        ]
    },
    [NativeTypes.HTML]: {
        exposeProperties: {
            html: (dataTransfer, matchesTypes) => (0, getDataFromDataTransfer_js_1.getDataFromDataTransfer)(dataTransfer, matchesTypes, ''),
            dataTransfer: (dataTransfer) => dataTransfer
        },
        matchesTypes: [
            'Html',
            'text/html'
        ]
    },
    [NativeTypes.URL]: {
        exposeProperties: {
            urls: (dataTransfer, matchesTypes) => (0, getDataFromDataTransfer_js_1.getDataFromDataTransfer)(dataTransfer, matchesTypes, '').split('\n'),
            dataTransfer: (dataTransfer) => dataTransfer
        },
        matchesTypes: [
            'Url',
            'text/uri-list'
        ]
    },
    [NativeTypes.TEXT]: {
        exposeProperties: {
            text: (dataTransfer, matchesTypes) => (0, getDataFromDataTransfer_js_1.getDataFromDataTransfer)(dataTransfer, matchesTypes, ''),
            dataTransfer: (dataTransfer) => dataTransfer
        },
        matchesTypes: [
            'Text',
            'text/plain'
        ]
    }
};
//# sourceMappingURL=nativeTypesConfig.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXG5vZGVfbW9kdWxlc1xccmVhY3QtZG5kLWh0bWw1LWJhY2tlbmRcXGRpc3RcXE5hdGl2ZURyYWdTb3VyY2VzXFxuYXRpdmVUeXBlc0NvbmZpZy5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxpREFBaUQ7QUFDakQsNkVBQXVFO0FBQzFELFFBQUEsaUJBQWlCLEdBQUc7SUFDN0IsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDaEIsZ0JBQWdCLEVBQUU7WUFDZCxLQUFLLEVBQUUsQ0FBQyxZQUFZLEVBQUMsRUFBRSxDQUFBLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO1lBRXJFLEtBQUssRUFBRSxDQUFDLFlBQVksRUFBQyxFQUFFLENBQUEsWUFBWSxDQUFDLEtBQUs7WUFFekMsWUFBWSxFQUFFLENBQUMsWUFBWSxFQUFDLEVBQUUsQ0FBQSxZQUFZO1NBQzdDO1FBQ0QsWUFBWSxFQUFFO1lBQ1YsT0FBTztTQUNWO0tBQ0o7SUFDRCxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNoQixnQkFBZ0IsRUFBRTtZQUNkLElBQUksRUFBRSxDQUFDLFlBQVksRUFBRSxZQUFZLEVBQUMsRUFBRSxDQUFBLElBQUEsb0RBQXVCLEVBQUMsWUFBWSxFQUFFLFlBQVksRUFBRSxFQUFFLENBQUM7WUFFM0YsWUFBWSxFQUFFLENBQUMsWUFBWSxFQUFDLEVBQUUsQ0FBQSxZQUFZO1NBQzdDO1FBQ0QsWUFBWSxFQUFFO1lBQ1YsTUFBTTtZQUNOLFdBQVc7U0FDZDtLQUNKO0lBQ0QsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDZixnQkFBZ0IsRUFBRTtZQUNkLElBQUksRUFBRSxDQUFDLFlBQVksRUFBRSxZQUFZLEVBQUMsRUFBRSxDQUFBLElBQUEsb0RBQXVCLEVBQUMsWUFBWSxFQUFFLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO1lBRXZHLFlBQVksRUFBRSxDQUFDLFlBQVksRUFBQyxFQUFFLENBQUEsWUFBWTtTQUM3QztRQUNELFlBQVksRUFBRTtZQUNWLEtBQUs7WUFDTCxlQUFlO1NBQ2xCO0tBQ0o7SUFDRCxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNoQixnQkFBZ0IsRUFBRTtZQUNkLElBQUksRUFBRSxDQUFDLFlBQVksRUFBRSxZQUFZLEVBQUMsRUFBRSxDQUFBLElBQUEsb0RBQXVCLEVBQUMsWUFBWSxFQUFFLFlBQVksRUFBRSxFQUFFLENBQUM7WUFFM0YsWUFBWSxFQUFFLENBQUMsWUFBWSxFQUFDLEVBQUUsQ0FBQSxZQUFZO1NBQzdDO1FBQ0QsWUFBWSxFQUFFO1lBQ1YsTUFBTTtZQUNOLFlBQVk7U0FDZjtLQUNKO0NBQ0osQ0FBQztBQUVGLDZDQUE2QyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJEOlxcUHJvamVjdHNcXENhcmRFdmVyeXRoaW5nXFxjYXJkYWxsLXByb3RvdHlwZVxcbm9kZV9tb2R1bGVzXFxyZWFjdC1kbmQtaHRtbDUtYmFja2VuZFxcZGlzdFxcTmF0aXZlRHJhZ1NvdXJjZXNcXG5hdGl2ZVR5cGVzQ29uZmlnLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIE5hdGl2ZVR5cGVzIGZyb20gJy4uL05hdGl2ZVR5cGVzLmpzJztcbmltcG9ydCB7IGdldERhdGFGcm9tRGF0YVRyYW5zZmVyIH0gZnJvbSAnLi9nZXREYXRhRnJvbURhdGFUcmFuc2Zlci5qcyc7XG5leHBvcnQgY29uc3QgbmF0aXZlVHlwZXNDb25maWcgPSB7XG4gICAgW05hdGl2ZVR5cGVzLkZJTEVdOiB7XG4gICAgICAgIGV4cG9zZVByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGZpbGVzOiAoZGF0YVRyYW5zZmVyKT0+QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZGF0YVRyYW5zZmVyLmZpbGVzKVxuICAgICAgICAgICAgLFxuICAgICAgICAgICAgaXRlbXM6IChkYXRhVHJhbnNmZXIpPT5kYXRhVHJhbnNmZXIuaXRlbXNcbiAgICAgICAgICAgICxcbiAgICAgICAgICAgIGRhdGFUcmFuc2ZlcjogKGRhdGFUcmFuc2Zlcik9PmRhdGFUcmFuc2ZlclxuICAgICAgICB9LFxuICAgICAgICBtYXRjaGVzVHlwZXM6IFtcbiAgICAgICAgICAgICdGaWxlcydcbiAgICAgICAgXVxuICAgIH0sXG4gICAgW05hdGl2ZVR5cGVzLkhUTUxdOiB7XG4gICAgICAgIGV4cG9zZVByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGh0bWw6IChkYXRhVHJhbnNmZXIsIG1hdGNoZXNUeXBlcyk9PmdldERhdGFGcm9tRGF0YVRyYW5zZmVyKGRhdGFUcmFuc2ZlciwgbWF0Y2hlc1R5cGVzLCAnJylcbiAgICAgICAgICAgICxcbiAgICAgICAgICAgIGRhdGFUcmFuc2ZlcjogKGRhdGFUcmFuc2Zlcik9PmRhdGFUcmFuc2ZlclxuICAgICAgICB9LFxuICAgICAgICBtYXRjaGVzVHlwZXM6IFtcbiAgICAgICAgICAgICdIdG1sJyxcbiAgICAgICAgICAgICd0ZXh0L2h0bWwnXG4gICAgICAgIF1cbiAgICB9LFxuICAgIFtOYXRpdmVUeXBlcy5VUkxdOiB7XG4gICAgICAgIGV4cG9zZVByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIHVybHM6IChkYXRhVHJhbnNmZXIsIG1hdGNoZXNUeXBlcyk9PmdldERhdGFGcm9tRGF0YVRyYW5zZmVyKGRhdGFUcmFuc2ZlciwgbWF0Y2hlc1R5cGVzLCAnJykuc3BsaXQoJ1xcbicpXG4gICAgICAgICAgICAsXG4gICAgICAgICAgICBkYXRhVHJhbnNmZXI6IChkYXRhVHJhbnNmZXIpPT5kYXRhVHJhbnNmZXJcbiAgICAgICAgfSxcbiAgICAgICAgbWF0Y2hlc1R5cGVzOiBbXG4gICAgICAgICAgICAnVXJsJyxcbiAgICAgICAgICAgICd0ZXh0L3VyaS1saXN0J1xuICAgICAgICBdXG4gICAgfSxcbiAgICBbTmF0aXZlVHlwZXMuVEVYVF06IHtcbiAgICAgICAgZXhwb3NlUHJvcGVydGllczoge1xuICAgICAgICAgICAgdGV4dDogKGRhdGFUcmFuc2ZlciwgbWF0Y2hlc1R5cGVzKT0+Z2V0RGF0YUZyb21EYXRhVHJhbnNmZXIoZGF0YVRyYW5zZmVyLCBtYXRjaGVzVHlwZXMsICcnKVxuICAgICAgICAgICAgLFxuICAgICAgICAgICAgZGF0YVRyYW5zZmVyOiAoZGF0YVRyYW5zZmVyKT0+ZGF0YVRyYW5zZmVyXG4gICAgICAgIH0sXG4gICAgICAgIG1hdGNoZXNUeXBlczogW1xuICAgICAgICAgICAgJ1RleHQnLFxuICAgICAgICAgICAgJ3RleHQvcGxhaW4nXG4gICAgICAgIF1cbiAgICB9XG59O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1uYXRpdmVUeXBlc0NvbmZpZy5qcy5tYXAiXSwidmVyc2lvbiI6M30=
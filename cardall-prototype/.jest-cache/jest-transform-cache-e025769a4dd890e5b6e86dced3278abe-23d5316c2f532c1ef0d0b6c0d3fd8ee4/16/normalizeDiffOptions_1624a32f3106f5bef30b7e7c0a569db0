2bde4c50d79d3af80e40b6c6ed0988ac
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
exports.normalizeDiffOptions = exports.noColor = void 0;
var _chalk = _interopRequireDefault(require('chalk'));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
const noColor = string => string;
exports.noColor = noColor;
const DIFF_CONTEXT_DEFAULT = 5;
const OPTIONS_DEFAULT = {
    aAnnotation: 'Expected',
    aColor: _chalk.default.green,
    aIndicator: '-',
    bAnnotation: 'Received',
    bColor: _chalk.default.red,
    bIndicator: '+',
    changeColor: _chalk.default.inverse,
    changeLineTrailingSpaceColor: noColor,
    commonColor: _chalk.default.dim,
    commonIndicator: ' ',
    commonLineTrailingSpaceColor: noColor,
    compareKeys: undefined,
    contextLines: DIFF_CONTEXT_DEFAULT,
    emptyFirstOrLastLinePlaceholder: '',
    expand: true,
    includeChangeCounts: false,
    omitAnnotationLines: false,
    patchColor: _chalk.default.yellow
};
const getCompareKeys = compareKeys => compareKeys && typeof compareKeys === 'function'
    ? compareKeys
    : OPTIONS_DEFAULT.compareKeys;
const getContextLines = contextLines => typeof contextLines === 'number' &&
    Number.isSafeInteger(contextLines) &&
    contextLines >= 0
    ? contextLines
    : DIFF_CONTEXT_DEFAULT;
// Pure function returns options with all properties.
const normalizeDiffOptions = (options = {}) => ({
    ...OPTIONS_DEFAULT,
    ...options,
    compareKeys: getCompareKeys(options.compareKeys),
    contextLines: getContextLines(options.contextLines)
});
exports.normalizeDiffOptions = normalizeDiffOptions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXG5vZGVfbW9kdWxlc1xcamVzdC1heGVcXG5vZGVfbW9kdWxlc1xcamVzdC1kaWZmXFxidWlsZFxcbm9ybWFsaXplRGlmZk9wdGlvbnMuanMiLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBRWIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0lBQzNDLEtBQUssRUFBRSxJQUFJO0NBQ1osQ0FBQyxDQUFDO0FBQ0gsT0FBTyxDQUFDLG9CQUFvQixHQUFHLE9BQU8sQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDeEQsSUFBSSxNQUFNLEdBQUcsc0JBQXNCLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDdEQsU0FBUyxzQkFBc0IsQ0FBQyxHQUFHO0lBQ2pDLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBQyxPQUFPLEVBQUUsR0FBRyxFQUFDLENBQUM7QUFDdEQsQ0FBQztBQUNEOzs7OztHQUtHO0FBRUgsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUM7QUFDakMsT0FBTyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7QUFDMUIsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLENBQUM7QUFDL0IsTUFBTSxlQUFlLEdBQUc7SUFDdEIsV0FBVyxFQUFFLFVBQVU7SUFDdkIsTUFBTSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSztJQUM1QixVQUFVLEVBQUUsR0FBRztJQUNmLFdBQVcsRUFBRSxVQUFVO0lBQ3ZCLE1BQU0sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUc7SUFDMUIsVUFBVSxFQUFFLEdBQUc7SUFDZixXQUFXLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPO0lBQ25DLDRCQUE0QixFQUFFLE9BQU87SUFDckMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRztJQUMvQixlQUFlLEVBQUUsR0FBRztJQUNwQiw0QkFBNEIsRUFBRSxPQUFPO0lBQ3JDLFdBQVcsRUFBRSxTQUFTO0lBQ3RCLFlBQVksRUFBRSxvQkFBb0I7SUFDbEMsK0JBQStCLEVBQUUsRUFBRTtJQUNuQyxNQUFNLEVBQUUsSUFBSTtJQUNaLG1CQUFtQixFQUFFLEtBQUs7SUFDMUIsbUJBQW1CLEVBQUUsS0FBSztJQUMxQixVQUFVLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNO0NBQ2xDLENBQUM7QUFDRixNQUFNLGNBQWMsR0FBRyxXQUFXLENBQUMsRUFBRSxDQUNuQyxXQUFXLElBQUksT0FBTyxXQUFXLEtBQUssVUFBVTtJQUM5QyxDQUFDLENBQUMsV0FBVztJQUNiLENBQUMsQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDO0FBQ2xDLE1BQU0sZUFBZSxHQUFHLFlBQVksQ0FBQyxFQUFFLENBQ3JDLE9BQU8sWUFBWSxLQUFLLFFBQVE7SUFDaEMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUM7SUFDbEMsWUFBWSxJQUFJLENBQUM7SUFDZixDQUFDLENBQUMsWUFBWTtJQUNkLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQztBQUUzQixxREFBcUQ7QUFDckQsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLE9BQU8sR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDOUMsR0FBRyxlQUFlO0lBQ2xCLEdBQUcsT0FBTztJQUNWLFdBQVcsRUFBRSxjQUFjLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQztJQUNoRCxZQUFZLEVBQUUsZUFBZSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7Q0FDcEQsQ0FBQyxDQUFDO0FBQ0gsT0FBTyxDQUFDLG9CQUFvQixHQUFHLG9CQUFvQixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkQ6XFxQcm9qZWN0c1xcQ2FyZEV2ZXJ5dGhpbmdcXGNhcmRhbGwtcHJvdG90eXBlXFxub2RlX21vZHVsZXNcXGplc3QtYXhlXFxub2RlX21vZHVsZXNcXGplc3QtZGlmZlxcYnVpbGRcXG5vcm1hbGl6ZURpZmZPcHRpb25zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLm5vcm1hbGl6ZURpZmZPcHRpb25zID0gZXhwb3J0cy5ub0NvbG9yID0gdm9pZCAwO1xudmFyIF9jaGFsayA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgnY2hhbGsnKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge2RlZmF1bHQ6IG9ian07XG59XG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuY29uc3Qgbm9Db2xvciA9IHN0cmluZyA9PiBzdHJpbmc7XG5leHBvcnRzLm5vQ29sb3IgPSBub0NvbG9yO1xuY29uc3QgRElGRl9DT05URVhUX0RFRkFVTFQgPSA1O1xuY29uc3QgT1BUSU9OU19ERUZBVUxUID0ge1xuICBhQW5ub3RhdGlvbjogJ0V4cGVjdGVkJyxcbiAgYUNvbG9yOiBfY2hhbGsuZGVmYXVsdC5ncmVlbixcbiAgYUluZGljYXRvcjogJy0nLFxuICBiQW5ub3RhdGlvbjogJ1JlY2VpdmVkJyxcbiAgYkNvbG9yOiBfY2hhbGsuZGVmYXVsdC5yZWQsXG4gIGJJbmRpY2F0b3I6ICcrJyxcbiAgY2hhbmdlQ29sb3I6IF9jaGFsay5kZWZhdWx0LmludmVyc2UsXG4gIGNoYW5nZUxpbmVUcmFpbGluZ1NwYWNlQ29sb3I6IG5vQ29sb3IsXG4gIGNvbW1vbkNvbG9yOiBfY2hhbGsuZGVmYXVsdC5kaW0sXG4gIGNvbW1vbkluZGljYXRvcjogJyAnLFxuICBjb21tb25MaW5lVHJhaWxpbmdTcGFjZUNvbG9yOiBub0NvbG9yLFxuICBjb21wYXJlS2V5czogdW5kZWZpbmVkLFxuICBjb250ZXh0TGluZXM6IERJRkZfQ09OVEVYVF9ERUZBVUxULFxuICBlbXB0eUZpcnN0T3JMYXN0TGluZVBsYWNlaG9sZGVyOiAnJyxcbiAgZXhwYW5kOiB0cnVlLFxuICBpbmNsdWRlQ2hhbmdlQ291bnRzOiBmYWxzZSxcbiAgb21pdEFubm90YXRpb25MaW5lczogZmFsc2UsXG4gIHBhdGNoQ29sb3I6IF9jaGFsay5kZWZhdWx0LnllbGxvd1xufTtcbmNvbnN0IGdldENvbXBhcmVLZXlzID0gY29tcGFyZUtleXMgPT5cbiAgY29tcGFyZUtleXMgJiYgdHlwZW9mIGNvbXBhcmVLZXlzID09PSAnZnVuY3Rpb24nXG4gICAgPyBjb21wYXJlS2V5c1xuICAgIDogT1BUSU9OU19ERUZBVUxULmNvbXBhcmVLZXlzO1xuY29uc3QgZ2V0Q29udGV4dExpbmVzID0gY29udGV4dExpbmVzID0+XG4gIHR5cGVvZiBjb250ZXh0TGluZXMgPT09ICdudW1iZXInICYmXG4gIE51bWJlci5pc1NhZmVJbnRlZ2VyKGNvbnRleHRMaW5lcykgJiZcbiAgY29udGV4dExpbmVzID49IDBcbiAgICA/IGNvbnRleHRMaW5lc1xuICAgIDogRElGRl9DT05URVhUX0RFRkFVTFQ7XG5cbi8vIFB1cmUgZnVuY3Rpb24gcmV0dXJucyBvcHRpb25zIHdpdGggYWxsIHByb3BlcnRpZXMuXG5jb25zdCBub3JtYWxpemVEaWZmT3B0aW9ucyA9IChvcHRpb25zID0ge30pID0+ICh7XG4gIC4uLk9QVElPTlNfREVGQVVMVCxcbiAgLi4ub3B0aW9ucyxcbiAgY29tcGFyZUtleXM6IGdldENvbXBhcmVLZXlzKG9wdGlvbnMuY29tcGFyZUtleXMpLFxuICBjb250ZXh0TGluZXM6IGdldENvbnRleHRMaW5lcyhvcHRpb25zLmNvbnRleHRMaW5lcylcbn0pO1xuZXhwb3J0cy5ub3JtYWxpemVEaWZmT3B0aW9ucyA9IG5vcm1hbGl6ZURpZmZPcHRpb25zO1xuIl0sInZlcnNpb24iOjN9
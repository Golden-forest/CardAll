69f2c0a68d91c8147afe517b394d1148
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.queryByTitle = exports.queryAllByTitle = exports.getByTitle = exports.getAllByTitle = exports.findByTitle = exports.findAllByTitle = void 0;
var _queryHelpers = require("../query-helpers");
var _helpers = require("../helpers");
var _allUtils = require("./all-utils");
const isSvgTitle = node => node.tagName.toLowerCase() === 'title' && node.parentElement?.tagName.toLowerCase() === 'svg';
const queryAllByTitle = (container, text, { exact = true, collapseWhitespace, trim, normalizer } = {}) => {
    (0, _helpers.checkContainerType)(container);
    const matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;
    const matchNormalizer = (0, _allUtils.makeNormalizer)({
        collapseWhitespace,
        trim,
        normalizer
    });
    return Array.from(container.querySelectorAll('[title], svg > title')).filter(node => matcher(node.getAttribute('title'), node, text, matchNormalizer) || isSvgTitle(node) && matcher((0, _allUtils.getNodeText)(node), node, text, matchNormalizer));
};
const getMultipleError = (c, title) => `Found multiple elements with the title: ${title}.`;
const getMissingError = (c, title) => `Unable to find an element with the title: ${title}.`;
const queryAllByTitleWithSuggestions = exports.queryAllByTitle = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByTitle, queryAllByTitle.name, 'queryAll');
const [queryByTitle, getAllByTitle, getByTitle, findAllByTitle, findByTitle] = (0, _allUtils.buildQueries)(queryAllByTitle, getMultipleError, getMissingError);
exports.findByTitle = findByTitle;
exports.findAllByTitle = findAllByTitle;
exports.getByTitle = getByTitle;
exports.getAllByTitle = getAllByTitle;
exports.queryByTitle = queryByTitle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXG5vZGVfbW9kdWxlc1xcQHRlc3RpbmctbGlicmFyeVxcZG9tXFxkaXN0XFxxdWVyaWVzXFx0aXRsZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUU7SUFDM0MsS0FBSyxFQUFFLElBQUk7Q0FDWixDQUFDLENBQUM7QUFDSCxPQUFPLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQyxlQUFlLEdBQUcsT0FBTyxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsYUFBYSxHQUFHLE9BQU8sQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUNwSixJQUFJLGFBQWEsR0FBRyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUNoRCxJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDckMsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3ZDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsS0FBSyxPQUFPLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsV0FBVyxFQUFFLEtBQUssS0FBSyxDQUFDO0FBQ3pILE1BQU0sZUFBZSxHQUFHLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUN4QyxLQUFLLEdBQUcsSUFBSSxFQUNaLGtCQUFrQixFQUNsQixJQUFJLEVBQ0osVUFBVSxFQUNYLEdBQUcsRUFBRSxFQUFFLEVBQUU7SUFDUixDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUM7SUFDbkUsTUFBTSxlQUFlLEdBQUcsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3BELGtCQUFrQjtRQUNsQixJQUFJO1FBQ0osVUFBVTtLQUNYLENBQUMsQ0FBQztJQUNILE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsZUFBZSxDQUFDLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxlQUFlLENBQUMsQ0FBQyxDQUFDO0FBQ3ZQLENBQUMsQ0FBQztBQUNGLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQywyQ0FBMkMsS0FBSyxHQUFHLENBQUM7QUFDM0YsTUFBTSxlQUFlLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyw2Q0FBNkMsS0FBSyxHQUFHLENBQUM7QUFDNUYsTUFBTSw4QkFBOEIsR0FBRyxPQUFPLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLGVBQWUsRUFBRSxlQUFlLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3BLLE1BQU0sQ0FBQyxZQUFZLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxlQUFlLENBQUMsQ0FBQztBQUMvSixPQUFPLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztBQUNsQyxPQUFPLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztBQUN4QyxPQUFPLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztBQUNoQyxPQUFPLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztBQUN0QyxPQUFPLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJEOlxcUHJvamVjdHNcXENhcmRFdmVyeXRoaW5nXFxjYXJkYWxsLXByb3RvdHlwZVxcbm9kZV9tb2R1bGVzXFxAdGVzdGluZy1saWJyYXJ5XFxkb21cXGRpc3RcXHF1ZXJpZXNcXHRpdGxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5xdWVyeUJ5VGl0bGUgPSBleHBvcnRzLnF1ZXJ5QWxsQnlUaXRsZSA9IGV4cG9ydHMuZ2V0QnlUaXRsZSA9IGV4cG9ydHMuZ2V0QWxsQnlUaXRsZSA9IGV4cG9ydHMuZmluZEJ5VGl0bGUgPSBleHBvcnRzLmZpbmRBbGxCeVRpdGxlID0gdm9pZCAwO1xudmFyIF9xdWVyeUhlbHBlcnMgPSByZXF1aXJlKFwiLi4vcXVlcnktaGVscGVyc1wiKTtcbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzXCIpO1xudmFyIF9hbGxVdGlscyA9IHJlcXVpcmUoXCIuL2FsbC11dGlsc1wiKTtcbmNvbnN0IGlzU3ZnVGl0bGUgPSBub2RlID0+IG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAndGl0bGUnICYmIG5vZGUucGFyZW50RWxlbWVudD8udGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnc3ZnJztcbmNvbnN0IHF1ZXJ5QWxsQnlUaXRsZSA9IChjb250YWluZXIsIHRleHQsIHtcbiAgZXhhY3QgPSB0cnVlLFxuICBjb2xsYXBzZVdoaXRlc3BhY2UsXG4gIHRyaW0sXG4gIG5vcm1hbGl6ZXJcbn0gPSB7fSkgPT4ge1xuICAoMCwgX2hlbHBlcnMuY2hlY2tDb250YWluZXJUeXBlKShjb250YWluZXIpO1xuICBjb25zdCBtYXRjaGVyID0gZXhhY3QgPyBfYWxsVXRpbHMubWF0Y2hlcyA6IF9hbGxVdGlscy5mdXp6eU1hdGNoZXM7XG4gIGNvbnN0IG1hdGNoTm9ybWFsaXplciA9ICgwLCBfYWxsVXRpbHMubWFrZU5vcm1hbGl6ZXIpKHtcbiAgICBjb2xsYXBzZVdoaXRlc3BhY2UsXG4gICAgdHJpbSxcbiAgICBub3JtYWxpemVyXG4gIH0pO1xuICByZXR1cm4gQXJyYXkuZnJvbShjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnW3RpdGxlXSwgc3ZnID4gdGl0bGUnKSkuZmlsdGVyKG5vZGUgPT4gbWF0Y2hlcihub2RlLmdldEF0dHJpYnV0ZSgndGl0bGUnKSwgbm9kZSwgdGV4dCwgbWF0Y2hOb3JtYWxpemVyKSB8fCBpc1N2Z1RpdGxlKG5vZGUpICYmIG1hdGNoZXIoKDAsIF9hbGxVdGlscy5nZXROb2RlVGV4dCkobm9kZSksIG5vZGUsIHRleHQsIG1hdGNoTm9ybWFsaXplcikpO1xufTtcbmNvbnN0IGdldE11bHRpcGxlRXJyb3IgPSAoYywgdGl0bGUpID0+IGBGb3VuZCBtdWx0aXBsZSBlbGVtZW50cyB3aXRoIHRoZSB0aXRsZTogJHt0aXRsZX0uYDtcbmNvbnN0IGdldE1pc3NpbmdFcnJvciA9IChjLCB0aXRsZSkgPT4gYFVuYWJsZSB0byBmaW5kIGFuIGVsZW1lbnQgd2l0aCB0aGUgdGl0bGU6ICR7dGl0bGV9LmA7XG5jb25zdCBxdWVyeUFsbEJ5VGl0bGVXaXRoU3VnZ2VzdGlvbnMgPSBleHBvcnRzLnF1ZXJ5QWxsQnlUaXRsZSA9ICgwLCBfcXVlcnlIZWxwZXJzLndyYXBBbGxCeVF1ZXJ5V2l0aFN1Z2dlc3Rpb24pKHF1ZXJ5QWxsQnlUaXRsZSwgcXVlcnlBbGxCeVRpdGxlLm5hbWUsICdxdWVyeUFsbCcpO1xuY29uc3QgW3F1ZXJ5QnlUaXRsZSwgZ2V0QWxsQnlUaXRsZSwgZ2V0QnlUaXRsZSwgZmluZEFsbEJ5VGl0bGUsIGZpbmRCeVRpdGxlXSA9ICgwLCBfYWxsVXRpbHMuYnVpbGRRdWVyaWVzKShxdWVyeUFsbEJ5VGl0bGUsIGdldE11bHRpcGxlRXJyb3IsIGdldE1pc3NpbmdFcnJvcik7XG5leHBvcnRzLmZpbmRCeVRpdGxlID0gZmluZEJ5VGl0bGU7XG5leHBvcnRzLmZpbmRBbGxCeVRpdGxlID0gZmluZEFsbEJ5VGl0bGU7XG5leHBvcnRzLmdldEJ5VGl0bGUgPSBnZXRCeVRpdGxlO1xuZXhwb3J0cy5nZXRBbGxCeVRpdGxlID0gZ2V0QWxsQnlUaXRsZTtcbmV4cG9ydHMucXVlcnlCeVRpdGxlID0gcXVlcnlCeVRpdGxlOyJdLCJ2ZXJzaW9uIjozfQ==
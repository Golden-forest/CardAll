b7de6df67353540c174488553ff9cf08
"use strict";
exports.__esModule = true;
exports.isInaccessible = isInaccessible;
exports.isSubtreeInaccessible = isSubtreeInaccessible;
/**
 * Partial implementation https://www.w3.org/TR/wai-aria-1.2/#tree_exclusion
 * which should only be used for elements with a non-presentational role i.e.
 * `role="none"` and `role="presentation"` will not be excluded.
 *
 * Implements aria-hidden semantics (i.e. parent overrides child)
 * Ignores "Child Presentational: True" characteristics
 *
 * @param element
 * @param options
 * @returns {boolean} true if excluded, otherwise false
 */
function isInaccessible(element) {
    var _element$ownerDocumen;
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _options$getComputedS = options.getComputedStyle, getComputedStyle = _options$getComputedS === void 0 ? (_element$ownerDocumen = element.ownerDocument.defaultView) === null || _element$ownerDocumen === void 0 ? void 0 : _element$ownerDocumen.getComputedStyle : _options$getComputedS, _options$isSubtreeIna = options.isSubtreeInaccessible, isSubtreeInaccessibleImpl = _options$isSubtreeIna === void 0 ? isSubtreeInaccessible : _options$isSubtreeIna;
    if (typeof getComputedStyle !== "function") {
        throw new TypeError("Owner document of the element needs to have an associated window.");
    }
    // since visibility is inherited we can exit early
    if (getComputedStyle(element).visibility === "hidden") {
        return true;
    }
    var currentElement = element;
    while (currentElement) {
        if (isSubtreeInaccessibleImpl(currentElement, {
            getComputedStyle: getComputedStyle
        })) {
            return true;
        }
        currentElement = currentElement.parentElement;
    }
    return false;
}
/**
 *
 * @param element
 * @param options
 * @returns {boolean} - `true` if every child of the element is inaccessible
 */
function isSubtreeInaccessible(element) {
    var _element$ownerDocumen2;
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _options$getComputedS2 = options.getComputedStyle, getComputedStyle = _options$getComputedS2 === void 0 ? (_element$ownerDocumen2 = element.ownerDocument.defaultView) === null || _element$ownerDocumen2 === void 0 ? void 0 : _element$ownerDocumen2.getComputedStyle : _options$getComputedS2;
    if (typeof getComputedStyle !== "function") {
        throw new TypeError("Owner document of the element needs to have an associated window.");
    }
    if (element.hidden === true) {
        return true;
    }
    if (element.getAttribute("aria-hidden") === "true") {
        return true;
    }
    if (getComputedStyle(element).display === "none") {
        return true;
    }
    return false;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXG5vZGVfbW9kdWxlc1xcZG9tLWFjY2Vzc2liaWxpdHktYXBpXFxkaXN0XFxpcy1pbmFjY2Vzc2libGUuanMiLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBRWIsT0FBTyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7QUFDMUIsT0FBTyxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7QUFDeEMsT0FBTyxDQUFDLHFCQUFxQixHQUFHLHFCQUFxQixDQUFDO0FBQ3REOzs7Ozs7Ozs7OztHQVdHO0FBQ0gsU0FBUyxjQUFjLENBQUMsT0FBTztJQUM3QixJQUFJLHFCQUFxQixDQUFDO0lBQzFCLElBQUksT0FBTyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ3JGLElBQUkscUJBQXFCLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixFQUNsRCxnQkFBZ0IsR0FBRyxxQkFBcUIsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxLQUFLLElBQUksSUFBSSxxQkFBcUIsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxxQkFBcUIsRUFDeE8scUJBQXFCLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixFQUNyRCx5QkFBeUIsR0FBRyxxQkFBcUIsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDO0lBQy9HLElBQUksT0FBTyxnQkFBZ0IsS0FBSyxVQUFVLEVBQUUsQ0FBQztRQUMzQyxNQUFNLElBQUksU0FBUyxDQUFDLG1FQUFtRSxDQUFDLENBQUM7SUFDM0YsQ0FBQztJQUNELGtEQUFrRDtJQUNsRCxJQUFJLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsS0FBSyxRQUFRLEVBQUUsQ0FBQztRQUN0RCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFDRCxJQUFJLGNBQWMsR0FBRyxPQUFPLENBQUM7SUFDN0IsT0FBTyxjQUFjLEVBQUUsQ0FBQztRQUN0QixJQUFJLHlCQUF5QixDQUFDLGNBQWMsRUFBRTtZQUM1QyxnQkFBZ0IsRUFBRSxnQkFBZ0I7U0FDbkMsQ0FBQyxFQUFFLENBQUM7WUFDSCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFDRCxjQUFjLEdBQUcsY0FBYyxDQUFDLGFBQWEsQ0FBQztJQUNoRCxDQUFDO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBQ0Q7Ozs7O0dBS0c7QUFDSCxTQUFTLHFCQUFxQixDQUFDLE9BQU87SUFDcEMsSUFBSSxzQkFBc0IsQ0FBQztJQUMzQixJQUFJLE9BQU8sR0FBRyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNyRixJQUFJLHNCQUFzQixHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsRUFDbkQsZ0JBQWdCLEdBQUcsc0JBQXNCLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsc0JBQXNCLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsS0FBSyxJQUFJLElBQUksc0JBQXNCLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsc0JBQXNCLENBQUM7SUFDaFAsSUFBSSxPQUFPLGdCQUFnQixLQUFLLFVBQVUsRUFBRSxDQUFDO1FBQzNDLE1BQU0sSUFBSSxTQUFTLENBQUMsbUVBQW1FLENBQUMsQ0FBQztJQUMzRixDQUFDO0lBQ0QsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLElBQUksRUFBRSxDQUFDO1FBQzVCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUNELElBQUksT0FBTyxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsS0FBSyxNQUFNLEVBQUUsQ0FBQztRQUNuRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFDRCxJQUFJLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sS0FBSyxNQUFNLEVBQUUsQ0FBQztRQUNqRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXG5vZGVfbW9kdWxlc1xcZG9tLWFjY2Vzc2liaWxpdHktYXBpXFxkaXN0XFxpcy1pbmFjY2Vzc2libGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmlzSW5hY2Nlc3NpYmxlID0gaXNJbmFjY2Vzc2libGU7XG5leHBvcnRzLmlzU3VidHJlZUluYWNjZXNzaWJsZSA9IGlzU3VidHJlZUluYWNjZXNzaWJsZTtcbi8qKlxuICogUGFydGlhbCBpbXBsZW1lbnRhdGlvbiBodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4yLyN0cmVlX2V4Y2x1c2lvblxuICogd2hpY2ggc2hvdWxkIG9ubHkgYmUgdXNlZCBmb3IgZWxlbWVudHMgd2l0aCBhIG5vbi1wcmVzZW50YXRpb25hbCByb2xlIGkuZS5cbiAqIGByb2xlPVwibm9uZVwiYCBhbmQgYHJvbGU9XCJwcmVzZW50YXRpb25cImAgd2lsbCBub3QgYmUgZXhjbHVkZWQuXG4gKlxuICogSW1wbGVtZW50cyBhcmlhLWhpZGRlbiBzZW1hbnRpY3MgKGkuZS4gcGFyZW50IG92ZXJyaWRlcyBjaGlsZClcbiAqIElnbm9yZXMgXCJDaGlsZCBQcmVzZW50YXRpb25hbDogVHJ1ZVwiIGNoYXJhY3RlcmlzdGljc1xuICpcbiAqIEBwYXJhbSBlbGVtZW50XG4gKiBAcGFyYW0gb3B0aW9uc1xuICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgZXhjbHVkZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0luYWNjZXNzaWJsZShlbGVtZW50KSB7XG4gIHZhciBfZWxlbWVudCRvd25lckRvY3VtZW47XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgdmFyIF9vcHRpb25zJGdldENvbXB1dGVkUyA9IG9wdGlvbnMuZ2V0Q29tcHV0ZWRTdHlsZSxcbiAgICBnZXRDb21wdXRlZFN0eWxlID0gX29wdGlvbnMkZ2V0Q29tcHV0ZWRTID09PSB2b2lkIDAgPyAoX2VsZW1lbnQkb3duZXJEb2N1bWVuID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSA9PT0gbnVsbCB8fCBfZWxlbWVudCRvd25lckRvY3VtZW4gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lbGVtZW50JG93bmVyRG9jdW1lbi5nZXRDb21wdXRlZFN0eWxlIDogX29wdGlvbnMkZ2V0Q29tcHV0ZWRTLFxuICAgIF9vcHRpb25zJGlzU3VidHJlZUluYSA9IG9wdGlvbnMuaXNTdWJ0cmVlSW5hY2Nlc3NpYmxlLFxuICAgIGlzU3VidHJlZUluYWNjZXNzaWJsZUltcGwgPSBfb3B0aW9ucyRpc1N1YnRyZWVJbmEgPT09IHZvaWQgMCA/IGlzU3VidHJlZUluYWNjZXNzaWJsZSA6IF9vcHRpb25zJGlzU3VidHJlZUluYTtcbiAgaWYgKHR5cGVvZiBnZXRDb21wdXRlZFN0eWxlICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT3duZXIgZG9jdW1lbnQgb2YgdGhlIGVsZW1lbnQgbmVlZHMgdG8gaGF2ZSBhbiBhc3NvY2lhdGVkIHdpbmRvdy5cIik7XG4gIH1cbiAgLy8gc2luY2UgdmlzaWJpbGl0eSBpcyBpbmhlcml0ZWQgd2UgY2FuIGV4aXQgZWFybHlcbiAgaWYgKGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkudmlzaWJpbGl0eSA9PT0gXCJoaWRkZW5cIikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBjdXJyZW50RWxlbWVudCA9IGVsZW1lbnQ7XG4gIHdoaWxlIChjdXJyZW50RWxlbWVudCkge1xuICAgIGlmIChpc1N1YnRyZWVJbmFjY2Vzc2libGVJbXBsKGN1cnJlbnRFbGVtZW50LCB7XG4gICAgICBnZXRDb21wdXRlZFN0eWxlOiBnZXRDb21wdXRlZFN0eWxlXG4gICAgfSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjdXJyZW50RWxlbWVudCA9IGN1cnJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKlxuICogQHBhcmFtIGVsZW1lbnRcbiAqIEBwYXJhbSBvcHRpb25zXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSBgdHJ1ZWAgaWYgZXZlcnkgY2hpbGQgb2YgdGhlIGVsZW1lbnQgaXMgaW5hY2Nlc3NpYmxlXG4gKi9cbmZ1bmN0aW9uIGlzU3VidHJlZUluYWNjZXNzaWJsZShlbGVtZW50KSB7XG4gIHZhciBfZWxlbWVudCRvd25lckRvY3VtZW4yO1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHZhciBfb3B0aW9ucyRnZXRDb21wdXRlZFMyID0gb3B0aW9ucy5nZXRDb21wdXRlZFN0eWxlLFxuICAgIGdldENvbXB1dGVkU3R5bGUgPSBfb3B0aW9ucyRnZXRDb21wdXRlZFMyID09PSB2b2lkIDAgPyAoX2VsZW1lbnQkb3duZXJEb2N1bWVuMiA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldykgPT09IG51bGwgfHwgX2VsZW1lbnQkb3duZXJEb2N1bWVuMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2VsZW1lbnQkb3duZXJEb2N1bWVuMi5nZXRDb21wdXRlZFN0eWxlIDogX29wdGlvbnMkZ2V0Q29tcHV0ZWRTMjtcbiAgaWYgKHR5cGVvZiBnZXRDb21wdXRlZFN0eWxlICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT3duZXIgZG9jdW1lbnQgb2YgdGhlIGVsZW1lbnQgbmVlZHMgdG8gaGF2ZSBhbiBhc3NvY2lhdGVkIHdpbmRvdy5cIik7XG4gIH1cbiAgaWYgKGVsZW1lbnQuaGlkZGVuID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIikgPT09IFwidHJ1ZVwiKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkuZGlzcGxheSA9PT0gXCJub25lXCIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pcy1pbmFjY2Vzc2libGUuanMubWFwIl0sInZlcnNpb24iOjN9
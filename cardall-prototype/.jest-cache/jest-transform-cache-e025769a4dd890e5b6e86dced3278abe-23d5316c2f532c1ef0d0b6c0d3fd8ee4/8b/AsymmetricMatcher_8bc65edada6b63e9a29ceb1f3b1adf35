948fca0930cf33105496a321f5adc283
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
exports.test = exports.serialize = exports.default = void 0;
var _collections = require('../collections');
var Symbol = globalThis['jest-symbol-do-not-touch'] || globalThis.Symbol;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
const asymmetricMatcher = typeof Symbol === 'function' && Symbol.for
    ? Symbol.for('jest.asymmetricMatcher')
    : 0x1357a5;
const SPACE = ' ';
const serialize = (val, config, indentation, depth, refs, printer) => {
    const stringedValue = val.toString();
    if (stringedValue === 'ArrayContaining' ||
        stringedValue === 'ArrayNotContaining') {
        if (++depth > config.maxDepth) {
            return `[${stringedValue}]`;
        }
        return `${stringedValue + SPACE}[${(0, _collections.printListItems)(val.sample, config, indentation, depth, refs, printer)}]`;
    }
    if (stringedValue === 'ObjectContaining' ||
        stringedValue === 'ObjectNotContaining') {
        if (++depth > config.maxDepth) {
            return `[${stringedValue}]`;
        }
        return `${stringedValue + SPACE}{${(0, _collections.printObjectProperties)(val.sample, config, indentation, depth, refs, printer)}}`;
    }
    if (stringedValue === 'StringMatching' ||
        stringedValue === 'StringNotMatching') {
        return (stringedValue +
            SPACE +
            printer(val.sample, config, indentation, depth, refs));
    }
    if (stringedValue === 'StringContaining' ||
        stringedValue === 'StringNotContaining') {
        return (stringedValue +
            SPACE +
            printer(val.sample, config, indentation, depth, refs));
    }
    if (typeof val.toAsymmetricMatcher !== 'function') {
        throw new Error(`Asymmetric matcher ${val.constructor.name} does not implement toAsymmetricMatcher()`);
    }
    return val.toAsymmetricMatcher();
};
exports.serialize = serialize;
const test = val => val && val.$$typeof === asymmetricMatcher;
exports.test = test;
const plugin = {
    serialize,
    test
};
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXG5vZGVfbW9kdWxlc1xcamVzdC1heGVcXG5vZGVfbW9kdWxlc1xccHJldHR5LWZvcm1hdFxcYnVpbGRcXHBsdWdpbnNcXEFzeW1tZXRyaWNNYXRjaGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRTtJQUMzQyxLQUFLLEVBQUUsSUFBSTtDQUNaLENBQUMsQ0FBQztBQUNILE9BQU8sQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQzVELElBQUksWUFBWSxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQzdDLElBQUksTUFBTSxHQUFHLFVBQVUsQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUM7QUFDekU7Ozs7O0dBS0c7QUFDSCxNQUFNLGlCQUFpQixHQUNyQixPQUFPLE1BQU0sS0FBSyxVQUFVLElBQUksTUFBTSxDQUFDLEdBQUc7SUFDeEMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUM7SUFDdEMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUNmLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQztBQUNsQixNQUFNLFNBQVMsR0FBRyxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEVBQUU7SUFDbkUsTUFBTSxhQUFhLEdBQUcsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3JDLElBQ0UsYUFBYSxLQUFLLGlCQUFpQjtRQUNuQyxhQUFhLEtBQUssb0JBQW9CLEVBQ3RDLENBQUM7UUFDRCxJQUFJLEVBQUUsS0FBSyxHQUFHLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUM5QixPQUFPLElBQUksYUFBYSxHQUFHLENBQUM7UUFDOUIsQ0FBQztRQUNELE9BQU8sR0FBRyxhQUFhLEdBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxjQUFjLENBQUMsQ0FDakUsR0FBRyxDQUFDLE1BQU0sRUFDVixNQUFNLEVBQ04sV0FBVyxFQUNYLEtBQUssRUFDTCxJQUFJLEVBQ0osT0FBTyxDQUNSLEdBQUcsQ0FBQztJQUNQLENBQUM7SUFDRCxJQUNFLGFBQWEsS0FBSyxrQkFBa0I7UUFDcEMsYUFBYSxLQUFLLHFCQUFxQixFQUN2QyxDQUFDO1FBQ0QsSUFBSSxFQUFFLEtBQUssR0FBRyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDOUIsT0FBTyxJQUFJLGFBQWEsR0FBRyxDQUFDO1FBQzlCLENBQUM7UUFDRCxPQUFPLEdBQUcsYUFBYSxHQUFHLEtBQUssSUFBSSxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMscUJBQXFCLENBQUMsQ0FDeEUsR0FBRyxDQUFDLE1BQU0sRUFDVixNQUFNLEVBQ04sV0FBVyxFQUNYLEtBQUssRUFDTCxJQUFJLEVBQ0osT0FBTyxDQUNSLEdBQUcsQ0FBQztJQUNQLENBQUM7SUFDRCxJQUNFLGFBQWEsS0FBSyxnQkFBZ0I7UUFDbEMsYUFBYSxLQUFLLG1CQUFtQixFQUNyQyxDQUFDO1FBQ0QsT0FBTyxDQUNMLGFBQWE7WUFDYixLQUFLO1lBQ0wsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQ3RELENBQUM7SUFDSixDQUFDO0lBQ0QsSUFDRSxhQUFhLEtBQUssa0JBQWtCO1FBQ3BDLGFBQWEsS0FBSyxxQkFBcUIsRUFDdkMsQ0FBQztRQUNELE9BQU8sQ0FDTCxhQUFhO1lBQ2IsS0FBSztZQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUN0RCxDQUFDO0lBQ0osQ0FBQztJQUNELElBQUksT0FBTyxHQUFHLENBQUMsbUJBQW1CLEtBQUssVUFBVSxFQUFFLENBQUM7UUFDbEQsTUFBTSxJQUFJLEtBQUssQ0FDYixzQkFBc0IsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLDJDQUEyQyxDQUN0RixDQUFDO0lBQ0osQ0FBQztJQUNELE9BQU8sR0FBRyxDQUFDLG1CQUFtQixFQUFFLENBQUM7QUFDbkMsQ0FBQyxDQUFDO0FBQ0YsT0FBTyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7QUFDOUIsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsS0FBSyxpQkFBaUIsQ0FBQztBQUM5RCxPQUFPLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztBQUNwQixNQUFNLE1BQU0sR0FBRztJQUNiLFNBQVM7SUFDVCxJQUFJO0NBQ0wsQ0FBQztBQUNGLElBQUksUUFBUSxHQUFHLE1BQU0sQ0FBQztBQUN0QixPQUFPLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJEOlxcUHJvamVjdHNcXENhcmRFdmVyeXRoaW5nXFxjYXJkYWxsLXByb3RvdHlwZVxcbm9kZV9tb2R1bGVzXFxqZXN0LWF4ZVxcbm9kZV9tb2R1bGVzXFxwcmV0dHktZm9ybWF0XFxidWlsZFxccGx1Z2luc1xcQXN5bW1ldHJpY01hdGNoZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMudGVzdCA9IGV4cG9ydHMuc2VyaWFsaXplID0gZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9jb2xsZWN0aW9ucyA9IHJlcXVpcmUoJy4uL2NvbGxlY3Rpb25zJyk7XG52YXIgU3ltYm9sID0gZ2xvYmFsVGhpc1snamVzdC1zeW1ib2wtZG8tbm90LXRvdWNoJ10gfHwgZ2xvYmFsVGhpcy5TeW1ib2w7XG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmNvbnN0IGFzeW1tZXRyaWNNYXRjaGVyID1cbiAgdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yXG4gICAgPyBTeW1ib2wuZm9yKCdqZXN0LmFzeW1tZXRyaWNNYXRjaGVyJylcbiAgICA6IDB4MTM1N2E1O1xuY29uc3QgU1BBQ0UgPSAnICc7XG5jb25zdCBzZXJpYWxpemUgPSAodmFsLCBjb25maWcsIGluZGVudGF0aW9uLCBkZXB0aCwgcmVmcywgcHJpbnRlcikgPT4ge1xuICBjb25zdCBzdHJpbmdlZFZhbHVlID0gdmFsLnRvU3RyaW5nKCk7XG4gIGlmIChcbiAgICBzdHJpbmdlZFZhbHVlID09PSAnQXJyYXlDb250YWluaW5nJyB8fFxuICAgIHN0cmluZ2VkVmFsdWUgPT09ICdBcnJheU5vdENvbnRhaW5pbmcnXG4gICkge1xuICAgIGlmICgrK2RlcHRoID4gY29uZmlnLm1heERlcHRoKSB7XG4gICAgICByZXR1cm4gYFske3N0cmluZ2VkVmFsdWV9XWA7XG4gICAgfVxuICAgIHJldHVybiBgJHtzdHJpbmdlZFZhbHVlICsgU1BBQ0V9WyR7KDAsIF9jb2xsZWN0aW9ucy5wcmludExpc3RJdGVtcykoXG4gICAgICB2YWwuc2FtcGxlLFxuICAgICAgY29uZmlnLFxuICAgICAgaW5kZW50YXRpb24sXG4gICAgICBkZXB0aCxcbiAgICAgIHJlZnMsXG4gICAgICBwcmludGVyXG4gICAgKX1dYDtcbiAgfVxuICBpZiAoXG4gICAgc3RyaW5nZWRWYWx1ZSA9PT0gJ09iamVjdENvbnRhaW5pbmcnIHx8XG4gICAgc3RyaW5nZWRWYWx1ZSA9PT0gJ09iamVjdE5vdENvbnRhaW5pbmcnXG4gICkge1xuICAgIGlmICgrK2RlcHRoID4gY29uZmlnLm1heERlcHRoKSB7XG4gICAgICByZXR1cm4gYFske3N0cmluZ2VkVmFsdWV9XWA7XG4gICAgfVxuICAgIHJldHVybiBgJHtzdHJpbmdlZFZhbHVlICsgU1BBQ0V9eyR7KDAsIF9jb2xsZWN0aW9ucy5wcmludE9iamVjdFByb3BlcnRpZXMpKFxuICAgICAgdmFsLnNhbXBsZSxcbiAgICAgIGNvbmZpZyxcbiAgICAgIGluZGVudGF0aW9uLFxuICAgICAgZGVwdGgsXG4gICAgICByZWZzLFxuICAgICAgcHJpbnRlclxuICAgICl9fWA7XG4gIH1cbiAgaWYgKFxuICAgIHN0cmluZ2VkVmFsdWUgPT09ICdTdHJpbmdNYXRjaGluZycgfHxcbiAgICBzdHJpbmdlZFZhbHVlID09PSAnU3RyaW5nTm90TWF0Y2hpbmcnXG4gICkge1xuICAgIHJldHVybiAoXG4gICAgICBzdHJpbmdlZFZhbHVlICtcbiAgICAgIFNQQUNFICtcbiAgICAgIHByaW50ZXIodmFsLnNhbXBsZSwgY29uZmlnLCBpbmRlbnRhdGlvbiwgZGVwdGgsIHJlZnMpXG4gICAgKTtcbiAgfVxuICBpZiAoXG4gICAgc3RyaW5nZWRWYWx1ZSA9PT0gJ1N0cmluZ0NvbnRhaW5pbmcnIHx8XG4gICAgc3RyaW5nZWRWYWx1ZSA9PT0gJ1N0cmluZ05vdENvbnRhaW5pbmcnXG4gICkge1xuICAgIHJldHVybiAoXG4gICAgICBzdHJpbmdlZFZhbHVlICtcbiAgICAgIFNQQUNFICtcbiAgICAgIHByaW50ZXIodmFsLnNhbXBsZSwgY29uZmlnLCBpbmRlbnRhdGlvbiwgZGVwdGgsIHJlZnMpXG4gICAgKTtcbiAgfVxuICBpZiAodHlwZW9mIHZhbC50b0FzeW1tZXRyaWNNYXRjaGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEFzeW1tZXRyaWMgbWF0Y2hlciAke3ZhbC5jb25zdHJ1Y3Rvci5uYW1lfSBkb2VzIG5vdCBpbXBsZW1lbnQgdG9Bc3ltbWV0cmljTWF0Y2hlcigpYFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHZhbC50b0FzeW1tZXRyaWNNYXRjaGVyKCk7XG59O1xuZXhwb3J0cy5zZXJpYWxpemUgPSBzZXJpYWxpemU7XG5jb25zdCB0ZXN0ID0gdmFsID0+IHZhbCAmJiB2YWwuJCR0eXBlb2YgPT09IGFzeW1tZXRyaWNNYXRjaGVyO1xuZXhwb3J0cy50ZXN0ID0gdGVzdDtcbmNvbnN0IHBsdWdpbiA9IHtcbiAgc2VyaWFsaXplLFxuICB0ZXN0XG59O1xudmFyIF9kZWZhdWx0ID0gcGx1Z2luO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG4iXSwidmVyc2lvbiI6M30=
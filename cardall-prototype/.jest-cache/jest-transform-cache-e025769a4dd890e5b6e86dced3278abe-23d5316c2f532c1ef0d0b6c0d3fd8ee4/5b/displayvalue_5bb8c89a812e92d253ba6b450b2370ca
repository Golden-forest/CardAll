564632ec21216c371ea49b5359c7ae34
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.queryByDisplayValue = exports.queryAllByDisplayValue = exports.getByDisplayValue = exports.getAllByDisplayValue = exports.findByDisplayValue = exports.findAllByDisplayValue = void 0;
var _queryHelpers = require("../query-helpers");
var _helpers = require("../helpers");
var _allUtils = require("./all-utils");
const queryAllByDisplayValue = (container, value, { exact = true, collapseWhitespace, trim, normalizer } = {}) => {
    (0, _helpers.checkContainerType)(container);
    const matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;
    const matchNormalizer = (0, _allUtils.makeNormalizer)({
        collapseWhitespace,
        trim,
        normalizer
    });
    return Array.from(container.querySelectorAll(`input,textarea,select`)).filter(node => {
        if (node.tagName === 'SELECT') {
            const selectedOptions = Array.from(node.options).filter(option => option.selected);
            return selectedOptions.some(optionNode => matcher((0, _allUtils.getNodeText)(optionNode), optionNode, value, matchNormalizer));
        }
        else {
            return matcher(node.value, node, value, matchNormalizer);
        }
    });
};
const getMultipleError = (c, value) => `Found multiple elements with the display value: ${value}.`;
const getMissingError = (c, value) => `Unable to find an element with the display value: ${value}.`;
const queryAllByDisplayValueWithSuggestions = exports.queryAllByDisplayValue = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByDisplayValue, queryAllByDisplayValue.name, 'queryAll');
const [queryByDisplayValue, getAllByDisplayValue, getByDisplayValue, findAllByDisplayValue, findByDisplayValue] = (0, _allUtils.buildQueries)(queryAllByDisplayValue, getMultipleError, getMissingError);
exports.findByDisplayValue = findByDisplayValue;
exports.findAllByDisplayValue = findAllByDisplayValue;
exports.getByDisplayValue = getByDisplayValue;
exports.getAllByDisplayValue = getAllByDisplayValue;
exports.queryByDisplayValue = queryByDisplayValue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXFByb2plY3RzXFxDYXJkRXZlcnl0aGluZ1xcY2FyZGFsbC1wcm90b3R5cGVcXG5vZGVfbW9kdWxlc1xcQHRlc3RpbmctbGlicmFyeVxcZG9tXFxkaXN0XFxxdWVyaWVzXFxkaXNwbGF5LXZhbHVlLmpzIiwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRTtJQUMzQyxLQUFLLEVBQUUsSUFBSTtDQUNaLENBQUMsQ0FBQztBQUNILE9BQU8sQ0FBQyxtQkFBbUIsR0FBRyxPQUFPLENBQUMsc0JBQXNCLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsR0FBRyxPQUFPLENBQUMsa0JBQWtCLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQzlMLElBQUksYUFBYSxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQ2hELElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNyQyxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDdkMsTUFBTSxzQkFBc0IsR0FBRyxDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsRUFDaEQsS0FBSyxHQUFHLElBQUksRUFDWixrQkFBa0IsRUFDbEIsSUFBSSxFQUNKLFVBQVUsRUFDWCxHQUFHLEVBQUUsRUFBRSxFQUFFO0lBQ1IsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLGtCQUFrQixDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDNUMsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDO0lBQ25FLE1BQU0sZUFBZSxHQUFHLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNwRCxrQkFBa0I7UUFDbEIsSUFBSTtRQUNKLFVBQVU7S0FDWCxDQUFDLENBQUM7SUFDSCxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDbkYsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLFFBQVEsRUFBRSxDQUFDO1lBQzlCLE1BQU0sZUFBZSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNuRixPQUFPLGVBQWUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQztRQUNqSSxDQUFDO2FBQU0sQ0FBQztZQUNOLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxlQUFlLENBQUMsQ0FBQztRQUMzRCxDQUFDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUFDRixNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsbURBQW1ELEtBQUssR0FBRyxDQUFDO0FBQ25HLE1BQU0sZUFBZSxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMscURBQXFELEtBQUssR0FBRyxDQUFDO0FBQ3BHLE1BQU0scUNBQXFDLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixHQUFHLENBQUMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLHNCQUFzQixFQUFFLHNCQUFzQixDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNoTSxNQUFNLENBQUMsbUJBQW1CLEVBQUUsb0JBQW9CLEVBQUUsaUJBQWlCLEVBQUUscUJBQXFCLEVBQUUsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUMsc0JBQXNCLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxDQUFDLENBQUM7QUFDek0sT0FBTyxDQUFDLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDO0FBQ2hELE9BQU8sQ0FBQyxxQkFBcUIsR0FBRyxxQkFBcUIsQ0FBQztBQUN0RCxPQUFPLENBQUMsaUJBQWlCLEdBQUcsaUJBQWlCLENBQUM7QUFDOUMsT0FBTyxDQUFDLG9CQUFvQixHQUFHLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sQ0FBQyxtQkFBbUIsR0FBRyxtQkFBbUIsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJEOlxcUHJvamVjdHNcXENhcmRFdmVyeXRoaW5nXFxjYXJkYWxsLXByb3RvdHlwZVxcbm9kZV9tb2R1bGVzXFxAdGVzdGluZy1saWJyYXJ5XFxkb21cXGRpc3RcXHF1ZXJpZXNcXGRpc3BsYXktdmFsdWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnF1ZXJ5QnlEaXNwbGF5VmFsdWUgPSBleHBvcnRzLnF1ZXJ5QWxsQnlEaXNwbGF5VmFsdWUgPSBleHBvcnRzLmdldEJ5RGlzcGxheVZhbHVlID0gZXhwb3J0cy5nZXRBbGxCeURpc3BsYXlWYWx1ZSA9IGV4cG9ydHMuZmluZEJ5RGlzcGxheVZhbHVlID0gZXhwb3J0cy5maW5kQWxsQnlEaXNwbGF5VmFsdWUgPSB2b2lkIDA7XG52YXIgX3F1ZXJ5SGVscGVycyA9IHJlcXVpcmUoXCIuLi9xdWVyeS1oZWxwZXJzXCIpO1xudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL2hlbHBlcnNcIik7XG52YXIgX2FsbFV0aWxzID0gcmVxdWlyZShcIi4vYWxsLXV0aWxzXCIpO1xuY29uc3QgcXVlcnlBbGxCeURpc3BsYXlWYWx1ZSA9IChjb250YWluZXIsIHZhbHVlLCB7XG4gIGV4YWN0ID0gdHJ1ZSxcbiAgY29sbGFwc2VXaGl0ZXNwYWNlLFxuICB0cmltLFxuICBub3JtYWxpemVyXG59ID0ge30pID0+IHtcbiAgKDAsIF9oZWxwZXJzLmNoZWNrQ29udGFpbmVyVHlwZSkoY29udGFpbmVyKTtcbiAgY29uc3QgbWF0Y2hlciA9IGV4YWN0ID8gX2FsbFV0aWxzLm1hdGNoZXMgOiBfYWxsVXRpbHMuZnV6enlNYXRjaGVzO1xuICBjb25zdCBtYXRjaE5vcm1hbGl6ZXIgPSAoMCwgX2FsbFV0aWxzLm1ha2VOb3JtYWxpemVyKSh7XG4gICAgY29sbGFwc2VXaGl0ZXNwYWNlLFxuICAgIHRyaW0sXG4gICAgbm9ybWFsaXplclxuICB9KTtcbiAgcmV0dXJuIEFycmF5LmZyb20oY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoYGlucHV0LHRleHRhcmVhLHNlbGVjdGApKS5maWx0ZXIobm9kZSA9PiB7XG4gICAgaWYgKG5vZGUudGFnTmFtZSA9PT0gJ1NFTEVDVCcpIHtcbiAgICAgIGNvbnN0IHNlbGVjdGVkT3B0aW9ucyA9IEFycmF5LmZyb20obm9kZS5vcHRpb25zKS5maWx0ZXIob3B0aW9uID0+IG9wdGlvbi5zZWxlY3RlZCk7XG4gICAgICByZXR1cm4gc2VsZWN0ZWRPcHRpb25zLnNvbWUob3B0aW9uTm9kZSA9PiBtYXRjaGVyKCgwLCBfYWxsVXRpbHMuZ2V0Tm9kZVRleHQpKG9wdGlvbk5vZGUpLCBvcHRpb25Ob2RlLCB2YWx1ZSwgbWF0Y2hOb3JtYWxpemVyKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtYXRjaGVyKG5vZGUudmFsdWUsIG5vZGUsIHZhbHVlLCBtYXRjaE5vcm1hbGl6ZXIpO1xuICAgIH1cbiAgfSk7XG59O1xuY29uc3QgZ2V0TXVsdGlwbGVFcnJvciA9IChjLCB2YWx1ZSkgPT4gYEZvdW5kIG11bHRpcGxlIGVsZW1lbnRzIHdpdGggdGhlIGRpc3BsYXkgdmFsdWU6ICR7dmFsdWV9LmA7XG5jb25zdCBnZXRNaXNzaW5nRXJyb3IgPSAoYywgdmFsdWUpID0+IGBVbmFibGUgdG8gZmluZCBhbiBlbGVtZW50IHdpdGggdGhlIGRpc3BsYXkgdmFsdWU6ICR7dmFsdWV9LmA7XG5jb25zdCBxdWVyeUFsbEJ5RGlzcGxheVZhbHVlV2l0aFN1Z2dlc3Rpb25zID0gZXhwb3J0cy5xdWVyeUFsbEJ5RGlzcGxheVZhbHVlID0gKDAsIF9xdWVyeUhlbHBlcnMud3JhcEFsbEJ5UXVlcnlXaXRoU3VnZ2VzdGlvbikocXVlcnlBbGxCeURpc3BsYXlWYWx1ZSwgcXVlcnlBbGxCeURpc3BsYXlWYWx1ZS5uYW1lLCAncXVlcnlBbGwnKTtcbmNvbnN0IFtxdWVyeUJ5RGlzcGxheVZhbHVlLCBnZXRBbGxCeURpc3BsYXlWYWx1ZSwgZ2V0QnlEaXNwbGF5VmFsdWUsIGZpbmRBbGxCeURpc3BsYXlWYWx1ZSwgZmluZEJ5RGlzcGxheVZhbHVlXSA9ICgwLCBfYWxsVXRpbHMuYnVpbGRRdWVyaWVzKShxdWVyeUFsbEJ5RGlzcGxheVZhbHVlLCBnZXRNdWx0aXBsZUVycm9yLCBnZXRNaXNzaW5nRXJyb3IpO1xuZXhwb3J0cy5maW5kQnlEaXNwbGF5VmFsdWUgPSBmaW5kQnlEaXNwbGF5VmFsdWU7XG5leHBvcnRzLmZpbmRBbGxCeURpc3BsYXlWYWx1ZSA9IGZpbmRBbGxCeURpc3BsYXlWYWx1ZTtcbmV4cG9ydHMuZ2V0QnlEaXNwbGF5VmFsdWUgPSBnZXRCeURpc3BsYXlWYWx1ZTtcbmV4cG9ydHMuZ2V0QWxsQnlEaXNwbGF5VmFsdWUgPSBnZXRBbGxCeURpc3BsYXlWYWx1ZTtcbmV4cG9ydHMucXVlcnlCeURpc3BsYXlWYWx1ZSA9IHF1ZXJ5QnlEaXNwbGF5VmFsdWU7Il0sInZlcnNpb24iOjN9
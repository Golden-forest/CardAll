name: Automated Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        type: string
      prerelease:
        description: 'Is this a prerelease?'
        required: true
        type: boolean
        default: false

jobs:
  release-prep:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
            IS_PRERELEASE="false"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Releasing version $VERSION"

  build-and-test:
    runs-on: ubuntu-latest
    needs: release-prep
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Run full test suite
        run: |
          npm run lint
          npm run type-check
          npm run test:coverage
          npm run test:e2e
          
      - name: Build for production
        run: npm run build:prod
        env:
          NODE_ENV: production
          VITE_APP_VERSION: ${{ needs.release-prep.outputs.version }}
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.node-version }}
          path: dist/

  security-audit:
    runs-on: ubuntu-latest
    needs: release-prep
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Run comprehensive security audit
        run: |
          npm audit --audit-level=moderate
          npm audit --production --audit-level=moderate
          
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  create-release:
    runs-on: ubuntu-latest
    needs: [release-prep, build-and-test, security-audit]
    permissions:
      contents: write
      packages: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-20.x
          path: dist/
          
      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git commits
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          git log --pretty=format:"%h - %s (%an)" $(git describe --tags --abbrev=0)..HEAD >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.release-prep.outputs.version }}
          release_name: Release v${{ needs.release-prep.outputs.version }}
          body: |
            ## üéâ Release v${{ needs.release-prep.outputs.version }}
            
            ${{ env.CHANGELOG }}
            
            ## üì¶ Installation
            
            ```bash
            npm install cardall@${{ needs.release-prep.outputs.version }}
            ```
            
            ## üöÄ Features
            
            <!-- Add release notes here -->
            
            ## üêõ Bug Fixes
            
            <!-- Add bug fixes here -->
            
            ## üìù Documentation
            
            <!-- Add documentation updates here -->
            
          draft: false
          prerelease: ${{ needs.release-prep.outputs.is-prerelease }}
          
      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/cardall-${{ needs.release-prep.outputs.version }}.tar.gz
          asset_name: cardall-${{ needs.release-prep.outputs.version }}.tar.gz
          asset_content_type: application/gzip

  publish-npm:
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      packages: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Publish to GitHub Packages
        run: npm publish --registry=https://npm.pkg.github.com
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: create-release
    if: ${{ !needs.release-prep.outputs.is-prerelease }}
    environment:
      name: production
      url: https://cardall.example.com
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-20.x
          path: dist/
          
      - name: Deploy to production
        run: |
          # Add your deployment commands here
          echo "Deploying version ${{ needs.release-prep.outputs.version }} to production..."
          
          # Example: Deploy to Vercel
          # npx vercel --prod --token=${{ secrets.VERCEL_TOKEN }}
          
          # Example: Deploy to Netlify
          # npx netlify deploy --prod --auth=${{ secrets.NETLIFY_AUTH_TOKEN }}
          
      - name: Run post-deployment tests
        run: |
          # Add post-deployment smoke tests
          echo "Running post-deployment tests..."
          npm run test:smoke

  notify-team:
    runs-on: ubuntu-latest
    needs: [publish-npm, deploy-production]
    if: always()
    
    steps:
      - name: Notify team about release
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#releases'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          
      - name: Send release notification email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: 'CardAll v${{ needs.release-prep.outputs.version }} Released! üéâ'
          body: |
            CardAll v${{ needs.release-prep.outputs.version }} has been successfully released!
            
            Version: ${{ needs.release-prep.outputs.version }}
            Release Date: ${{ github.event.created_at }}
            Release Notes: ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ needs.release-prep.outputs.version }}
            
            Best regards,
            CardAll Team
          to: team@cardall.com
          from: ${{ secrets.EMAIL_FROM }}